
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20001770 10002659 1000514f 10002615     p.. Y&..OQ...&..
	...
1000012c:	10002415 00000000 00000000 100023b5     .$...........#..
1000013c:	10002f49                                I/..

10000140 <_irq_vector_table>:
10000140:	10002485 10002485 10002485 10002485     .$...$...$...$..
10000150:	10002485 10002485 10002485 10002485     .$...$...$...$..
10000160:	10002485 10002485 10002485 10002485     .$...$...$...$..
10000170:	10002485 10002485 10002485 10002485     .$...$...$...$..
10000180:	10002485 10002485 10002485 10002485     .$...$...$...$..
10000190:	10002485 10002485 10002485 10002485     .$...$...$...$..
100001a0:	10002485 10002485                       .$...$..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__ctzsi2>:
1000029c:	4241      	negs	r1, r0
1000029e:	4008      	ands	r0, r1
100002a0:	211c      	movs	r1, #28
100002a2:	2301      	movs	r3, #1
100002a4:	041b      	lsls	r3, r3, #16
100002a6:	4298      	cmp	r0, r3
100002a8:	d301      	bcc.n	100002ae <__ctzsi2+0x12>
100002aa:	0c00      	lsrs	r0, r0, #16
100002ac:	3910      	subs	r1, #16
100002ae:	0a1b      	lsrs	r3, r3, #8
100002b0:	4298      	cmp	r0, r3
100002b2:	d301      	bcc.n	100002b8 <__ctzsi2+0x1c>
100002b4:	0a00      	lsrs	r0, r0, #8
100002b6:	3908      	subs	r1, #8
100002b8:	091b      	lsrs	r3, r3, #4
100002ba:	4298      	cmp	r0, r3
100002bc:	d301      	bcc.n	100002c2 <__ctzsi2+0x26>
100002be:	0900      	lsrs	r0, r0, #4
100002c0:	3904      	subs	r1, #4
100002c2:	a202      	add	r2, pc, #8	; (adr r2, 100002cc <__ctzsi2+0x30>)
100002c4:	5c10      	ldrb	r0, [r2, r0]
100002c6:	1a40      	subs	r0, r0, r1
100002c8:	4770      	bx	lr
100002ca:	46c0      	nop			; (mov r8, r8)
100002cc:	1d1d1c1b 	.word	0x1d1d1c1b
100002d0:	1e1e1e1e 	.word	0x1e1e1e1e
100002d4:	1f1f1f1f 	.word	0x1f1f1f1f
100002d8:	1f1f1f1f 	.word	0x1f1f1f1f

100002dc <__aeabi_uldivmod>:
100002dc:	2b00      	cmp	r3, #0
100002de:	d111      	bne.n	10000304 <__aeabi_uldivmod+0x28>
100002e0:	2a00      	cmp	r2, #0
100002e2:	d10f      	bne.n	10000304 <__aeabi_uldivmod+0x28>
100002e4:	2900      	cmp	r1, #0
100002e6:	d100      	bne.n	100002ea <__aeabi_uldivmod+0xe>
100002e8:	2800      	cmp	r0, #0
100002ea:	d002      	beq.n	100002f2 <__aeabi_uldivmod+0x16>
100002ec:	2100      	movs	r1, #0
100002ee:	43c9      	mvns	r1, r1
100002f0:	0008      	movs	r0, r1
100002f2:	b407      	push	{r0, r1, r2}
100002f4:	4802      	ldr	r0, [pc, #8]	; (10000300 <__aeabi_uldivmod+0x24>)
100002f6:	a102      	add	r1, pc, #8	; (adr r1, 10000300 <__aeabi_uldivmod+0x24>)
100002f8:	1840      	adds	r0, r0, r1
100002fa:	9002      	str	r0, [sp, #8]
100002fc:	bd03      	pop	{r0, r1, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	ffffff5d 	.word	0xffffff5d
10000304:	b403      	push	{r0, r1}
10000306:	4668      	mov	r0, sp
10000308:	b501      	push	{r0, lr}
1000030a:	9802      	ldr	r0, [sp, #8]
1000030c:	f000 f84c 	bl	100003a8 <__udivmoddi4>
10000310:	9b01      	ldr	r3, [sp, #4]
10000312:	469e      	mov	lr, r3
10000314:	b002      	add	sp, #8
10000316:	bc0c      	pop	{r2, r3}
10000318:	4770      	bx	lr
1000031a:	46c0      	nop			; (mov r8, r8)

1000031c <__aeabi_llsr>:
1000031c:	40d0      	lsrs	r0, r2
1000031e:	000b      	movs	r3, r1
10000320:	40d1      	lsrs	r1, r2
10000322:	469c      	mov	ip, r3
10000324:	3a20      	subs	r2, #32
10000326:	40d3      	lsrs	r3, r2
10000328:	4318      	orrs	r0, r3
1000032a:	4252      	negs	r2, r2
1000032c:	4663      	mov	r3, ip
1000032e:	4093      	lsls	r3, r2
10000330:	4318      	orrs	r0, r3
10000332:	4770      	bx	lr

10000334 <__aeabi_llsl>:
10000334:	4091      	lsls	r1, r2
10000336:	0003      	movs	r3, r0
10000338:	4090      	lsls	r0, r2
1000033a:	469c      	mov	ip, r3
1000033c:	3a20      	subs	r2, #32
1000033e:	4093      	lsls	r3, r2
10000340:	4319      	orrs	r1, r3
10000342:	4252      	negs	r2, r2
10000344:	4663      	mov	r3, ip
10000346:	40d3      	lsrs	r3, r2
10000348:	4319      	orrs	r1, r3
1000034a:	4770      	bx	lr

1000034c <__clzdi2>:
1000034c:	b510      	push	{r4, lr}
1000034e:	2900      	cmp	r1, #0
10000350:	d103      	bne.n	1000035a <__clzdi2+0xe>
10000352:	f7ff ff85 	bl	10000260 <__clzsi2>
10000356:	3020      	adds	r0, #32
10000358:	e002      	b.n	10000360 <__clzdi2+0x14>
1000035a:	0008      	movs	r0, r1
1000035c:	f7ff ff80 	bl	10000260 <__clzsi2>
10000360:	bd10      	pop	{r4, pc}
10000362:	46c0      	nop			; (mov r8, r8)

10000364 <__aeabi_lmul>:
10000364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000366:	0c04      	lsrs	r4, r0, #16
10000368:	000d      	movs	r5, r1
1000036a:	b291      	uxth	r1, r2
1000036c:	000f      	movs	r7, r1
1000036e:	4361      	muls	r1, r4
10000370:	468c      	mov	ip, r1
10000372:	0006      	movs	r6, r0
10000374:	9301      	str	r3, [sp, #4]
10000376:	b283      	uxth	r3, r0
10000378:	0c10      	lsrs	r0, r2, #16
1000037a:	435f      	muls	r7, r3
1000037c:	4344      	muls	r4, r0
1000037e:	4358      	muls	r0, r3
10000380:	0c3b      	lsrs	r3, r7, #16
10000382:	4460      	add	r0, ip
10000384:	181b      	adds	r3, r3, r0
10000386:	4299      	cmp	r1, r3
10000388:	d902      	bls.n	10000390 <__aeabi_lmul+0x2c>
1000038a:	2180      	movs	r1, #128	; 0x80
1000038c:	0249      	lsls	r1, r1, #9
1000038e:	1864      	adds	r4, r4, r1
10000390:	9901      	ldr	r1, [sp, #4]
10000392:	4355      	muls	r5, r2
10000394:	4371      	muls	r1, r6
10000396:	0c18      	lsrs	r0, r3, #16
10000398:	1904      	adds	r4, r0, r4
1000039a:	041b      	lsls	r3, r3, #16
1000039c:	b2bf      	uxth	r7, r7
1000039e:	1949      	adds	r1, r1, r5
100003a0:	19d8      	adds	r0, r3, r7
100003a2:	1909      	adds	r1, r1, r4
100003a4:	b003      	add	sp, #12
100003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100003a8 <__udivmoddi4>:
100003a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003aa:	0006      	movs	r6, r0
100003ac:	000f      	movs	r7, r1
100003ae:	0015      	movs	r5, r2
100003b0:	001c      	movs	r4, r3
100003b2:	b085      	sub	sp, #20
100003b4:	428b      	cmp	r3, r1
100003b6:	d863      	bhi.n	10000480 <__udivmoddi4+0xd8>
100003b8:	d101      	bne.n	100003be <__udivmoddi4+0x16>
100003ba:	4282      	cmp	r2, r0
100003bc:	d860      	bhi.n	10000480 <__udivmoddi4+0xd8>
100003be:	0021      	movs	r1, r4
100003c0:	0028      	movs	r0, r5
100003c2:	f7ff ffc3 	bl	1000034c <__clzdi2>
100003c6:	0039      	movs	r1, r7
100003c8:	9000      	str	r0, [sp, #0]
100003ca:	0030      	movs	r0, r6
100003cc:	f7ff ffbe 	bl	1000034c <__clzdi2>
100003d0:	9b00      	ldr	r3, [sp, #0]
100003d2:	0021      	movs	r1, r4
100003d4:	1a1b      	subs	r3, r3, r0
100003d6:	001a      	movs	r2, r3
100003d8:	0028      	movs	r0, r5
100003da:	9303      	str	r3, [sp, #12]
100003dc:	f7ff ffaa 	bl	10000334 <__aeabi_llsl>
100003e0:	9000      	str	r0, [sp, #0]
100003e2:	9101      	str	r1, [sp, #4]
100003e4:	42b9      	cmp	r1, r7
100003e6:	d845      	bhi.n	10000474 <__udivmoddi4+0xcc>
100003e8:	d101      	bne.n	100003ee <__udivmoddi4+0x46>
100003ea:	42b0      	cmp	r0, r6
100003ec:	d842      	bhi.n	10000474 <__udivmoddi4+0xcc>
100003ee:	9b00      	ldr	r3, [sp, #0]
100003f0:	9c01      	ldr	r4, [sp, #4]
100003f2:	2001      	movs	r0, #1
100003f4:	2100      	movs	r1, #0
100003f6:	9a03      	ldr	r2, [sp, #12]
100003f8:	1af6      	subs	r6, r6, r3
100003fa:	41a7      	sbcs	r7, r4
100003fc:	f7ff ff9a 	bl	10000334 <__aeabi_llsl>
10000400:	0004      	movs	r4, r0
10000402:	000d      	movs	r5, r1
10000404:	9b03      	ldr	r3, [sp, #12]
10000406:	2b00      	cmp	r3, #0
10000408:	d02b      	beq.n	10000462 <__udivmoddi4+0xba>
1000040a:	9b01      	ldr	r3, [sp, #4]
1000040c:	9a00      	ldr	r2, [sp, #0]
1000040e:	07db      	lsls	r3, r3, #31
10000410:	0850      	lsrs	r0, r2, #1
10000412:	4318      	orrs	r0, r3
10000414:	9b01      	ldr	r3, [sp, #4]
10000416:	0859      	lsrs	r1, r3, #1
10000418:	9b03      	ldr	r3, [sp, #12]
1000041a:	469c      	mov	ip, r3
1000041c:	42b9      	cmp	r1, r7
1000041e:	d82c      	bhi.n	1000047a <__udivmoddi4+0xd2>
10000420:	d101      	bne.n	10000426 <__udivmoddi4+0x7e>
10000422:	42b0      	cmp	r0, r6
10000424:	d829      	bhi.n	1000047a <__udivmoddi4+0xd2>
10000426:	0032      	movs	r2, r6
10000428:	003b      	movs	r3, r7
1000042a:	1a12      	subs	r2, r2, r0
1000042c:	418b      	sbcs	r3, r1
1000042e:	2601      	movs	r6, #1
10000430:	1892      	adds	r2, r2, r2
10000432:	415b      	adcs	r3, r3
10000434:	2700      	movs	r7, #0
10000436:	18b6      	adds	r6, r6, r2
10000438:	415f      	adcs	r7, r3
1000043a:	2301      	movs	r3, #1
1000043c:	425b      	negs	r3, r3
1000043e:	449c      	add	ip, r3
10000440:	4663      	mov	r3, ip
10000442:	2b00      	cmp	r3, #0
10000444:	d1ea      	bne.n	1000041c <__udivmoddi4+0x74>
10000446:	0030      	movs	r0, r6
10000448:	0039      	movs	r1, r7
1000044a:	9a03      	ldr	r2, [sp, #12]
1000044c:	f7ff ff66 	bl	1000031c <__aeabi_llsr>
10000450:	9a03      	ldr	r2, [sp, #12]
10000452:	19a4      	adds	r4, r4, r6
10000454:	417d      	adcs	r5, r7
10000456:	0006      	movs	r6, r0
10000458:	000f      	movs	r7, r1
1000045a:	f7ff ff6b 	bl	10000334 <__aeabi_llsl>
1000045e:	1a24      	subs	r4, r4, r0
10000460:	418d      	sbcs	r5, r1
10000462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000464:	2b00      	cmp	r3, #0
10000466:	d001      	beq.n	1000046c <__udivmoddi4+0xc4>
10000468:	601e      	str	r6, [r3, #0]
1000046a:	605f      	str	r7, [r3, #4]
1000046c:	0020      	movs	r0, r4
1000046e:	0029      	movs	r1, r5
10000470:	b005      	add	sp, #20
10000472:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000474:	2400      	movs	r4, #0
10000476:	2500      	movs	r5, #0
10000478:	e7c4      	b.n	10000404 <__udivmoddi4+0x5c>
1000047a:	19b6      	adds	r6, r6, r6
1000047c:	417f      	adcs	r7, r7
1000047e:	e7dc      	b.n	1000043a <__udivmoddi4+0x92>
10000480:	2400      	movs	r4, #0
10000482:	2500      	movs	r5, #0
10000484:	e7ed      	b.n	10000462 <__udivmoddi4+0xba>
	...

10000488 <main>:
LOG_MODULE_REGISTER(display);

static const struct device *display = DEVICE_DT_GET(DT_NODELABEL(ssd1306));

void main(void)
{
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	b086      	sub	sp, #24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000048c:	4e19      	ldr	r6, [pc, #100]	; (100004f4 <main+0x6c>)
1000048e:	0030      	movs	r0, r6
10000490:	f005 fadc 	bl	10005a4c <z_device_is_ready>
10000494:	1e03      	subs	r3, r0, #0
	if(display == NULL){
		LOG_ERR("device pointer is NULL");
		return;
	}

	if(!device_is_ready(display)){
10000496:	d10b      	bne.n	100004b0 <main+0x28>
		LOG_ERR("display device is not ready");
10000498:	4a17      	ldr	r2, [pc, #92]	; (100004f8 <main+0x70>)
1000049a:	9205      	str	r2, [sp, #20]
1000049c:	2202      	movs	r2, #2
1000049e:	9204      	str	r2, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
100004a0:	4816      	ldr	r0, [pc, #88]	; (100004fc <main+0x74>)
100004a2:	2182      	movs	r1, #130	; 0x82
100004a4:	aa04      	add	r2, sp, #16
100004a6:	0149      	lsls	r1, r1, #5
100004a8:	f001 fbac 	bl	10001c04 <z_impl_z_log_msg_static_create>
	ret = cfb_framebuffer_finalize(display);
	if(ret != 0) {
		LOG_ERR("could not finalize to display");
		return;
	}
}
100004ac:	b006      	add	sp, #24
100004ae:	bd70      	pop	{r4, r5, r6, pc}
	ret = cfb_framebuffer_init(display);
100004b0:	0030      	movs	r0, r6
100004b2:	f001 f8d5 	bl	10001660 <cfb_framebuffer_init>
	if(ret != 0){
100004b6:	2800      	cmp	r0, #0
100004b8:	d006      	beq.n	100004c8 <main+0x40>
		LOG_ERR("could not initialize display");
100004ba:	4b11      	ldr	r3, [pc, #68]	; (10000500 <main+0x78>)
100004bc:	9305      	str	r3, [sp, #20]
100004be:	2302      	movs	r3, #2
100004c0:	9304      	str	r3, [sp, #16]
100004c2:	2300      	movs	r3, #0
100004c4:	480d      	ldr	r0, [pc, #52]	; (100004fc <main+0x74>)
100004c6:	e7ec      	b.n	100004a2 <main+0x1a>
	ret = cfb_print(display, "fasilito el tutorial", 0, 0);
100004c8:	0003      	movs	r3, r0
100004ca:	0002      	movs	r2, r0
100004cc:	490d      	ldr	r1, [pc, #52]	; (10000504 <main+0x7c>)
100004ce:	0030      	movs	r0, r6
100004d0:	f000 ffb4 	bl	1000143c <cfb_print>
100004d4:	1e05      	subs	r5, r0, #0
	if(ret != 0) {
100004d6:	d001      	beq.n	100004dc <main+0x54>
		LOG_ERR("could not print to display");
100004d8:	4b0b      	ldr	r3, [pc, #44]	; (10000508 <main+0x80>)
100004da:	e7ef      	b.n	100004bc <main+0x34>
	ret = cfb_framebuffer_finalize(display);
100004dc:	0030      	movs	r0, r6
100004de:	f001 f889 	bl	100015f4 <cfb_framebuffer_finalize>
	if(ret != 0) {
100004e2:	2800      	cmp	r0, #0
100004e4:	d0e2      	beq.n	100004ac <main+0x24>
		LOG_ERR("could not finalize to display");
100004e6:	4b09      	ldr	r3, [pc, #36]	; (1000050c <main+0x84>)
100004e8:	9305      	str	r3, [sp, #20]
100004ea:	2302      	movs	r3, #2
100004ec:	9304      	str	r3, [sp, #16]
100004ee:	4803      	ldr	r0, [pc, #12]	; (100004fc <main+0x74>)
100004f0:	002b      	movs	r3, r5
100004f2:	e7d6      	b.n	100004a2 <main+0x1a>
100004f4:	10005e4c 	.word	0x10005e4c
100004f8:	100061ac 	.word	0x100061ac
100004fc:	10005f6c 	.word	0x10005f6c
10000500:	100061c8 	.word	0x100061c8
10000504:	100061e5 	.word	0x100061e5
10000508:	100061fa 	.word	0x100061fa
1000050c:	10006215 	.word	0x10006215

10000510 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10000510:	b5f0      	push	{r4, r5, r6, r7, lr}
10000512:	b095      	sub	sp, #84	; 0x54
10000514:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10000516:	2304      	movs	r3, #4
{
10000518:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000051a:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000051c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000051e:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10000520:	08da      	lsrs	r2, r3, #3
10000522:	2307      	movs	r3, #7
10000524:	401a      	ands	r2, r3
10000526:	3201      	adds	r2, #1
{
10000528:	0007      	movs	r7, r0
1000052a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
1000052c:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000052e:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10000530:	0782      	lsls	r2, r0, #30
10000532:	d000      	beq.n	10000536 <cbvprintf_package+0x26>
10000534:	e1d2      	b.n	100008dc <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10000536:	1d02      	adds	r2, r0, #4
10000538:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
1000053a:	2800      	cmp	r0, #0
1000053c:	d004      	beq.n	10000548 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
1000053e:	2907      	cmp	r1, #7
10000540:	d80a      	bhi.n	10000558 <cbvprintf_package+0x48>
		return -ENOSPC;
10000542:	201c      	movs	r0, #28
		return -EFAULT;
10000544:	4240      	negs	r0, r0
10000546:	e154      	b.n	100007f2 <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10000548:	9a02      	ldr	r2, [sp, #8]
1000054a:	401a      	ands	r2, r3
1000054c:	0013      	movs	r3, r2
1000054e:	3204      	adds	r2, #4
10000550:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
10000552:	2208      	movs	r2, #8
10000554:	1ad3      	subs	r3, r2, r3
10000556:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10000558:	2504      	movs	r5, #4
	s = fmt--;
1000055a:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
1000055c:	002e      	movs	r6, r5
	s = fmt--;
1000055e:	3b01      	subs	r3, #1
10000560:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
10000562:	2300      	movs	r3, #0
10000564:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
10000566:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
10000568:	9303      	str	r3, [sp, #12]
	bool parsing = false;
1000056a:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
1000056c:	3b01      	subs	r3, #1
1000056e:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
10000570:	2f00      	cmp	r7, #0
10000572:	d002      	beq.n	1000057a <cbvprintf_package+0x6a>
				*(const char **)buf = s;
10000574:	9b00      	ldr	r3, [sp, #0]
10000576:	9a04      	ldr	r2, [sp, #16]
10000578:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000057a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000057c:	2b00      	cmp	r3, #0
1000057e:	dd00      	ble.n	10000582 <cbvprintf_package+0x72>
10000580:	e0eb      	b.n	1000075a <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
10000582:	4b9d      	ldr	r3, [pc, #628]	; (100007f8 <cbvprintf_package+0x2e8>)
10000584:	9a04      	ldr	r2, [sp, #16]
10000586:	429a      	cmp	r2, r3
10000588:	d303      	bcc.n	10000592 <cbvprintf_package+0x82>
1000058a:	4b9c      	ldr	r3, [pc, #624]	; (100007fc <cbvprintf_package+0x2ec>)
1000058c:	429a      	cmp	r2, r3
1000058e:	d200      	bcs.n	10000592 <cbvprintf_package+0x82>
10000590:	e0e3      	b.n	1000075a <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10000592:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10000594:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10000596:	1bda      	subs	r2, r3, r7
10000598:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
1000059a:	0789      	lsls	r1, r1, #30
1000059c:	d500      	bpl.n	100005a0 <cbvprintf_package+0x90>
1000059e:	e109      	b.n	100007b4 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100005a0:	9a03      	ldr	r2, [sp, #12]
100005a2:	2a0f      	cmp	r2, #15
100005a4:	d900      	bls.n	100005a8 <cbvprintf_package+0x98>
100005a6:	e0b4      	b.n	10000712 <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
100005a8:	2f00      	cmp	r7, #0
100005aa:	d100      	bne.n	100005ae <cbvprintf_package+0x9e>
100005ac:	e10a      	b.n	100007c4 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
100005ae:	9903      	ldr	r1, [sp, #12]
100005b0:	aa0c      	add	r2, sp, #48	; 0x30
100005b2:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
100005b4:	000a      	movs	r2, r1
100005b6:	9906      	ldr	r1, [sp, #24]
100005b8:	ab10      	add	r3, sp, #64	; 0x40
100005ba:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
100005bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100005be:	3301      	adds	r3, #1
100005c0:	930a      	str	r3, [sp, #40]	; 0x28
100005c2:	e0ee      	b.n	100007a2 <cbvprintf_package+0x292>
			switch (*fmt) {
100005c4:	287a      	cmp	r0, #122	; 0x7a
100005c6:	d861      	bhi.n	1000068c <cbvprintf_package+0x17c>
100005c8:	284b      	cmp	r0, #75	; 0x4b
100005ca:	d80e      	bhi.n	100005ea <cbvprintf_package+0xda>
100005cc:	2847      	cmp	r0, #71	; 0x47
100005ce:	d85d      	bhi.n	1000068c <cbvprintf_package+0x17c>
100005d0:	2829      	cmp	r0, #41	; 0x29
100005d2:	d82b      	bhi.n	1000062c <cbvprintf_package+0x11c>
100005d4:	2825      	cmp	r0, #37	; 0x25
100005d6:	d056      	beq.n	10000686 <cbvprintf_package+0x176>
100005d8:	d858      	bhi.n	1000068c <cbvprintf_package+0x17c>
100005da:	2820      	cmp	r0, #32
100005dc:	d07f      	beq.n	100006de <cbvprintf_package+0x1ce>
100005de:	3823      	subs	r0, #35	; 0x23
100005e0:	4243      	negs	r3, r0
100005e2:	4158      	adcs	r0, r3
100005e4:	b2c3      	uxtb	r3, r0
				parsing = false;
100005e6:	9301      	str	r3, [sp, #4]
				continue;
100005e8:	e079      	b.n	100006de <cbvprintf_package+0x1ce>
			switch (*fmt) {
100005ea:	384c      	subs	r0, #76	; 0x4c
100005ec:	282e      	cmp	r0, #46	; 0x2e
100005ee:	d84d      	bhi.n	1000068c <cbvprintf_package+0x17c>
100005f0:	f7ff fdda 	bl	100001a8 <__gnu_thumb1_case_uqi>
100005f4:	4c4c4c75 	.word	0x4c4c4c75
100005f8:	4c4c4c4c 	.word	0x4c4c4c4c
100005fc:	4c4c4c4c 	.word	0x4c4c4c4c
10000600:	4c4c4c4e 	.word	0x4c4c4c4e
10000604:	4c4c4c4c 	.word	0x4c4c4c4c
10000608:	4e4c5d4c 	.word	0x4e4c5d4c
1000060c:	5d5d5d4e 	.word	0x5d5d5d4e
10000610:	4c734e75 	.word	0x4c734e75
10000614:	4e184c75 	.word	0x4e184c75
10000618:	894c4c18 	.word	0x894c4c18
1000061c:	4c4c4e87 	.word	0x4c4c4e87
10000620:	4c4e      	.short	0x4c4e
10000622:	87          	.byte	0x87
10000623:	00          	.byte	0x00
10000624:	2300      	movs	r3, #0
				parsing = false;
10000626:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10000628:	2504      	movs	r5, #4
1000062a:	e03e      	b.n	100006aa <cbvprintf_package+0x19a>
1000062c:	2101      	movs	r1, #1
1000062e:	000a      	movs	r2, r1
10000630:	382a      	subs	r0, #42	; 0x2a
10000632:	b2c0      	uxtb	r0, r0
10000634:	4082      	lsls	r2, r0
10000636:	4b72      	ldr	r3, [pc, #456]	; (10000800 <cbvprintf_package+0x2f0>)
10000638:	421a      	tst	r2, r3
1000063a:	d150      	bne.n	100006de <cbvprintf_package+0x1ce>
1000063c:	20e2      	movs	r0, #226	; 0xe2
1000063e:	0013      	movs	r3, r2
10000640:	0580      	lsls	r0, r0, #22
10000642:	4003      	ands	r3, r0
10000644:	4202      	tst	r2, r0
10000646:	d132      	bne.n	100006ae <cbvprintf_package+0x19e>
10000648:	0010      	movs	r0, r2
1000064a:	4008      	ands	r0, r1
1000064c:	9001      	str	r0, [sp, #4]
1000064e:	420a      	tst	r2, r1
10000650:	d045      	beq.n	100006de <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
10000652:	9a00      	ldr	r2, [sp, #0]
10000654:	4269      	negs	r1, r5
10000656:	3a01      	subs	r2, #1
10000658:	1952      	adds	r2, r2, r5
1000065a:	4011      	ands	r1, r2
1000065c:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
1000065e:	2f00      	cmp	r7, #0
10000660:	d065      	beq.n	1000072e <cbvprintf_package+0x21e>
10000662:	1bf2      	subs	r2, r6, r7
10000664:	1852      	adds	r2, r2, r1
10000666:	9902      	ldr	r1, [sp, #8]
10000668:	428a      	cmp	r2, r1
1000066a:	d900      	bls.n	1000066e <cbvprintf_package+0x15e>
1000066c:	e769      	b.n	10000542 <cbvprintf_package+0x32>
		if (is_str_arg) {
1000066e:	2b00      	cmp	r3, #0
10000670:	d16a      	bne.n	10000748 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
10000672:	2e04      	cmp	r6, #4
10000674:	d14b      	bne.n	1000070e <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
10000676:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
10000678:	9a00      	ldr	r2, [sp, #0]
1000067a:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
1000067c:	9b00      	ldr	r3, [sp, #0]
1000067e:	2604      	movs	r6, #4
10000680:	3304      	adds	r3, #4
10000682:	9300      	str	r3, [sp, #0]
10000684:	e02b      	b.n	100006de <cbvprintf_package+0x1ce>
				arg_idx--;
10000686:	9b06      	ldr	r3, [sp, #24]
10000688:	3b01      	subs	r3, #1
1000068a:	9306      	str	r3, [sp, #24]
				parsing = false;
1000068c:	2300      	movs	r3, #0
1000068e:	e7aa      	b.n	100005e6 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
10000690:	9b05      	ldr	r3, [sp, #20]
10000692:	785a      	ldrb	r2, [r3, #1]
10000694:	2300      	movs	r3, #0
				parsing = false;
10000696:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
10000698:	2a6c      	cmp	r2, #108	; 0x6c
1000069a:	d1da      	bne.n	10000652 <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
1000069c:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
1000069e:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
100006a0:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
100006a2:	7812      	ldrb	r2, [r2, #0]
100006a4:	2a6c      	cmp	r2, #108	; 0x6c
100006a6:	d1d4      	bne.n	10000652 <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
100006a8:	196d      	adds	r5, r5, r5
			switch (*fmt) {
100006aa:	002e      	movs	r6, r5
100006ac:	e7d1      	b.n	10000652 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
100006ae:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
100006b0:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
100006b2:	3407      	adds	r4, #7
100006b4:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
100006b6:	1949      	adds	r1, r1, r5
100006b8:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
100006ba:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
100006bc:	2f00      	cmp	r7, #0
100006be:	d008      	beq.n	100006d2 <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
100006c0:	3501      	adds	r5, #1
100006c2:	1bed      	subs	r5, r5, r7
100006c4:	9e02      	ldr	r6, [sp, #8]
100006c6:	186d      	adds	r5, r5, r1
100006c8:	42b5      	cmp	r5, r6
100006ca:	d900      	bls.n	100006ce <cbvprintf_package+0x1be>
100006cc:	e739      	b.n	10000542 <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
100006ce:	600a      	str	r2, [r1, #0]
100006d0:	604b      	str	r3, [r1, #4]
				parsing = false;
100006d2:	2300      	movs	r3, #0
				buf += size;
100006d4:	3108      	adds	r1, #8
100006d6:	9100      	str	r1, [sp, #0]
				parsing = false;
100006d8:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
100006da:	2508      	movs	r5, #8
100006dc:	002e      	movs	r6, r5
100006de:	9b05      	ldr	r3, [sp, #20]
100006e0:	3301      	adds	r3, #1
100006e2:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
100006e4:	9b05      	ldr	r3, [sp, #20]
100006e6:	7898      	ldrb	r0, [r3, #2]
100006e8:	2800      	cmp	r0, #0
100006ea:	d077      	beq.n	100007dc <cbvprintf_package+0x2cc>
			if (!parsing) {
100006ec:	9b01      	ldr	r3, [sp, #4]
100006ee:	2b00      	cmp	r3, #0
100006f0:	d000      	beq.n	100006f4 <cbvprintf_package+0x1e4>
100006f2:	e767      	b.n	100005c4 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
100006f4:	2825      	cmp	r0, #37	; 0x25
100006f6:	d1f2      	bne.n	100006de <cbvprintf_package+0x1ce>
					arg_idx++;
100006f8:	9b06      	ldr	r3, [sp, #24]
100006fa:	3301      	adds	r3, #1
100006fc:	9306      	str	r3, [sp, #24]
					parsing = true;
100006fe:	2301      	movs	r3, #1
10000700:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
10000702:	2504      	movs	r5, #4
10000704:	e7ea      	b.n	100006dc <cbvprintf_package+0x1cc>
			switch (*fmt) {
10000706:	2200      	movs	r2, #0
10000708:	9b01      	ldr	r3, [sp, #4]
1000070a:	9201      	str	r2, [sp, #4]
1000070c:	e78c      	b.n	10000628 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
1000070e:	2e08      	cmp	r6, #8
10000710:	d001      	beq.n	10000716 <cbvprintf_package+0x206>
					return -EINVAL;
10000712:	2016      	movs	r0, #22
10000714:	e716      	b.n	10000544 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
10000716:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
10000718:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
1000071a:	3407      	adds	r4, #7
1000071c:	439c      	bics	r4, r3
1000071e:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
10000720:	600a      	str	r2, [r1, #0]
10000722:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
10000724:	9b00      	ldr	r3, [sp, #0]
10000726:	2608      	movs	r6, #8
10000728:	3308      	adds	r3, #8
1000072a:	9300      	str	r3, [sp, #0]
1000072c:	e7d7      	b.n	100006de <cbvprintf_package+0x1ce>
		if (is_str_arg) {
1000072e:	2b00      	cmp	r3, #0
10000730:	d10a      	bne.n	10000748 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
10000732:	2e04      	cmp	r6, #4
10000734:	d101      	bne.n	1000073a <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
10000736:	3404      	adds	r4, #4
			if (buf0 != NULL) {
10000738:	e7a0      	b.n	1000067c <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
1000073a:	2e08      	cmp	r6, #8
1000073c:	d1e9      	bne.n	10000712 <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
1000073e:	2307      	movs	r3, #7
10000740:	3407      	adds	r4, #7
10000742:	439c      	bics	r4, r3
10000744:	3408      	adds	r4, #8
			if (buf0 != NULL) {
10000746:	e7ed      	b.n	10000724 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
10000748:	9b05      	ldr	r3, [sp, #20]
1000074a:	3302      	adds	r3, #2
1000074c:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000074e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000750:	3b01      	subs	r3, #1
10000752:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
10000754:	cc08      	ldmia	r4!, {r3}
10000756:	9304      	str	r3, [sp, #16]
10000758:	e70a      	b.n	10000570 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
1000075a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000075c:	079b      	lsls	r3, r3, #30
1000075e:	d523      	bpl.n	100007a8 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10000760:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10000762:	9b00      	ldr	r3, [sp, #0]
10000764:	1bda      	subs	r2, r3, r7
10000766:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10000768:	2080      	movs	r0, #128	; 0x80
1000076a:	0080      	lsls	r0, r0, #2
1000076c:	4282      	cmp	r2, r0
1000076e:	d2d0      	bcs.n	10000712 <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
10000770:	9a03      	ldr	r2, [sp, #12]
10000772:	2a0f      	cmp	r2, #15
10000774:	d8cd      	bhi.n	10000712 <cbvprintf_package+0x202>
				if (buf0 != NULL) {
10000776:	2f00      	cmp	r7, #0
10000778:	d01e      	beq.n	100007b8 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
1000077a:	9803      	ldr	r0, [sp, #12]
1000077c:	b2db      	uxtb	r3, r3
1000077e:	aa0c      	add	r2, sp, #48	; 0x30
10000780:	5413      	strb	r3, [r2, r0]
10000782:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
10000784:	9b06      	ldr	r3, [sp, #24]
10000786:	aa10      	add	r2, sp, #64	; 0x40
10000788:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
1000078a:	2900      	cmp	r1, #0
1000078c:	d100      	bne.n	10000790 <cbvprintf_package+0x280>
1000078e:	e715      	b.n	100005bc <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
10000790:	2280      	movs	r2, #128	; 0x80
10000792:	4663      	mov	r3, ip
10000794:	4252      	negs	r2, r2
10000796:	4313      	orrs	r3, r2
10000798:	aa0c      	add	r2, sp, #48	; 0x30
1000079a:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
1000079c:	9b07      	ldr	r3, [sp, #28]
1000079e:	3301      	adds	r3, #1
100007a0:	9307      	str	r3, [sp, #28]
				s_idx++;
100007a2:	9b03      	ldr	r3, [sp, #12]
100007a4:	3301      	adds	r3, #1
100007a6:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
100007a8:	9b00      	ldr	r3, [sp, #0]
100007aa:	3304      	adds	r3, #4
100007ac:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
100007ae:	9b05      	ldr	r3, [sp, #20]
100007b0:	3b01      	subs	r3, #1
100007b2:	e796      	b.n	100006e2 <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100007b4:	2100      	movs	r1, #0
100007b6:	e7d7      	b.n	10000768 <cbvprintf_package+0x258>
				} else if (is_ro) {
100007b8:	2900      	cmp	r1, #0
100007ba:	d003      	beq.n	100007c4 <cbvprintf_package+0x2b4>
					len += 1;
100007bc:	9b02      	ldr	r3, [sp, #8]
100007be:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
100007c0:	9302      	str	r3, [sp, #8]
100007c2:	e7ee      	b.n	100007a2 <cbvprintf_package+0x292>
					len += 2;
100007c4:	9b02      	ldr	r3, [sp, #8]
100007c6:	3302      	adds	r3, #2
100007c8:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
100007ca:	9b08      	ldr	r3, [sp, #32]
100007cc:	2b00      	cmp	r3, #0
100007ce:	d1e8      	bne.n	100007a2 <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
100007d0:	9804      	ldr	r0, [sp, #16]
100007d2:	f004 fcc3 	bl	1000515c <strlen>
100007d6:	9b02      	ldr	r3, [sp, #8]
100007d8:	181b      	adds	r3, r3, r0
100007da:	e7f1      	b.n	100007c0 <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
100007dc:	2280      	movs	r2, #128	; 0x80
100007de:	9b00      	ldr	r3, [sp, #0]
100007e0:	00d2      	lsls	r2, r2, #3
100007e2:	1bdb      	subs	r3, r3, r7
100007e4:	4293      	cmp	r3, r2
100007e6:	d294      	bcs.n	10000712 <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
100007e8:	2f00      	cmp	r7, #0
100007ea:	d10b      	bne.n	10000804 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
100007ec:	9802      	ldr	r0, [sp, #8]
100007ee:	3808      	subs	r0, #8
100007f0:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
100007f2:	b015      	add	sp, #84	; 0x54
100007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007f6:	46c0      	nop			; (mov r8, r8)
100007f8:	10005d9c 	.word	0x10005d9c
100007fc:	10009ddc 	.word	0x10009ddc
10000800:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10000804:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000806:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
10000808:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
1000080a:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
1000080c:	466b      	mov	r3, sp
1000080e:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
10000810:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000812:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
10000814:	2a00      	cmp	r2, #0
10000816:	d00c      	beq.n	10000832 <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000818:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
1000081a:	9b07      	ldr	r3, [sp, #28]
1000081c:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
1000081e:	2b00      	cmp	r3, #0
10000820:	d120      	bne.n	10000864 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
10000822:	2600      	movs	r6, #0
10000824:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
10000826:	9b03      	ldr	r3, [sp, #12]
10000828:	42b3      	cmp	r3, r6
1000082a:	d120      	bne.n	1000086e <cbvprintf_package+0x35e>
	return BUF_OFFSET;
1000082c:	9b00      	ldr	r3, [sp, #0]
1000082e:	1bd8      	subs	r0, r3, r7
10000830:	e7df      	b.n	100007f2 <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
10000832:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
10000834:	e7f1      	b.n	1000081a <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
10000836:	ac0c      	add	r4, sp, #48	; 0x30
10000838:	56e4      	ldrsb	r4, [r4, r3]
1000083a:	a90c      	add	r1, sp, #48	; 0x30
1000083c:	5c59      	ldrb	r1, [r3, r1]
1000083e:	2c00      	cmp	r4, #0
10000840:	da0b      	bge.n	1000085a <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
10000842:	9c00      	ldr	r4, [sp, #0]
10000844:	9d02      	ldr	r5, [sp, #8]
10000846:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10000848:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
1000084a:	42ac      	cmp	r4, r5
1000084c:	d900      	bls.n	10000850 <cbvprintf_package+0x340>
1000084e:	e678      	b.n	10000542 <cbvprintf_package+0x32>
			*buf++ = pos;
10000850:	9c00      	ldr	r4, [sp, #0]
10000852:	7021      	strb	r1, [r4, #0]
10000854:	0021      	movs	r1, r4
10000856:	3101      	adds	r1, #1
10000858:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
1000085a:	3301      	adds	r3, #1
1000085c:	9903      	ldr	r1, [sp, #12]
1000085e:	4299      	cmp	r1, r3
10000860:	d1e9      	bne.n	10000836 <cbvprintf_package+0x326>
10000862:	e7de      	b.n	10000822 <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
10000864:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
10000866:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10000868:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
1000086a:	1bd2      	subs	r2, r2, r7
1000086c:	e7f6      	b.n	1000085c <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
1000086e:	9b07      	ldr	r3, [sp, #28]
10000870:	2b00      	cmp	r3, #0
10000872:	d002      	beq.n	1000087a <cbvprintf_package+0x36a>
10000874:	782b      	ldrb	r3, [r5, #0]
10000876:	2b7f      	cmp	r3, #127	; 0x7f
10000878:	d821      	bhi.n	100008be <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
1000087a:	9b08      	ldr	r3, [sp, #32]
1000087c:	2b00      	cmp	r3, #0
1000087e:	d021      	beq.n	100008c4 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
10000880:	ab10      	add	r3, sp, #64	; 0x40
10000882:	9a00      	ldr	r2, [sp, #0]
10000884:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
10000886:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10000888:	7013      	strb	r3, [r2, #0]
1000088a:	0013      	movs	r3, r2
1000088c:	3301      	adds	r3, #1
1000088e:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
10000890:	2301      	movs	r3, #1
10000892:	9a00      	ldr	r2, [sp, #0]
10000894:	1bdb      	subs	r3, r3, r7
10000896:	191b      	adds	r3, r3, r4
10000898:	18d3      	adds	r3, r2, r3
1000089a:	9a02      	ldr	r2, [sp, #8]
1000089c:	4293      	cmp	r3, r2
1000089e:	d900      	bls.n	100008a2 <cbvprintf_package+0x392>
100008a0:	e64f      	b.n	10000542 <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
100008a2:	9b00      	ldr	r3, [sp, #0]
100008a4:	9a00      	ldr	r2, [sp, #0]
100008a6:	3301      	adds	r3, #1
100008a8:	9301      	str	r3, [sp, #4]
100008aa:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
100008ac:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
100008ae:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
100008b0:	9801      	ldr	r0, [sp, #4]
100008b2:	0022      	movs	r2, r4
100008b4:	f004 fc64 	bl	10005180 <memcpy>
		buf += size;
100008b8:	9b01      	ldr	r3, [sp, #4]
100008ba:	191b      	adds	r3, r3, r4
100008bc:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
100008be:	3601      	adds	r6, #1
100008c0:	3501      	adds	r5, #1
100008c2:	e7b0      	b.n	10000826 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
100008c4:	782b      	ldrb	r3, [r5, #0]
100008c6:	009b      	lsls	r3, r3, #2
100008c8:	18fb      	adds	r3, r7, r3
100008ca:	681a      	ldr	r2, [r3, #0]
100008cc:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
100008ce:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
100008d0:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
100008d2:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
100008d4:	f004 fc42 	bl	1000515c <strlen>
100008d8:	1c44      	adds	r4, r0, #1
100008da:	e7d9      	b.n	10000890 <cbvprintf_package+0x380>
		return -EFAULT;
100008dc:	200e      	movs	r0, #14
100008de:	e631      	b.n	10000544 <cbvprintf_package+0x34>

100008e0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
100008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100008e2:	b099      	sub	sp, #100	; 0x64
100008e4:	af00      	add	r7, sp, #0
100008e6:	61bb      	str	r3, [r7, #24]
100008e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100008ea:	0006      	movs	r6, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
100008ec:	071b      	lsls	r3, r3, #28
100008ee:	0fdb      	lsrs	r3, r3, #31
{
100008f0:	6279      	str	r1, [r7, #36]	; 0x24
100008f2:	62ba      	str	r2, [r7, #40]	; 0x28
100008f4:	613b      	str	r3, [r7, #16]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
100008f6:	2900      	cmp	r1, #0
100008f8:	d10a      	bne.n	10000910 <cbprintf_package_convert+0x30>
	args_size = buf[0] * sizeof(int);
100008fa:	7804      	ldrb	r4, [r0, #0]
	ros_nbr   = buf[2];
100008fc:	7883      	ldrb	r3, [r0, #2]
	args_size = buf[0] * sizeof(int);
100008fe:	00a4      	lsls	r4, r4, #2
	buf += ros_nbr;
10000900:	18e4      	adds	r4, r4, r3
	s_nbr     = buf[1];
10000902:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
10000904:	1904      	adds	r4, r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
10000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000908:	429d      	cmp	r5, r3
1000090a:	d81c      	bhi.n	10000946 <cbprintf_package_convert+0x66>
	return (size_t)(uintptr_t)(buf - start);
1000090c:	1ba3      	subs	r3, r4, r6
1000090e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
10000910:	78b3      	ldrb	r3, [r6, #2]
10000912:	633b      	str	r3, [r7, #48]	; 0x30
10000914:	62fb      	str	r3, [r7, #44]	; 0x2c
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
10000916:	78f3      	ldrb	r3, [r6, #3]
10000918:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
1000091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000091c:	2b00      	cmp	r3, #0
1000091e:	d002      	beq.n	10000926 <cbprintf_package_convert+0x46>
10000920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000922:	07db      	lsls	r3, r3, #31
10000924:	d419      	bmi.n	1000095a <cbprintf_package_convert+0x7a>
	rw_cpy = rws_nbr > 0 &&
10000926:	697b      	ldr	r3, [r7, #20]
10000928:	2b00      	cmp	r3, #0
1000092a:	d167      	bne.n	100009fc <cbprintf_package_convert+0x11c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
1000092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000092e:	2b00      	cmp	r3, #0
10000930:	d003      	beq.n	1000093a <cbprintf_package_convert+0x5a>
			cb(in_packaged, in_len, ctx);
10000932:	0030      	movs	r0, r6
10000934:	69ba      	ldr	r2, [r7, #24]
10000936:	6a79      	ldr	r1, [r7, #36]	; 0x24
10000938:	4798      	blx	r3
		}

		return in_len;
1000093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000093c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
1000093e:	46bd      	mov	sp, r7
10000940:	6b78      	ldr	r0, [r7, #52]	; 0x34
10000942:	b019      	add	sp, #100	; 0x64
10000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf++;
10000946:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
10000948:	0020      	movs	r0, r4
1000094a:	f004 fc07 	bl	1000515c <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
1000094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		buf += strlen((const char *)buf) + 1;
10000950:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
10000952:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
10000954:	1824      	adds	r4, r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
10000956:	627b      	str	r3, [r7, #36]	; 0x24
10000958:	e7d5      	b.n	10000906 <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
1000095a:	7833      	ldrb	r3, [r6, #0]
	args_size = in_desc->len * sizeof(int);
1000095c:	009b      	lsls	r3, r3, #2
1000095e:	623b      	str	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
10000960:	6873      	ldr	r3, [r6, #4]
10000962:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
10000964:	6a3b      	ldr	r3, [r7, #32]
10000966:	18f5      	adds	r5, r6, r3
	if (cb == NULL) {
10000968:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000096a:	2b00      	cmp	r3, #0
1000096c:	d000      	beq.n	10000970 <cbprintf_package_convert+0x90>
1000096e:	e124      	b.n	10000bba <cbprintf_package_convert+0x2da>
		out_len = (int)in_len;
10000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
10000972:	002c      	movs	r4, r5
		out_len = (int)in_len;
10000974:	637b      	str	r3, [r7, #52]	; 0x34
		if (ro_cpy) {
10000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000978:	18ed      	adds	r5, r5, r3
	size_t strl_cnt = 0;
1000097a:	2300      	movs	r3, #0
1000097c:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (unsigned int i = 0; i < ros_nbr; i++) {
1000097e:	42ac      	cmp	r4, r5
10000980:	d151      	bne.n	10000a26 <cbprintf_package_convert+0x146>
		bool drop_ro_str_pos = !(flags &
10000982:	2305      	movs	r3, #5
10000984:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000986:	4013      	ands	r3, r2
10000988:	425a      	negs	r2, r3
1000098a:	4153      	adcs	r3, r2
1000098c:	3301      	adds	r3, #1
1000098e:	627b      	str	r3, [r7, #36]	; 0x24
10000990:	697b      	ldr	r3, [r7, #20]
10000992:	005b      	lsls	r3, r3, #1
10000994:	18eb      	adds	r3, r5, r3
10000996:	62bb      	str	r3, [r7, #40]	; 0x28
		for (unsigned int i = 0; i < rws_nbr; i++) {
10000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000099a:	429d      	cmp	r5, r3
1000099c:	d0cf      	beq.n	1000093e <cbprintf_package_convert+0x5e>
			uint8_t arg_idx = *str_pos++;
1000099e:	782b      	ldrb	r3, [r5, #0]
100009a0:	633b      	str	r3, [r7, #48]	; 0x30
			const char *str = *(const char **)&buf32[arg_pos];
100009a2:	786b      	ldrb	r3, [r5, #1]
100009a4:	009b      	lsls	r3, r3, #2
100009a6:	599c      	ldr	r4, [r3, r6]
100009a8:	4bc7      	ldr	r3, [pc, #796]	; (10000cc8 <cbprintf_package_convert+0x3e8>)
100009aa:	429c      	cmp	r4, r3
100009ac:	d302      	bcc.n	100009b4 <cbprintf_package_convert+0xd4>
100009ae:	4bc7      	ldr	r3, [pc, #796]	; (10000ccc <cbprintf_package_convert+0x3ec>)
100009b0:	429c      	cmp	r4, r3
100009b2:	d35d      	bcc.n	10000a70 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
100009b4:	693b      	ldr	r3, [r7, #16]
100009b6:	2b00      	cmp	r3, #0
100009b8:	d06b      	beq.n	10000a92 <cbprintf_package_convert+0x1b2>
100009ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
100009bc:	69f8      	ldr	r0, [r7, #28]
100009be:	f003 fdce 	bl	1000455e <is_ptr>
100009c2:	2800      	cmp	r0, #0
100009c4:	d065      	beq.n	10000a92 <cbprintf_package_convert+0x1b2>
				LOG_WRN("(unsigned) char * used for %%p argument. "
100009c6:	466c      	mov	r4, sp
100009c8:	b08a      	sub	sp, #40	; 0x28
100009ca:	466a      	mov	r2, sp
100009cc:	4bc0      	ldr	r3, [pc, #768]	; (10000cd0 <cbprintf_package_convert+0x3f0>)
100009ce:	6153      	str	r3, [r2, #20]
100009d0:	69fb      	ldr	r3, [r7, #28]
100009d2:	6193      	str	r3, [r2, #24]
100009d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100009d6:	61d3      	str	r3, [r2, #28]
100009d8:	2380      	movs	r3, #128	; 0x80
100009da:	009b      	lsls	r3, r3, #2
100009dc:	8413      	strh	r3, [r2, #32]
100009de:	4bbd      	ldr	r3, [pc, #756]	; (10000cd4 <cbprintf_package_convert+0x3f4>)
100009e0:	6113      	str	r3, [r2, #16]
100009e2:	2192      	movs	r1, #146	; 0x92
100009e4:	2300      	movs	r3, #0
100009e6:	48bc      	ldr	r0, [pc, #752]	; (10000cd8 <cbprintf_package_convert+0x3f8>)
100009e8:	3210      	adds	r2, #16
100009ea:	0189      	lsls	r1, r1, #6
100009ec:	f001 f90a 	bl	10001c04 <z_impl_z_log_msg_static_create>
100009f0:	46a5      	mov	sp, r4
				out_len -= 2;
100009f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100009f4:	3b02      	subs	r3, #2
				out_len += (len - 1);
100009f6:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0; i < rws_nbr; i++) {
100009f8:	3502      	adds	r5, #2
100009fa:	e7cd      	b.n	10000998 <cbprintf_package_convert+0xb8>
	rw_cpy = rws_nbr > 0 &&
100009fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100009fe:	079b      	lsls	r3, r3, #30
10000a00:	d400      	bmi.n	10000a04 <cbprintf_package_convert+0x124>
10000a02:	e793      	b.n	1000092c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
10000a04:	7833      	ldrb	r3, [r6, #0]
10000a06:	009b      	lsls	r3, r3, #2
10000a08:	623b      	str	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
10000a0a:	6873      	ldr	r3, [r6, #4]
10000a0c:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
10000a0e:	6a3b      	ldr	r3, [r7, #32]
10000a10:	18f5      	adds	r5, r6, r3
	if (cb == NULL) {
10000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000a14:	2b00      	cmp	r3, #0
10000a16:	d156      	bne.n	10000ac6 <cbprintf_package_convert+0x1e6>
		out_len = (int)in_len;
10000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a1a:	637b      	str	r3, [r7, #52]	; 0x34
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000a1e:	2b00      	cmp	r3, #0
10000a20:	d11b      	bne.n	10000a5a <cbprintf_package_convert+0x17a>
	size_t strl_cnt = 0;
10000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
10000a24:	e7ad      	b.n	10000982 <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
10000a26:	7823      	ldrb	r3, [r4, #0]
10000a28:	009b      	lsls	r3, r3, #2
		return 1 + strlen(str);
10000a2a:	5998      	ldr	r0, [r3, r6]
10000a2c:	f004 fb96 	bl	1000515c <strlen>
				if (strl && strl_cnt < strl_len) {
10000a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
10000a32:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
10000a34:	2b00      	cmp	r3, #0
10000a36:	d00b      	beq.n	10000a50 <cbprintf_package_convert+0x170>
10000a38:	2280      	movs	r2, #128	; 0x80
10000a3a:	18ba      	adds	r2, r7, r2
10000a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000a3e:	6812      	ldr	r2, [r2, #0]
10000a40:	4293      	cmp	r3, r2
10000a42:	d205      	bcs.n	10000a50 <cbprintf_package_convert+0x170>
					strl[strl_cnt++] = (uint16_t)len;
10000a44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
10000a46:	005b      	lsls	r3, r3, #1
10000a48:	5298      	strh	r0, [r3, r2]
10000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000a4c:	3301      	adds	r3, #1
10000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
				out_len += len;
10000a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				str_pos++;
10000a52:	3401      	adds	r4, #1
				out_len += len;
10000a54:	181b      	adds	r3, r3, r0
10000a56:	637b      	str	r3, [r7, #52]	; 0x34
			for (unsigned int i = 0; i < ros_nbr; i++) {
10000a58:	e791      	b.n	1000097e <cbprintf_package_convert+0x9e>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000a5a:	2304      	movs	r3, #4
10000a5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000a5e:	401a      	ands	r2, r3
10000a60:	62fa      	str	r2, [r7, #44]	; 0x2c
10000a62:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000a64:	421a      	tst	r2, r3
10000a66:	d08c      	beq.n	10000982 <cbprintf_package_convert+0xa2>
				str_pos += ros_nbr;
10000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000a6a:	18ed      	adds	r5, r5, r3
	size_t strl_cnt = 0;
10000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000a6e:	e7d8      	b.n	10000a22 <cbprintf_package_convert+0x142>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
10000a70:	693b      	ldr	r3, [r7, #16]
10000a72:	2b00      	cmp	r3, #0
10000a74:	d005      	beq.n	10000a82 <cbprintf_package_convert+0x1a2>
10000a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
10000a78:	69f8      	ldr	r0, [r7, #28]
10000a7a:	f003 fd70 	bl	1000455e <is_ptr>
10000a7e:	2800      	cmp	r0, #0
10000a80:	d1a1      	bne.n	100009c6 <cbprintf_package_convert+0xe6>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
10000a82:	2201      	movs	r2, #1
10000a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000a86:	4213      	tst	r3, r2
10000a88:	d107      	bne.n	10000a9a <cbprintf_package_convert+0x1ba>
					out_len -= drop_ro_str_pos ? 2 : 1;
10000a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10000a8e:	1a9b      	subs	r3, r3, r2
10000a90:	e7b1      	b.n	100009f6 <cbprintf_package_convert+0x116>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
10000a92:	2202      	movs	r2, #2
10000a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000a96:	4213      	tst	r3, r2
10000a98:	d0ae      	beq.n	100009f8 <cbprintf_package_convert+0x118>
		return 1 + strlen(str);
10000a9a:	0020      	movs	r0, r4
10000a9c:	f004 fb5e 	bl	1000515c <strlen>
				if (strl && strl_cnt < strl_len) {
10000aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10000aa2:	2b00      	cmp	r3, #0
10000aa4:	d00c      	beq.n	10000ac0 <cbprintf_package_convert+0x1e0>
10000aa6:	2280      	movs	r2, #128	; 0x80
10000aa8:	18ba      	adds	r2, r7, r2
10000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000aac:	6812      	ldr	r2, [r2, #0]
10000aae:	4293      	cmp	r3, r2
10000ab0:	d206      	bcs.n	10000ac0 <cbprintf_package_convert+0x1e0>
					strl[strl_cnt++] = (uint16_t)len;
10000ab2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
10000ab4:	005b      	lsls	r3, r3, #1
		return 1 + strlen(str);
10000ab6:	1c42      	adds	r2, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
10000ab8:	525a      	strh	r2, [r3, r1]
10000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000abc:	3301      	adds	r3, #1
10000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
				out_len += (len - 1);
10000ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000ac2:	181b      	adds	r3, r3, r0
10000ac4:	e797      	b.n	100009f6 <cbprintf_package_convert+0x116>
		scpy_cnt = 0;
10000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		keep_cnt = 0;
10000ac8:	1e1c      	subs	r4, r3, #0
		scpy_cnt = 0;
10000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000acc:	d012      	beq.n	10000af4 <cbprintf_package_convert+0x214>
10000ace:	2304      	movs	r3, #4
10000ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000ad2:	401a      	ands	r2, r3
		keep_cnt = 0;
10000ad4:	0014      	movs	r4, r2
		scpy_cnt = 0;
10000ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000ada:	421a      	tst	r2, r3
10000adc:	d00a      	beq.n	10000af4 <cbprintf_package_convert+0x214>
		scpy_cnt = 0;
10000ade:	2300      	movs	r3, #0
		keep_cnt = ros_nbr;
10000ae0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
		scpy_cnt = 0;
10000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		dst = keep_str_pos;
10000ae4:	3318      	adds	r3, #24
	if (cb == NULL) {
10000ae6:	2238      	movs	r2, #56	; 0x38
10000ae8:	189b      	adds	r3, r3, r2
		memcpy(dst, str_pos, ros_nbr);
10000aea:	0029      	movs	r1, r5
10000aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	if (cb == NULL) {
10000aee:	19d8      	adds	r0, r3, r7
		memcpy(dst, str_pos, ros_nbr);
10000af0:	f004 fb46 	bl	10005180 <memcpy>
	str_pos += ros_nbr;
10000af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000af6:	18eb      	adds	r3, r5, r3
10000af8:	60fb      	str	r3, [r7, #12]
	for (unsigned int i = 0; i < rws_nbr; i++) {
10000afa:	637b      	str	r3, [r7, #52]	; 0x34
10000afc:	697b      	ldr	r3, [r7, #20]
10000afe:	005b      	lsls	r3, r3, #1
10000b00:	60bb      	str	r3, [r7, #8]
10000b02:	68ba      	ldr	r2, [r7, #8]
10000b04:	68fb      	ldr	r3, [r7, #12]
10000b06:	4694      	mov	ip, r2
10000b08:	4463      	add	r3, ip
10000b0a:	607b      	str	r3, [r7, #4]
10000b0c:	687b      	ldr	r3, [r7, #4]
10000b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10000b10:	4293      	cmp	r3, r2
10000b12:	d155      	bne.n	10000bc0 <cbprintf_package_convert+0x2e0>
	out_desc.len = in_desc->len;
10000b14:	7833      	ldrb	r3, [r6, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000b16:	2100      	movs	r1, #0
	out_desc.len = in_desc->len;
10000b18:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
10000b1a:	7875      	ldrb	r5, [r6, #1]
10000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000b1e:	195a      	adds	r2, r3, r5
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
10000b22:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000b24:	079b      	lsls	r3, r3, #30
10000b26:	d400      	bmi.n	10000b2a <cbprintf_package_convert+0x24a>
10000b28:	0861      	lsrs	r1, r4, #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
10000b2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10000b2c:	2300      	movs	r3, #0
10000b2e:	07c0      	lsls	r0, r0, #31
10000b30:	d403      	bmi.n	10000b3a <cbprintf_package_convert+0x25a>
			((flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) ? keep_cnt : 0);
10000b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000b34:	075b      	lsls	r3, r3, #29
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
10000b36:	17db      	asrs	r3, r3, #31
10000b38:	4023      	ands	r3, r4
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000b3a:	78b0      	ldrb	r0, [r6, #2]
	*in_desc = out_desc;
10000b3c:	7072      	strb	r2, [r6, #1]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000b3e:	61f8      	str	r0, [r7, #28]
10000b40:	78f0      	ldrb	r0, [r6, #3]
	*in_desc = out_desc;
10000b42:	70b3      	strb	r3, [r6, #2]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000b44:	6138      	str	r0, [r7, #16]
	*in_desc = out_desc;
10000b46:	70f1      	strb	r1, [r6, #3]
	rv = cb(in_packaged, args_size, ctx);
10000b48:	0030      	movs	r0, r6
10000b4a:	69ba      	ldr	r2, [r7, #24]
10000b4c:	6a39      	ldr	r1, [r7, #32]
10000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000b50:	4798      	blx	r3
10000b52:	6378      	str	r0, [r7, #52]	; 0x34
	if (rv < 0) {
10000b54:	2800      	cmp	r0, #0
10000b56:	da00      	bge.n	10000b5a <cbprintf_package_convert+0x27a>
10000b58:	e6f1      	b.n	1000093e <cbprintf_package_convert+0x5e>
	*in_desc = in_desc_backup;
10000b5a:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000b5c:	2038      	movs	r0, #56	; 0x38
	*in_desc = in_desc_backup;
10000b5e:	7033      	strb	r3, [r6, #0]
10000b60:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000b62:	0021      	movs	r1, r4
	*in_desc = in_desc_backup;
10000b64:	70b3      	strb	r3, [r6, #2]
10000b66:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000b68:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
10000b6a:	70f3      	strb	r3, [r6, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000b6c:	2318      	movs	r3, #24
10000b6e:	181b      	adds	r3, r3, r0
10000b70:	19d8      	adds	r0, r3, r7
	*in_desc = in_desc_backup;
10000b72:	7075      	strb	r5, [r6, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000b76:	4798      	blx	r3
10000b78:	1e04      	subs	r4, r0, #0
	if (rv < 0) {
10000b7a:	da00      	bge.n	10000b7e <cbprintf_package_convert+0x29e>
10000b7c:	e09f      	b.n	10000cbe <cbprintf_package_convert+0x3de>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	rv = cb(str_pos, strs_len, ctx);
10000b82:	68f8      	ldr	r0, [r7, #12]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000b84:	1a99      	subs	r1, r3, r2
10000b86:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
10000b88:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000b8a:	1ac9      	subs	r1, r1, r3
10000b8c:	68bb      	ldr	r3, [r7, #8]
	rv = cb(str_pos, strs_len, ctx);
10000b8e:	469c      	mov	ip, r3
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000b90:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
10000b92:	4460      	add	r0, ip
10000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000b96:	4798      	blx	r3
	if (rv < 0) {
10000b98:	2800      	cmp	r0, #0
10000b9a:	da00      	bge.n	10000b9e <cbprintf_package_convert+0x2be>
10000b9c:	e091      	b.n	10000cc2 <cbprintf_package_convert+0x3e2>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000b9e:	2500      	movs	r5, #0
	out_len += rv;
10000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000ba2:	191c      	adds	r4, r3, r4
	out_len += rv;
10000ba4:	1823      	adds	r3, r4, r0
10000ba6:	637b      	str	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000baa:	429d      	cmp	r5, r3
10000bac:	d359      	bcc.n	10000c62 <cbprintf_package_convert+0x382>
	(void)cb(NULL, 0, ctx);
10000bae:	2100      	movs	r1, #0
10000bb0:	69ba      	ldr	r2, [r7, #24]
10000bb2:	0008      	movs	r0, r1
10000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000bb6:	4798      	blx	r3
	return out_len;
10000bb8:	e6c1      	b.n	1000093e <cbprintf_package_convert+0x5e>
	if (cb == NULL) {
10000bba:	2400      	movs	r4, #0
10000bbc:	2308      	movs	r3, #8
10000bbe:	e792      	b.n	10000ae6 <cbprintf_package_convert+0x206>
		uint8_t arg_idx = *str_pos++;
10000bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000bc2:	4a41      	ldr	r2, [pc, #260]	; (10000cc8 <cbprintf_package_convert+0x3e8>)
10000bc4:	781b      	ldrb	r3, [r3, #0]
10000bc6:	617b      	str	r3, [r7, #20]
		uint8_t arg_pos = *str_pos++;
10000bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000bca:	785d      	ldrb	r5, [r3, #1]
		const char *str = *(const char **)&buf32[arg_pos];
10000bcc:	00ab      	lsls	r3, r5, #2
10000bce:	599b      	ldr	r3, [r3, r6]
10000bd0:	4293      	cmp	r3, r2
10000bd2:	d302      	bcc.n	10000bda <cbprintf_package_convert+0x2fa>
10000bd4:	4a3d      	ldr	r2, [pc, #244]	; (10000ccc <cbprintf_package_convert+0x3ec>)
10000bd6:	4293      	cmp	r3, r2
10000bd8:	d30c      	bcc.n	10000bf4 <cbprintf_package_convert+0x314>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
10000bda:	693b      	ldr	r3, [r7, #16]
10000bdc:	2b00      	cmp	r3, #0
10000bde:	d02c      	beq.n	10000c3a <cbprintf_package_convert+0x35a>
10000be0:	6979      	ldr	r1, [r7, #20]
10000be2:	69f8      	ldr	r0, [r7, #28]
10000be4:	f003 fcbb 	bl	1000455e <is_ptr>
10000be8:	2800      	cmp	r0, #0
10000bea:	d026      	beq.n	10000c3a <cbprintf_package_convert+0x35a>
	for (unsigned int i = 0; i < rws_nbr; i++) {
10000bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000bee:	3302      	adds	r3, #2
10000bf0:	637b      	str	r3, [r7, #52]	; 0x34
10000bf2:	e78b      	b.n	10000b0c <cbprintf_package_convert+0x22c>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
10000bf4:	693b      	ldr	r3, [r7, #16]
10000bf6:	2b00      	cmp	r3, #0
10000bf8:	d005      	beq.n	10000c06 <cbprintf_package_convert+0x326>
10000bfa:	6979      	ldr	r1, [r7, #20]
10000bfc:	69f8      	ldr	r0, [r7, #28]
10000bfe:	f003 fcae 	bl	1000455e <is_ptr>
10000c02:	2800      	cmp	r0, #0
10000c04:	d1f2      	bne.n	10000bec <cbprintf_package_convert+0x30c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
10000c06:	2201      	movs	r2, #1
10000c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000c0a:	4213      	tst	r3, r2
10000c0c:	d00a      	beq.n	10000c24 <cbprintf_package_convert+0x344>
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000c10:	189b      	adds	r3, r3, r2
10000c12:	3207      	adds	r2, #7
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000c14:	2138      	movs	r1, #56	; 0x38
10000c16:	1852      	adds	r2, r2, r1
10000c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10000c1a:	19d2      	adds	r2, r2, r7
10000c1c:	b2db      	uxtb	r3, r3
10000c1e:	5455      	strb	r5, [r2, r1]
10000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
10000c22:	e7e3      	b.n	10000bec <cbprintf_package_convert+0x30c>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000c26:	075b      	lsls	r3, r3, #29
10000c28:	d5e0      	bpl.n	10000bec <cbprintf_package_convert+0x30c>
				keep_str_pos[keep_cnt++] = arg_pos;
10000c2a:	2218      	movs	r2, #24
10000c2c:	2138      	movs	r1, #56	; 0x38
10000c2e:	1852      	adds	r2, r2, r1
10000c30:	1c63      	adds	r3, r4, #1
10000c32:	19d2      	adds	r2, r2, r7
10000c34:	5515      	strb	r5, [r2, r4]
10000c36:	b2dc      	uxtb	r4, r3
10000c38:	e7d8      	b.n	10000bec <cbprintf_package_convert+0x30c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
10000c3a:	2202      	movs	r2, #2
10000c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000c3e:	4213      	tst	r3, r2
10000c40:	d003      	beq.n	10000c4a <cbprintf_package_convert+0x36a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000c44:	3206      	adds	r2, #6
10000c46:	3301      	adds	r3, #1
10000c48:	e7e4      	b.n	10000c14 <cbprintf_package_convert+0x334>
				keep_str_pos[keep_cnt++] = arg_idx;
10000c4a:	2138      	movs	r1, #56	; 0x38
10000c4c:	2218      	movs	r2, #24
10000c4e:	1852      	adds	r2, r2, r1
10000c50:	6979      	ldr	r1, [r7, #20]
10000c52:	1c63      	adds	r3, r4, #1
10000c54:	19d2      	adds	r2, r2, r7
10000c56:	5511      	strb	r1, [r2, r4]
10000c58:	b2db      	uxtb	r3, r3
				keep_str_pos[keep_cnt++] = arg_pos;
10000c5a:	3402      	adds	r4, #2
10000c5c:	b2e4      	uxtb	r4, r4
10000c5e:	54d5      	strb	r5, [r2, r3]
10000c60:	e7c4      	b.n	10000bec <cbprintf_package_convert+0x30c>
		uint8_t loc = cpy_str_pos[i];
10000c62:	2238      	movs	r2, #56	; 0x38
10000c64:	2308      	movs	r3, #8
10000c66:	189b      	adds	r3, r3, r2
10000c68:	19db      	adds	r3, r3, r7
10000c6a:	5ceb      	ldrb	r3, [r5, r3]
10000c6c:	3207      	adds	r2, #7
10000c6e:	18ba      	adds	r2, r7, r2
10000c70:	7013      	strb	r3, [r2, #0]
		const char *str = *(const char **)&buf32[loc];
10000c72:	009b      	lsls	r3, r3, #2
10000c74:	599b      	ldr	r3, [r3, r6]
		uint16_t str_len = strl ? strl[i] : 0;
10000c76:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
		const char *str = *(const char **)&buf32[loc];
10000c78:	633b      	str	r3, [r7, #48]	; 0x30
		uint16_t str_len = strl ? strl[i] : 0;
10000c7a:	2c00      	cmp	r4, #0
10000c7c:	d001      	beq.n	10000c82 <cbprintf_package_convert+0x3a2>
10000c7e:	006b      	lsls	r3, r5, #1
10000c80:	5ae4      	ldrh	r4, [r4, r3]
		rv = cb(&loc, 1, ctx);
10000c82:	233f      	movs	r3, #63	; 0x3f
10000c84:	2101      	movs	r1, #1
10000c86:	18f8      	adds	r0, r7, r3
10000c88:	69ba      	ldr	r2, [r7, #24]
10000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000c8c:	4798      	blx	r3
		if (rv < 0) {
10000c8e:	2800      	cmp	r0, #0
10000c90:	db17      	blt.n	10000cc2 <cbprintf_package_convert+0x3e2>
		out_len += rv;
10000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000c94:	181b      	adds	r3, r3, r0
10000c96:	637b      	str	r3, [r7, #52]	; 0x34
	strl = strl > 0 ? strl : strlen(str) + 1;
10000c98:	2c00      	cmp	r4, #0
10000c9a:	d104      	bne.n	10000ca6 <cbprintf_package_convert+0x3c6>
10000c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
10000c9e:	f004 fa5d 	bl	1000515c <strlen>
10000ca2:	3001      	adds	r0, #1
10000ca4:	b284      	uxth	r4, r0
	return cb(str, strl, ctx);
10000ca6:	0021      	movs	r1, r4
10000ca8:	69ba      	ldr	r2, [r7, #24]
10000caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
10000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000cae:	4798      	blx	r3
		if (rv < 0) {
10000cb0:	2800      	cmp	r0, #0
10000cb2:	db06      	blt.n	10000cc2 <cbprintf_package_convert+0x3e2>
		out_len += rv;
10000cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000cb6:	3501      	adds	r5, #1
		out_len += rv;
10000cb8:	181b      	adds	r3, r3, r0
10000cba:	637b      	str	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000cbc:	e774      	b.n	10000ba8 <cbprintf_package_convert+0x2c8>
10000cbe:	6378      	str	r0, [r7, #52]	; 0x34
10000cc0:	e63d      	b.n	1000093e <cbprintf_package_convert+0x5e>
10000cc2:	6378      	str	r0, [r7, #52]	; 0x34
10000cc4:	e63b      	b.n	1000093e <cbprintf_package_convert+0x5e>
10000cc6:	46c0      	nop			; (mov r8, r8)
10000cc8:	10005d9c 	.word	0x10005d9c
10000ccc:	10009ddc 	.word	0x10009ddc
10000cd0:	10006233 	.word	0x10006233
10000cd4:	01000004 	.word	0x01000004
10000cd8:	10005f5c 	.word	0x10005f5c

10000cdc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
10000cdc:	4b01      	ldr	r3, [pc, #4]	; (10000ce4 <__printk_hook_install+0x8>)
10000cde:	6018      	str	r0, [r3, #0]
}
10000ce0:	4770      	bx	lr
10000ce2:	46c0      	nop			; (mov r8, r8)
10000ce4:	20000000 	.word	0x20000000

10000ce8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
10000ce8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
10000cea:	2500      	movs	r5, #0
{
10000cec:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
10000cee:	9003      	str	r0, [sp, #12]
10000cf0:	9104      	str	r1, [sp, #16]
{
10000cf2:	0004      	movs	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10000cf4:	9500      	str	r5, [sp, #0]
10000cf6:	4806      	ldr	r0, [pc, #24]	; (10000d10 <vsnprintk+0x28>)
10000cf8:	a903      	add	r1, sp, #12
	struct str_context ctx = { str, size, 0 };
10000cfa:	9505      	str	r5, [sp, #20]
10000cfc:	f000 f80a 	bl	10000d14 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
10000d00:	9805      	ldr	r0, [sp, #20]
10000d02:	9b04      	ldr	r3, [sp, #16]
10000d04:	4298      	cmp	r0, r3
10000d06:	da00      	bge.n	10000d0a <vsnprintk+0x22>
		str[ctx.count] = '\0';
10000d08:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
10000d0a:	b007      	add	sp, #28
10000d0c:	bd30      	pop	{r4, r5, pc}
10000d0e:	46c0      	nop			; (mov r8, r8)
10000d10:	100045ad 	.word	0x100045ad

10000d14 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d16:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000d18:	2700      	movs	r7, #0
{
10000d1a:	b099      	sub	sp, #100	; 0x64
10000d1c:	9004      	str	r0, [sp, #16]
10000d1e:	9105      	str	r1, [sp, #20]
10000d20:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10000d22:	9b08      	ldr	r3, [sp, #32]
10000d24:	7818      	ldrb	r0, [r3, #0]
10000d26:	2800      	cmp	r0, #0
10000d28:	d101      	bne.n	10000d2e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000d2a:	0038      	movs	r0, r7
10000d2c:	e327      	b.n	1000137e <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
10000d2e:	9b08      	ldr	r3, [sp, #32]
10000d30:	3301      	adds	r3, #1
10000d32:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000d34:	2825      	cmp	r0, #37	; 0x25
10000d36:	d007      	beq.n	10000d48 <z_cbvprintf_impl+0x34>
			OUTC('%');
10000d38:	9905      	ldr	r1, [sp, #20]
10000d3a:	9b04      	ldr	r3, [sp, #16]
10000d3c:	4798      	blx	r3
10000d3e:	2800      	cmp	r0, #0
10000d40:	da00      	bge.n	10000d44 <z_cbvprintf_impl+0x30>
10000d42:	e31c      	b.n	1000137e <z_cbvprintf_impl+0x66a>
10000d44:	3701      	adds	r7, #1
		if (bps == NULL) {
10000d46:	e1e3      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		} state = {
10000d48:	ad12      	add	r5, sp, #72	; 0x48
10000d4a:	2218      	movs	r2, #24
10000d4c:	2100      	movs	r1, #0
10000d4e:	0028      	movs	r0, r5
10000d50:	f004 fa1f 	bl	10005192 <memset>
	if (*sp == '%') {
10000d54:	9b08      	ldr	r3, [sp, #32]
10000d56:	785b      	ldrb	r3, [r3, #1]
10000d58:	2b25      	cmp	r3, #37	; 0x25
10000d5a:	d114      	bne.n	10000d86 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000d5c:	9a08      	ldr	r2, [sp, #32]
10000d5e:	72eb      	strb	r3, [r5, #11]
10000d60:	3202      	adds	r2, #2
10000d62:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000d64:	ab12      	add	r3, sp, #72	; 0x48
10000d66:	7a5a      	ldrb	r2, [r3, #9]
10000d68:	07d1      	lsls	r1, r2, #31
10000d6a:	d400      	bmi.n	10000d6e <z_cbvprintf_impl+0x5a>
10000d6c:	e17f      	b.n	1000106e <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10000d6e:	cc02      	ldmia	r4!, {r1}
10000d70:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10000d72:	2900      	cmp	r1, #0
10000d74:	db00      	blt.n	10000d78 <z_cbvprintf_impl+0x64>
10000d76:	e17f      	b.n	10001078 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000d78:	2104      	movs	r1, #4
10000d7a:	7a18      	ldrb	r0, [r3, #8]
10000d7c:	4301      	orrs	r1, r0
10000d7e:	7219      	strb	r1, [r3, #8]
				width = -width;
10000d80:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10000d82:	425b      	negs	r3, r3
10000d84:	e177      	b.n	10001076 <z_cbvprintf_impl+0x362>
10000d86:	2200      	movs	r2, #0
		switch (*sp) {
10000d88:	2601      	movs	r6, #1
10000d8a:	0015      	movs	r5, r2
10000d8c:	0010      	movs	r0, r2
10000d8e:	4694      	mov	ip, r2
10000d90:	9203      	str	r2, [sp, #12]
10000d92:	9b07      	ldr	r3, [sp, #28]
10000d94:	781b      	ldrb	r3, [r3, #0]
10000d96:	2b2b      	cmp	r3, #43	; 0x2b
10000d98:	d06f      	beq.n	10000e7a <z_cbvprintf_impl+0x166>
10000d9a:	d868      	bhi.n	10000e6e <z_cbvprintf_impl+0x15a>
10000d9c:	2b20      	cmp	r3, #32
10000d9e:	d071      	beq.n	10000e84 <z_cbvprintf_impl+0x170>
10000da0:	2b23      	cmp	r3, #35	; 0x23
10000da2:	d071      	beq.n	10000e88 <z_cbvprintf_impl+0x174>
10000da4:	2a00      	cmp	r2, #0
10000da6:	d005      	beq.n	10000db4 <z_cbvprintf_impl+0xa0>
10000da8:	ae12      	add	r6, sp, #72	; 0x48
10000daa:	7a32      	ldrb	r2, [r6, #8]
10000dac:	0011      	movs	r1, r2
10000dae:	2240      	movs	r2, #64	; 0x40
10000db0:	430a      	orrs	r2, r1
10000db2:	7232      	strb	r2, [r6, #8]
10000db4:	2d00      	cmp	r5, #0
10000db6:	d004      	beq.n	10000dc2 <z_cbvprintf_impl+0xae>
10000db8:	2220      	movs	r2, #32
10000dba:	ad12      	add	r5, sp, #72	; 0x48
10000dbc:	7a2e      	ldrb	r6, [r5, #8]
10000dbe:	4332      	orrs	r2, r6
10000dc0:	722a      	strb	r2, [r5, #8]
10000dc2:	2800      	cmp	r0, #0
10000dc4:	d004      	beq.n	10000dd0 <z_cbvprintf_impl+0xbc>
10000dc6:	2210      	movs	r2, #16
10000dc8:	a812      	add	r0, sp, #72	; 0x48
10000dca:	7a05      	ldrb	r5, [r0, #8]
10000dcc:	432a      	orrs	r2, r5
10000dce:	7202      	strb	r2, [r0, #8]
10000dd0:	9a03      	ldr	r2, [sp, #12]
10000dd2:	2a00      	cmp	r2, #0
10000dd4:	d004      	beq.n	10000de0 <z_cbvprintf_impl+0xcc>
10000dd6:	2208      	movs	r2, #8
10000dd8:	a912      	add	r1, sp, #72	; 0x48
10000dda:	7a08      	ldrb	r0, [r1, #8]
10000ddc:	4302      	orrs	r2, r0
10000dde:	720a      	strb	r2, [r1, #8]
10000de0:	4662      	mov	r2, ip
10000de2:	2a00      	cmp	r2, #0
10000de4:	d004      	beq.n	10000df0 <z_cbvprintf_impl+0xdc>
10000de6:	2204      	movs	r2, #4
10000de8:	a912      	add	r1, sp, #72	; 0x48
10000dea:	7a08      	ldrb	r0, [r1, #8]
10000dec:	4302      	orrs	r2, r0
10000dee:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000df0:	2144      	movs	r1, #68	; 0x44
10000df2:	a812      	add	r0, sp, #72	; 0x48
10000df4:	7a02      	ldrb	r2, [r0, #8]
10000df6:	4011      	ands	r1, r2
10000df8:	2944      	cmp	r1, #68	; 0x44
10000dfa:	d102      	bne.n	10000e02 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
10000dfc:	2140      	movs	r1, #64	; 0x40
10000dfe:	438a      	bics	r2, r1
10000e00:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10000e02:	2280      	movs	r2, #128	; 0x80
10000e04:	7a01      	ldrb	r1, [r0, #8]
10000e06:	4252      	negs	r2, r2
10000e08:	430a      	orrs	r2, r1
10000e0a:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000e0c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000e0e:	250a      	movs	r5, #10
10000e10:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10000e12:	2b2a      	cmp	r3, #42	; 0x2a
10000e14:	d140      	bne.n	10000e98 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10000e16:	7a41      	ldrb	r1, [r0, #9]
10000e18:	3b29      	subs	r3, #41	; 0x29
10000e1a:	430b      	orrs	r3, r1
		return ++sp;
10000e1c:	3201      	adds	r2, #1
		conv->width_star = true;
10000e1e:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000e20:	7815      	ldrb	r5, [r2, #0]
10000e22:	2602      	movs	r6, #2
10000e24:	0029      	movs	r1, r5
10000e26:	392e      	subs	r1, #46	; 0x2e
10000e28:	424b      	negs	r3, r1
10000e2a:	4159      	adcs	r1, r3
10000e2c:	a812      	add	r0, sp, #72	; 0x48
10000e2e:	7a43      	ldrb	r3, [r0, #9]
10000e30:	0049      	lsls	r1, r1, #1
10000e32:	43b3      	bics	r3, r6
10000e34:	430b      	orrs	r3, r1
10000e36:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10000e38:	2d2e      	cmp	r5, #46	; 0x2e
10000e3a:	d145      	bne.n	10000ec8 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10000e3c:	7853      	ldrb	r3, [r2, #1]
10000e3e:	2b2a      	cmp	r3, #42	; 0x2a
10000e40:	d03d      	beq.n	10000ebe <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
10000e42:	2300      	movs	r3, #0
	++sp;
10000e44:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000e46:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000e48:	7811      	ldrb	r1, [r2, #0]
10000e4a:	1c55      	adds	r5, r2, #1
10000e4c:	0008      	movs	r0, r1
10000e4e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000e50:	2809      	cmp	r0, #9
10000e52:	d963      	bls.n	10000f1c <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10000e54:	a912      	add	r1, sp, #72	; 0x48
10000e56:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000e58:	7a0d      	ldrb	r5, [r1, #8]
10000e5a:	07a8      	lsls	r0, r5, #30
10000e5c:	4318      	orrs	r0, r3
10000e5e:	2302      	movs	r3, #2
10000e60:	439d      	bics	r5, r3
10000e62:	002b      	movs	r3, r5
10000e64:	0fc0      	lsrs	r0, r0, #31
10000e66:	0040      	lsls	r0, r0, #1
10000e68:	4303      	orrs	r3, r0
10000e6a:	720b      	strb	r3, [r1, #8]
	return sp;
10000e6c:	e02c      	b.n	10000ec8 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10000e6e:	2b2d      	cmp	r3, #45	; 0x2d
10000e70:	d00c      	beq.n	10000e8c <z_cbvprintf_impl+0x178>
10000e72:	2b30      	cmp	r3, #48	; 0x30
10000e74:	d196      	bne.n	10000da4 <z_cbvprintf_impl+0x90>
10000e76:	0032      	movs	r2, r6
10000e78:	e000      	b.n	10000e7c <z_cbvprintf_impl+0x168>
10000e7a:	9603      	str	r6, [sp, #12]
			++sp;
10000e7c:	9b07      	ldr	r3, [sp, #28]
10000e7e:	3301      	adds	r3, #1
10000e80:	9307      	str	r3, [sp, #28]
	} while (loop);
10000e82:	e786      	b.n	10000d92 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10000e84:	0030      	movs	r0, r6
10000e86:	e7f9      	b.n	10000e7c <z_cbvprintf_impl+0x168>
10000e88:	0035      	movs	r5, r6
10000e8a:	e7f7      	b.n	10000e7c <z_cbvprintf_impl+0x168>
10000e8c:	46b4      	mov	ip, r6
10000e8e:	e7f5      	b.n	10000e7c <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10000e90:	0032      	movs	r2, r6
10000e92:	4369      	muls	r1, r5
10000e94:	3930      	subs	r1, #48	; 0x30
10000e96:	1859      	adds	r1, r3, r1
10000e98:	7813      	ldrb	r3, [r2, #0]
10000e9a:	1c56      	adds	r6, r2, #1
10000e9c:	0018      	movs	r0, r3
10000e9e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000ea0:	2809      	cmp	r0, #9
10000ea2:	d9f5      	bls.n	10000e90 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10000ea4:	9b07      	ldr	r3, [sp, #28]
10000ea6:	4293      	cmp	r3, r2
10000ea8:	d0ba      	beq.n	10000e20 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10000eaa:	2502      	movs	r5, #2
		conv->width_value = width;
10000eac:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10000eae:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10000eb0:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10000eb2:	0fc9      	lsrs	r1, r1, #31
10000eb4:	0049      	lsls	r1, r1, #1
10000eb6:	43a8      	bics	r0, r5
10000eb8:	4301      	orrs	r1, r0
10000eba:	7219      	strb	r1, [r3, #8]
10000ebc:	e7b0      	b.n	10000e20 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10000ebe:	2304      	movs	r3, #4
10000ec0:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10000ec2:	3202      	adds	r2, #2
		conv->prec_star = true;
10000ec4:	430b      	orrs	r3, r1
10000ec6:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10000ec8:	7811      	ldrb	r1, [r2, #0]
10000eca:	ab12      	add	r3, sp, #72	; 0x48
10000ecc:	296c      	cmp	r1, #108	; 0x6c
10000ece:	d045      	beq.n	10000f5c <z_cbvprintf_impl+0x248>
10000ed0:	d829      	bhi.n	10000f26 <z_cbvprintf_impl+0x212>
10000ed2:	2968      	cmp	r1, #104	; 0x68
10000ed4:	d030      	beq.n	10000f38 <z_cbvprintf_impl+0x224>
10000ed6:	296a      	cmp	r1, #106	; 0x6a
10000ed8:	d04c      	beq.n	10000f74 <z_cbvprintf_impl+0x260>
10000eda:	294c      	cmp	r1, #76	; 0x4c
10000edc:	d054      	beq.n	10000f88 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10000ede:	7811      	ldrb	r1, [r2, #0]
10000ee0:	1c53      	adds	r3, r2, #1
10000ee2:	aa12      	add	r2, sp, #72	; 0x48
10000ee4:	9307      	str	r3, [sp, #28]
10000ee6:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000ee8:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
10000eea:	2978      	cmp	r1, #120	; 0x78
10000eec:	d900      	bls.n	10000ef0 <z_cbvprintf_impl+0x1dc>
10000eee:	e0b9      	b.n	10001064 <z_cbvprintf_impl+0x350>
10000ef0:	296d      	cmp	r1, #109	; 0x6d
10000ef2:	d850      	bhi.n	10000f96 <z_cbvprintf_impl+0x282>
10000ef4:	2969      	cmp	r1, #105	; 0x69
10000ef6:	d900      	bls.n	10000efa <z_cbvprintf_impl+0x1e6>
10000ef8:	e0b4      	b.n	10001064 <z_cbvprintf_impl+0x350>
10000efa:	2957      	cmp	r1, #87	; 0x57
10000efc:	d866      	bhi.n	10000fcc <z_cbvprintf_impl+0x2b8>
10000efe:	2941      	cmp	r1, #65	; 0x41
10000f00:	d003      	beq.n	10000f0a <z_cbvprintf_impl+0x1f6>
10000f02:	3945      	subs	r1, #69	; 0x45
10000f04:	2902      	cmp	r1, #2
10000f06:	d900      	bls.n	10000f0a <z_cbvprintf_impl+0x1f6>
10000f08:	e0ac      	b.n	10001064 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
10000f0a:	2307      	movs	r3, #7
10000f0c:	a912      	add	r1, sp, #72	; 0x48
10000f0e:	7a8a      	ldrb	r2, [r1, #10]
10000f10:	439a      	bics	r2, r3
10000f12:	3b03      	subs	r3, #3
10000f14:	4313      	orrs	r3, r2
10000f16:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10000f18:	2301      	movs	r3, #1
			break;
10000f1a:	e073      	b.n	10001004 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
10000f1c:	4373      	muls	r3, r6
10000f1e:	3b30      	subs	r3, #48	; 0x30
10000f20:	002a      	movs	r2, r5
10000f22:	185b      	adds	r3, r3, r1
10000f24:	e790      	b.n	10000e48 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10000f26:	2974      	cmp	r1, #116	; 0x74
10000f28:	d029      	beq.n	10000f7e <z_cbvprintf_impl+0x26a>
10000f2a:	297a      	cmp	r1, #122	; 0x7a
10000f2c:	d1d7      	bne.n	10000ede <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
10000f2e:	2178      	movs	r1, #120	; 0x78
10000f30:	7a58      	ldrb	r0, [r3, #9]
10000f32:	4388      	bics	r0, r1
10000f34:	3948      	subs	r1, #72	; 0x48
10000f36:	e00d      	b.n	10000f54 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10000f38:	7850      	ldrb	r0, [r2, #1]
10000f3a:	2178      	movs	r1, #120	; 0x78
10000f3c:	2868      	cmp	r0, #104	; 0x68
10000f3e:	d106      	bne.n	10000f4e <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10000f40:	7a58      	ldrb	r0, [r3, #9]
10000f42:	4388      	bics	r0, r1
10000f44:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10000f46:	4301      	orrs	r1, r0
10000f48:	7259      	strb	r1, [r3, #9]
			++sp;
10000f4a:	3202      	adds	r2, #2
10000f4c:	e7c7      	b.n	10000ede <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
10000f4e:	7a58      	ldrb	r0, [r3, #9]
10000f50:	4388      	bics	r0, r1
10000f52:	2110      	movs	r1, #16
10000f54:	4301      	orrs	r1, r0
10000f56:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000f58:	3201      	adds	r2, #1
10000f5a:	e7c0      	b.n	10000ede <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000f5c:	7850      	ldrb	r0, [r2, #1]
10000f5e:	2178      	movs	r1, #120	; 0x78
10000f60:	286c      	cmp	r0, #108	; 0x6c
10000f62:	d103      	bne.n	10000f6c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10000f64:	7a58      	ldrb	r0, [r3, #9]
10000f66:	4388      	bics	r0, r1
10000f68:	3958      	subs	r1, #88	; 0x58
10000f6a:	e7ec      	b.n	10000f46 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000f6c:	7a58      	ldrb	r0, [r3, #9]
10000f6e:	4388      	bics	r0, r1
10000f70:	2118      	movs	r1, #24
10000f72:	e7ef      	b.n	10000f54 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10000f74:	2178      	movs	r1, #120	; 0x78
10000f76:	7a58      	ldrb	r0, [r3, #9]
10000f78:	4388      	bics	r0, r1
10000f7a:	3950      	subs	r1, #80	; 0x50
10000f7c:	e7ea      	b.n	10000f54 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10000f7e:	2178      	movs	r1, #120	; 0x78
10000f80:	7a58      	ldrb	r0, [r3, #9]
10000f82:	4388      	bics	r0, r1
10000f84:	3940      	subs	r1, #64	; 0x40
10000f86:	e7e5      	b.n	10000f54 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000f88:	8918      	ldrh	r0, [r3, #8]
10000f8a:	49a5      	ldr	r1, [pc, #660]	; (10001220 <z_cbvprintf_impl+0x50c>)
10000f8c:	4008      	ands	r0, r1
10000f8e:	49a5      	ldr	r1, [pc, #660]	; (10001224 <z_cbvprintf_impl+0x510>)
10000f90:	4301      	orrs	r1, r0
10000f92:	8119      	strh	r1, [r3, #8]
		break;
10000f94:	e7e0      	b.n	10000f58 <z_cbvprintf_impl+0x244>
10000f96:	2001      	movs	r0, #1
10000f98:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000f9a:	396e      	subs	r1, #110	; 0x6e
10000f9c:	b2c9      	uxtb	r1, r1
10000f9e:	408d      	lsls	r5, r1
10000fa0:	0029      	movs	r1, r5
10000fa2:	4da1      	ldr	r5, [pc, #644]	; (10001228 <z_cbvprintf_impl+0x514>)
10000fa4:	4229      	tst	r1, r5
10000fa6:	d138      	bne.n	1000101a <z_cbvprintf_impl+0x306>
10000fa8:	2524      	movs	r5, #36	; 0x24
10000faa:	4229      	tst	r1, r5
10000fac:	d151      	bne.n	10001052 <z_cbvprintf_impl+0x33e>
10000fae:	4201      	tst	r1, r0
10000fb0:	d058      	beq.n	10001064 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10000fb2:	2107      	movs	r1, #7
10000fb4:	7a90      	ldrb	r0, [r2, #10]
10000fb6:	4388      	bics	r0, r1
10000fb8:	3904      	subs	r1, #4
10000fba:	4301      	orrs	r1, r0
10000fbc:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000fbe:	2278      	movs	r2, #120	; 0x78
10000fc0:	4013      	ands	r3, r2
10000fc2:	3b40      	subs	r3, #64	; 0x40
10000fc4:	425a      	negs	r2, r3
10000fc6:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000fc8:	b2db      	uxtb	r3, r3
10000fca:	e01b      	b.n	10001004 <z_cbvprintf_impl+0x2f0>
10000fcc:	2001      	movs	r0, #1
	switch (conv->specifier) {
10000fce:	000d      	movs	r5, r1
10000fd0:	0006      	movs	r6, r0
10000fd2:	3d58      	subs	r5, #88	; 0x58
10000fd4:	b2ed      	uxtb	r5, r5
10000fd6:	40ae      	lsls	r6, r5
10000fd8:	0035      	movs	r5, r6
10000fda:	26e2      	movs	r6, #226	; 0xe2
10000fdc:	0236      	lsls	r6, r6, #8
10000fde:	4235      	tst	r5, r6
10000fe0:	d193      	bne.n	10000f0a <z_cbvprintf_impl+0x1f6>
10000fe2:	4e92      	ldr	r6, [pc, #584]	; (1000122c <z_cbvprintf_impl+0x518>)
10000fe4:	4235      	tst	r5, r6
10000fe6:	d122      	bne.n	1000102e <z_cbvprintf_impl+0x31a>
10000fe8:	2184      	movs	r1, #132	; 0x84
10000fea:	0289      	lsls	r1, r1, #10
10000fec:	420d      	tst	r5, r1
10000fee:	d039      	beq.n	10001064 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10000ff0:	2507      	movs	r5, #7
10000ff2:	7a91      	ldrb	r1, [r2, #10]
10000ff4:	43a9      	bics	r1, r5
10000ff6:	4301      	orrs	r1, r0
10000ff8:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000ffa:	2178      	movs	r1, #120	; 0x78
10000ffc:	400b      	ands	r3, r1
10000ffe:	2b40      	cmp	r3, #64	; 0x40
10001000:	d011      	beq.n	10001026 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10001002:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10001004:	aa12      	add	r2, sp, #72	; 0x48
10001006:	7a11      	ldrb	r1, [r2, #8]
10001008:	0788      	lsls	r0, r1, #30
1000100a:	0fc0      	lsrs	r0, r0, #31
1000100c:	4303      	orrs	r3, r0
1000100e:	2002      	movs	r0, #2
10001010:	005b      	lsls	r3, r3, #1
10001012:	4381      	bics	r1, r0
10001014:	4319      	orrs	r1, r3
10001016:	7211      	strb	r1, [r2, #8]
	return sp;
10001018:	e6a4      	b.n	10000d64 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
1000101a:	2107      	movs	r1, #7
1000101c:	7a95      	ldrb	r5, [r2, #10]
1000101e:	438d      	bics	r5, r1
10001020:	3905      	subs	r1, #5
10001022:	4329      	orrs	r1, r5
10001024:	e7e8      	b.n	10000ff8 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10001026:	7a13      	ldrb	r3, [r2, #8]
10001028:	4303      	orrs	r3, r0
		conv->invalid = true;
1000102a:	7213      	strb	r3, [r2, #8]
		break;
1000102c:	e7e9      	b.n	10001002 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
1000102e:	2507      	movs	r5, #7
10001030:	7a96      	ldrb	r6, [r2, #10]
10001032:	43ae      	bics	r6, r5
10001034:	3d05      	subs	r5, #5
10001036:	4335      	orrs	r5, r6
10001038:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000103a:	2578      	movs	r5, #120	; 0x78
1000103c:	402b      	ands	r3, r5
1000103e:	2b40      	cmp	r3, #64	; 0x40
10001040:	d102      	bne.n	10001048 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10001042:	7a15      	ldrb	r5, [r2, #8]
10001044:	4328      	orrs	r0, r5
10001046:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10001048:	2963      	cmp	r1, #99	; 0x63
1000104a:	d1da      	bne.n	10001002 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
1000104c:	1e5a      	subs	r2, r3, #1
1000104e:	4193      	sbcs	r3, r2
10001050:	e7ba      	b.n	10000fc8 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
10001052:	2107      	movs	r1, #7
10001054:	7a90      	ldrb	r0, [r2, #10]
10001056:	4388      	bics	r0, r1
10001058:	3904      	subs	r1, #4
1000105a:	4301      	orrs	r1, r0
1000105c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000105e:	2278      	movs	r2, #120	; 0x78
10001060:	4013      	ands	r3, r2
10001062:	e7f3      	b.n	1000104c <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10001064:	2301      	movs	r3, #1
10001066:	aa12      	add	r2, sp, #72	; 0x48
10001068:	7a11      	ldrb	r1, [r2, #8]
1000106a:	430b      	orrs	r3, r1
1000106c:	e7dd      	b.n	1000102a <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
1000106e:	7a19      	ldrb	r1, [r3, #8]
10001070:	297f      	cmp	r1, #127	; 0x7f
10001072:	d90f      	bls.n	10001094 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10001074:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10001076:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10001078:	ab12      	add	r3, sp, #72	; 0x48
1000107a:	0751      	lsls	r1, r2, #29
1000107c:	d50c      	bpl.n	10001098 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
1000107e:	cc04      	ldmia	r4!, {r2}
10001080:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10001082:	2a00      	cmp	r2, #0
10001084:	da0c      	bge.n	100010a0 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10001086:	2102      	movs	r1, #2
10001088:	7a5a      	ldrb	r2, [r3, #9]
1000108a:	438a      	bics	r2, r1
1000108c:	725a      	strb	r2, [r3, #9]
		int precision = -1;
1000108e:	2301      	movs	r3, #1
10001090:	425b      	negs	r3, r3
10001092:	e004      	b.n	1000109e <z_cbvprintf_impl+0x38a>
		int width = -1;
10001094:	2301      	movs	r3, #1
10001096:	e674      	b.n	10000d82 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10001098:	0792      	lsls	r2, r2, #30
1000109a:	d5f8      	bpl.n	1000108e <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
1000109c:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
1000109e:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
100010a0:	2500      	movs	r5, #0
100010a2:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
100010a4:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
100010a6:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100010a8:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100010aa:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
100010ac:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100010ae:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
100010b0:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
100010b2:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
100010b4:	2b01      	cmp	r3, #1
100010b6:	d130      	bne.n	1000111a <z_cbvprintf_impl+0x406>
			switch (length_mod) {
100010b8:	1ed0      	subs	r0, r2, #3
100010ba:	2804      	cmp	r0, #4
100010bc:	d804      	bhi.n	100010c8 <z_cbvprintf_impl+0x3b4>
100010be:	f7ff f873 	bl	100001a8 <__gnu_thumb1_case_uqi>
100010c2:	450e      	.short	0x450e
100010c4:	0e45      	.short	0x0e45
100010c6:	0e          	.byte	0x0e
100010c7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
100010c8:	6823      	ldr	r3, [r4, #0]
100010ca:	17d8      	asrs	r0, r3, #31
100010cc:	9312      	str	r3, [sp, #72]	; 0x48
100010ce:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
100010d0:	2a01      	cmp	r2, #1
100010d2:	d109      	bne.n	100010e8 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
100010d4:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
100010d6:	9312      	str	r3, [sp, #72]	; 0x48
100010d8:	17db      	asrs	r3, r3, #31
100010da:	604b      	str	r3, [r1, #4]
100010dc:	e006      	b.n	100010ec <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100010de:	cc08      	ldmia	r4!, {r3}
100010e0:	9312      	str	r3, [sp, #72]	; 0x48
100010e2:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100010e4:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100010e6:	e002      	b.n	100010ee <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100010e8:	2a02      	cmp	r2, #2
100010ea:	d014      	beq.n	10001116 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100010ec:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100010ee:	a912      	add	r1, sp, #72	; 0x48
100010f0:	7a0b      	ldrb	r3, [r1, #8]
100010f2:	2003      	movs	r0, #3
100010f4:	001d      	movs	r5, r3
100010f6:	4005      	ands	r5, r0
100010f8:	4203      	tst	r3, r0
100010fa:	d045      	beq.n	10001188 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100010fc:	9b07      	ldr	r3, [sp, #28]
100010fe:	9a08      	ldr	r2, [sp, #32]
10001100:	9905      	ldr	r1, [sp, #20]
10001102:	9804      	ldr	r0, [sp, #16]
10001104:	f003 fd0f 	bl	10004b26 <outs>
10001108:	2800      	cmp	r0, #0
1000110a:	da00      	bge.n	1000110e <z_cbvprintf_impl+0x3fa>
1000110c:	e137      	b.n	1000137e <z_cbvprintf_impl+0x66a>
1000110e:	183f      	adds	r7, r7, r0
			continue;
10001110:	9b07      	ldr	r3, [sp, #28]
10001112:	9308      	str	r3, [sp, #32]
10001114:	e605      	b.n	10000d22 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10001116:	b21b      	sxth	r3, r3
10001118:	e7dd      	b.n	100010d6 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
1000111a:	2b02      	cmp	r3, #2
1000111c:	d125      	bne.n	1000116a <z_cbvprintf_impl+0x456>
			switch (length_mod) {
1000111e:	1ed0      	subs	r0, r2, #3
10001120:	2804      	cmp	r0, #4
10001122:	d804      	bhi.n	1000112e <z_cbvprintf_impl+0x41a>
10001124:	f7ff f840 	bl	100001a8 <__gnu_thumb1_case_uqi>
10001128:	1912120d 	.word	0x1912120d
1000112c:	19          	.byte	0x19
1000112d:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000112e:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10001130:	2a01      	cmp	r2, #1
10001132:	d016      	beq.n	10001162 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10001134:	9312      	str	r3, [sp, #72]	; 0x48
10001136:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10001138:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
1000113a:	2a02      	cmp	r2, #2
1000113c:	d1d7      	bne.n	100010ee <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000113e:	9312      	str	r3, [sp, #72]	; 0x48
10001140:	e7d5      	b.n	100010ee <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10001142:	cc08      	ldmia	r4!, {r3}
10001144:	9312      	str	r3, [sp, #72]	; 0x48
10001146:	2300      	movs	r3, #0
10001148:	9313      	str	r3, [sp, #76]	; 0x4c
1000114a:	e7d0      	b.n	100010ee <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
1000114c:	2307      	movs	r3, #7
1000114e:	3407      	adds	r4, #7
10001150:	439c      	bics	r4, r3
				value->uint =
10001152:	cc03      	ldmia	r4!, {r0, r1}
10001154:	9012      	str	r0, [sp, #72]	; 0x48
10001156:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10001158:	e7c9      	b.n	100010ee <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
1000115a:	cc08      	ldmia	r4!, {r3}
1000115c:	9312      	str	r3, [sp, #72]	; 0x48
1000115e:	2300      	movs	r3, #0
10001160:	e7c0      	b.n	100010e4 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10001162:	b2db      	uxtb	r3, r3
10001164:	9312      	str	r3, [sp, #72]	; 0x48
10001166:	604d      	str	r5, [r1, #4]
10001168:	e7c1      	b.n	100010ee <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
1000116a:	2b04      	cmp	r3, #4
1000116c:	d108      	bne.n	10001180 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
1000116e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10001170:	3303      	adds	r3, #3
10001172:	439c      	bics	r4, r3
10001174:	6820      	ldr	r0, [r4, #0]
10001176:	6861      	ldr	r1, [r4, #4]
10001178:	3408      	adds	r4, #8
1000117a:	9012      	str	r0, [sp, #72]	; 0x48
1000117c:	9113      	str	r1, [sp, #76]	; 0x4c
1000117e:	e7b6      	b.n	100010ee <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10001180:	2b03      	cmp	r3, #3
10001182:	d1b4      	bne.n	100010ee <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10001184:	cc08      	ldmia	r4!, {r3}
10001186:	e7da      	b.n	1000113e <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10001188:	7ac8      	ldrb	r0, [r1, #11]
1000118a:	2878      	cmp	r0, #120	; 0x78
1000118c:	d8c0      	bhi.n	10001110 <z_cbvprintf_impl+0x3fc>
1000118e:	2862      	cmp	r0, #98	; 0x62
10001190:	d82b      	bhi.n	100011ea <z_cbvprintf_impl+0x4d6>
10001192:	2825      	cmp	r0, #37	; 0x25
10001194:	d100      	bne.n	10001198 <z_cbvprintf_impl+0x484>
10001196:	e5cf      	b.n	10000d38 <z_cbvprintf_impl+0x24>
10001198:	2858      	cmp	r0, #88	; 0x58
1000119a:	d1b9      	bne.n	10001110 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
1000119c:	9812      	ldr	r0, [sp, #72]	; 0x48
1000119e:	9913      	ldr	r1, [sp, #76]	; 0x4c
100011a0:	231e      	movs	r3, #30
100011a2:	aa0a      	add	r2, sp, #40	; 0x28
100011a4:	189b      	adds	r3, r3, r2
100011a6:	9300      	str	r3, [sp, #0]
100011a8:	aa14      	add	r2, sp, #80	; 0x50
100011aa:	ab0c      	add	r3, sp, #48	; 0x30
100011ac:	f003 fc6e 	bl	10004a8c <encode_uint>
			if (precision >= 0) {
100011b0:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
100011b2:	0006      	movs	r6, r0
			if (precision >= 0) {
100011b4:	2b00      	cmp	r3, #0
100011b6:	db0d      	blt.n	100011d4 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
100011b8:	231e      	movs	r3, #30
				conv->flag_zero = false;
100011ba:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
100011bc:	aa0a      	add	r2, sp, #40	; 0x28
100011be:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
100011c0:	aa12      	add	r2, sp, #72	; 0x48
100011c2:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
100011c4:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
100011c6:	4381      	bics	r1, r0
100011c8:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
100011ca:	9906      	ldr	r1, [sp, #24]
100011cc:	4299      	cmp	r1, r3
100011ce:	d901      	bls.n	100011d4 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
100011d0:	1acb      	subs	r3, r1, r3
100011d2:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
100011d4:	2e00      	cmp	r6, #0
100011d6:	d09b      	beq.n	10001110 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100011d8:	231e      	movs	r3, #30
100011da:	aa0a      	add	r2, sp, #40	; 0x28
100011dc:	189b      	adds	r3, r3, r2
100011de:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
100011e0:	9306      	str	r3, [sp, #24]
100011e2:	2d00      	cmp	r5, #0
100011e4:	d032      	beq.n	1000124c <z_cbvprintf_impl+0x538>
			nj_len += 1U;
100011e6:	3001      	adds	r0, #1
100011e8:	e030      	b.n	1000124c <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100011ea:	3863      	subs	r0, #99	; 0x63
100011ec:	2815      	cmp	r0, #21
100011ee:	d88f      	bhi.n	10001110 <z_cbvprintf_impl+0x3fc>
100011f0:	f7fe ffe4 	bl	100001bc <__gnu_thumb1_case_shi>
100011f4:	0068005e 	.word	0x0068005e
100011f8:	ff8eff8e 	.word	0xff8eff8e
100011fc:	ff8eff8e 	.word	0xff8eff8e
10001200:	ff8e0068 	.word	0xff8e0068
10001204:	ff8eff8e 	.word	0xff8eff8e
10001208:	00a0ff8e 	.word	0x00a0ff8e
1000120c:	007c007a 	.word	0x007c007a
10001210:	ff8eff8e 	.word	0xff8eff8e
10001214:	ff8e001e 	.word	0xff8e001e
10001218:	ff8e007a 	.word	0xff8e007a
1000121c:	007aff8e 	.word	0x007aff8e
10001220:	ffff87fd 	.word	0xffff87fd
10001224:	00004002 	.word	0x00004002
10001228:	00000482 	.word	0x00000482
1000122c:	00000801 	.word	0x00000801
			if (precision >= 0) {
10001230:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10001232:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10001234:	2b00      	cmp	r3, #0
10001236:	db37      	blt.n	100012a8 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10001238:	0019      	movs	r1, r3
1000123a:	0030      	movs	r0, r6
1000123c:	f003 ff96 	bl	1000516c <strnlen>
			bpe = bps + len;
10001240:	1833      	adds	r3, r6, r0
		char sign = 0;
10001242:	2500      	movs	r5, #0
			bpe = bps + len;
10001244:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10001246:	2e00      	cmp	r6, #0
10001248:	d100      	bne.n	1000124c <z_cbvprintf_impl+0x538>
1000124a:	e761      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
1000124c:	ab12      	add	r3, sp, #72	; 0x48
1000124e:	7a9b      	ldrb	r3, [r3, #10]
10001250:	2210      	movs	r2, #16
10001252:	0019      	movs	r1, r3
10001254:	4011      	ands	r1, r2
10001256:	910b      	str	r1, [sp, #44]	; 0x2c
10001258:	4213      	tst	r3, r2
1000125a:	d100      	bne.n	1000125e <z_cbvprintf_impl+0x54a>
1000125c:	e085      	b.n	1000136a <z_cbvprintf_impl+0x656>
			nj_len += 2U;
1000125e:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10001260:	9a15      	ldr	r2, [sp, #84]	; 0x54
10001262:	920a      	str	r2, [sp, #40]	; 0x28
10001264:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10001266:	065b      	lsls	r3, r3, #25
10001268:	d501      	bpl.n	1000126e <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
1000126a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000126c:	18c0      	adds	r0, r0, r3
		if (width > 0) {
1000126e:	9b03      	ldr	r3, [sp, #12]
10001270:	2b00      	cmp	r3, #0
10001272:	dc00      	bgt.n	10001276 <z_cbvprintf_impl+0x562>
10001274:	e094      	b.n	100013a0 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10001276:	1a1b      	subs	r3, r3, r0
10001278:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
1000127a:	ab12      	add	r3, sp, #72	; 0x48
1000127c:	7a1b      	ldrb	r3, [r3, #8]
1000127e:	075a      	lsls	r2, r3, #29
10001280:	0fd1      	lsrs	r1, r2, #31
10001282:	9108      	str	r1, [sp, #32]
10001284:	2a00      	cmp	r2, #0
10001286:	da00      	bge.n	1000128a <z_cbvprintf_impl+0x576>
10001288:	e08a      	b.n	100013a0 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
1000128a:	065b      	lsls	r3, r3, #25
1000128c:	d400      	bmi.n	10001290 <z_cbvprintf_impl+0x57c>
1000128e:	e078      	b.n	10001382 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10001290:	2d00      	cmp	r5, #0
10001292:	d007      	beq.n	100012a4 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10001294:	0028      	movs	r0, r5
10001296:	9905      	ldr	r1, [sp, #20]
10001298:	9b04      	ldr	r3, [sp, #16]
1000129a:	4798      	blx	r3
1000129c:	2800      	cmp	r0, #0
1000129e:	db6e      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
100012a0:	9d08      	ldr	r5, [sp, #32]
100012a2:	3701      	adds	r7, #1
					pad = '0';
100012a4:	2330      	movs	r3, #48	; 0x30
100012a6:	e06d      	b.n	10001384 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
100012a8:	0030      	movs	r0, r6
100012aa:	f003 ff57 	bl	1000515c <strlen>
100012ae:	e7c7      	b.n	10001240 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
100012b0:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
100012b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
100012b4:	ae0c      	add	r6, sp, #48	; 0x30
100012b6:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
100012b8:	aa0a      	add	r2, sp, #40	; 0x28
100012ba:	189b      	adds	r3, r3, r2
		char sign = 0;
100012bc:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
100012be:	2001      	movs	r0, #1
			bpe = buf + 1;
100012c0:	9306      	str	r3, [sp, #24]
100012c2:	e7c3      	b.n	1000124c <z_cbvprintf_impl+0x538>
				sign = '+';
100012c4:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
100012c6:	071a      	lsls	r2, r3, #28
100012c8:	d402      	bmi.n	100012d0 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
100012ca:	06db      	lsls	r3, r3, #27
100012cc:	0fdb      	lsrs	r3, r3, #31
100012ce:	015d      	lsls	r5, r3, #5
			sint = value->sint;
100012d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100012d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
100012d4:	2b00      	cmp	r3, #0
100012d6:	db00      	blt.n	100012da <z_cbvprintf_impl+0x5c6>
100012d8:	e760      	b.n	1000119c <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
100012da:	2100      	movs	r1, #0
100012dc:	4250      	negs	r0, r2
100012de:	4199      	sbcs	r1, r3
				sign = '-';
100012e0:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
100012e2:	9012      	str	r0, [sp, #72]	; 0x48
100012e4:	9113      	str	r1, [sp, #76]	; 0x4c
100012e6:	e759      	b.n	1000119c <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
100012e8:	2500      	movs	r5, #0
100012ea:	e757      	b.n	1000119c <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
100012ec:	9812      	ldr	r0, [sp, #72]	; 0x48
100012ee:	ad12      	add	r5, sp, #72	; 0x48
100012f0:	2800      	cmp	r0, #0
100012f2:	d034      	beq.n	1000135e <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
100012f4:	231e      	movs	r3, #30
100012f6:	aa0a      	add	r2, sp, #40	; 0x28
100012f8:	189b      	adds	r3, r3, r2
100012fa:	9300      	str	r3, [sp, #0]
100012fc:	aa14      	add	r2, sp, #80	; 0x50
100012fe:	ab0c      	add	r3, sp, #48	; 0x30
10001300:	2100      	movs	r1, #0
10001302:	f003 fbc3 	bl	10004a8c <encode_uint>
				conv->altform_0c = true;
10001306:	23ef      	movs	r3, #239	; 0xef
10001308:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000130a:	0006      	movs	r6, r0
				conv->altform_0c = true;
1000130c:	401a      	ands	r2, r3
1000130e:	4b48      	ldr	r3, [pc, #288]	; (10001430 <z_cbvprintf_impl+0x71c>)
10001310:	4313      	orrs	r3, r2
10001312:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10001314:	2500      	movs	r5, #0
			if (precision >= 0) {
10001316:	9b06      	ldr	r3, [sp, #24]
10001318:	42ab      	cmp	r3, r5
1000131a:	db00      	blt.n	1000131e <z_cbvprintf_impl+0x60a>
1000131c:	e74c      	b.n	100011b8 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
1000131e:	42a8      	cmp	r0, r5
10001320:	d100      	bne.n	10001324 <z_cbvprintf_impl+0x610>
10001322:	e6f5      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10001324:	231e      	movs	r3, #30
10001326:	aa0a      	add	r2, sp, #40	; 0x28
10001328:	189b      	adds	r3, r3, r2
1000132a:	1a18      	subs	r0, r3, r0
1000132c:	231e      	movs	r3, #30
1000132e:	189b      	adds	r3, r3, r2
10001330:	9306      	str	r3, [sp, #24]
10001332:	e78b      	b.n	1000124c <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10001334:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10001336:	2a07      	cmp	r2, #7
10001338:	d900      	bls.n	1000133c <z_cbvprintf_impl+0x628>
1000133a:	e6e9      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
1000133c:	0010      	movs	r0, r2
1000133e:	f7fe ff33 	bl	100001a8 <__gnu_thumb1_case_uqi>
10001342:	040c      	.short	0x040c
10001344:	08080c06 	.word	0x08080c06
10001348:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
1000134a:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
1000134c:	e6e0      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
1000134e:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10001350:	e6de      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10001352:	17fa      	asrs	r2, r7, #31
10001354:	601f      	str	r7, [r3, #0]
10001356:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10001358:	e6da      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
1000135a:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
1000135c:	e6d8      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
1000135e:	4b35      	ldr	r3, [pc, #212]	; (10001434 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10001360:	0005      	movs	r5, r0
10001362:	4e35      	ldr	r6, [pc, #212]	; (10001438 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10001364:	2005      	movs	r0, #5
			bpe = bps + 5;
10001366:	9306      	str	r3, [sp, #24]
10001368:	e770      	b.n	1000124c <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
1000136a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
1000136c:	0fd2      	lsrs	r2, r2, #31
1000136e:	1880      	adds	r0, r0, r2
10001370:	e776      	b.n	10001260 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10001372:	9905      	ldr	r1, [sp, #20]
10001374:	9809      	ldr	r0, [sp, #36]	; 0x24
10001376:	9b04      	ldr	r3, [sp, #16]
10001378:	4798      	blx	r3
1000137a:	2800      	cmp	r0, #0
1000137c:	da05      	bge.n	1000138a <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
1000137e:	b019      	add	sp, #100	; 0x64
10001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10001382:	2320      	movs	r3, #32
					pad = '0';
10001384:	9309      	str	r3, [sp, #36]	; 0x24
10001386:	9b03      	ldr	r3, [sp, #12]
10001388:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
1000138a:	9b08      	ldr	r3, [sp, #32]
1000138c:	001a      	movs	r2, r3
1000138e:	3a01      	subs	r2, #1
10001390:	9208      	str	r2, [sp, #32]
10001392:	2b00      	cmp	r3, #0
10001394:	dced      	bgt.n	10001372 <z_cbvprintf_impl+0x65e>
10001396:	9a03      	ldr	r2, [sp, #12]
10001398:	19d7      	adds	r7, r2, r7
1000139a:	1aff      	subs	r7, r7, r3
1000139c:	9b08      	ldr	r3, [sp, #32]
1000139e:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
100013a0:	2d00      	cmp	r5, #0
100013a2:	d006      	beq.n	100013b2 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
100013a4:	0028      	movs	r0, r5
100013a6:	9905      	ldr	r1, [sp, #20]
100013a8:	9b04      	ldr	r3, [sp, #16]
100013aa:	4798      	blx	r3
100013ac:	2800      	cmp	r0, #0
100013ae:	dbe6      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
100013b0:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
100013b2:	ab12      	add	r3, sp, #72	; 0x48
100013b4:	7a9b      	ldrb	r3, [r3, #10]
100013b6:	06da      	lsls	r2, r3, #27
100013b8:	d401      	bmi.n	100013be <z_cbvprintf_impl+0x6aa>
100013ba:	071b      	lsls	r3, r3, #28
100013bc:	d506      	bpl.n	100013cc <z_cbvprintf_impl+0x6b8>
				OUTC('0');
100013be:	2030      	movs	r0, #48	; 0x30
100013c0:	9905      	ldr	r1, [sp, #20]
100013c2:	9b04      	ldr	r3, [sp, #16]
100013c4:	4798      	blx	r3
100013c6:	2800      	cmp	r0, #0
100013c8:	dbd9      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
100013ca:	3701      	adds	r7, #1
			if (conv->altform_0c) {
100013cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100013ce:	2b00      	cmp	r3, #0
100013d0:	d007      	beq.n	100013e2 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
100013d2:	ab12      	add	r3, sp, #72	; 0x48
100013d4:	7ad8      	ldrb	r0, [r3, #11]
100013d6:	9905      	ldr	r1, [sp, #20]
100013d8:	9b04      	ldr	r3, [sp, #16]
100013da:	4798      	blx	r3
100013dc:	2800      	cmp	r0, #0
100013de:	dbce      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
100013e0:	3701      	adds	r7, #1
				while (width-- > 0) {
100013e2:	003d      	movs	r5, r7
100013e4:	e006      	b.n	100013f4 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
100013e6:	2030      	movs	r0, #48	; 0x30
100013e8:	9905      	ldr	r1, [sp, #20]
100013ea:	9b04      	ldr	r3, [sp, #16]
100013ec:	4798      	blx	r3
100013ee:	2800      	cmp	r0, #0
100013f0:	dbc5      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
100013f2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
100013f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100013f6:	19db      	adds	r3, r3, r7
100013f8:	1b5b      	subs	r3, r3, r5
100013fa:	2b00      	cmp	r3, #0
100013fc:	dcf3      	bgt.n	100013e6 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
100013fe:	0032      	movs	r2, r6
10001400:	9b06      	ldr	r3, [sp, #24]
10001402:	9905      	ldr	r1, [sp, #20]
10001404:	9804      	ldr	r0, [sp, #16]
10001406:	f003 fb8e 	bl	10004b26 <outs>
1000140a:	2800      	cmp	r0, #0
1000140c:	dbb7      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
1000140e:	1947      	adds	r7, r0, r5
10001410:	003d      	movs	r5, r7
		while (width > 0) {
10001412:	9b03      	ldr	r3, [sp, #12]
10001414:	195b      	adds	r3, r3, r5
10001416:	1bdb      	subs	r3, r3, r7
10001418:	2b00      	cmp	r3, #0
1000141a:	dc00      	bgt.n	1000141e <z_cbvprintf_impl+0x70a>
1000141c:	e678      	b.n	10001110 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
1000141e:	2020      	movs	r0, #32
10001420:	9905      	ldr	r1, [sp, #20]
10001422:	9b04      	ldr	r3, [sp, #16]
10001424:	4798      	blx	r3
10001426:	2800      	cmp	r0, #0
10001428:	dba9      	blt.n	1000137e <z_cbvprintf_impl+0x66a>
1000142a:	3701      	adds	r7, #1
			--width;
1000142c:	e7f1      	b.n	10001412 <z_cbvprintf_impl+0x6fe>
1000142e:	46c0      	nop			; (mov r8, r8)
10001430:	00007810 	.word	0x00007810
10001434:	100062ec 	.word	0x100062ec
10001438:	100062e7 	.word	0x100062e7

1000143c <cfb_print>:

	return fptr->width;
}

int cfb_print(const struct device *dev, char *str, uint16_t x, uint16_t y)
{
1000143c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000143e:	b093      	sub	sp, #76	; 0x4c
10001440:	9303      	str	r3, [sp, #12]
	const struct char_framebuffer *fb = &char_fb;
	const struct cfb_font *fptr;

	if (!fb->fonts || !fb->buf) {
10001442:	4b67      	ldr	r3, [pc, #412]	; (100015e0 <cfb_print+0x1a4>)
{
10001444:	9107      	str	r1, [sp, #28]
	if (!fb->fonts || !fb->buf) {
10001446:	6899      	ldr	r1, [r3, #8]
{
10001448:	9201      	str	r2, [sp, #4]
	if (!fb->fonts || !fb->buf) {
1000144a:	2900      	cmp	r1, #0
1000144c:	d100      	bne.n	10001450 <cfb_print+0x14>
1000144e:	e0c5      	b.n	100015dc <cfb_print+0x1a0>
10001450:	681a      	ldr	r2, [r3, #0]
10001452:	2a00      	cmp	r2, #0
10001454:	d100      	bne.n	10001458 <cfb_print+0x1c>
10001456:	e0c1      	b.n	100015dc <cfb_print+0x1a0>
		return -ENODEV;
	}

	fptr = &(fb->fonts[fb->font_idx]);
10001458:	200c      	movs	r0, #12
1000145a:	7d1a      	ldrb	r2, [r3, #20]
1000145c:	4342      	muls	r2, r0
1000145e:	188a      	adds	r2, r1, r2
10001460:	9204      	str	r2, [sp, #16]

	if (fptr->height % 8) {
10001462:	7991      	ldrb	r1, [r2, #6]
10001464:	2207      	movs	r2, #7
10001466:	0008      	movs	r0, r1
10001468:	4010      	ands	r0, r2
1000146a:	4211      	tst	r1, r2
1000146c:	d00d      	beq.n	1000148a <cfb_print+0x4e>
		LOG_ERR("Wrong font size");
1000146e:	4b5d      	ldr	r3, [pc, #372]	; (100015e4 <cfb_print+0x1a8>)
10001470:	9311      	str	r3, [sp, #68]	; 0x44
10001472:	2302      	movs	r3, #2
10001474:	9310      	str	r3, [sp, #64]	; 0x40
10001476:	2182      	movs	r1, #130	; 0x82
10001478:	485b      	ldr	r0, [pc, #364]	; (100015e8 <cfb_print+0x1ac>)
1000147a:	2300      	movs	r3, #0
1000147c:	aa10      	add	r2, sp, #64	; 0x40
1000147e:	0149      	lsls	r1, r1, #5
10001480:	f000 fbc0 	bl	10001c04 <z_impl_z_log_msg_static_create>
		return -EINVAL;
10001484:	2016      	movs	r0, #22
		return -ENODEV;
10001486:	4240      	negs	r0, r0
10001488:	e051      	b.n	1000152e <cfb_print+0xf2>
	}

	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
1000148a:	2101      	movs	r1, #1
1000148c:	7b5b      	ldrb	r3, [r3, #13]
1000148e:	420b      	tst	r3, r1
10001490:	d003      	beq.n	1000149a <cfb_print+0x5e>
10001492:	9b03      	ldr	r3, [sp, #12]
		for (size_t i = 0; i < strlen(str); i++) {
10001494:	9002      	str	r0, [sp, #8]
	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
10001496:	4213      	tst	r3, r2
10001498:	d042      	beq.n	10001520 <cfb_print+0xe4>
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
		}
		return 0;
	}

	LOG_ERR("Unsupported framebuffer configuration");
1000149a:	4b54      	ldr	r3, [pc, #336]	; (100015ec <cfb_print+0x1b0>)
1000149c:	e7e8      	b.n	10001470 <cfb_print+0x34>
			if (x + fptr->width > fb->x_res) {
1000149e:	9b04      	ldr	r3, [sp, #16]
100014a0:	9a01      	ldr	r2, [sp, #4]
100014a2:	795b      	ldrb	r3, [r3, #5]
100014a4:	189b      	adds	r3, r3, r2
100014a6:	4a4e      	ldr	r2, [pc, #312]	; (100015e0 <cfb_print+0x1a4>)
100014a8:	89d1      	ldrh	r1, [r2, #14]
100014aa:	428b      	cmp	r3, r1
100014ac:	dd07      	ble.n	100014be <cfb_print+0x82>
				y += fptr->height;
100014ae:	9b04      	ldr	r3, [sp, #16]
100014b0:	9903      	ldr	r1, [sp, #12]
100014b2:	799b      	ldrb	r3, [r3, #6]
100014b4:	18cb      	adds	r3, r1, r3
100014b6:	b29b      	uxth	r3, r3
100014b8:	9303      	str	r3, [sp, #12]
				x = 0U;
100014ba:	2300      	movs	r3, #0
100014bc:	9301      	str	r3, [sp, #4]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
100014be:	2315      	movs	r3, #21
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
100014c0:	200c      	movs	r0, #12
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
100014c2:	56d3      	ldrsb	r3, [r2, r3]
100014c4:	9902      	ldr	r1, [sp, #8]
100014c6:	9308      	str	r3, [sp, #32]
100014c8:	9b07      	ldr	r3, [sp, #28]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
100014ca:	6895      	ldr	r5, [r2, #8]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
100014cc:	5c5b      	ldrb	r3, [r3, r1]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
100014ce:	7d11      	ldrb	r1, [r2, #20]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
100014d0:	7b52      	ldrb	r2, [r2, #13]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
100014d2:	4341      	muls	r1, r0
100014d4:	186d      	adds	r5, r5, r1
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
100014d6:	2101      	movs	r1, #1
100014d8:	0852      	lsrs	r2, r2, #1
100014da:	4011      	ands	r1, r2
100014dc:	9109      	str	r1, [sp, #36]	; 0x24
100014de:	2101      	movs	r1, #1
100014e0:	792a      	ldrb	r2, [r5, #4]
100014e2:	0892      	lsrs	r2, r2, #2
100014e4:	4011      	ands	r1, r2
100014e6:	910a      	str	r1, [sp, #40]	; 0x28
	if (c < fptr->first_char || c > fptr->last_char) {
100014e8:	79e9      	ldrb	r1, [r5, #7]
100014ea:	428b      	cmp	r3, r1
100014ec:	d302      	bcc.n	100014f4 <cfb_print+0xb8>
100014ee:	7a2a      	ldrb	r2, [r5, #8]
100014f0:	429a      	cmp	r2, r3
100014f2:	d200      	bcs.n	100014f6 <cfb_print+0xba>
		c = ' ';
100014f4:	2320      	movs	r3, #32
	       (fptr->width * fptr->height / 8U);
100014f6:	7968      	ldrb	r0, [r5, #5]
100014f8:	79aa      	ldrb	r2, [r5, #6]
	       (c - fptr->first_char) *
100014fa:	1a5b      	subs	r3, r3, r1
	       (fptr->width * fptr->height / 8U);
100014fc:	4342      	muls	r2, r0
100014fe:	08d2      	lsrs	r2, r2, #3
	       (c - fptr->first_char) *
10001500:	4353      	muls	r3, r2
	return (uint8_t *)fptr->data +
10001502:	682a      	ldr	r2, [r5, #0]
10001504:	18d3      	adds	r3, r2, r3
10001506:	9305      	str	r3, [sp, #20]
	if (!glyph_ptr) {
10001508:	2b00      	cmp	r3, #0
1000150a:	d112      	bne.n	10001532 <cfb_print+0xf6>
		return 0;
1000150c:	2300      	movs	r3, #0
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
1000150e:	9a08      	ldr	r2, [sp, #32]
10001510:	189b      	adds	r3, r3, r2
10001512:	9a01      	ldr	r2, [sp, #4]
10001514:	18d3      	adds	r3, r2, r3
10001516:	b29b      	uxth	r3, r3
10001518:	9301      	str	r3, [sp, #4]
		for (size_t i = 0; i < strlen(str); i++) {
1000151a:	9b02      	ldr	r3, [sp, #8]
1000151c:	3301      	adds	r3, #1
1000151e:	9302      	str	r3, [sp, #8]
10001520:	9807      	ldr	r0, [sp, #28]
10001522:	f003 fe1b 	bl	1000515c <strlen>
10001526:	9b02      	ldr	r3, [sp, #8]
10001528:	4298      	cmp	r0, r3
1000152a:	d8b8      	bhi.n	1000149e <cfb_print+0x62>
		return 0;
1000152c:	2000      	movs	r0, #0
	return -EINVAL;
}
1000152e:	b013      	add	sp, #76	; 0x4c
10001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
10001532:	2600      	movs	r6, #0
		uint32_t y_segment = y / 8U;
10001534:	9b03      	ldr	r3, [sp, #12]
10001536:	08db      	lsrs	r3, r3, #3
10001538:	930b      	str	r3, [sp, #44]	; 0x2c
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
1000153a:	796b      	ldrb	r3, [r5, #5]
1000153c:	429e      	cmp	r6, r3
1000153e:	d2e6      	bcs.n	1000150e <cfb_print+0xd2>
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
10001540:	2700      	movs	r7, #0
10001542:	e02f      	b.n	100015a4 <cfb_print+0x168>
			uint32_t fb_y = (y_segment + g_y) * fb->x_res;
10001544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10001546:	4826      	ldr	r0, [pc, #152]	; (100015e0 <cfb_print+0x1a4>)
10001548:	19d1      	adds	r1, r2, r7
1000154a:	89c2      	ldrh	r2, [r0, #14]
1000154c:	434a      	muls	r2, r1
			if ((fb_y + x + g_x) >= fb->size) {
1000154e:	9901      	ldr	r1, [sp, #4]
10001550:	1989      	adds	r1, r1, r6
10001552:	1852      	adds	r2, r2, r1
10001554:	9206      	str	r2, [sp, #24]
10001556:	9906      	ldr	r1, [sp, #24]
10001558:	6842      	ldr	r2, [r0, #4]
1000155a:	4291      	cmp	r1, r2
1000155c:	d2d6      	bcs.n	1000150c <cfb_print+0xd0>
	if (fptr->caps & CFB_FONT_MONO_VPACKED) {
1000155e:	2101      	movs	r1, #1
10001560:	792a      	ldrb	r2, [r5, #4]
10001562:	420a      	tst	r2, r1
10001564:	d024      	beq.n	100015b0 <cfb_print+0x174>
		return glyph_ptr[x * (fptr->height / 8U) + y];
10001566:	4373      	muls	r3, r6
10001568:	9a05      	ldr	r2, [sp, #20]
1000156a:	19d2      	adds	r2, r2, r7
		return glyph_ptr[y * (fptr->width) + x];
1000156c:	5cd4      	ldrb	r4, [r2, r3]
			if (need_reverse) {
1000156e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10001572:	4293      	cmp	r3, r2
10001574:	d011      	beq.n	1000159a <cfb_print+0x15e>
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
10001576:	2233      	movs	r2, #51	; 0x33
	b = (b & 0xf0) >> 4 | (b & 0x0f) << 4;
10001578:	0923      	lsrs	r3, r4, #4
1000157a:	0124      	lsls	r4, r4, #4
1000157c:	431c      	orrs	r4, r3
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
1000157e:	b2e4      	uxtb	r4, r4
10001580:	10a3      	asrs	r3, r4, #2
10001582:	00a4      	lsls	r4, r4, #2
10001584:	4394      	bics	r4, r2
10001586:	4013      	ands	r3, r2
10001588:	4323      	orrs	r3, r4
	b = (b & 0xaa) >> 1 | (b & 0x55) << 1;
1000158a:	b2db      	uxtb	r3, r3
1000158c:	105c      	asrs	r4, r3, #1
1000158e:	3222      	adds	r2, #34	; 0x22
10001590:	005b      	lsls	r3, r3, #1
10001592:	4014      	ands	r4, r2
10001594:	4393      	bics	r3, r2
10001596:	431c      	orrs	r4, r3
10001598:	b2e4      	uxtb	r4, r4
			fb->buf[fb_y + x + g_x] = byte;
1000159a:	4b11      	ldr	r3, [pc, #68]	; (100015e0 <cfb_print+0x1a4>)
1000159c:	9a06      	ldr	r2, [sp, #24]
1000159e:	681b      	ldr	r3, [r3, #0]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
100015a0:	3701      	adds	r7, #1
			fb->buf[fb_y + x + g_x] = byte;
100015a2:	549c      	strb	r4, [r3, r2]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
100015a4:	79ab      	ldrb	r3, [r5, #6]
100015a6:	08db      	lsrs	r3, r3, #3
100015a8:	429f      	cmp	r7, r3
100015aa:	d3cb      	bcc.n	10001544 <cfb_print+0x108>
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
100015ac:	3601      	adds	r6, #1
100015ae:	e7c4      	b.n	1000153a <cfb_print+0xfe>
	} else if (fptr->caps & CFB_FONT_MONO_HPACKED) {
100015b0:	2402      	movs	r4, #2
100015b2:	2302      	movs	r3, #2
100015b4:	4014      	ands	r4, r2
100015b6:	421a      	tst	r2, r3
100015b8:	d004      	beq.n	100015c4 <cfb_print+0x188>
		return glyph_ptr[y * (fptr->width) + x];
100015ba:	796b      	ldrb	r3, [r5, #5]
100015bc:	9a05      	ldr	r2, [sp, #20]
100015be:	437b      	muls	r3, r7
100015c0:	1992      	adds	r2, r2, r6
100015c2:	e7d3      	b.n	1000156c <cfb_print+0x130>
	LOG_WRN("Unknown font type");
100015c4:	4b0a      	ldr	r3, [pc, #40]	; (100015f0 <cfb_print+0x1b4>)
100015c6:	9311      	str	r3, [sp, #68]	; 0x44
100015c8:	2302      	movs	r3, #2
100015ca:	9310      	str	r3, [sp, #64]	; 0x40
100015cc:	2184      	movs	r1, #132	; 0x84
100015ce:	0023      	movs	r3, r4
100015d0:	4805      	ldr	r0, [pc, #20]	; (100015e8 <cfb_print+0x1ac>)
100015d2:	aa10      	add	r2, sp, #64	; 0x40
100015d4:	0149      	lsls	r1, r1, #5
100015d6:	f000 fb15 	bl	10001c04 <z_impl_z_log_msg_static_create>
	return 0;
100015da:	e7c8      	b.n	1000156e <cfb_print+0x132>
		return -ENODEV;
100015dc:	2013      	movs	r0, #19
100015de:	e752      	b.n	10001486 <cfb_print+0x4a>
100015e0:	20000668 	.word	0x20000668
100015e4:	100062ed 	.word	0x100062ed
100015e8:	10005f64 	.word	0x10005f64
100015ec:	1000630f 	.word	0x1000630f
100015f0:	100062fd 	.word	0x100062fd

100015f4 <cfb_framebuffer_finalize>:

	return 0;
}

int cfb_framebuffer_finalize(const struct device *dev)
{
100015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct display_driver_api *api = dev->api;
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
100015f6:	4919      	ldr	r1, [pc, #100]	; (1000165c <cfb_framebuffer_finalize+0x68>)
	const struct display_driver_api *api = dev->api;
100015f8:	6883      	ldr	r3, [r0, #8]
	if (!fb || !fb->buf) {
100015fa:	680c      	ldr	r4, [r1, #0]
{
100015fc:	b089      	sub	sp, #36	; 0x24
	const struct display_driver_api *api = dev->api;
100015fe:	9302      	str	r3, [sp, #8]
	if (!fb || !fb->buf) {
10001600:	2c00      	cmp	r4, #0
10001602:	d028      	beq.n	10001656 <cfb_framebuffer_finalize+0x62>
		return -ENODEV;
	}

	desc.buf_size = fb->size;
10001604:	684a      	ldr	r2, [r1, #4]
10001606:	ab05      	add	r3, sp, #20
10001608:	9205      	str	r2, [sp, #20]
	desc.width = fb->x_res;
1000160a:	89cf      	ldrh	r7, [r1, #14]
1000160c:	809f      	strh	r7, [r3, #4]
	desc.height = fb->y_res;
1000160e:	8a0a      	ldrh	r2, [r1, #16]
	desc.pitch = fb->x_res;
10001610:	811f      	strh	r7, [r3, #8]
	desc.height = fb->y_res;
10001612:	80da      	strh	r2, [r3, #6]

	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
10001614:	7b0e      	ldrb	r6, [r1, #12]
10001616:	7d89      	ldrb	r1, [r1, #22]
10001618:	08b6      	lsrs	r6, r6, #2
1000161a:	46b4      	mov	ip, r6
1000161c:	2601      	movs	r6, #1
1000161e:	4665      	mov	r5, ip
10001620:	9103      	str	r1, [sp, #12]
10001622:	0031      	movs	r1, r6
10001624:	43a9      	bics	r1, r5
10001626:	468c      	mov	ip, r1
10001628:	9903      	ldr	r1, [sp, #12]
1000162a:	404e      	eors	r6, r1
1000162c:	45b4      	cmp	ip, r6
1000162e:	d107      	bne.n	10001640 <cfb_framebuffer_finalize+0x4c>
		cfb_invert(fb);
	}

	return api->write(dev, 0, 0, &desc, fb->buf);
10001630:	9a02      	ldr	r2, [sp, #8]
10001632:	9400      	str	r4, [sp, #0]
10001634:	6894      	ldr	r4, [r2, #8]
10001636:	2200      	movs	r2, #0
10001638:	0011      	movs	r1, r2
1000163a:	47a0      	blx	r4
}
1000163c:	b009      	add	sp, #36	; 0x24
1000163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001640:	0021      	movs	r1, r4
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
10001642:	437a      	muls	r2, r7
10001644:	08d2      	lsrs	r2, r2, #3
10001646:	1912      	adds	r2, r2, r4
10001648:	4291      	cmp	r1, r2
1000164a:	d0f1      	beq.n	10001630 <cfb_framebuffer_finalize+0x3c>
		fb->buf[i] = ~fb->buf[i];
1000164c:	780e      	ldrb	r6, [r1, #0]
1000164e:	43f6      	mvns	r6, r6
10001650:	700e      	strb	r6, [r1, #0]
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
10001652:	3101      	adds	r1, #1
10001654:	e7f8      	b.n	10001648 <cfb_framebuffer_finalize+0x54>
		return -ENODEV;
10001656:	2013      	movs	r0, #19
10001658:	4240      	negs	r0, r0
1000165a:	e7ef      	b.n	1000163c <cfb_framebuffer_finalize+0x48>
1000165c:	20000668 	.word	0x20000668

10001660 <cfb_framebuffer_init>:

	return fb->numof_fonts;
}

int cfb_framebuffer_init(const struct device *dev)
{
10001660:	b5f0      	push	{r4, r5, r6, r7, lr}
10001662:	b085      	sub	sp, #20
	const struct display_driver_api *api = dev->api;
	struct char_framebuffer *fb = &char_fb;
	struct display_capabilities cfg;

	api->get_capabilities(dev, &cfg);
10001664:	6883      	ldr	r3, [r0, #8]
{
10001666:	af00      	add	r7, sp, #0
	api->get_capabilities(dev, &cfg);
10001668:	0039      	movs	r1, r7
1000166a:	69db      	ldr	r3, [r3, #28]
1000166c:	4798      	blx	r3

	fb->numof_fonts = __font_entry_end - __font_entry_start;
1000166e:	4b21      	ldr	r3, [pc, #132]	; (100016f4 <cfb_framebuffer_init+0x94>)
10001670:	4e21      	ldr	r6, [pc, #132]	; (100016f8 <cfb_framebuffer_init+0x98>)
10001672:	4a22      	ldr	r2, [pc, #136]	; (100016fc <cfb_framebuffer_init+0x9c>)
10001674:	1b9b      	subs	r3, r3, r6
10001676:	109b      	asrs	r3, r3, #2
10001678:	4353      	muls	r3, r2
1000167a:	4c21      	ldr	r4, [pc, #132]	; (10001700 <cfb_framebuffer_init+0xa0>)
	LOG_DBG("number of fonts %d", fb->numof_fonts);
1000167c:	466d      	mov	r5, sp
1000167e:	b088      	sub	sp, #32
10001680:	466a      	mov	r2, sp
	fb->numof_fonts = __font_entry_end - __font_entry_start;
10001682:	74e3      	strb	r3, [r4, #19]
	LOG_DBG("number of fonts %d", fb->numof_fonts);
10001684:	b2db      	uxtb	r3, r3
10001686:	61d3      	str	r3, [r2, #28]
10001688:	2304      	movs	r3, #4
1000168a:	491e      	ldr	r1, [pc, #120]	; (10001704 <cfb_framebuffer_init+0xa4>)
1000168c:	6113      	str	r3, [r2, #16]
1000168e:	6151      	str	r1, [r2, #20]
10001690:	491d      	ldr	r1, [pc, #116]	; (10001708 <cfb_framebuffer_init+0xa8>)
10001692:	6191      	str	r1, [r2, #24]
10001694:	2184      	movs	r1, #132	; 0x84
10001696:	2300      	movs	r3, #0
10001698:	481c      	ldr	r0, [pc, #112]	; (1000170c <cfb_framebuffer_init+0xac>)
1000169a:	3210      	adds	r2, #16
1000169c:	0189      	lsls	r1, r1, #6
1000169e:	f000 fab1 	bl	10001c04 <z_impl_z_log_msg_static_create>
	if (!fb->numof_fonts) {
100016a2:	7ce3      	ldrb	r3, [r4, #19]
100016a4:	46ad      	mov	sp, r5
100016a6:	2b00      	cmp	r3, #0
100016a8:	d01e      	beq.n	100016e8 <cfb_framebuffer_init+0x88>
		return -ENODEV;
	}

	fb->x_res = cfg.x_resolution;
	fb->y_res = cfg.y_resolution;
	fb->ppt = 8U;
100016aa:	2208      	movs	r2, #8
	fb->pixel_format = cfg.current_pixel_format;
	fb->screen_info = cfg.screen_info;
	fb->buf = NULL;
100016ac:	2500      	movs	r5, #0
	fb->x_res = cfg.x_resolution;
100016ae:	883b      	ldrh	r3, [r7, #0]
100016b0:	81e3      	strh	r3, [r4, #14]
	fb->y_res = cfg.y_resolution;
100016b2:	8878      	ldrh	r0, [r7, #2]
	fb->ppt = 8U;
100016b4:	74a2      	strb	r2, [r4, #18]
	fb->y_res = cfg.y_resolution;
100016b6:	8220      	strh	r0, [r4, #16]
	fb->inverted = false;

	fb->fonts = __font_entry_start;
	fb->font_idx = 0U;

	fb->size = fb->x_res * fb->y_res / fb->ppt;
100016b8:	4358      	muls	r0, r3
	fb->pixel_format = cfg.current_pixel_format;
100016ba:	7b3a      	ldrb	r2, [r7, #12]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
100016bc:	10c0      	asrs	r0, r0, #3
	fb->pixel_format = cfg.current_pixel_format;
100016be:	7322      	strb	r2, [r4, #12]
	fb->screen_info = cfg.screen_info;
100016c0:	68ba      	ldr	r2, [r7, #8]
	fb->font_idx = 0U;
100016c2:	82a5      	strh	r5, [r4, #20]
	fb->screen_info = cfg.screen_info;
100016c4:	7362      	strb	r2, [r4, #13]
	fb->buf = NULL;
100016c6:	6025      	str	r5, [r4, #0]
	fb->fonts = __font_entry_start;
100016c8:	60a6      	str	r6, [r4, #8]
	fb->inverted = false;
100016ca:	75a5      	strb	r5, [r4, #22]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
100016cc:	6060      	str	r0, [r4, #4]
	fb->buf = k_malloc(fb->size);
100016ce:	f004 fb53 	bl	10005d78 <k_malloc>
100016d2:	6020      	str	r0, [r4, #0]
	if (!fb->buf) {
100016d4:	42a8      	cmp	r0, r5
100016d6:	d00a      	beq.n	100016ee <cfb_framebuffer_init+0x8e>
		return -ENOMEM;
	}

	memset(fb->buf, 0, fb->size);
100016d8:	0029      	movs	r1, r5
100016da:	6862      	ldr	r2, [r4, #4]
100016dc:	f003 fd59 	bl	10005192 <memset>

	return 0;
100016e0:	0028      	movs	r0, r5
}
100016e2:	46bd      	mov	sp, r7
100016e4:	b005      	add	sp, #20
100016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
100016e8:	2013      	movs	r0, #19
		return -ENOMEM;
100016ea:	4240      	negs	r0, r0
100016ec:	e7f9      	b.n	100016e2 <cfb_framebuffer_init+0x82>
100016ee:	200c      	movs	r0, #12
100016f0:	e7fb      	b.n	100016ea <cfb_framebuffer_init+0x8a>
100016f2:	46c0      	nop			; (mov r8, r8)
100016f4:	10005fe8 	.word	0x10005fe8
100016f8:	10005fc4 	.word	0x10005fc4
100016fc:	aaaaaaab 	.word	0xaaaaaaab
10001700:	20000668 	.word	0x20000668
10001704:	10006335 	.word	0x10006335
10001708:	1000634c 	.word	0x1000634c
1000170c:	10005f64 	.word	0x10005f64

10001710 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
10001710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001712:	0005      	movs	r5, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
10001714:	0006      	movs	r6, r0
10001716:	2d00      	cmp	r5, #0
10001718:	d101      	bne.n	1000171e <activate_foreach_backend+0xe>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
1000171a:	0030      	movs	r0, r6
1000171c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
1000171e:	0028      	movs	r0, r5
10001720:	f7fe fdbc 	bl	1000029c <__ctzsi2>
		mask_cpy &= ~BIT(i);
10001724:	2301      	movs	r3, #1
10001726:	4083      	lsls	r3, r0
10001728:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
1000172a:	4f0e      	ldr	r7, [pc, #56]	; (10001764 <activate_foreach_backend+0x54>)
1000172c:	0104      	lsls	r4, r0, #4
		mask_cpy &= ~BIT(i);
1000172e:	439d      	bics	r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10001730:	193b      	adds	r3, r7, r4
10001732:	9301      	str	r3, [sp, #4]
10001734:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
10001736:	9200      	str	r2, [sp, #0]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10001738:	2b00      	cmp	r3, #0
1000173a:	d0ec      	beq.n	10001716 <activate_foreach_backend+0x6>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
1000173c:	59e3      	ldr	r3, [r4, r7]
1000173e:	691b      	ldr	r3, [r3, #16]
10001740:	2b00      	cmp	r3, #0
10001742:	d109      	bne.n	10001758 <activate_foreach_backend+0x48>
			mask &= ~BIT(i);
10001744:	9b00      	ldr	r3, [sp, #0]
					   backend->cb->ctx,
10001746:	193c      	adds	r4, r7, r4
			mask &= ~BIT(i);
10001748:	401e      	ands	r6, r3
			log_backend_enable(backend,
1000174a:	6863      	ldr	r3, [r4, #4]
1000174c:	2204      	movs	r2, #4
1000174e:	6819      	ldr	r1, [r3, #0]
10001750:	9801      	ldr	r0, [sp, #4]
10001752:	f000 fa43 	bl	10001bdc <log_backend_enable>
10001756:	e7de      	b.n	10001716 <activate_foreach_backend+0x6>
		return backend->api->is_ready(backend);
10001758:	1938      	adds	r0, r7, r4
1000175a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
1000175c:	2800      	cmp	r0, #0
1000175e:	d1da      	bne.n	10001716 <activate_foreach_backend+0x6>
10001760:	e7f0      	b.n	10001744 <activate_foreach_backend+0x34>
10001762:	46c0      	nop			; (mov r8, r8)
10001764:	10005fb4 	.word	0x10005fb4

10001768 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
10001768:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
1000176a:	2200      	movs	r2, #0
{
1000176c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
1000176e:	490f      	ldr	r1, [pc, #60]	; (100017ac <enable_logger+0x44>)
10001770:	480f      	ldr	r0, [pc, #60]	; (100017b0 <enable_logger+0x48>)
10001772:	f004 faa0 	bl	10005cb6 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
10001776:	2400      	movs	r4, #0
10001778:	2600      	movs	r6, #0
1000177a:	2700      	movs	r7, #0
1000177c:	200e      	movs	r0, #14
1000177e:	22c0      	movs	r2, #192	; 0xc0
10001780:	4d0c      	ldr	r5, [pc, #48]	; (100017b4 <enable_logger+0x4c>)
10001782:	9003      	str	r0, [sp, #12]
10001784:	9606      	str	r6, [sp, #24]
10001786:	9707      	str	r7, [sp, #28]
10001788:	0028      	movs	r0, r5
1000178a:	4b0b      	ldr	r3, [pc, #44]	; (100017b8 <enable_logger+0x50>)
1000178c:	490b      	ldr	r1, [pc, #44]	; (100017bc <enable_logger+0x54>)
1000178e:	9404      	str	r4, [sp, #16]
10001790:	9402      	str	r4, [sp, #8]
10001792:	9401      	str	r4, [sp, #4]
10001794:	9400      	str	r4, [sp, #0]
10001796:	0092      	lsls	r2, r2, #2
10001798:	f002 f89a 	bl	100038d0 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
1000179c:	4908      	ldr	r1, [pc, #32]	; (100017c0 <enable_logger+0x58>)
1000179e:	0028      	movs	r0, r5
100017a0:	f004 f973 	bl	10005a8a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
100017a4:	0020      	movs	r0, r4
100017a6:	b009      	add	sp, #36	; 0x24
100017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100017aa:	46c0      	nop			; (mov r8, r8)
100017ac:	100017c5 	.word	0x100017c5
100017b0:	20000530 	.word	0x20000530
100017b4:	200000b8 	.word	0x200000b8
100017b8:	10001a91 	.word	0x10001a91
100017bc:	20000770 	.word	0x20000770
100017c0:	10009934 	.word	0x10009934

100017c4 <log_process_thread_timer_expiry_fn>:
{
100017c4:	b510      	push	{r4, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
100017c6:	4802      	ldr	r0, [pc, #8]	; (100017d0 <log_process_thread_timer_expiry_fn+0xc>)
100017c8:	f002 f8f6 	bl	100039b8 <z_impl_k_sem_give>
}
100017cc:	bd10      	pop	{r4, pc}
100017ce:	46c0      	nop			; (mov r8, r8)
100017d0:	200000a8 	.word	0x200000a8

100017d4 <z_log_init>:
{
100017d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100017d6:	9000      	str	r0, [sp, #0]
	if (atomic_inc(&initialized) != 0) {
100017d8:	481e      	ldr	r0, [pc, #120]	; (10001854 <z_log_init+0x80>)
{
100017da:	9101      	str	r1, [sp, #4]
	if (atomic_inc(&initialized) != 0) {
100017dc:	f003 fc18 	bl	10005010 <atomic_inc>
100017e0:	1e06      	subs	r6, r0, #0
100017e2:	d033      	beq.n	1000184c <z_log_init+0x78>
	uint32_t mask = 0;
100017e4:	2500      	movs	r5, #0
}
100017e6:	0028      	movs	r0, r5
100017e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (backend->autostart) {
100017ea:	7b23      	ldrb	r3, [r4, #12]
100017ec:	2b00      	cmp	r3, #0
100017ee:	d010      	beq.n	10001812 <z_log_init+0x3e>
	if (backend->api->init) {
100017f0:	6823      	ldr	r3, [r4, #0]
100017f2:	68db      	ldr	r3, [r3, #12]
100017f4:	2b00      	cmp	r3, #0
100017f6:	d001      	beq.n	100017fc <z_log_init+0x28>
		backend->api->init(backend);
100017f8:	0020      	movs	r0, r4
100017fa:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
100017fc:	6823      	ldr	r3, [r4, #0]
100017fe:	691b      	ldr	r3, [r3, #16]
10001800:	2b00      	cmp	r3, #0
10001802:	d11b      	bne.n	1000183c <z_log_init+0x68>
				log_backend_enable(backend,
10001804:	6863      	ldr	r3, [r4, #4]
10001806:	2204      	movs	r2, #4
10001808:	0020      	movs	r0, r4
1000180a:	6819      	ldr	r1, [r3, #0]
1000180c:	f000 f9e6 	bl	10001bdc <log_backend_enable>
			i++;
10001810:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001812:	3410      	adds	r4, #16
10001814:	4b10      	ldr	r3, [pc, #64]	; (10001858 <z_log_init+0x84>)
10001816:	429c      	cmp	r4, r3
10001818:	d3e7      	bcc.n	100017ea <z_log_init+0x16>
	if (blocking) {
1000181a:	9b00      	ldr	r3, [sp, #0]
1000181c:	2b00      	cmp	r3, #0
1000181e:	d0e2      	beq.n	100017e6 <z_log_init+0x12>
		while (mask) {
10001820:	2d00      	cmp	r5, #0
10001822:	d0df      	beq.n	100017e4 <z_log_init+0x10>
			mask = activate_foreach_backend(mask);
10001824:	0028      	movs	r0, r5
10001826:	f7ff ff73 	bl	10001710 <activate_foreach_backend>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
1000182a:	9b01      	ldr	r3, [sp, #4]
			mask = activate_foreach_backend(mask);
1000182c:	0005      	movs	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
1000182e:	2b00      	cmp	r3, #0
10001830:	d0f6      	beq.n	10001820 <z_log_init+0x4c>
	return z_impl_k_sleep(timeout);
10001832:	2100      	movs	r1, #0
10001834:	2064      	movs	r0, #100	; 0x64
10001836:	f002 fb7b 	bl	10003f30 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
1000183a:	e7f1      	b.n	10001820 <z_log_init+0x4c>
		return backend->api->is_ready(backend);
1000183c:	0020      	movs	r0, r4
1000183e:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
10001840:	2800      	cmp	r0, #0
10001842:	d0df      	beq.n	10001804 <z_log_init+0x30>
				mask |= BIT(i);
10001844:	003b      	movs	r3, r7
10001846:	40b3      	lsls	r3, r6
10001848:	431d      	orrs	r5, r3
1000184a:	e7e1      	b.n	10001810 <z_log_init+0x3c>
	uint32_t mask = 0;
1000184c:	0005      	movs	r5, r0
				mask |= BIT(i);
1000184e:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001850:	4c02      	ldr	r4, [pc, #8]	; (1000185c <z_log_init+0x88>)
10001852:	e7df      	b.n	10001814 <z_log_init+0x40>
10001854:	20000690 	.word	0x20000690
10001858:	10005fc4 	.word	0x10005fc4
1000185c:	10005fb4 	.word	0x10005fb4

10001860 <log_format_func_t_get>:
	return format_table[log_type];
10001860:	4b01      	ldr	r3, [pc, #4]	; (10001868 <log_format_func_t_get+0x8>)
10001862:	0080      	lsls	r0, r0, #2
10001864:	58c0      	ldr	r0, [r0, r3]
}
10001866:	4770      	bx	lr
10001868:	10006004 	.word	0x10006004

1000186c <log_set_timestamp_func>:
{
1000186c:	0003      	movs	r3, r0
1000186e:	b510      	push	{r4, lr}
10001870:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
10001872:	2b00      	cmp	r3, #0
10001874:	d005      	beq.n	10001882 <log_set_timestamp_func+0x16>
	timestamp_func = timestamp_getter;
10001876:	4a04      	ldr	r2, [pc, #16]	; (10001888 <log_set_timestamp_func+0x1c>)
10001878:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
1000187a:	f000 fc6d 	bl	10002158 <log_output_timestamp_freq_set>
	return 0;
1000187e:	2000      	movs	r0, #0
}
10001880:	bd10      	pop	{r4, pc}
		return -EINVAL;
10001882:	2016      	movs	r0, #22
10001884:	4240      	negs	r0, r0
10001886:	e7fb      	b.n	10001880 <log_set_timestamp_func+0x14>
10001888:	20000004 	.word	0x20000004

1000188c <z_log_notify_backend_enabled>:
{
1000188c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
1000188e:	4c05      	ldr	r4, [pc, #20]	; (100018a4 <z_log_notify_backend_enabled+0x18>)
10001890:	7823      	ldrb	r3, [r4, #0]
10001892:	2b00      	cmp	r3, #0
10001894:	d102      	bne.n	1000189c <z_log_notify_backend_enabled+0x10>
	z_impl_k_sem_give(sem);
10001896:	4804      	ldr	r0, [pc, #16]	; (100018a8 <z_log_notify_backend_enabled+0x1c>)
10001898:	f002 f88e 	bl	100039b8 <z_impl_k_sem_give>
	backend_attached = true;
1000189c:	2301      	movs	r3, #1
1000189e:	7023      	strb	r3, [r4, #0]
}
100018a0:	bd10      	pop	{r4, pc}
100018a2:	46c0      	nop			; (mov r8, r8)
100018a4:	20000764 	.word	0x20000764
100018a8:	200000a8 	.word	0x200000a8

100018ac <z_log_dropped>:
{
100018ac:	b510      	push	{r4, lr}
100018ae:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
100018b0:	4804      	ldr	r0, [pc, #16]	; (100018c4 <z_log_dropped+0x18>)
100018b2:	f003 fbad 	bl	10005010 <atomic_inc>
	if (buffered) {
100018b6:	2c00      	cmp	r4, #0
100018b8:	d003      	beq.n	100018c2 <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
100018ba:	2101      	movs	r1, #1
100018bc:	4802      	ldr	r0, [pc, #8]	; (100018c8 <z_log_dropped+0x1c>)
100018be:	f004 fa2c 	bl	10005d1a <z_impl_atomic_sub>
}
100018c2:	bd10      	pop	{r4, pc}
100018c4:	20000688 	.word	0x20000688
100018c8:	2000068c 	.word	0x2000068c

100018cc <z_log_dropped_read_and_clear>:
{
100018cc:	b510      	push	{r4, lr}
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
100018ce:	2100      	movs	r1, #0
100018d0:	4801      	ldr	r0, [pc, #4]	; (100018d8 <z_log_dropped_read_and_clear+0xc>)
100018d2:	f004 fa2f 	bl	10005d34 <z_impl_atomic_set>
}
100018d6:	bd10      	pop	{r4, pc}
100018d8:	20000688 	.word	0x20000688

100018dc <dropped_notify>:
{
100018dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
100018de:	f7ff fff5 	bl	100018cc <z_log_dropped_read_and_clear>
100018e2:	0005      	movs	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100018e4:	4c08      	ldr	r4, [pc, #32]	; (10001908 <dropped_notify+0x2c>)
100018e6:	4b09      	ldr	r3, [pc, #36]	; (1000190c <dropped_notify+0x30>)
100018e8:	429c      	cmp	r4, r3
100018ea:	d300      	bcc.n	100018ee <dropped_notify+0x12>
}
100018ec:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
100018ee:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
100018f0:	795b      	ldrb	r3, [r3, #5]
100018f2:	2b00      	cmp	r3, #0
100018f4:	d006      	beq.n	10001904 <dropped_notify+0x28>
	if (backend->api->dropped != NULL) {
100018f6:	6823      	ldr	r3, [r4, #0]
100018f8:	685b      	ldr	r3, [r3, #4]
100018fa:	2b00      	cmp	r3, #0
100018fc:	d002      	beq.n	10001904 <dropped_notify+0x28>
		backend->api->dropped(backend, cnt);
100018fe:	0029      	movs	r1, r5
10001900:	0020      	movs	r0, r4
10001902:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001904:	3410      	adds	r4, #16
10001906:	e7ee      	b.n	100018e6 <dropped_notify+0xa>
10001908:	10005fb4 	.word	0x10005fb4
1000190c:	10005fc4 	.word	0x10005fc4

10001910 <z_log_msg_init>:
{
10001910:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
10001912:	4c04      	ldr	r4, [pc, #16]	; (10001924 <z_log_msg_init+0x14>)
10001914:	4904      	ldr	r1, [pc, #16]	; (10001928 <z_log_msg_init+0x18>)
10001916:	0020      	movs	r0, r4
10001918:	f003 fa13 	bl	10004d42 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
1000191c:	4b03      	ldr	r3, [pc, #12]	; (1000192c <z_log_msg_init+0x1c>)
1000191e:	601c      	str	r4, [r3, #0]
}
10001920:	bd10      	pop	{r4, pc}
10001922:	46c0      	nop			; (mov r8, r8)
10001924:	20000058 	.word	0x20000058
10001928:	10005ff0 	.word	0x10005ff0
1000192c:	20000680 	.word	0x20000680

10001930 <log_core_init>:
	panic_mode = false;
10001930:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001932:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
10001934:	4a06      	ldr	r2, [pc, #24]	; (10001950 <log_core_init+0x20>)
{
10001936:	b510      	push	{r4, lr}
	panic_mode = false;
10001938:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
1000193a:	4a06      	ldr	r2, [pc, #24]	; (10001954 <log_core_init+0x24>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
1000193c:	0089      	lsls	r1, r1, #2
	dropped_cnt = 0;
1000193e:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
10001940:	4a05      	ldr	r2, [pc, #20]	; (10001958 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001942:	4806      	ldr	r0, [pc, #24]	; (1000195c <log_core_init+0x2c>)
	buffered_cnt = 0;
10001944:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001946:	f7ff ff91 	bl	1000186c <log_set_timestamp_func>
		z_log_msg_init();
1000194a:	f7ff ffe1 	bl	10001910 <z_log_msg_init>
}
1000194e:	bd10      	pop	{r4, pc}
10001950:	20000765 	.word	0x20000765
10001954:	20000688 	.word	0x20000688
10001958:	2000068c 	.word	0x2000068c
1000195c:	1000501b 	.word	0x1000501b

10001960 <z_log_msg_alloc>:
{
10001960:	b510      	push	{r4, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
10001962:	4c04      	ldr	r4, [pc, #16]	; (10001974 <z_log_msg_alloc+0x14>)
{
10001964:	0001      	movs	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
10001966:	2200      	movs	r2, #0
10001968:	2300      	movs	r3, #0
1000196a:	0020      	movs	r0, r4
1000196c:	f003 fa0a 	bl	10004d84 <mpsc_pbuf_alloc>
}
10001970:	bd10      	pop	{r4, pc}
10001972:	46c0      	nop			; (mov r8, r8)
10001974:	20000058 	.word	0x20000058

10001978 <z_log_msg_local_claim>:
{
10001978:	b510      	push	{r4, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
1000197a:	4802      	ldr	r0, [pc, #8]	; (10001984 <z_log_msg_local_claim+0xc>)
1000197c:	f003 fa9c 	bl	10004eb8 <mpsc_pbuf_claim>
}
10001980:	bd10      	pop	{r4, pc}
10001982:	46c0      	nop			; (mov r8, r8)
10001984:	20000058 	.word	0x20000058

10001988 <z_log_msg_free>:
{
10001988:	b510      	push	{r4, lr}
	msg_free(curr_log_buffer, msg);
1000198a:	4b03      	ldr	r3, [pc, #12]	; (10001998 <z_log_msg_free+0x10>)
{
1000198c:	0001      	movs	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
1000198e:	6818      	ldr	r0, [r3, #0]
10001990:	f003 fae3 	bl	10004f5a <mpsc_pbuf_free>
}
10001994:	bd10      	pop	{r4, pc}
10001996:	46c0      	nop			; (mov r8, r8)
10001998:	20000680 	.word	0x20000680

1000199c <z_log_msg_pending>:
{
1000199c:	b510      	push	{r4, lr}
	return mpsc_pbuf_is_pending(buffer);
1000199e:	4802      	ldr	r0, [pc, #8]	; (100019a8 <z_log_msg_pending+0xc>)
100019a0:	f003 fb14 	bl	10004fcc <mpsc_pbuf_is_pending>
}
100019a4:	bd10      	pop	{r4, pc}
100019a6:	46c0      	nop			; (mov r8, r8)
100019a8:	20000058 	.word	0x20000058

100019ac <z_impl_log_process>:
{
100019ac:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
100019ae:	4b20      	ldr	r3, [pc, #128]	; (10001a30 <z_impl_log_process+0x84>)
100019b0:	7818      	ldrb	r0, [r3, #0]
100019b2:	2800      	cmp	r0, #0
100019b4:	d030      	beq.n	10001a18 <z_impl_log_process+0x6c>
	return z_log_msg_local_claim();
100019b6:	f7ff ffdf 	bl	10001978 <z_log_msg_local_claim>
100019ba:	1e05      	subs	r5, r0, #0
	if (msg) {
100019bc:	d00a      	beq.n	100019d4 <z_impl_log_process+0x28>
	return z_impl_atomic_sub(target, value);
100019be:	2101      	movs	r1, #1
100019c0:	481c      	ldr	r0, [pc, #112]	; (10001a34 <z_impl_log_process+0x88>)
100019c2:	f004 f9aa 	bl	10005d1a <z_impl_atomic_sub>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100019c6:	4c1c      	ldr	r4, [pc, #112]	; (10001a38 <z_impl_log_process+0x8c>)
100019c8:	4b1c      	ldr	r3, [pc, #112]	; (10001a3c <z_impl_log_process+0x90>)
100019ca:	429c      	cmp	r4, r3
100019cc:	d325      	bcc.n	10001a1a <z_impl_log_process+0x6e>
		z_log_msg_free(msg);
100019ce:	0028      	movs	r0, r5
100019d0:	f7ff ffda 	bl	10001988 <z_log_msg_free>
	return dropped_cnt > 0;
100019d4:	4b1a      	ldr	r3, [pc, #104]	; (10001a40 <z_impl_log_process+0x94>)
100019d6:	4c1b      	ldr	r4, [pc, #108]	; (10001a44 <z_impl_log_process+0x98>)
		if ((dropped_pend || unordered_pend) &&
100019d8:	681b      	ldr	r3, [r3, #0]
100019da:	2b00      	cmp	r3, #0
100019dc:	dd11      	ble.n	10001a02 <z_impl_log_process+0x56>
	return z_impl_k_uptime_ticks();
100019de:	f004 f943 	bl	10005c68 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
100019e2:	220a      	movs	r2, #10
100019e4:	2300      	movs	r3, #0
100019e6:	f7fe fc79 	bl	100002dc <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
100019ea:	6822      	ldr	r2, [r4, #0]
100019ec:	6863      	ldr	r3, [r4, #4]
100019ee:	1a80      	subs	r0, r0, r2
100019f0:	4199      	sbcs	r1, r3
		if ((dropped_pend || unordered_pend) &&
100019f2:	2900      	cmp	r1, #0
100019f4:	d103      	bne.n	100019fe <z_impl_log_process+0x52>
100019f6:	23fa      	movs	r3, #250	; 0xfa
100019f8:	009b      	lsls	r3, r3, #2
100019fa:	4298      	cmp	r0, r3
100019fc:	d901      	bls.n	10001a02 <z_impl_log_process+0x56>
				dropped_notify();
100019fe:	f7ff ff6d 	bl	100018dc <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
10001a02:	6822      	ldr	r2, [r4, #0]
10001a04:	6863      	ldr	r3, [r4, #4]
10001a06:	20fa      	movs	r0, #250	; 0xfa
10001a08:	2100      	movs	r1, #0
10001a0a:	0080      	lsls	r0, r0, #2
10001a0c:	1812      	adds	r2, r2, r0
10001a0e:	414b      	adcs	r3, r1
10001a10:	6022      	str	r2, [r4, #0]
10001a12:	6063      	str	r3, [r4, #4]
	return z_log_msg_pending();
10001a14:	f7ff ffc2 	bl	1000199c <z_log_msg_pending>
}
10001a18:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10001a1a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
10001a1c:	795b      	ldrb	r3, [r3, #5]
10001a1e:	2b00      	cmp	r3, #0
10001a20:	d004      	beq.n	10001a2c <z_impl_log_process+0x80>
	backend->api->process(backend, msg);
10001a22:	6823      	ldr	r3, [r4, #0]
10001a24:	0029      	movs	r1, r5
10001a26:	0020      	movs	r0, r4
10001a28:	681b      	ldr	r3, [r3, #0]
10001a2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001a2c:	3410      	adds	r4, #16
10001a2e:	e7cb      	b.n	100019c8 <z_impl_log_process+0x1c>
10001a30:	20000764 	.word	0x20000764
10001a34:	2000068c 	.word	0x2000068c
10001a38:	10005fb4 	.word	0x10005fb4
10001a3c:	10005fc4 	.word	0x10005fc4
10001a40:	20000688 	.word	0x20000688
10001a44:	20000528 	.word	0x20000528

10001a48 <z_impl_log_panic>:
{
10001a48:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
10001a4a:	4d0e      	ldr	r5, [pc, #56]	; (10001a84 <z_impl_log_panic+0x3c>)
10001a4c:	7829      	ldrb	r1, [r5, #0]
10001a4e:	2900      	cmp	r1, #0
10001a50:	d10c      	bne.n	10001a6c <z_impl_log_panic+0x24>
	(void)z_log_init(true, false);
10001a52:	2001      	movs	r0, #1
10001a54:	f7ff febe 	bl	100017d4 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001a58:	4c0b      	ldr	r4, [pc, #44]	; (10001a88 <z_impl_log_panic+0x40>)
10001a5a:	4b0c      	ldr	r3, [pc, #48]	; (10001a8c <z_impl_log_panic+0x44>)
10001a5c:	429c      	cmp	r4, r3
10001a5e:	d306      	bcc.n	10001a6e <z_impl_log_panic+0x26>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
10001a60:	f7ff ffa4 	bl	100019ac <z_impl_log_process>
		while (log_process() == true) {
10001a64:	2800      	cmp	r0, #0
10001a66:	d1fb      	bne.n	10001a60 <z_impl_log_panic+0x18>
	panic_mode = true;
10001a68:	2301      	movs	r3, #1
10001a6a:	702b      	strb	r3, [r5, #0]
}
10001a6c:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10001a6e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
10001a70:	795b      	ldrb	r3, [r3, #5]
10001a72:	2b00      	cmp	r3, #0
10001a74:	d003      	beq.n	10001a7e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
10001a76:	6823      	ldr	r3, [r4, #0]
10001a78:	0020      	movs	r0, r4
10001a7a:	689b      	ldr	r3, [r3, #8]
10001a7c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001a7e:	3410      	adds	r4, #16
10001a80:	e7eb      	b.n	10001a5a <z_impl_log_panic+0x12>
10001a82:	46c0      	nop			; (mov r8, r8)
10001a84:	20000765 	.word	0x20000765
10001a88:	10005fb4 	.word	0x10005fb4
10001a8c:	10005fc4 	.word	0x10005fc4

10001a90 <log_process_thread_func>:
{
10001a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t activate_mask = z_log_init(false, false);
10001a92:	2100      	movs	r1, #0
10001a94:	0008      	movs	r0, r1
10001a96:	f7ff fe9d 	bl	100017d4 <z_log_init>
10001a9a:	1e04      	subs	r4, r0, #0
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
10001a9c:	d02b      	beq.n	10001af6 <log_process_thread_func+0x66>
10001a9e:	27fa      	movs	r7, #250	; 0xfa
10001aa0:	2600      	movs	r6, #0
10001aa2:	007f      	lsls	r7, r7, #1
	return z_impl_z_current_get();
10001aa4:	f002 fa5c 	bl	10003f60 <z_impl_z_current_get>
	proc_tid = process_tid;
10001aa8:	4b1b      	ldr	r3, [pc, #108]	; (10001b18 <log_process_thread_func+0x88>)
10001aaa:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
10001aac:	2800      	cmp	r0, #0
10001aae:	d006      	beq.n	10001abe <log_process_thread_func+0x2e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
10001ab0:	4b1a      	ldr	r3, [pc, #104]	; (10001b1c <log_process_thread_func+0x8c>)
	    process_tid &&
10001ab2:	681b      	ldr	r3, [r3, #0]
10001ab4:	2b09      	cmp	r3, #9
10001ab6:	dd02      	ble.n	10001abe <log_process_thread_func+0x2e>
	z_impl_k_sem_give(sem);
10001ab8:	4819      	ldr	r0, [pc, #100]	; (10001b20 <log_process_thread_func+0x90>)
10001aba:	f001 ff7d 	bl	100039b8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
10001abe:	2300      	movs	r3, #0
10001ac0:	9300      	str	r3, [sp, #0]
		if (activate_mask) {
10001ac2:	2c00      	cmp	r4, #0
10001ac4:	d007      	beq.n	10001ad6 <log_process_thread_func+0x46>
			activate_mask = activate_foreach_backend(activate_mask);
10001ac6:	0020      	movs	r0, r4
10001ac8:	f7ff fe22 	bl	10001710 <activate_foreach_backend>
10001acc:	1e04      	subs	r4, r0, #0
			if (!activate_mask) {
10001ace:	d102      	bne.n	10001ad6 <log_process_thread_func+0x46>
				timeout = K_FOREVER;
10001ad0:	2701      	movs	r7, #1
10001ad2:	427f      	negs	r7, r7
10001ad4:	003e      	movs	r6, r7
10001ad6:	f7ff ff69 	bl	100019ac <z_impl_log_process>
10001ada:	9001      	str	r0, [sp, #4]
		if (log_process() == false) {
10001adc:	2800      	cmp	r0, #0
10001ade:	d108      	bne.n	10001af2 <log_process_thread_func+0x62>
			if (processed_any) {
10001ae0:	9b00      	ldr	r3, [sp, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001ae2:	4d10      	ldr	r5, [pc, #64]	; (10001b24 <log_process_thread_func+0x94>)
			if (processed_any) {
10001ae4:	2b00      	cmp	r3, #0
10001ae6:	d113      	bne.n	10001b10 <log_process_thread_func+0x80>
	return z_impl_k_sem_take(sem, timeout);
10001ae8:	480d      	ldr	r0, [pc, #52]	; (10001b20 <log_process_thread_func+0x90>)
10001aea:	003a      	movs	r2, r7
10001aec:	0033      	movs	r3, r6
10001aee:	f001 ff7f 	bl	100039f0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
10001af2:	9b01      	ldr	r3, [sp, #4]
10001af4:	e7e4      	b.n	10001ac0 <log_process_thread_func+0x30>
10001af6:	2701      	movs	r7, #1
10001af8:	427f      	negs	r7, r7
10001afa:	003e      	movs	r6, r7
10001afc:	e7d2      	b.n	10001aa4 <log_process_thread_func+0x14>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
10001afe:	682b      	ldr	r3, [r5, #0]
10001b00:	699b      	ldr	r3, [r3, #24]
10001b02:	2b00      	cmp	r3, #0
10001b04:	d003      	beq.n	10001b0e <log_process_thread_func+0x7e>
		backend->api->notify(backend, event, arg);
10001b06:	2200      	movs	r2, #0
10001b08:	0028      	movs	r0, r5
10001b0a:	0011      	movs	r1, r2
10001b0c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001b0e:	3510      	adds	r5, #16
10001b10:	4b05      	ldr	r3, [pc, #20]	; (10001b28 <log_process_thread_func+0x98>)
10001b12:	429d      	cmp	r5, r3
10001b14:	d3f3      	bcc.n	10001afe <log_process_thread_func+0x6e>
10001b16:	e7e7      	b.n	10001ae8 <log_process_thread_func+0x58>
10001b18:	20000684 	.word	0x20000684
10001b1c:	2000068c 	.word	0x2000068c
10001b20:	200000a8 	.word	0x200000a8
10001b24:	10005fb4 	.word	0x10005fb4
10001b28:	10005fc4 	.word	0x10005fc4

10001b2c <z_log_msg_post_finalize>:
{
10001b2c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
10001b2e:	4815      	ldr	r0, [pc, #84]	; (10001b84 <z_log_msg_post_finalize+0x58>)
10001b30:	f003 fa6e 	bl	10005010 <atomic_inc>
	if (panic_mode) {
10001b34:	4b14      	ldr	r3, [pc, #80]	; (10001b88 <z_log_msg_post_finalize+0x5c>)
10001b36:	781b      	ldrb	r3, [r3, #0]
10001b38:	2b00      	cmp	r3, #0
10001b3a:	d00a      	beq.n	10001b52 <z_log_msg_post_finalize+0x26>
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
10001b3c:	f3ef 8410 	mrs	r4, PRIMASK
10001b40:	b672      	cpsid	i
10001b42:	f7ff ff33 	bl	100019ac <z_impl_log_process>
 */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
10001b46:	2c00      	cmp	r4, #0
10001b48:	d102      	bne.n	10001b50 <z_log_msg_post_finalize+0x24>
		return;
	}
	__asm__ volatile(
10001b4a:	b662      	cpsie	i
10001b4c:	f3bf 8f6f 	isb	sy
}
10001b50:	bd13      	pop	{r0, r1, r4, pc}
	} else if (proc_tid != NULL) {
10001b52:	4b0e      	ldr	r3, [pc, #56]	; (10001b8c <z_log_msg_post_finalize+0x60>)
10001b54:	681b      	ldr	r3, [r3, #0]
10001b56:	2b00      	cmp	r3, #0
10001b58:	d0fa      	beq.n	10001b50 <z_log_msg_post_finalize+0x24>
		if (cnt == 0) {
10001b5a:	2800      	cmp	r0, #0
10001b5c:	d109      	bne.n	10001b72 <z_log_msg_post_finalize+0x46>
	z_impl_k_timer_start(timer, duration, period);
10001b5e:	2200      	movs	r2, #0
10001b60:	2300      	movs	r3, #0
10001b62:	480b      	ldr	r0, [pc, #44]	; (10001b90 <z_log_msg_post_finalize+0x64>)
10001b64:	9200      	str	r2, [sp, #0]
10001b66:	9301      	str	r3, [sp, #4]
10001b68:	2300      	movs	r3, #0
10001b6a:	4a0a      	ldr	r2, [pc, #40]	; (10001b94 <z_log_msg_post_finalize+0x68>)
10001b6c:	f002 fc24 	bl	100043b8 <z_impl_k_timer_start>
10001b70:	e7ee      	b.n	10001b50 <z_log_msg_post_finalize+0x24>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
10001b72:	280a      	cmp	r0, #10
10001b74:	d1ec      	bne.n	10001b50 <z_log_msg_post_finalize+0x24>
	z_impl_k_timer_stop(timer);
10001b76:	4806      	ldr	r0, [pc, #24]	; (10001b90 <z_log_msg_post_finalize+0x64>)
10001b78:	f004 f8a9 	bl	10005cce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
10001b7c:	4806      	ldr	r0, [pc, #24]	; (10001b98 <z_log_msg_post_finalize+0x6c>)
10001b7e:	f001 ff1b 	bl	100039b8 <z_impl_k_sem_give>
}
10001b82:	e7e5      	b.n	10001b50 <z_log_msg_post_finalize+0x24>
10001b84:	2000068c 	.word	0x2000068c
10001b88:	20000765 	.word	0x20000765
10001b8c:	20000684 	.word	0x20000684
10001b90:	20000530 	.word	0x20000530
10001b94:	00002710 	.word	0x00002710
10001b98:	200000a8 	.word	0x200000a8

10001b9c <z_log_msg_commit>:
{
10001b9c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
10001b9e:	4b06      	ldr	r3, [pc, #24]	; (10001bb8 <z_log_msg_commit+0x1c>)
{
10001ba0:	0004      	movs	r4, r0
	msg->hdr.timestamp = timestamp_func();
10001ba2:	681b      	ldr	r3, [r3, #0]
10001ba4:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
10001ba6:	0021      	movs	r1, r4
	msg->hdr.timestamp = timestamp_func();
10001ba8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
10001baa:	4804      	ldr	r0, [pc, #16]	; (10001bbc <z_log_msg_commit+0x20>)
10001bac:	f003 f968 	bl	10004e80 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
10001bb0:	f7ff ffbc 	bl	10001b2c <z_log_msg_post_finalize>
}
10001bb4:	bd10      	pop	{r4, pc}
10001bb6:	46c0      	nop			; (mov r8, r8)
10001bb8:	20000004 	.word	0x20000004
10001bbc:	20000058 	.word	0x20000058

10001bc0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10001bc0:	4b04      	ldr	r3, [pc, #16]	; (10001bd4 <log_source_name_get+0x14>)
10001bc2:	4a05      	ldr	r2, [pc, #20]	; (10001bd8 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10001bc4:	2000      	movs	r0, #0
10001bc6:	1a9b      	subs	r3, r3, r2
10001bc8:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10001bca:	4299      	cmp	r1, r3
10001bcc:	d201      	bcs.n	10001bd2 <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10001bce:	00c9      	lsls	r1, r1, #3
10001bd0:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10001bd2:	4770      	bx	lr
10001bd4:	10005fb4 	.word	0x10005fb4
10001bd8:	10005f5c 	.word	0x10005f5c

10001bdc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10001bdc:	4b08      	ldr	r3, [pc, #32]	; (10001c00 <log_backend_enable+0x24>)
{
10001bde:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10001be0:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10001be2:	6844      	ldr	r4, [r0, #4]
10001be4:	111b      	asrs	r3, r3, #4
10001be6:	3301      	adds	r3, #1
10001be8:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10001bea:	6843      	ldr	r3, [r0, #4]
10001bec:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10001bee:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10001bf0:	6843      	ldr	r3, [r0, #4]
10001bf2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10001bf4:	6843      	ldr	r3, [r0, #4]
10001bf6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10001bf8:	f7ff fe48 	bl	1000188c <z_log_notify_backend_enabled>
}
10001bfc:	bd10      	pop	{r4, pc}
10001bfe:	46c0      	nop			; (mov r8, r8)
10001c00:	10005fb4 	.word	0x10005fb4

10001c04 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
10001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c06:	b091      	sub	sp, #68	; 0x44
10001c08:	af04      	add	r7, sp, #16
10001c0a:	603b      	str	r3, [r7, #0]
10001c0c:	030b      	lsls	r3, r1, #12
10001c0e:	0d5b      	lsrs	r3, r3, #21

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
10001c10:	000d      	movs	r5, r1
{
10001c12:	6078      	str	r0, [r7, #4]
10001c14:	617a      	str	r2, [r7, #20]
10001c16:	613b      	str	r3, [r7, #16]
	struct log_msg_desc out_desc = desc;
10001c18:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
10001c1a:	2b00      	cmp	r3, #0
10001c1c:	d100      	bne.n	10001c20 <z_impl_z_log_msg_static_create+0x1c>
10001c1e:	e073      	b.n	10001d08 <z_impl_z_log_msg_static_create+0x104>
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
10001c20:	60bb      	str	r3, [r7, #8]
	struct z_cbprintf_buf_desc buf_desc = {
10001c22:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
10001c24:	2304      	movs	r3, #4
	struct z_cbprintf_buf_desc buf_desc = {
10001c26:	627e      	str	r6, [r7, #36]	; 0x24
10001c28:	62be      	str	r6, [r7, #40]	; 0x28
10001c2a:	62fe      	str	r6, [r7, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
10001c2c:	9302      	str	r3, [sp, #8]
10001c2e:	3318      	adds	r3, #24
10001c30:	18fb      	adds	r3, r7, r3
10001c32:	9301      	str	r3, [sp, #4]
10001c34:	230a      	movs	r3, #10
10001c36:	2218      	movs	r2, #24
10001c38:	9300      	str	r3, [sp, #0]
10001c3a:	3302      	adds	r3, #2
10001c3c:	189b      	adds	r3, r3, r2
10001c3e:	19db      	adds	r3, r3, r7
10001c40:	0032      	movs	r2, r6
10001c42:	68b9      	ldr	r1, [r7, #8]
10001c44:	6978      	ldr	r0, [r7, #20]
10001c46:	f7fe fe4b 	bl	100008e0 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
10001c4a:	2380      	movs	r3, #128	; 0x80
10001c4c:	60f8      	str	r0, [r7, #12]
10001c4e:	011b      	lsls	r3, r3, #4
10001c50:	4298      	cmp	r0, r3
10001c52:	d324      	bcc.n	10001c9e <z_impl_z_log_msg_static_create+0x9a>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
10001c54:	697b      	ldr	r3, [r7, #20]
10001c56:	466c      	mov	r4, sp
10001c58:	791a      	ldrb	r2, [r3, #4]
10001c5a:	795b      	ldrb	r3, [r3, #5]
10001c5c:	b08a      	sub	sp, #40	; 0x28
10001c5e:	021b      	lsls	r3, r3, #8
10001c60:	4313      	orrs	r3, r2
10001c62:	697a      	ldr	r2, [r7, #20]
10001c64:	7992      	ldrb	r2, [r2, #6]
10001c66:	0412      	lsls	r2, r2, #16
10001c68:	431a      	orrs	r2, r3
10001c6a:	697b      	ldr	r3, [r7, #20]
10001c6c:	79db      	ldrb	r3, [r3, #7]
10001c6e:	061b      	lsls	r3, r3, #24
10001c70:	4313      	orrs	r3, r2
10001c72:	aa04      	add	r2, sp, #16
10001c74:	6193      	str	r3, [r2, #24]
10001c76:	4b29      	ldr	r3, [pc, #164]	; (10001d1c <z_impl_z_log_msg_static_create+0x118>)
10001c78:	4929      	ldr	r1, [pc, #164]	; (10001d20 <z_impl_z_log_msg_static_create+0x11c>)
10001c7a:	61d3      	str	r3, [r2, #28]
10001c7c:	2380      	movs	r3, #128	; 0x80
10001c7e:	009b      	lsls	r3, r3, #2
10001c80:	8413      	strh	r3, [r2, #32]
10001c82:	4b28      	ldr	r3, [pc, #160]	; (10001d24 <z_impl_z_log_msg_static_create+0x120>)
10001c84:	6151      	str	r1, [r2, #20]
10001c86:	6113      	str	r3, [r2, #16]
10001c88:	2192      	movs	r1, #146	; 0x92
10001c8a:	0033      	movs	r3, r6
10001c8c:	4826      	ldr	r0, [pc, #152]	; (10001d28 <z_impl_z_log_msg_static_create+0x124>)
10001c8e:	3210      	adds	r2, #16
10001c90:	0189      	lsls	r1, r1, #6
10001c92:	f7ff ffb7 	bl	10001c04 <z_impl_z_log_msg_static_create>
10001c96:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
10001c98:	46bd      	mov	sp, r7
10001c9a:	b00d      	add	sp, #52	; 0x34
10001c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		out_desc.package_len = len;
10001c9e:	68fb      	ldr	r3, [r7, #12]
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
10001ca0:	3417      	adds	r4, #23
10001ca2:	055b      	lsls	r3, r3, #21
10001ca4:	0d5a      	lsrs	r2, r3, #21
10001ca6:	613a      	str	r2, [r7, #16]
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
10001ca8:	4a20      	ldr	r2, [pc, #128]	; (10001d2c <z_impl_z_log_msg_static_create+0x128>)
10001caa:	0b1b      	lsrs	r3, r3, #12
10001cac:	4015      	ands	r5, r2
10001cae:	431d      	orrs	r5, r3
10001cb0:	68fb      	ldr	r3, [r7, #12]
10001cb2:	18e0      	adds	r0, r4, r3
10001cb4:	2307      	movs	r3, #7
10001cb6:	4398      	bics	r0, r3
10001cb8:	3003      	adds	r0, #3
10001cba:	0880      	lsrs	r0, r0, #2
10001cbc:	f7ff fe50 	bl	10001960 <z_log_msg_alloc>
10001cc0:	1e04      	subs	r4, r0, #0
		if (msg) {
10001cc2:	d015      	beq.n	10001cf0 <z_impl_z_log_msg_static_create+0xec>
						    msg->data, out_desc.package_len,
10001cc4:	0003      	movs	r3, r0
10001cc6:	3310      	adds	r3, #16
	struct z_cbprintf_buf_desc buf_desc = {
10001cc8:	627b      	str	r3, [r7, #36]	; 0x24
10001cca:	68fb      	ldr	r3, [r7, #12]
10001ccc:	62fe      	str	r6, [r7, #44]	; 0x2c
10001cce:	62bb      	str	r3, [r7, #40]	; 0x28
	return cbprintf_package_convert(in_packaged, in_len,
10001cd0:	2304      	movs	r3, #4
10001cd2:	9302      	str	r3, [sp, #8]
10001cd4:	3318      	adds	r3, #24
10001cd6:	18fb      	adds	r3, r7, r3
10001cd8:	9301      	str	r3, [sp, #4]
10001cda:	230a      	movs	r3, #10
10001cdc:	2118      	movs	r1, #24
10001cde:	9300      	str	r3, [sp, #0]
10001ce0:	3302      	adds	r3, #2
10001ce2:	185b      	adds	r3, r3, r1
10001ce4:	4a12      	ldr	r2, [pc, #72]	; (10001d30 <z_impl_z_log_msg_static_create+0x12c>)
10001ce6:	68b9      	ldr	r1, [r7, #8]
10001ce8:	6978      	ldr	r0, [r7, #20]
10001cea:	19db      	adds	r3, r3, r7
10001cec:	f7fe fdf8 	bl	100008e0 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
10001cf0:	693b      	ldr	r3, [r7, #16]
10001cf2:	4a0e      	ldr	r2, [pc, #56]	; (10001d2c <z_impl_z_log_msg_static_create+0x128>)
10001cf4:	025b      	lsls	r3, r3, #9
10001cf6:	4015      	ands	r5, r2
10001cf8:	431d      	orrs	r5, r3
10001cfa:	002a      	movs	r2, r5
10001cfc:	0020      	movs	r0, r4
10001cfe:	683b      	ldr	r3, [r7, #0]
10001d00:	6879      	ldr	r1, [r7, #4]
10001d02:	f003 f9bd 	bl	10005080 <z_log_msg_finalize>
10001d06:	e7c7      	b.n	10001c98 <z_impl_z_log_msg_static_create+0x94>
10001d08:	0020      	movs	r0, r4
10001d0a:	2307      	movs	r3, #7
10001d0c:	3017      	adds	r0, #23
10001d0e:	4398      	bics	r0, r3
10001d10:	3003      	adds	r0, #3
10001d12:	0880      	lsrs	r0, r0, #2
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
10001d14:	f7ff fe24 	bl	10001960 <z_log_msg_alloc>
10001d18:	0004      	movs	r4, r0
10001d1a:	e7e9      	b.n	10001cf0 <z_impl_z_log_msg_static_create+0xec>
10001d1c:	000007ff 	.word	0x000007ff
10001d20:	10009949 	.word	0x10009949
10001d24:	01000004 	.word	0x01000004
10001d28:	10005f84 	.word	0x10005f84
10001d2c:	fff001ff 	.word	0xfff001ff
10001d30:	10005053 	.word	0x10005053

10001d34 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10001d36:	2600      	movs	r6, #0
{
10001d38:	b087      	sub	sp, #28
10001d3a:	9303      	str	r3, [sp, #12]
	if (fmt) {
10001d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
10001d3e:	0004      	movs	r4, r0
10001d40:	000f      	movs	r7, r1
10001d42:	0015      	movs	r5, r2
	if (fmt) {
10001d44:	42b3      	cmp	r3, r6
10001d46:	d009      	beq.n	10001d5c <z_impl_z_log_msg_runtime_vcreate+0x28>
		va_copy(ap2, ap);
10001d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001d4a:	0030      	movs	r0, r6
		va_copy(ap2, ap);
10001d4c:	9305      	str	r3, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001d4e:	9300      	str	r3, [sp, #0]
10001d50:	2110      	movs	r1, #16
10001d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10001d56:	f7fe fbdb 	bl	10000510 <cbvprintf_package>
10001d5a:	0006      	movs	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10001d5c:	2307      	movs	r3, #7
10001d5e:	0022      	movs	r2, r4
10001d60:	401d      	ands	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	struct log_msg_desc desc =
10001d64:	401a      	ands	r2, r3
10001d66:	4913      	ldr	r1, [pc, #76]	; (10001db4 <z_impl_z_log_msg_runtime_vcreate+0x80>)
10001d68:	00d2      	lsls	r2, r2, #3
10001d6a:	01ad      	lsls	r5, r5, #6
10001d6c:	4315      	orrs	r5, r2
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d6e:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10001d70:	0272      	lsls	r2, r6, #9
10001d72:	400a      	ands	r2, r1
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d74:	19a0      	adds	r0, r4, r6
	struct log_msg_desc desc =
10001d76:	4315      	orrs	r5, r2
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d78:	4398      	bics	r0, r3
	struct log_msg_desc desc =
10001d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d7c:	3003      	adds	r0, #3
	struct log_msg_desc desc =
10001d7e:	0512      	lsls	r2, r2, #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001d80:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
10001d82:	4315      	orrs	r5, r2
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
10001d84:	f7ff fdec 	bl	10001960 <z_log_msg_alloc>
10001d88:	1e04      	subs	r4, r0, #0
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
10001d8a:	d00a      	beq.n	10001da2 <z_impl_z_log_msg_runtime_vcreate+0x6e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
10001d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001d8e:	2b00      	cmp	r3, #0
10001d90:	d007      	beq.n	10001da2 <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
10001d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10001d94:	0031      	movs	r1, r6
10001d96:	9300      	str	r3, [sp, #0]
10001d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10001d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001d9c:	3010      	adds	r0, #16
10001d9e:	f7fe fbb7 	bl	10000510 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
10001da2:	002a      	movs	r2, r5
10001da4:	0039      	movs	r1, r7
10001da6:	0020      	movs	r0, r4
10001da8:	9b03      	ldr	r3, [sp, #12]
10001daa:	f003 f969 	bl	10005080 <z_log_msg_finalize>
	}
}
10001dae:	b007      	add	sp, #28
10001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001db2:	46c0      	nop			; (mov r8, r8)
10001db4:	000ffe00 	.word	0x000ffe00

10001db8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
10001db8:	b40e      	push	{r1, r2, r3}
10001dba:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001dbc:	4c05      	ldr	r4, [pc, #20]	; (10001dd4 <print_formatted+0x1c>)
{
10001dbe:	ab05      	add	r3, sp, #20
10001dc0:	cb04      	ldmia	r3!, {r2}
10001dc2:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001dc4:	0020      	movs	r0, r4
	va_start(args, fmt);
10001dc6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001dc8:	f003 f981 	bl	100050ce <cbvprintf>
	va_end(args);

	return length;
}
10001dcc:	bc1e      	pop	{r1, r2, r3, r4}
10001dce:	bc08      	pop	{r3}
10001dd0:	b003      	add	sp, #12
10001dd2:	4718      	bx	r3
10001dd4:	100050f3 	.word	0x100050f3

10001dd8 <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10001dd8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10001dda:	06cb      	lsls	r3, r1, #27
10001ddc:	d404      	bmi.n	10001de8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
10001dde:	0689      	lsls	r1, r1, #26
10001de0:	d503      	bpl.n	10001dea <newline_print+0x12>
		print_formatted(ctx, "\n");
10001de2:	4903      	ldr	r1, [pc, #12]	; (10001df0 <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10001de4:	f7ff ffe8 	bl	10001db8 <print_formatted>
	}
}
10001de8:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10001dea:	4902      	ldr	r1, [pc, #8]	; (10001df4 <newline_print+0x1c>)
10001dec:	e7fa      	b.n	10001de4 <newline_print+0xc>
10001dee:	46c0      	nop			; (mov r8, r8)
10001df0:	10009989 	.word	0x10009989
10001df4:	10009988 	.word	0x10009988

10001df8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001dfa:	b08f      	sub	sp, #60	; 0x3c
10001dfc:	9306      	str	r3, [sp, #24]
10001dfe:	ab14      	add	r3, sp, #80	; 0x50
10001e00:	781b      	ldrb	r3, [r3, #0]
10001e02:	0007      	movs	r7, r0
10001e04:	000c      	movs	r4, r1
10001e06:	9208      	str	r2, [sp, #32]
10001e08:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10001e0a:	2b00      	cmp	r3, #0
10001e0c:	d100      	bne.n	10001e10 <log_output_process+0x18>
10001e0e:	e09c      	b.n	10001f4a <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10001e10:	2502      	movs	r5, #2
10001e12:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001e14:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10001e16:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001e18:	2301      	movs	r3, #1
10001e1a:	401a      	ands	r2, r3
10001e1c:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10001e1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
10001e20:	3307      	adds	r3, #7
10001e22:	401a      	ands	r2, r3
10001e24:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10001e26:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10001e28:	f003 f911 	bl	1000504e <z_log_get_tag>
10001e2c:	0002      	movs	r2, r0
	if (tag) {
10001e2e:	42b0      	cmp	r0, r6
10001e30:	d004      	beq.n	10001e3c <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10001e32:	0038      	movs	r0, r7
10001e34:	4983      	ldr	r1, [pc, #524]	; (10002044 <log_output_process+0x24c>)
10001e36:	f7ff ffbf 	bl	10001db8 <print_formatted>
10001e3a:	0006      	movs	r6, r0
	if (stamp) {
10001e3c:	2d00      	cmp	r5, #0
10001e3e:	d009      	beq.n	10001e54 <log_output_process+0x5c>
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
10001e40:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10001e42:	9a18      	ldr	r2, [sp, #96]	; 0x60
10001e44:	421a      	tst	r2, r3
10001e46:	d144      	bne.n	10001ed2 <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10001e48:	0022      	movs	r2, r4
10001e4a:	0038      	movs	r0, r7
10001e4c:	497e      	ldr	r1, [pc, #504]	; (10002048 <log_output_process+0x250>)
10001e4e:	f7ff ffb3 	bl	10001db8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10001e52:	1836      	adds	r6, r6, r0
	if (color) {
10001e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001e56:	2b00      	cmp	r3, #0
10001e58:	d00a      	beq.n	10001e70 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10001e5a:	9a05      	ldr	r2, [sp, #20]
10001e5c:	4b7b      	ldr	r3, [pc, #492]	; (1000204c <log_output_process+0x254>)
10001e5e:	0092      	lsls	r2, r2, #2
10001e60:	58d2      	ldr	r2, [r2, r3]
10001e62:	2a00      	cmp	r2, #0
10001e64:	d100      	bne.n	10001e68 <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10001e66:	4a7a      	ldr	r2, [pc, #488]	; (10002050 <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10001e68:	0038      	movs	r0, r7
10001e6a:	497a      	ldr	r1, [pc, #488]	; (10002054 <log_output_process+0x25c>)
10001e6c:	f7ff ffa4 	bl	10001db8 <print_formatted>
	int total = 0;
10001e70:	2400      	movs	r4, #0
	if (level_on) {
10001e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10001e74:	42a3      	cmp	r3, r4
10001e76:	d008      	beq.n	10001e8a <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10001e78:	9a05      	ldr	r2, [sp, #20]
10001e7a:	4b77      	ldr	r3, [pc, #476]	; (10002058 <log_output_process+0x260>)
10001e7c:	0092      	lsls	r2, r2, #2
10001e7e:	0038      	movs	r0, r7
10001e80:	4976      	ldr	r1, [pc, #472]	; (1000205c <log_output_process+0x264>)
10001e82:	58d2      	ldr	r2, [r2, r3]
10001e84:	f7ff ff98 	bl	10001db8 <print_formatted>
10001e88:	0004      	movs	r4, r0
	if (domain) {
10001e8a:	9b08      	ldr	r3, [sp, #32]
10001e8c:	2b00      	cmp	r3, #0
10001e8e:	d005      	beq.n	10001e9c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10001e90:	001a      	movs	r2, r3
10001e92:	0038      	movs	r0, r7
10001e94:	4972      	ldr	r1, [pc, #456]	; (10002060 <log_output_process+0x268>)
10001e96:	f7ff ff8f 	bl	10001db8 <print_formatted>
10001e9a:	1824      	adds	r4, r4, r0
	if (source) {
10001e9c:	9b06      	ldr	r3, [sp, #24]
10001e9e:	2b00      	cmp	r3, #0
10001ea0:	d005      	beq.n	10001eae <log_output_process+0xb6>
		total += print_formatted(output,
10001ea2:	001a      	movs	r2, r3
10001ea4:	0038      	movs	r0, r7
10001ea6:	496f      	ldr	r1, [pc, #444]	; (10002064 <log_output_process+0x26c>)
10001ea8:	f7ff ff86 	bl	10001db8 <print_formatted>
10001eac:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10001eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10001eb0:	486d      	ldr	r0, [pc, #436]	; (10002068 <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10001eb2:	19a4      	adds	r4, r4, r6
	if (package) {
10001eb4:	2b00      	cmp	r3, #0
10001eb6:	d000      	beq.n	10001eba <log_output_process+0xc2>
10001eb8:	e09b      	b.n	10001ff2 <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10001eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10001ebc:	2b00      	cmp	r3, #0
10001ebe:	d151      	bne.n	10001f64 <log_output_process+0x16c>
	if (color) {
10001ec0:	9b18      	ldr	r3, [sp, #96]	; 0x60
10001ec2:	07db      	lsls	r3, r3, #31
10001ec4:	d500      	bpl.n	10001ec8 <log_output_process+0xd0>
10001ec6:	e0b7      	b.n	10002038 <log_output_process+0x240>
	newline_print(output, flags);
10001ec8:	0038      	movs	r0, r7
10001eca:	9918      	ldr	r1, [sp, #96]	; 0x60
10001ecc:	f7ff ff84 	bl	10001dd8 <newline_print>
}
10001ed0:	e09b      	b.n	1000200a <log_output_process+0x212>
		length = 0;
10001ed2:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10001ed4:	4b65      	ldr	r3, [pc, #404]	; (1000206c <log_output_process+0x274>)
10001ed6:	681d      	ldr	r5, [r3, #0]
10001ed8:	4285      	cmp	r5, r0
10001eda:	d0ba      	beq.n	10001e52 <log_output_process+0x5a>
		timestamp /= timestamp_div;
10001edc:	4b64      	ldr	r3, [pc, #400]	; (10002070 <log_output_process+0x278>)
10001ede:	0020      	movs	r0, r4
10001ee0:	6819      	ldr	r1, [r3, #0]
10001ee2:	f7fe f975 	bl	100001d0 <__udivsi3>
10001ee6:	0029      	movs	r1, r5
10001ee8:	f7fe f9ae 	bl	10000248 <__aeabi_uidivmod>
10001eec:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10001eee:	21e1      	movs	r1, #225	; 0xe1
10001ef0:	0109      	lsls	r1, r1, #4
10001ef2:	9007      	str	r0, [sp, #28]
10001ef4:	f7fe f9a8 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10001ef8:	20fa      	movs	r0, #250	; 0xfa
10001efa:	0080      	lsls	r0, r0, #2
10001efc:	9109      	str	r1, [sp, #36]	; 0x24
10001efe:	4360      	muls	r0, r4
10001f00:	0029      	movs	r1, r5
10001f02:	f7fe f9a1 	bl	10000248 <__aeabi_uidivmod>
10001f06:	000c      	movs	r4, r1
				length = print_formatted(output,
10001f08:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10001f0a:	213c      	movs	r1, #60	; 0x3c
10001f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
10001f0e:	f7fe f95f 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10001f12:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10001f14:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10001f16:	0109      	lsls	r1, r1, #4
10001f18:	9807      	ldr	r0, [sp, #28]
10001f1a:	f7fe f959 	bl	100001d0 <__udivsi3>
10001f1e:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10001f20:	20fa      	movs	r0, #250	; 0xfa
10001f22:	0080      	lsls	r0, r0, #2
10001f24:	0029      	movs	r1, r5
10001f26:	4360      	muls	r0, r4
10001f28:	f7fe f952 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10001f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001f2e:	9002      	str	r0, [sp, #8]
10001f30:	213c      	movs	r1, #60	; 0x3c
10001f32:	9809      	ldr	r0, [sp, #36]	; 0x24
10001f34:	9301      	str	r3, [sp, #4]
10001f36:	f7fe f987 	bl	10000248 <__aeabi_uidivmod>
10001f3a:	0038      	movs	r0, r7
10001f3c:	9100      	str	r1, [sp, #0]
10001f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001f40:	9a07      	ldr	r2, [sp, #28]
10001f42:	494c      	ldr	r1, [pc, #304]	; (10002074 <log_output_process+0x27c>)
10001f44:	f7ff ff38 	bl	10001db8 <print_formatted>
10001f48:	e783      	b.n	10001e52 <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10001f4a:	9b06      	ldr	r3, [sp, #24]
10001f4c:	484a      	ldr	r0, [pc, #296]	; (10002078 <log_output_process+0x280>)
10001f4e:	2b01      	cmp	r3, #1
10001f50:	d100      	bne.n	10001f54 <log_output_process+0x15c>
10001f52:	4845      	ldr	r0, [pc, #276]	; (10002068 <log_output_process+0x270>)
	if (package) {
10001f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10001f56:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10001f58:	2b00      	cmp	r3, #0
10001f5a:	d14a      	bne.n	10001ff2 <log_output_process+0x1fa>
	if (data_len) {
10001f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10001f5e:	2b00      	cmp	r3, #0
10001f60:	d053      	beq.n	1000200a <log_output_process+0x212>
		prefix_offset = 0;
10001f62:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10001f64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10001f66:	2e10      	cmp	r6, #16
10001f68:	d900      	bls.n	10001f6c <log_output_process+0x174>
10001f6a:	2610      	movs	r6, #16
	newline_print(output, flags);
10001f6c:	0038      	movs	r0, r7
10001f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
10001f70:	f7ff ff32 	bl	10001dd8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10001f74:	2500      	movs	r5, #0
10001f76:	42ac      	cmp	r4, r5
10001f78:	dc4c      	bgt.n	10002014 <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
10001f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001f7c:	0038      	movs	r0, r7
10001f7e:	781a      	ldrb	r2, [r3, #0]
10001f80:	493e      	ldr	r1, [pc, #248]	; (1000207c <log_output_process+0x284>)
10001f82:	f7ff ff19 	bl	10001db8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001f86:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
10001f88:	2307      	movs	r3, #7
10001f8a:	421d      	tst	r5, r3
10001f8c:	d103      	bne.n	10001f96 <log_output_process+0x19e>
			print_formatted(output, " ");
10001f8e:	0038      	movs	r0, r7
10001f90:	493b      	ldr	r1, [pc, #236]	; (10002080 <log_output_process+0x288>)
10001f92:	f7ff ff11 	bl	10001db8 <print_formatted>
		if (i < length) {
10001f96:	42ae      	cmp	r6, r5
10001f98:	d942      	bls.n	10002020 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
10001f9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001f9c:	0038      	movs	r0, r7
10001f9e:	5d5a      	ldrb	r2, [r3, r5]
10001fa0:	4936      	ldr	r1, [pc, #216]	; (1000207c <log_output_process+0x284>)
10001fa2:	f7ff ff09 	bl	10001db8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001fa6:	3501      	adds	r5, #1
10001fa8:	2d10      	cmp	r5, #16
10001faa:	d1ed      	bne.n	10001f88 <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001fac:	2500      	movs	r5, #0
	print_formatted(output, "|");
10001fae:	0038      	movs	r0, r7
10001fb0:	4934      	ldr	r1, [pc, #208]	; (10002084 <log_output_process+0x28c>)
10001fb2:	f7ff ff01 	bl	10001db8 <print_formatted>
		if (i < length) {
10001fb6:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
10001fb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
10001fba:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
10001fbc:	0013      	movs	r3, r2
10001fbe:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
10001fc0:	2b5e      	cmp	r3, #94	; 0x5e
10001fc2:	d900      	bls.n	10001fc6 <log_output_process+0x1ce>
10001fc4:	222e      	movs	r2, #46	; 0x2e
10001fc6:	0038      	movs	r0, r7
10001fc8:	492f      	ldr	r1, [pc, #188]	; (10002088 <log_output_process+0x290>)
10001fca:	f7ff fef5 	bl	10001db8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001fce:	3501      	adds	r5, #1
10001fd0:	2d10      	cmp	r5, #16
10001fd2:	d02a      	beq.n	1000202a <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10001fd4:	2307      	movs	r3, #7
10001fd6:	421d      	tst	r5, r3
10001fd8:	d103      	bne.n	10001fe2 <log_output_process+0x1ea>
			print_formatted(output, " ");
10001fda:	0038      	movs	r0, r7
10001fdc:	4928      	ldr	r1, [pc, #160]	; (10002080 <log_output_process+0x288>)
10001fde:	f7ff feeb 	bl	10001db8 <print_formatted>
		if (i < length) {
10001fe2:	002b      	movs	r3, r5
10001fe4:	42ae      	cmp	r6, r5
10001fe6:	d8e7      	bhi.n	10001fb8 <log_output_process+0x1c0>
			print_formatted(output, " ");
10001fe8:	0038      	movs	r0, r7
10001fea:	4925      	ldr	r1, [pc, #148]	; (10002080 <log_output_process+0x288>)
10001fec:	f7ff fee4 	bl	10001db8 <print_formatted>
10001ff0:	e7ed      	b.n	10001fce <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10001ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
10001ff4:	003a      	movs	r2, r7
10001ff6:	4925      	ldr	r1, [pc, #148]	; (1000208c <log_output_process+0x294>)
10001ff8:	f002 fa7d 	bl	100044f6 <cbpprintf_external>
	if (data_len) {
10001ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10001ffe:	2b00      	cmp	r3, #0
10002000:	d1b0      	bne.n	10001f64 <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10002002:	9b05      	ldr	r3, [sp, #20]
10002004:	2b00      	cmp	r3, #0
10002006:	d000      	beq.n	1000200a <log_output_process+0x212>
10002008:	e75a      	b.n	10001ec0 <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
1000200a:	0038      	movs	r0, r7
1000200c:	f003 f865 	bl	100050da <log_output_flush>
}
10002010:	b00f      	add	sp, #60	; 0x3c
10002012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10002014:	0038      	movs	r0, r7
10002016:	491a      	ldr	r1, [pc, #104]	; (10002080 <log_output_process+0x288>)
10002018:	f7ff fece 	bl	10001db8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
1000201c:	3501      	adds	r5, #1
1000201e:	e7aa      	b.n	10001f76 <log_output_process+0x17e>
			print_formatted(output, "   ");
10002020:	0038      	movs	r0, r7
10002022:	491b      	ldr	r1, [pc, #108]	; (10002090 <log_output_process+0x298>)
10002024:	f7ff fec8 	bl	10001db8 <print_formatted>
10002028:	e7bd      	b.n	10001fa6 <log_output_process+0x1ae>
		data += length;
1000202a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000202c:	199b      	adds	r3, r3, r6
1000202e:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10002030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002032:	1b9b      	subs	r3, r3, r6
10002034:	9317      	str	r3, [sp, #92]	; 0x5c
10002036:	e7e2      	b.n	10001ffe <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10002038:	0038      	movs	r0, r7
1000203a:	4a05      	ldr	r2, [pc, #20]	; (10002050 <log_output_process+0x258>)
1000203c:	4905      	ldr	r1, [pc, #20]	; (10002054 <log_output_process+0x25c>)
1000203e:	f7ff febb 	bl	10001db8 <print_formatted>
}
10002042:	e741      	b.n	10001ec8 <log_output_process+0xd0>
10002044:	10009990 	.word	0x10009990
10002048:	10009994 	.word	0x10009994
1000204c:	10006014 	.word	0x10006014
10002050:	1000998b 	.word	0x1000998b
10002054:	100099b9 	.word	0x100099b9
10002058:	10006028 	.word	0x10006028
1000205c:	100099bc 	.word	0x100099bc
10002060:	100099c2 	.word	0x100099c2
10002064:	100099c6 	.word	0x100099c6
10002068:	100050f3 	.word	0x100050f3
1000206c:	20000698 	.word	0x20000698
10002070:	20000694 	.word	0x20000694
10002074:	1000999d 	.word	0x1000999d
10002078:	10005119 	.word	0x10005119
1000207c:	100099cb 	.word	0x100099cb
10002080:	100099d3 	.word	0x100099d3
10002084:	100099d5 	.word	0x100099d5
10002088:	100099d7 	.word	0x100099d7
1000208c:	100050cf 	.word	0x100050cf
10002090:	100099d1 	.word	0x100099d1

10002094 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
10002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
10002096:	880b      	ldrh	r3, [r1, #0]
10002098:	b089      	sub	sp, #36	; 0x24
1000209a:	05db      	lsls	r3, r3, #23
1000209c:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
1000209e:	684b      	ldr	r3, [r1, #4]
100020a0:	000f      	movs	r7, r1
100020a2:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
100020a4:	688e      	ldr	r6, [r1, #8]
100020a6:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
100020a8:	2b00      	cmp	r3, #0
100020aa:	d00c      	beq.n	100020c6 <log_output_msg_process+0x32>
100020ac:	4a13      	ldr	r2, [pc, #76]	; (100020fc <log_output_msg_process+0x68>)
100020ae:	1a9a      	subs	r2, r3, r2
100020b0:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
100020b2:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
100020b4:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
100020b6:	0412      	lsls	r2, r2, #16
100020b8:	d405      	bmi.n	100020c6 <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
100020ba:	7838      	ldrb	r0, [r7, #0]
100020bc:	0680      	lsls	r0, r0, #26
100020be:	0f40      	lsrs	r0, r0, #29
100020c0:	f7ff fd7e 	bl	10001bc0 <log_source_name_get>
100020c4:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
100020c6:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
100020c8:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
100020ca:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
100020cc:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
100020ce:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
100020d0:	0d49      	lsrs	r1, r1, #21
	return msg->data;
100020d2:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
100020d4:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
100020d6:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
100020d8:	1e48      	subs	r0, r1, #1
100020da:	4181      	sbcs	r1, r0
100020dc:	4249      	negs	r1, r1
100020de:	400a      	ands	r2, r1
100020e0:	4661      	mov	r1, ip
100020e2:	9201      	str	r2, [sp, #4]
100020e4:	9103      	str	r1, [sp, #12]
100020e6:	2200      	movs	r2, #0
100020e8:	0031      	movs	r1, r6
100020ea:	9807      	ldr	r0, [sp, #28]
100020ec:	9504      	str	r5, [sp, #16]
100020ee:	9702      	str	r7, [sp, #8]
100020f0:	9400      	str	r4, [sp, #0]
100020f2:	f7ff fe81 	bl	10001df8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
100020f6:	b009      	add	sp, #36	; 0x24
100020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020fa:	46c0      	nop			; (mov r8, r8)
100020fc:	10005f5c 	.word	0x10005f5c

10002100 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
10002100:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
10002102:	4a11      	ldr	r2, [pc, #68]	; (10002148 <log_output_dropped_process+0x48>)
{
10002104:	0004      	movs	r4, r0
	cnt = MIN(cnt, 9999);
10002106:	000b      	movs	r3, r1
	log_output_func_t outf = output->func;
10002108:	6805      	ldr	r5, [r0, #0]
	cnt = MIN(cnt, 9999);
1000210a:	4291      	cmp	r1, r2
1000210c:	d900      	bls.n	10002110 <log_output_dropped_process+0x10>
1000210e:	0013      	movs	r3, r2
	len = snprintk(buf, sizeof(buf), "%d", cnt);
10002110:	2105      	movs	r1, #5
10002112:	4668      	mov	r0, sp
10002114:	4a0d      	ldr	r2, [pc, #52]	; (1000214c <log_output_dropped_process+0x4c>)
10002116:	f002 fa69 	bl	100045ec <snprintk>
1000211a:	0006      	movs	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
1000211c:	6863      	ldr	r3, [r4, #4]
1000211e:	0028      	movs	r0, r5
10002120:	220b      	movs	r2, #11
10002122:	490b      	ldr	r1, [pc, #44]	; (10002150 <log_output_dropped_process+0x50>)
10002124:	685b      	ldr	r3, [r3, #4]
10002126:	f002 ffc4 	bl	100050b2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
1000212a:	6863      	ldr	r3, [r4, #4]
1000212c:	0032      	movs	r2, r6
1000212e:	0028      	movs	r0, r5
10002130:	4669      	mov	r1, sp
10002132:	685b      	ldr	r3, [r3, #4]
10002134:	f002 ffbd 	bl	100050b2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
10002138:	6863      	ldr	r3, [r4, #4]
1000213a:	0028      	movs	r0, r5
1000213c:	221b      	movs	r2, #27
1000213e:	4905      	ldr	r1, [pc, #20]	; (10002154 <log_output_dropped_process+0x54>)
10002140:	685b      	ldr	r3, [r3, #4]
10002142:	f002 ffb6 	bl	100050b2 <buffer_write>
		     output->control_block->ctx);
}
10002146:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
10002148:	0000270f 	.word	0x0000270f
1000214c:	10009d0c 	.word	0x10009d0c
10002150:	100099f6 	.word	0x100099f6
10002154:	100099da 	.word	0x100099da

10002158 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
10002158:	2301      	movs	r3, #1
{
1000215a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
1000215c:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
1000215e:	001c      	movs	r4, r3
	while (frequency > 1000000) {
10002160:	4a07      	ldr	r2, [pc, #28]	; (10002180 <log_output_timestamp_freq_set+0x28>)
10002162:	4290      	cmp	r0, r2
10002164:	d807      	bhi.n	10002176 <log_output_timestamp_freq_set+0x1e>
10002166:	4a07      	ldr	r2, [pc, #28]	; (10002184 <log_output_timestamp_freq_set+0x2c>)
10002168:	2900      	cmp	r1, #0
1000216a:	d100      	bne.n	1000216e <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
1000216c:	2301      	movs	r3, #1
	}

	freq = frequency;
}
1000216e:	6013      	str	r3, [r2, #0]
	freq = frequency;
10002170:	4b05      	ldr	r3, [pc, #20]	; (10002188 <log_output_timestamp_freq_set+0x30>)
10002172:	6018      	str	r0, [r3, #0]
}
10002174:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
10002176:	0021      	movs	r1, r4
		frequency /= 2U;
10002178:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
1000217a:	005b      	lsls	r3, r3, #1
1000217c:	e7f1      	b.n	10002162 <log_output_timestamp_freq_set+0xa>
1000217e:	46c0      	nop			; (mov r8, r8)
10002180:	000f4240 	.word	0x000f4240
10002184:	20000694 	.word	0x20000694
10002188:	20000698 	.word	0x20000698

1000218c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
1000218c:	4b01      	ldr	r3, [pc, #4]	; (10002194 <format_set+0x8>)
	return 0;
}
1000218e:	2000      	movs	r0, #0
	log_format_current = log_type;
10002190:	6019      	str	r1, [r3, #0]
}
10002192:	4770      	bx	lr
10002194:	200006b0 	.word	0x200006b0

10002198 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
10002198:	2201      	movs	r2, #1
{
1000219a:	b510      	push	{r4, lr}
	in_panic = true;
1000219c:	4b02      	ldr	r3, [pc, #8]	; (100021a8 <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
1000219e:	4803      	ldr	r0, [pc, #12]	; (100021ac <panic+0x14>)
100021a0:	701a      	strb	r2, [r3, #0]
100021a2:	f002 ff9a 	bl	100050da <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
100021a6:	bd10      	pop	{r4, pc}
100021a8:	20000767 	.word	0x20000767
100021ac:	10006058 	.word	0x10006058

100021b0 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
100021b0:	b510      	push	{r4, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
100021b2:	4802      	ldr	r0, [pc, #8]	; (100021bc <dropped+0xc>)
100021b4:	f7ff ffa4 	bl	10002100 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
100021b8:	bd10      	pop	{r4, pc}
100021ba:	46c0      	nop			; (mov r8, r8)
100021bc:	10006058 	.word	0x10006058

100021c0 <process>:
{
100021c0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100021c2:	4b05      	ldr	r3, [pc, #20]	; (100021d8 <process+0x18>)
{
100021c4:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100021c6:	6818      	ldr	r0, [r3, #0]
100021c8:	f7ff fb4a 	bl	10001860 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
100021cc:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100021ce:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
100021d0:	0021      	movs	r1, r4
100021d2:	4802      	ldr	r0, [pc, #8]	; (100021dc <process+0x1c>)
100021d4:	4798      	blx	r3
}
100021d6:	bd10      	pop	{r4, pc}
100021d8:	200006b0 	.word	0x200006b0
100021dc:	10006058 	.word	0x10006058

100021e0 <char_out>:
{
100021e0:	b570      	push	{r4, r5, r6, lr}
100021e2:	000d      	movs	r5, r1
100021e4:	0004      	movs	r4, r0
100021e6:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
100021e8:	42b4      	cmp	r4, r6
100021ea:	d101      	bne.n	100021f0 <char_out+0x10>
}
100021ec:	0028      	movs	r0, r5
100021ee:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
100021f0:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100021f2:	4803      	ldr	r0, [pc, #12]	; (10002200 <char_out+0x20>)
100021f4:	3401      	adds	r4, #1
100021f6:	6883      	ldr	r3, [r0, #8]
100021f8:	685b      	ldr	r3, [r3, #4]
100021fa:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
100021fc:	e7f4      	b.n	100021e8 <char_out+0x8>
100021fe:	46c0      	nop			; (mov r8, r8)
10002200:	10005e04 	.word	0x10005e04

10002204 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10002204:	4901      	ldr	r1, [pc, #4]	; (1000220c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10002206:	2210      	movs	r2, #16
	str	r2, [r1]
10002208:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
1000220a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
1000220c:	e000ed10 	.word	0xe000ed10

10002210 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10002210:	f3bf 8f4f 	dsb	sy
10002214:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10002216:	b662      	cpsie	i
	isb
10002218:	f3bf 8f6f 	isb	sy

	bx	lr
1000221c:	4770      	bx	lr
1000221e:	46c0      	nop			; (mov r8, r8)

10002220 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002220:	b5f0      	push	{r4, r5, r6, r7, lr}
10002222:	b085      	sub	sp, #20
10002224:	af00      	add	r7, sp, #0
10002226:	1e0c      	subs	r4, r1, #0
10002228:	6078      	str	r0, [r7, #4]

	if (esf != NULL) {
1000222a:	d04b      	beq.n	100022c4 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
1000222c:	466e      	mov	r6, sp
1000222e:	b08a      	sub	sp, #40	; 0x28
10002230:	6809      	ldr	r1, [r1, #0]
10002232:	6862      	ldr	r2, [r4, #4]
10002234:	68a3      	ldr	r3, [r4, #8]
10002236:	466d      	mov	r5, sp
10002238:	622b      	str	r3, [r5, #32]
1000223a:	2305      	movs	r3, #5
1000223c:	4825      	ldr	r0, [pc, #148]	; (100022d4 <z_arm_fatal_error+0xb4>)
1000223e:	61a9      	str	r1, [r5, #24]
10002240:	6168      	str	r0, [r5, #20]
10002242:	61ea      	str	r2, [r5, #28]
10002244:	612b      	str	r3, [r5, #16]
10002246:	21a1      	movs	r1, #161	; 0xa1
10002248:	002a      	movs	r2, r5
1000224a:	4823      	ldr	r0, [pc, #140]	; (100022d8 <z_arm_fatal_error+0xb8>)
1000224c:	3210      	adds	r2, #16
1000224e:	2300      	movs	r3, #0
10002250:	0189      	lsls	r1, r1, #6
10002252:	60ba      	str	r2, [r7, #8]
10002254:	60f8      	str	r0, [r7, #12]
10002256:	f7ff fcd5 	bl	10001c04 <z_impl_z_log_msg_static_create>
1000225a:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
1000225c:	68e1      	ldr	r1, [r4, #12]
1000225e:	6922      	ldr	r2, [r4, #16]
10002260:	6963      	ldr	r3, [r4, #20]
10002262:	46ad      	mov	sp, r5
10002264:	622b      	str	r3, [r5, #32]
10002266:	2305      	movs	r3, #5
10002268:	481c      	ldr	r0, [pc, #112]	; (100022dc <z_arm_fatal_error+0xbc>)
1000226a:	61a9      	str	r1, [r5, #24]
1000226c:	6168      	str	r0, [r5, #20]
1000226e:	61ea      	str	r2, [r5, #28]
10002270:	612b      	str	r3, [r5, #16]
10002272:	21a1      	movs	r1, #161	; 0xa1
10002274:	2300      	movs	r3, #0
10002276:	68ba      	ldr	r2, [r7, #8]
10002278:	68f8      	ldr	r0, [r7, #12]
1000227a:	0189      	lsls	r1, r1, #6
1000227c:	f7ff fcc2 	bl	10001c04 <z_impl_z_log_msg_static_create>
10002280:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
10002282:	b088      	sub	sp, #32
10002284:	69e3      	ldr	r3, [r4, #28]
10002286:	466d      	mov	r5, sp
10002288:	61ab      	str	r3, [r5, #24]
1000228a:	2303      	movs	r3, #3
1000228c:	4a14      	ldr	r2, [pc, #80]	; (100022e0 <z_arm_fatal_error+0xc0>)
1000228e:	612b      	str	r3, [r5, #16]
10002290:	616a      	str	r2, [r5, #20]
10002292:	21c2      	movs	r1, #194	; 0xc2
10002294:	002a      	movs	r2, r5
10002296:	2300      	movs	r3, #0
10002298:	3210      	adds	r2, #16
1000229a:	68f8      	ldr	r0, [r7, #12]
1000229c:	0149      	lsls	r1, r1, #5
1000229e:	60ba      	str	r2, [r7, #8]
100022a0:	f7ff fcb0 	bl	10001c04 <z_impl_z_log_msg_static_create>
100022a4:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
100022a6:	69a3      	ldr	r3, [r4, #24]
100022a8:	46ad      	mov	sp, r5
100022aa:	61ab      	str	r3, [r5, #24]
100022ac:	2303      	movs	r3, #3
100022ae:	4a0d      	ldr	r2, [pc, #52]	; (100022e4 <z_arm_fatal_error+0xc4>)
100022b0:	612b      	str	r3, [r5, #16]
100022b2:	616a      	str	r2, [r5, #20]
100022b4:	21c2      	movs	r1, #194	; 0xc2
100022b6:	2300      	movs	r3, #0
100022b8:	68ba      	ldr	r2, [r7, #8]
100022ba:	68f8      	ldr	r0, [r7, #12]
100022bc:	0149      	lsls	r1, r1, #5
100022be:	f7ff fca1 	bl	10001c04 <z_impl_z_log_msg_static_create>
100022c2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100022c4:	0021      	movs	r1, r4
100022c6:	6878      	ldr	r0, [r7, #4]
100022c8:	f001 f97a 	bl	100035c0 <z_fatal_error>
}
100022cc:	46bd      	mov	sp, r7
100022ce:	b005      	add	sp, #20
100022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022d2:	46c0      	nop			; (mov r8, r8)
100022d4:	10009a3c 	.word	0x10009a3c
100022d8:	10005f9c 	.word	0x10005f9c
100022dc:	10009a6b 	.word	0x10009a6b
100022e0:	10009a9a 	.word	0x10009a9a
100022e4:	10009aa9 	.word	0x10009aa9

100022e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
100022e8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
100022ea:	0600      	lsls	r0, r0, #24
100022ec:	d405      	bmi.n	100022fa <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100022ee:	221f      	movs	r2, #31
100022f0:	401a      	ands	r2, r3
100022f2:	2301      	movs	r3, #1
100022f4:	4093      	lsls	r3, r2
100022f6:	4a01      	ldr	r2, [pc, #4]	; (100022fc <arch_irq_enable+0x14>)
100022f8:	6013      	str	r3, [r2, #0]
}
100022fa:	4770      	bx	lr
100022fc:	e000e100 	.word	0xe000e100

10002300 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10002300:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002302:	25ff      	movs	r5, #255	; 0xff
10002304:	2203      	movs	r2, #3
10002306:	000b      	movs	r3, r1
10002308:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
1000230a:	b240      	sxtb	r0, r0
1000230c:	4002      	ands	r2, r0
1000230e:	00d2      	lsls	r2, r2, #3
10002310:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002312:	015b      	lsls	r3, r3, #5
10002314:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002316:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002318:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
1000231a:	2800      	cmp	r0, #0
1000231c:	db0a      	blt.n	10002334 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000231e:	24c0      	movs	r4, #192	; 0xc0
10002320:	4a0a      	ldr	r2, [pc, #40]	; (1000234c <z_arm_irq_priority_set+0x4c>)
10002322:	0880      	lsrs	r0, r0, #2
10002324:	0080      	lsls	r0, r0, #2
10002326:	1880      	adds	r0, r0, r2
10002328:	00a4      	lsls	r4, r4, #2
1000232a:	5902      	ldr	r2, [r0, r4]
1000232c:	400a      	ands	r2, r1
1000232e:	4313      	orrs	r3, r2
10002330:	5103      	str	r3, [r0, r4]
}
10002332:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002334:	220f      	movs	r2, #15
10002336:	4010      	ands	r0, r2
10002338:	3808      	subs	r0, #8
1000233a:	4a05      	ldr	r2, [pc, #20]	; (10002350 <z_arm_irq_priority_set+0x50>)
1000233c:	0880      	lsrs	r0, r0, #2
1000233e:	0080      	lsls	r0, r0, #2
10002340:	1880      	adds	r0, r0, r2
10002342:	69c2      	ldr	r2, [r0, #28]
10002344:	4011      	ands	r1, r2
10002346:	4319      	orrs	r1, r3
10002348:	61c1      	str	r1, [r0, #28]
1000234a:	e7f2      	b.n	10002332 <z_arm_irq_priority_set+0x32>
1000234c:	e000e100 	.word	0xe000e100
10002350:	e000ed00 	.word	0xe000ed00

10002354 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10002354:	bf30      	wfi
    b z_SysNmiOnReset
10002356:	e7fd      	b.n	10002354 <z_SysNmiOnReset>

10002358 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10002358:	22ff      	movs	r2, #255	; 0xff
1000235a:	4b08      	ldr	r3, [pc, #32]	; (1000237c <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
1000235c:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
1000235e:	4393      	bics	r3, r2
10002360:	4a07      	ldr	r2, [pc, #28]	; (10002380 <z_arm_prep_c+0x28>)
10002362:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10002364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10002368:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
1000236c:	f001 f9e8 	bl	10003740 <z_bss_zero>
	z_data_copy();
10002370:	f001 fe58 	bl	10004024 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10002374:	f000 f958 	bl	10002628 <z_arm_interrupt_init>
	z_cstart();
10002378:	f001 fa22 	bl	100037c0 <z_cstart>
1000237c:	10000100 	.word	0x10000100
10002380:	e000ed00 	.word	0xe000ed00

10002384 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10002384:	4a08      	ldr	r2, [pc, #32]	; (100023a8 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10002386:	4909      	ldr	r1, [pc, #36]	; (100023ac <arch_swap+0x28>)
	_current->arch.basepri = key;
10002388:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
1000238a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
1000238c:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
1000238e:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002390:	2380      	movs	r3, #128	; 0x80
10002392:	4907      	ldr	r1, [pc, #28]	; (100023b0 <arch_swap+0x2c>)
10002394:	055b      	lsls	r3, r3, #21
10002396:	6848      	ldr	r0, [r1, #4]
10002398:	4303      	orrs	r3, r0
1000239a:	604b      	str	r3, [r1, #4]
1000239c:	b662      	cpsie	i
1000239e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
100023a2:	6893      	ldr	r3, [r2, #8]
100023a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
100023a6:	4770      	bx	lr
100023a8:	20000730 	.word	0x20000730
100023ac:	1000617c 	.word	0x1000617c
100023b0:	e000ed00 	.word	0xe000ed00

100023b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
100023b4:	4913      	ldr	r1, [pc, #76]	; (10002404 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
100023b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
100023b8:	4813      	ldr	r0, [pc, #76]	; (10002408 <_thread_irq_disabled+0x22>)
    add r0, r2
100023ba:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
100023bc:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
100023c0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
100023c2:	4643      	mov	r3, r8
    mov r4, r9
100023c4:	464c      	mov	r4, r9
    mov r5, r10
100023c6:	4655      	mov	r5, sl
    mov r6, r11
100023c8:	465e      	mov	r6, fp
    mov r7, ip
100023ca:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
100023cc:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100023ce:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
100023d0:	4f0e      	ldr	r7, [pc, #56]	; (1000240c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
100023d2:	4e0f      	ldr	r6, [pc, #60]	; (10002410 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
100023d4:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
100023d6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
100023d8:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
100023da:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
100023dc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
100023de:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
100023e0:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
100023e2:	d100      	bne.n	100023e6 <_thread_irq_disabled>
    cpsie i
100023e4:	b662      	cpsie	i

100023e6 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
100023e6:	4c08      	ldr	r4, [pc, #32]	; (10002408 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
100023e8:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
100023ea:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
100023ec:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
100023ee:	4698      	mov	r8, r3
    mov r9, r4
100023f0:	46a1      	mov	r9, r4
    mov r10, r5
100023f2:	46aa      	mov	sl, r5
    mov r11, r6
100023f4:	46b3      	mov	fp, r6
    mov ip, r7
100023f6:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
100023f8:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
100023fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
100023fc:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10002400:	4770      	bx	lr
10002402:	0000      	.short	0x0000
    ldr r1, =_kernel
10002404:	20000730 	.word	0x20000730
    ldr r0, =_thread_offset_to_callee_saved
10002408:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
1000240c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10002410:	08000000 	.word	0x08000000

10002414 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10002414:	2004      	movs	r0, #4
  mov r1, lr
10002416:	4671      	mov	r1, lr
  tst r1, r0
10002418:	4201      	tst	r1, r0
  beq _stack_frame_msp
1000241a:	d002      	beq.n	10002422 <_stack_frame_msp>
  mrs r0, PSP
1000241c:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10002420:	d101      	bne.n	10002426 <_stack_frame_endif>

10002422 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10002422:	f3ef 8008 	mrs	r0, MSP

10002426 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10002426:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10002428:	3902      	subs	r1, #2
    ldrb r1, [r1]
1000242a:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
1000242c:	2902      	cmp	r1, #2
    beq _oops
1000242e:	d0ff      	beq.n	10002430 <_oops>

10002430 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10002430:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10002432:	f002 fe80 	bl	10005136 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10002436:	bd01      	pop	{r0, pc}

10002438 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10002438:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
1000243a:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
1000243c:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
1000243e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10002440:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10002442:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10002444:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10002446:	4906      	ldr	r1, [pc, #24]	; (10002460 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10002448:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
1000244a:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
1000244c:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
1000244e:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10002450:	2380      	movs	r3, #128	; 0x80
10002452:	045b      	lsls	r3, r3, #17
10002454:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10002456:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10002458:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
1000245a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
1000245c:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
1000245e:	bd10      	pop	{r4, pc}
10002460:	10004603 	.word	0x10004603

10002464 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10002464:	4b06      	ldr	r3, [pc, #24]	; (10002480 <arch_switch_to_main_thread+0x1c>)
10002466:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10002468:	1c10      	adds	r0, r2, #0
1000246a:	f381 8809 	msr	PSP, r1
1000246e:	2100      	movs	r1, #0
10002470:	b662      	cpsie	i
10002472:	f3bf 8f6f 	isb	sy
10002476:	2200      	movs	r2, #0
10002478:	2300      	movs	r3, #0
1000247a:	f002 f8c2 	bl	10004602 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
1000247e:	46c0      	nop			; (mov r8, r8)
10002480:	20000730 	.word	0x20000730

10002484 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10002484:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10002486:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
1000248a:	4905      	ldr	r1, [pc, #20]	; (100024a0 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
1000248c:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
1000248e:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10002490:	4904      	ldr	r1, [pc, #16]	; (100024a4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10002492:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10002494:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10002496:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10002498:	bc09      	pop	{r0, r3}
	mov lr, r3
1000249a:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
1000249c:	4902      	ldr	r1, [pc, #8]	; (100024a8 <_isr_wrapper+0x24>)
	bx r1
1000249e:	4708      	bx	r1
	ldr r1, =16
100024a0:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
100024a4:	10005e64 	.word	0x10005e64
	ldr r1, =z_arm_int_exit
100024a8:	100024ad 	.word	0x100024ad

100024ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
100024ac:	4b04      	ldr	r3, [pc, #16]	; (100024c0 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
100024ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
100024b0:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
100024b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
100024b4:	d002      	beq.n	100024bc <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
100024b6:	4903      	ldr	r1, [pc, #12]	; (100024c4 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
100024b8:	4a03      	ldr	r2, [pc, #12]	; (100024c8 <_EXIT_EXC+0xc>)
	str r2, [r1]
100024ba:	600a      	str	r2, [r1, #0]

100024bc <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
100024bc:	4770      	bx	lr
100024be:	0000      	.short	0x0000
	ldr r3, =_kernel
100024c0:	20000730 	.word	0x20000730
	ldr r1, =_SCS_ICSR
100024c4:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
100024c8:	10000000 	.word	0x10000000

100024cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
100024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100024ce:	4b46      	ldr	r3, [pc, #280]	; (100025e8 <z_arm_fault+0x11c>)
{
100024d0:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100024d2:	685e      	ldr	r6, [r3, #4]
{
100024d4:	af00      	add	r7, sp, #0
100024d6:	05f3      	lsls	r3, r6, #23
100024d8:	0ddb      	lsrs	r3, r3, #23
100024da:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100024dc:	607b      	str	r3, [r7, #4]
100024de:	b662      	cpsie	i
100024e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
100024e4:	4841      	ldr	r0, [pc, #260]	; (100025ec <z_arm_fault+0x120>)
100024e6:	0e13      	lsrs	r3, r2, #24
100024e8:	6038      	str	r0, [r7, #0]
100024ea:	2bff      	cmp	r3, #255	; 0xff
100024ec:	d111      	bne.n	10002512 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
100024ee:	3bf3      	subs	r3, #243	; 0xf3
100024f0:	4013      	ands	r3, r2
100024f2:	2b08      	cmp	r3, #8
100024f4:	d150      	bne.n	10002598 <z_arm_fault+0xcc>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
100024f6:	4b3e      	ldr	r3, [pc, #248]	; (100025f0 <z_arm_fault+0x124>)
100024f8:	61fb      	str	r3, [r7, #28]
100024fa:	2302      	movs	r3, #2
100024fc:	61bb      	str	r3, [r7, #24]
100024fe:	2108      	movs	r1, #8
10002500:	2210      	movs	r2, #16
10002502:	1852      	adds	r2, r2, r1
10002504:	2182      	movs	r1, #130	; 0x82
10002506:	2300      	movs	r3, #0
10002508:	6838      	ldr	r0, [r7, #0]
1000250a:	19d2      	adds	r2, r2, r7
1000250c:	0149      	lsls	r1, r1, #5
1000250e:	f7ff fb79 	bl	10001c04 <z_impl_z_log_msg_static_create>
	*nested_exc = false;
10002512:	2500      	movs	r5, #0
		return NULL;
10002514:	002c      	movs	r4, r5
	switch (fault) {
10002516:	687b      	ldr	r3, [r7, #4]
10002518:	2b03      	cmp	r3, #3
1000251a:	d143      	bne.n	100025a4 <z_arm_fault+0xd8>
	PR_FAULT_INFO("***** HARD FAULT *****");
1000251c:	466e      	mov	r6, sp
1000251e:	4b35      	ldr	r3, [pc, #212]	; (100025f4 <z_arm_fault+0x128>)
10002520:	61fb      	str	r3, [r7, #28]
10002522:	2302      	movs	r3, #2
10002524:	61bb      	str	r3, [r7, #24]
10002526:	2108      	movs	r1, #8
10002528:	2210      	movs	r2, #16
1000252a:	1852      	adds	r2, r2, r1
1000252c:	2182      	movs	r1, #130	; 0x82
1000252e:	4b2f      	ldr	r3, [pc, #188]	; (100025ec <z_arm_fault+0x120>)
10002530:	19d2      	adds	r2, r2, r7
10002532:	603b      	str	r3, [r7, #0]
10002534:	6838      	ldr	r0, [r7, #0]
10002536:	2300      	movs	r3, #0
10002538:	0149      	lsls	r1, r1, #5
1000253a:	f7ff fb63 	bl	10001c04 <z_impl_z_log_msg_static_create>
	uint16_t fault_insn = *(ret_addr - 1);
1000253e:	69a3      	ldr	r3, [r4, #24]
10002540:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10002542:	881a      	ldrh	r2, [r3, #0]
10002544:	4b2c      	ldr	r3, [pc, #176]	; (100025f8 <z_arm_fault+0x12c>)
10002546:	429a      	cmp	r2, r3
10002548:	d148      	bne.n	100025dc <z_arm_fault+0x110>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
1000254a:	b088      	sub	sp, #32
1000254c:	6823      	ldr	r3, [r4, #0]
1000254e:	466a      	mov	r2, sp
10002550:	492a      	ldr	r1, [pc, #168]	; (100025fc <z_arm_fault+0x130>)
10002552:	6193      	str	r3, [r2, #24]
10002554:	687b      	ldr	r3, [r7, #4]
10002556:	6151      	str	r1, [r2, #20]
10002558:	6113      	str	r3, [r2, #16]
1000255a:	21c2      	movs	r1, #194	; 0xc2
1000255c:	2300      	movs	r3, #0
1000255e:	6838      	ldr	r0, [r7, #0]
10002560:	3210      	adds	r2, #16
10002562:	0149      	lsls	r1, r1, #5
10002564:	f7ff fb4e 	bl	10001c04 <z_impl_z_log_msg_static_create>
10002568:	46b5      	mov	sp, r6
		reason = esf->basic.r0;
1000256a:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
1000256c:	2308      	movs	r3, #8
1000256e:	2220      	movs	r2, #32
10002570:	18f8      	adds	r0, r7, r3
10002572:	0021      	movs	r1, r4
10002574:	f002 fe04 	bl	10005180 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000257a:	2d00      	cmp	r5, #0
1000257c:	d030      	beq.n	100025e0 <z_arm_fault+0x114>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
1000257e:	05da      	lsls	r2, r3, #23
10002580:	d102      	bne.n	10002588 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10002582:	4a1f      	ldr	r2, [pc, #124]	; (10002600 <z_arm_fault+0x134>)
10002584:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002586:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10002588:	2308      	movs	r3, #8
1000258a:	0030      	movs	r0, r6
1000258c:	18f9      	adds	r1, r7, r3
1000258e:	f7ff fe47 	bl	10002220 <z_arm_fatal_error>
}
10002592:	46bd      	mov	sp, r7
10002594:	b00b      	add	sp, #44	; 0x2c
10002596:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
10002598:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
1000259a:	0712      	lsls	r2, r2, #28
1000259c:	d5bb      	bpl.n	10002516 <z_arm_fault+0x4a>
			ptr_esf =  (z_arch_esf_t *)psp;
1000259e:	000c      	movs	r4, r1
	*nested_exc = false;
100025a0:	2500      	movs	r5, #0
100025a2:	e7b8      	b.n	10002516 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** %s %d) *****",
100025a4:	22f8      	movs	r2, #248	; 0xf8
100025a6:	0052      	lsls	r2, r2, #1
100025a8:	4b16      	ldr	r3, [pc, #88]	; (10002604 <z_arm_fault+0x138>)
100025aa:	4216      	tst	r6, r2
100025ac:	d000      	beq.n	100025b0 <z_arm_fault+0xe4>
100025ae:	4b16      	ldr	r3, [pc, #88]	; (10002608 <z_arm_fault+0x13c>)
100025b0:	466e      	mov	r6, sp
100025b2:	b08a      	sub	sp, #40	; 0x28
100025b4:	466a      	mov	r2, sp
100025b6:	6193      	str	r3, [r2, #24]
100025b8:	687b      	ldr	r3, [r7, #4]
100025ba:	4914      	ldr	r1, [pc, #80]	; (1000260c <z_arm_fault+0x140>)
100025bc:	3b10      	subs	r3, #16
100025be:	61d3      	str	r3, [r2, #28]
100025c0:	2380      	movs	r3, #128	; 0x80
100025c2:	009b      	lsls	r3, r3, #2
100025c4:	8413      	strh	r3, [r2, #32]
100025c6:	4b12      	ldr	r3, [pc, #72]	; (10002610 <z_arm_fault+0x144>)
100025c8:	6151      	str	r1, [r2, #20]
100025ca:	6113      	str	r3, [r2, #16]
100025cc:	2191      	movs	r1, #145	; 0x91
100025ce:	2300      	movs	r3, #0
100025d0:	6838      	ldr	r0, [r7, #0]
100025d2:	3210      	adds	r2, #16
100025d4:	0189      	lsls	r1, r1, #6
100025d6:	f7ff fb15 	bl	10001c04 <z_impl_z_log_msg_static_create>
100025da:	46b5      	mov	sp, r6
	uint32_t reason = K_ERR_CPU_EXCEPTION;
100025dc:	2600      	movs	r6, #0
100025de:	e7c5      	b.n	1000256c <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100025e0:	0a5b      	lsrs	r3, r3, #9
100025e2:	025b      	lsls	r3, r3, #9
100025e4:	e7cf      	b.n	10002586 <z_arm_fault+0xba>
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	e000ed00 	.word	0xe000ed00
100025ec:	10005f9c 	.word	0x10005f9c
100025f0:	10009b05 	.word	0x10009b05
100025f4:	10009b30 	.word	0x10009b30
100025f8:	0000df02 	.word	0x0000df02
100025fc:	10009b47 	.word	0x10009b47
10002600:	000001ff 	.word	0x000001ff
10002604:	10009ad7 	.word	0x10009ad7
10002608:	10009aec 	.word	0x10009aec
1000260c:	10009b63 	.word	0x10009b63
10002610:	01000004 	.word	0x01000004

10002614 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10002614:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10002618:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
1000261c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
1000261e:	4672      	mov	r2, lr
	bl z_arm_fault
10002620:	f7ff ff54 	bl	100024cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10002624:	bd01      	pop	{r0, pc}
10002626:	46c0      	nop			; (mov r8, r8)

10002628 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10002628:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000262a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
1000262c:	2200      	movs	r2, #0
1000262e:	2603      	movs	r6, #3
10002630:	25ff      	movs	r5, #255	; 0xff
10002632:	00a4      	lsls	r4, r4, #2
10002634:	0010      	movs	r0, r2
10002636:	002f      	movs	r7, r5
10002638:	4030      	ands	r0, r6
1000263a:	00c0      	lsls	r0, r0, #3
1000263c:	4087      	lsls	r7, r0
1000263e:	4905      	ldr	r1, [pc, #20]	; (10002654 <z_arm_interrupt_init+0x2c>)
10002640:	0893      	lsrs	r3, r2, #2
10002642:	009b      	lsls	r3, r3, #2
10002644:	185b      	adds	r3, r3, r1
10002646:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10002648:	3201      	adds	r2, #1
1000264a:	43b9      	bics	r1, r7
1000264c:	5119      	str	r1, [r3, r4]
1000264e:	2a1a      	cmp	r2, #26
10002650:	d1f0      	bne.n	10002634 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10002652:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002654:	e000e100 	.word	0xe000e100

10002658 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10002658:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
1000265a:	4807      	ldr	r0, [pc, #28]	; (10002678 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
1000265c:	4907      	ldr	r1, [pc, #28]	; (1000267c <__start+0x24>)
    adds r0, r0, r1
1000265e:	1840      	adds	r0, r0, r1
    msr PSP, r0
10002660:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10002664:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10002668:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
1000266a:	4308      	orrs	r0, r1
    msr CONTROL, r0
1000266c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10002670:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10002674:	f7ff fe70 	bl	10002358 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10002678:	20000a70 	.word	0x20000a70
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
1000267c:	00000800 	.word	0x00000800

10002680 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10002680:	b510      	push	{r4, lr}
	if (_current == thread) {
10002682:	4b0a      	ldr	r3, [pc, #40]	; (100026ac <z_impl_k_thread_abort+0x2c>)
10002684:	689b      	ldr	r3, [r3, #8]
10002686:	4283      	cmp	r3, r0
10002688:	d10d      	bne.n	100026a6 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000268a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
1000268e:	2b00      	cmp	r3, #0
10002690:	d009      	beq.n	100026a6 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002692:	2280      	movs	r2, #128	; 0x80
10002694:	4b06      	ldr	r3, [pc, #24]	; (100026b0 <z_impl_k_thread_abort+0x30>)
10002696:	0552      	lsls	r2, r2, #21
10002698:	6859      	ldr	r1, [r3, #4]
1000269a:	430a      	orrs	r2, r1
1000269c:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
1000269e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100026a0:	4904      	ldr	r1, [pc, #16]	; (100026b4 <z_impl_k_thread_abort+0x34>)
100026a2:	400a      	ands	r2, r1
100026a4:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
100026a6:	f001 fc61 	bl	10003f6c <z_thread_abort>
}
100026aa:	bd10      	pop	{r4, pc}
100026ac:	20000730 	.word	0x20000730
100026b0:	e000ed00 	.word	0xe000ed00
100026b4:	ffff7fff 	.word	0xffff7fff

100026b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
100026b8:	4b01      	ldr	r3, [pc, #4]	; (100026c0 <__stdout_hook_install+0x8>)
100026ba:	6018      	str	r0, [r3, #0]
}
100026bc:	4770      	bx	lr
100026be:	46c0      	nop			; (mov r8, r8)
100026c0:	20000008 	.word	0x20000008

100026c4 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100026c4:	4b0e      	ldr	r3, [pc, #56]	; (10002700 <rp2040_init+0x3c>)
100026c6:	4a0f      	ldr	r2, [pc, #60]	; (10002704 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
100026c8:	b570      	push	{r4, r5, r6, lr}
100026ca:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100026cc:	4d0e      	ldr	r5, [pc, #56]	; (10002708 <rp2040_init+0x44>)
100026ce:	4b0f      	ldr	r3, [pc, #60]	; (1000270c <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100026d0:	4c0f      	ldr	r4, [pc, #60]	; (10002710 <rp2040_init+0x4c>)
100026d2:	602b      	str	r3, [r5, #0]
100026d4:	0019      	movs	r1, r3
100026d6:	68a2      	ldr	r2, [r4, #8]
100026d8:	4391      	bics	r1, r2
100026da:	d1fb      	bne.n	100026d4 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100026dc:	f000 fd5e 	bl	1000319c <clocks_init>
100026e0:	4b0c      	ldr	r3, [pc, #48]	; (10002714 <rp2040_init+0x50>)
100026e2:	602b      	str	r3, [r5, #0]
100026e4:	68a3      	ldr	r3, [r4, #8]
100026e6:	01db      	lsls	r3, r3, #7
100026e8:	3380      	adds	r3, #128	; 0x80
100026ea:	d1fb      	bne.n	100026e4 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100026ec:	f3ef 8310 	mrs	r3, PRIMASK
100026f0:	b672      	cpsid	i
	if (key != 0U) {
100026f2:	2b00      	cmp	r3, #0
100026f4:	d102      	bne.n	100026fc <rp2040_init+0x38>
	__asm__ volatile(
100026f6:	b662      	cpsie	i
100026f8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100026fc:	2000      	movs	r0, #0
100026fe:	bd70      	pop	{r4, r5, r6, pc}
10002700:	4000e000 	.word	0x4000e000
10002704:	ffffcdbf 	.word	0xffffcdbf
10002708:	4000f000 	.word	0x4000f000
1000270c:	003c3ffe 	.word	0x003c3ffe
10002710:	4000c000 	.word	0x4000c000
10002714:	01ffffff 	.word	0x01ffffff

10002718 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10002718:	b510      	push	{r4, lr}
1000271a:	4808      	ldr	r0, [pc, #32]	; (1000273c <uart_console_init+0x24>)
1000271c:	f003 f996 	bl	10005a4c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10002720:	2800      	cmp	r0, #0
10002722:	d008      	beq.n	10002736 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10002724:	4c06      	ldr	r4, [pc, #24]	; (10002740 <uart_console_init+0x28>)
10002726:	0020      	movs	r0, r4
10002728:	f7ff ffc6 	bl	100026b8 <__stdout_hook_install>
	__printk_hook_install(console_out);
1000272c:	0020      	movs	r0, r4
1000272e:	f7fe fad5 	bl	10000cdc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10002732:	2000      	movs	r0, #0
}
10002734:	bd10      	pop	{r4, pc}
		return -ENODEV;
10002736:	2013      	movs	r0, #19
10002738:	4240      	negs	r0, r0
1000273a:	e7fb      	b.n	10002734 <uart_console_init+0x1c>
1000273c:	10005e04 	.word	0x10005e04
10002740:	10002745 	.word	0x10002745

10002744 <console_out>:
{
10002744:	b570      	push	{r4, r5, r6, lr}
10002746:	0004      	movs	r4, r0
10002748:	4d07      	ldr	r5, [pc, #28]	; (10002768 <console_out+0x24>)
	if ('\n' == c) {
1000274a:	280a      	cmp	r0, #10
1000274c:	d104      	bne.n	10002758 <console_out+0x14>
1000274e:	68ab      	ldr	r3, [r5, #8]
10002750:	210d      	movs	r1, #13
10002752:	0028      	movs	r0, r5
10002754:	685b      	ldr	r3, [r3, #4]
10002756:	4798      	blx	r3
10002758:	68ab      	ldr	r3, [r5, #8]
1000275a:	0028      	movs	r0, r5
1000275c:	685b      	ldr	r3, [r3, #4]
1000275e:	b2e1      	uxtb	r1, r4
10002760:	4798      	blx	r3
}
10002762:	0020      	movs	r0, r4
10002764:	bd70      	pop	{r4, r5, r6, pc}
10002766:	46c0      	nop			; (mov r8, r8)
10002768:	10005e04 	.word	0x10005e04

1000276c <ssd1306_get_capabilities>:
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
}

static void ssd1306_get_capabilities(const struct device *dev,
				     struct display_capabilities *caps)
{
1000276c:	b510      	push	{r4, lr}
1000276e:	000c      	movs	r4, r1
	memset(caps, 0, sizeof(struct display_capabilities));
10002770:	2210      	movs	r2, #16
10002772:	2100      	movs	r1, #0
10002774:	0020      	movs	r0, r4
10002776:	f002 fd0c 	bl	10005192 <memset>
	caps->x_resolution = DT_INST_PROP(0, width);
1000277a:	4b04      	ldr	r3, [pc, #16]	; (1000278c <ssd1306_get_capabilities+0x20>)
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
1000277c:	2201      	movs	r2, #1
	caps->x_resolution = DT_INST_PROP(0, width);
1000277e:	6023      	str	r3, [r4, #0]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
10002780:	2304      	movs	r3, #4
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
10002782:	60a2      	str	r2, [r4, #8]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
10002784:	6063      	str	r3, [r4, #4]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
10002786:	7323      	strb	r3, [r4, #12]
}
10002788:	bd10      	pop	{r4, pc}
1000278a:	46c0      	nop			; (mov r8, r8)
1000278c:	00400080 	.word	0x00400080

10002790 <ssd1306_read>:
{
10002790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
10002792:	4b07      	ldr	r3, [pc, #28]	; (100027b0 <ssd1306_read+0x20>)
10002794:	2182      	movs	r1, #130	; 0x82
10002796:	9305      	str	r3, [sp, #20]
10002798:	2302      	movs	r3, #2
1000279a:	4806      	ldr	r0, [pc, #24]	; (100027b4 <ssd1306_read+0x24>)
1000279c:	aa04      	add	r2, sp, #16
1000279e:	0149      	lsls	r1, r1, #5
100027a0:	9304      	str	r3, [sp, #16]
100027a2:	f002 fd02 	bl	100051aa <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
100027a6:	2086      	movs	r0, #134	; 0x86
}
100027a8:	4240      	negs	r0, r0
100027aa:	b007      	add	sp, #28
100027ac:	bd00      	pop	{pc}
100027ae:	46c0      	nop			; (mov r8, r8)
100027b0:	10009b7a 	.word	0x10009b7a
100027b4:	10005fac 	.word	0x10005fac

100027b8 <ssd1306_get_framebuffer>:
{
100027b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
100027ba:	4b06      	ldr	r3, [pc, #24]	; (100027d4 <ssd1306_get_framebuffer+0x1c>)
100027bc:	2182      	movs	r1, #130	; 0x82
100027be:	9305      	str	r3, [sp, #20]
100027c0:	2302      	movs	r3, #2
100027c2:	4805      	ldr	r0, [pc, #20]	; (100027d8 <ssd1306_get_framebuffer+0x20>)
100027c4:	aa04      	add	r2, sp, #16
100027c6:	0149      	lsls	r1, r1, #5
100027c8:	9304      	str	r3, [sp, #16]
100027ca:	f002 fcee 	bl	100051aa <z_log_msg_static_create.constprop.0>
}
100027ce:	2000      	movs	r0, #0
100027d0:	b007      	add	sp, #28
100027d2:	bd00      	pop	{pc}
100027d4:	10009b7a 	.word	0x10009b7a
100027d8:	10005fac 	.word	0x10005fac

100027dc <ssd1306_set_brightness>:
{
100027dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_WRN("Unsupported");
100027de:	4b07      	ldr	r3, [pc, #28]	; (100027fc <ssd1306_set_brightness+0x20>)
100027e0:	2184      	movs	r1, #132	; 0x84
100027e2:	9305      	str	r3, [sp, #20]
100027e4:	2302      	movs	r3, #2
100027e6:	4806      	ldr	r0, [pc, #24]	; (10002800 <ssd1306_set_brightness+0x24>)
100027e8:	aa04      	add	r2, sp, #16
100027ea:	0149      	lsls	r1, r1, #5
100027ec:	9304      	str	r3, [sp, #16]
100027ee:	f002 fcdc 	bl	100051aa <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
100027f2:	2086      	movs	r0, #134	; 0x86
}
100027f4:	4240      	negs	r0, r0
100027f6:	b007      	add	sp, #28
100027f8:	bd00      	pop	{pc}
100027fa:	46c0      	nop			; (mov r8, r8)
100027fc:	10009b7a 	.word	0x10009b7a
10002800:	10005fac 	.word	0x10005fac

10002804 <ssd1306_set_pixel_format.part.0>:
{
	LOG_ERR("Unsupported");
	return -ENOTSUP;
}

static int ssd1306_set_pixel_format(const struct device *dev,
10002804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
				    const enum display_pixel_format pf)
{
	if (pf == PIXEL_FORMAT_MONO10) {
		return 0;
	}
	LOG_ERR("Unsupported");
10002806:	4b07      	ldr	r3, [pc, #28]	; (10002824 <ssd1306_set_pixel_format.part.0+0x20>)
10002808:	2182      	movs	r1, #130	; 0x82
1000280a:	9305      	str	r3, [sp, #20]
1000280c:	2302      	movs	r3, #2
1000280e:	4806      	ldr	r0, [pc, #24]	; (10002828 <ssd1306_set_pixel_format.part.0+0x24>)
10002810:	aa04      	add	r2, sp, #16
10002812:	0149      	lsls	r1, r1, #5
10002814:	9304      	str	r3, [sp, #16]
10002816:	f002 fcc8 	bl	100051aa <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
}
1000281a:	2086      	movs	r0, #134	; 0x86
1000281c:	4240      	negs	r0, r0
1000281e:	b007      	add	sp, #28
10002820:	bd00      	pop	{pc}
10002822:	46c0      	nop			; (mov r8, r8)
10002824:	10009b7a 	.word	0x10009b7a
10002828:	10005fac 	.word	0x10005fac

1000282c <ssd1306_set_orientation>:
{
1000282c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
1000282e:	4b07      	ldr	r3, [pc, #28]	; (1000284c <ssd1306_set_orientation+0x20>)
10002830:	2182      	movs	r1, #130	; 0x82
10002832:	9305      	str	r3, [sp, #20]
10002834:	2302      	movs	r3, #2
10002836:	4806      	ldr	r0, [pc, #24]	; (10002850 <ssd1306_set_orientation+0x24>)
10002838:	aa04      	add	r2, sp, #16
1000283a:	0149      	lsls	r1, r1, #5
1000283c:	9304      	str	r3, [sp, #16]
1000283e:	f002 fcb4 	bl	100051aa <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
10002842:	2086      	movs	r0, #134	; 0x86
}
10002844:	4240      	negs	r0, r0
10002846:	b007      	add	sp, #28
10002848:	bd00      	pop	{pc}
1000284a:	46c0      	nop			; (mov r8, r8)
1000284c:	10009b7a 	.word	0x10009b7a
10002850:	10005fac 	.word	0x10005fac

10002854 <ssd1306_write>:
{
10002854:	b5f0      	push	{r4, r5, r6, r7, lr}
10002856:	0005      	movs	r5, r0
	if (desc->pitch < desc->width) {
10002858:	891f      	ldrh	r7, [r3, #8]
1000285a:	8898      	ldrh	r0, [r3, #4]
{
1000285c:	b089      	sub	sp, #36	; 0x24
	if (desc->pitch < desc->width) {
1000285e:	4287      	cmp	r7, r0
10002860:	d20d      	bcs.n	1000287e <ssd1306_write+0x2a>
		LOG_ERR("Pitch is smaller then width");
10002862:	4b23      	ldr	r3, [pc, #140]	; (100028f0 <ssd1306_write+0x9c>)
		LOG_ERR("Display buffer is not available");
10002864:	2182      	movs	r1, #130	; 0x82
10002866:	9307      	str	r3, [sp, #28]
10002868:	2302      	movs	r3, #2
1000286a:	4822      	ldr	r0, [pc, #136]	; (100028f4 <ssd1306_write+0xa0>)
1000286c:	aa06      	add	r2, sp, #24
1000286e:	0149      	lsls	r1, r1, #5
10002870:	9306      	str	r3, [sp, #24]
10002872:	f002 fc9a 	bl	100051aa <z_log_msg_static_create.constprop.0>
		return -1;
10002876:	2001      	movs	r0, #1
10002878:	4240      	negs	r0, r0
}
1000287a:	b009      	add	sp, #36	; 0x24
1000287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
1000287e:	88de      	ldrh	r6, [r3, #6]
10002880:	681b      	ldr	r3, [r3, #0]
10002882:	0034      	movs	r4, r6
10002884:	4344      	muls	r4, r0
10002886:	10e4      	asrs	r4, r4, #3
10002888:	429c      	cmp	r4, r3
1000288a:	d900      	bls.n	1000288e <ssd1306_write+0x3a>
1000288c:	001c      	movs	r4, r3
	if (buf == NULL || buf_len == 0U) {
1000288e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10002890:	2b00      	cmp	r3, #0
10002892:	d001      	beq.n	10002898 <ssd1306_write+0x44>
10002894:	2c00      	cmp	r4, #0
10002896:	d101      	bne.n	1000289c <ssd1306_write+0x48>
		LOG_ERR("Display buffer is not available");
10002898:	4b17      	ldr	r3, [pc, #92]	; (100028f8 <ssd1306_write+0xa4>)
1000289a:	e7e3      	b.n	10002864 <ssd1306_write+0x10>
	if (desc->pitch > desc->width) {
1000289c:	4287      	cmp	r7, r0
1000289e:	d901      	bls.n	100028a4 <ssd1306_write+0x50>
		LOG_ERR("Unsupported mode");
100028a0:	4b16      	ldr	r3, [pc, #88]	; (100028fc <ssd1306_write+0xa8>)
100028a2:	e7df      	b.n	10002864 <ssd1306_write+0x10>
	if ((y & 0x7) != 0U) {
100028a4:	0753      	lsls	r3, r2, #29
100028a6:	d001      	beq.n	100028ac <ssd1306_write+0x58>
		LOG_ERR("Unsupported origin");
100028a8:	4b15      	ldr	r3, [pc, #84]	; (10002900 <ssd1306_write+0xac>)
100028aa:	e7db      	b.n	10002864 <ssd1306_write+0x10>
	uint8_t cmd_buf[] = {
100028ac:	466f      	mov	r7, sp
100028ae:	2320      	movs	r3, #32
100028b0:	803b      	strh	r3, [r7, #0]
100028b2:	3301      	adds	r3, #1
100028b4:	70bb      	strb	r3, [r7, #2]
100028b6:	2322      	movs	r3, #34	; 0x22
100028b8:	717b      	strb	r3, [r7, #5]
100028ba:	08d3      	lsrs	r3, r2, #3
		((y + desc->height)/8 - 1)
100028bc:	1992      	adds	r2, r2, r6
	uint8_t cmd_buf[] = {
100028be:	b2c9      	uxtb	r1, r1
		(x + desc->width - 1),
100028c0:	3801      	subs	r0, #1
		((y + desc->height)/8 - 1)
100028c2:	10d2      	asrs	r2, r2, #3
	uint8_t cmd_buf[] = {
100028c4:	70f9      	strb	r1, [r7, #3]
		((y + desc->height)/8 - 1)
100028c6:	3a01      	subs	r2, #1
		(x + desc->width - 1),
100028c8:	1809      	adds	r1, r1, r0
	uint8_t cmd_buf[] = {
100028ca:	7139      	strb	r1, [r7, #4]
100028cc:	71bb      	strb	r3, [r7, #6]
100028ce:	71fa      	strb	r2, [r7, #7]
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
100028d0:	2301      	movs	r3, #1
	uint8_t cmd_buf[] = {
100028d2:	4669      	mov	r1, sp
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
100028d4:	2208      	movs	r2, #8
100028d6:	6868      	ldr	r0, [r5, #4]
100028d8:	f002 fc73 	bl	100051c2 <ssd1306_write_bus.isra.0>
100028dc:	1e03      	subs	r3, r0, #0
100028de:	d001      	beq.n	100028e4 <ssd1306_write+0x90>
		LOG_ERR("Failed to write command");
100028e0:	4b08      	ldr	r3, [pc, #32]	; (10002904 <ssd1306_write+0xb0>)
100028e2:	e7bf      	b.n	10002864 <ssd1306_write+0x10>
	return ssd1306_write_bus(dev, (uint8_t *)buf, buf_len, false);
100028e4:	0022      	movs	r2, r4
100028e6:	990e      	ldr	r1, [sp, #56]	; 0x38
100028e8:	6868      	ldr	r0, [r5, #4]
100028ea:	f002 fc6a 	bl	100051c2 <ssd1306_write_bus.isra.0>
100028ee:	e7c4      	b.n	1000287a <ssd1306_write+0x26>
100028f0:	10009b86 	.word	0x10009b86
100028f4:	10005fac 	.word	0x10005fac
100028f8:	10009ba2 	.word	0x10009ba2
100028fc:	10009bc2 	.word	0x10009bc2
10002900:	10009bd3 	.word	0x10009bd3
10002904:	10009be6 	.word	0x10009be6

10002908 <ssd1306_suspend>:
{
10002908:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
1000290a:	4b05      	ldr	r3, [pc, #20]	; (10002920 <ssd1306_suspend+0x18>)
1000290c:	a901      	add	r1, sp, #4
1000290e:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002910:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
10002912:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002914:	2301      	movs	r3, #1
10002916:	001a      	movs	r2, r3
10002918:	f002 fc53 	bl	100051c2 <ssd1306_write_bus.isra.0>
}
1000291c:	bd0e      	pop	{r1, r2, r3, pc}
1000291e:	46c0      	nop			; (mov r8, r8)
10002920:	10009bfe 	.word	0x10009bfe

10002924 <ssd1306_resume>:
{
10002924:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
10002926:	4b05      	ldr	r3, [pc, #20]	; (1000293c <ssd1306_resume+0x18>)
10002928:	a901      	add	r1, sp, #4
1000292a:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
1000292c:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
1000292e:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002930:	2301      	movs	r3, #1
10002932:	001a      	movs	r2, r3
10002934:	f002 fc45 	bl	100051c2 <ssd1306_write_bus.isra.0>
}
10002938:	bd0e      	pop	{r1, r2, r3, pc}
1000293a:	46c0      	nop			; (mov r8, r8)
1000293c:	10009c00 	.word	0x10009c00

10002940 <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
10002940:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ssd1306_config *config = dev->config;
10002942:	6845      	ldr	r5, [r0, #4]
{
10002944:	b08d      	sub	sp, #52	; 0x34
10002946:	0004      	movs	r4, r0
10002948:	af00      	add	r7, sp, #0
	return device_is_ready(config->bus.bus);
1000294a:	6828      	ldr	r0, [r5, #0]
1000294c:	f003 f87e 	bl	10005a4c <z_device_is_ready>

	LOG_DBG("");

	if (!ssd1306_bus_ready(dev)) {
10002950:	2800      	cmp	r0, #0
10002952:	d116      	bne.n	10002982 <ssd1306_init+0x42>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
10002954:	682b      	ldr	r3, [r5, #0]
10002956:	466c      	mov	r4, sp
10002958:	b088      	sub	sp, #32
1000295a:	681b      	ldr	r3, [r3, #0]
1000295c:	466a      	mov	r2, sp
1000295e:	6193      	str	r3, [r2, #24]
10002960:	2380      	movs	r3, #128	; 0x80
10002962:	4961      	ldr	r1, [pc, #388]	; (10002ae8 <ssd1306_init+0x1a8>)
10002964:	009b      	lsls	r3, r3, #2
10002966:	6151      	str	r1, [r2, #20]
10002968:	21e2      	movs	r1, #226	; 0xe2
1000296a:	8393      	strh	r3, [r2, #28]
1000296c:	4b5f      	ldr	r3, [pc, #380]	; (10002aec <ssd1306_init+0x1ac>)
1000296e:	4860      	ldr	r0, [pc, #384]	; (10002af0 <ssd1306_init+0x1b0>)
10002970:	6113      	str	r3, [r2, #16]
10002972:	0149      	lsls	r1, r1, #5
10002974:	3210      	adds	r2, #16
10002976:	f002 fc18 	bl	100051aa <z_log_msg_static_create.constprop.0>
		return -EINVAL;
1000297a:	2516      	movs	r5, #22
1000297c:	46a5      	mov	sp, r4
		}
	}

	if (ssd1306_init_device(dev)) {
		LOG_ERR("Failed to initialize device!");
		return -EIO;
1000297e:	426d      	negs	r5, r5
10002980:	e040      	b.n	10002a04 <ssd1306_init+0xc4>
	if (config->reset.port) {
10002982:	68a8      	ldr	r0, [r5, #8]
10002984:	2800      	cmp	r0, #0
10002986:	d119      	bne.n	100029bc <ssd1306_init+0x7c>
	uint8_t cmd_buf[] = {
10002988:	4b5a      	ldr	r3, [pc, #360]	; (10002af4 <ssd1306_init+0x1b4>)
	const struct ssd1306_config *config = dev->config;
1000298a:	6865      	ldr	r5, [r4, #4]
	uint8_t cmd_buf[] = {
1000298c:	82bb      	strh	r3, [r7, #20]
	if (config->reset.port) {
1000298e:	68ab      	ldr	r3, [r5, #8]
10002990:	2b00      	cmp	r3, #0
10002992:	d13f      	bne.n	10002a14 <ssd1306_init+0xd4>
	if (ssd1306_suspend(dev)) {
10002994:	0020      	movs	r0, r4
10002996:	f7ff ffb7 	bl	10002908 <ssd1306_suspend>
1000299a:	2800      	cmp	r0, #0
1000299c:	d04c      	beq.n	10002a38 <ssd1306_init+0xf8>
		LOG_ERR("Failed to initialize device!");
1000299e:	4b56      	ldr	r3, [pc, #344]	; (10002af8 <ssd1306_init+0x1b8>)
100029a0:	2210      	movs	r2, #16
100029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
100029a4:	2302      	movs	r3, #2
100029a6:	2182      	movs	r1, #130	; 0x82
100029a8:	62bb      	str	r3, [r7, #40]	; 0x28
100029aa:	3316      	adds	r3, #22
100029ac:	189b      	adds	r3, r3, r2
100029ae:	4850      	ldr	r0, [pc, #320]	; (10002af0 <ssd1306_init+0x1b0>)
100029b0:	19da      	adds	r2, r3, r7
100029b2:	0149      	lsls	r1, r1, #5
100029b4:	f002 fbf9 	bl	100051aa <z_log_msg_static_create.constprop.0>
		return -EIO;
100029b8:	2505      	movs	r5, #5
100029ba:	e7e0      	b.n	1000297e <ssd1306_init+0x3e>
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
100029bc:	7b2b      	ldrb	r3, [r5, #12]
100029be:	60fb      	str	r3, [r7, #12]
				  spec->dt_flags | extra_flags);
100029c0:	89eb      	ldrh	r3, [r5, #14]
	const struct gpio_driver_api *api =
100029c2:	6882      	ldr	r2, [r0, #8]
100029c4:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
100029c6:	6902      	ldr	r2, [r0, #16]
100029c8:	60ba      	str	r2, [r7, #8]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
100029ca:	07d9      	lsls	r1, r3, #31
100029cc:	d41e      	bmi.n	10002a0c <ssd1306_init+0xcc>
	return gpio_pin_configure(spec->port,
100029ce:	21b0      	movs	r1, #176	; 0xb0
100029d0:	0349      	lsls	r1, r1, #13
100029d2:	430b      	orrs	r3, r1
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029d4:	2501      	movs	r5, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
100029d6:	4949      	ldr	r1, [pc, #292]	; (10002afc <ssd1306_init+0x1bc>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029d8:	68ba      	ldr	r2, [r7, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
100029da:	4019      	ands	r1, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029dc:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
100029de:	6079      	str	r1, [r7, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029e0:	68f9      	ldr	r1, [r7, #12]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100029e2:	2201      	movs	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029e4:	408d      	lsls	r5, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100029e6:	0031      	movs	r1, r6
100029e8:	43a9      	bics	r1, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100029ea:	4213      	tst	r3, r2
100029ec:	d001      	beq.n	100029f2 <ssd1306_init+0xb2>
		data->invert |= (gpio_port_pins_t)BIT(pin);
100029ee:	0031      	movs	r1, r6
100029f0:	4329      	orrs	r1, r5
100029f2:	68bb      	ldr	r3, [r7, #8]
	return api->pin_configure(port, pin, flags);
100029f4:	687a      	ldr	r2, [r7, #4]
100029f6:	6019      	str	r1, [r3, #0]
100029f8:	4663      	mov	r3, ip
100029fa:	68f9      	ldr	r1, [r7, #12]
100029fc:	681b      	ldr	r3, [r3, #0]
100029fe:	4798      	blx	r3
10002a00:	1e05      	subs	r5, r0, #0
		if (ret < 0) {
10002a02:	dac1      	bge.n	10002988 <ssd1306_init+0x48>
	}

	return 0;
}
10002a04:	0028      	movs	r0, r5
10002a06:	46bd      	mov	sp, r7
10002a08:	b00d      	add	sp, #52	; 0x34
10002a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10002a0c:	21d0      	movs	r1, #208	; 0xd0
10002a0e:	0349      	lsls	r1, r1, #13
10002a10:	404b      	eors	r3, r1
10002a12:	e7df      	b.n	100029d4 <ssd1306_init+0x94>
	return z_impl_k_sleep(timeout);
10002a14:	2100      	movs	r1, #0
		gpio_pin_set_dt(&config->reset, 1);
10002a16:	3508      	adds	r5, #8
10002a18:	200a      	movs	r0, #10
10002a1a:	f001 fa89 	bl	10003f30 <z_impl_k_sleep>
10002a1e:	2101      	movs	r1, #1
10002a20:	0028      	movs	r0, r5
10002a22:	f002 fbf5 	bl	10005210 <gpio_pin_set_dt.isra.0>
10002a26:	2100      	movs	r1, #0
10002a28:	200a      	movs	r0, #10
10002a2a:	f001 fa81 	bl	10003f30 <z_impl_k_sleep>
		gpio_pin_set_dt(&config->reset, 0);
10002a2e:	2100      	movs	r1, #0
10002a30:	0028      	movs	r0, r5
10002a32:	f002 fbed 	bl	10005210 <gpio_pin_set_dt.isra.0>
10002a36:	e7ad      	b.n	10002994 <ssd1306_init+0x54>
	uint8_t cmd_buf[] = {
10002a38:	2508      	movs	r5, #8
10002a3a:	2310      	movs	r3, #16
10002a3c:	18eb      	adds	r3, r5, r3
10002a3e:	2206      	movs	r2, #6
10002a40:	492f      	ldr	r1, [pc, #188]	; (10002b00 <ssd1306_init+0x1c0>)
10002a42:	19d8      	adds	r0, r3, r7
10002a44:	f002 fb9c 	bl	10005180 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002a48:	2110      	movs	r1, #16
10002a4a:	1869      	adds	r1, r5, r1
10002a4c:	2301      	movs	r3, #1
10002a4e:	2206      	movs	r2, #6
10002a50:	6860      	ldr	r0, [r4, #4]
10002a52:	19c9      	adds	r1, r1, r7
10002a54:	f002 fbb5 	bl	100051c2 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_timing_setting(dev)) {
10002a58:	2800      	cmp	r0, #0
10002a5a:	d1a0      	bne.n	1000299e <ssd1306_init+0x5e>
	uint8_t cmd_buf[] = {
10002a5c:	2310      	movs	r3, #16
10002a5e:	18eb      	adds	r3, r5, r3
10002a60:	2207      	movs	r2, #7
10002a62:	4928      	ldr	r1, [pc, #160]	; (10002b04 <ssd1306_init+0x1c4>)
10002a64:	19d8      	adds	r0, r3, r7
10002a66:	f002 fb8b 	bl	10005180 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002a6a:	2110      	movs	r1, #16
10002a6c:	1869      	adds	r1, r5, r1
10002a6e:	2301      	movs	r3, #1
10002a70:	2207      	movs	r2, #7
10002a72:	6860      	ldr	r0, [r4, #4]
10002a74:	19c9      	adds	r1, r1, r7
10002a76:	f002 fba4 	bl	100051c2 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_hardware_config(dev)) {
10002a7a:	2800      	cmp	r0, #0
10002a7c:	d000      	beq.n	10002a80 <ssd1306_init+0x140>
10002a7e:	e78e      	b.n	1000299e <ssd1306_init+0x5e>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002a80:	2110      	movs	r1, #16
	uint8_t cmd_buf[] = {
10002a82:	4b21      	ldr	r3, [pc, #132]	; (10002b08 <ssd1306_init+0x1c8>)
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002a84:	1869      	adds	r1, r5, r1
	uint8_t cmd_buf[] = {
10002a86:	833b      	strh	r3, [r7, #24]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002a88:	2202      	movs	r2, #2
10002a8a:	2301      	movs	r3, #1
10002a8c:	6860      	ldr	r0, [r4, #4]
10002a8e:	19c9      	adds	r1, r1, r7
10002a90:	f002 fb97 	bl	100051c2 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_panel_orientation(dev)) {
10002a94:	2800      	cmp	r0, #0
10002a96:	d000      	beq.n	10002a9a <ssd1306_init+0x15a>
10002a98:	e781      	b.n	1000299e <ssd1306_init+0x5e>
	uint8_t cmd_buf[] = {
10002a9a:	2310      	movs	r3, #16
10002a9c:	18eb      	adds	r3, r5, r3
10002a9e:	2203      	movs	r2, #3
10002aa0:	491a      	ldr	r1, [pc, #104]	; (10002b0c <ssd1306_init+0x1cc>)
10002aa2:	19d8      	adds	r0, r3, r7
10002aa4:	f002 fb6c 	bl	10005180 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002aa8:	2110      	movs	r1, #16
10002aaa:	1869      	adds	r1, r5, r1
10002aac:	2301      	movs	r3, #1
10002aae:	2203      	movs	r2, #3
10002ab0:	6860      	ldr	r0, [r4, #4]
10002ab2:	19c9      	adds	r1, r1, r7
10002ab4:	f002 fb85 	bl	100051c2 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_charge_pump(dev)) {
10002ab8:	2800      	cmp	r0, #0
10002aba:	d000      	beq.n	10002abe <ssd1306_init+0x17e>
10002abc:	e76f      	b.n	1000299e <ssd1306_init+0x5e>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
10002abe:	2114      	movs	r1, #20
10002ac0:	2301      	movs	r3, #1
10002ac2:	2202      	movs	r2, #2
10002ac4:	6860      	ldr	r0, [r4, #4]
10002ac6:	1879      	adds	r1, r7, r1
10002ac8:	f002 fb7b 	bl	100051c2 <ssd1306_write_bus.isra.0>
10002acc:	2800      	cmp	r0, #0
10002ace:	d000      	beq.n	10002ad2 <ssd1306_init+0x192>
10002ad0:	e765      	b.n	1000299e <ssd1306_init+0x5e>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
10002ad2:	2180      	movs	r1, #128	; 0x80
10002ad4:	0020      	movs	r0, r4
10002ad6:	f002 fb8f 	bl	100051f8 <ssd1306_set_contrast>
10002ada:	1e05      	subs	r5, r0, #0
10002adc:	d000      	beq.n	10002ae0 <ssd1306_init+0x1a0>
10002ade:	e75e      	b.n	1000299e <ssd1306_init+0x5e>
	ssd1306_resume(dev);
10002ae0:	0020      	movs	r0, r4
10002ae2:	f7ff ff1f 	bl	10002924 <ssd1306_resume>
	return 0;
10002ae6:	e78d      	b.n	10002a04 <ssd1306_init+0xc4>
10002ae8:	10009c02 	.word	0x10009c02
10002aec:	01000003 	.word	0x01000003
10002af0:	10005fac 	.word	0x10005fac
10002af4:	ffffa6a4 	.word	0xffffa6a4
10002af8:	10009c1b 	.word	0x10009c1b
10002afc:	ffefffff 	.word	0xffefffff
10002b00:	10009c38 	.word	0x10009c38
10002b04:	10005fe8 	.word	0x10005fe8
10002b08:	ffffc8a1 	.word	0xffffc8a1
10002b0c:	10009c3f 	.word	0x10009c3f

10002b10 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10002b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002b12:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002b14:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10002b16:	6903      	ldr	r3, [r0, #16]
10002b18:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10002b1a:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10002b1c:	4a14      	ldr	r2, [pc, #80]	; (10002b70 <gpio_rpi_isr+0x60>)
10002b1e:	3308      	adds	r3, #8
10002b20:	009b      	lsls	r3, r3, #2
10002b22:	589b      	ldr	r3, [r3, r2]
10002b24:	2207      	movs	r2, #7
10002b26:	4022      	ands	r2, r4
10002b28:	0092      	lsls	r2, r2, #2
10002b2a:	40d3      	lsrs	r3, r2
		if (events) {
10002b2c:	220f      	movs	r2, #15
10002b2e:	4213      	tst	r3, r2
10002b30:	d103      	bne.n	10002b3a <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002b32:	3401      	adds	r4, #1
10002b34:	2c1e      	cmp	r4, #30
10002b36:	d1f0      	bne.n	10002b1a <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10002b38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10002b3a:	210f      	movs	r1, #15
10002b3c:	0020      	movs	r0, r4
10002b3e:	f000 fc73 	bl	10003428 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10002b42:	9b01      	ldr	r3, [sp, #4]
10002b44:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002b46:	2900      	cmp	r1, #0
10002b48:	d0f3      	beq.n	10002b32 <gpio_rpi_isr+0x22>
10002b4a:	2701      	movs	r7, #1
10002b4c:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10002b4e:	680d      	ldr	r5, [r1, #0]
10002b50:	2900      	cmp	r1, #0
10002b52:	d0ee      	beq.n	10002b32 <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10002b54:	688b      	ldr	r3, [r1, #8]
10002b56:	001a      	movs	r2, r3
10002b58:	403a      	ands	r2, r7
10002b5a:	423b      	tst	r3, r7
10002b5c:	d002      	beq.n	10002b64 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10002b5e:	0030      	movs	r0, r6
10002b60:	684b      	ldr	r3, [r1, #4]
10002b62:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002b64:	1e2b      	subs	r3, r5, #0
10002b66:	d000      	beq.n	10002b6a <gpio_rpi_isr+0x5a>
10002b68:	682b      	ldr	r3, [r5, #0]
10002b6a:	0029      	movs	r1, r5
10002b6c:	001d      	movs	r5, r3
10002b6e:	e7ef      	b.n	10002b50 <gpio_rpi_isr+0x40>
10002b70:	40014100 	.word	0x40014100

10002b74 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
10002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
10002b76:	6846      	ldr	r6, [r0, #4]
{
10002b78:	b087      	sub	sp, #28
10002b7a:	0004      	movs	r4, r0
	struct i2c_dw_dev_config * const dw = dev->data;
10002b7c:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10002b7e:	466a      	mov	r2, sp
10002b80:	2100      	movs	r1, #0
10002b82:	68f0      	ldr	r0, [r6, #12]
10002b84:	f002 fdad 	bl	100056e2 <pinctrl_lookup_state>
	if (ret < 0) {
10002b88:	2800      	cmp	r0, #0
10002b8a:	db1b      	blt.n	10002bc4 <i2c_dw_initialize+0x50>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10002b8c:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002b8e:	2200      	movs	r2, #0
10002b90:	7919      	ldrb	r1, [r3, #4]
10002b92:	6818      	ldr	r0, [r3, #0]
10002b94:	f002 fdb8 	bl	10005708 <pinctrl_configure_pins>
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10002b98:	2800      	cmp	r0, #0
10002b9a:	d113      	bne.n	10002bc4 <i2c_dw_initialize+0x50>
	return z_impl_k_sem_init(sem, initial_count, limit);
10002b9c:	2201      	movs	r2, #1
10002b9e:	0001      	movs	r1, r0
10002ba0:	4252      	negs	r2, r2
10002ba2:	0028      	movs	r0, r5
10002ba4:	f002 ff7d 	bl	10005aa2 <z_impl_k_sem_init>

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002ba8:	2101      	movs	r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002baa:	6863      	ldr	r3, [r4, #4]
10002bac:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002bae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002bb0:	438a      	bics	r2, r1
10002bb2:	66da      	str	r2, [r3, #108]	; 0x6c

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10002bb4:	001a      	movs	r2, r3
10002bb6:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10002bb8:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);
	clear_bit_enable_en(reg_base);
	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
10002bba:	4a1e      	ldr	r2, [pc, #120]	; (10002c34 <i2c_dw_initialize+0xc0>)
10002bbc:	4291      	cmp	r1, r2
10002bbe:	d003      	beq.n	10002bc8 <i2c_dw_initialize+0x54>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10002bc0:	2005      	movs	r0, #5
10002bc2:	4240      	negs	r0, r0
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10002bc4:	b007      	add	sp, #28
10002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002bc8:	2706      	movs	r7, #6
10002bca:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
10002bcc:	0020      	movs	r0, r4
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002bce:	403b      	ands	r3, r7
10002bd0:	3b06      	subs	r3, #6
10002bd2:	425a      	negs	r2, r3
10002bd4:	4153      	adcs	r3, r2
10002bd6:	002a      	movs	r2, r5
10002bd8:	3208      	adds	r2, #8
10002bda:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
10002bdc:	6873      	ldr	r3, [r6, #4]
10002bde:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002be0:	68b3      	ldr	r3, [r6, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10002be2:	4a15      	ldr	r2, [pc, #84]	; (10002c38 <i2c_dw_initialize+0xc4>)
10002be4:	4293      	cmp	r3, r2
10002be6:	d014      	beq.n	10002c12 <i2c_dw_initialize+0x9e>
10002be8:	d81e      	bhi.n	10002c28 <i2c_dw_initialize+0xb4>
10002bea:	4a14      	ldr	r2, [pc, #80]	; (10002c3c <i2c_dw_initialize+0xc8>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10002bec:	3f04      	subs	r7, #4
	switch (bitrate) {
10002bee:	4293      	cmp	r3, r2
10002bf0:	d00f      	beq.n	10002c12 <i2c_dw_initialize+0x9e>
10002bf2:	4a13      	ldr	r2, [pc, #76]	; (10002c40 <i2c_dw_initialize+0xcc>)
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10002bf4:	3702      	adds	r7, #2
	switch (bitrate) {
10002bf6:	4293      	cmp	r3, r2
10002bf8:	d00b      	beq.n	10002c12 <i2c_dw_initialize+0x9e>
	}

	LOG_ERR("Invalid I2C bit rate value");
10002bfa:	4b12      	ldr	r3, [pc, #72]	; (10002c44 <i2c_dw_initialize+0xd0>)
10002bfc:	9305      	str	r3, [sp, #20]
10002bfe:	2302      	movs	r3, #2
10002c00:	9304      	str	r3, [sp, #16]
10002c02:	2182      	movs	r1, #130	; 0x82

	return 0;
10002c04:	2700      	movs	r7, #0
10002c06:	2300      	movs	r3, #0
10002c08:	480f      	ldr	r0, [pc, #60]	; (10002c48 <i2c_dw_initialize+0xd4>)
10002c0a:	aa04      	add	r2, sp, #16
10002c0c:	0149      	lsls	r1, r1, #5
10002c0e:	f7fe fff9 	bl	10001c04 <z_impl_z_log_msg_static_create>
10002c12:	2110      	movs	r1, #16
10002c14:	4339      	orrs	r1, r7
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002c16:	0020      	movs	r0, r4
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002c18:	6129      	str	r1, [r5, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002c1a:	f002 fc17 	bl	1000544c <i2c_dw_runtime_configure>
10002c1e:	2800      	cmp	r0, #0
10002c20:	d1ce      	bne.n	10002bc0 <i2c_dw_initialize+0x4c>
	dw->state = I2C_DW_STATE_READY;
10002c22:	3505      	adds	r5, #5
10002c24:	77e8      	strb	r0, [r5, #31]
	return ret;
10002c26:	e7cd      	b.n	10002bc4 <i2c_dw_initialize+0x50>
	switch (bitrate) {
10002c28:	4a08      	ldr	r2, [pc, #32]	; (10002c4c <i2c_dw_initialize+0xd8>)
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10002c2a:	2708      	movs	r7, #8
	switch (bitrate) {
10002c2c:	4293      	cmp	r3, r2
10002c2e:	d0f0      	beq.n	10002c12 <i2c_dw_initialize+0x9e>
10002c30:	4a07      	ldr	r2, [pc, #28]	; (10002c50 <i2c_dw_initialize+0xdc>)
10002c32:	e7df      	b.n	10002bf4 <i2c_dw_initialize+0x80>
10002c34:	44570140 	.word	0x44570140
10002c38:	000f4240 	.word	0x000f4240
10002c3c:	000186a0 	.word	0x000186a0
10002c40:	00061a80 	.word	0x00061a80
10002c44:	10009c68 	.word	0x10009c68
10002c48:	10005f7c 	.word	0x10005f7c
10002c4c:	0033e140 	.word	0x0033e140
10002c50:	004c4b40 	.word	0x004c4b40

10002c54 <i2c_dw_transfer>:
{
10002c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002c56:	469c      	mov	ip, r3
10002c58:	0005      	movs	r5, r0
10002c5a:	9101      	str	r1, [sp, #4]
		return 0;
10002c5c:	1e10      	subs	r0, r2, #0
{
10002c5e:	9200      	str	r2, [sp, #0]
	if (!num_msgs) {
10002c60:	d100      	bne.n	10002c64 <i2c_dw_transfer+0x10>
10002c62:	e0a8      	b.n	10002db6 <i2c_dw_transfer+0x162>
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002c64:	2201      	movs	r2, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002c66:	686b      	ldr	r3, [r5, #4]
10002c68:	681e      	ldr	r6, [r3, #0]
}

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
10002c6a:	6f33      	ldr	r3, [r6, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002c6c:	4213      	tst	r3, r2
10002c6e:	d000      	beq.n	10002c72 <i2c_dw_transfer+0x1e>
10002c70:	e0ba      	b.n	10002de8 <i2c_dw_transfer+0x194>
	struct i2c_dw_dev_config * const dw = dev->data;
10002c72:	692c      	ldr	r4, [r5, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002c74:	2308      	movs	r3, #8
10002c76:	1d61      	adds	r1, r4, #5
10002c78:	7fcf      	ldrb	r7, [r1, #31]
10002c7a:	0038      	movs	r0, r7
10002c7c:	4018      	ands	r0, r3
10002c7e:	421f      	tst	r7, r3
10002c80:	d000      	beq.n	10002c84 <i2c_dw_transfer+0x30>
10002c82:	e0b1      	b.n	10002de8 <i2c_dw_transfer+0x194>
	dw->state |= I2C_DW_BUSY;
10002c84:	7fcf      	ldrb	r7, [r1, #31]
10002c86:	433b      	orrs	r3, r7
10002c88:	77cb      	strb	r3, [r1, #31]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002c8a:	686b      	ldr	r3, [r5, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002c8c:	6929      	ldr	r1, [r5, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002c8e:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002c90:	6edd      	ldr	r5, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002c92:	4395      	bics	r5, r2
10002c94:	66dd      	str	r5, [r3, #108]	; 0x6c
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002c96:	6318      	str	r0, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10002c98:	6c18      	ldr	r0, [r3, #64]	; 0x40
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002c9a:	6908      	ldr	r0, [r1, #16]
10002c9c:	06c5      	lsls	r5, r0, #27
10002c9e:	d50e      	bpl.n	10002cbe <i2c_dw_transfer+0x6a>
		ic_con.bits.master_mode = 1U;
10002ca0:	2561      	movs	r5, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
10002ca2:	4210      	tst	r0, r2
10002ca4:	d000      	beq.n	10002ca8 <i2c_dw_transfer+0x54>
		ic_con.bits.addr_slave_10bit = 1U;
10002ca6:	3518      	adds	r5, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
10002ca8:	2207      	movs	r2, #7
10002caa:	0840      	lsrs	r0, r0, #1
10002cac:	4002      	ands	r2, r0
10002cae:	0747      	lsls	r7, r0, #29
10002cb0:	d40b      	bmi.n	10002cca <i2c_dw_transfer+0x76>
10002cb2:	2706      	movs	r7, #6
10002cb4:	4238      	tst	r0, r7
10002cb6:	d000      	beq.n	10002cba <i2c_dw_transfer+0x66>
10002cb8:	e07e      	b.n	10002db8 <i2c_dw_transfer+0x164>
10002cba:	2a01      	cmp	r2, #1
10002cbc:	d012      	beq.n	10002ce4 <i2c_dw_transfer+0x90>
		dw->state = I2C_DW_STATE_READY;
10002cbe:	2300      	movs	r3, #0
		return ret;
10002cc0:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
10002cc2:	3405      	adds	r4, #5
10002cc4:	77e3      	strb	r3, [r4, #31]
		return -EIO;
10002cc6:	4240      	negs	r0, r0
10002cc8:	e075      	b.n	10002db6 <i2c_dw_transfer+0x162>
	switch (I2C_SPEED_GET(dw->app_config)) {
10002cca:	2a04      	cmp	r2, #4
10002ccc:	d1f7      	bne.n	10002cbe <i2c_dw_transfer+0x6a>
		if (!dw->support_hs_mode) {
10002cce:	000a      	movs	r2, r1
10002cd0:	3208      	adds	r2, #8
10002cd2:	7fd2      	ldrb	r2, [r2, #31]
10002cd4:	2a00      	cmp	r2, #0
10002cd6:	d0f2      	beq.n	10002cbe <i2c_dw_transfer+0x6a>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10002cd8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
10002cda:	629a      	str	r2, [r3, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10002cdc:	8c0a      	ldrh	r2, [r1, #32]
10002cde:	625a      	str	r2, [r3, #36]	; 0x24
		break;
10002ce0:	2203      	movs	r2, #3
10002ce2:	e003      	b.n	10002cec <i2c_dw_transfer+0x98>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
10002ce4:	8c48      	ldrh	r0, [r1, #34]	; 0x22
10002ce6:	6198      	str	r0, [r3, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10002ce8:	8c08      	ldrh	r0, [r1, #32]
10002cea:	6158      	str	r0, [r3, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10002cec:	2006      	movs	r0, #6
10002cee:	0052      	lsls	r2, r2, #1
10002cf0:	4385      	bics	r5, r0
10002cf2:	4315      	orrs	r5, r2
10002cf4:	2200      	movs	r2, #0
10002cf6:	601d      	str	r5, [r3, #0]
10002cf8:	639a      	str	r2, [r3, #56]	; 0x38
10002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10002cfc:	685a      	ldr	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002cfe:	6818      	ldr	r0, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10002d00:	07c0      	lsls	r0, r0, #31
10002d02:	d55f      	bpl.n	10002dc4 <i2c_dw_transfer+0x170>
		ic_tar.bits.ic_tar = slave_address;
10002d04:	4660      	mov	r0, ip
10002d06:	0a92      	lsrs	r2, r2, #10
10002d08:	0580      	lsls	r0, r0, #22
10002d0a:	0d80      	lsrs	r0, r0, #22
10002d0c:	0292      	lsls	r2, r2, #10
10002d0e:	4302      	orrs	r2, r0
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002d10:	6909      	ldr	r1, [r1, #16]
10002d12:	06c8      	lsls	r0, r1, #27
10002d14:	d504      	bpl.n	10002d20 <i2c_dw_transfer+0xcc>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10002d16:	07c9      	lsls	r1, r1, #31
10002d18:	d557      	bpl.n	10002dca <i2c_dw_transfer+0x176>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10002d1a:	2180      	movs	r1, #128	; 0x80
10002d1c:	0149      	lsls	r1, r1, #5
10002d1e:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002d20:	2701      	movs	r7, #1
	*(volatile uint32_t *)addr = data;
10002d22:	605a      	str	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002d24:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002d26:	433b      	orrs	r3, r7
10002d28:	66f3      	str	r3, [r6, #108]	; 0x6c
		dw->rx_pending = 0U;
10002d2a:	2500      	movs	r5, #0
		dw->xfr_buf = cur_msg->buf;
10002d2c:	9a01      	ldr	r2, [sp, #4]
		pflags = dw->xfr_flags;
10002d2e:	1de3      	adds	r3, r4, #7
		dw->xfr_buf = cur_msg->buf;
10002d30:	6812      	ldr	r2, [r2, #0]
		pflags = dw->xfr_flags;
10002d32:	7fd8      	ldrb	r0, [r3, #31]
		dw->xfr_buf = cur_msg->buf;
10002d34:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
10002d36:	9a01      	ldr	r2, [sp, #4]
10002d38:	6851      	ldr	r1, [r2, #4]
10002d3a:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10002d3c:	7a12      	ldrb	r2, [r2, #8]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
10002d3e:	4050      	eors	r0, r2
		dw->xfr_flags = cur_msg->flags;
10002d40:	77da      	strb	r2, [r3, #31]
		dw->rx_pending = 0U;
10002d42:	61e5      	str	r5, [r4, #28]
		if ((pflags & I2C_MSG_RW_MASK)
10002d44:	4238      	tst	r0, r7
10002d46:	d002      	beq.n	10002d4e <i2c_dw_transfer+0xfa>
			dw->xfr_flags |= I2C_MSG_RESTART;
10002d48:	2004      	movs	r0, #4
10002d4a:	4302      	orrs	r2, r0
10002d4c:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
10002d4e:	9a00      	ldr	r2, [sp, #0]
10002d50:	2a01      	cmp	r2, #1
10002d52:	d103      	bne.n	10002d5c <i2c_dw_transfer+0x108>
			dw->xfr_flags |= I2C_MSG_STOP;
10002d54:	7fd8      	ldrb	r0, [r3, #31]
10002d56:	3201      	adds	r2, #1
10002d58:	4302      	orrs	r2, r0
10002d5a:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10002d5c:	2003      	movs	r0, #3
10002d5e:	1d65      	adds	r5, r4, #5
10002d60:	7fea      	ldrb	r2, [r5, #31]
10002d62:	4382      	bics	r2, r0
10002d64:	77ea      	strb	r2, [r5, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10002d66:	7fdb      	ldrb	r3, [r3, #31]
10002d68:	001a      	movs	r2, r3
10002d6a:	403a      	ands	r2, r7
10002d6c:	423b      	tst	r3, r7
10002d6e:	d12f      	bne.n	10002dd0 <i2c_dw_transfer+0x17c>
			dw->state |= I2C_DW_CMD_SEND;
10002d70:	7feb      	ldrb	r3, [r5, #31]
10002d72:	433b      	orrs	r3, r7
10002d74:	77eb      	strb	r3, [r5, #31]
			dw->request_bytes = 0U;
10002d76:	1da3      	adds	r3, r4, #6
10002d78:	77da      	strb	r2, [r3, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
10002d7a:	6833      	ldr	r3, [r6, #0]
		if (test_bit_con_master_mode(reg_base)) {
10002d7c:	423b      	tst	r3, r7
10002d7e:	d02d      	beq.n	10002ddc <i2c_dw_transfer+0x188>
10002d80:	4b1a      	ldr	r3, [pc, #104]	; (10002dec <i2c_dw_transfer+0x198>)
10002d82:	6333      	str	r3, [r6, #48]	; 0x30
	return z_impl_k_sem_take(sem, timeout);
10002d84:	2201      	movs	r2, #1
10002d86:	4252      	negs	r2, r2
10002d88:	17d3      	asrs	r3, r2, #31
10002d8a:	0020      	movs	r0, r4
10002d8c:	f000 fe30 	bl	100039f0 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
10002d90:	2204      	movs	r2, #4
10002d92:	7feb      	ldrb	r3, [r5, #31]
10002d94:	4213      	tst	r3, r2
10002d96:	d124      	bne.n	10002de2 <i2c_dw_transfer+0x18e>
		if (dw->xfr_len > 0) {
10002d98:	69a3      	ldr	r3, [r4, #24]
10002d9a:	2b00      	cmp	r3, #0
10002d9c:	d121      	bne.n	10002de2 <i2c_dw_transfer+0x18e>
		cur_msg++;
10002d9e:	9b01      	ldr	r3, [sp, #4]
10002da0:	330c      	adds	r3, #12
10002da2:	9301      	str	r3, [sp, #4]
		msg_left--;
10002da4:	9b00      	ldr	r3, [sp, #0]
10002da6:	3b01      	subs	r3, #1
10002da8:	b2db      	uxtb	r3, r3
10002daa:	9300      	str	r3, [sp, #0]
	while (msg_left > 0) {
10002dac:	2b00      	cmp	r3, #0
10002dae:	d1bc      	bne.n	10002d2a <i2c_dw_transfer+0xd6>
	ret = i2c_dw_setup(dev, slave_address);
10002db0:	0018      	movs	r0, r3
	dw->state = I2C_DW_STATE_READY;
10002db2:	2300      	movs	r3, #0
10002db4:	77eb      	strb	r3, [r5, #31]
}
10002db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10002db8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
10002dba:	621a      	str	r2, [r3, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10002dbc:	8c0a      	ldrh	r2, [r1, #32]
10002dbe:	61da      	str	r2, [r3, #28]
		break;
10002dc0:	2202      	movs	r2, #2
10002dc2:	e793      	b.n	10002cec <i2c_dw_transfer+0x98>
10002dc4:	4660      	mov	r0, ip
10002dc6:	6098      	str	r0, [r3, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10002dc8:	e7a2      	b.n	10002d10 <i2c_dw_transfer+0xbc>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10002dca:	4909      	ldr	r1, [pc, #36]	; (10002df0 <i2c_dw_transfer+0x19c>)
10002dcc:	400a      	ands	r2, r1
10002dce:	e7a7      	b.n	10002d20 <i2c_dw_transfer+0xcc>
			dw->state |= I2C_DW_CMD_RECV;
10002dd0:	2302      	movs	r3, #2
10002dd2:	7fea      	ldrb	r2, [r5, #31]
10002dd4:	4313      	orrs	r3, r2
10002dd6:	77eb      	strb	r3, [r5, #31]
			dw->request_bytes = dw->xfr_len;
10002dd8:	b2ca      	uxtb	r2, r1
10002dda:	e7cc      	b.n	10002d76 <i2c_dw_transfer+0x122>
10002ddc:	2398      	movs	r3, #152	; 0x98
10002dde:	009b      	lsls	r3, r3, #2
10002de0:	e7cf      	b.n	10002d82 <i2c_dw_transfer+0x12e>
10002de2:	2005      	movs	r0, #5
10002de4:	4240      	negs	r0, r0
10002de6:	e7e4      	b.n	10002db2 <i2c_dw_transfer+0x15e>
		return -EIO;
10002de8:	2005      	movs	r0, #5
10002dea:	e76c      	b.n	10002cc6 <i2c_dw_transfer+0x72>
10002dec:	0000025f 	.word	0x0000025f
10002df0:	ffffefff 	.word	0xffffefff

10002df4 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10002df4:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002df6:	4903      	ldr	r1, [pc, #12]	; (10002e04 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002df8:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002dfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002dfc:	400b      	ands	r3, r1
10002dfe:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002e00:	4770      	bx	lr
10002e02:	46c0      	nop			; (mov r8, r8)
10002e04:	fffff83f 	.word	0xfffff83f

10002e08 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10002e08:	b510      	push	{r4, lr}
10002e0a:	2b03      	cmp	r3, #3
10002e0c:	d823      	bhi.n	10002e56 <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10002e0e:	2a01      	cmp	r2, #1
10002e10:	d002      	beq.n	10002e18 <uart_rpi_set_format.isra.0+0x10>
10002e12:	2a03      	cmp	r2, #3
10002e14:	d11f      	bne.n	10002e56 <uart_rpi_set_format.isra.0+0x4e>
10002e16:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10002e18:	2902      	cmp	r1, #2
10002e1a:	d81c      	bhi.n	10002e56 <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10002e1c:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e1e:	3a01      	subs	r2, #1
10002e20:	480e      	ldr	r0, [pc, #56]	; (10002e5c <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e22:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e24:	00d2      	lsls	r2, r2, #3
10002e26:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e28:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e2a:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e2c:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e2e:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002e30:	4299      	cmp	r1, r3
10002e32:	d005      	beq.n	10002e40 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e34:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e36:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e38:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002e3a:	424b      	negs	r3, r1
10002e3c:	4159      	adcs	r1, r3
10002e3e:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e40:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e42:	236e      	movs	r3, #110	; 0x6e
10002e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10002e46:	404a      	eors	r2, r1
10002e48:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e4a:	2380      	movs	r3, #128	; 0x80
10002e4c:	015b      	lsls	r3, r3, #5
10002e4e:	4303      	orrs	r3, r0
	return 0;
10002e50:	2000      	movs	r0, #0
10002e52:	601a      	str	r2, [r3, #0]
}
10002e54:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002e56:	2016      	movs	r0, #22
10002e58:	4240      	negs	r0, r0
10002e5a:	e7fb      	b.n	10002e54 <uart_rpi_set_format.isra.0+0x4c>
10002e5c:	10009cb1 	.word	0x10009cb1

10002e60 <uart_rpi_init>:
{
10002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10002e62:	6845      	ldr	r5, [r0, #4]
{
10002e64:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10002e66:	682b      	ldr	r3, [r5, #0]
{
10002e68:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10002e6a:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10002e6c:	2100      	movs	r1, #0
10002e6e:	68a8      	ldr	r0, [r5, #8]
10002e70:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10002e72:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10002e74:	9301      	str	r3, [sp, #4]
10002e76:	f002 fc34 	bl	100056e2 <pinctrl_lookup_state>
	if (ret < 0) {
10002e7a:	2800      	cmp	r0, #0
10002e7c:	db23      	blt.n	10002ec6 <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10002e7e:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002e80:	2200      	movs	r2, #0
10002e82:	7919      	ldrb	r1, [r3, #4]
10002e84:	6818      	ldr	r0, [r3, #0]
10002e86:	f002 fc3f 	bl	10005708 <pinctrl_configure_pins>
	if (ret < 0) {
10002e8a:	2800      	cmp	r0, #0
10002e8c:	db1b      	blt.n	10002ec6 <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10002e8e:	6831      	ldr	r1, [r6, #0]
10002e90:	9801      	ldr	r0, [sp, #4]
10002e92:	f000 fb33 	bl	100034fc <uart_init>
	if (baudrate == 0) {
10002e96:	2800      	cmp	r0, #0
10002e98:	d017      	beq.n	10002eca <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10002e9a:	4b0d      	ldr	r3, [pc, #52]	; (10002ed0 <uart_rpi_init+0x70>)
10002e9c:	6030      	str	r0, [r6, #0]
10002e9e:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10002ea0:	2201      	movs	r2, #1
10002ea2:	2303      	movs	r3, #3
10002ea4:	2100      	movs	r1, #0
10002ea6:	6860      	ldr	r0, [r4, #4]
10002ea8:	f7ff ffae 	bl	10002e08 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10002eac:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002eae:	23c0      	movs	r3, #192	; 0xc0
10002eb0:	322c      	adds	r2, #44	; 0x2c
10002eb2:	019b      	lsls	r3, r3, #6
10002eb4:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10002eb6:	2600      	movs	r6, #0
10002eb8:	2210      	movs	r2, #16
10002eba:	601a      	str	r2, [r3, #0]
10002ebc:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10002ebe:	0020      	movs	r0, r4
10002ec0:	696b      	ldr	r3, [r5, #20]
10002ec2:	4798      	blx	r3
	return 0;
10002ec4:	0030      	movs	r0, r6
}
10002ec6:	b005      	add	sp, #20
10002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002eca:	2016      	movs	r0, #22
10002ecc:	4240      	negs	r0, r0
10002ece:	e7fa      	b.n	10002ec6 <uart_rpi_init+0x66>
10002ed0:	00030100 	.word	0x00030100

10002ed4 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10002ed4:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10002ed6:	4b0a      	ldr	r3, [pc, #40]	; (10002f00 <elapsed+0x2c>)
10002ed8:	4a0a      	ldr	r2, [pc, #40]	; (10002f04 <elapsed+0x30>)
10002eda:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002edc:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002ede:	4d0a      	ldr	r5, [pc, #40]	; (10002f08 <elapsed+0x34>)
10002ee0:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10002ee2:	03c9      	lsls	r1, r1, #15
10002ee4:	d401      	bmi.n	10002eea <elapsed+0x16>
	    || (val1 < val2)) {
10002ee6:	42a0      	cmp	r0, r4
10002ee8:	d204      	bcs.n	10002ef4 <elapsed+0x20>
		overflow_cyc += last_load;
10002eea:	6811      	ldr	r1, [r2, #0]
10002eec:	6828      	ldr	r0, [r5, #0]
10002eee:	1809      	adds	r1, r1, r0
10002ef0:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10002ef2:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10002ef4:	682b      	ldr	r3, [r5, #0]
10002ef6:	6810      	ldr	r0, [r2, #0]
10002ef8:	18c0      	adds	r0, r0, r3
10002efa:	1b00      	subs	r0, r0, r4
}
10002efc:	bd30      	pop	{r4, r5, pc}
10002efe:	46c0      	nop			; (mov r8, r8)
10002f00:	e000e010 	.word	0xe000e010
10002f04:	200006f8 	.word	0x200006f8
10002f08:	20000704 	.word	0x20000704

10002f0c <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002f0c:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002f0e:	4a09      	ldr	r2, [pc, #36]	; (10002f34 <sys_clock_driver_init+0x28>)
10002f10:	6a13      	ldr	r3, [r2, #32]
10002f12:	021b      	lsls	r3, r3, #8
10002f14:	0a1b      	lsrs	r3, r3, #8
10002f16:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002f18:	4b07      	ldr	r3, [pc, #28]	; (10002f38 <sys_clock_driver_init+0x2c>)
10002f1a:	4a08      	ldr	r2, [pc, #32]	; (10002f3c <sys_clock_driver_init+0x30>)
10002f1c:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002f1e:	4b08      	ldr	r3, [pc, #32]	; (10002f40 <sys_clock_driver_init+0x34>)
10002f20:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002f22:	4b08      	ldr	r3, [pc, #32]	; (10002f44 <sys_clock_driver_init+0x38>)
10002f24:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002f26:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002f28:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002f2a:	6819      	ldr	r1, [r3, #0]
10002f2c:	430a      	orrs	r2, r1
10002f2e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002f30:	4770      	bx	lr
10002f32:	46c0      	nop			; (mov r8, r8)
10002f34:	e000ed00 	.word	0xe000ed00
10002f38:	20000704 	.word	0x20000704
10002f3c:	000030d3 	.word	0x000030d3
10002f40:	200006f8 	.word	0x200006f8
10002f44:	e000e010 	.word	0xe000e010

10002f48 <sys_clock_isr>:
{
10002f48:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002f4a:	f7ff ffc3 	bl	10002ed4 <elapsed>
	cycle_count += overflow_cyc;
10002f4e:	4b0b      	ldr	r3, [pc, #44]	; (10002f7c <sys_clock_isr+0x34>)
10002f50:	4a0b      	ldr	r2, [pc, #44]	; (10002f80 <sys_clock_isr+0x38>)
10002f52:	6818      	ldr	r0, [r3, #0]
10002f54:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f56:	4c0b      	ldr	r4, [pc, #44]	; (10002f84 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002f58:	1840      	adds	r0, r0, r1
10002f5a:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002f5c:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f5e:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002f60:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002f62:	4909      	ldr	r1, [pc, #36]	; (10002f88 <sys_clock_isr+0x40>)
10002f64:	1b40      	subs	r0, r0, r5
10002f66:	f7fd f933 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10002f6a:	4b07      	ldr	r3, [pc, #28]	; (10002f88 <sys_clock_isr+0x40>)
10002f6c:	4343      	muls	r3, r0
10002f6e:	195b      	adds	r3, r3, r5
10002f70:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10002f72:	f001 f929 	bl	100041c8 <sys_clock_announce>
	z_arm_int_exit();
10002f76:	f7ff fa99 	bl	100024ac <z_arm_exc_exit>
}
10002f7a:	bd70      	pop	{r4, r5, r6, pc}
10002f7c:	200006f8 	.word	0x200006f8
10002f80:	20000700 	.word	0x20000700
10002f84:	200006fc 	.word	0x200006fc
10002f88:	000030d4 	.word	0x000030d4

10002f8c <sys_clock_set_timeout>:
{
10002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f8e:	4d32      	ldr	r5, [pc, #200]	; (10003058 <sys_clock_set_timeout+0xcc>)
10002f90:	4f32      	ldr	r7, [pc, #200]	; (1000305c <sys_clock_set_timeout+0xd0>)
10002f92:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10002f94:	2900      	cmp	r1, #0
10002f96:	d054      	beq.n	10003042 <sys_clock_set_timeout+0xb6>
10002f98:	1c43      	adds	r3, r0, #1
10002f9a:	d108      	bne.n	10002fae <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10002f9c:	2201      	movs	r2, #1
10002f9e:	682b      	ldr	r3, [r5, #0]
10002fa0:	4393      	bics	r3, r2
10002fa2:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10002fa4:	23ff      	movs	r3, #255	; 0xff
10002fa6:	061b      	lsls	r3, r3, #24
10002fa8:	603b      	str	r3, [r7, #0]
}
10002faa:	b005      	add	sp, #20
10002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10002fae:	683b      	ldr	r3, [r7, #0]
10002fb0:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10002fb2:	2600      	movs	r6, #0
10002fb4:	2801      	cmp	r0, #1
10002fb6:	dd04      	ble.n	10002fc2 <sys_clock_set_timeout+0x36>
10002fb8:	4b29      	ldr	r3, [pc, #164]	; (10003060 <sys_clock_set_timeout+0xd4>)
10002fba:	001e      	movs	r6, r3
10002fbc:	4298      	cmp	r0, r3
10002fbe:	dc00      	bgt.n	10002fc2 <sys_clock_set_timeout+0x36>
10002fc0:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10002fc2:	f3ef 8310 	mrs	r3, PRIMASK
10002fc6:	b672      	cpsid	i
10002fc8:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10002fca:	f7ff ff83 	bl	10002ed4 <elapsed>
	overflow_cyc = 0U;
10002fce:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10002fd0:	68ab      	ldr	r3, [r5, #8]
10002fd2:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10002fd4:	4b23      	ldr	r3, [pc, #140]	; (10003064 <sys_clock_set_timeout+0xd8>)
10002fd6:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10002fd8:	4b23      	ldr	r3, [pc, #140]	; (10003068 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10002fda:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10002fdc:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10002fde:	4b23      	ldr	r3, [pc, #140]	; (1000306c <sys_clock_set_timeout+0xe0>)
10002fe0:	681b      	ldr	r3, [r3, #0]
10002fe2:	9300      	str	r3, [sp, #0]
10002fe4:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10002fe6:	4290      	cmp	r0, r2
10002fe8:	db31      	blt.n	1000304e <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10002fea:	4b21      	ldr	r3, [pc, #132]	; (10003070 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002fec:	4a21      	ldr	r2, [pc, #132]	; (10003074 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10002fee:	435e      	muls	r6, r3
		delay += unannounced;
10002ff0:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002ff2:	0019      	movs	r1, r3
10002ff4:	1880      	adds	r0, r0, r2
10002ff6:	f7fd f8eb 	bl	100001d0 <__udivsi3>
		delay =
10002ffa:	4b1d      	ldr	r3, [pc, #116]	; (10003070 <sys_clock_set_timeout+0xe4>)
10002ffc:	4358      	muls	r0, r3
		delay -= unannounced;
10002ffe:	9b00      	ldr	r3, [sp, #0]
10003000:	1b1b      	subs	r3, r3, r4
10003002:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10003004:	2380      	movs	r3, #128	; 0x80
10003006:	00db      	lsls	r3, r3, #3
10003008:	4298      	cmp	r0, r3
1000300a:	d923      	bls.n	10003054 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
1000300c:	4b1a      	ldr	r3, [pc, #104]	; (10003078 <sys_clock_set_timeout+0xec>)
1000300e:	4298      	cmp	r0, r3
10003010:	d820      	bhi.n	10003054 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10003012:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10003014:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10003016:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10003018:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
1000301a:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
1000301c:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
1000301e:	9b02      	ldr	r3, [sp, #8]
10003020:	9802      	ldr	r0, [sp, #8]
10003022:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10003024:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10003026:	4288      	cmp	r0, r1
10003028:	d202      	bcs.n	10003030 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
1000302a:	9a01      	ldr	r2, [sp, #4]
1000302c:	189b      	adds	r3, r3, r2
1000302e:	191a      	adds	r2, r3, r4
10003030:	4b0c      	ldr	r3, [pc, #48]	; (10003064 <sys_clock_set_timeout+0xd8>)
10003032:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10003034:	9b03      	ldr	r3, [sp, #12]
10003036:	2b00      	cmp	r3, #0
10003038:	d1b7      	bne.n	10002faa <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
1000303a:	b662      	cpsie	i
1000303c:	f3bf 8f6f 	isb	sy
10003040:	e7b3      	b.n	10002faa <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10003042:	683b      	ldr	r3, [r7, #0]
10003044:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10003046:	1c43      	adds	r3, r0, #1
10003048:	d1b3      	bne.n	10002fb2 <sys_clock_set_timeout+0x26>
1000304a:	4805      	ldr	r0, [pc, #20]	; (10003060 <sys_clock_set_timeout+0xd4>)
1000304c:	e7b8      	b.n	10002fc0 <sys_clock_set_timeout+0x34>
1000304e:	2080      	movs	r0, #128	; 0x80
10003050:	00c0      	lsls	r0, r0, #3
10003052:	e7de      	b.n	10003012 <sys_clock_set_timeout+0x86>
10003054:	0018      	movs	r0, r3
10003056:	e7dc      	b.n	10003012 <sys_clock_set_timeout+0x86>
10003058:	e000e010 	.word	0xe000e010
1000305c:	20000704 	.word	0x20000704
10003060:	0000053d 	.word	0x0000053d
10003064:	20000700 	.word	0x20000700
10003068:	200006f8 	.word	0x200006f8
1000306c:	200006fc 	.word	0x200006fc
10003070:	000030d4 	.word	0x000030d4
10003074:	000030d3 	.word	0x000030d3
10003078:	00ffc684 	.word	0x00ffc684

1000307c <sys_clock_elapsed>:
{
1000307c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000307e:	f3ef 8410 	mrs	r4, PRIMASK
10003082:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003084:	f7ff ff26 	bl	10002ed4 <elapsed>
10003088:	4b07      	ldr	r3, [pc, #28]	; (100030a8 <sys_clock_elapsed+0x2c>)
1000308a:	4a08      	ldr	r2, [pc, #32]	; (100030ac <sys_clock_elapsed+0x30>)
1000308c:	681b      	ldr	r3, [r3, #0]
1000308e:	6812      	ldr	r2, [r2, #0]
10003090:	1a9b      	subs	r3, r3, r2
10003092:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10003094:	2c00      	cmp	r4, #0
10003096:	d102      	bne.n	1000309e <sys_clock_elapsed+0x22>
	__asm__ volatile(
10003098:	b662      	cpsie	i
1000309a:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
1000309e:	4904      	ldr	r1, [pc, #16]	; (100030b0 <sys_clock_elapsed+0x34>)
100030a0:	f7fd f896 	bl	100001d0 <__udivsi3>
}
100030a4:	bd10      	pop	{r4, pc}
100030a6:	46c0      	nop			; (mov r8, r8)
100030a8:	20000700 	.word	0x20000700
100030ac:	200006fc 	.word	0x200006fc
100030b0:	000030d4 	.word	0x000030d4

100030b4 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100030b6:	b085      	sub	sp, #20
100030b8:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100030ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100030bc:	0005      	movs	r5, r0
100030be:	000f      	movs	r7, r1
        return false;
100030c0:	2000      	movs	r0, #0
    if (freq > src_freq)
100030c2:	429a      	cmp	r2, r3
100030c4:	d863      	bhi.n	1000318e <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100030c6:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100030c8:	0e1a      	lsrs	r2, r3, #24
100030ca:	021b      	lsls	r3, r3, #8
100030cc:	9203      	str	r2, [sp, #12]
100030ce:	9302      	str	r3, [sp, #8]
100030d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100030d2:	0003      	movs	r3, r0
100030d4:	9903      	ldr	r1, [sp, #12]
100030d6:	9802      	ldr	r0, [sp, #8]
100030d8:	f7fd f900 	bl	100002dc <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100030dc:	436c      	muls	r4, r5
100030de:	4b2d      	ldr	r3, [pc, #180]	; (10003194 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100030e0:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100030e2:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100030e4:	6863      	ldr	r3, [r4, #4]
100030e6:	4283      	cmp	r3, r0
100030e8:	d200      	bcs.n	100030ec <clock_configure+0x38>
        clock->div = div;
100030ea:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100030ec:	1f2b      	subs	r3, r5, #4
100030ee:	b2db      	uxtb	r3, r3
100030f0:	9300      	str	r3, [sp, #0]
100030f2:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100030f4:	9a00      	ldr	r2, [sp, #0]
100030f6:	019b      	lsls	r3, r3, #6
100030f8:	4323      	orrs	r3, r4
100030fa:	2a01      	cmp	r2, #1
100030fc:	d81b      	bhi.n	10003136 <clock_configure+0x82>
100030fe:	2f01      	cmp	r7, #1
10003100:	d119      	bne.n	10003136 <clock_configure+0x82>
10003102:	2203      	movs	r2, #3
10003104:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10003106:	68a3      	ldr	r3, [r4, #8]
10003108:	423b      	tst	r3, r7
1000310a:	d0fc      	beq.n	10003106 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
1000310c:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000310e:	6823      	ldr	r3, [r4, #0]
10003110:	0152      	lsls	r2, r2, #5
10003112:	405a      	eors	r2, r3
10003114:	23e0      	movs	r3, #224	; 0xe0
10003116:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003118:	2380      	movs	r3, #128	; 0x80
1000311a:	015b      	lsls	r3, r3, #5
1000311c:	4323      	orrs	r3, r4
1000311e:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003120:	2103      	movs	r1, #3
10003122:	6822      	ldr	r2, [r4, #0]
10003124:	407a      	eors	r2, r7
10003126:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003128:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
1000312a:	2301      	movs	r3, #1
1000312c:	40bb      	lsls	r3, r7
1000312e:	68a2      	ldr	r2, [r4, #8]
10003130:	4213      	tst	r3, r2
10003132:	d0fc      	beq.n	1000312e <clock_configure+0x7a>
10003134:	e01a      	b.n	1000316c <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003136:	2280      	movs	r2, #128	; 0x80
10003138:	0112      	lsls	r2, r2, #4
1000313a:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
1000313c:	4b16      	ldr	r3, [pc, #88]	; (10003198 <clock_configure+0xe4>)
1000313e:	00aa      	lsls	r2, r5, #2
10003140:	58d1      	ldr	r1, [r2, r3]
10003142:	2900      	cmp	r1, #0
10003144:	d005      	beq.n	10003152 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003146:	6958      	ldr	r0, [r3, #20]
10003148:	f7fd f842 	bl	100001d0 <__udivsi3>
1000314c:	3001      	adds	r0, #1
            asm volatile (
1000314e:	3801      	subs	r0, #1
10003150:	d1fd      	bne.n	1000314e <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003152:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003154:	6823      	ldr	r3, [r4, #0]
10003156:	0152      	lsls	r2, r2, #5
10003158:	405a      	eors	r2, r3
1000315a:	23e0      	movs	r3, #224	; 0xe0
1000315c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000315e:	2380      	movs	r3, #128	; 0x80
10003160:	015b      	lsls	r3, r3, #5
10003162:	4323      	orrs	r3, r4
10003164:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10003166:	9a00      	ldr	r2, [sp, #0]
10003168:	2a01      	cmp	r2, #1
1000316a:	d9d9      	bls.n	10003120 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000316c:	2380      	movs	r3, #128	; 0x80
1000316e:	2280      	movs	r2, #128	; 0x80
10003170:	019b      	lsls	r3, r3, #6
10003172:	4323      	orrs	r3, r4
10003174:	0112      	lsls	r2, r2, #4
10003176:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003178:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
1000317a:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000317c:	0032      	movs	r2, r6
1000317e:	2300      	movs	r3, #0
10003180:	9903      	ldr	r1, [sp, #12]
10003182:	f7fd f8ab 	bl	100002dc <__aeabi_uldivmod>
10003186:	4c04      	ldr	r4, [pc, #16]	; (10003198 <clock_configure+0xe4>)
10003188:	00ad      	lsls	r5, r5, #2
1000318a:	5160      	str	r0, [r4, r5]
1000318c:	2001      	movs	r0, #1

    return true;
}
1000318e:	b005      	add	sp, #20
10003190:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003192:	46c0      	nop			; (mov r8, r8)
10003194:	40008000 	.word	0x40008000
10003198:	20000708 	.word	0x20000708

1000319c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
1000319c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000319e:	200c      	movs	r0, #12
100031a0:	f000 f8de 	bl	10003360 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100031a4:	f000 f8e4 	bl	10003370 <running_on_fpga>
100031a8:	2800      	cmp	r0, #0
100031aa:	d00a      	beq.n	100031c2 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100031ac:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100031ae:	4a2c      	ldr	r2, [pc, #176]	; (10003260 <clocks_init+0xc4>)
100031b0:	482c      	ldr	r0, [pc, #176]	; (10003264 <clocks_init+0xc8>)
100031b2:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100031b4:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100031b6:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100031b8:	2b0a      	cmp	r3, #10
100031ba:	d1fa      	bne.n	100031b2 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100031bc:	4b2a      	ldr	r3, [pc, #168]	; (10003268 <clocks_init+0xcc>)
100031be:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100031c0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
100031c2:	4d2a      	ldr	r5, [pc, #168]	; (1000326c <clocks_init+0xd0>)
100031c4:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
100031c6:	f000 f8b7 	bl	10003338 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031ca:	2201      	movs	r2, #1
100031cc:	4b28      	ldr	r3, [pc, #160]	; (10003270 <clocks_init+0xd4>)
100031ce:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100031d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
100031d2:	2b01      	cmp	r3, #1
100031d4:	d1fc      	bne.n	100031d0 <clocks_init+0x34>
100031d6:	2203      	movs	r2, #3
100031d8:	4b26      	ldr	r3, [pc, #152]	; (10003274 <clocks_init+0xd8>)
100031da:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100031dc:	6bac      	ldr	r4, [r5, #56]	; 0x38
100031de:	2c01      	cmp	r4, #1
100031e0:	d1fc      	bne.n	100031dc <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100031e2:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100031e4:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100031e6:	0021      	movs	r1, r4
100031e8:	9500      	str	r5, [sp, #0]
100031ea:	2306      	movs	r3, #6
100031ec:	4a22      	ldr	r2, [pc, #136]	; (10003278 <clocks_init+0xdc>)
100031ee:	4823      	ldr	r0, [pc, #140]	; (1000327c <clocks_init+0xe0>)
100031f0:	f000 f854 	bl	1000329c <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100031f4:	0033      	movs	r3, r6
100031f6:	0021      	movs	r1, r4
100031f8:	4a21      	ldr	r2, [pc, #132]	; (10003280 <clocks_init+0xe4>)
100031fa:	4822      	ldr	r0, [pc, #136]	; (10003284 <clocks_init+0xe8>)
100031fc:	9600      	str	r6, [sp, #0]
100031fe:	f000 f84d 	bl	1000329c <pll_init>
    clock_configure(clk_ref,
10003202:	4b21      	ldr	r3, [pc, #132]	; (10003288 <clocks_init+0xec>)
10003204:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10003206:	4d21      	ldr	r5, [pc, #132]	; (1000328c <clocks_init+0xf0>)
    clock_configure(clk_ref,
10003208:	9300      	str	r3, [sp, #0]
1000320a:	2200      	movs	r2, #0
1000320c:	2004      	movs	r0, #4
1000320e:	f7ff ff51 	bl	100030b4 <clock_configure>
    clock_configure(clk_sys,
10003212:	002b      	movs	r3, r5
10003214:	0021      	movs	r1, r4
10003216:	2200      	movs	r2, #0
10003218:	0030      	movs	r0, r6
1000321a:	9500      	str	r5, [sp, #0]
1000321c:	f7ff ff4a 	bl	100030b4 <clock_configure>
    clock_configure(clk_usb,
10003220:	2200      	movs	r2, #0
10003222:	4c10      	ldr	r4, [pc, #64]	; (10003264 <clocks_init+0xc8>)
10003224:	0011      	movs	r1, r2
10003226:	0023      	movs	r3, r4
10003228:	9400      	str	r4, [sp, #0]
1000322a:	2007      	movs	r0, #7
1000322c:	f7ff ff42 	bl	100030b4 <clock_configure>
    clock_configure(clk_adc,
10003230:	2200      	movs	r2, #0
10003232:	0023      	movs	r3, r4
10003234:	0011      	movs	r1, r2
10003236:	9400      	str	r4, [sp, #0]
10003238:	2008      	movs	r0, #8
1000323a:	f7ff ff3b 	bl	100030b4 <clock_configure>
    clock_configure(clk_rtc,
1000323e:	2200      	movs	r2, #0
10003240:	4b09      	ldr	r3, [pc, #36]	; (10003268 <clocks_init+0xcc>)
10003242:	0011      	movs	r1, r2
10003244:	9300      	str	r3, [sp, #0]
10003246:	2009      	movs	r0, #9
10003248:	0023      	movs	r3, r4
1000324a:	f7ff ff33 	bl	100030b4 <clock_configure>
    clock_configure(clk_peri,
1000324e:	2200      	movs	r2, #0
10003250:	002b      	movs	r3, r5
10003252:	0011      	movs	r1, r2
10003254:	9500      	str	r5, [sp, #0]
10003256:	2006      	movs	r0, #6
10003258:	f7ff ff2c 	bl	100030b4 <clock_configure>
1000325c:	e7b0      	b.n	100031c0 <clocks_init+0x24>
1000325e:	46c0      	nop			; (mov r8, r8)
10003260:	20000708 	.word	0x20000708
10003264:	02dc6c00 	.word	0x02dc6c00
10003268:	0000b71b 	.word	0x0000b71b
1000326c:	40008000 	.word	0x40008000
10003270:	4000b03c 	.word	0x4000b03c
10003274:	4000b030 	.word	0x4000b030
10003278:	59682f00 	.word	0x59682f00
1000327c:	40028000 	.word	0x40028000
10003280:	47868c00 	.word	0x47868c00
10003284:	4002c000 	.word	0x4002c000
10003288:	00b71b00 	.word	0x00b71b00
1000328c:	07735940 	.word	0x07735940

10003290 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10003290:	4b01      	ldr	r3, [pc, #4]	; (10003298 <clock_get_hz+0x8>)
10003292:	0080      	lsls	r0, r0, #2
10003294:	58c0      	ldr	r0, [r0, r3]
}
10003296:	4770      	bx	lr
10003298:	20000708 	.word	0x20000708

1000329c <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000329e:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100032a0:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100032a2:	0017      	movs	r7, r2
100032a4:	001e      	movs	r6, r3
100032a6:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100032a8:	f7fc ff92 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100032ac:	491d      	ldr	r1, [pc, #116]	; (10003324 <pll_init+0x88>)
100032ae:	4341      	muls	r1, r0
100032b0:	0038      	movs	r0, r7
100032b2:	f7fc ff8d 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100032b6:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100032b8:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100032ba:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100032bc:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100032be:	6822      	ldr	r2, [r4, #0]
100032c0:	2a00      	cmp	r2, #0
100032c2:	da0f      	bge.n	100032e4 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100032c4:	213f      	movs	r1, #63	; 0x3f
100032c6:	6822      	ldr	r2, [r4, #0]
100032c8:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100032ca:	42aa      	cmp	r2, r5
100032cc:	d10a      	bne.n	100032e4 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100032ce:	68a2      	ldr	r2, [r4, #8]
100032d0:	0512      	lsls	r2, r2, #20
100032d2:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100032d4:	4282      	cmp	r2, r0
100032d6:	d105      	bne.n	100032e4 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
100032d8:	21ee      	movs	r1, #238	; 0xee
100032da:	68e2      	ldr	r2, [r4, #12]
100032dc:	02c9      	lsls	r1, r1, #11
100032de:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100032e0:	429a      	cmp	r2, r3
100032e2:	d01b      	beq.n	1000331c <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100032e4:	4a10      	ldr	r2, [pc, #64]	; (10003328 <pll_init+0x8c>)
100032e6:	4294      	cmp	r4, r2
100032e8:	d019      	beq.n	1000331e <pll_init+0x82>
100032ea:	2280      	movs	r2, #128	; 0x80
100032ec:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100032ee:	490f      	ldr	r1, [pc, #60]	; (1000332c <pll_init+0x90>)
100032f0:	4e0f      	ldr	r6, [pc, #60]	; (10003330 <pll_init+0x94>)
100032f2:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100032f4:	490f      	ldr	r1, [pc, #60]	; (10003334 <pll_init+0x98>)
100032f6:	600a      	str	r2, [r1, #0]
100032f8:	0017      	movs	r7, r2
100032fa:	68b1      	ldr	r1, [r6, #8]
100032fc:	438f      	bics	r7, r1
100032fe:	d1fb      	bne.n	100032f8 <pll_init+0x5c>
10003300:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10003302:	1d21      	adds	r1, r4, #4
10003304:	0192      	lsls	r2, r2, #6
10003306:	430a      	orrs	r2, r1
10003308:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
1000330a:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
1000330c:	60a0      	str	r0, [r4, #8]
1000330e:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10003310:	6821      	ldr	r1, [r4, #0]
10003312:	2900      	cmp	r1, #0
10003314:	dafc      	bge.n	10003310 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
10003316:	60e3      	str	r3, [r4, #12]
10003318:	2308      	movs	r3, #8
1000331a:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000331e:	2280      	movs	r2, #128	; 0x80
10003320:	0192      	lsls	r2, r2, #6
10003322:	e7e4      	b.n	100032ee <pll_init+0x52>
10003324:	000f4240 	.word	0x000f4240
10003328:	4002c000 	.word	0x4002c000
1000332c:	4000e000 	.word	0x4000e000
10003330:	4000c000 	.word	0x4000c000
10003334:	4000f000 	.word	0x4000f000

10003338 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003338:	22aa      	movs	r2, #170	; 0xaa
1000333a:	4b06      	ldr	r3, [pc, #24]	; (10003354 <xosc_init+0x1c>)
1000333c:	0112      	lsls	r2, r2, #4
1000333e:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10003340:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003342:	4905      	ldr	r1, [pc, #20]	; (10003358 <xosc_init+0x20>)
10003344:	60da      	str	r2, [r3, #12]
10003346:	4a05      	ldr	r2, [pc, #20]	; (1000335c <xosc_init+0x24>)
10003348:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000334a:	685a      	ldr	r2, [r3, #4]
1000334c:	2a00      	cmp	r2, #0
1000334e:	dafc      	bge.n	1000334a <xosc_init+0x12>
}
10003350:	4770      	bx	lr
10003352:	46c0      	nop			; (mov r8, r8)
10003354:	40024000 	.word	0x40024000
10003358:	00fab000 	.word	0x00fab000
1000335c:	40026000 	.word	0x40026000

10003360 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10003360:	2380      	movs	r3, #128	; 0x80
10003362:	4a02      	ldr	r2, [pc, #8]	; (1000336c <watchdog_start_tick+0xc>)
10003364:	009b      	lsls	r3, r3, #2
10003366:	4303      	orrs	r3, r0
10003368:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000336a:	4770      	bx	lr
1000336c:	40058000 	.word	0x40058000

10003370 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10003370:	4b02      	ldr	r3, [pc, #8]	; (1000337c <running_on_fpga+0xc>)
10003372:	6818      	ldr	r0, [r3, #0]
10003374:	0780      	lsls	r0, r0, #30
10003376:	0fc0      	lsrs	r0, r0, #31
}
10003378:	4770      	bx	lr
1000337a:	46c0      	nop			; (mov r8, r8)
1000337c:	4006c000 	.word	0x4006c000

10003380 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10003380:	4b08      	ldr	r3, [pc, #32]	; (100033a4 <gpio_set_function+0x24>)
10003382:	0082      	lsls	r2, r0, #2
10003384:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003386:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10003388:	b510      	push	{r4, lr}
1000338a:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
1000338c:	00c0      	lsls	r0, r0, #3
1000338e:	4063      	eors	r3, r4
10003390:	24c0      	movs	r4, #192	; 0xc0
10003392:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003394:	2480      	movs	r4, #128	; 0x80
10003396:	0164      	lsls	r4, r4, #5
10003398:	4322      	orrs	r2, r4
1000339a:	6013      	str	r3, [r2, #0]
1000339c:	4b02      	ldr	r3, [pc, #8]	; (100033a8 <gpio_set_function+0x28>)
1000339e:	18c0      	adds	r0, r0, r3
100033a0:	6041      	str	r1, [r0, #4]
}
100033a2:	bd10      	pop	{r4, pc}
100033a4:	4001c004 	.word	0x4001c004
100033a8:	40014000 	.word	0x40014000

100033ac <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
100033ac:	4b07      	ldr	r3, [pc, #28]	; (100033cc <gpio_set_pulls+0x20>)
100033ae:	0080      	lsls	r0, r0, #2
100033b0:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100033b2:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100033b4:	00c9      	lsls	r1, r1, #3
100033b6:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100033b8:	430a      	orrs	r2, r1
100033ba:	405a      	eors	r2, r3
100033bc:	230c      	movs	r3, #12
100033be:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100033c0:	2380      	movs	r3, #128	; 0x80
100033c2:	015b      	lsls	r3, r3, #5
100033c4:	4303      	orrs	r3, r0
100033c6:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100033c8:	4770      	bx	lr
100033ca:	46c0      	nop			; (mov r8, r8)
100033cc:	4001c004 	.word	0x4001c004

100033d0 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
100033d0:	4b05      	ldr	r3, [pc, #20]	; (100033e8 <gpio_set_input_hysteresis_enabled+0x18>)
100033d2:	0080      	lsls	r0, r0, #2
100033d4:	18c0      	adds	r0, r0, r3
100033d6:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100033d8:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100033da:	2900      	cmp	r1, #0
100033dc:	d100      	bne.n	100033e0 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100033de:	23c0      	movs	r3, #192	; 0xc0
100033e0:	019b      	lsls	r3, r3, #6
100033e2:	4303      	orrs	r3, r0
100033e4:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
100033e6:	4770      	bx	lr
100033e8:	4001c004 	.word	0x4001c004

100033ec <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100033ec:	4b05      	ldr	r3, [pc, #20]	; (10003404 <gpio_set_slew_rate+0x18>)
100033ee:	0080      	lsls	r0, r0, #2
100033f0:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100033f2:	6803      	ldr	r3, [r0, #0]
100033f4:	4059      	eors	r1, r3
100033f6:	2301      	movs	r3, #1
100033f8:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100033fa:	2380      	movs	r3, #128	; 0x80
100033fc:	015b      	lsls	r3, r3, #5
100033fe:	4303      	orrs	r3, r0
10003400:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10003402:	4770      	bx	lr
10003404:	4001c004 	.word	0x4001c004

10003408 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10003408:	4b06      	ldr	r3, [pc, #24]	; (10003424 <gpio_set_drive_strength+0x1c>)
1000340a:	0080      	lsls	r0, r0, #2
1000340c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000340e:	6803      	ldr	r3, [r0, #0]
10003410:	0109      	lsls	r1, r1, #4
10003412:	4059      	eors	r1, r3
10003414:	2330      	movs	r3, #48	; 0x30
10003416:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003418:	2380      	movs	r3, #128	; 0x80
1000341a:	015b      	lsls	r3, r3, #5
1000341c:	4303      	orrs	r3, r0
1000341e:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10003420:	4770      	bx	lr
10003422:	46c0      	nop			; (mov r8, r8)
10003424:	4001c004 	.word	0x4001c004

10003428 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
10003428:	2207      	movs	r2, #7
1000342a:	08c3      	lsrs	r3, r0, #3
1000342c:	4010      	ands	r0, r2
1000342e:	0080      	lsls	r0, r0, #2
10003430:	4081      	lsls	r1, r0
10003432:	4a02      	ldr	r2, [pc, #8]	; (1000343c <gpio_acknowledge_irq+0x14>)
10003434:	333c      	adds	r3, #60	; 0x3c
10003436:	009b      	lsls	r3, r3, #2
10003438:	5099      	str	r1, [r3, r2]
}
1000343a:	4770      	bx	lr
1000343c:	40014000 	.word	0x40014000

10003440 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003442:	23d0      	movs	r3, #208	; 0xd0
10003444:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003446:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003448:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000344a:	4263      	negs	r3, r4
1000344c:	415c      	adcs	r4, r3
1000344e:	232f      	movs	r3, #47	; 0x2f
10003450:	4264      	negs	r4, r4
10003452:	439c      	bics	r4, r3
10003454:	4b0a      	ldr	r3, [pc, #40]	; (10003480 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003456:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10003458:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000345a:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
1000345c:	f7ff ffe4 	bl	10003428 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10003460:	2307      	movs	r3, #7
10003462:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003464:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10003466:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003468:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
1000346a:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000346c:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000346e:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003470:	2e00      	cmp	r6, #0
10003472:	d100      	bne.n	10003476 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003474:	23c0      	movs	r3, #192	; 0xc0
10003476:	019b      	lsls	r3, r3, #6
10003478:	4323      	orrs	r3, r4
1000347a:	601f      	str	r7, [r3, #0]
}
1000347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000347e:	46c0      	nop			; (mov r8, r8)
10003480:	40014130 	.word	0x40014130

10003484 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10003484:	4b05      	ldr	r3, [pc, #20]	; (1000349c <gpio_set_input_enabled+0x18>)
10003486:	0080      	lsls	r0, r0, #2
10003488:	18c0      	adds	r0, r0, r3
1000348a:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000348c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000348e:	2900      	cmp	r1, #0
10003490:	d100      	bne.n	10003494 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003492:	23c0      	movs	r3, #192	; 0xc0
10003494:	019b      	lsls	r3, r3, #6
10003496:	4303      	orrs	r3, r0
10003498:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
1000349a:	4770      	bx	lr
1000349c:	4001c004 	.word	0x4001c004

100034a0 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100034a0:	b570      	push	{r4, r5, r6, lr}
100034a2:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100034a4:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100034a6:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100034a8:	f7ff fef2 	bl	10003290 <clock_get_hz>
100034ac:	0021      	movs	r1, r4
100034ae:	00c0      	lsls	r0, r0, #3
100034b0:	f7fc fe8e 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100034b4:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100034b6:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100034b8:	d007      	beq.n	100034ca <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100034ba:	4b0e      	ldr	r3, [pc, #56]	; (100034f4 <uart_set_baudrate+0x54>)
100034bc:	429d      	cmp	r5, r3
100034be:	d815      	bhi.n	100034ec <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100034c0:	237f      	movs	r3, #127	; 0x7f
100034c2:	4018      	ands	r0, r3
100034c4:	1900      	adds	r0, r0, r4
100034c6:	002c      	movs	r4, r5
100034c8:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100034ca:	2380      	movs	r3, #128	; 0x80
100034cc:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
100034ce:	6274      	str	r4, [r6, #36]	; 0x24
100034d0:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
100034d2:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
100034d4:	362c      	adds	r6, #44	; 0x2c
100034d6:	4333      	orrs	r3, r6
100034d8:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
100034da:	2006      	movs	r0, #6
100034dc:	f7ff fed8 	bl	10003290 <clock_get_hz>
100034e0:	01a1      	lsls	r1, r4, #6
100034e2:	1949      	adds	r1, r1, r5
100034e4:	0080      	lsls	r0, r0, #2
100034e6:	f7fc fe73 	bl	100001d0 <__udivsi3>
}
100034ea:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
100034ec:	2500      	movs	r5, #0
        baud_ibrd = 65535;
100034ee:	4c02      	ldr	r4, [pc, #8]	; (100034f8 <uart_set_baudrate+0x58>)
100034f0:	e7eb      	b.n	100034ca <uart_set_baudrate+0x2a>
100034f2:	46c0      	nop			; (mov r8, r8)
100034f4:	0000fffe 	.word	0x0000fffe
100034f8:	0000ffff 	.word	0x0000ffff

100034fc <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
100034fc:	b570      	push	{r4, r5, r6, lr}
100034fe:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10003500:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10003502:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10003504:	f7ff fec4 	bl	10003290 <clock_get_hz>
10003508:	2800      	cmp	r0, #0
1000350a:	d02e      	beq.n	1000356a <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
1000350c:	4b19      	ldr	r3, [pc, #100]	; (10003574 <uart_init+0x78>)
1000350e:	429c      	cmp	r4, r3
10003510:	d02c      	beq.n	1000356c <uart_init+0x70>
10003512:	2380      	movs	r3, #128	; 0x80
10003514:	03db      	lsls	r3, r3, #15
10003516:	4a18      	ldr	r2, [pc, #96]	; (10003578 <uart_init+0x7c>)
10003518:	4918      	ldr	r1, [pc, #96]	; (1000357c <uart_init+0x80>)
1000351a:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000351c:	4a18      	ldr	r2, [pc, #96]	; (10003580 <uart_init+0x84>)
1000351e:	6013      	str	r3, [r2, #0]
10003520:	0018      	movs	r0, r3
10003522:	688a      	ldr	r2, [r1, #8]
10003524:	4390      	bics	r0, r2
10003526:	d1fb      	bne.n	10003520 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10003528:	4b16      	ldr	r3, [pc, #88]	; (10003584 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
1000352a:	4a17      	ldr	r2, [pc, #92]	; (10003588 <uart_init+0x8c>)
1000352c:	18e3      	adds	r3, r4, r3
1000352e:	4259      	negs	r1, r3
10003530:	414b      	adcs	r3, r1
10003532:	2180      	movs	r1, #128	; 0x80
10003534:	005b      	lsls	r3, r3, #1
10003536:	0049      	lsls	r1, r1, #1
10003538:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
1000353a:	0020      	movs	r0, r4
1000353c:	0029      	movs	r1, r5
1000353e:	f7ff ffaf 	bl	100034a0 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003542:	2360      	movs	r3, #96	; 0x60
10003544:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003546:	0021      	movs	r1, r4
10003548:	4053      	eors	r3, r2
1000354a:	226e      	movs	r2, #110	; 0x6e
1000354c:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000354e:	2280      	movs	r2, #128	; 0x80
10003550:	312c      	adds	r1, #44	; 0x2c
10003552:	0152      	lsls	r2, r2, #5
10003554:	430a      	orrs	r2, r1
10003556:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10003558:	4b0c      	ldr	r3, [pc, #48]	; (1000358c <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000355a:	2210      	movs	r2, #16
1000355c:	6323      	str	r3, [r4, #48]	; 0x30
1000355e:	2380      	movs	r3, #128	; 0x80
10003560:	019b      	lsls	r3, r3, #6
10003562:	430b      	orrs	r3, r1
10003564:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10003566:	2303      	movs	r3, #3
10003568:	64a3      	str	r3, [r4, #72]	; 0x48
}
1000356a:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
1000356c:	2380      	movs	r3, #128	; 0x80
1000356e:	041b      	lsls	r3, r3, #16
10003570:	e7d1      	b.n	10003516 <uart_init+0x1a>
10003572:	46c0      	nop			; (mov r8, r8)
10003574:	40038000 	.word	0x40038000
10003578:	4000e000 	.word	0x4000e000
1000357c:	4000c000 	.word	0x4000c000
10003580:	4000f000 	.word	0x4000f000
10003584:	bffc8000 	.word	0xbffc8000
10003588:	20000760 	.word	0x20000760
1000358c:	00000301 	.word	0x00000301

10003590 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10003590:	b510      	push	{r4, lr}
10003592:	0004      	movs	r4, r0
10003594:	b086      	sub	sp, #24
	z_impl_log_panic();
10003596:	f7fe fa57 	bl	10001a48 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
1000359a:	4b07      	ldr	r3, [pc, #28]	; (100035b8 <k_sys_fatal_error_handler+0x28>)
1000359c:	2182      	movs	r1, #130	; 0x82
1000359e:	9305      	str	r3, [sp, #20]
100035a0:	2302      	movs	r3, #2
100035a2:	9304      	str	r3, [sp, #16]
100035a4:	4805      	ldr	r0, [pc, #20]	; (100035bc <k_sys_fatal_error_handler+0x2c>)
100035a6:	2300      	movs	r3, #0
100035a8:	aa04      	add	r2, sp, #16
100035aa:	0149      	lsls	r1, r1, #5
100035ac:	f7fe fb2a 	bl	10001c04 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
100035b0:	0020      	movs	r0, r4
100035b2:	f002 fa58 	bl	10005a66 <arch_system_halt>
100035b6:	46c0      	nop			; (mov r8, r8)
100035b8:	10009cc2 	.word	0x10009cc2
100035bc:	10005f9c 	.word	0x10005f9c

100035c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100035c2:	b08b      	sub	sp, #44	; 0x2c
100035c4:	0004      	movs	r4, r0
100035c6:	000d      	movs	r5, r1
100035c8:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100035ca:	f3ef 8310 	mrs	r3, PRIMASK
100035ce:	b672      	cpsid	i
100035d0:	607b      	str	r3, [r7, #4]
	return z_impl_z_current_get();
100035d2:	f000 fcc5 	bl	10003f60 <z_impl_z_current_get>
100035d6:	4b30      	ldr	r3, [pc, #192]	; (10003698 <z_fatal_error+0xd8>)
100035d8:	60f8      	str	r0, [r7, #12]
	switch (reason) {
100035da:	2c04      	cmp	r4, #4
100035dc:	d802      	bhi.n	100035e4 <z_fatal_error+0x24>
100035de:	4b2f      	ldr	r3, [pc, #188]	; (1000369c <z_fatal_error+0xdc>)
100035e0:	00a2      	lsls	r2, r4, #2
100035e2:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
100035e4:	466e      	mov	r6, sp
100035e6:	b08a      	sub	sp, #40	; 0x28
100035e8:	466a      	mov	r2, sp
100035ea:	61d3      	str	r3, [r2, #28]
100035ec:	2300      	movs	r3, #0
100035ee:	6213      	str	r3, [r2, #32]
100035f0:	4b2b      	ldr	r3, [pc, #172]	; (100036a0 <z_fatal_error+0xe0>)
100035f2:	492c      	ldr	r1, [pc, #176]	; (100036a4 <z_fatal_error+0xe4>)
100035f4:	8493      	strh	r3, [r2, #36]	; 0x24
100035f6:	4b2c      	ldr	r3, [pc, #176]	; (100036a8 <z_fatal_error+0xe8>)
100035f8:	6151      	str	r1, [r2, #20]
100035fa:	6194      	str	r4, [r2, #24]
100035fc:	6113      	str	r3, [r2, #16]
100035fe:	21b1      	movs	r1, #177	; 0xb1
10003600:	4b2a      	ldr	r3, [pc, #168]	; (100036ac <z_fatal_error+0xec>)
10003602:	3210      	adds	r2, #16
10003604:	60bb      	str	r3, [r7, #8]
10003606:	68b8      	ldr	r0, [r7, #8]
10003608:	2300      	movs	r3, #0
1000360a:	0189      	lsls	r1, r1, #6
1000360c:	f7fe fafa 	bl	10001c04 <z_impl_z_log_msg_static_create>
10003610:	46b5      	mov	sp, r6
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
10003612:	2d00      	cmp	r5, #0
10003614:	d00f      	beq.n	10003636 <z_fatal_error+0x76>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
10003616:	69eb      	ldr	r3, [r5, #28]
10003618:	05db      	lsls	r3, r3, #23
1000361a:	d00c      	beq.n	10003636 <z_fatal_error+0x76>
		LOG_ERR("Fault during interrupt handling\n");
1000361c:	4b24      	ldr	r3, [pc, #144]	; (100036b0 <z_fatal_error+0xf0>)
1000361e:	627b      	str	r3, [r7, #36]	; 0x24
10003620:	2302      	movs	r3, #2
10003622:	623b      	str	r3, [r7, #32]
10003624:	2210      	movs	r2, #16
10003626:	2182      	movs	r1, #130	; 0x82
10003628:	1892      	adds	r2, r2, r2
1000362a:	2300      	movs	r3, #0
1000362c:	68b8      	ldr	r0, [r7, #8]
1000362e:	19d2      	adds	r2, r2, r7
10003630:	0149      	lsls	r1, r1, #5
10003632:	f7fe fae7 	bl	10001c04 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
10003636:	68fb      	ldr	r3, [r7, #12]
10003638:	2b00      	cmp	r3, #0
1000363a:	d007      	beq.n	1000364c <z_fatal_error+0x8c>
1000363c:	0018      	movs	r0, r3
1000363e:	f002 fa27 	bl	10005a90 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
10003642:	2800      	cmp	r0, #0
10003644:	d002      	beq.n	1000364c <z_fatal_error+0x8c>
10003646:	7803      	ldrb	r3, [r0, #0]
10003648:	2b00      	cmp	r3, #0
1000364a:	d100      	bne.n	1000364e <z_fatal_error+0x8e>
		thread_name = "unknown";
1000364c:	4819      	ldr	r0, [pc, #100]	; (100036b4 <z_fatal_error+0xf4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
1000364e:	466e      	mov	r6, sp
10003650:	b08a      	sub	sp, #40	; 0x28
10003652:	466a      	mov	r2, sp
10003654:	4b18      	ldr	r3, [pc, #96]	; (100036b8 <z_fatal_error+0xf8>)
10003656:	61d0      	str	r0, [r2, #28]
10003658:	6153      	str	r3, [r2, #20]
1000365a:	68fb      	ldr	r3, [r7, #12]
1000365c:	6193      	str	r3, [r2, #24]
1000365e:	4b10      	ldr	r3, [pc, #64]	; (100036a0 <z_fatal_error+0xe0>)
10003660:	8413      	strh	r3, [r2, #32]
10003662:	4b16      	ldr	r3, [pc, #88]	; (100036bc <z_fatal_error+0xfc>)
10003664:	6113      	str	r3, [r2, #16]
10003666:	2191      	movs	r1, #145	; 0x91
10003668:	2300      	movs	r3, #0
1000366a:	4810      	ldr	r0, [pc, #64]	; (100036ac <z_fatal_error+0xec>)
1000366c:	3210      	adds	r2, #16
1000366e:	0189      	lsls	r1, r1, #6
10003670:	f7fe fac8 	bl	10001c04 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10003674:	0029      	movs	r1, r5
10003676:	46b5      	mov	sp, r6
10003678:	0020      	movs	r0, r4
1000367a:	f7ff ff89 	bl	10003590 <k_sys_fatal_error_handler>
	if (key != 0U) {
1000367e:	687b      	ldr	r3, [r7, #4]
10003680:	2b00      	cmp	r3, #0
10003682:	d102      	bne.n	1000368a <z_fatal_error+0xca>
	__asm__ volatile(
10003684:	b662      	cpsie	i
10003686:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
1000368a:	68f8      	ldr	r0, [r7, #12]
1000368c:	f7fe fff8 	bl	10002680 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10003690:	46bd      	mov	sp, r7
10003692:	b00b      	add	sp, #44	; 0x2c
10003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003696:	46c0      	nop			; (mov r8, r8)
10003698:	10009cd1 	.word	0x10009cd1
1000369c:	10006180 	.word	0x10006180
100036a0:	00000301 	.word	0x00000301
100036a4:	10009ce7 	.word	0x10009ce7
100036a8:	01000005 	.word	0x01000005
100036ac:	10005f9c 	.word	0x10005f9c
100036b0:	10009d0f 	.word	0x10009d0f
100036b4:	10009cdf 	.word	0x10009cdf
100036b8:	10009d30 	.word	0x10009d30
100036bc:	01000004 	.word	0x01000004

100036c0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100036c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100036c2:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100036c4:	4e10      	ldr	r6, [pc, #64]	; (10003708 <z_sys_init_run_level+0x48>)
100036c6:	0083      	lsls	r3, r0, #2
100036c8:	3001      	adds	r0, #1
100036ca:	599c      	ldr	r4, [r3, r6]
100036cc:	0083      	lsls	r3, r0, #2
100036ce:	9301      	str	r3, [sp, #4]
100036d0:	9b01      	ldr	r3, [sp, #4]
100036d2:	58f3      	ldr	r3, [r6, r3]
100036d4:	42a3      	cmp	r3, r4
100036d6:	d800      	bhi.n	100036da <z_sys_init_run_level+0x1a>
		}
	}
}
100036d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100036da:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
100036dc:	6823      	ldr	r3, [r4, #0]
100036de:	0028      	movs	r0, r5
100036e0:	4798      	blx	r3
		if (dev != NULL) {
100036e2:	2d00      	cmp	r5, #0
100036e4:	d00d      	beq.n	10003702 <z_sys_init_run_level+0x42>
			if (rc != 0) {
100036e6:	2800      	cmp	r0, #0
100036e8:	d007      	beq.n	100036fa <z_sys_init_run_level+0x3a>
				if (rc < 0) {
100036ea:	17c2      	asrs	r2, r0, #31
100036ec:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
100036ee:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
100036f0:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
100036f2:	28ff      	cmp	r0, #255	; 0xff
100036f4:	dd00      	ble.n	100036f8 <z_sys_init_run_level+0x38>
100036f6:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
100036f8:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100036fa:	68ea      	ldr	r2, [r5, #12]
100036fc:	7853      	ldrb	r3, [r2, #1]
100036fe:	433b      	orrs	r3, r7
10003700:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003702:	3408      	adds	r4, #8
10003704:	e7e4      	b.n	100036d0 <z_sys_init_run_level+0x10>
10003706:	46c0      	nop			; (mov r8, r8)
10003708:	10006194 	.word	0x10006194

1000370c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
1000370c:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000370e:	2401      	movs	r4, #1
10003710:	4b09      	ldr	r3, [pc, #36]	; (10003738 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10003712:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10003714:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10003716:	f7ff ffd3 	bl	100036c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
1000371a:	f000 fe8b 	bl	10004434 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
1000371e:	2004      	movs	r0, #4
10003720:	f7ff ffce 	bl	100036c0 <z_sys_init_run_level>

	z_init_static_threads();
10003724:	f000 f900 	bl	10003928 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10003728:	f7fc feae 	bl	10000488 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
1000372c:	4a03      	ldr	r2, [pc, #12]	; (1000373c <bg_thread_main+0x30>)
1000372e:	7b13      	ldrb	r3, [r2, #12]
10003730:	43a3      	bics	r3, r4
10003732:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10003734:	bd10      	pop	{r4, pc}
10003736:	46c0      	nop			; (mov r8, r8)
10003738:	2000076a 	.word	0x2000076a
1000373c:	200005d8 	.word	0x200005d8

10003740 <z_bss_zero>:
{
10003740:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10003742:	4a03      	ldr	r2, [pc, #12]	; (10003750 <z_bss_zero+0x10>)
10003744:	4803      	ldr	r0, [pc, #12]	; (10003754 <z_bss_zero+0x14>)
10003746:	2100      	movs	r1, #0
10003748:	1a12      	subs	r2, r2, r0
1000374a:	f002 f990 	bl	10005a6e <z_early_memset>
}
1000374e:	bd10      	pop	{r4, pc}
10003750:	2000076c 	.word	0x2000076c
10003754:	200000b8 	.word	0x200000b8

10003758 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10003758:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
1000375a:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
1000375c:	2501      	movs	r5, #1
{
1000375e:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10003760:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10003762:	0201      	lsls	r1, r0, #8
10003764:	4811      	ldr	r0, [pc, #68]	; (100037ac <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10003766:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10003768:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
1000376a:	2000      	movs	r0, #0
{
1000376c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000376e:	9504      	str	r5, [sp, #16]
10003770:	350e      	adds	r5, #14
10003772:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003774:	3505      	adds	r5, #5
10003776:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10003778:	4b0d      	ldr	r3, [pc, #52]	; (100037b0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
1000377a:	9005      	str	r0, [sp, #20]
1000377c:	9002      	str	r0, [sp, #8]
1000377e:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003780:	480c      	ldr	r0, [pc, #48]	; (100037b4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
10003782:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003784:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10003786:	4b0c      	ldr	r3, [pc, #48]	; (100037b8 <z_init_cpu+0x60>)
10003788:	0030      	movs	r0, r6
1000378a:	9500      	str	r5, [sp, #0]
1000378c:	0052      	lsls	r2, r2, #1
1000378e:	f000 f875 	bl	1000387c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003792:	2204      	movs	r2, #4
10003794:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10003796:	742c      	strb	r4, [r5, #16]
10003798:	4393      	bics	r3, r2
1000379a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
1000379c:	3401      	adds	r4, #1
1000379e:	4b07      	ldr	r3, [pc, #28]	; (100037bc <z_init_cpu+0x64>)
100037a0:	02e4      	lsls	r4, r4, #11
100037a2:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100037a4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100037a6:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100037a8:	b006      	add	sp, #24
100037aa:	bd70      	pop	{r4, r5, r6, pc}
100037ac:	20001270 	.word	0x20001270
100037b0:	20000568 	.word	0x20000568
100037b4:	20000730 	.word	0x20000730
100037b8:	10005a95 	.word	0x10005a95
100037bc:	20000a70 	.word	0x20000a70

100037c0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
100037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100037c2:	2000      	movs	r0, #0
{
100037c4:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100037c6:	f7ff ff7b 	bl	100036c0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100037ca:	4b24      	ldr	r3, [pc, #144]	; (1000385c <z_cstart+0x9c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100037cc:	f383 8808 	msr	MSP, r3
100037d0:	4923      	ldr	r1, [pc, #140]	; (10003860 <z_cstart+0xa0>)
100037d2:	4b24      	ldr	r3, [pc, #144]	; (10003864 <z_cstart+0xa4>)
100037d4:	6a0a      	ldr	r2, [r1, #32]
100037d6:	401a      	ands	r2, r3
100037d8:	23e0      	movs	r3, #224	; 0xe0
100037da:	041b      	lsls	r3, r3, #16
100037dc:	4313      	orrs	r3, r2
100037de:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100037e0:	f001 fcbb 	bl	1000515a <z_arm_fault_init>
	z_arm_cpu_idle_init();
100037e4:	f7fe fd0e 	bl	10002204 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
100037e8:	f7fe f8a2 	bl	10001930 <log_core_init>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
100037ec:	2302      	movs	r3, #2
100037ee:	466a      	mov	r2, sp
100037f0:	33ff      	adds	r3, #255	; 0xff
100037f2:	8493      	strh	r3, [r2, #36]	; 0x24
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
100037f4:	a806      	add	r0, sp, #24
100037f6:	f000 fe17 	bl	10004428 <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100037fa:	4d1b      	ldr	r5, [pc, #108]	; (10003868 <z_cstart+0xa8>)
100037fc:	ab06      	add	r3, sp, #24
100037fe:	60ab      	str	r3, [r5, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10003800:	f002 f923 	bl	10005a4a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10003804:	2001      	movs	r0, #1
10003806:	f7ff ff5b 	bl	100036c0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
1000380a:	2002      	movs	r0, #2
1000380c:	f7ff ff58 	bl	100036c0 <z_sys_init_run_level>
	z_sched_init();
10003810:	f000 fafe 	bl	10003e10 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10003814:	4c15      	ldr	r4, [pc, #84]	; (1000386c <z_cstart+0xac>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10003816:	4b16      	ldr	r3, [pc, #88]	; (10003870 <z_cstart+0xb0>)
	_kernel.ready_q.cache = &z_main_thread;
10003818:	616c      	str	r4, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000381a:	2280      	movs	r2, #128	; 0x80
1000381c:	2500      	movs	r5, #0
1000381e:	9305      	str	r3, [sp, #20]
10003820:	2301      	movs	r3, #1
10003822:	4e14      	ldr	r6, [pc, #80]	; (10003874 <z_cstart+0xb4>)
10003824:	4914      	ldr	r1, [pc, #80]	; (10003878 <z_cstart+0xb8>)
10003826:	9304      	str	r3, [sp, #16]
10003828:	00d2      	lsls	r2, r2, #3
1000382a:	0033      	movs	r3, r6
1000382c:	0020      	movs	r0, r4
1000382e:	9503      	str	r5, [sp, #12]
10003830:	9502      	str	r5, [sp, #8]
10003832:	9501      	str	r5, [sp, #4]
10003834:	9500      	str	r5, [sp, #0]
10003836:	f000 f821 	bl	1000387c <z_setup_new_thread>
1000383a:	2204      	movs	r2, #4
1000383c:	0007      	movs	r7, r0
1000383e:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10003840:	0020      	movs	r0, r4
10003842:	4393      	bics	r3, r2
10003844:	7363      	strb	r3, [r4, #13]
10003846:	f002 f975 	bl	10005b34 <z_ready_thread>
	z_init_cpu(0);
1000384a:	0028      	movs	r0, r5
1000384c:	f7ff ff84 	bl	10003758 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10003850:	0032      	movs	r2, r6
10003852:	0039      	movs	r1, r7
10003854:	0020      	movs	r0, r4
10003856:	f7fe fe05 	bl	10002464 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
1000385a:	46c0      	nop			; (mov r8, r8)
1000385c:	20001270 	.word	0x20001270
10003860:	e000ed00 	.word	0xe000ed00
10003864:	ff00ffff 	.word	0xff00ffff
10003868:	20000730 	.word	0x20000730
1000386c:	200005d8 	.word	0x200005d8
10003870:	10009d92 	.word	0x10009d92
10003874:	1000370d 	.word	0x1000370d
10003878:	20001370 	.word	0x20001370

1000387c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
1000387c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1000387e:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10003880:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10003882:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10003884:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10003886:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10003888:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
1000388a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
1000388c:	2004      	movs	r0, #4
1000388e:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10003890:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003892:	3207      	adds	r2, #7
	thread_base->prio = priority;
10003894:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003896:	2007      	movs	r0, #7
10003898:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
1000389a:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000389c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
1000389e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
100038a0:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
100038a2:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
100038a4:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100038a6:	9202      	str	r2, [sp, #8]
100038a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100038aa:	0020      	movs	r0, r4
100038ac:	9201      	str	r2, [sp, #4]
100038ae:	9a08      	ldr	r2, [sp, #32]
100038b0:	9200      	str	r2, [sp, #0]
100038b2:	002a      	movs	r2, r5
100038b4:	f7fe fdc0 	bl	10002438 <arch_new_thread>
	if (!_current) {
100038b8:	4b04      	ldr	r3, [pc, #16]	; (100038cc <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100038ba:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100038bc:	689b      	ldr	r3, [r3, #8]
100038be:	42b3      	cmp	r3, r6
100038c0:	d000      	beq.n	100038c4 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100038c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
100038c4:	0028      	movs	r0, r5
100038c6:	6663      	str	r3, [r4, #100]	; 0x64
100038c8:	b004      	add	sp, #16
100038ca:	bd70      	pop	{r4, r5, r6, pc}
100038cc:	20000730 	.word	0x20000730

100038d0 <z_impl_k_thread_create>:
{
100038d0:	b570      	push	{r4, r5, r6, lr}
100038d2:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100038d4:	2000      	movs	r0, #0
{
100038d6:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100038d8:	9005      	str	r0, [sp, #20]
100038da:	980e      	ldr	r0, [sp, #56]	; 0x38
{
100038dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100038de:	9004      	str	r0, [sp, #16]
100038e0:	980d      	ldr	r0, [sp, #52]	; 0x34
{
100038e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100038e4:	9003      	str	r0, [sp, #12]
100038e6:	980c      	ldr	r0, [sp, #48]	; 0x30
100038e8:	9002      	str	r0, [sp, #8]
100038ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
100038ec:	9001      	str	r0, [sp, #4]
100038ee:	980a      	ldr	r0, [sp, #40]	; 0x28
100038f0:	9000      	str	r0, [sp, #0]
100038f2:	0020      	movs	r0, r4
100038f4:	f7ff ffc2 	bl	1000387c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
100038f8:	002b      	movs	r3, r5
100038fa:	1c72      	adds	r2, r6, #1
100038fc:	d101      	bne.n	10003902 <z_impl_k_thread_create+0x32>
100038fe:	3301      	adds	r3, #1
10003900:	d005      	beq.n	1000390e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10003902:	002b      	movs	r3, r5
10003904:	4333      	orrs	r3, r6
10003906:	d105      	bne.n	10003914 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10003908:	0020      	movs	r0, r4
1000390a:	f000 fa15 	bl	10003d38 <z_sched_start>
}
1000390e:	0020      	movs	r0, r4
10003910:	b006      	add	sp, #24
10003912:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003914:	0020      	movs	r0, r4
10003916:	0032      	movs	r2, r6
10003918:	002b      	movs	r3, r5
1000391a:	4902      	ldr	r1, [pc, #8]	; (10003924 <z_impl_k_thread_create+0x54>)
1000391c:	3018      	adds	r0, #24
1000391e:	f000 fbe5 	bl	100040ec <z_add_timeout>
10003922:	e7f4      	b.n	1000390e <z_impl_k_thread_create+0x3e>
10003924:	10005ba9 	.word	0x10005ba9

10003928 <z_init_static_threads>:
{
10003928:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
1000392a:	4c20      	ldr	r4, [pc, #128]	; (100039ac <z_init_static_threads+0x84>)
{
1000392c:	b086      	sub	sp, #24
1000392e:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10003930:	4d1f      	ldr	r5, [pc, #124]	; (100039b0 <z_init_static_threads+0x88>)
10003932:	42ac      	cmp	r4, r5
10003934:	d308      	bcc.n	10003948 <z_init_static_threads+0x20>
	k_sched_lock();
10003936:	f000 fa45 	bl	10003dc4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
1000393a:	0034      	movs	r4, r6
1000393c:	42ac      	cmp	r4, r5
1000393e:	d319      	bcc.n	10003974 <z_init_static_threads+0x4c>
	k_sched_unlock();
10003940:	f000 fa50 	bl	10003de4 <k_sched_unlock>
}
10003944:	b006      	add	sp, #24
10003946:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10003948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000394a:	9305      	str	r3, [sp, #20]
1000394c:	6a23      	ldr	r3, [r4, #32]
1000394e:	9304      	str	r3, [sp, #16]
10003950:	69e3      	ldr	r3, [r4, #28]
10003952:	9303      	str	r3, [sp, #12]
10003954:	69a3      	ldr	r3, [r4, #24]
10003956:	9302      	str	r3, [sp, #8]
10003958:	6963      	ldr	r3, [r4, #20]
1000395a:	9301      	str	r3, [sp, #4]
1000395c:	6923      	ldr	r3, [r4, #16]
1000395e:	9300      	str	r3, [sp, #0]
10003960:	68e3      	ldr	r3, [r4, #12]
10003962:	68a2      	ldr	r2, [r4, #8]
10003964:	6861      	ldr	r1, [r4, #4]
10003966:	6820      	ldr	r0, [r4, #0]
10003968:	f7ff ff88 	bl	1000387c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
1000396c:	6823      	ldr	r3, [r4, #0]
1000396e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10003970:	342c      	adds	r4, #44	; 0x2c
10003972:	e7dd      	b.n	10003930 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10003974:	6a63      	ldr	r3, [r4, #36]	; 0x24
10003976:	1c5a      	adds	r2, r3, #1
10003978:	d00f      	beq.n	1000399a <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
1000397a:	43d8      	mvns	r0, r3
1000397c:	17c0      	asrs	r0, r0, #31
1000397e:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10003980:	220a      	movs	r2, #10
10003982:	2300      	movs	r3, #0
10003984:	17c1      	asrs	r1, r0, #31
10003986:	f7fc fced 	bl	10000364 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
1000398a:	6826      	ldr	r6, [r4, #0]
1000398c:	000b      	movs	r3, r1
1000398e:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10003990:	4301      	orrs	r1, r0
10003992:	d104      	bne.n	1000399e <z_init_static_threads+0x76>
	z_sched_start(thread);
10003994:	0030      	movs	r0, r6
10003996:	f000 f9cf 	bl	10003d38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
1000399a:	342c      	adds	r4, #44	; 0x2c
1000399c:	e7ce      	b.n	1000393c <z_init_static_threads+0x14>
1000399e:	0030      	movs	r0, r6
100039a0:	4904      	ldr	r1, [pc, #16]	; (100039b4 <z_init_static_threads+0x8c>)
100039a2:	3018      	adds	r0, #24
100039a4:	f000 fba2 	bl	100040ec <z_add_timeout>
100039a8:	e7f7      	b.n	1000399a <z_init_static_threads+0x72>
100039aa:	46c0      	nop			; (mov r8, r8)
100039ac:	10005f34 	.word	0x10005f34
100039b0:	10005f34 	.word	0x10005f34
100039b4:	10005ba9 	.word	0x10005ba9

100039b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
100039b8:	b570      	push	{r4, r5, r6, lr}
100039ba:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100039bc:	f3ef 8510 	mrs	r5, PRIMASK
100039c0:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
100039c2:	f002 f90c 	bl	10005bde <z_unpend_first_thread>

	if (thread != NULL) {
100039c6:	2800      	cmp	r0, #0
100039c8:	d008      	beq.n	100039dc <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
100039ca:	2300      	movs	r3, #0
100039cc:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
100039ce:	f002 f8b1 	bl	10005b34 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
100039d2:	0029      	movs	r1, r5
100039d4:	4805      	ldr	r0, [pc, #20]	; (100039ec <z_impl_k_sem_give+0x34>)
100039d6:	f000 f999 	bl	10003d0c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
100039da:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
100039dc:	68a2      	ldr	r2, [r4, #8]
100039de:	68e3      	ldr	r3, [r4, #12]
100039e0:	1a9b      	subs	r3, r3, r2
100039e2:	1e59      	subs	r1, r3, #1
100039e4:	418b      	sbcs	r3, r1
100039e6:	189b      	adds	r3, r3, r2
100039e8:	60a3      	str	r3, [r4, #8]
}
100039ea:	e7f2      	b.n	100039d2 <z_impl_k_sem_give+0x1a>
100039ec:	2000076b 	.word	0x2000076b

100039f0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
100039f0:	b513      	push	{r0, r1, r4, lr}
100039f2:	0004      	movs	r4, r0
100039f4:	f3ef 8110 	mrs	r1, PRIMASK
100039f8:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
100039fa:	6880      	ldr	r0, [r0, #8]
100039fc:	2800      	cmp	r0, #0
100039fe:	d008      	beq.n	10003a12 <z_impl_k_sem_take+0x22>
		sem->count--;
10003a00:	3801      	subs	r0, #1
10003a02:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10003a04:	2900      	cmp	r1, #0
10003a06:	d102      	bne.n	10003a0e <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
10003a08:	b662      	cpsie	i
10003a0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10003a0e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10003a10:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003a12:	0010      	movs	r0, r2
10003a14:	4318      	orrs	r0, r3
10003a16:	d107      	bne.n	10003a28 <z_impl_k_sem_take+0x38>
	if (key != 0U) {
10003a18:	2900      	cmp	r1, #0
10003a1a:	d102      	bne.n	10003a22 <z_impl_k_sem_take+0x32>
	__asm__ volatile(
10003a1c:	b662      	cpsie	i
10003a1e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10003a22:	2010      	movs	r0, #16
10003a24:	4240      	negs	r0, r0
10003a26:	e7f3      	b.n	10003a10 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10003a28:	9200      	str	r2, [sp, #0]
10003a2a:	9301      	str	r3, [sp, #4]
10003a2c:	0022      	movs	r2, r4
10003a2e:	4802      	ldr	r0, [pc, #8]	; (10003a38 <z_impl_k_sem_take+0x48>)
10003a30:	f000 f954 	bl	10003cdc <z_pend_curr>
	return ret;
10003a34:	e7ec      	b.n	10003a10 <z_impl_k_sem_take+0x20>
10003a36:	46c0      	nop			; (mov r8, r8)
10003a38:	2000076b 	.word	0x2000076b

10003a3c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10003a3c:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10003a3e:	4b04      	ldr	r3, [pc, #16]	; (10003a50 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10003a40:	4a04      	ldr	r2, [pc, #16]	; (10003a54 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10003a42:	1ac0      	subs	r0, r0, r3
10003a44:	4b04      	ldr	r3, [pc, #16]	; (10003a58 <slice_timeout+0x1c>)
10003a46:	10c0      	asrs	r0, r0, #3
10003a48:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10003a4a:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10003a4c:	4770      	bx	lr
10003a4e:	46c0      	nop			; (mov r8, r8)
10003a50:	20000648 	.word	0x20000648
10003a54:	2000076b 	.word	0x2000076b
10003a58:	aaaaaaab 	.word	0xaaaaaaab

10003a5c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10003a5c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10003a5e:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10003a60:	4b0a      	ldr	r3, [pc, #40]	; (10003a8c <z_reset_time_slice+0x30>)
10003a62:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10003a64:	4b0a      	ldr	r3, [pc, #40]	; (10003a90 <z_reset_time_slice+0x34>)
10003a66:	436c      	muls	r4, r5
10003a68:	18e4      	adds	r4, r4, r3
10003a6a:	0020      	movs	r0, r4
10003a6c:	f002 f8e5 	bl	10005c3a <z_abort_timeout>
	int ret = slice_ticks;
10003a70:	4b08      	ldr	r3, [pc, #32]	; (10003a94 <z_reset_time_slice+0x38>)
10003a72:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
10003a74:	2a00      	cmp	r2, #0
10003a76:	d008      	beq.n	10003a8a <z_reset_time_slice+0x2e>
		slice_expired[cpu] = false;
10003a78:	2100      	movs	r1, #0
10003a7a:	4b07      	ldr	r3, [pc, #28]	; (10003a98 <z_reset_time_slice+0x3c>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
10003a7c:	3a01      	subs	r2, #1
		slice_expired[cpu] = false;
10003a7e:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10003a80:	0020      	movs	r0, r4
10003a82:	4906      	ldr	r1, [pc, #24]	; (10003a9c <z_reset_time_slice+0x40>)
			      K_TICKS(slice_time(curr) - 1));
10003a84:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10003a86:	f000 fb31 	bl	100040ec <z_add_timeout>
	}
}
10003a8a:	bd70      	pop	{r4, r5, r6, pc}
10003a8c:	20000730 	.word	0x20000730
10003a90:	20000648 	.word	0x20000648
10003a94:	20000758 	.word	0x20000758
10003a98:	2000076b 	.word	0x2000076b
10003a9c:	10003a3d 	.word	0x10003a3d

10003aa0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10003aa0:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10003aa2:	4d0e      	ldr	r5, [pc, #56]	; (10003adc <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003aa4:	4b0e      	ldr	r3, [pc, #56]	; (10003ae0 <update_cache+0x40>)
	return list->head == list;
10003aa6:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003aa8:	429c      	cmp	r4, r3
10003aaa:	d001      	beq.n	10003ab0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003aac:	2c00      	cmp	r4, #0
10003aae:	d100      	bne.n	10003ab2 <update_cache+0x12>
10003ab0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10003ab2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10003ab4:	2800      	cmp	r0, #0
10003ab6:	d108      	bne.n	10003aca <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10003ab8:	7b5a      	ldrb	r2, [r3, #13]
10003aba:	06d2      	lsls	r2, r2, #27
10003abc:	d105      	bne.n	10003aca <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10003abe:	69a2      	ldr	r2, [r4, #24]
10003ac0:	2a00      	cmp	r2, #0
10003ac2:	d102      	bne.n	10003aca <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10003ac4:	89da      	ldrh	r2, [r3, #14]
10003ac6:	2a7f      	cmp	r2, #127	; 0x7f
10003ac8:	d805      	bhi.n	10003ad6 <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10003aca:	429c      	cmp	r4, r3
10003acc:	d002      	beq.n	10003ad4 <update_cache+0x34>
			z_reset_time_slice(thread);
10003ace:	0020      	movs	r0, r4
10003ad0:	f7ff ffc4 	bl	10003a5c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10003ad4:	0023      	movs	r3, r4
10003ad6:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10003ad8:	bd70      	pop	{r4, r5, r6, pc}
10003ada:	46c0      	nop			; (mov r8, r8)
10003adc:	20000730 	.word	0x20000730
10003ae0:	20000748 	.word	0x20000748

10003ae4 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10003ae4:	220d      	movs	r2, #13
{
10003ae6:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10003ae8:	5682      	ldrsb	r2, [r0, r2]
{
10003aea:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003aec:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003aee:	2a00      	cmp	r2, #0
10003af0:	da04      	bge.n	10003afc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003af2:	227f      	movs	r2, #127	; 0x7f
10003af4:	4013      	ands	r3, r2
10003af6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10003af8:	f001 ffe0 	bl	10005abc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003afc:	2380      	movs	r3, #128	; 0x80
10003afe:	7b62      	ldrb	r2, [r4, #13]
10003b00:	425b      	negs	r3, r3
10003b02:	4313      	orrs	r3, r2
	return list->head == list;
10003b04:	4a13      	ldr	r2, [pc, #76]	; (10003b54 <move_thread_to_end_of_prio_q+0x70>)
10003b06:	7363      	strb	r3, [r4, #13]
10003b08:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b0a:	4813      	ldr	r0, [pc, #76]	; (10003b58 <move_thread_to_end_of_prio_q+0x74>)
10003b0c:	4283      	cmp	r3, r0
10003b0e:	d100      	bne.n	10003b12 <move_thread_to_end_of_prio_q+0x2e>
10003b10:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10003b12:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003b14:	2b00      	cmp	r3, #0
10003b16:	d104      	bne.n	10003b22 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10003b18:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10003b1a:	6061      	str	r1, [r4, #4]

	tail->next = node;
10003b1c:	600c      	str	r4, [r1, #0]
	list->tail = node;
10003b1e:	61d4      	str	r4, [r2, #28]
}
10003b20:	e00c      	b.n	10003b3c <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10003b22:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10003b24:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10003b26:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10003b28:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003b2a:	42b5      	cmp	r5, r6
10003b2c:	d00d      	beq.n	10003b4a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003b2e:	42ae      	cmp	r6, r5
10003b30:	dd0b      	ble.n	10003b4a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10003b32:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10003b34:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10003b36:	6061      	str	r1, [r4, #4]
	prev->next = node;
10003b38:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10003b3a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10003b3c:	6890      	ldr	r0, [r2, #8]
10003b3e:	1b00      	subs	r0, r0, r4
10003b40:	4243      	negs	r3, r0
10003b42:	4158      	adcs	r0, r3
10003b44:	f7ff ffac 	bl	10003aa0 <update_cache>
}
10003b48:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003b4a:	4299      	cmp	r1, r3
10003b4c:	d0e4      	beq.n	10003b18 <move_thread_to_end_of_prio_q+0x34>
10003b4e:	681b      	ldr	r3, [r3, #0]
10003b50:	e7e0      	b.n	10003b14 <move_thread_to_end_of_prio_q+0x30>
10003b52:	46c0      	nop			; (mov r8, r8)
10003b54:	20000730 	.word	0x20000730
10003b58:	20000748 	.word	0x20000748

10003b5c <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003b5c:	230d      	movs	r3, #13
{
10003b5e:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003b60:	56c3      	ldrsb	r3, [r0, r3]
10003b62:	7b41      	ldrb	r1, [r0, #13]
10003b64:	2b00      	cmp	r3, #0
10003b66:	db26      	blt.n	10003bb6 <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10003b68:	06cb      	lsls	r3, r1, #27
10003b6a:	d124      	bne.n	10003bb6 <ready_thread+0x5a>
	return node->next != NULL;
10003b6c:	6983      	ldr	r3, [r0, #24]
10003b6e:	2b00      	cmp	r3, #0
10003b70:	d121      	bne.n	10003bb6 <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10003b72:	2280      	movs	r2, #128	; 0x80
10003b74:	4252      	negs	r2, r2
10003b76:	430a      	orrs	r2, r1
10003b78:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10003b7a:	4a11      	ldr	r2, [pc, #68]	; (10003bc0 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b7c:	4c11      	ldr	r4, [pc, #68]	; (10003bc4 <ready_thread+0x68>)
	return list->head == list;
10003b7e:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b80:	42a1      	cmp	r1, r4
10003b82:	d000      	beq.n	10003b86 <ready_thread+0x2a>
10003b84:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10003b86:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003b88:	2b00      	cmp	r3, #0
10003b8a:	d104      	bne.n	10003b96 <ready_thread+0x3a>
	node->next = list;
10003b8c:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10003b8e:	6041      	str	r1, [r0, #4]
	tail->next = node;
10003b90:	6008      	str	r0, [r1, #0]
	list->tail = node;
10003b92:	61d0      	str	r0, [r2, #28]
}
10003b94:	e00c      	b.n	10003bb0 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10003b96:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10003b98:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10003b9a:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10003b9c:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003b9e:	42b5      	cmp	r5, r6
10003ba0:	d00a      	beq.n	10003bb8 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003ba2:	42ae      	cmp	r6, r5
10003ba4:	dd08      	ble.n	10003bb8 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10003ba6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003ba8:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10003baa:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003bac:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003bae:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003bb0:	2000      	movs	r0, #0
10003bb2:	f7ff ff75 	bl	10003aa0 <update_cache>
}
10003bb6:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003bb8:	428b      	cmp	r3, r1
10003bba:	d0e7      	beq.n	10003b8c <ready_thread+0x30>
10003bbc:	681b      	ldr	r3, [r3, #0]
10003bbe:	e7e3      	b.n	10003b88 <ready_thread+0x2c>
10003bc0:	20000730 	.word	0x20000730
10003bc4:	20000748 	.word	0x20000748

10003bc8 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10003bc8:	220d      	movs	r2, #13
{
10003bca:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10003bcc:	5682      	ldrsb	r2, [r0, r2]
{
10003bce:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003bd0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003bd2:	2a00      	cmp	r2, #0
10003bd4:	da04      	bge.n	10003be0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003bd6:	227f      	movs	r2, #127	; 0x7f
10003bd8:	4013      	ands	r3, r2
10003bda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003bdc:	f001 ff6e 	bl	10005abc <sys_dlist_remove>
	update_cache(thread == _current);
10003be0:	4b03      	ldr	r3, [pc, #12]	; (10003bf0 <unready_thread+0x28>)
10003be2:	6898      	ldr	r0, [r3, #8]
10003be4:	1b00      	subs	r0, r0, r4
10003be6:	4243      	negs	r3, r0
10003be8:	4158      	adcs	r0, r3
10003bea:	f7ff ff59 	bl	10003aa0 <update_cache>
}
10003bee:	bd10      	pop	{r4, pc}
10003bf0:	20000730 	.word	0x20000730

10003bf4 <pend_locked>:
{
10003bf4:	b570      	push	{r4, r5, r6, lr}
10003bf6:	001d      	movs	r5, r3
10003bf8:	0016      	movs	r6, r2
10003bfa:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10003bfc:	f001 ff71 	bl	10005ae2 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
10003c00:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003c02:	1c72      	adds	r2, r6, #1
10003c04:	d101      	bne.n	10003c0a <pend_locked+0x16>
10003c06:	3301      	adds	r3, #1
10003c08:	d006      	beq.n	10003c18 <pend_locked+0x24>
10003c0a:	0020      	movs	r0, r4
10003c0c:	0032      	movs	r2, r6
10003c0e:	002b      	movs	r3, r5
10003c10:	4902      	ldr	r1, [pc, #8]	; (10003c1c <pend_locked+0x28>)
10003c12:	3018      	adds	r0, #24
10003c14:	f000 fa6a 	bl	100040ec <z_add_timeout>
}
10003c18:	bd70      	pop	{r4, r5, r6, pc}
10003c1a:	46c0      	nop			; (mov r8, r8)
10003c1c:	10005ba9 	.word	0x10005ba9

10003c20 <k_sched_time_slice_set>:
{
10003c20:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003c22:	f3ef 8410 	mrs	r4, PRIMASK
10003c26:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10003c28:	230a      	movs	r3, #10
10003c2a:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10003c2c:	2800      	cmp	r0, #0
10003c2e:	dd02      	ble.n	10003c36 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10003c30:	2b02      	cmp	r3, #2
10003c32:	da00      	bge.n	10003c36 <k_sched_time_slice_set+0x16>
10003c34:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10003c36:	4a07      	ldr	r2, [pc, #28]	; (10003c54 <k_sched_time_slice_set+0x34>)
10003c38:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10003c3a:	4b07      	ldr	r3, [pc, #28]	; (10003c58 <k_sched_time_slice_set+0x38>)
10003c3c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10003c3e:	4b07      	ldr	r3, [pc, #28]	; (10003c5c <k_sched_time_slice_set+0x3c>)
10003c40:	6898      	ldr	r0, [r3, #8]
10003c42:	f7ff ff0b 	bl	10003a5c <z_reset_time_slice>
	if (key != 0U) {
10003c46:	2c00      	cmp	r4, #0
10003c48:	d102      	bne.n	10003c50 <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10003c4a:	b662      	cpsie	i
10003c4c:	f3bf 8f6f 	isb	sy
}
10003c50:	bd10      	pop	{r4, pc}
10003c52:	46c0      	nop			; (mov r8, r8)
10003c54:	20000758 	.word	0x20000758
10003c58:	20000754 	.word	0x20000754
10003c5c:	20000730 	.word	0x20000730

10003c60 <z_time_slice>:
{
10003c60:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003c62:	f3ef 8510 	mrs	r5, PRIMASK
10003c66:	b672      	cpsid	i
	if (pending_current == _current) {
10003c68:	4a16      	ldr	r2, [pc, #88]	; (10003cc4 <z_time_slice+0x64>)
10003c6a:	4b17      	ldr	r3, [pc, #92]	; (10003cc8 <z_time_slice+0x68>)
10003c6c:	6894      	ldr	r4, [r2, #8]
10003c6e:	6819      	ldr	r1, [r3, #0]
10003c70:	428c      	cmp	r4, r1
10003c72:	d108      	bne.n	10003c86 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10003c74:	0020      	movs	r0, r4
10003c76:	f7ff fef1 	bl	10003a5c <z_reset_time_slice>
	if (key != 0U) {
10003c7a:	2d00      	cmp	r5, #0
10003c7c:	d102      	bne.n	10003c84 <z_time_slice+0x24>
	__asm__ volatile(
10003c7e:	b662      	cpsie	i
10003c80:	f3bf 8f6f 	isb	sy
}
10003c84:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10003c86:	2100      	movs	r1, #0
10003c88:	6019      	str	r1, [r3, #0]
	int ret = slice_ticks;
10003c8a:	4b10      	ldr	r3, [pc, #64]	; (10003ccc <z_time_slice+0x6c>)
	if (slice_time(_current) && sliceable(_current)) {
10003c8c:	681b      	ldr	r3, [r3, #0]
10003c8e:	428b      	cmp	r3, r1
10003c90:	d0f3      	beq.n	10003c7a <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10003c92:	89e3      	ldrh	r3, [r4, #14]
10003c94:	2b7f      	cmp	r3, #127	; 0x7f
10003c96:	d8f0      	bhi.n	10003c7a <z_time_slice+0x1a>
		&& !z_is_thread_prevented_from_running(thread)
10003c98:	7b63      	ldrb	r3, [r4, #13]
10003c9a:	06db      	lsls	r3, r3, #27
10003c9c:	d1ed      	bne.n	10003c7a <z_time_slice+0x1a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10003c9e:	210e      	movs	r1, #14
10003ca0:	4b0b      	ldr	r3, [pc, #44]	; (10003cd0 <z_time_slice+0x70>)
10003ca2:	5661      	ldrsb	r1, [r4, r1]
10003ca4:	681b      	ldr	r3, [r3, #0]
10003ca6:	4299      	cmp	r1, r3
10003ca8:	dbe7      	blt.n	10003c7a <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10003caa:	4b0a      	ldr	r3, [pc, #40]	; (10003cd4 <z_time_slice+0x74>)
10003cac:	429c      	cmp	r4, r3
10003cae:	d0e4      	beq.n	10003c7a <z_time_slice+0x1a>
		if (slice_expired[_current_cpu->id]) {
10003cb0:	4b09      	ldr	r3, [pc, #36]	; (10003cd8 <z_time_slice+0x78>)
10003cb2:	7c12      	ldrb	r2, [r2, #16]
10003cb4:	5c9b      	ldrb	r3, [r3, r2]
10003cb6:	2b00      	cmp	r3, #0
10003cb8:	d0df      	beq.n	10003c7a <z_time_slice+0x1a>
		move_thread_to_end_of_prio_q(curr);
10003cba:	0020      	movs	r0, r4
10003cbc:	f7ff ff12 	bl	10003ae4 <move_thread_to_end_of_prio_q>
10003cc0:	e7d8      	b.n	10003c74 <z_time_slice+0x14>
10003cc2:	46c0      	nop			; (mov r8, r8)
10003cc4:	20000730 	.word	0x20000730
10003cc8:	20000750 	.word	0x20000750
10003ccc:	20000758 	.word	0x20000758
10003cd0:	20000754 	.word	0x20000754
10003cd4:	20000568 	.word	0x20000568
10003cd8:	2000076b 	.word	0x2000076b

10003cdc <z_pend_curr>:
{
10003cdc:	b510      	push	{r4, lr}
	pending_current = _current;
10003cde:	4809      	ldr	r0, [pc, #36]	; (10003d04 <z_pend_curr+0x28>)
{
10003ce0:	000c      	movs	r4, r1
	pending_current = _current;
10003ce2:	4b09      	ldr	r3, [pc, #36]	; (10003d08 <z_pend_curr+0x2c>)
{
10003ce4:	0011      	movs	r1, r2
	pending_current = _current;
10003ce6:	6882      	ldr	r2, [r0, #8]
10003ce8:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10003cea:	f3ef 8310 	mrs	r3, PRIMASK
10003cee:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10003cf0:	9a02      	ldr	r2, [sp, #8]
10003cf2:	9b03      	ldr	r3, [sp, #12]
10003cf4:	6880      	ldr	r0, [r0, #8]
10003cf6:	f7ff ff7d 	bl	10003bf4 <pend_locked>
	ret = arch_swap(key);
10003cfa:	0020      	movs	r0, r4
10003cfc:	f7fe fb42 	bl	10002384 <arch_swap>
}
10003d00:	bd10      	pop	{r4, pc}
10003d02:	46c0      	nop			; (mov r8, r8)
10003d04:	20000730 	.word	0x20000730
10003d08:	20000750 	.word	0x20000750

10003d0c <z_reschedule>:
{
10003d0c:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003d0e:	2900      	cmp	r1, #0
10003d10:	d10a      	bne.n	10003d28 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003d12:	f3ef 8005 	mrs	r0, IPSR
10003d16:	2800      	cmp	r0, #0
10003d18:	d107      	bne.n	10003d2a <z_reschedule+0x1e>
	return new_thread != _current;
10003d1a:	4b06      	ldr	r3, [pc, #24]	; (10003d34 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003d1c:	689a      	ldr	r2, [r3, #8]
10003d1e:	695b      	ldr	r3, [r3, #20]
10003d20:	429a      	cmp	r2, r3
10003d22:	d002      	beq.n	10003d2a <z_reschedule+0x1e>
10003d24:	f7fe fb2e 	bl	10002384 <arch_swap>
}
10003d28:	bd10      	pop	{r4, pc}
	__asm__ volatile(
10003d2a:	b662      	cpsie	i
10003d2c:	f3bf 8f6f 	isb	sy
10003d30:	e7fa      	b.n	10003d28 <z_reschedule+0x1c>
10003d32:	46c0      	nop			; (mov r8, r8)
10003d34:	20000730 	.word	0x20000730

10003d38 <z_sched_start>:
{
10003d38:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003d3a:	f3ef 8410 	mrs	r4, PRIMASK
10003d3e:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003d40:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003d42:	7b43      	ldrb	r3, [r0, #13]
10003d44:	4213      	tst	r3, r2
10003d46:	d105      	bne.n	10003d54 <z_sched_start+0x1c>
	if (key != 0U) {
10003d48:	2c00      	cmp	r4, #0
10003d4a:	d102      	bne.n	10003d52 <z_sched_start+0x1a>
	__asm__ volatile(
10003d4c:	b662      	cpsie	i
10003d4e:	f3bf 8f6f 	isb	sy
}
10003d52:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003d54:	4393      	bics	r3, r2
10003d56:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003d58:	f7ff ff00 	bl	10003b5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003d5c:	0021      	movs	r1, r4
10003d5e:	4802      	ldr	r0, [pc, #8]	; (10003d68 <z_sched_start+0x30>)
10003d60:	f7ff ffd4 	bl	10003d0c <z_reschedule>
10003d64:	e7f5      	b.n	10003d52 <z_sched_start+0x1a>
10003d66:	46c0      	nop			; (mov r8, r8)
10003d68:	2000076c 	.word	0x2000076c

10003d6c <z_impl_k_thread_suspend>:
{
10003d6c:	b570      	push	{r4, r5, r6, lr}
10003d6e:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003d70:	3018      	adds	r0, #24
10003d72:	f001 ff62 	bl	10005c3a <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10003d76:	f3ef 8610 	mrs	r6, PRIMASK
10003d7a:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10003d7c:	220d      	movs	r2, #13
10003d7e:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10003d80:	7b63      	ldrb	r3, [r4, #13]
10003d82:	2a00      	cmp	r2, #0
10003d84:	da05      	bge.n	10003d92 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003d86:	227f      	movs	r2, #127	; 0x7f
10003d88:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003d8a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003d8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003d8e:	f001 fe95 	bl	10005abc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003d92:	2310      	movs	r3, #16
		update_cache(thread == _current);
10003d94:	4d0a      	ldr	r5, [pc, #40]	; (10003dc0 <z_impl_k_thread_suspend+0x54>)
10003d96:	7b62      	ldrb	r2, [r4, #13]
10003d98:	68a8      	ldr	r0, [r5, #8]
10003d9a:	4313      	orrs	r3, r2
10003d9c:	1b00      	subs	r0, r0, r4
10003d9e:	7363      	strb	r3, [r4, #13]
10003da0:	4243      	negs	r3, r0
10003da2:	4158      	adcs	r0, r3
10003da4:	f7ff fe7c 	bl	10003aa0 <update_cache>
	if (key != 0U) {
10003da8:	2e00      	cmp	r6, #0
10003daa:	d102      	bne.n	10003db2 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10003dac:	b662      	cpsie	i
10003dae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10003db2:	68ab      	ldr	r3, [r5, #8]
10003db4:	42a3      	cmp	r3, r4
10003db6:	d101      	bne.n	10003dbc <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10003db8:	f001 ff38 	bl	10005c2c <z_reschedule_unlocked>
}
10003dbc:	bd70      	pop	{r4, r5, r6, pc}
10003dbe:	46c0      	nop			; (mov r8, r8)
10003dc0:	20000730 	.word	0x20000730

10003dc4 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003dc4:	f3ef 8110 	mrs	r1, PRIMASK
10003dc8:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10003dca:	4b05      	ldr	r3, [pc, #20]	; (10003de0 <k_sched_lock+0x1c>)
10003dcc:	689a      	ldr	r2, [r3, #8]
10003dce:	7bd3      	ldrb	r3, [r2, #15]
10003dd0:	3b01      	subs	r3, #1
10003dd2:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003dd4:	2900      	cmp	r1, #0
10003dd6:	d102      	bne.n	10003dde <k_sched_lock+0x1a>
	__asm__ volatile(
10003dd8:	b662      	cpsie	i
10003dda:	f3bf 8f6f 	isb	sy
}
10003dde:	4770      	bx	lr
10003de0:	20000730 	.word	0x20000730

10003de4 <k_sched_unlock>:
{
10003de4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003de6:	f3ef 8410 	mrs	r4, PRIMASK
10003dea:	b672      	cpsid	i
		++_current->base.sched_locked;
10003dec:	4b07      	ldr	r3, [pc, #28]	; (10003e0c <k_sched_unlock+0x28>)
		update_cache(0);
10003dee:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10003df0:	689a      	ldr	r2, [r3, #8]
10003df2:	7bd3      	ldrb	r3, [r2, #15]
10003df4:	3301      	adds	r3, #1
10003df6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10003df8:	f7ff fe52 	bl	10003aa0 <update_cache>
	if (key != 0U) {
10003dfc:	2c00      	cmp	r4, #0
10003dfe:	d102      	bne.n	10003e06 <k_sched_unlock+0x22>
	__asm__ volatile(
10003e00:	b662      	cpsie	i
10003e02:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10003e06:	f001 ff11 	bl	10005c2c <z_reschedule_unlocked>
}
10003e0a:	bd10      	pop	{r4, pc}
10003e0c:	20000730 	.word	0x20000730

10003e10 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003e10:	2100      	movs	r1, #0
{
10003e12:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10003e14:	4b03      	ldr	r3, [pc, #12]	; (10003e24 <z_sched_init+0x14>)
10003e16:	4a04      	ldr	r2, [pc, #16]	; (10003e28 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003e18:	0008      	movs	r0, r1
10003e1a:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10003e1c:	61da      	str	r2, [r3, #28]
10003e1e:	f7ff feff 	bl	10003c20 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10003e22:	bd10      	pop	{r4, pc}
10003e24:	20000730 	.word	0x20000730
10003e28:	20000748 	.word	0x20000748

10003e2c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003e2e:	f3ef 8510 	mrs	r5, PRIMASK
10003e32:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003e34:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10003e36:	4c19      	ldr	r4, [pc, #100]	; (10003e9c <z_impl_k_yield+0x70>)
10003e38:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003e3a:	7b43      	ldrb	r3, [r0, #13]
10003e3c:	4013      	ands	r3, r2
10003e3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003e40:	f001 fe3c 	bl	10005abc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003e44:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10003e46:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10003e48:	4252      	negs	r2, r2
10003e4a:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003e4c:	4814      	ldr	r0, [pc, #80]	; (10003ea0 <z_impl_k_yield+0x74>)
10003e4e:	430a      	orrs	r2, r1
10003e50:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10003e52:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003e54:	4282      	cmp	r2, r0
10003e56:	d100      	bne.n	10003e5a <z_impl_k_yield+0x2e>
10003e58:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10003e5a:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003e5c:	2a00      	cmp	r2, #0
10003e5e:	d104      	bne.n	10003e6a <z_impl_k_yield+0x3e>
	node->next = list;
10003e60:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10003e62:	6059      	str	r1, [r3, #4]
	tail->next = node;
10003e64:	600b      	str	r3, [r1, #0]
	list->tail = node;
10003e66:	61e3      	str	r3, [r4, #28]
}
10003e68:	e00c      	b.n	10003e84 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10003e6a:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10003e6c:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10003e6e:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10003e70:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10003e72:	42be      	cmp	r6, r7
10003e74:	d00d      	beq.n	10003e92 <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003e76:	42b7      	cmp	r7, r6
10003e78:	dd0b      	ble.n	10003e92 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10003e7a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10003e7c:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10003e7e:	6059      	str	r1, [r3, #4]
	prev->next = node;
10003e80:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10003e82:	6053      	str	r3, [r2, #4]
	update_cache(1);
10003e84:	2001      	movs	r0, #1
10003e86:	f7ff fe0b 	bl	10003aa0 <update_cache>
10003e8a:	0028      	movs	r0, r5
10003e8c:	f7fe fa7a 	bl	10002384 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003e92:	428a      	cmp	r2, r1
10003e94:	d0e4      	beq.n	10003e60 <z_impl_k_yield+0x34>
10003e96:	6812      	ldr	r2, [r2, #0]
10003e98:	e7e0      	b.n	10003e5c <z_impl_k_yield+0x30>
10003e9a:	46c0      	nop			; (mov r8, r8)
10003e9c:	20000730 	.word	0x20000730
10003ea0:	20000748 	.word	0x20000748

10003ea4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10003ea4:	0003      	movs	r3, r0
{
10003ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10003ea8:	430b      	orrs	r3, r1
{
10003eaa:	0004      	movs	r4, r0
10003eac:	000d      	movs	r5, r1
	if (ticks == 0) {
10003eae:	2b00      	cmp	r3, #0
10003eb0:	d103      	bne.n	10003eba <z_tick_sleep+0x16>
	z_impl_k_yield();
10003eb2:	f7ff ffbb 	bl	10003e2c <z_impl_k_yield>
		k_yield();
		return 0;
10003eb6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10003eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10003eba:	1c4b      	adds	r3, r1, #1
10003ebc:	db2e      	blt.n	10003f1c <z_tick_sleep+0x78>
10003ebe:	1c4b      	adds	r3, r1, #1
10003ec0:	d101      	bne.n	10003ec6 <z_tick_sleep+0x22>
10003ec2:	1c83      	adds	r3, r0, #2
10003ec4:	d32a      	bcc.n	10003f1c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10003ec6:	f001 fecb 	bl	10005c60 <sys_clock_tick_get_32>
10003eca:	1827      	adds	r7, r4, r0
10003ecc:	f3ef 8310 	mrs	r3, PRIMASK
10003ed0:	b672      	cpsid	i
	pending_current = _current;
10003ed2:	4e14      	ldr	r6, [pc, #80]	; (10003f24 <z_tick_sleep+0x80>)
10003ed4:	9301      	str	r3, [sp, #4]
10003ed6:	68b0      	ldr	r0, [r6, #8]
10003ed8:	4b13      	ldr	r3, [pc, #76]	; (10003f28 <z_tick_sleep+0x84>)
10003eda:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10003edc:	f7ff fe74 	bl	10003bc8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10003ee0:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003ee2:	0022      	movs	r2, r4
10003ee4:	002b      	movs	r3, r5
10003ee6:	4911      	ldr	r1, [pc, #68]	; (10003f2c <z_tick_sleep+0x88>)
10003ee8:	3018      	adds	r0, #24
10003eea:	f000 f8ff 	bl	100040ec <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003eee:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10003ef0:	68b2      	ldr	r2, [r6, #8]
10003ef2:	9801      	ldr	r0, [sp, #4]
10003ef4:	7b51      	ldrb	r1, [r2, #13]
10003ef6:	430b      	orrs	r3, r1
10003ef8:	7353      	strb	r3, [r2, #13]
10003efa:	f7fe fa43 	bl	10002384 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10003efe:	f001 feaf 	bl	10005c60 <sys_clock_tick_get_32>
10003f02:	2300      	movs	r3, #0
10003f04:	003a      	movs	r2, r7
10003f06:	0004      	movs	r4, r0
10003f08:	001d      	movs	r5, r3
10003f0a:	1b12      	subs	r2, r2, r4
10003f0c:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10003f0e:	42ab      	cmp	r3, r5
10003f10:	dc02      	bgt.n	10003f18 <z_tick_sleep+0x74>
10003f12:	d1d0      	bne.n	10003eb6 <z_tick_sleep+0x12>
10003f14:	42aa      	cmp	r2, r5
10003f16:	d0ce      	beq.n	10003eb6 <z_tick_sleep+0x12>
		return ticks;
10003f18:	0010      	movs	r0, r2
10003f1a:	e7cd      	b.n	10003eb8 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003f1c:	2702      	movs	r7, #2
10003f1e:	427f      	negs	r7, r7
10003f20:	1b3f      	subs	r7, r7, r4
10003f22:	e7d3      	b.n	10003ecc <z_tick_sleep+0x28>
10003f24:	20000730 	.word	0x20000730
10003f28:	20000750 	.word	0x20000750
10003f2c:	10005ba9 	.word	0x10005ba9

10003f30 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10003f30:	b510      	push	{r4, lr}
10003f32:	000b      	movs	r3, r1
10003f34:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003f36:	1c42      	adds	r2, r0, #1
10003f38:	d107      	bne.n	10003f4a <z_impl_k_sleep+0x1a>
10003f3a:	3301      	adds	r3, #1
10003f3c:	d105      	bne.n	10003f4a <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10003f3e:	4b07      	ldr	r3, [pc, #28]	; (10003f5c <z_impl_k_sleep+0x2c>)
10003f40:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10003f42:	f7ff ff13 	bl	10003d6c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10003f46:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10003f48:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10003f4a:	0021      	movs	r1, r4
10003f4c:	f7ff ffaa 	bl	10003ea4 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10003f50:	220a      	movs	r2, #10
10003f52:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10003f54:	17c1      	asrs	r1, r0, #31
10003f56:	f7fc f9c1 	bl	100002dc <__aeabi_uldivmod>
	return ret;
10003f5a:	e7f5      	b.n	10003f48 <z_impl_k_sleep+0x18>
10003f5c:	20000730 	.word	0x20000730

10003f60 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10003f60:	4b01      	ldr	r3, [pc, #4]	; (10003f68 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10003f62:	6898      	ldr	r0, [r3, #8]
}
10003f64:	4770      	bx	lr
10003f66:	46c0      	nop			; (mov r8, r8)
10003f68:	20000730 	.word	0x20000730

10003f6c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10003f6c:	b570      	push	{r4, r5, r6, lr}
10003f6e:	0004      	movs	r4, r0
10003f70:	f3ef 8610 	mrs	r6, PRIMASK
10003f74:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10003f76:	7b03      	ldrb	r3, [r0, #12]
10003f78:	07db      	lsls	r3, r3, #31
10003f7a:	d508      	bpl.n	10003f8e <z_thread_abort+0x22>
	if (key != 0U) {
10003f7c:	2e00      	cmp	r6, #0
10003f7e:	d102      	bne.n	10003f86 <z_thread_abort+0x1a>
	__asm__ volatile(
10003f80:	b662      	cpsie	i
10003f82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10003f86:	2004      	movs	r0, #4
10003f88:	b662      	cpsie	i
10003f8a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10003f8c:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10003f8e:	2308      	movs	r3, #8
10003f90:	7b42      	ldrb	r2, [r0, #13]
10003f92:	421a      	tst	r2, r3
10003f94:	d005      	beq.n	10003fa2 <z_thread_abort+0x36>
	if (key != 0U) {
10003f96:	2e00      	cmp	r6, #0
10003f98:	d1f8      	bne.n	10003f8c <z_thread_abort+0x20>
	__asm__ volatile(
10003f9a:	b662      	cpsie	i
10003f9c:	f3bf 8f6f 	isb	sy
10003fa0:	e7f4      	b.n	10003f8c <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003fa2:	2120      	movs	r1, #32
10003fa4:	0010      	movs	r0, r2
10003fa6:	4388      	bics	r0, r1
10003fa8:	0001      	movs	r1, r0
10003faa:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10003fac:	b248      	sxtb	r0, r1
10003fae:	2800      	cmp	r0, #0
10003fb0:	db20      	blt.n	10003ff4 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003fb2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10003fb4:	68a3      	ldr	r3, [r4, #8]
10003fb6:	2b00      	cmp	r3, #0
10003fb8:	d002      	beq.n	10003fc0 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10003fba:	0020      	movs	r0, r4
10003fbc:	f001 fd86 	bl	10005acc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10003fc0:	0020      	movs	r0, r4
10003fc2:	3018      	adds	r0, #24
10003fc4:	f001 fe39 	bl	10005c3a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10003fc8:	0023      	movs	r3, r4
	return list->head == list;
10003fca:	6da5      	ldr	r5, [r4, #88]	; 0x58
10003fcc:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003fce:	429d      	cmp	r5, r3
10003fd0:	d001      	beq.n	10003fd6 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10003fd2:	2d00      	cmp	r5, #0
10003fd4:	d116      	bne.n	10004004 <z_thread_abort+0x98>
		update_cache(1);
10003fd6:	2001      	movs	r0, #1
10003fd8:	f7ff fd62 	bl	10003aa0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10003fdc:	4b10      	ldr	r3, [pc, #64]	; (10004020 <z_thread_abort+0xb4>)
10003fde:	689b      	ldr	r3, [r3, #8]
10003fe0:	42a3      	cmp	r3, r4
10003fe2:	d1d8      	bne.n	10003f96 <z_thread_abort+0x2a>
10003fe4:	f3ef 8305 	mrs	r3, IPSR
10003fe8:	2b00      	cmp	r3, #0
10003fea:	d1d4      	bne.n	10003f96 <z_thread_abort+0x2a>
10003fec:	0030      	movs	r0, r6
10003fee:	f7fe f9c9 	bl	10002384 <arch_swap>
	return ret;
10003ff2:	e7d0      	b.n	10003f96 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003ff4:	215f      	movs	r1, #95	; 0x5f
10003ff6:	400a      	ands	r2, r1
10003ff8:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003ffa:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003ffc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003ffe:	f001 fd5d 	bl	10005abc <sys_dlist_remove>
}
10004002:	e7d7      	b.n	10003fb4 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10004004:	0028      	movs	r0, r5
10004006:	f001 fd61 	bl	10005acc <unpend_thread_no_timeout>
1000400a:	0028      	movs	r0, r5
1000400c:	3018      	adds	r0, #24
1000400e:	f001 fe14 	bl	10005c3a <z_abort_timeout>
10004012:	2300      	movs	r3, #0
		ready_thread(thread);
10004014:	0028      	movs	r0, r5
10004016:	66eb      	str	r3, [r5, #108]	; 0x6c
10004018:	f7ff fda0 	bl	10003b5c <ready_thread>
1000401c:	e7d4      	b.n	10003fc8 <z_thread_abort+0x5c>
1000401e:	46c0      	nop			; (mov r8, r8)
10004020:	20000730 	.word	0x20000730

10004024 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10004024:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10004026:	4806      	ldr	r0, [pc, #24]	; (10004040 <z_data_copy+0x1c>)
10004028:	4a06      	ldr	r2, [pc, #24]	; (10004044 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000402a:	4907      	ldr	r1, [pc, #28]	; (10004048 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
1000402c:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000402e:	f001 fd22 	bl	10005a76 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10004032:	4a06      	ldr	r2, [pc, #24]	; (1000404c <z_data_copy+0x28>)
10004034:	4906      	ldr	r1, [pc, #24]	; (10004050 <z_data_copy+0x2c>)
10004036:	4807      	ldr	r0, [pc, #28]	; (10004054 <z_data_copy+0x30>)
10004038:	f001 fd1d 	bl	10005a76 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
1000403c:	bd10      	pop	{r4, pc}
1000403e:	46c0      	nop			; (mov r8, r8)
10004040:	20000000 	.word	0x20000000
10004044:	200000b8 	.word	0x200000b8
10004048:	10009ddc 	.word	0x10009ddc
1000404c:	00000000 	.word	0x00000000
10004050:	10009ddc 	.word	0x10009ddc
10004054:	20000000 	.word	0x20000000

10004058 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004058:	2000      	movs	r0, #0
{
1000405a:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
1000405c:	4b03      	ldr	r3, [pc, #12]	; (1000406c <elapsed+0x14>)
1000405e:	681b      	ldr	r3, [r3, #0]
10004060:	4283      	cmp	r3, r0
10004062:	d101      	bne.n	10004068 <elapsed+0x10>
10004064:	f7ff f80a 	bl	1000307c <sys_clock_elapsed>
}
10004068:	bd10      	pop	{r4, pc}
1000406a:	46c0      	nop			; (mov r8, r8)
1000406c:	2000075c 	.word	0x2000075c

10004070 <next_timeout>:

static int32_t next_timeout(void)
{
10004070:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10004072:	4b0e      	ldr	r3, [pc, #56]	; (100040ac <next_timeout+0x3c>)
10004074:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004076:	429e      	cmp	r6, r3
10004078:	d103      	bne.n	10004082 <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
1000407a:	f7ff ffed 	bl	10004058 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
1000407e:	480c      	ldr	r0, [pc, #48]	; (100040b0 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
10004080:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
10004082:	f7ff ffe9 	bl	10004058 <elapsed>
	if ((to == NULL) ||
10004086:	2e00      	cmp	r6, #0
10004088:	d0f9      	beq.n	1000407e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
1000408a:	6932      	ldr	r2, [r6, #16]
1000408c:	6973      	ldr	r3, [r6, #20]
1000408e:	0004      	movs	r4, r0
10004090:	17c5      	asrs	r5, r0, #31
10004092:	1b12      	subs	r2, r2, r4
10004094:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10004096:	2b00      	cmp	r3, #0
10004098:	dcf1      	bgt.n	1000407e <next_timeout+0xe>
1000409a:	d103      	bne.n	100040a4 <next_timeout+0x34>
1000409c:	2180      	movs	r1, #128	; 0x80
1000409e:	0609      	lsls	r1, r1, #24
100040a0:	428a      	cmp	r2, r1
100040a2:	d2ec      	bcs.n	1000407e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
100040a4:	43d8      	mvns	r0, r3
100040a6:	17c0      	asrs	r0, r0, #31
100040a8:	4010      	ands	r0, r2
	return ret;
100040aa:	e7e9      	b.n	10004080 <next_timeout+0x10>
100040ac:	20000044 	.word	0x20000044
100040b0:	7fffffff 	.word	0x7fffffff

100040b4 <remove_timeout>:
{
100040b4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
100040b6:	2800      	cmp	r0, #0
100040b8:	d00e      	beq.n	100040d8 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
100040ba:	4b0b      	ldr	r3, [pc, #44]	; (100040e8 <remove_timeout+0x34>)
100040bc:	685b      	ldr	r3, [r3, #4]
100040be:	4298      	cmp	r0, r3
100040c0:	d00a      	beq.n	100040d8 <remove_timeout+0x24>
100040c2:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
100040c4:	2900      	cmp	r1, #0
100040c6:	d007      	beq.n	100040d8 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
100040c8:	690a      	ldr	r2, [r1, #16]
100040ca:	694b      	ldr	r3, [r1, #20]
100040cc:	6904      	ldr	r4, [r0, #16]
100040ce:	6945      	ldr	r5, [r0, #20]
100040d0:	1912      	adds	r2, r2, r4
100040d2:	416b      	adcs	r3, r5
100040d4:	610a      	str	r2, [r1, #16]
100040d6:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
100040d8:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100040da:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
100040dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100040de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100040e0:	2300      	movs	r3, #0
100040e2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100040e4:	6043      	str	r3, [r0, #4]
}
100040e6:	bd30      	pop	{r4, r5, pc}
100040e8:	20000044 	.word	0x20000044

100040ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100040ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100040ee:	0004      	movs	r4, r0
100040f0:	0016      	movs	r6, r2
100040f2:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100040f4:	1c53      	adds	r3, r2, #1
100040f6:	d101      	bne.n	100040fc <z_add_timeout+0x10>
100040f8:	1c7b      	adds	r3, r7, #1
100040fa:	d057      	beq.n	100041ac <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
100040fc:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
100040fe:	f3ef 8310 	mrs	r3, PRIMASK
10004102:	b672      	cpsid	i
10004104:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10004106:	2f00      	cmp	r7, #0
10004108:	da23      	bge.n	10004152 <z_add_timeout+0x66>
1000410a:	1c7b      	adds	r3, r7, #1
1000410c:	d101      	bne.n	10004112 <z_add_timeout+0x26>
1000410e:	1cb3      	adds	r3, r6, #2
10004110:	d81f      	bhi.n	10004152 <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10004112:	4b2b      	ldr	r3, [pc, #172]	; (100041c0 <z_add_timeout+0xd4>)
10004114:	6818      	ldr	r0, [r3, #0]
10004116:	6859      	ldr	r1, [r3, #4]
10004118:	2202      	movs	r2, #2
1000411a:	4252      	negs	r2, r2
1000411c:	17d3      	asrs	r3, r2, #31
1000411e:	1a12      	subs	r2, r2, r0
10004120:	418b      	sbcs	r3, r1
10004122:	1b92      	subs	r2, r2, r6
10004124:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10004126:	2b00      	cmp	r3, #0
10004128:	dc04      	bgt.n	10004134 <z_add_timeout+0x48>
1000412a:	d101      	bne.n	10004130 <z_add_timeout+0x44>
1000412c:	2a00      	cmp	r2, #0
1000412e:	d101      	bne.n	10004134 <z_add_timeout+0x48>
10004130:	2201      	movs	r2, #1
10004132:	2300      	movs	r3, #0
	return list->head == list;
10004134:	4f23      	ldr	r7, [pc, #140]	; (100041c4 <z_add_timeout+0xd8>)
10004136:	6122      	str	r2, [r4, #16]
10004138:	6163      	str	r3, [r4, #20]
1000413a:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000413c:	42bd      	cmp	r5, r7
1000413e:	d100      	bne.n	10004142 <z_add_timeout+0x56>
10004140:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10004142:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10004144:	2d00      	cmp	r5, #0
10004146:	d10f      	bne.n	10004168 <z_add_timeout+0x7c>
	node->next = list;
10004148:	6027      	str	r7, [r4, #0]
	node->prev = tail;
1000414a:	6066      	str	r6, [r4, #4]
	tail->next = node;
1000414c:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000414e:	607c      	str	r4, [r7, #4]
}
10004150:	e01c      	b.n	1000418c <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
10004152:	f7ff ff81 	bl	10004058 <elapsed>
10004156:	2201      	movs	r2, #1
10004158:	2300      	movs	r3, #0
1000415a:	1992      	adds	r2, r2, r6
1000415c:	417b      	adcs	r3, r7
1000415e:	0006      	movs	r6, r0
10004160:	17c7      	asrs	r7, r0, #31
10004162:	1992      	adds	r2, r2, r6
10004164:	417b      	adcs	r3, r7
10004166:	e7e5      	b.n	10004134 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10004168:	6928      	ldr	r0, [r5, #16]
1000416a:	6969      	ldr	r1, [r5, #20]
1000416c:	6922      	ldr	r2, [r4, #16]
1000416e:	6963      	ldr	r3, [r4, #20]
10004170:	4299      	cmp	r1, r3
10004172:	dc02      	bgt.n	1000417a <z_add_timeout+0x8e>
10004174:	d11b      	bne.n	100041ae <z_add_timeout+0xc2>
10004176:	4290      	cmp	r0, r2
10004178:	d919      	bls.n	100041ae <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
1000417a:	1a80      	subs	r0, r0, r2
1000417c:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
1000417e:	686b      	ldr	r3, [r5, #4]
10004180:	6128      	str	r0, [r5, #16]
10004182:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10004184:	6063      	str	r3, [r4, #4]
	node->next = successor;
10004186:	6025      	str	r5, [r4, #0]
	prev->next = node;
10004188:	601c      	str	r4, [r3, #0]
	successor->prev = node;
1000418a:	606c      	str	r4, [r5, #4]
	return list->head == list;
1000418c:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000418e:	42bb      	cmp	r3, r7
10004190:	d006      	beq.n	100041a0 <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10004192:	429c      	cmp	r4, r3
10004194:	d104      	bne.n	100041a0 <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
10004196:	f7ff ff6b 	bl	10004070 <next_timeout>
1000419a:	2100      	movs	r1, #0
1000419c:	f7fe fef6 	bl	10002f8c <sys_clock_set_timeout>
	if (key != 0U) {
100041a0:	9b01      	ldr	r3, [sp, #4]
100041a2:	2b00      	cmp	r3, #0
100041a4:	d102      	bne.n	100041ac <z_add_timeout+0xc0>
	__asm__ volatile(
100041a6:	b662      	cpsie	i
100041a8:	f3bf 8f6f 	isb	sy
		}
	}
}
100041ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
100041ae:	1a12      	subs	r2, r2, r0
100041b0:	418b      	sbcs	r3, r1
100041b2:	6122      	str	r2, [r4, #16]
100041b4:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
100041b6:	42b5      	cmp	r5, r6
100041b8:	d0c6      	beq.n	10004148 <z_add_timeout+0x5c>
100041ba:	682d      	ldr	r5, [r5, #0]
100041bc:	e7c2      	b.n	10004144 <z_add_timeout+0x58>
100041be:	46c0      	nop			; (mov r8, r8)
100041c0:	20000660 	.word	0x20000660
100041c4:	20000044 	.word	0x20000044

100041c8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
100041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100041ca:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
100041cc:	f3ef 8310 	mrs	r3, PRIMASK
100041d0:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
100041d2:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
100041d4:	4b30      	ldr	r3, [pc, #192]	; (10004298 <sys_clock_announce+0xd0>)
100041d6:	6018      	str	r0, [r3, #0]
	return list->head == list;
100041d8:	4b30      	ldr	r3, [pc, #192]	; (1000429c <sys_clock_announce+0xd4>)
100041da:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100041dc:	429c      	cmp	r4, r3
100041de:	d100      	bne.n	100041e2 <sys_clock_announce+0x1a>
100041e0:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
100041e2:	4b2f      	ldr	r3, [pc, #188]	; (100042a0 <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
100041e4:	4d2c      	ldr	r5, [pc, #176]	; (10004298 <sys_clock_announce+0xd0>)
		curr_tick += dt;
100041e6:	9303      	str	r3, [sp, #12]
100041e8:	6818      	ldr	r0, [r3, #0]
100041ea:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
100041ec:	682b      	ldr	r3, [r5, #0]
100041ee:	469c      	mov	ip, r3
100041f0:	2c00      	cmp	r4, #0
100041f2:	d039      	beq.n	10004268 <sys_clock_announce+0xa0>
100041f4:	6962      	ldr	r2, [r4, #20]
100041f6:	6926      	ldr	r6, [r4, #16]
100041f8:	17db      	asrs	r3, r3, #31
100041fa:	429a      	cmp	r2, r3
100041fc:	dc02      	bgt.n	10004204 <sys_clock_announce+0x3c>
100041fe:	d10a      	bne.n	10004216 <sys_clock_announce+0x4e>
10004200:	4566      	cmp	r6, ip
10004202:	d908      	bls.n	10004216 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10004204:	001f      	movs	r7, r3
10004206:	6922      	ldr	r2, [r4, #16]
10004208:	6963      	ldr	r3, [r4, #20]
1000420a:	4666      	mov	r6, ip
1000420c:	1b92      	subs	r2, r2, r6
1000420e:	41bb      	sbcs	r3, r7
10004210:	6122      	str	r2, [r4, #16]
10004212:	6163      	str	r3, [r4, #20]
10004214:	e028      	b.n	10004268 <sys_clock_announce+0xa0>
		curr_tick += dt;
10004216:	17f3      	asrs	r3, r6, #31
10004218:	9600      	str	r6, [sp, #0]
1000421a:	9301      	str	r3, [sp, #4]
1000421c:	9a00      	ldr	r2, [sp, #0]
1000421e:	9b01      	ldr	r3, [sp, #4]
10004220:	1880      	adds	r0, r0, r2
10004222:	4159      	adcs	r1, r3
		t->dticks = 0;
10004224:	2300      	movs	r3, #0
10004226:	2200      	movs	r2, #0
		curr_tick += dt;
10004228:	4f1d      	ldr	r7, [pc, #116]	; (100042a0 <sys_clock_announce+0xd8>)
		t->dticks = 0;
1000422a:	6122      	str	r2, [r4, #16]
1000422c:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
1000422e:	6038      	str	r0, [r7, #0]
10004230:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
10004232:	0020      	movs	r0, r4
10004234:	f7ff ff3e 	bl	100040b4 <remove_timeout>
	if (key != 0U) {
10004238:	9b02      	ldr	r3, [sp, #8]
1000423a:	2b00      	cmp	r3, #0
1000423c:	d102      	bne.n	10004244 <sys_clock_announce+0x7c>
	__asm__ volatile(
1000423e:	b662      	cpsie	i
10004240:	f3bf 8f6f 	isb	sy
		t->fn(t);
10004244:	0020      	movs	r0, r4
10004246:	68a3      	ldr	r3, [r4, #8]
10004248:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000424a:	f3ef 8310 	mrs	r3, PRIMASK
1000424e:	b672      	cpsid	i
10004250:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
10004252:	4b11      	ldr	r3, [pc, #68]	; (10004298 <sys_clock_announce+0xd0>)
10004254:	681a      	ldr	r2, [r3, #0]
10004256:	1b92      	subs	r2, r2, r6
10004258:	601a      	str	r2, [r3, #0]
	return list->head == list;
1000425a:	4b10      	ldr	r3, [pc, #64]	; (1000429c <sys_clock_announce+0xd4>)
1000425c:	4694      	mov	ip, r2
1000425e:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004260:	429c      	cmp	r4, r3
10004262:	d1be      	bne.n	100041e2 <sys_clock_announce+0x1a>
		curr_tick += dt;
10004264:	6838      	ldr	r0, [r7, #0]
10004266:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10004268:	4662      	mov	r2, ip
1000426a:	17d3      	asrs	r3, r2, #31
1000426c:	1812      	adds	r2, r2, r0
1000426e:	414b      	adcs	r3, r1
	announce_remaining = 0;
10004270:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
10004272:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
10004274:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
10004276:	600a      	str	r2, [r1, #0]
10004278:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
1000427a:	f7ff fef9 	bl	10004070 <next_timeout>
1000427e:	0021      	movs	r1, r4
10004280:	f7fe fe84 	bl	10002f8c <sys_clock_set_timeout>
	if (key != 0U) {
10004284:	9b02      	ldr	r3, [sp, #8]
10004286:	42a3      	cmp	r3, r4
10004288:	d102      	bne.n	10004290 <sys_clock_announce+0xc8>
	__asm__ volatile(
1000428a:	b662      	cpsie	i
1000428c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
10004290:	f7ff fce6 	bl	10003c60 <z_time_slice>
#endif
}
10004294:	b005      	add	sp, #20
10004296:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004298:	2000075c 	.word	0x2000075c
1000429c:	20000044 	.word	0x20000044
100042a0:	20000660 	.word	0x20000660

100042a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100042a4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100042a6:	f3ef 8410 	mrs	r4, PRIMASK
100042aa:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
100042ac:	f7ff fed4 	bl	10004058 <elapsed>
100042b0:	0002      	movs	r2, r0
100042b2:	4906      	ldr	r1, [pc, #24]	; (100042cc <sys_clock_tick_get+0x28>)
100042b4:	17c3      	asrs	r3, r0, #31
100042b6:	6808      	ldr	r0, [r1, #0]
100042b8:	6849      	ldr	r1, [r1, #4]
100042ba:	1880      	adds	r0, r0, r2
100042bc:	4159      	adcs	r1, r3
	if (key != 0U) {
100042be:	2c00      	cmp	r4, #0
100042c0:	d102      	bne.n	100042c8 <sys_clock_tick_get+0x24>
	__asm__ volatile(
100042c2:	b662      	cpsie	i
100042c4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
100042c8:	bd10      	pop	{r4, pc}
100042ca:	46c0      	nop			; (mov r8, r8)
100042cc:	20000660 	.word	0x20000660

100042d0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
100042d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100042d2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100042d4:	f3ef 8510 	mrs	r5, PRIMASK
100042d8:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
100042da:	6803      	ldr	r3, [r0, #0]
100042dc:	9501      	str	r5, [sp, #4]
100042de:	2b00      	cmp	r3, #0
100042e0:	d005      	beq.n	100042ee <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
100042e2:	2d00      	cmp	r5, #0
100042e4:	d152      	bne.n	1000438c <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
100042e6:	b662      	cpsie	i
100042e8:	f3bf 8f6f 	isb	sy
100042ec:	e04e      	b.n	1000438c <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
100042ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
100042f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
100042f2:	2100      	movs	r1, #0
100042f4:	2001      	movs	r0, #1
100042f6:	1880      	adds	r0, r0, r2
100042f8:	4159      	adcs	r1, r3
100042fa:	2900      	cmp	r1, #0
100042fc:	d101      	bne.n	10004302 <z_timer_expiration_handler+0x32>
100042fe:	2801      	cmp	r0, #1
10004300:	d929      	bls.n	10004356 <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
10004302:	2b00      	cmp	r3, #0
10004304:	dc04      	bgt.n	10004310 <z_timer_expiration_handler+0x40>
10004306:	d101      	bne.n	1000430c <z_timer_expiration_handler+0x3c>
10004308:	2a00      	cmp	r2, #0
1000430a:	d101      	bne.n	10004310 <z_timer_expiration_handler+0x40>
1000430c:	2201      	movs	r2, #1
1000430e:	2300      	movs	r3, #0
10004310:	2601      	movs	r6, #1
10004312:	4276      	negs	r6, r6
10004314:	17f7      	asrs	r7, r6, #31
10004316:	18b6      	adds	r6, r6, r2
10004318:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
1000431a:	f001 fca5 	bl	10005c68 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000431e:	2201      	movs	r2, #1
10004320:	2300      	movs	r3, #0
10004322:	1880      	adds	r0, r0, r2
10004324:	4159      	adcs	r1, r3
10004326:	1980      	adds	r0, r0, r6
10004328:	4179      	adcs	r1, r7
1000432a:	2900      	cmp	r1, #0
1000432c:	dc02      	bgt.n	10004334 <z_timer_expiration_handler+0x64>
1000432e:	d12e      	bne.n	1000438e <z_timer_expiration_handler+0xbe>
10004330:	2800      	cmp	r0, #0
10004332:	d02c      	beq.n	1000438e <z_timer_expiration_handler+0xbe>
10004334:	f001 fc98 	bl	10005c68 <z_impl_k_uptime_ticks>
10004338:	2201      	movs	r2, #1
1000433a:	2300      	movs	r3, #0
1000433c:	1880      	adds	r0, r0, r2
1000433e:	4159      	adcs	r1, r3
10004340:	2202      	movs	r2, #2
10004342:	4252      	negs	r2, r2
10004344:	17d3      	asrs	r3, r2, #31
10004346:	1980      	adds	r0, r0, r6
10004348:	4179      	adcs	r1, r7
1000434a:	1a12      	subs	r2, r2, r0
1000434c:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000434e:	0020      	movs	r0, r4
10004350:	4918      	ldr	r1, [pc, #96]	; (100043b4 <z_timer_expiration_handler+0xe4>)
10004352:	f7ff fecb 	bl	100040ec <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
10004356:	6b23      	ldr	r3, [r4, #48]	; 0x30
10004358:	3301      	adds	r3, #1
1000435a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
1000435c:	6a23      	ldr	r3, [r4, #32]
1000435e:	2b00      	cmp	r3, #0
10004360:	d00b      	beq.n	1000437a <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
10004362:	2d00      	cmp	r5, #0
10004364:	d102      	bne.n	1000436c <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
10004366:	b662      	cpsie	i
10004368:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
1000436c:	0020      	movs	r0, r4
1000436e:	6a23      	ldr	r3, [r4, #32]
10004370:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10004372:	f3ef 8310 	mrs	r3, PRIMASK
10004376:	b672      	cpsid	i
10004378:	9301      	str	r3, [sp, #4]
	return list->head == list;
1000437a:	69a5      	ldr	r5, [r4, #24]
1000437c:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000437e:	42a5      	cmp	r5, r4
10004380:	d001      	beq.n	10004386 <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
10004382:	2d00      	cmp	r5, #0
10004384:	d107      	bne.n	10004396 <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
10004386:	9b01      	ldr	r3, [sp, #4]
10004388:	2b00      	cmp	r3, #0
1000438a:	d0ac      	beq.n	100042e6 <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
1000438c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000438e:	2202      	movs	r2, #2
10004390:	4252      	negs	r2, r2
10004392:	17d3      	asrs	r3, r2, #31
10004394:	e7db      	b.n	1000434e <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
10004396:	0028      	movs	r0, r5
10004398:	f001 fbd8 	bl	10005b4c <z_unpend_thread_no_timeout>
1000439c:	2300      	movs	r3, #0
1000439e:	66eb      	str	r3, [r5, #108]	; 0x6c
100043a0:	9b01      	ldr	r3, [sp, #4]
100043a2:	2b00      	cmp	r3, #0
100043a4:	d102      	bne.n	100043ac <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
100043a6:	b662      	cpsie	i
100043a8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
100043ac:	0028      	movs	r0, r5
100043ae:	f001 fbc1 	bl	10005b34 <z_ready_thread>
100043b2:	e7eb      	b.n	1000438c <z_timer_expiration_handler+0xbc>
100043b4:	100042d1 	.word	0x100042d1

100043b8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
100043b8:	b570      	push	{r4, r5, r6, lr}
100043ba:	0006      	movs	r6, r0
100043bc:	0014      	movs	r4, r2
100043be:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
100043c0:	1c51      	adds	r1, r2, #1
100043c2:	d101      	bne.n	100043c8 <z_impl_k_timer_start+0x10>
100043c4:	1c59      	adds	r1, r3, #1
100043c6:	d022      	beq.n	1000440e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
100043c8:	2b00      	cmp	r3, #0
100043ca:	da03      	bge.n	100043d4 <z_impl_k_timer_start+0x1c>
100043cc:	1c59      	adds	r1, r3, #1
100043ce:	d10f      	bne.n	100043f0 <z_impl_k_timer_start+0x38>
100043d0:	1c91      	adds	r1, r2, #2
100043d2:	d90d      	bls.n	100043f0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
100043d4:	0014      	movs	r4, r2
100043d6:	1e1d      	subs	r5, r3, #0
100043d8:	dc05      	bgt.n	100043e6 <z_impl_k_timer_start+0x2e>
100043da:	2b00      	cmp	r3, #0
100043dc:	d101      	bne.n	100043e2 <z_impl_k_timer_start+0x2a>
100043de:	2a00      	cmp	r2, #0
100043e0:	d101      	bne.n	100043e6 <z_impl_k_timer_start+0x2e>
100043e2:	2401      	movs	r4, #1
100043e4:	2500      	movs	r5, #0
100043e6:	2201      	movs	r2, #1
100043e8:	4252      	negs	r2, r2
100043ea:	17d3      	asrs	r3, r2, #31
100043ec:	18a4      	adds	r4, r4, r2
100043ee:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
100043f0:	0030      	movs	r0, r6
100043f2:	f001 fc22 	bl	10005c3a <z_abort_timeout>
	timer->period = period;
100043f6:	9a04      	ldr	r2, [sp, #16]
100043f8:	9b05      	ldr	r3, [sp, #20]
100043fa:	62b2      	str	r2, [r6, #40]	; 0x28
100043fc:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
100043fe:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10004400:	0022      	movs	r2, r4
	timer->status = 0U;
10004402:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10004404:	0030      	movs	r0, r6
10004406:	002b      	movs	r3, r5
10004408:	4901      	ldr	r1, [pc, #4]	; (10004410 <z_impl_k_timer_start+0x58>)
1000440a:	f7ff fe6f 	bl	100040ec <z_add_timeout>
		     duration);
}
1000440e:	bd70      	pop	{r4, r5, r6, pc}
10004410:	100042d1 	.word	0x100042d1

10004414 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
10004414:	b510      	push	{r4, lr}
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
10004416:	4b03      	ldr	r3, [pc, #12]	; (10004424 <k_aligned_alloc+0x10>)
{
10004418:	000a      	movs	r2, r1
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
1000441a:	0001      	movs	r1, r0
1000441c:	0018      	movs	r0, r3
1000441e:	f001 fc95 	bl	10005d4c <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
10004422:	bd10      	pop	{r4, pc}
10004424:	20000094 	.word	0x20000094

10004428 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
10004428:	4b01      	ldr	r3, [pc, #4]	; (10004430 <k_thread_system_pool_assign+0x8>)
1000442a:	6643      	str	r3, [r0, #100]	; 0x64
}
1000442c:	4770      	bx	lr
1000442e:	46c0      	nop			; (mov r8, r8)
10004430:	20000094 	.word	0x20000094

10004434 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10004434:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10004436:	4802      	ldr	r0, [pc, #8]	; (10004440 <boot_banner+0xc>)
10004438:	f000 f8cd 	bl	100045d6 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
1000443c:	bd10      	pop	{r4, pc}
1000443e:	46c0      	nop			; (mov r8, r8)
10004440:	10009d9a 	.word	0x10009d9a

10004444 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
10004444:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
10004446:	4c06      	ldr	r4, [pc, #24]	; (10004460 <statics_init+0x1c>)
10004448:	4b06      	ldr	r3, [pc, #24]	; (10004464 <statics_init+0x20>)
1000444a:	429c      	cmp	r4, r3
1000444c:	d301      	bcc.n	10004452 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
1000444e:	2000      	movs	r0, #0
10004450:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
10004452:	0020      	movs	r0, r4
10004454:	68a2      	ldr	r2, [r4, #8]
10004456:	6861      	ldr	r1, [r4, #4]
10004458:	f001 fc94 	bl	10005d84 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
1000445c:	3414      	adds	r4, #20
1000445e:	e7f3      	b.n	10004448 <statics_init+0x4>
10004460:	20000094 	.word	0x20000094
10004464:	200000a8 	.word	0x200000a8

10004468 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
10004468:	b5f0      	push	{r4, r5, r6, r7, lr}
1000446a:	b087      	sub	sp, #28
1000446c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000446e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10004470:	9104      	str	r1, [sp, #16]
10004472:	0005      	movs	r5, r0
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
10004474:	0021      	movs	r1, r4
10004476:	0030      	movs	r0, r6
{
10004478:	9205      	str	r2, [sp, #20]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
1000447a:	f001 fbf9 	bl	10005c70 <sys_clock_timeout_end_calc>
1000447e:	9002      	str	r0, [sp, #8]
10004480:	9103      	str	r1, [sp, #12]
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
10004482:	3601      	adds	r6, #1
10004484:	d106      	bne.n	10004494 <k_heap_aligned_alloc+0x2c>
10004486:	3401      	adds	r4, #1
10004488:	d104      	bne.n	10004494 <k_heap_aligned_alloc+0x2c>
1000448a:	2301      	movs	r3, #1
1000448c:	4c18      	ldr	r4, [pc, #96]	; (100044f0 <k_heap_aligned_alloc+0x88>)
1000448e:	425b      	negs	r3, r3
10004490:	9302      	str	r3, [sp, #8]
10004492:	9403      	str	r4, [sp, #12]

	k_spinlock_key_t key = k_spin_lock(&h->lock);
10004494:	002f      	movs	r7, r5
10004496:	3714      	adds	r7, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10004498:	f3ef 8410 	mrs	r4, PRIMASK
1000449c:	b672      	cpsid	i
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
1000449e:	9a05      	ldr	r2, [sp, #20]
100044a0:	9904      	ldr	r1, [sp, #16]
100044a2:	0028      	movs	r0, r5
100044a4:	f000 fa21 	bl	100048ea <sys_heap_aligned_alloc>
100044a8:	0006      	movs	r6, r0

		now = sys_clock_tick_get();
100044aa:	f7ff fefb 	bl	100042a4 <sys_clock_tick_get>
100044ae:	0002      	movs	r2, r0
100044b0:	000b      	movs	r3, r1
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
100044b2:	2e00      	cmp	r6, #0
100044b4:	d004      	beq.n	100044c0 <k_heap_aligned_alloc+0x58>
	if (key != 0U) {
100044b6:	2c00      	cmp	r4, #0
100044b8:	d016      	beq.n	100044e8 <k_heap_aligned_alloc+0x80>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
100044ba:	0030      	movs	r0, r6
100044bc:	b007      	add	sp, #28
100044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
100044c0:	9802      	ldr	r0, [sp, #8]
100044c2:	9903      	ldr	r1, [sp, #12]
100044c4:	1a80      	subs	r0, r0, r2
100044c6:	4199      	sbcs	r1, r3
100044c8:	0002      	movs	r2, r0
100044ca:	1e0b      	subs	r3, r1, #0
100044cc:	dc03      	bgt.n	100044d6 <k_heap_aligned_alloc+0x6e>
100044ce:	2900      	cmp	r1, #0
100044d0:	d1f1      	bne.n	100044b6 <k_heap_aligned_alloc+0x4e>
100044d2:	2800      	cmp	r0, #0
100044d4:	d0ef      	beq.n	100044b6 <k_heap_aligned_alloc+0x4e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
100044d6:	9200      	str	r2, [sp, #0]
100044d8:	9301      	str	r3, [sp, #4]
100044da:	002a      	movs	r2, r5
100044dc:	0021      	movs	r1, r4
100044de:	0038      	movs	r0, r7
100044e0:	320c      	adds	r2, #12
100044e2:	f7ff fbfb 	bl	10003cdc <z_pend_curr>
100044e6:	e7d7      	b.n	10004498 <k_heap_aligned_alloc+0x30>
	__asm__ volatile(
100044e8:	b662      	cpsie	i
100044ea:	f3bf 8f6f 	isb	sy
	return ret;
100044ee:	e7e4      	b.n	100044ba <k_heap_aligned_alloc+0x52>
100044f0:	7fffffff 	.word	0x7fffffff

100044f4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100044f4:	4770      	bx	lr

100044f6 <cbpprintf_external>:
{
100044f6:	b5f0      	push	{r4, r5, r6, r7, lr}
100044f8:	b085      	sub	sp, #20
100044fa:	000d      	movs	r5, r1
100044fc:	1e1c      	subs	r4, r3, #0
100044fe:	9002      	str	r0, [sp, #8]
10004500:	9203      	str	r2, [sp, #12]
	if (buf == NULL) {
10004502:	d029      	beq.n	10004558 <cbpprintf_external+0x62>
	for (i = 0; i < s_nbr; i++) {
10004504:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
10004506:	785b      	ldrb	r3, [r3, #1]
10004508:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
1000450a:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
1000450c:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000450e:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
10004510:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004512:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
10004514:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004516:	18c0      	adds	r0, r0, r3
10004518:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
1000451a:	9b01      	ldr	r3, [sp, #4]
1000451c:	429e      	cmp	r6, r3
1000451e:	d310      	bcc.n	10004542 <cbpprintf_external+0x4c>
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004520:	7962      	ldrb	r2, [r4, #5]
10004522:	7923      	ldrb	r3, [r4, #4]
10004524:	0212      	lsls	r2, r2, #8
10004526:	431a      	orrs	r2, r3
10004528:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
1000452a:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000452c:	041b      	lsls	r3, r3, #16
1000452e:	4313      	orrs	r3, r2
10004530:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
10004532:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004534:	0612      	lsls	r2, r2, #24
10004536:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10004538:	0023      	movs	r3, r4
1000453a:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
1000453c:	47a8      	blx	r5
}
1000453e:	b005      	add	sp, #20
10004540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
10004542:	7803      	ldrb	r3, [r0, #0]
10004544:	1c47      	adds	r7, r0, #1
		*ps = s;
10004546:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
10004548:	0038      	movs	r0, r7
		*ps = s;
1000454a:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
1000454c:	f000 fe06 	bl	1000515c <strlen>
10004550:	3001      	adds	r0, #1
10004552:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
10004554:	3601      	adds	r6, #1
10004556:	e7e0      	b.n	1000451a <cbpprintf_external+0x24>
		return -EINVAL;
10004558:	2016      	movs	r0, #22
1000455a:	4240      	negs	r0, r0
1000455c:	e7ef      	b.n	1000453e <cbpprintf_external+0x48>

1000455e <is_ptr>:
{
1000455e:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
10004560:	2400      	movs	r4, #0
10004562:	0002      	movs	r2, r0
			mod = !mod;
10004564:	2501      	movs	r5, #1
	bool mod = false;
10004566:	0020      	movs	r0, r4
	while ((c = *fmt++) != '\0') {
10004568:	7813      	ldrb	r3, [r2, #0]
1000456a:	2b00      	cmp	r3, #0
1000456c:	d101      	bne.n	10004572 <is_ptr+0x14>
					return false;
1000456e:	0018      	movs	r0, r3
10004570:	e00a      	b.n	10004588 <is_ptr+0x2a>
		if (mod) {
10004572:	2800      	cmp	r0, #0
10004574:	d013      	beq.n	1000459e <is_ptr+0x40>
			if (cnt == n) {
10004576:	428c      	cmp	r4, r1
10004578:	d107      	bne.n	1000458a <is_ptr+0x2c>
				if (c == 'p') {
1000457a:	2b70      	cmp	r3, #112	; 0x70
1000457c:	d004      	beq.n	10004588 <is_ptr+0x2a>
				} else if (is_fmt_spec(c)) {
1000457e:	001e      	movs	r6, r3
10004580:	3e40      	subs	r6, #64	; 0x40
10004582:	2e3a      	cmp	r6, #58	; 0x3a
10004584:	d80b      	bhi.n	1000459e <is_ptr+0x40>
					return false;
10004586:	2000      	movs	r0, #0
}
10004588:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
1000458a:	001e      	movs	r6, r3
1000458c:	3e40      	subs	r6, #64	; 0x40
1000458e:	2e3a      	cmp	r6, #58	; 0x3a
10004590:	d805      	bhi.n	1000459e <is_ptr+0x40>
	while ((c = *fmt++) != '\0') {
10004592:	7853      	ldrb	r3, [r2, #1]
10004594:	3201      	adds	r2, #1
				cnt++;
10004596:	3401      	adds	r4, #1
	while ((c = *fmt++) != '\0') {
10004598:	2b00      	cmp	r3, #0
1000459a:	d0e8      	beq.n	1000456e <is_ptr+0x10>
1000459c:	2000      	movs	r0, #0
		if (c == '%') {
1000459e:	2b25      	cmp	r3, #37	; 0x25
100045a0:	d100      	bne.n	100045a4 <is_ptr+0x46>
			mod = !mod;
100045a2:	4068      	eors	r0, r5
100045a4:	3201      	adds	r2, #1
100045a6:	e7df      	b.n	10004568 <is_ptr+0xa>

100045a8 <arch_printk_char_out>:
}
100045a8:	2000      	movs	r0, #0
100045aa:	4770      	bx	lr

100045ac <str_out>:
	if (ctx->str == NULL || ctx->count >= ctx->max) {
100045ac:	688a      	ldr	r2, [r1, #8]
100045ae:	680b      	ldr	r3, [r1, #0]
{
100045b0:	b530      	push	{r4, r5, lr}
		ctx->str[ctx->count++] = '\0';
100045b2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
100045b4:	2b00      	cmp	r3, #0
100045b6:	d002      	beq.n	100045be <str_out+0x12>
100045b8:	684c      	ldr	r4, [r1, #4]
100045ba:	4294      	cmp	r4, r2
100045bc:	dc01      	bgt.n	100045c2 <str_out+0x16>
		ctx->count++;
100045be:	608d      	str	r5, [r1, #8]
}
100045c0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
100045c2:	3c01      	subs	r4, #1
		ctx->str[ctx->count++] = '\0';
100045c4:	189b      	adds	r3, r3, r2
100045c6:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
100045c8:	4294      	cmp	r4, r2
100045ca:	d102      	bne.n	100045d2 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
100045cc:	2200      	movs	r2, #0
100045ce:	701a      	strb	r2, [r3, #0]
100045d0:	e7f6      	b.n	100045c0 <str_out+0x14>
		ctx->str[ctx->count++] = c;
100045d2:	7018      	strb	r0, [r3, #0]
100045d4:	e7f4      	b.n	100045c0 <str_out+0x14>

100045d6 <printk>:
{
100045d6:	b40f      	push	{r0, r1, r2, r3}
100045d8:	b507      	push	{r0, r1, r2, lr}
100045da:	a904      	add	r1, sp, #16
100045dc:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
100045de:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
100045e0:	f000 fd23 	bl	1000502a <z_log_vprintk>
}
100045e4:	b003      	add	sp, #12
100045e6:	bc08      	pop	{r3}
100045e8:	b004      	add	sp, #16
100045ea:	4718      	bx	r3

100045ec <snprintk>:
{
100045ec:	b40c      	push	{r2, r3}
100045ee:	b507      	push	{r0, r1, r2, lr}
100045f0:	ab04      	add	r3, sp, #16
100045f2:	cb04      	ldmia	r3!, {r2}
	va_start(ap, fmt);
100045f4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
100045f6:	f7fc fb77 	bl	10000ce8 <vsnprintk>
}
100045fa:	b003      	add	sp, #12
100045fc:	bc08      	pop	{r3}
100045fe:	b002      	add	sp, #8
10004600:	4718      	bx	r3

10004602 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10004602:	b510      	push	{r4, lr}
10004604:	0004      	movs	r4, r0
10004606:	0008      	movs	r0, r1
10004608:	0011      	movs	r1, r2
1000460a:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000460c:	47a0      	blx	r4
	return z_impl_z_current_get();
1000460e:	f7ff fca7 	bl	10003f60 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10004612:	f7fe f835 	bl	10002680 <z_impl_k_thread_abort>

10004616 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10004616:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
10004618:	00c9      	lsls	r1, r1, #3
1000461a:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000461c:	6880      	ldr	r0, [r0, #8]
1000461e:	021b      	lsls	r3, r3, #8
10004620:	4298      	cmp	r0, r3
10004622:	d302      	bcc.n	1000462a <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
10004624:	0092      	lsls	r2, r2, #2
10004626:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
10004628:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
1000462a:	0052      	lsls	r2, r2, #1
1000462c:	5a50      	ldrh	r0, [r2, r1]
1000462e:	e7fb      	b.n	10004628 <chunk_field+0x12>

10004630 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
10004630:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10004632:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10004634:	00c9      	lsls	r1, r1, #3
10004636:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004638:	6880      	ldr	r0, [r0, #8]
1000463a:	0224      	lsls	r4, r4, #8
1000463c:	42a0      	cmp	r0, r4
1000463e:	d302      	bcc.n	10004646 <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
10004640:	0092      	lsls	r2, r2, #2
10004642:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
10004644:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
10004646:	0052      	lsls	r2, r2, #1
10004648:	5253      	strh	r3, [r2, r1]
}
1000464a:	e7fb      	b.n	10004644 <chunk_set+0x14>

1000464c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
1000464c:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000464e:	2201      	movs	r2, #1
10004650:	f7ff ffe1 	bl	10004616 <chunk_field>
10004654:	0840      	lsrs	r0, r0, #1
}
10004656:	bd10      	pop	{r4, pc}

10004658 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10004658:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000465a:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000465c:	00c9      	lsls	r1, r1, #3
1000465e:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004660:	6880      	ldr	r0, [r0, #8]
10004662:	2301      	movs	r3, #1
10004664:	0224      	lsls	r4, r4, #8
10004666:	42a0      	cmp	r0, r4
10004668:	d308      	bcc.n	1000467c <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000466a:	6848      	ldr	r0, [r1, #4]
		if (used) {
1000466c:	2a00      	cmp	r2, #0
1000466e:	d002      	beq.n	10004676 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10004670:	4303      	orrs	r3, r0
10004672:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10004674:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004676:	4398      	bics	r0, r3
10004678:	6048      	str	r0, [r1, #4]
1000467a:	e7fb      	b.n	10004674 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000467c:	8848      	ldrh	r0, [r1, #2]
		if (used) {
1000467e:	2a00      	cmp	r2, #0
10004680:	d002      	beq.n	10004688 <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10004682:	4303      	orrs	r3, r0
10004684:	804b      	strh	r3, [r1, #2]
10004686:	e7f5      	b.n	10004674 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004688:	4398      	bics	r0, r3
1000468a:	8048      	strh	r0, [r1, #2]
}
1000468c:	e7f2      	b.n	10004674 <set_chunk_used+0x1c>

1000468e <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
1000468e:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
10004690:	0053      	lsls	r3, r2, #1
10004692:	2201      	movs	r2, #1
10004694:	f7ff ffcc 	bl	10004630 <chunk_set>
}
10004698:	bd10      	pop	{r4, pc}

1000469a <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
1000469a:	2280      	movs	r2, #128	; 0x80
 * Here "closest" is only meaningful in the context of sys_heap_aligned_alloc()
 * where wanted alignment might not always correspond to a chunk header
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
1000469c:	b510      	push	{r4, lr}
1000469e:	6884      	ldr	r4, [r0, #8]
100046a0:	2304      	movs	r3, #4
100046a2:	0212      	lsls	r2, r2, #8
100046a4:	4294      	cmp	r4, r2
100046a6:	d300      	bcc.n	100046aa <mem_to_chunkid+0x10>
100046a8:	18db      	adds	r3, r3, r3
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
100046aa:	1ac9      	subs	r1, r1, r3
100046ac:	1a08      	subs	r0, r1, r0
100046ae:	08c0      	lsrs	r0, r0, #3
}
100046b0:	bd10      	pop	{r4, pc}

100046b2 <bucket_idx.isra.0>:
100046b2:	2280      	movs	r2, #128	; 0x80
100046b4:	2304      	movs	r3, #4
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
100046b6:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
100046b8:	0212      	lsls	r2, r2, #8
100046ba:	4290      	cmp	r0, r2
100046bc:	d300      	bcc.n	100046c0 <bucket_idx.isra.0+0xe>
100046be:	18db      	adds	r3, r3, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
100046c0:	3308      	adds	r3, #8
100046c2:	08db      	lsrs	r3, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
100046c4:	3101      	adds	r1, #1
100046c6:	1ac8      	subs	r0, r1, r3
	return 31 - __builtin_clz(usable_sz);
100046c8:	f7fb fdca 	bl	10000260 <__clzsi2>
100046cc:	231f      	movs	r3, #31
100046ce:	1a18      	subs	r0, r3, r0
}
100046d0:	bd10      	pop	{r4, pc}

100046d2 <free_list_remove_bidx>:
{
100046d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100046d4:	0017      	movs	r7, r2
	return chunk_field(h, c, FREE_NEXT);
100046d6:	2203      	movs	r2, #3
100046d8:	0004      	movs	r4, r0
100046da:	000e      	movs	r6, r1
100046dc:	f7ff ff9b 	bl	10004616 <chunk_field>
100046e0:	1d3b      	adds	r3, r7, #4
100046e2:	0005      	movs	r5, r0
100046e4:	9301      	str	r3, [sp, #4]
	if (next_free_chunk(h, c) == c) {
100046e6:	4286      	cmp	r6, r0
100046e8:	d109      	bne.n	100046fe <free_list_remove_bidx+0x2c>
		h->avail_buckets &= ~BIT(bidx);
100046ea:	2201      	movs	r2, #1
100046ec:	40ba      	lsls	r2, r7
100046ee:	68e3      	ldr	r3, [r4, #12]
100046f0:	4393      	bics	r3, r2
		b->next = 0;
100046f2:	2200      	movs	r2, #0
		h->avail_buckets &= ~BIT(bidx);
100046f4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
100046f6:	9b01      	ldr	r3, [sp, #4]
100046f8:	009b      	lsls	r3, r3, #2
100046fa:	511a      	str	r2, [r3, r4]
}
100046fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100046fe:	0031      	movs	r1, r6
10004700:	2202      	movs	r2, #2
10004702:	0020      	movs	r0, r4
10004704:	f7ff ff87 	bl	10004616 <chunk_field>
10004708:	0006      	movs	r6, r0
		b->next = second;
1000470a:	9b01      	ldr	r3, [sp, #4]
	chunk_set(h, c, FREE_NEXT, next);
1000470c:	0001      	movs	r1, r0
1000470e:	009b      	lsls	r3, r3, #2
10004710:	0020      	movs	r0, r4
10004712:	511d      	str	r5, [r3, r4]
10004714:	2203      	movs	r2, #3
10004716:	002b      	movs	r3, r5
10004718:	f7ff ff8a 	bl	10004630 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
1000471c:	0033      	movs	r3, r6
1000471e:	2202      	movs	r2, #2
10004720:	0029      	movs	r1, r5
10004722:	0020      	movs	r0, r4
10004724:	f7ff ff84 	bl	10004630 <chunk_set>
}
10004728:	e7e8      	b.n	100046fc <free_list_remove_bidx+0x2a>

1000472a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
1000472a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000472c:	0004      	movs	r4, r0
1000472e:	b085      	sub	sp, #20
	int bi = bucket_idx(h, sz);
10004730:	6880      	ldr	r0, [r0, #8]
{
10004732:	9103      	str	r1, [sp, #12]
	int bi = bucket_idx(h, sz);
10004734:	f7ff ffbd 	bl	100046b2 <bucket_idx.isra.0>
10004738:	0086      	lsls	r6, r0, #2
1000473a:	19a6      	adds	r6, r4, r6
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
1000473c:	6933      	ldr	r3, [r6, #16]
	int bi = bucket_idx(h, sz);
1000473e:	9001      	str	r0, [sp, #4]
	if (b->next) {
10004740:	9302      	str	r3, [sp, #8]
10004742:	2b00      	cmp	r3, #0
10004744:	d01c      	beq.n	10004780 <alloc_chunk+0x56>
10004746:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
10004748:	6935      	ldr	r5, [r6, #16]
			if (chunk_size(h, c) >= sz) {
1000474a:	0020      	movs	r0, r4
1000474c:	0029      	movs	r1, r5
1000474e:	f7ff ff7d 	bl	1000464c <chunk_size>
10004752:	9b03      	ldr	r3, [sp, #12]
10004754:	4298      	cmp	r0, r3
10004756:	d307      	bcc.n	10004768 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
10004758:	9a01      	ldr	r2, [sp, #4]

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
1000475a:	0029      	movs	r1, r5
1000475c:	0020      	movs	r0, r4
1000475e:	f7ff ffb8 	bl	100046d2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
10004762:	0028      	movs	r0, r5
10004764:	b005      	add	sp, #20
10004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_NEXT);
10004768:	2203      	movs	r2, #3
1000476a:	0029      	movs	r1, r5
1000476c:	0020      	movs	r0, r4
1000476e:	f7ff ff52 	bl	10004616 <chunk_field>
		} while (--i && b->next != first);
10004772:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
10004774:	6130      	str	r0, [r6, #16]
		} while (--i && b->next != first);
10004776:	2f00      	cmp	r7, #0
10004778:	d002      	beq.n	10004780 <alloc_chunk+0x56>
1000477a:	9b02      	ldr	r3, [sp, #8]
1000477c:	4283      	cmp	r3, r0
1000477e:	d1e3      	bne.n	10004748 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
10004780:	2201      	movs	r2, #1
10004782:	9b01      	ldr	r3, [sp, #4]
10004784:	4252      	negs	r2, r2
10004786:	3301      	adds	r3, #1
10004788:	409a      	lsls	r2, r3
1000478a:	0013      	movs	r3, r2
1000478c:	68e2      	ldr	r2, [r4, #12]
1000478e:	0015      	movs	r5, r2
10004790:	401d      	ands	r5, r3
	if (bmask != 0U) {
10004792:	421a      	tst	r2, r3
10004794:	d0e5      	beq.n	10004762 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
10004796:	0028      	movs	r0, r5
10004798:	f7fb fd80 	bl	1000029c <__ctzsi2>
		chunkid_t c = h->buckets[minbucket].next;
1000479c:	1d03      	adds	r3, r0, #4
1000479e:	009b      	lsls	r3, r3, #2
		int minbucket = __builtin_ctz(bmask);
100047a0:	0002      	movs	r2, r0
		chunkid_t c = h->buckets[minbucket].next;
100047a2:	591d      	ldr	r5, [r3, r4]
100047a4:	e7d9      	b.n	1000475a <alloc_chunk+0x30>

100047a6 <split_chunks>:
{
100047a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100047a8:	0014      	movs	r4, r2
100047aa:	000e      	movs	r6, r1
100047ac:	0005      	movs	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
100047ae:	f7ff ff4d 	bl	1000464c <chunk_size>
	chunksz_t rsz = sz0 - lsz;
100047b2:	1b37      	subs	r7, r6, r4
	chunksz_t lsz = rc - lc;
100047b4:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
100047b6:	183f      	adds	r7, r7, r0
	set_chunk_size(h, lc, lsz);
100047b8:	001a      	movs	r2, r3
100047ba:	0031      	movs	r1, r6
100047bc:	0028      	movs	r0, r5
	chunksz_t lsz = rc - lc;
100047be:	9301      	str	r3, [sp, #4]
	set_chunk_size(h, lc, lsz);
100047c0:	f7ff ff65 	bl	1000468e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
100047c4:	003a      	movs	r2, r7
100047c6:	0028      	movs	r0, r5
100047c8:	0021      	movs	r1, r4
100047ca:	f7ff ff60 	bl	1000468e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
100047ce:	0028      	movs	r0, r5
100047d0:	9b01      	ldr	r3, [sp, #4]
100047d2:	2200      	movs	r2, #0
100047d4:	0021      	movs	r1, r4
100047d6:	f7ff ff2b 	bl	10004630 <chunk_set>
	return c + chunk_size(h, c);
100047da:	0021      	movs	r1, r4
100047dc:	0028      	movs	r0, r5
100047de:	f7ff ff35 	bl	1000464c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
100047e2:	003b      	movs	r3, r7
	return c + chunk_size(h, c);
100047e4:	1821      	adds	r1, r4, r0
	chunk_set(h, c, LEFT_SIZE, size);
100047e6:	2200      	movs	r2, #0
100047e8:	0028      	movs	r0, r5
100047ea:	f7ff ff21 	bl	10004630 <chunk_set>
}
100047ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

100047f0 <free_list_add>:
{
100047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100047f2:	000d      	movs	r5, r1
100047f4:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
100047f6:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
100047f8:	f7ff ff28 	bl	1000464c <chunk_size>
100047fc:	2380      	movs	r3, #128	; 0x80
100047fe:	0001      	movs	r1, r0
10004800:	021b      	lsls	r3, r3, #8
10004802:	429e      	cmp	r6, r3
10004804:	d301      	bcc.n	1000480a <free_list_add+0x1a>
10004806:	2801      	cmp	r0, #1
10004808:	d019      	beq.n	1000483e <free_list_add+0x4e>
		int bidx = bucket_idx(h, chunk_size(h, c));
1000480a:	0030      	movs	r0, r6
1000480c:	f7ff ff51 	bl	100046b2 <bucket_idx.isra.0>
	if (b->next == 0U) {
10004810:	0083      	lsls	r3, r0, #2
10004812:	18e3      	adds	r3, r4, r3
10004814:	691e      	ldr	r6, [r3, #16]
10004816:	2e00      	cmp	r6, #0
10004818:	d112      	bne.n	10004840 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
1000481a:	2101      	movs	r1, #1
1000481c:	4081      	lsls	r1, r0
1000481e:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
10004820:	0020      	movs	r0, r4
10004822:	430a      	orrs	r2, r1
10004824:	60e2      	str	r2, [r4, #12]
10004826:	0029      	movs	r1, r5
10004828:	2202      	movs	r2, #2
		b->next = c;
1000482a:	611d      	str	r5, [r3, #16]
1000482c:	002b      	movs	r3, r5
1000482e:	f7ff feff 	bl	10004630 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
10004832:	002b      	movs	r3, r5
10004834:	2203      	movs	r2, #3
10004836:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
10004838:	0020      	movs	r0, r4
1000483a:	f7ff fef9 	bl	10004630 <chunk_set>
}
1000483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
10004840:	2202      	movs	r2, #2
10004842:	0031      	movs	r1, r6
10004844:	0020      	movs	r0, r4
10004846:	f7ff fee6 	bl	10004616 <chunk_field>
1000484a:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
1000484c:	0003      	movs	r3, r0
1000484e:	2202      	movs	r2, #2
10004850:	0029      	movs	r1, r5
10004852:	0020      	movs	r0, r4
10004854:	f7ff feec 	bl	10004630 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
10004858:	0033      	movs	r3, r6
1000485a:	2203      	movs	r2, #3
1000485c:	0029      	movs	r1, r5
1000485e:	0020      	movs	r0, r4
10004860:	f7ff fee6 	bl	10004630 <chunk_set>
10004864:	002b      	movs	r3, r5
10004866:	2203      	movs	r2, #3
10004868:	0039      	movs	r1, r7
1000486a:	0020      	movs	r0, r4
1000486c:	f7ff fee0 	bl	10004630 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
10004870:	002b      	movs	r3, r5
10004872:	2202      	movs	r2, #2
10004874:	0031      	movs	r1, r6
10004876:	e7df      	b.n	10004838 <free_list_add+0x48>

10004878 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
10004878:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
1000487a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
1000487c:	2900      	cmp	r1, #0
1000487e:	d101      	bne.n	10004884 <sys_heap_alloc+0xc>
		return NULL;
10004880:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
10004882:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
10004884:	68aa      	ldr	r2, [r5, #8]
10004886:	08cb      	lsrs	r3, r1, #3
	if (bytes == 0U || size_too_big(h, bytes)) {
10004888:	429a      	cmp	r2, r3
1000488a:	d9f9      	bls.n	10004880 <sys_heap_alloc+0x8>
	return big_heap(h) ? 8 : 4;
1000488c:	2080      	movs	r0, #128	; 0x80
1000488e:	2404      	movs	r4, #4
10004890:	0200      	lsls	r0, r0, #8
10004892:	4282      	cmp	r2, r0
10004894:	d300      	bcc.n	10004898 <sys_heap_alloc+0x20>
10004896:	1924      	adds	r4, r4, r4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004898:	3107      	adds	r1, #7
1000489a:	190c      	adds	r4, r1, r4
1000489c:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
1000489e:	0021      	movs	r1, r4
100048a0:	0028      	movs	r0, r5
100048a2:	f7ff ff42 	bl	1000472a <alloc_chunk>
100048a6:	1e06      	subs	r6, r0, #0
	if (c == 0U) {
100048a8:	d0ea      	beq.n	10004880 <sys_heap_alloc+0x8>
	if (chunk_size(h, c) > chunk_sz) {
100048aa:	0001      	movs	r1, r0
100048ac:	0028      	movs	r0, r5
100048ae:	f7ff fecd 	bl	1000464c <chunk_size>
100048b2:	42a0      	cmp	r0, r4
100048b4:	d909      	bls.n	100048ca <sys_heap_alloc+0x52>
		split_chunks(h, c, c + chunk_sz);
100048b6:	1934      	adds	r4, r6, r4
100048b8:	0031      	movs	r1, r6
100048ba:	0028      	movs	r0, r5
100048bc:	0022      	movs	r2, r4
100048be:	f7ff ff72 	bl	100047a6 <split_chunks>
		free_list_add(h, c + chunk_sz);
100048c2:	0021      	movs	r1, r4
100048c4:	0028      	movs	r0, r5
100048c6:	f7ff ff93 	bl	100047f0 <free_list_add>
	set_chunk_used(h, c, true);
100048ca:	2201      	movs	r2, #1
100048cc:	0031      	movs	r1, r6
100048ce:	0028      	movs	r0, r5
100048d0:	f7ff fec2 	bl	10004658 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
100048d4:	2280      	movs	r2, #128	; 0x80
100048d6:	68a9      	ldr	r1, [r5, #8]
100048d8:	2304      	movs	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
100048da:	00f0      	lsls	r0, r6, #3
100048dc:	0212      	lsls	r2, r2, #8
100048de:	4291      	cmp	r1, r2
100048e0:	d300      	bcc.n	100048e4 <sys_heap_alloc+0x6c>
100048e2:	18db      	adds	r3, r3, r3
100048e4:	18c0      	adds	r0, r0, r3
100048e6:	1828      	adds	r0, r5, r0
	return mem;
100048e8:	e7cb      	b.n	10004882 <sys_heap_alloc+0xa>

100048ea <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
100048ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100048ec:	0014      	movs	r4, r2
100048ee:	000a      	movs	r2, r1
100048f0:	1e4b      	subs	r3, r1, #1
100048f2:	401a      	ands	r2, r3
100048f4:	9201      	str	r2, [sp, #4]
100048f6:	2280      	movs	r2, #128	; 0x80
	struct z_heap *h = heap->heap;
100048f8:	6805      	ldr	r5, [r0, #0]
{
100048fa:	000e      	movs	r6, r1
	return big_heap_chunks(h->end_chunk);
100048fc:	68af      	ldr	r7, [r5, #8]
100048fe:	0212      	lsls	r2, r2, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
10004900:	4219      	tst	r1, r3
10004902:	d010      	beq.n	10004926 <sys_heap_aligned_alloc+0x3c>
	return big_heap(h) ? 8 : 4;
10004904:	2104      	movs	r1, #4
10004906:	4297      	cmp	r7, r2
10004908:	d300      	bcc.n	1000490c <sys_heap_aligned_alloc+0x22>
1000490a:	1849      	adds	r1, r1, r1
	rew = align & -align;
1000490c:	4272      	negs	r2, r6
1000490e:	4032      	ands	r2, r6
10004910:	0013      	movs	r3, r2
10004912:	428a      	cmp	r2, r1
10004914:	d900      	bls.n	10004918 <sys_heap_aligned_alloc+0x2e>
10004916:	000b      	movs	r3, r1
10004918:	9e01      	ldr	r6, [sp, #4]
1000491a:	9201      	str	r2, [sp, #4]
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
1000491c:	2c00      	cmp	r4, #0
1000491e:	d10e      	bne.n	1000493e <sys_heap_aligned_alloc+0x54>
		return NULL;
10004920:	2300      	movs	r3, #0
10004922:	9301      	str	r3, [sp, #4]
10004924:	e009      	b.n	1000493a <sys_heap_aligned_alloc+0x50>
10004926:	2304      	movs	r3, #4
10004928:	4297      	cmp	r7, r2
1000492a:	d300      	bcc.n	1000492e <sys_heap_aligned_alloc+0x44>
1000492c:	18db      	adds	r3, r3, r3
		if (align <= chunk_header_bytes(h)) {
1000492e:	429e      	cmp	r6, r3
10004930:	d8f4      	bhi.n	1000491c <sys_heap_aligned_alloc+0x32>
			return sys_heap_alloc(heap, bytes);
10004932:	0021      	movs	r1, r4
10004934:	f7ff ffa0 	bl	10004878 <sys_heap_alloc>
10004938:	9001      	str	r0, [sp, #4]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
1000493a:	9801      	ldr	r0, [sp, #4]
1000493c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
1000493e:	08e2      	lsrs	r2, r4, #3
	if (bytes == 0 || size_too_big(h, bytes)) {
10004940:	42ba      	cmp	r2, r7
10004942:	d2ed      	bcs.n	10004920 <sys_heap_aligned_alloc+0x36>
	return big_heap(h) ? 8 : 4;
10004944:	2080      	movs	r0, #128	; 0x80
10004946:	1de1      	adds	r1, r4, #7
10004948:	2204      	movs	r2, #4
1000494a:	1989      	adds	r1, r1, r6
1000494c:	0200      	lsls	r0, r0, #8
1000494e:	4287      	cmp	r7, r0
10004950:	d300      	bcc.n	10004954 <sys_heap_aligned_alloc+0x6a>
10004952:	1892      	adds	r2, r2, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004954:	1ac9      	subs	r1, r1, r3
10004956:	1889      	adds	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
10004958:	0028      	movs	r0, r5
1000495a:	08c9      	lsrs	r1, r1, #3
1000495c:	f7ff fee5 	bl	1000472a <alloc_chunk>
10004960:	1e07      	subs	r7, r0, #0
	if (c0 == 0) {
10004962:	d0dd      	beq.n	10004920 <sys_heap_aligned_alloc+0x36>
	return big_heap(h) ? 8 : 4;
10004964:	2180      	movs	r1, #128	; 0x80
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
10004966:	00c3      	lsls	r3, r0, #3
10004968:	68a8      	ldr	r0, [r5, #8]
1000496a:	2204      	movs	r2, #4
1000496c:	0209      	lsls	r1, r1, #8
1000496e:	4288      	cmp	r0, r1
10004970:	d300      	bcc.n	10004974 <sys_heap_aligned_alloc+0x8a>
10004972:	1892      	adds	r2, r2, r2
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
10004974:	9901      	ldr	r1, [sp, #4]
	chunkid_t c = mem_to_chunkid(h, mem);
10004976:	0028      	movs	r0, r5
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
10004978:	18cb      	adds	r3, r1, r3
1000497a:	189b      	adds	r3, r3, r2
1000497c:	18eb      	adds	r3, r5, r3
1000497e:	1e72      	subs	r2, r6, #1
10004980:	189b      	adds	r3, r3, r2
10004982:	4276      	negs	r6, r6
10004984:	401e      	ands	r6, r3
10004986:	1a73      	subs	r3, r6, r1
	chunkid_t c = mem_to_chunkid(h, mem);
10004988:	0019      	movs	r1, r3
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
1000498a:	9301      	str	r3, [sp, #4]
	chunkid_t c = mem_to_chunkid(h, mem);
1000498c:	f7ff fe85 	bl	1000469a <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
10004990:	9b01      	ldr	r3, [sp, #4]
	chunkid_t c = mem_to_chunkid(h, mem);
10004992:	0006      	movs	r6, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
10004994:	191c      	adds	r4, r3, r4
10004996:	2307      	movs	r3, #7
10004998:	3407      	adds	r4, #7
1000499a:	439c      	bics	r4, r3
	chunkid_t c_end = end - chunk_buf(h);
1000499c:	1b64      	subs	r4, r4, r5
1000499e:	10e4      	asrs	r4, r4, #3
	if (c > c0) {
100049a0:	4287      	cmp	r7, r0
100049a2:	d208      	bcs.n	100049b6 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
100049a4:	0002      	movs	r2, r0
100049a6:	0039      	movs	r1, r7
100049a8:	0028      	movs	r0, r5
100049aa:	f7ff fefc 	bl	100047a6 <split_chunks>
		free_list_add(h, c0);
100049ae:	0039      	movs	r1, r7
100049b0:	0028      	movs	r0, r5
100049b2:	f7ff ff1d 	bl	100047f0 <free_list_add>
	return c + chunk_size(h, c);
100049b6:	0031      	movs	r1, r6
100049b8:	0028      	movs	r0, r5
100049ba:	f7ff fe47 	bl	1000464c <chunk_size>
100049be:	1830      	adds	r0, r6, r0
	if (right_chunk(h, c) > c_end) {
100049c0:	4284      	cmp	r4, r0
100049c2:	d208      	bcs.n	100049d6 <sys_heap_aligned_alloc+0xec>
		split_chunks(h, c, c_end);
100049c4:	0031      	movs	r1, r6
100049c6:	0028      	movs	r0, r5
100049c8:	0022      	movs	r2, r4
100049ca:	f7ff feec 	bl	100047a6 <split_chunks>
		free_list_add(h, c_end);
100049ce:	0021      	movs	r1, r4
100049d0:	0028      	movs	r0, r5
100049d2:	f7ff ff0d 	bl	100047f0 <free_list_add>
	set_chunk_used(h, c, true);
100049d6:	2201      	movs	r2, #1
100049d8:	0031      	movs	r1, r6
100049da:	0028      	movs	r0, r5
100049dc:	f7ff fe3c 	bl	10004658 <set_chunk_used>
	return mem;
100049e0:	e7ab      	b.n	1000493a <sys_heap_aligned_alloc+0x50>

100049e2 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
100049e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
100049e4:	2380      	movs	r3, #128	; 0x80
100049e6:	2408      	movs	r4, #8
100049e8:	02db      	lsls	r3, r3, #11
100049ea:	429a      	cmp	r2, r3
100049ec:	d200      	bcs.n	100049f0 <sys_heap_init+0xe>
100049ee:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100049f0:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
100049f2:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
100049f4:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100049f6:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
100049f8:	190c      	adds	r4, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100049fa:	439e      	bics	r6, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
100049fc:	439c      	bics	r4, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
100049fe:	1ba4      	subs	r4, r4, r6
10004a00:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
10004a02:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004a04:	0021      	movs	r1, r4
10004a06:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
10004a08:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
10004a0a:	60f7      	str	r7, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004a0c:	f7ff fe51 	bl	100046b2 <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
10004a10:	0032      	movs	r2, r6
	for (int i = 0; i < nb_buckets; i++) {
10004a12:	003b      	movs	r3, r7
		h->buckets[i].next = 0;
10004a14:	0039      	movs	r1, r7
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
10004a16:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004a18:	351b      	adds	r5, #27
10004a1a:	08ed      	lsrs	r5, r5, #3
		h->buckets[i].next = 0;
10004a1c:	3210      	adds	r2, #16
	for (int i = 0; i < nb_buckets; i++) {
10004a1e:	4298      	cmp	r0, r3
10004a20:	da30      	bge.n	10004a84 <sys_heap_init+0xa2>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
10004a22:	002a      	movs	r2, r5
10004a24:	0030      	movs	r0, r6
10004a26:	2100      	movs	r1, #0
10004a28:	f7ff fe31 	bl	1000468e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
10004a2c:	2300      	movs	r3, #0
10004a2e:	0030      	movs	r0, r6
10004a30:	001a      	movs	r2, r3
10004a32:	0019      	movs	r1, r3
10004a34:	f7ff fdfc 	bl	10004630 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10004a38:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
10004a3a:	0030      	movs	r0, r6
10004a3c:	2201      	movs	r2, #1
10004a3e:	2100      	movs	r1, #0
10004a40:	f7ff fe0a 	bl	10004658 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10004a44:	003a      	movs	r2, r7
10004a46:	0029      	movs	r1, r5
10004a48:	0030      	movs	r0, r6
10004a4a:	f7ff fe20 	bl	1000468e <set_chunk_size>
10004a4e:	002b      	movs	r3, r5
10004a50:	0029      	movs	r1, r5
10004a52:	0030      	movs	r0, r6
10004a54:	2200      	movs	r2, #0
10004a56:	f7ff fdeb 	bl	10004630 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
10004a5a:	0030      	movs	r0, r6
10004a5c:	0021      	movs	r1, r4
10004a5e:	2200      	movs	r2, #0
10004a60:	f7ff fe15 	bl	1000468e <set_chunk_size>
10004a64:	003b      	movs	r3, r7
10004a66:	0030      	movs	r0, r6
10004a68:	0021      	movs	r1, r4
10004a6a:	2200      	movs	r2, #0
10004a6c:	f7ff fde0 	bl	10004630 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
10004a70:	0030      	movs	r0, r6
10004a72:	2201      	movs	r2, #1
10004a74:	0021      	movs	r1, r4
10004a76:	f7ff fdef 	bl	10004658 <set_chunk_used>

	free_list_add(h, chunk0_size);
10004a7a:	0029      	movs	r1, r5
10004a7c:	0030      	movs	r0, r6
10004a7e:	f7ff feb7 	bl	100047f0 <free_list_add>
}
10004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
10004a84:	009f      	lsls	r7, r3, #2
10004a86:	51d1      	str	r1, [r2, r7]
	for (int i = 0; i < nb_buckets; i++) {
10004a88:	3301      	adds	r3, #1
10004a8a:	e7c8      	b.n	10004a1e <sys_heap_init+0x3c>

10004a8c <encode_uint>:
{
10004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004a8e:	b085      	sub	sp, #20
10004a90:	9001      	str	r0, [sp, #4]
10004a92:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10004a94:	78d3      	ldrb	r3, [r2, #3]
{
10004a96:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10004a98:	001a      	movs	r2, r3
10004a9a:	3a41      	subs	r2, #65	; 0x41
10004a9c:	000f      	movs	r7, r1
	switch (specifier) {
10004a9e:	2408      	movs	r4, #8
10004aa0:	9202      	str	r2, [sp, #8]
10004aa2:	2b6f      	cmp	r3, #111	; 0x6f
10004aa4:	d00a      	beq.n	10004abc <encode_uint+0x30>
10004aa6:	d804      	bhi.n	10004ab2 <encode_uint+0x26>
		return 16;
10004aa8:	1924      	adds	r4, r4, r4
	switch (specifier) {
10004aaa:	2b58      	cmp	r3, #88	; 0x58
10004aac:	d006      	beq.n	10004abc <encode_uint+0x30>
		return 10;
10004aae:	3c06      	subs	r4, #6
10004ab0:	e004      	b.n	10004abc <encode_uint+0x30>
	switch (specifier) {
10004ab2:	2208      	movs	r2, #8
		return 16;
10004ab4:	2410      	movs	r4, #16
	switch (specifier) {
10004ab6:	4393      	bics	r3, r2
10004ab8:	2b70      	cmp	r3, #112	; 0x70
10004aba:	d1f8      	bne.n	10004aae <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10004abc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10004abe:	0022      	movs	r2, r4
10004ac0:	2300      	movs	r3, #0
10004ac2:	0039      	movs	r1, r7
10004ac4:	9801      	ldr	r0, [sp, #4]
10004ac6:	f7fb fc09 	bl	100002dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004aca:	0013      	movs	r3, r2
10004acc:	468c      	mov	ip, r1
10004ace:	b2d2      	uxtb	r2, r2
10004ad0:	2b09      	cmp	r3, #9
10004ad2:	d81a      	bhi.n	10004b0a <encode_uint+0x7e>
10004ad4:	3230      	adds	r2, #48	; 0x30
10004ad6:	b2d3      	uxtb	r3, r2
10004ad8:	3e01      	subs	r6, #1
10004ada:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10004adc:	2300      	movs	r3, #0
10004ade:	42bb      	cmp	r3, r7
10004ae0:	d102      	bne.n	10004ae8 <encode_uint+0x5c>
10004ae2:	9b01      	ldr	r3, [sp, #4]
10004ae4:	429c      	cmp	r4, r3
10004ae6:	d802      	bhi.n	10004aee <encode_uint+0x62>
10004ae8:	9b03      	ldr	r3, [sp, #12]
10004aea:	429e      	cmp	r6, r3
10004aec:	d80a      	bhi.n	10004b04 <encode_uint+0x78>
	if (conv->flag_hash) {
10004aee:	782b      	ldrb	r3, [r5, #0]
10004af0:	069b      	lsls	r3, r3, #26
10004af2:	d504      	bpl.n	10004afe <encode_uint+0x72>
		if (radix == 8) {
10004af4:	2c08      	cmp	r4, #8
10004af6:	d110      	bne.n	10004b1a <encode_uint+0x8e>
			conv->altform_0 = true;
10004af8:	78ab      	ldrb	r3, [r5, #2]
10004afa:	4323      	orrs	r3, r4
10004afc:	70ab      	strb	r3, [r5, #2]
}
10004afe:	0030      	movs	r0, r6
10004b00:	b005      	add	sp, #20
10004b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10004b04:	4667      	mov	r7, ip
10004b06:	9001      	str	r0, [sp, #4]
10004b08:	e7d9      	b.n	10004abe <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004b0a:	0013      	movs	r3, r2
10004b0c:	9902      	ldr	r1, [sp, #8]
10004b0e:	3357      	adds	r3, #87	; 0x57
10004b10:	b2db      	uxtb	r3, r3
10004b12:	2919      	cmp	r1, #25
10004b14:	d8e0      	bhi.n	10004ad8 <encode_uint+0x4c>
10004b16:	3237      	adds	r2, #55	; 0x37
10004b18:	e7dd      	b.n	10004ad6 <encode_uint+0x4a>
		} else if (radix == 16) {
10004b1a:	2c10      	cmp	r4, #16
10004b1c:	d1ef      	bne.n	10004afe <encode_uint+0x72>
			conv->altform_0c = true;
10004b1e:	78ab      	ldrb	r3, [r5, #2]
10004b20:	431c      	orrs	r4, r3
10004b22:	70ac      	strb	r4, [r5, #2]
	return bp;
10004b24:	e7eb      	b.n	10004afe <encode_uint+0x72>

10004b26 <outs>:
{
10004b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004b28:	0007      	movs	r7, r0
10004b2a:	0015      	movs	r5, r2
10004b2c:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004b2e:	0014      	movs	r4, r2
{
10004b30:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004b32:	42a6      	cmp	r6, r4
10004b34:	d806      	bhi.n	10004b44 <outs+0x1e>
10004b36:	2e00      	cmp	r6, #0
10004b38:	d001      	beq.n	10004b3e <outs+0x18>
	return (int)count;
10004b3a:	1b60      	subs	r0, r4, r5
10004b3c:	e008      	b.n	10004b50 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004b3e:	7823      	ldrb	r3, [r4, #0]
10004b40:	2b00      	cmp	r3, #0
10004b42:	d0fa      	beq.n	10004b3a <outs+0x14>
		int rc = out((int)*sp++, ctx);
10004b44:	7820      	ldrb	r0, [r4, #0]
10004b46:	9901      	ldr	r1, [sp, #4]
10004b48:	47b8      	blx	r7
		if (rc < 0) {
10004b4a:	3401      	adds	r4, #1
10004b4c:	2800      	cmp	r0, #0
10004b4e:	daf0      	bge.n	10004b32 <outs+0xc>
}
10004b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10004b52 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
10004b52:	b570      	push	{r4, r5, r6, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
10004b54:	6905      	ldr	r5, [r0, #16]
10004b56:	2408      	movs	r4, #8
10004b58:	002e      	movs	r6, r5
10004b5a:	2300      	movs	r3, #0
{
10004b5c:	0002      	movs	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
10004b5e:	4026      	ands	r6, r4
		*res = 0;
		return false;
10004b60:	0018      	movs	r0, r3
	if (buffer->flags & MPSC_PBUF_FULL) {
10004b62:	4225      	tst	r5, r4
10004b64:	d105      	bne.n	10004b72 <free_space+0x20>
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
10004b66:	68d0      	ldr	r0, [r2, #12]
10004b68:	6813      	ldr	r3, [r2, #0]
10004b6a:	4298      	cmp	r0, r3
10004b6c:	d903      	bls.n	10004b76 <free_space+0x24>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
10004b6e:	1ac3      	subs	r3, r0, r3
		return false;
10004b70:	0030      	movs	r0, r6
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
10004b72:	600b      	str	r3, [r1, #0]
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
10004b74:	bd70      	pop	{r4, r5, r6, pc}
	*res = buffer->size - buffer->tmp_wr_idx;
10004b76:	6a12      	ldr	r2, [r2, #32]
	return true;
10004b78:	2001      	movs	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
10004b7a:	1ad3      	subs	r3, r2, r3
	return true;
10004b7c:	e7f9      	b.n	10004b72 <free_space+0x20>

10004b7e <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
10004b7e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
10004b80:	a901      	add	r1, sp, #4
{
10004b82:	0004      	movs	r4, r0
	if (free_space(buffer, &f)) {
10004b84:	f7ff ffe5 	bl	10004b52 <free_space>
10004b88:	2800      	cmp	r0, #0
10004b8a:	d004      	beq.n	10004b96 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
10004b8c:	9b01      	ldr	r3, [sp, #4]
10004b8e:	68e2      	ldr	r2, [r4, #12]
10004b90:	3b01      	subs	r3, #1
10004b92:	189b      	adds	r3, r3, r2
10004b94:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
10004b96:	6a20      	ldr	r0, [r4, #32]
10004b98:	9b01      	ldr	r3, [sp, #4]
10004b9a:	1ac0      	subs	r0, r0, r3
10004b9c:	3801      	subs	r0, #1
}
10004b9e:	bd16      	pop	{r1, r2, r4, pc}

10004ba0 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
10004ba0:	b510      	push	{r4, lr}
10004ba2:	0004      	movs	r4, r0
	uint32_t i = idx + val;
10004ba4:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
10004ba6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
10004ba8:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
10004baa:	07d2      	lsls	r2, r2, #31
10004bac:	d502      	bpl.n	10004bb4 <idx_inc+0x14>
		return i & (buffer->size - 1);
10004bae:	3b01      	subs	r3, #1
10004bb0:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
10004bb2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
10004bb4:	4298      	cmp	r0, r3
10004bb6:	d3fc      	bcc.n	10004bb2 <idx_inc+0x12>
10004bb8:	1ac0      	subs	r0, r0, r3
10004bba:	e7fa      	b.n	10004bb2 <idx_inc+0x12>

10004bbc <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
10004bbc:	b510      	push	{r4, lr}
10004bbe:	0004      	movs	r4, r0
10004bc0:	000a      	movs	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
10004bc2:	68c1      	ldr	r1, [r0, #12]
10004bc4:	f7ff ffec 	bl	10004ba0 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
10004bc8:	2208      	movs	r2, #8
10004bca:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
10004bcc:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
10004bce:	4393      	bics	r3, r2
10004bd0:	6123      	str	r3, [r4, #16]
}
10004bd2:	bd10      	pop	{r4, pc}

10004bd4 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
	union mpsc_pbuf_generic skip = {
10004bd4:	2202      	movs	r2, #2
{
10004bd6:	b570      	push	{r4, r5, r6, lr}
10004bd8:	000d      	movs	r5, r1
	union mpsc_pbuf_generic skip = {
10004bda:	008b      	lsls	r3, r1, #2
10004bdc:	431a      	orrs	r2, r3
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
10004bde:	6803      	ldr	r3, [r0, #0]
10004be0:	69c1      	ldr	r1, [r0, #28]
10004be2:	009b      	lsls	r3, r3, #2
10004be4:	505a      	str	r2, [r3, r1]
{
10004be6:	0004      	movs	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004be8:	6801      	ldr	r1, [r0, #0]
10004bea:	002a      	movs	r2, r5
10004bec:	f7ff ffd8 	bl	10004ba0 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004bf0:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004bf2:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004bf4:	4298      	cmp	r0, r3
10004bf6:	d103      	bne.n	10004c00 <add_skip_item+0x2c>
		buffer->flags |= MPSC_PBUF_FULL;
10004bf8:	2308      	movs	r3, #8
10004bfa:	6922      	ldr	r2, [r4, #16]
10004bfc:	4313      	orrs	r3, r2
10004bfe:	6123      	str	r3, [r4, #16]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
10004c00:	002a      	movs	r2, r5
10004c02:	6861      	ldr	r1, [r4, #4]
10004c04:	0020      	movs	r0, r4
10004c06:	f7ff ffcb 	bl	10004ba0 <idx_inc>
10004c0a:	6060      	str	r0, [r4, #4]
}
10004c0c:	bd70      	pop	{r4, r5, r6, pc}

10004c0e <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
10004c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
10004c10:	001e      	movs	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
10004c12:	68c3      	ldr	r3, [r0, #12]
{
10004c14:	0017      	movs	r7, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
10004c16:	69c2      	ldr	r2, [r0, #28]
10004c18:	009b      	lsls	r3, r3, #2
10004c1a:	18d5      	adds	r5, r2, r3
	if (item->hdr.busy && !item->hdr.valid) {
10004c1c:	5cd2      	ldrb	r2, [r2, r3]
10004c1e:	2303      	movs	r3, #3
{
10004c20:	b085      	sub	sp, #20
	if (item->hdr.busy && !item->hdr.valid) {
10004c22:	401a      	ands	r2, r3
{
10004c24:	0004      	movs	r4, r0
10004c26:	2300      	movs	r3, #0
10004c28:	9102      	str	r1, [sp, #8]
	if (item->hdr.busy && !item->hdr.valid) {
10004c2a:	2a02      	cmp	r2, #2
10004c2c:	d008      	beq.n	10004c40 <drop_item_locked+0x32>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
10004c2e:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
10004c30:	6033      	str	r3, [r6, #0]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
10004c32:	2202      	movs	r2, #2
10004c34:	6923      	ldr	r3, [r4, #16]
10004c36:	4213      	tst	r3, r2
10004c38:	d10d      	bne.n	10004c56 <drop_item_locked+0x48>
		return false;
10004c3a:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
10004c3c:	b005      	add	sp, #20
10004c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return item->skip.len;
10004c40:	6829      	ldr	r1, [r5, #0]
	*item_to_drop = NULL;
10004c42:	603b      	str	r3, [r7, #0]
		return item->skip.len;
10004c44:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
10004c46:	6033      	str	r3, [r6, #0]
	if (skip_wlen) {
10004c48:	d0f3      	beq.n	10004c32 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
10004c4a:	f7ff ffb7 	bl	10004bbc <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
10004c4e:	68e3      	ldr	r3, [r4, #12]
10004c50:	60a3      	str	r3, [r4, #8]
		return true;
10004c52:	2001      	movs	r0, #1
10004c54:	e7f2      	b.n	10004c3c <drop_item_locked+0x2e>
	uint32_t rd_wlen = buffer->get_wlen(item);
10004c56:	69a3      	ldr	r3, [r4, #24]
10004c58:	0028      	movs	r0, r5
10004c5a:	4798      	blx	r3
	return item->hdr.valid;
10004c5c:	782b      	ldrb	r3, [r5, #0]
	uint32_t rd_wlen = buffer->get_wlen(item);
10004c5e:	9001      	str	r0, [sp, #4]
	if (!is_valid(item)) {
10004c60:	07da      	lsls	r2, r3, #31
10004c62:	d5ea      	bpl.n	10004c3a <drop_item_locked+0x2c>
	} else if (item->hdr.busy) {
10004c64:	2202      	movs	r2, #2
10004c66:	401a      	ands	r2, r3
10004c68:	9203      	str	r2, [sp, #12]
10004c6a:	2202      	movs	r2, #2
10004c6c:	4213      	tst	r3, r2
10004c6e:	d01d      	beq.n	10004cac <drop_item_locked+0x9e>
		if (free_wlen) {
10004c70:	9b02      	ldr	r3, [sp, #8]
10004c72:	2b00      	cmp	r3, #0
10004c74:	d003      	beq.n	10004c7e <drop_item_locked+0x70>
			add_skip_item(buffer, free_wlen);
10004c76:	0019      	movs	r1, r3
10004c78:	0020      	movs	r0, r4
10004c7a:	f7ff ffab 	bl	10004bd4 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
10004c7e:	6861      	ldr	r1, [r4, #4]
10004c80:	0020      	movs	r0, r4
10004c82:	9a01      	ldr	r2, [sp, #4]
10004c84:	f7ff ff8c 	bl	10004ba0 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
10004c88:	68a3      	ldr	r3, [r4, #8]
10004c8a:	68e1      	ldr	r1, [r4, #12]
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
10004c8c:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
10004c8e:	4299      	cmp	r1, r3
10004c90:	d104      	bne.n	10004c9c <drop_item_locked+0x8e>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
10004c92:	0020      	movs	r0, r4
10004c94:	9a01      	ldr	r2, [sp, #4]
10004c96:	f7ff ff83 	bl	10004ba0 <idx_inc>
10004c9a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
10004c9c:	68a3      	ldr	r3, [r4, #8]
		buffer->flags |= MPSC_PBUF_FULL;
10004c9e:	6922      	ldr	r2, [r4, #16]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
10004ca0:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
10004ca2:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
10004ca4:	2308      	movs	r3, #8
10004ca6:	4313      	orrs	r3, r2
10004ca8:	6123      	str	r3, [r4, #16]
10004caa:	e7d2      	b.n	10004c52 <drop_item_locked+0x44>
		rd_idx_inc(buffer, rd_wlen);
10004cac:	0020      	movs	r0, r4
10004cae:	9901      	ldr	r1, [sp, #4]
10004cb0:	f7ff ff84 	bl	10004bbc <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
10004cb4:	68e3      	ldr	r3, [r4, #12]
10004cb6:	60a3      	str	r3, [r4, #8]
		if (free_wlen) {
10004cb8:	9b02      	ldr	r3, [sp, #8]
10004cba:	2b00      	cmp	r3, #0
10004cbc:	d004      	beq.n	10004cc8 <drop_item_locked+0xba>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
10004cbe:	6823      	ldr	r3, [r4, #0]
10004cc0:	69e2      	ldr	r2, [r4, #28]
10004cc2:	9903      	ldr	r1, [sp, #12]
10004cc4:	009b      	lsls	r3, r3, #2
10004cc6:	5099      	str	r1, [r3, r2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
10004cc8:	9b02      	ldr	r3, [sp, #8]
10004cca:	9a01      	ldr	r2, [sp, #4]
10004ccc:	469c      	mov	ip, r3
10004cce:	4462      	add	r2, ip
10004cd0:	6032      	str	r2, [r6, #0]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
10004cd2:	6821      	ldr	r1, [r4, #0]
10004cd4:	0020      	movs	r0, r4
10004cd6:	f7ff ff63 	bl	10004ba0 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
10004cda:	2308      	movs	r3, #8
10004cdc:	6922      	ldr	r2, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
10004cde:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
10004ce0:	4313      	orrs	r3, r2
		item->hdr.valid = 0;
10004ce2:	2201      	movs	r2, #1
		buffer->flags |= MPSC_PBUF_FULL;
10004ce4:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
10004ce6:	782b      	ldrb	r3, [r5, #0]
10004ce8:	4393      	bics	r3, r2
10004cea:	702b      	strb	r3, [r5, #0]
		*item_to_drop = item;
10004cec:	603d      	str	r5, [r7, #0]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
10004cee:	e7b0      	b.n	10004c52 <drop_item_locked+0x44>

10004cf0 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
10004cf0:	b570      	push	{r4, r5, r6, lr}
10004cf2:	0004      	movs	r4, r0
10004cf4:	000d      	movs	r5, r1
10004cf6:	0016      	movs	r6, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
10004cf8:	f7ff ff52 	bl	10004ba0 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
10004cfc:	6823      	ldr	r3, [r4, #0]
10004cfe:	4283      	cmp	r3, r0
10004d00:	d105      	bne.n	10004d0e <post_drop_action+0x1e>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
10004d02:	2208      	movs	r2, #8
10004d04:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
10004d06:	6025      	str	r5, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
10004d08:	4393      	bics	r3, r2
10004d0a:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
10004d0c:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
10004d0e:	2302      	movs	r3, #2
10004d10:	00b2      	lsls	r2, r6, #2
10004d12:	4313      	orrs	r3, r2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
10004d14:	69e2      	ldr	r2, [r4, #28]
10004d16:	00ad      	lsls	r5, r5, #2
10004d18:	50ab      	str	r3, [r5, r2]
	buffer->wr_idx = idx_inc(buffer,
10004d1a:	6861      	ldr	r1, [r4, #4]
10004d1c:	0032      	movs	r2, r6
10004d1e:	0020      	movs	r0, r4
10004d20:	f7ff ff3e 	bl	10004ba0 <idx_inc>
10004d24:	6060      	str	r0, [r4, #4]
10004d26:	e7f1      	b.n	10004d0c <post_drop_action+0x1c>

10004d28 <max_utilization_update>:
{
10004d28:	b570      	push	{r4, r5, r6, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
10004d2a:	6903      	ldr	r3, [r0, #16]
{
10004d2c:	0004      	movs	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
10004d2e:	075b      	lsls	r3, r3, #29
10004d30:	d506      	bpl.n	10004d40 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
10004d32:	6a45      	ldr	r5, [r0, #36]	; 0x24
10004d34:	f7ff ff23 	bl	10004b7e <get_usage>
10004d38:	4285      	cmp	r5, r0
10004d3a:	d200      	bcs.n	10004d3e <max_utilization_update+0x16>
10004d3c:	0005      	movs	r5, r0
10004d3e:	6265      	str	r5, [r4, #36]	; 0x24
}
10004d40:	bd70      	pop	{r4, r5, r6, pc}

10004d42 <mpsc_pbuf_init>:
{
10004d42:	b570      	push	{r4, r5, r6, lr}
10004d44:	000d      	movs	r5, r1
10004d46:	0004      	movs	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
10004d48:	221c      	movs	r2, #28
10004d4a:	2100      	movs	r1, #0
10004d4c:	f000 fa21 	bl	10005192 <memset>
	buffer->max_usage = 0;
10004d50:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
10004d52:	68eb      	ldr	r3, [r5, #12]
10004d54:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
10004d56:	68ab      	ldr	r3, [r5, #8]
10004d58:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
10004d5a:	682b      	ldr	r3, [r5, #0]
10004d5c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
10004d5e:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
10004d60:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
10004d62:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
10004d64:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
10004d66:	2b00      	cmp	r3, #0
10004d68:	d004      	beq.n	10004d74 <mpsc_pbuf_init+0x32>
10004d6a:	1e59      	subs	r1, r3, #1
10004d6c:	420b      	tst	r3, r1
10004d6e:	d101      	bne.n	10004d74 <mpsc_pbuf_init+0x32>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
10004d70:	2301      	movs	r3, #1
10004d72:	431a      	orrs	r2, r3
	buffer->flags = cfg->flags;
10004d74:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
10004d76:	0020      	movs	r0, r4
	return z_impl_k_sem_init(sem, initial_count, limit);
10004d78:	2201      	movs	r2, #1
10004d7a:	2100      	movs	r1, #0
10004d7c:	3028      	adds	r0, #40	; 0x28
10004d7e:	f000 fe90 	bl	10005aa2 <z_impl_k_sem_init>
}
10004d82:	bd70      	pop	{r4, r5, r6, pc}

10004d84 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
10004d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10004d86:	b08b      	sub	sp, #44	; 0x2c
10004d88:	9305      	str	r3, [sp, #20]
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
10004d8a:	2300      	movs	r3, #0
{
10004d8c:	9204      	str	r2, [sp, #16]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
10004d8e:	6a02      	ldr	r2, [r0, #32]
{
10004d90:	0004      	movs	r4, r0
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
10004d92:	001e      	movs	r6, r3
{
10004d94:	9102      	str	r1, [sp, #8]
	union mpsc_pbuf_generic *dropped_item = NULL;
10004d96:	9307      	str	r3, [sp, #28]
	uint32_t tmp_wr_idx_shift = 0;
10004d98:	9309      	str	r3, [sp, #36]	; 0x24
	if (wlen > (buffer->size)) {
10004d9a:	428a      	cmp	r2, r1
10004d9c:	d33b      	bcc.n	10004e16 <mpsc_pbuf_alloc+0x92>
	uint32_t tmp_wr_idx_val = 0;
10004d9e:	9301      	str	r3, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
10004da0:	f3ef 8710 	mrs	r7, PRIMASK
10004da4:	b672      	cpsid	i
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
10004da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004da8:	9703      	str	r7, [sp, #12]
10004daa:	2a00      	cmp	r2, #0
10004dac:	d005      	beq.n	10004dba <mpsc_pbuf_alloc+0x36>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
10004dae:	0020      	movs	r0, r4
10004db0:	9901      	ldr	r1, [sp, #4]
10004db2:	f7ff ff9d 	bl	10004cf0 <post_drop_action>
			tmp_wr_idx_shift = 0;
10004db6:	2300      	movs	r3, #0
10004db8:	9309      	str	r3, [sp, #36]	; 0x24
		}

		wrap = free_space(buffer, &free_wlen);
10004dba:	0020      	movs	r0, r4
10004dbc:	a908      	add	r1, sp, #32
10004dbe:	f7ff fec8 	bl	10004b52 <free_space>

		if (free_wlen >= wlen) {
10004dc2:	9b08      	ldr	r3, [sp, #32]
10004dc4:	9a02      	ldr	r2, [sp, #8]
		wrap = free_space(buffer, &free_wlen);
10004dc6:	0005      	movs	r5, r0
		if (free_wlen >= wlen) {
10004dc8:	9300      	str	r3, [sp, #0]
10004dca:	4293      	cmp	r3, r2
10004dcc:	d32b      	bcc.n	10004e26 <mpsc_pbuf_alloc+0xa2>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
10004dce:	6823      	ldr	r3, [r4, #0]
			item =
10004dd0:	69e2      	ldr	r2, [r4, #28]
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
10004dd2:	009b      	lsls	r3, r3, #2
			item =
10004dd4:	18d6      	adds	r6, r2, r3
			item->hdr.valid = 0;
10004dd6:	5cd3      	ldrb	r3, [r2, r3]
10004dd8:	2203      	movs	r2, #3
10004dda:	4393      	bics	r3, r2
10004ddc:	7033      	strb	r3, [r6, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004dde:	6821      	ldr	r1, [r4, #0]
10004de0:	0020      	movs	r0, r4
10004de2:	9a02      	ldr	r2, [sp, #8]
10004de4:	f7ff fedc 	bl	10004ba0 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004de8:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004dea:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004dec:	4298      	cmp	r0, r3
10004dee:	d015      	beq.n	10004e1c <mpsc_pbuf_alloc+0x98>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
10004df0:	2500      	movs	r5, #0
	if (key != 0U) {
10004df2:	9b03      	ldr	r3, [sp, #12]
10004df4:	2b00      	cmp	r3, #0
10004df6:	d102      	bne.n	10004dfe <mpsc_pbuf_alloc+0x7a>
	__asm__ volatile(
10004df8:	b662      	cpsie	i
10004dfa:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
10004dfe:	9907      	ldr	r1, [sp, #28]
10004e00:	2900      	cmp	r1, #0
10004e02:	d006      	beq.n	10004e12 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
10004e04:	6963      	ldr	r3, [r4, #20]
10004e06:	2b00      	cmp	r3, #0
10004e08:	d001      	beq.n	10004e0e <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
10004e0a:	0020      	movs	r0, r4
10004e0c:	4798      	blx	r3
			}
			dropped_item = NULL;
10004e0e:	2300      	movs	r3, #0
10004e10:	9307      	str	r3, [sp, #28]
		}
	} while (cont);
10004e12:	2d00      	cmp	r5, #0
10004e14:	d1c4      	bne.n	10004da0 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
10004e16:	0030      	movs	r0, r6
10004e18:	b00b      	add	sp, #44	; 0x2c
10004e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer->flags |= MPSC_PBUF_FULL;
10004e1c:	2208      	movs	r2, #8
10004e1e:	6923      	ldr	r3, [r4, #16]
10004e20:	4313      	orrs	r3, r2
10004e22:	6123      	str	r3, [r4, #16]
10004e24:	e7e4      	b.n	10004df0 <mpsc_pbuf_alloc+0x6c>
		} else if (wrap) {
10004e26:	2800      	cmp	r0, #0
10004e28:	d004      	beq.n	10004e34 <mpsc_pbuf_alloc+0xb0>
			add_skip_item(buffer, free_wlen);
10004e2a:	0020      	movs	r0, r4
10004e2c:	9900      	ldr	r1, [sp, #0]
10004e2e:	f7ff fed1 	bl	10004bd4 <add_skip_item>
			cont = true;
10004e32:	e7de      	b.n	10004df2 <mpsc_pbuf_alloc+0x6e>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
10004e34:	9b04      	ldr	r3, [sp, #16]
10004e36:	9a05      	ldr	r2, [sp, #20]
10004e38:	4313      	orrs	r3, r2
10004e3a:	d017      	beq.n	10004e6c <mpsc_pbuf_alloc+0xe8>
10004e3c:	f000 fe1f 	bl	10005a7e <k_is_in_isr>
10004e40:	2800      	cmp	r0, #0
10004e42:	d113      	bne.n	10004e6c <mpsc_pbuf_alloc+0xe8>
	if (key != 0U) {
10004e44:	2f00      	cmp	r7, #0
10004e46:	d102      	bne.n	10004e4e <mpsc_pbuf_alloc+0xca>
	__asm__ volatile(
10004e48:	b662      	cpsie	i
10004e4a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
10004e4e:	0020      	movs	r0, r4
10004e50:	9a04      	ldr	r2, [sp, #16]
10004e52:	9b05      	ldr	r3, [sp, #20]
10004e54:	3028      	adds	r0, #40	; 0x28
10004e56:	f7fe fdcb 	bl	100039f0 <z_impl_k_sem_take>
10004e5a:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004e5c:	f3ef 8310 	mrs	r3, PRIMASK
10004e60:	b672      	cpsid	i
10004e62:	9303      	str	r3, [sp, #12]
			cont = (err == 0) ? true : false;
10004e64:	426b      	negs	r3, r5
10004e66:	415d      	adcs	r5, r3
10004e68:	b2ed      	uxtb	r5, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
10004e6a:	e7c2      	b.n	10004df2 <mpsc_pbuf_alloc+0x6e>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
10004e6c:	6823      	ldr	r3, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
10004e6e:	0020      	movs	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
10004e70:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
10004e72:	9900      	ldr	r1, [sp, #0]
10004e74:	ab09      	add	r3, sp, #36	; 0x24
10004e76:	aa07      	add	r2, sp, #28
10004e78:	f7ff fec9 	bl	10004c0e <drop_item_locked>
10004e7c:	0005      	movs	r5, r0
10004e7e:	e7b8      	b.n	10004df2 <mpsc_pbuf_alloc+0x6e>

10004e80 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
10004e80:	b570      	push	{r4, r5, r6, lr}
10004e82:	0004      	movs	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
10004e84:	6983      	ldr	r3, [r0, #24]
10004e86:	0008      	movs	r0, r1
{
10004e88:	000d      	movs	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
10004e8a:	4798      	blx	r3
10004e8c:	0002      	movs	r2, r0
10004e8e:	f3ef 8610 	mrs	r6, PRIMASK
10004e92:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
10004e94:	2301      	movs	r3, #1
10004e96:	7829      	ldrb	r1, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
10004e98:	0020      	movs	r0, r4
	item->hdr.valid = 1;
10004e9a:	430b      	orrs	r3, r1
10004e9c:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
10004e9e:	6861      	ldr	r1, [r4, #4]
10004ea0:	f7ff fe7e 	bl	10004ba0 <idx_inc>
10004ea4:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
10004ea6:	0020      	movs	r0, r4
10004ea8:	f7ff ff3e 	bl	10004d28 <max_utilization_update>
	if (key != 0U) {
10004eac:	2e00      	cmp	r6, #0
10004eae:	d102      	bne.n	10004eb6 <mpsc_pbuf_commit+0x36>
	__asm__ volatile(
10004eb0:	b662      	cpsie	i
10004eb2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
10004eb6:	bd70      	pop	{r4, r5, r6, pc}

10004eb8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
10004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004eba:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004ebc:	f3ef 8710 	mrs	r7, PRIMASK
10004ec0:	b672      	cpsid	i
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004ec2:	2108      	movs	r1, #8
10004ec4:	6922      	ldr	r2, [r4, #16]
10004ec6:	68a3      	ldr	r3, [r4, #8]
10004ec8:	420a      	tst	r2, r1
10004eca:	d103      	bne.n	10004ed4 <mpsc_pbuf_claim+0x1c>
10004ecc:	6861      	ldr	r1, [r4, #4]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
10004ece:	1aca      	subs	r2, r1, r3
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004ed0:	428b      	cmp	r3, r1
10004ed2:	d901      	bls.n	10004ed8 <mpsc_pbuf_claim+0x20>
		*res = buffer->size - buffer->tmp_rd_idx;
10004ed4:	6a22      	ldr	r2, [r4, #32]
10004ed6:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
10004ed8:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
10004eda:	2a00      	cmp	r2, #0
10004edc:	d107      	bne.n	10004eee <mpsc_pbuf_claim+0x36>
	if (key != 0U) {
10004ede:	2f00      	cmp	r7, #0
10004ee0:	d102      	bne.n	10004ee8 <mpsc_pbuf_claim+0x30>
	__asm__ volatile(
10004ee2:	b662      	cpsie	i
10004ee4:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
10004ee8:	2600      	movs	r6, #0
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
}
10004eea:	0030      	movs	r0, r6
10004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			&buffer->buf[buffer->tmp_rd_idx];
10004eee:	009b      	lsls	r3, r3, #2
		item = (union mpsc_pbuf_generic *)
10004ef0:	18ce      	adds	r6, r1, r3
	return !item->hdr.valid && !item->hdr.busy;
10004ef2:	2203      	movs	r2, #3
10004ef4:	5ccb      	ldrb	r3, [r1, r3]
		if (!a || is_invalid(item)) {
10004ef6:	2103      	movs	r1, #3
	return !item->hdr.valid && !item->hdr.busy;
10004ef8:	401a      	ands	r2, r3
		if (!a || is_invalid(item)) {
10004efa:	420b      	tst	r3, r1
10004efc:	d0ef      	beq.n	10004ede <mpsc_pbuf_claim+0x26>
	if (item->hdr.busy && !item->hdr.valid) {
10004efe:	2a02      	cmp	r2, #2
10004f00:	d102      	bne.n	10004f08 <mpsc_pbuf_claim+0x50>
		return item->skip.len;
10004f02:	6835      	ldr	r5, [r6, #0]
10004f04:	08ad      	lsrs	r5, r5, #2
			if (skip || !is_valid(item)) {
10004f06:	d105      	bne.n	10004f14 <mpsc_pbuf_claim+0x5c>
10004f08:	07da      	lsls	r2, r3, #31
10004f0a:	d413      	bmi.n	10004f34 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
10004f0c:	0030      	movs	r0, r6
10004f0e:	69a3      	ldr	r3, [r4, #24]
10004f10:	4798      	blx	r3
10004f12:	0005      	movs	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
10004f14:	68a1      	ldr	r1, [r4, #8]
10004f16:	002a      	movs	r2, r5
10004f18:	0020      	movs	r0, r4
10004f1a:	f7ff fe41 	bl	10004ba0 <idx_inc>
				rd_idx_inc(buffer, inc);
10004f1e:	0029      	movs	r1, r5
				buffer->tmp_rd_idx =
10004f20:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
10004f22:	0020      	movs	r0, r4
10004f24:	f7ff fe4a 	bl	10004bbc <rd_idx_inc>
	if (key != 0U) {
10004f28:	2f00      	cmp	r7, #0
10004f2a:	d1c7      	bne.n	10004ebc <mpsc_pbuf_claim+0x4>
	__asm__ volatile(
10004f2c:	b662      	cpsie	i
10004f2e:	f3bf 8f6f 	isb	sy
10004f32:	e7c3      	b.n	10004ebc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
10004f34:	2202      	movs	r2, #2
10004f36:	4313      	orrs	r3, r2
10004f38:	7033      	strb	r3, [r6, #0]
						buffer->get_wlen(item));
10004f3a:	69a3      	ldr	r3, [r4, #24]
10004f3c:	0030      	movs	r0, r6
					idx_inc(buffer, buffer->tmp_rd_idx,
10004f3e:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
10004f40:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
10004f42:	0029      	movs	r1, r5
						buffer->get_wlen(item));
10004f44:	0002      	movs	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
10004f46:	0020      	movs	r0, r4
10004f48:	f7ff fe2a 	bl	10004ba0 <idx_inc>
				buffer->tmp_rd_idx =
10004f4c:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10004f4e:	2f00      	cmp	r7, #0
10004f50:	d1cb      	bne.n	10004eea <mpsc_pbuf_claim+0x32>
	__asm__ volatile(
10004f52:	b662      	cpsie	i
10004f54:	f3bf 8f6f 	isb	sy
	} while (cont);
10004f58:	e7c7      	b.n	10004eea <mpsc_pbuf_claim+0x32>

10004f5a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
10004f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004f5c:	0004      	movs	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
10004f5e:	6983      	ldr	r3, [r0, #24]
10004f60:	0008      	movs	r0, r1
{
10004f62:	000d      	movs	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
10004f64:	4798      	blx	r3
10004f66:	0006      	movs	r6, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004f68:	f3ef 8710 	mrs	r7, PRIMASK
10004f6c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
10004f6e:	2201      	movs	r2, #1
10004f70:	782b      	ldrb	r3, [r5, #0]
10004f72:	4393      	bics	r3, r2
10004f74:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
10004f76:	6923      	ldr	r3, [r4, #16]
10004f78:	079b      	lsls	r3, r3, #30
10004f7a:	d505      	bpl.n	10004f88 <mpsc_pbuf_free+0x2e>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
10004f7c:	68e2      	ldr	r2, [r4, #12]
10004f7e:	69e3      	ldr	r3, [r4, #28]
10004f80:	0092      	lsls	r2, r2, #2
10004f82:	189b      	adds	r3, r3, r2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
10004f84:	429d      	cmp	r5, r3
10004f86:	d11a      	bne.n	10004fbe <mpsc_pbuf_free+0x64>
		witem->hdr.busy = 0;
10004f88:	2202      	movs	r2, #2
10004f8a:	782b      	ldrb	r3, [r5, #0]
10004f8c:	4393      	bics	r3, r2
10004f8e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
10004f90:	68a3      	ldr	r3, [r4, #8]
10004f92:	68e1      	ldr	r1, [r4, #12]
10004f94:	4299      	cmp	r1, r3
10004f96:	d104      	bne.n	10004fa2 <mpsc_pbuf_free+0x48>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
10004f98:	0032      	movs	r2, r6
10004f9a:	0020      	movs	r0, r4
10004f9c:	f7ff fe00 	bl	10004ba0 <idx_inc>
10004fa0:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
10004fa2:	0031      	movs	r1, r6
10004fa4:	0020      	movs	r0, r4
10004fa6:	f7ff fe09 	bl	10004bbc <rd_idx_inc>
	if (key != 0U) {
10004faa:	2f00      	cmp	r7, #0
10004fac:	d102      	bne.n	10004fb4 <mpsc_pbuf_free+0x5a>
	__asm__ volatile(
10004fae:	b662      	cpsie	i
10004fb0:	f3bf 8f6f 	isb	sy
		witem->skip.len = wlen;
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
10004fb4:	0020      	movs	r0, r4
10004fb6:	3028      	adds	r0, #40	; 0x28
	z_impl_k_sem_give(sem);
10004fb8:	f7fe fcfe 	bl	100039b8 <z_impl_k_sem_give>
}
10004fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		witem->skip.len = wlen;
10004fbe:	2203      	movs	r2, #3
10004fc0:	682e      	ldr	r6, [r5, #0]
10004fc2:	0083      	lsls	r3, r0, #2
10004fc4:	4016      	ands	r6, r2
10004fc6:	431e      	orrs	r6, r3
10004fc8:	602e      	str	r6, [r5, #0]
10004fca:	e7ee      	b.n	10004faa <mpsc_pbuf_free+0x50>

10004fcc <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004fcc:	6903      	ldr	r3, [r0, #16]
10004fce:	6882      	ldr	r2, [r0, #8]
10004fd0:	071b      	lsls	r3, r3, #28
10004fd2:	d403      	bmi.n	10004fdc <mpsc_pbuf_is_pending+0x10>
10004fd4:	6841      	ldr	r1, [r0, #4]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
10004fd6:	1a8b      	subs	r3, r1, r2
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004fd8:	4291      	cmp	r1, r2
10004fda:	d201      	bcs.n	10004fe0 <mpsc_pbuf_is_pending+0x14>
		*res = buffer->size - buffer->tmp_rd_idx;
10004fdc:	6a03      	ldr	r3, [r0, #32]
10004fde:	1a9b      	subs	r3, r3, r2
{
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
10004fe0:	1e5a      	subs	r2, r3, #1
10004fe2:	4193      	sbcs	r3, r2
10004fe4:	b2d8      	uxtb	r0, r3
}
10004fe6:	4770      	bx	lr

10004fe8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10004fe8:	4770      	bx	lr

10004fea <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
10004fea:	7803      	ldrb	r3, [r0, #0]
{
10004fec:	0002      	movs	r2, r0
	return 0;
10004fee:	2000      	movs	r0, #0
	if (z_log_item_is_msg(generic_msg)) {
10004ff0:	075b      	lsls	r3, r3, #29
10004ff2:	d40a      	bmi.n	1000500a <log_msg_generic_get_wlen+0x20>
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
10004ff4:	6813      	ldr	r3, [r2, #0]
10004ff6:	8852      	ldrh	r2, [r2, #2]
10004ff8:	031b      	lsls	r3, r3, #12
10004ffa:	0d5b      	lsrs	r3, r3, #21
10004ffc:	0912      	lsrs	r2, r2, #4
10004ffe:	1898      	adds	r0, r3, r2
10005000:	2307      	movs	r3, #7
10005002:	3017      	adds	r0, #23
10005004:	4398      	bics	r0, r3
10005006:	3003      	adds	r0, #3
10005008:	0880      	lsrs	r0, r0, #2
}
1000500a:	4770      	bx	lr

1000500c <dummy_timestamp>:
}
1000500c:	2000      	movs	r0, #0
1000500e:	4770      	bx	lr

10005010 <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
10005010:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
10005012:	2101      	movs	r1, #1
10005014:	f000 fe74 	bl	10005d00 <z_impl_atomic_add>
	return atomic_add(target, 1);

}
10005018:	bd10      	pop	{r4, pc}

1000501a <default_lf_get_timestamp>:
{
1000501a:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
1000501c:	f000 fe24 	bl	10005c68 <z_impl_k_uptime_ticks>
10005020:	220a      	movs	r2, #10
10005022:	2300      	movs	r3, #0
10005024:	f7fb f95a 	bl	100002dc <__aeabi_uldivmod>
}
10005028:	bd10      	pop	{r4, pc}

1000502a <z_log_vprintk>:
{
1000502a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
1000502c:	9002      	str	r0, [sp, #8]
1000502e:	2000      	movs	r0, #0
10005030:	9103      	str	r1, [sp, #12]
10005032:	0003      	movs	r3, r0
10005034:	0002      	movs	r2, r0
10005036:	0001      	movs	r1, r0
10005038:	9001      	str	r0, [sp, #4]
1000503a:	9000      	str	r0, [sp, #0]
1000503c:	f7fc fe7a 	bl	10001d34 <z_impl_z_log_msg_runtime_vcreate>
}
10005040:	b005      	add	sp, #20
10005042:	bd00      	pop	{pc}

10005044 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
10005044:	b510      	push	{r4, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
10005046:	2001      	movs	r0, #1
10005048:	f7fc fc30 	bl	100018ac <z_log_dropped>
}
1000504c:	bd10      	pop	{r4, pc}

1000504e <z_log_get_tag>:
}
1000504e:	2000      	movs	r0, #0
10005050:	4770      	bx	lr

10005052 <z_cbprintf_cpy>:
{
10005052:	b570      	push	{r4, r5, r6, lr}
10005054:	0006      	movs	r6, r0
	if ((desc->size - desc->off) < len) {
10005056:	6853      	ldr	r3, [r2, #4]
10005058:	6890      	ldr	r0, [r2, #8]
{
1000505a:	000c      	movs	r4, r1
1000505c:	0015      	movs	r5, r2
	if ((desc->size - desc->off) < len) {
1000505e:	1a1b      	subs	r3, r3, r0
10005060:	428b      	cmp	r3, r1
10005062:	d30a      	bcc.n	1000507a <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
10005064:	6813      	ldr	r3, [r2, #0]
10005066:	000a      	movs	r2, r1
10005068:	1818      	adds	r0, r3, r0
1000506a:	0031      	movs	r1, r6
1000506c:	f000 f888 	bl	10005180 <memcpy>
	return len;
10005070:	0020      	movs	r0, r4
	desc->off += len;
10005072:	68ab      	ldr	r3, [r5, #8]
10005074:	191b      	adds	r3, r3, r4
10005076:	60ab      	str	r3, [r5, #8]
}
10005078:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
1000507a:	201c      	movs	r0, #28
1000507c:	4240      	negs	r0, r0
1000507e:	e7fb      	b.n	10005078 <z_cbprintf_cpy+0x26>

10005080 <z_log_msg_finalize>:
{
10005080:	b570      	push	{r4, r5, r6, lr}
10005082:	000e      	movs	r6, r1
10005084:	0004      	movs	r4, r0
10005086:	0015      	movs	r5, r2
10005088:	0019      	movs	r1, r3
	if (!msg) {
1000508a:	2800      	cmp	r0, #0
1000508c:	d102      	bne.n	10005094 <z_log_msg_finalize+0x14>
		z_log_dropped(false);
1000508e:	f7fc fc0d 	bl	100018ac <z_log_dropped>
}
10005092:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
10005094:	2b00      	cmp	r3, #0
10005096:	d006      	beq.n	100050a6 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
10005098:	032b      	lsls	r3, r5, #12
1000509a:	0d5b      	lsrs	r3, r3, #21
1000509c:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
1000509e:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
100050a0:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
100050a2:	f000 f86d 	bl	10005180 <memcpy>
	z_log_msg_commit(msg);
100050a6:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
100050a8:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
100050aa:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
100050ac:	f7fc fd76 	bl	10001b9c <z_log_msg_commit>
100050b0:	e7ef      	b.n	10005092 <z_log_msg_finalize+0x12>

100050b2 <buffer_write>:
{
100050b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100050b4:	0006      	movs	r6, r0
100050b6:	000d      	movs	r5, r1
100050b8:	0014      	movs	r4, r2
100050ba:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
100050bc:	0021      	movs	r1, r4
100050be:	0028      	movs	r0, r5
100050c0:	003a      	movs	r2, r7
100050c2:	47b0      	blx	r6
		len -= processed;
100050c4:	1a24      	subs	r4, r4, r0
		buf += processed;
100050c6:	182d      	adds	r5, r5, r0
	} while (len != 0);
100050c8:	2c00      	cmp	r4, #0
100050ca:	d1f7      	bne.n	100050bc <buffer_write+0xa>
}
100050cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100050ce <cbvprintf>:
{
100050ce:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100050d0:	2400      	movs	r4, #0
100050d2:	9400      	str	r4, [sp, #0]
100050d4:	f7fb fe1e 	bl	10000d14 <z_cbvprintf_impl>
}
100050d8:	bd16      	pop	{r1, r2, r4, pc}

100050da <log_output_flush>:
{
100050da:	b510      	push	{r4, lr}
		     output->control_block->offset,
100050dc:	6842      	ldr	r2, [r0, #4]
{
100050de:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
100050e0:	ca0c      	ldmia	r2, {r2, r3}
100050e2:	6881      	ldr	r1, [r0, #8]
100050e4:	6800      	ldr	r0, [r0, #0]
100050e6:	f7ff ffe4 	bl	100050b2 <buffer_write>
	output->control_block->offset = 0;
100050ea:	2200      	movs	r2, #0
100050ec:	6863      	ldr	r3, [r4, #4]
100050ee:	601a      	str	r2, [r3, #0]
}
100050f0:	bd10      	pop	{r4, pc}

100050f2 <out_func>:
{
100050f2:	b570      	push	{r4, r5, r6, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
100050f4:	684b      	ldr	r3, [r1, #4]
{
100050f6:	0005      	movs	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
100050f8:	681a      	ldr	r2, [r3, #0]
100050fa:	68cb      	ldr	r3, [r1, #12]
{
100050fc:	000c      	movs	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
100050fe:	429a      	cmp	r2, r3
10005100:	d102      	bne.n	10005108 <out_func+0x16>
		log_output_flush(out_ctx);
10005102:	0008      	movs	r0, r1
10005104:	f7ff ffe9 	bl	100050da <log_output_flush>
	idx = atomic_inc(&out_ctx->control_block->offset);
10005108:	6860      	ldr	r0, [r4, #4]
1000510a:	2101      	movs	r1, #1
1000510c:	f000 fdf8 	bl	10005d00 <z_impl_atomic_add>
	out_ctx->buf[idx] = (uint8_t)c;
10005110:	68a3      	ldr	r3, [r4, #8]
10005112:	541d      	strb	r5, [r3, r0]
}
10005114:	2000      	movs	r0, #0
10005116:	bd70      	pop	{r4, r5, r6, pc}

10005118 <cr_out_func>:
{
10005118:	b570      	push	{r4, r5, r6, lr}
1000511a:	0004      	movs	r4, r0
1000511c:	000d      	movs	r5, r1
	if (c == '\n') {
1000511e:	280a      	cmp	r0, #10
10005120:	d102      	bne.n	10005128 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
10005122:	200d      	movs	r0, #13
10005124:	f7ff ffe5 	bl	100050f2 <out_func>
	out_func(c, ctx);
10005128:	0029      	movs	r1, r5
1000512a:	0020      	movs	r0, r4
1000512c:	f7ff ffe1 	bl	100050f2 <out_func>
}
10005130:	2000      	movs	r0, #0
10005132:	bd70      	pop	{r4, r5, r6, pc}

10005134 <log_backend_uart_init>:
}
10005134:	4770      	bx	lr

10005136 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10005136:	b510      	push	{r4, lr}
10005138:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
1000513a:	6800      	ldr	r0, [r0, #0]
1000513c:	f7fd f870 	bl	10002220 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10005140:	bd10      	pop	{r4, pc}

10005142 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10005142:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10005144:	2100      	movs	r1, #0
10005146:	2001      	movs	r0, #1
10005148:	f7fd f86a 	bl	10002220 <z_arm_fatal_error>
}
1000514c:	bd10      	pop	{r4, pc}

1000514e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
1000514e:	b510      	push	{r4, lr}
	handler();
10005150:	f7fd f900 	bl	10002354 <z_SysNmiOnReset>
	z_arm_int_exit();
10005154:	f7fd f9aa 	bl	100024ac <z_arm_exc_exit>
}
10005158:	bd10      	pop	{r4, pc}

1000515a <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
1000515a:	4770      	bx	lr

1000515c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
1000515c:	0003      	movs	r3, r0
	size_t n = 0;
1000515e:	2000      	movs	r0, #0

	while (*s != '\0') {
10005160:	5c1a      	ldrb	r2, [r3, r0]
10005162:	2a00      	cmp	r2, #0
10005164:	d100      	bne.n	10005168 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10005166:	4770      	bx	lr
		n++;
10005168:	3001      	adds	r0, #1
1000516a:	e7f9      	b.n	10005160 <strlen+0x4>

1000516c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000516c:	0003      	movs	r3, r0
	size_t n = 0;
1000516e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10005170:	5c1a      	ldrb	r2, [r3, r0]
10005172:	2a00      	cmp	r2, #0
10005174:	d001      	beq.n	1000517a <strnlen+0xe>
10005176:	4288      	cmp	r0, r1
10005178:	d100      	bne.n	1000517c <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
1000517a:	4770      	bx	lr
		n++;
1000517c:	3001      	adds	r0, #1
1000517e:	e7f7      	b.n	10005170 <strnlen+0x4>

10005180 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10005180:	2300      	movs	r3, #0
{
10005182:	b510      	push	{r4, lr}
	while (n > 0) {
10005184:	429a      	cmp	r2, r3
10005186:	d100      	bne.n	1000518a <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10005188:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
1000518a:	5ccc      	ldrb	r4, [r1, r3]
1000518c:	54c4      	strb	r4, [r0, r3]
		n--;
1000518e:	3301      	adds	r3, #1
10005190:	e7f8      	b.n	10005184 <memcpy+0x4>

10005192 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10005192:	0003      	movs	r3, r0
10005194:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10005196:	1882      	adds	r2, r0, r2
10005198:	4293      	cmp	r3, r2
1000519a:	d100      	bne.n	1000519e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000519c:	4770      	bx	lr
		*(d_byte++) = c_byte;
1000519e:	7019      	strb	r1, [r3, #0]
		n--;
100051a0:	3301      	adds	r3, #1
100051a2:	e7f9      	b.n	10005198 <memset+0x6>

100051a4 <_stdout_hook_default>:
	return EOF;
100051a4:	2001      	movs	r0, #1
}
100051a6:	4240      	negs	r0, r0
100051a8:	4770      	bx	lr

100051aa <z_log_msg_static_create.constprop.0>:
static inline void z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data)
100051aa:	b510      	push	{r4, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
100051ac:	2300      	movs	r3, #0
100051ae:	f7fc fd29 	bl	10001c04 <z_impl_z_log_msg_static_create>
}
100051b2:	bd10      	pop	{r4, pc}

100051b4 <ssd1306_set_pixel_format>:
		return 0;
100051b4:	2000      	movs	r0, #0
{
100051b6:	b510      	push	{r4, lr}
	if (pf == PIXEL_FORMAT_MONO10) {
100051b8:	2904      	cmp	r1, #4
100051ba:	d001      	beq.n	100051c0 <ssd1306_set_pixel_format+0xc>
100051bc:	f7fd fb22 	bl	10002804 <ssd1306_set_pixel_format.part.0>
}
100051c0:	bd10      	pop	{r4, pc}

100051c2 <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
100051c2:	b570      	push	{r4, r5, r6, lr}
100051c4:	0005      	movs	r5, r0
	return i2c_burst_write_dt(&config->bus,
100051c6:	2601      	movs	r6, #1
static inline int ssd1306_write_bus(const struct device *dev,
100051c8:	001c      	movs	r4, r3
100051ca:	b088      	sub	sp, #32
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
100051cc:	88ab      	ldrh	r3, [r5, #4]
100051ce:	466d      	mov	r5, sp
	return i2c_burst_write_dt(&config->bus,
100051d0:	4074      	eors	r4, r6
100051d2:	01a4      	lsls	r4, r4, #6
100051d4:	71ec      	strb	r4, [r5, #7]
100051d6:	3507      	adds	r5, #7
	msg[0].flags = I2C_MSG_WRITE;
100051d8:	2400      	movs	r4, #0
	msg[0].buf = &start_addr;
100051da:	9502      	str	r5, [sp, #8]
	msg[1].len = num_bytes;
100051dc:	9206      	str	r2, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
100051de:	466d      	mov	r5, sp
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
100051e0:	2202      	movs	r2, #2
	return i2c_burst_write(spec->bus, spec->addr,
100051e2:	6800      	ldr	r0, [r0, #0]
	msg[0].len = 1U;
100051e4:	9603      	str	r6, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
100051e6:	742c      	strb	r4, [r5, #16]
	msg[1].buf = (uint8_t *)buf;
100051e8:	9105      	str	r1, [sp, #20]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
100051ea:	772a      	strb	r2, [r5, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
100051ec:	6881      	ldr	r1, [r0, #8]
100051ee:	688c      	ldr	r4, [r1, #8]
100051f0:	a902      	add	r1, sp, #8
100051f2:	47a0      	blx	r4
}
100051f4:	b008      	add	sp, #32
100051f6:	bd70      	pop	{r4, r5, r6, pc}

100051f8 <ssd1306_set_contrast>:
{
100051f8:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
100051fa:	2381      	movs	r3, #129	; 0x81
100051fc:	466a      	mov	r2, sp
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100051fe:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
10005200:	7113      	strb	r3, [r2, #4]
10005202:	7151      	strb	r1, [r2, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10005204:	2301      	movs	r3, #1
10005206:	2202      	movs	r2, #2
10005208:	a901      	add	r1, sp, #4
1000520a:	f7ff ffda 	bl	100051c2 <ssd1306_write_bus.isra.0>
}
1000520e:	bd0e      	pop	{r1, r2, r3, pc}

10005210 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10005210:	0002      	movs	r2, r0
10005212:	b510      	push	{r4, lr}
10005214:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10005216:	7911      	ldrb	r1, [r2, #4]
10005218:	2201      	movs	r2, #1
1000521a:	0014      	movs	r4, r2
1000521c:	408c      	lsls	r4, r1
1000521e:	0021      	movs	r1, r4
{
	return gpio_pin_set(spec->port, spec->pin, value);
10005220:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10005222:	6904      	ldr	r4, [r0, #16]
10005224:	6824      	ldr	r4, [r4, #0]
10005226:	420c      	tst	r4, r1
10005228:	d000      	beq.n	1000522c <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
1000522a:	4053      	eors	r3, r2
	if (value != 0)	{
1000522c:	2b00      	cmp	r3, #0
1000522e:	d003      	beq.n	10005238 <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
10005230:	6883      	ldr	r3, [r0, #8]
10005232:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10005234:	4798      	blx	r3
}
10005236:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10005238:	6883      	ldr	r3, [r0, #8]
1000523a:	691b      	ldr	r3, [r3, #16]
1000523c:	e7fa      	b.n	10005234 <gpio_pin_set_dt.isra.0+0x24>

1000523e <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
1000523e:	23d0      	movs	r3, #208	; 0xd0
10005240:	061b      	lsls	r3, r3, #24
10005242:	685b      	ldr	r3, [r3, #4]
}
10005244:	2000      	movs	r0, #0
	*value = gpio_get_all();
10005246:	600b      	str	r3, [r1, #0]
}
10005248:	4770      	bx	lr

1000524a <gpio_rpi_port_set_bits_raw>:
{
1000524a:	000a      	movs	r2, r1
1000524c:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000524e:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10005250:	0010      	movs	r0, r2
10005252:	6919      	ldr	r1, [r3, #16]
10005254:	4388      	bics	r0, r1
10005256:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10005258:	20d0      	movs	r0, #208	; 0xd0
1000525a:	0600      	lsls	r0, r0, #24
1000525c:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000525e:	691c      	ldr	r4, [r3, #16]
10005260:	6959      	ldr	r1, [r3, #20]
10005262:	4021      	ands	r1, r4
10005264:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10005266:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10005268:	6919      	ldr	r1, [r3, #16]
1000526a:	695b      	ldr	r3, [r3, #20]
1000526c:	4011      	ands	r1, r2
1000526e:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10005270:	6241      	str	r1, [r0, #36]	; 0x24
}
10005272:	2000      	movs	r0, #0
10005274:	bd10      	pop	{r4, pc}

10005276 <gpio_rpi_port_clear_bits_raw>:
{
10005276:	000a      	movs	r2, r1
10005278:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000527a:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
1000527c:	0010      	movs	r0, r2
1000527e:	6919      	ldr	r1, [r3, #16]
10005280:	4388      	bics	r0, r1
10005282:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10005284:	20d0      	movs	r0, #208	; 0xd0
10005286:	0600      	lsls	r0, r0, #24
10005288:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000528a:	691c      	ldr	r4, [r3, #16]
1000528c:	6959      	ldr	r1, [r3, #20]
1000528e:	4021      	ands	r1, r4
10005290:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10005292:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10005294:	6919      	ldr	r1, [r3, #16]
10005296:	695b      	ldr	r3, [r3, #20]
10005298:	4011      	ands	r1, r2
1000529a:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000529c:	6281      	str	r1, [r0, #40]	; 0x28
}
1000529e:	2000      	movs	r0, #0
100052a0:	bd10      	pop	{r4, pc}

100052a2 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
100052a2:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
100052a4:	0008      	movs	r0, r1
100052a6:	691a      	ldr	r2, [r3, #16]
100052a8:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
100052aa:	22d0      	movs	r2, #208	; 0xd0
100052ac:	0612      	lsls	r2, r2, #24
100052ae:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
100052b0:	691b      	ldr	r3, [r3, #16]
}
100052b2:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
100052b4:	400b      	ands	r3, r1
100052b6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100052b8:	4770      	bx	lr

100052ba <gpio_rpi_manage_callback>:
{
100052ba:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
100052bc:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100052be:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
100052c0:	2800      	cmp	r0, #0
100052c2:	d021      	beq.n	10005308 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100052c4:	4288      	cmp	r0, r1
100052c6:	d11b      	bne.n	10005300 <gpio_rpi_manage_callback+0x46>
	return node->next;
100052c8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
100052ca:	689c      	ldr	r4, [r3, #8]
	list->head = node;
100052cc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100052ce:	42a1      	cmp	r1, r4
100052d0:	d100      	bne.n	100052d4 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100052d2:	6098      	str	r0, [r3, #8]
	parent->next = child;
100052d4:	2000      	movs	r0, #0
100052d6:	6008      	str	r0, [r1, #0]
	if (set) {
100052d8:	4282      	cmp	r2, r0
100052da:	d006      	beq.n	100052ea <gpio_rpi_manage_callback+0x30>
	return list->head;
100052dc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
100052de:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
100052e0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
100052e2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
100052e4:	2a00      	cmp	r2, #0
100052e6:	d100      	bne.n	100052ea <gpio_rpi_manage_callback+0x30>
	list->tail = node;
100052e8:	6099      	str	r1, [r3, #8]
	return 0;
100052ea:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
100052ec:	e010      	b.n	10005310 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100052ee:	4281      	cmp	r1, r0
100052f0:	d106      	bne.n	10005300 <gpio_rpi_manage_callback+0x46>
	return node->next;
100052f2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
100052f4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100052f6:	6898      	ldr	r0, [r3, #8]
100052f8:	4281      	cmp	r1, r0
100052fa:	d1eb      	bne.n	100052d4 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100052fc:	609c      	str	r4, [r3, #8]
}
100052fe:	e7e9      	b.n	100052d4 <gpio_rpi_manage_callback+0x1a>
	return node->next;
10005300:	0004      	movs	r4, r0
10005302:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005304:	2800      	cmp	r0, #0
10005306:	d1f2      	bne.n	100052ee <gpio_rpi_manage_callback+0x34>
			if (!set) {
10005308:	2a00      	cmp	r2, #0
1000530a:	d1e7      	bne.n	100052dc <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
1000530c:	2016      	movs	r0, #22
1000530e:	4240      	negs	r0, r0
}
10005310:	bd10      	pop	{r4, pc}

10005312 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10005312:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10005314:	6843      	ldr	r3, [r0, #4]
10005316:	685b      	ldr	r3, [r3, #4]
10005318:	4798      	blx	r3
	return 0;
}
1000531a:	2000      	movs	r0, #0
1000531c:	bd10      	pop	{r4, pc}

1000531e <gpio_rpi_pin_interrupt_configure>:
{
1000531e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005320:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10005322:	6907      	ldr	r7, [r0, #16]
{
10005324:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005326:	210f      	movs	r1, #15
10005328:	2200      	movs	r2, #0
1000532a:	0028      	movs	r0, r5
{
1000532c:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000532e:	f7fe f887 	bl	10003440 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005332:	2201      	movs	r2, #1
10005334:	0013      	movs	r3, r2
10005336:	40ab      	lsls	r3, r5
10005338:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
1000533a:	2380      	movs	r3, #128	; 0x80
1000533c:	039b      	lsls	r3, r3, #14
1000533e:	429e      	cmp	r6, r3
10005340:	d105      	bne.n	1000534e <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005342:	68fb      	ldr	r3, [r7, #12]
10005344:	9a01      	ldr	r2, [sp, #4]
10005346:	4393      	bics	r3, r2
}
10005348:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000534a:	60fb      	str	r3, [r7, #12]
}
1000534c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
1000534e:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10005350:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10005352:	04db      	lsls	r3, r3, #19
10005354:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10005356:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10005358:	01f6      	lsls	r6, r6, #7
1000535a:	d50d      	bpl.n	10005378 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
1000535c:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
1000535e:	2b00      	cmp	r3, #0
10005360:	d001      	beq.n	10005366 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10005362:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10005364:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10005366:	2201      	movs	r2, #1
10005368:	0028      	movs	r0, r5
1000536a:	f7fe f869 	bl	10003440 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000536e:	68fb      	ldr	r3, [r7, #12]
10005370:	9a01      	ldr	r2, [sp, #4]
10005372:	431a      	orrs	r2, r3
10005374:	0013      	movs	r3, r2
10005376:	e7e7      	b.n	10005348 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10005378:	2b00      	cmp	r3, #0
1000537a:	d0f4      	beq.n	10005366 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
1000537c:	2302      	movs	r3, #2
1000537e:	e7f1      	b.n	10005364 <gpio_rpi_pin_interrupt_configure+0x46>

10005380 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10005380:	b510      	push	{r4, lr}
10005382:	2200      	movs	r2, #0
10005384:	2103      	movs	r1, #3
10005386:	200d      	movs	r0, #13
10005388:	f7fc ffba 	bl	10002300 <z_arm_irq_priority_set>
1000538c:	200d      	movs	r0, #13
1000538e:	f7fc ffab 	bl	100022e8 <arch_irq_enable>
10005392:	bd10      	pop	{r4, pc}

10005394 <gpio_rpi_port_set_masked_raw>:
{
10005394:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
10005396:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005398:	20d0      	movs	r0, #208	; 0xd0
1000539a:	0600      	lsls	r0, r0, #24
1000539c:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
1000539e:	6925      	ldr	r5, [r4, #16]
100053a0:	4053      	eors	r3, r2
100053a2:	400b      	ands	r3, r1
100053a4:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
100053a6:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100053a8:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
100053aa:	6a03      	ldr	r3, [r0, #32]
100053ac:	4053      	eors	r3, r2
100053ae:	439d      	bics	r5, r3
100053b0:	002b      	movs	r3, r5
100053b2:	6925      	ldr	r5, [r4, #16]
100053b4:	401d      	ands	r5, r3
100053b6:	6963      	ldr	r3, [r4, #20]
100053b8:	402b      	ands	r3, r5
100053ba:	62c3      	str	r3, [r0, #44]	; 0x2c
100053bc:	6a03      	ldr	r3, [r0, #32]
100053be:	405a      	eors	r2, r3
100053c0:	400a      	ands	r2, r1
100053c2:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
100053c4:	6963      	ldr	r3, [r4, #20]
100053c6:	4011      	ands	r1, r2
100053c8:	4399      	bics	r1, r3
100053ca:	62c1      	str	r1, [r0, #44]	; 0x2c
}
100053cc:	2000      	movs	r0, #0
100053ce:	bd30      	pop	{r4, r5, pc}

100053d0 <gpio_rpi_configure>:
{
100053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100053d2:	0015      	movs	r5, r2
100053d4:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
100053d6:	2401      	movs	r4, #1
100053d8:	0952      	lsrs	r2, r2, #5
100053da:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
100053dc:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
100053de:	4021      	ands	r1, r4
100053e0:	0038      	movs	r0, r7
100053e2:	4022      	ands	r2, r4
100053e4:	f7fd ffe2 	bl	100033ac <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100053e8:	2105      	movs	r1, #5
100053ea:	0038      	movs	r0, r7
100053ec:	f7fd ffc8 	bl	10003380 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100053f0:	03ab      	lsls	r3, r5, #14
100053f2:	d525      	bpl.n	10005440 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
100053f4:	40bc      	lsls	r4, r7
100053f6:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
100053f8:	07a9      	lsls	r1, r5, #30
100053fa:	d515      	bpl.n	10005428 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
100053fc:	4322      	orrs	r2, r4
100053fe:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005400:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
10005402:	6971      	ldr	r1, [r6, #20]
10005404:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005406:	0768      	lsls	r0, r5, #29
10005408:	d507      	bpl.n	1000541a <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
1000540a:	4321      	orrs	r1, r4
1000540c:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
1000540e:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
10005410:	036d      	lsls	r5, r5, #13
10005412:	d507      	bpl.n	10005424 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
10005414:	6254      	str	r4, [r2, #36]	; 0x24
}
10005416:	2000      	movs	r0, #0
10005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
1000541a:	43a1      	bics	r1, r4
1000541c:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
1000541e:	6154      	str	r4, [r2, #20]
    if (out)
10005420:	032d      	lsls	r5, r5, #12
10005422:	d4f7      	bmi.n	10005414 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
10005424:	6294      	str	r4, [r2, #40]	; 0x28
}
10005426:	e7f6      	b.n	10005416 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
10005428:	43a2      	bics	r2, r4
1000542a:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
1000542c:	22d0      	movs	r2, #208	; 0xd0
1000542e:	0612      	lsls	r2, r2, #24
10005430:	0329      	lsls	r1, r5, #12
10005432:	d501      	bpl.n	10005438 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
10005434:	6154      	str	r4, [r2, #20]
}
10005436:	e7ed      	b.n	10005414 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10005438:	036d      	lsls	r5, r5, #13
1000543a:	d5eb      	bpl.n	10005414 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
1000543c:	6194      	str	r4, [r2, #24]
}
1000543e:	e7e9      	b.n	10005414 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
10005440:	03ed      	lsls	r5, r5, #15
10005442:	d5e8      	bpl.n	10005416 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
10005444:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10005446:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
10005448:	0612      	lsls	r2, r2, #24
1000544a:	e7eb      	b.n	10005424 <gpio_rpi_configure+0x54>

1000544c <i2c_dw_runtime_configure>:
{
1000544c:	b570      	push	{r4, r5, r6, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000544e:	6843      	ldr	r3, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10005450:	6902      	ldr	r2, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005452:	681c      	ldr	r4, [r3, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
10005454:	2307      	movs	r3, #7
10005456:	0848      	lsrs	r0, r1, #1
	dw->app_config = config;
10005458:	6111      	str	r1, [r2, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000545a:	4003      	ands	r3, r0
1000545c:	0745      	lsls	r5, r0, #29
1000545e:	d407      	bmi.n	10005470 <i2c_dw_runtime_configure+0x24>
10005460:	2506      	movs	r5, #6
10005462:	4228      	tst	r0, r5
10005464:	d124      	bne.n	100054b0 <i2c_dw_runtime_configure+0x64>
10005466:	2b01      	cmp	r3, #1
10005468:	d00c      	beq.n	10005484 <i2c_dw_runtime_configure+0x38>
1000546a:	2016      	movs	r0, #22
1000546c:	4240      	negs	r0, r0
1000546e:	e031      	b.n	100054d4 <i2c_dw_runtime_configure+0x88>
10005470:	2b04      	cmp	r3, #4
10005472:	d1fa      	bne.n	1000546a <i2c_dw_runtime_configure+0x1e>
		if (dw->support_hs_mode) {
10005474:	0013      	movs	r3, r2
10005476:	3308      	adds	r3, #8
10005478:	7fdb      	ldrb	r3, [r3, #31]
1000547a:	2b00      	cmp	r3, #0
1000547c:	d0f5      	beq.n	1000546a <i2c_dw_runtime_configure+0x1e>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
1000547e:	0020      	movs	r0, r4
10005480:	30a4      	adds	r0, #164	; 0xa4
10005482:	e017      	b.n	100054b4 <i2c_dw_runtime_configure+0x68>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
10005484:	0020      	movs	r0, r4
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10005486:	26fa      	movs	r6, #250	; 0xfa
10005488:	30a0      	adds	r0, #160	; 0xa0
	return *(volatile uint32_t *)addr;
1000548a:	6805      	ldr	r5, [r0, #0]
1000548c:	0076      	lsls	r6, r6, #1
1000548e:	3507      	adds	r5, #7
			value = I2C_STD_LCNT;
10005490:	0033      	movs	r3, r6
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10005492:	42b5      	cmp	r5, r6
10005494:	d301      	bcc.n	1000549a <i2c_dw_runtime_configure+0x4e>
10005496:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
10005498:	3308      	adds	r3, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000549a:	26c8      	movs	r6, #200	; 0xc8
		dw->lcnt = value;
1000549c:	8453      	strh	r3, [r2, #34]	; 0x22
1000549e:	6805      	ldr	r5, [r0, #0]
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
100054a0:	0076      	lsls	r6, r6, #1
100054a2:	3505      	adds	r5, #5
			value = I2C_STD_HCNT;
100054a4:	0033      	movs	r3, r6
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
100054a6:	42b5      	cmp	r5, r6
100054a8:	d311      	bcc.n	100054ce <i2c_dw_runtime_configure+0x82>
100054aa:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 6;
100054ac:	3306      	adds	r3, #6
100054ae:	e00e      	b.n	100054ce <i2c_dw_runtime_configure+0x82>
100054b0:	0020      	movs	r0, r4
100054b2:	30a0      	adds	r0, #160	; 0xa0
100054b4:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_LCNT;
100054b6:	2357      	movs	r3, #87	; 0x57
		if (I2C_FS_LCNT <= (read_fs_spklen(reg_base) + 7)) {
100054b8:	3507      	adds	r5, #7
100054ba:	2d56      	cmp	r5, #86	; 0x56
100054bc:	d901      	bls.n	100054c2 <i2c_dw_runtime_configure+0x76>
100054be:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
100054c0:	3308      	adds	r3, #8
		dw->lcnt = value;
100054c2:	8453      	strh	r3, [r2, #34]	; 0x22
100054c4:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_HCNT;
100054c6:	234b      	movs	r3, #75	; 0x4b
		if (I2C_FS_HCNT <= (read_fs_spklen(reg_base) + 5)) {
100054c8:	3505      	adds	r5, #5
100054ca:	2d4a      	cmp	r5, #74	; 0x4a
100054cc:	d8ed      	bhi.n	100054aa <i2c_dw_runtime_configure+0x5e>
	uint32_t	rc = 0U;
100054ce:	2000      	movs	r0, #0
		dw->hcnt = value;
100054d0:	b29b      	uxth	r3, r3
100054d2:	8413      	strh	r3, [r2, #32]
100054d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
100054d6:	2310      	movs	r3, #16
100054d8:	430b      	orrs	r3, r1
100054da:	6113      	str	r3, [r2, #16]
}
100054dc:	bd70      	pop	{r4, r5, r6, pc}

100054de <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
100054de:	b510      	push	{r4, lr}
100054e0:	2200      	movs	r2, #0
100054e2:	2103      	movs	r1, #3
100054e4:	2017      	movs	r0, #23
100054e6:	f7fc ff0b 	bl	10002300 <z_arm_irq_priority_set>
100054ea:	2017      	movs	r0, #23
100054ec:	f7fc fefc 	bl	100022e8 <arch_irq_enable>
100054f0:	bd10      	pop	{r4, pc}

100054f2 <i2c_dw_isr>:
{
100054f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
100054f4:	6843      	ldr	r3, [r0, #4]
{
100054f6:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
100054f8:	681b      	ldr	r3, [r3, #0]
{
100054fa:	4684      	mov	ip, r0
	return (uint32_t)DEVICE_MMIO_GET(dev);
100054fc:	9301      	str	r3, [sp, #4]
100054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	struct i2c_dw_dev_config * const dw = port->data;
10005500:	6902      	ldr	r2, [r0, #16]
10005502:	9302      	str	r3, [sp, #8]
10005504:	9b01      	ldr	r3, [sp, #4]
10005506:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10005508:	07db      	lsls	r3, r3, #31
1000550a:	d50f      	bpl.n	1000552c <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
1000550c:	214b      	movs	r1, #75	; 0x4b
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
1000550e:	9802      	ldr	r0, [sp, #8]
10005510:	2304      	movs	r3, #4
10005512:	4208      	tst	r0, r1
10005514:	d00c      	beq.n	10005530 <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
10005516:	3205      	adds	r2, #5
10005518:	77d3      	strb	r3, [r2, #31]
	struct i2c_dw_dev_config * const dw = dev->data;
1000551a:	4663      	mov	r3, ip
	*(volatile uint32_t *)addr = data;
1000551c:	2200      	movs	r2, #0
1000551e:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005520:	685b      	ldr	r3, [r3, #4]
10005522:	681b      	ldr	r3, [r3, #0]
10005524:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10005528:	f7fe fa46 	bl	100039b8 <z_impl_k_sem_give>
}
1000552c:	b005      	add	sp, #20
1000552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
10005530:	4669      	mov	r1, sp
10005532:	9802      	ldr	r0, [sp, #8]
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10005534:	2408      	movs	r4, #8
10005536:	7a09      	ldrb	r1, [r1, #8]
		if (intr_stat.bits.rx_full) {
10005538:	4218      	tst	r0, r3
1000553a:	d115      	bne.n	10005568 <i2c_dw_isr+0x76>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000553c:	1dd3      	adds	r3, r2, #7
1000553e:	7fd8      	ldrb	r0, [r3, #31]
10005540:	07c0      	lsls	r0, r0, #31
10005542:	d505      	bpl.n	10005550 <i2c_dw_isr+0x5e>
	uint32_t temp = *(volatile uint32_t *)addr;
10005544:	9801      	ldr	r0, [sp, #4]
10005546:	6b04      	ldr	r4, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
10005548:	2010      	movs	r0, #16
1000554a:	4320      	orrs	r0, r4
1000554c:	9c01      	ldr	r4, [sp, #4]
1000554e:	6320      	str	r0, [r4, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10005550:	2410      	movs	r4, #16
10005552:	4221      	tst	r1, r4
10005554:	d124      	bne.n	100055a0 <i2c_dw_isr+0xae>
		if (intr_stat.bits.stop_det) {
10005556:	9b02      	ldr	r3, [sp, #8]
10005558:	059b      	lsls	r3, r3, #22
1000555a:	d5e7      	bpl.n	1000552c <i2c_dw_isr+0x3a>
1000555c:	9b01      	ldr	r3, [sp, #4]
1000555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10005560:	e7db      	b.n	1000551a <i2c_dw_isr+0x28>
	if (dw->xfr_len == 0U) {
10005562:	2b00      	cmp	r3, #0
10005564:	d1ea      	bne.n	1000553c <i2c_dw_isr+0x4a>
10005566:	e015      	b.n	10005594 <i2c_dw_isr+0xa2>
	uint32_t temp = *(volatile uint32_t *)addr;
10005568:	9b01      	ldr	r3, [sp, #4]
1000556a:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
1000556c:	6993      	ldr	r3, [r2, #24]
1000556e:	4220      	tst	r0, r4
10005570:	d0f7      	beq.n	10005562 <i2c_dw_isr+0x70>
10005572:	2b00      	cmp	r3, #0
10005574:	d00e      	beq.n	10005594 <i2c_dw_isr+0xa2>
10005576:	9b01      	ldr	r3, [sp, #4]
10005578:	6918      	ldr	r0, [r3, #16]
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
1000557a:	6953      	ldr	r3, [r2, #20]
1000557c:	7018      	strb	r0, [r3, #0]
		dw->xfr_buf++;
1000557e:	6953      	ldr	r3, [r2, #20]
		dw->rx_pending--;
10005580:	69d0      	ldr	r0, [r2, #28]
		dw->xfr_buf++;
10005582:	3301      	adds	r3, #1
10005584:	6153      	str	r3, [r2, #20]
		dw->xfr_len--;
10005586:	6993      	ldr	r3, [r2, #24]
		dw->rx_pending--;
10005588:	3801      	subs	r0, #1
		dw->xfr_len--;
1000558a:	3b01      	subs	r3, #1
1000558c:	6193      	str	r3, [r2, #24]
		dw->rx_pending--;
1000558e:	61d0      	str	r0, [r2, #28]
		if (dw->xfr_len == 0U) {
10005590:	2b00      	cmp	r3, #0
10005592:	d1e9      	bne.n	10005568 <i2c_dw_isr+0x76>
		dw->state &= ~I2C_DW_CMD_RECV;
10005594:	2402      	movs	r4, #2
10005596:	1d50      	adds	r0, r2, #5
10005598:	7fc3      	ldrb	r3, [r0, #31]
1000559a:	43a3      	bics	r3, r4
1000559c:	77c3      	strb	r3, [r0, #31]
		return;
1000559e:	e7cd      	b.n	1000553c <i2c_dw_isr+0x4a>
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100055a0:	7fd9      	ldrb	r1, [r3, #31]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100055a2:	4660      	mov	r0, ip
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100055a4:	9103      	str	r1, [sp, #12]
100055a6:	2501      	movs	r5, #1
	struct i2c_dw_dev_config * const dw = dev->data;
100055a8:	4661      	mov	r1, ip
	return (uint32_t)DEVICE_MMIO_GET(dev);
100055aa:	6840      	ldr	r0, [r0, #4]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100055ac:	9e03      	ldr	r6, [sp, #12]
	struct i2c_dw_dev_config * const dw = dev->data;
100055ae:	6909      	ldr	r1, [r1, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100055b0:	6800      	ldr	r0, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100055b2:	422e      	tst	r6, r5
100055b4:	d13f      	bne.n	10005636 <i2c_dw_isr+0x144>
	if (dw->xfr_len == 0U) {
100055b6:	698e      	ldr	r6, [r1, #24]
100055b8:	2e00      	cmp	r6, #0
100055ba:	d132      	bne.n	10005622 <i2c_dw_isr+0x130>
	uint32_t temp = *(volatile uint32_t *)addr;
100055bc:	6b06      	ldr	r6, [r0, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
100055be:	3105      	adds	r1, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100055c0:	43a6      	bics	r6, r4
100055c2:	6306      	str	r6, [r0, #48]	; 0x30
100055c4:	7fc8      	ldrb	r0, [r1, #31]
100055c6:	43a8      	bics	r0, r5
100055c8:	77c8      	strb	r0, [r1, #31]
			if (((dw->xfr_len == 0U)
100055ca:	6992      	ldr	r2, [r2, #24]
100055cc:	2a00      	cmp	r2, #0
100055ce:	d1c2      	bne.n	10005556 <i2c_dw_isr+0x64>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
100055d0:	7fdb      	ldrb	r3, [r3, #31]
100055d2:	079b      	lsls	r3, r3, #30
100055d4:	d4bf      	bmi.n	10005556 <i2c_dw_isr+0x64>
100055d6:	e7a0      	b.n	1000551a <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
100055d8:	698d      	ldr	r5, [r1, #24]
100055da:	2d00      	cmp	r5, #0
100055dc:	d025      	beq.n	1000562a <i2c_dw_isr+0x138>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100055de:	2704      	movs	r7, #4
100055e0:	1dce      	adds	r6, r1, #7
		data = dw->xfr_buf[0];
100055e2:	694b      	ldr	r3, [r1, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100055e4:	7ff4      	ldrb	r4, [r6, #31]
		data = dw->xfr_buf[0];
100055e6:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100055e8:	423c      	tst	r4, r7
100055ea:	d005      	beq.n	100055f8 <i2c_dw_isr+0x106>
			data |= IC_DATA_CMD_RESTART;
100055ec:	2780      	movs	r7, #128	; 0x80
100055ee:	00ff      	lsls	r7, r7, #3
100055f0:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100055f2:	2704      	movs	r7, #4
100055f4:	43bc      	bics	r4, r7
100055f6:	77f4      	strb	r4, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
100055f8:	2d01      	cmp	r5, #1
100055fa:	d107      	bne.n	1000560c <i2c_dw_isr+0x11a>
100055fc:	1dcc      	adds	r4, r1, #7
100055fe:	7fe4      	ldrb	r4, [r4, #31]
10005600:	3501      	adds	r5, #1
10005602:	422c      	tst	r4, r5
10005604:	d002      	beq.n	1000560c <i2c_dw_isr+0x11a>
			data |= IC_DATA_CMD_STOP;
10005606:	2480      	movs	r4, #128	; 0x80
10005608:	00a4      	lsls	r4, r4, #2
1000560a:	4323      	orrs	r3, r4
	*(volatile uint32_t *)addr = data;
1000560c:	6103      	str	r3, [r0, #16]
		dw->xfr_len--;
1000560e:	698b      	ldr	r3, [r1, #24]
10005610:	3b01      	subs	r3, #1
10005612:	618b      	str	r3, [r1, #24]
		dw->xfr_buf++;
10005614:	694b      	ldr	r3, [r1, #20]
10005616:	3301      	adds	r3, #1
10005618:	614b      	str	r3, [r1, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
1000561a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
1000561c:	065b      	lsls	r3, r3, #25
1000561e:	d500      	bpl.n	10005622 <i2c_dw_isr+0x130>
10005620:	e77b      	b.n	1000551a <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005622:	2402      	movs	r4, #2
10005624:	6f03      	ldr	r3, [r0, #112]	; 0x70
10005626:	4223      	tst	r3, r4
10005628:	d1d6      	bne.n	100055d8 <i2c_dw_isr+0xe6>
			if (((dw->xfr_len == 0U)
1000562a:	6993      	ldr	r3, [r2, #24]
1000562c:	2b00      	cmp	r3, #0
1000562e:	d192      	bne.n	10005556 <i2c_dw_isr+0x64>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
10005630:	3207      	adds	r2, #7
10005632:	7fd3      	ldrb	r3, [r2, #31]
10005634:	e7cd      	b.n	100055d2 <i2c_dw_isr+0xe0>
	if (dw->request_bytes == 0U) {
10005636:	1d8d      	adds	r5, r1, #6
10005638:	7fee      	ldrb	r6, [r5, #31]
1000563a:	2e00      	cmp	r6, #0
1000563c:	d103      	bne.n	10005646 <i2c_dw_isr+0x154>
	uint32_t temp = *(volatile uint32_t *)addr;
1000563e:	6b01      	ldr	r1, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005640:	43a1      	bics	r1, r4
10005642:	6301      	str	r1, [r0, #48]	; 0x30
10005644:	e7c1      	b.n	100055ca <i2c_dw_isr+0xd8>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10005646:	0003      	movs	r3, r0
10005648:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
1000564a:	681b      	ldr	r3, [r3, #0]
1000564c:	6f85      	ldr	r5, [r0, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000564e:	041c      	lsls	r4, r3, #16
10005650:	0e24      	lsrs	r4, r4, #24
10005652:	3401      	adds	r4, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10005654:	69cf      	ldr	r7, [r1, #28]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10005656:	b2e4      	uxtb	r4, r4
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10005658:	1b65      	subs	r5, r4, r5
1000565a:	1bed      	subs	r5, r5, r7
1000565c:	b2ef      	uxtb	r7, r5
	if (rx_empty < 0) {
1000565e:	062d      	lsls	r5, r5, #24
10005660:	d505      	bpl.n	1000566e <i2c_dw_isr+0x17c>
			if (((dw->xfr_len == 0U)
10005662:	6993      	ldr	r3, [r2, #24]
10005664:	2b00      	cmp	r3, #0
10005666:	d000      	beq.n	1000566a <i2c_dw_isr+0x178>
10005668:	e775      	b.n	10005556 <i2c_dw_isr+0x64>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
1000566a:	9b03      	ldr	r3, [sp, #12]
1000566c:	e7b1      	b.n	100055d2 <i2c_dw_isr+0xe0>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
1000566e:	021b      	lsls	r3, r3, #8
10005670:	6f45      	ldr	r5, [r0, #116]	; 0x74
10005672:	0e1b      	lsrs	r3, r3, #24
10005674:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10005676:	1b5b      	subs	r3, r3, r5
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10005678:	b2db      	uxtb	r3, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
1000567a:	1c35      	adds	r5, r6, #0
1000567c:	42a6      	cmp	r6, r4
1000567e:	d900      	bls.n	10005682 <i2c_dw_isr+0x190>
10005680:	1c25      	adds	r5, r4, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10005682:	b2ed      	uxtb	r5, r5
10005684:	42ab      	cmp	r3, r5
10005686:	dd00      	ble.n	1000568a <i2c_dw_isr+0x198>
10005688:	002b      	movs	r3, r5
1000568a:	42bb      	cmp	r3, r7
1000568c:	dd00      	ble.n	10005690 <i2c_dw_isr+0x19e>
1000568e:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005690:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10005692:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
10005694:	2b00      	cmp	r3, #0
10005696:	d0c8      	beq.n	1000562a <i2c_dw_isr+0x138>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005698:	1dcd      	adds	r5, r1, #7
1000569a:	7fec      	ldrb	r4, [r5, #31]
1000569c:	4234      	tst	r4, r6
1000569e:	d01d      	beq.n	100056dc <i2c_dw_isr+0x1ea>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100056a0:	43b4      	bics	r4, r6
100056a2:	77ec      	strb	r4, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
100056a4:	24a0      	movs	r4, #160	; 0xa0
100056a6:	00e4      	lsls	r4, r4, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
100056a8:	2702      	movs	r7, #2
100056aa:	7fed      	ldrb	r5, [r5, #31]
100056ac:	423d      	tst	r5, r7
100056ae:	d006      	beq.n	100056be <i2c_dw_isr+0x1cc>
		    && (dw->request_bytes == 1U)) {
100056b0:	1d8d      	adds	r5, r1, #6
100056b2:	7fed      	ldrb	r5, [r5, #31]
100056b4:	2d01      	cmp	r5, #1
100056b6:	d102      	bne.n	100056be <i2c_dw_isr+0x1cc>
			data |= IC_DATA_CMD_STOP;
100056b8:	2580      	movs	r5, #128	; 0x80
100056ba:	00ad      	lsls	r5, r5, #2
100056bc:	432c      	orrs	r4, r5
100056be:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
100056c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		cnt--;
100056c2:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100056c4:	43bd      	bics	r5, r7
100056c6:	6305      	str	r5, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
100056c8:	6104      	str	r4, [r0, #16]
		dw->rx_pending++;
100056ca:	69cc      	ldr	r4, [r1, #28]
		dw->request_bytes--;
100056cc:	1d8d      	adds	r5, r1, #6
		dw->rx_pending++;
100056ce:	3401      	adds	r4, #1
100056d0:	61cc      	str	r4, [r1, #28]
		dw->request_bytes--;
100056d2:	7fec      	ldrb	r4, [r5, #31]
		cnt--;
100056d4:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
100056d6:	3c01      	subs	r4, #1
100056d8:	77ec      	strb	r4, [r5, #31]
		cnt--;
100056da:	e7db      	b.n	10005694 <i2c_dw_isr+0x1a2>
		data = IC_DATA_CMD_CMD;
100056dc:	2480      	movs	r4, #128	; 0x80
100056de:	0064      	lsls	r4, r4, #1
100056e0:	e7e2      	b.n	100056a8 <i2c_dw_isr+0x1b6>

100056e2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
100056e2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
100056e4:	6803      	ldr	r3, [r0, #0]
100056e6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
100056e8:	7905      	ldrb	r5, [r0, #4]
100056ea:	6804      	ldr	r4, [r0, #0]
100056ec:	00ed      	lsls	r5, r5, #3
100056ee:	1964      	adds	r4, r4, r5
100056f0:	42a3      	cmp	r3, r4
100056f2:	d302      	bcc.n	100056fa <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
100056f4:	2002      	movs	r0, #2
100056f6:	4240      	negs	r0, r0
}
100056f8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
100056fa:	795c      	ldrb	r4, [r3, #5]
100056fc:	428c      	cmp	r4, r1
100056fe:	d001      	beq.n	10005704 <pinctrl_lookup_state+0x22>
		(*state)++;
10005700:	3308      	adds	r3, #8
10005702:	e7f0      	b.n	100056e6 <pinctrl_lookup_state+0x4>
			return 0;
10005704:	2000      	movs	r0, #0
10005706:	e7f7      	b.n	100056f8 <pinctrl_lookup_state+0x16>

10005708 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000570a:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000570c:	2601      	movs	r6, #1
1000570e:	008d      	lsls	r5, r1, #2
10005710:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10005712:	42ac      	cmp	r4, r5
10005714:	d101      	bne.n	1000571a <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10005716:	2000      	movs	r0, #0
10005718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
1000571a:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
1000571c:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000571e:	06c0      	lsls	r0, r0, #27
10005720:	0ec0      	lsrs	r0, r0, #27
10005722:	f000 f987 	bl	10005a34 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10005726:	8821      	ldrh	r1, [r4, #0]
10005728:	7820      	ldrb	r0, [r4, #0]
1000572a:	05c9      	lsls	r1, r1, #23
1000572c:	06c0      	lsls	r0, r0, #27
1000572e:	0f09      	lsrs	r1, r1, #28
10005730:	0ec0      	lsrs	r0, r0, #27
10005732:	f7fd fe25 	bl	10003380 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10005736:	7861      	ldrb	r1, [r4, #1]
10005738:	7820      	ldrb	r0, [r4, #0]
1000573a:	09ca      	lsrs	r2, r1, #7
1000573c:	06c0      	lsls	r0, r0, #27
1000573e:	0649      	lsls	r1, r1, #25
10005740:	0fc9      	lsrs	r1, r1, #31
10005742:	0ec0      	lsrs	r0, r0, #27
10005744:	f7fd fe32 	bl	100033ac <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10005748:	7861      	ldrb	r1, [r4, #1]
1000574a:	7820      	ldrb	r0, [r4, #0]
1000574c:	06c9      	lsls	r1, r1, #27
1000574e:	06c0      	lsls	r0, r0, #27
10005750:	0f09      	lsrs	r1, r1, #28
10005752:	0ec0      	lsrs	r0, r0, #27
10005754:	f7fd fe58 	bl	10003408 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005758:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000575a:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000575c:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000575e:	06c0      	lsls	r0, r0, #27
10005760:	4031      	ands	r1, r6
10005762:	0ec0      	lsrs	r0, r0, #27
10005764:	f7fd fe42 	bl	100033ec <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10005768:	78a1      	ldrb	r1, [r4, #2]
1000576a:	7820      	ldrb	r0, [r4, #0]
1000576c:	0789      	lsls	r1, r1, #30
1000576e:	06c0      	lsls	r0, r0, #27
10005770:	0fc9      	lsrs	r1, r1, #31
10005772:	0ec0      	lsrs	r0, r0, #27
10005774:	f7fd fe2c 	bl	100033d0 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10005778:	78a1      	ldrb	r1, [r4, #2]
1000577a:	7820      	ldrb	r0, [r4, #0]
1000577c:	07c9      	lsls	r1, r1, #31
1000577e:	06c0      	lsls	r0, r0, #27
10005780:	0fc9      	lsrs	r1, r1, #31
10005782:	0ec0      	lsrs	r0, r0, #27
10005784:	f7fd fe7e 	bl	10003484 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10005788:	003c      	movs	r4, r7
1000578a:	e7c2      	b.n	10005712 <pinctrl_configure_pins+0xa>

1000578c <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
1000578c:	2000      	movs	r0, #0
1000578e:	4770      	bx	lr

10005790 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10005790:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10005792:	7900      	ldrb	r0, [r0, #4]
10005794:	2802      	cmp	r0, #2
10005796:	d009      	beq.n	100057ac <reset_rpi_read_register.isra.0+0x1c>
10005798:	2804      	cmp	r0, #4
1000579a:	d00b      	beq.n	100057b4 <reset_rpi_read_register.isra.0+0x24>
1000579c:	2801      	cmp	r0, #1
1000579e:	d10c      	bne.n	100057ba <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
100057a0:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
100057a2:	780b      	ldrb	r3, [r1, #0]
100057a4:	b2db      	uxtb	r3, r3
	return 0;
100057a6:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
100057a8:	6013      	str	r3, [r2, #0]
}
100057aa:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
100057ac:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
100057ae:	880b      	ldrh	r3, [r1, #0]
100057b0:	b29b      	uxth	r3, r3
		break;
100057b2:	e7f8      	b.n	100057a6 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
100057b4:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
100057b6:	680b      	ldr	r3, [r1, #0]
		break;
100057b8:	e7f5      	b.n	100057a6 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
100057ba:	2016      	movs	r0, #22
100057bc:	4240      	negs	r0, r0
100057be:	e7f4      	b.n	100057aa <reset_rpi_read_register.isra.0+0x1a>

100057c0 <reset_rpi_update>:
{
100057c0:	0003      	movs	r3, r0
100057c2:	b5f0      	push	{r4, r5, r6, r7, lr}
100057c4:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
100057c6:	685f      	ldr	r7, [r3, #4]
{
100057c8:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
100057ca:	793e      	ldrb	r6, [r7, #4]
{
100057cc:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100057ce:	00f1      	lsls	r1, r6, #3
100057d0:	f7fa fd3a 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100057d4:	aa03      	add	r2, sp, #12
100057d6:	0004      	movs	r4, r0
100057d8:	000d      	movs	r5, r1
100057da:	b281      	uxth	r1, r0
100057dc:	0038      	movs	r0, r7
100057de:	f7ff ffd7 	bl	10005790 <reset_rpi_read_register.isra.0>
	if (ret) {
100057e2:	2800      	cmp	r0, #0
100057e4:	d117      	bne.n	10005816 <reset_rpi_update+0x56>
		value |= BIT(regbit);
100057e6:	2201      	movs	r2, #1
100057e8:	9903      	ldr	r1, [sp, #12]
100057ea:	b2ed      	uxtb	r5, r5
100057ec:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
100057ee:	000b      	movs	r3, r1
		value |= BIT(regbit);
100057f0:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
100057f2:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
100057f4:	797d      	ldrb	r5, [r7, #5]
100057f6:	9a01      	ldr	r2, [sp, #4]
100057f8:	4295      	cmp	r5, r2
100057fa:	d001      	beq.n	10005800 <reset_rpi_update+0x40>
		value |= BIT(regbit);
100057fc:	4663      	mov	r3, ip
100057fe:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10005800:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
10005802:	2e02      	cmp	r6, #2
10005804:	d009      	beq.n	1000581a <reset_rpi_update+0x5a>
10005806:	2e04      	cmp	r6, #4
10005808:	d00c      	beq.n	10005824 <reset_rpi_update+0x64>
1000580a:	2e01      	cmp	r6, #1
1000580c:	d10e      	bne.n	1000582c <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000580e:	b2a4      	uxth	r4, r4
10005810:	b2db      	uxtb	r3, r3
10005812:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005814:	7023      	strb	r3, [r4, #0]
}
10005816:	b005      	add	sp, #20
10005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
1000581a:	b2a4      	uxth	r4, r4
1000581c:	b29b      	uxth	r3, r3
1000581e:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10005820:	8023      	strh	r3, [r4, #0]
}
10005822:	e7f8      	b.n	10005816 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10005824:	b2a4      	uxth	r4, r4
10005826:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
10005828:	6023      	str	r3, [r4, #0]
}
1000582a:	e7f4      	b.n	10005816 <reset_rpi_update+0x56>
	switch (config->reg_width) {
1000582c:	2016      	movs	r0, #22
1000582e:	4240      	negs	r0, r0
10005830:	e7f1      	b.n	10005816 <reset_rpi_update+0x56>

10005832 <reset_rpi_line_assert>:
{
10005832:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10005834:	2201      	movs	r2, #1
10005836:	f7ff ffc3 	bl	100057c0 <reset_rpi_update>
}
1000583a:	bd10      	pop	{r4, pc}

1000583c <reset_rpi_line_deassert>:
{
1000583c:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
1000583e:	2200      	movs	r2, #0
10005840:	f7ff ffbe 	bl	100057c0 <reset_rpi_update>
}
10005844:	bd10      	pop	{r4, pc}

10005846 <reset_rpi_line_toggle>:
{
10005846:	b570      	push	{r4, r5, r6, lr}
10005848:	0004      	movs	r4, r0
1000584a:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
1000584c:	f7ff fff1 	bl	10005832 <reset_rpi_line_assert>
	if (ret) {
10005850:	2800      	cmp	r0, #0
10005852:	d103      	bne.n	1000585c <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10005854:	0029      	movs	r1, r5
10005856:	0020      	movs	r0, r4
10005858:	f7ff fff0 	bl	1000583c <reset_rpi_line_deassert>
}
1000585c:	bd70      	pop	{r4, r5, r6, pc}

1000585e <reset_rpi_status>:
{
1000585e:	0003      	movs	r3, r0
10005860:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10005862:	685e      	ldr	r6, [r3, #4]
{
10005864:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10005866:	7931      	ldrb	r1, [r6, #4]
{
10005868:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000586a:	00c9      	lsls	r1, r1, #3
1000586c:	f7fa fcec 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005870:	aa01      	add	r2, sp, #4
10005872:	000d      	movs	r5, r1
10005874:	b281      	uxth	r1, r0
10005876:	0030      	movs	r0, r6
10005878:	f7ff ff8a 	bl	10005790 <reset_rpi_read_register.isra.0>
	if (ret) {
1000587c:	2800      	cmp	r0, #0
1000587e:	d109      	bne.n	10005894 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10005880:	9b01      	ldr	r3, [sp, #4]
10005882:	b2ed      	uxtb	r5, r5
10005884:	40eb      	lsrs	r3, r5
10005886:	2201      	movs	r2, #1
10005888:	439a      	bics	r2, r3
1000588a:	7973      	ldrb	r3, [r6, #5]
1000588c:	4259      	negs	r1, r3
1000588e:	414b      	adcs	r3, r1
10005890:	4053      	eors	r3, r2
10005892:	7023      	strb	r3, [r4, #0]
}
10005894:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10005896 <uart_rpi_poll_in>:
{
10005896:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005898:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000589a:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000589c:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000589e:	699c      	ldr	r4, [r3, #24]
100058a0:	0020      	movs	r0, r4
100058a2:	4010      	ands	r0, r2
100058a4:	4214      	tst	r4, r2
100058a6:	d102      	bne.n	100058ae <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
100058a8:	681b      	ldr	r3, [r3, #0]
100058aa:	700b      	strb	r3, [r1, #0]
}
100058ac:	bd10      	pop	{r4, pc}
		return -1;
100058ae:	2001      	movs	r0, #1
100058b0:	4240      	negs	r0, r0
100058b2:	e7fb      	b.n	100058ac <uart_rpi_poll_in+0x16>

100058b4 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100058b4:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100058b6:	6843      	ldr	r3, [r0, #4]
100058b8:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100058ba:	6998      	ldr	r0, [r3, #24]
100058bc:	4210      	tst	r0, r2
100058be:	d1fc      	bne.n	100058ba <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
100058c0:	6019      	str	r1, [r3, #0]
}
100058c2:	4770      	bx	lr

100058c4 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
100058c4:	6843      	ldr	r3, [r0, #4]
100058c6:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
100058c8:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
100058ca:	0518      	lsls	r0, r3, #20
100058cc:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
100058ce:	055a      	lsls	r2, r3, #21
100058d0:	d501      	bpl.n	100058d6 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
100058d2:	2208      	movs	r2, #8
100058d4:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
100058d6:	059a      	lsls	r2, r3, #22
100058d8:	d501      	bpl.n	100058de <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
100058da:	2202      	movs	r2, #2
100058dc:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
100058de:	05db      	lsls	r3, r3, #23
100058e0:	d501      	bpl.n	100058e6 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
100058e2:	2304      	movs	r3, #4
100058e4:	4318      	orrs	r0, r3
}
100058e6:	4770      	bx	lr

100058e8 <uart_rpi_fifo_fill>:
{
100058e8:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100058ea:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100058ec:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100058ee:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100058f0:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100058f2:	699c      	ldr	r4, [r3, #24]
100058f4:	422c      	tst	r4, r5
100058f6:	d102      	bne.n	100058fe <uart_rpi_fifo_fill+0x16>
100058f8:	1a14      	subs	r4, r2, r0
100058fa:	2c00      	cmp	r4, #0
100058fc:	dc00      	bgt.n	10005900 <uart_rpi_fifo_fill+0x18>
}
100058fe:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10005900:	5c0c      	ldrb	r4, [r1, r0]
10005902:	3001      	adds	r0, #1
10005904:	601c      	str	r4, [r3, #0]
10005906:	e7f4      	b.n	100058f2 <uart_rpi_fifo_fill+0xa>

10005908 <uart_rpi_fifo_read>:
{
10005908:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000590a:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000590c:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000590e:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10005910:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005912:	699c      	ldr	r4, [r3, #24]
10005914:	422c      	tst	r4, r5
10005916:	d102      	bne.n	1000591e <uart_rpi_fifo_read+0x16>
10005918:	1a14      	subs	r4, r2, r0
1000591a:	2c00      	cmp	r4, #0
1000591c:	dc00      	bgt.n	10005920 <uart_rpi_fifo_read+0x18>
}
1000591e:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10005920:	681c      	ldr	r4, [r3, #0]
10005922:	540c      	strb	r4, [r1, r0]
10005924:	3001      	adds	r0, #1
10005926:	e7f4      	b.n	10005912 <uart_rpi_fifo_read+0xa>

10005928 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005928:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000592a:	6843      	ldr	r3, [r0, #4]
1000592c:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000592e:	6b99      	ldr	r1, [r3, #56]	; 0x38
10005930:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10005932:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005934:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10005936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005938:	438a      	bics	r2, r1
1000593a:	635a      	str	r2, [r3, #52]	; 0x34
}
1000593c:	4770      	bx	lr

1000593e <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000593e:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005940:	6843      	ldr	r3, [r0, #4]
10005942:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10005944:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005946:	438b      	bics	r3, r1
10005948:	6393      	str	r3, [r2, #56]	; 0x38
}
1000594a:	4770      	bx	lr

1000594c <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000594c:	6843      	ldr	r3, [r0, #4]
1000594e:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10005950:	6c18      	ldr	r0, [r3, #64]	; 0x40
10005952:	0680      	lsls	r0, r0, #26
10005954:	0fc0      	lsrs	r0, r0, #31
}
10005956:	4770      	bx	lr

10005958 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005958:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000595a:	6843      	ldr	r3, [r0, #4]
1000595c:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000595e:	6b99      	ldr	r1, [r3, #56]	; 0x38
10005960:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10005962:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005964:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005968:	438a      	bics	r2, r1
1000596a:	635a      	str	r2, [r3, #52]	; 0x34
}
1000596c:	4770      	bx	lr

1000596e <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000596e:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005970:	6843      	ldr	r3, [r0, #4]
10005972:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10005974:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005976:	438b      	bics	r3, r1
10005978:	6393      	str	r3, [r2, #56]	; 0x38
}
1000597a:	4770      	bx	lr

1000597c <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000597c:	6843      	ldr	r3, [r0, #4]
1000597e:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10005980:	6998      	ldr	r0, [r3, #24]
10005982:	0600      	lsls	r0, r0, #24
10005984:	0fc0      	lsrs	r0, r0, #31
}
10005986:	4770      	bx	lr

10005988 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005988:	6843      	ldr	r3, [r0, #4]
1000598a:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
1000598c:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000598e:	06c0      	lsls	r0, r0, #27
10005990:	0fc0      	lsrs	r0, r0, #31
}
10005992:	4770      	bx	lr

10005994 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005994:	6843      	ldr	r3, [r0, #4]
10005996:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005998:	23f8      	movs	r3, #248	; 0xf8
1000599a:	6b91      	ldr	r1, [r2, #56]	; 0x38
1000599c:	00db      	lsls	r3, r3, #3
1000599e:	430b      	orrs	r3, r1
100059a0:	6393      	str	r3, [r2, #56]	; 0x38
}
100059a2:	4770      	bx	lr

100059a4 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
100059a4:	b510      	push	{r4, lr}
100059a6:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
100059a8:	f7ff ffee 	bl	10005988 <uart_rpi_irq_rx_ready>
100059ac:	0003      	movs	r3, r0
100059ae:	2001      	movs	r0, #1
100059b0:	2b00      	cmp	r3, #0
100059b2:	d104      	bne.n	100059be <uart_rpi_irq_is_pending+0x1a>
100059b4:	0020      	movs	r0, r4
100059b6:	f7ff ffc9 	bl	1000594c <uart_rpi_irq_tx_ready>
100059ba:	1e43      	subs	r3, r0, #1
100059bc:	4198      	sbcs	r0, r3
}
100059be:	bd10      	pop	{r4, pc}

100059c0 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
100059c0:	2001      	movs	r0, #1
100059c2:	4770      	bx	lr

100059c4 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
100059c4:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
100059c6:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
100059c8:	60da      	str	r2, [r3, #12]
}
100059ca:	4770      	bx	lr

100059cc <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
100059cc:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
100059ce:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
100059d0:	6893      	ldr	r3, [r2, #8]
100059d2:	2b00      	cmp	r3, #0
100059d4:	d001      	beq.n	100059da <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
100059d6:	68d1      	ldr	r1, [r2, #12]
100059d8:	4798      	blx	r3
	}
}
100059da:	bd10      	pop	{r4, pc}

100059dc <uart_rpi_config_get>:
{
100059dc:	0003      	movs	r3, r0
100059de:	b510      	push	{r4, lr}
100059e0:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
100059e2:	2208      	movs	r2, #8
100059e4:	6919      	ldr	r1, [r3, #16]
100059e6:	f7ff fbcb 	bl	10005180 <memcpy>
}
100059ea:	2000      	movs	r0, #0
100059ec:	bd10      	pop	{r4, pc}

100059ee <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
100059ee:	b510      	push	{r4, lr}
100059f0:	2200      	movs	r2, #0
100059f2:	2103      	movs	r1, #3
100059f4:	2014      	movs	r0, #20
100059f6:	f7fc fc83 	bl	10002300 <z_arm_irq_priority_set>
100059fa:	2014      	movs	r0, #20
100059fc:	f7fc fc74 	bl	100022e8 <arch_irq_enable>
10005a00:	bd10      	pop	{r4, pc}

10005a02 <uart_rpi_configure>:
{
10005a02:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10005a04:	6843      	ldr	r3, [r0, #4]
{
10005a06:	0006      	movs	r6, r0
10005a08:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10005a0a:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10005a0c:	6809      	ldr	r1, [r1, #0]
10005a0e:	6818      	ldr	r0, [r3, #0]
10005a10:	f7fd fd46 	bl	100034a0 <uart_set_baudrate>
	if (baudrate == 0) {
10005a14:	2800      	cmp	r0, #0
10005a16:	d102      	bne.n	10005a1e <uart_rpi_configure+0x1c>
		return -EINVAL;
10005a18:	2016      	movs	r0, #22
10005a1a:	4240      	negs	r0, r0
}
10005a1c:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10005a1e:	79a3      	ldrb	r3, [r4, #6]
10005a20:	7962      	ldrb	r2, [r4, #5]
10005a22:	7921      	ldrb	r1, [r4, #4]
10005a24:	6870      	ldr	r0, [r6, #4]
10005a26:	f7fd f9ef 	bl	10002e08 <uart_rpi_set_format.isra.0>
10005a2a:	2800      	cmp	r0, #0
10005a2c:	d1f4      	bne.n	10005a18 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10005a2e:	cc06      	ldmia	r4!, {r1, r2}
10005a30:	c506      	stmia	r5!, {r1, r2}
	return 0;
10005a32:	e7f3      	b.n	10005a1c <uart_rpi_configure+0x1a>

10005a34 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005a34:	2301      	movs	r3, #1
10005a36:	22d0      	movs	r2, #208	; 0xd0
10005a38:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10005a3a:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005a3c:	0612      	lsls	r2, r2, #24
10005a3e:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005a40:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10005a42:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005a44:	f7fd fc9c 	bl	10003380 <gpio_set_function>
}
10005a48:	bd10      	pop	{r4, pc}

10005a4a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10005a4a:	4770      	bx	lr

10005a4c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10005a4c:	2800      	cmp	r0, #0
10005a4e:	d009      	beq.n	10005a64 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10005a50:	2301      	movs	r3, #1
10005a52:	68c2      	ldr	r2, [r0, #12]
10005a54:	2000      	movs	r0, #0
10005a56:	7851      	ldrb	r1, [r2, #1]
10005a58:	4219      	tst	r1, r3
10005a5a:	d002      	beq.n	10005a62 <z_device_is_ready+0x16>
10005a5c:	7810      	ldrb	r0, [r2, #0]
10005a5e:	4242      	negs	r2, r0
10005a60:	4150      	adcs	r0, r2
10005a62:	4018      	ands	r0, r3
}
10005a64:	4770      	bx	lr

10005a66 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10005a66:	f3ef 8310 	mrs	r3, PRIMASK
10005a6a:	b672      	cpsid	i
	for (;;) {
10005a6c:	e7fe      	b.n	10005a6c <arch_system_halt+0x6>

10005a6e <z_early_memset>:
{
10005a6e:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10005a70:	f7ff fb8f 	bl	10005192 <memset>
}
10005a74:	bd10      	pop	{r4, pc}

10005a76 <z_early_memcpy>:
{
10005a76:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10005a78:	f7ff fb82 	bl	10005180 <memcpy>
}
10005a7c:	bd10      	pop	{r4, pc}

10005a7e <k_is_in_isr>:
10005a7e:	f3ef 8005 	mrs	r0, IPSR
	return (__get_IPSR()) ? (true) : (false);
10005a82:	1e43      	subs	r3, r0, #1
10005a84:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
10005a86:	b2c0      	uxtb	r0, r0
}
10005a88:	4770      	bx	lr

10005a8a <z_impl_k_thread_name_set>:
	return -ENOSYS;
10005a8a:	2058      	movs	r0, #88	; 0x58
}
10005a8c:	4240      	negs	r0, r0
10005a8e:	4770      	bx	lr

10005a90 <k_thread_name_get>:
}
10005a90:	2000      	movs	r0, #0
10005a92:	4770      	bx	lr

10005a94 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10005a94:	b510      	push	{r4, lr}
10005a96:	f3ef 8310 	mrs	r3, PRIMASK
10005a9a:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10005a9c:	f7fc fbb8 	bl	10002210 <arch_cpu_idle>
10005aa0:	e7f9      	b.n	10005a96 <idle+0x2>

10005aa2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10005aa2:	2a00      	cmp	r2, #0
10005aa4:	d007      	beq.n	10005ab6 <z_impl_k_sem_init+0x14>
10005aa6:	428a      	cmp	r2, r1
10005aa8:	d305      	bcc.n	10005ab6 <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
10005aaa:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
10005aac:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
10005aae:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10005ab0:	6040      	str	r0, [r0, #4]
	return 0;
10005ab2:	2000      	movs	r0, #0
}
10005ab4:	4770      	bx	lr
		return -EINVAL;
10005ab6:	2016      	movs	r0, #22
10005ab8:	4240      	negs	r0, r0
10005aba:	e7fb      	b.n	10005ab4 <z_impl_k_sem_init+0x12>

10005abc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10005abc:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10005abe:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005ac0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005ac2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005ac4:	2300      	movs	r3, #0
10005ac6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005ac8:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10005aca:	4770      	bx	lr

10005acc <unpend_thread_no_timeout>:
{
10005acc:	b510      	push	{r4, lr}
10005ace:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10005ad0:	f7ff fff4 	bl	10005abc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005ad4:	2202      	movs	r2, #2
10005ad6:	7b63      	ldrb	r3, [r4, #13]
10005ad8:	4393      	bics	r3, r2
10005ada:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10005adc:	2300      	movs	r3, #0
10005ade:	60a3      	str	r3, [r4, #8]
}
10005ae0:	bd10      	pop	{r4, pc}

10005ae2 <add_to_waitq_locked>:
{
10005ae2:	b570      	push	{r4, r5, r6, lr}
10005ae4:	0004      	movs	r4, r0
10005ae6:	000d      	movs	r5, r1
	unready_thread(thread);
10005ae8:	f7fe f86e 	bl	10003bc8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10005aec:	2302      	movs	r3, #2
10005aee:	7b62      	ldrb	r2, [r4, #13]
10005af0:	4313      	orrs	r3, r2
10005af2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10005af4:	2d00      	cmp	r5, #0
10005af6:	d01c      	beq.n	10005b32 <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
10005af8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
10005afa:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005afc:	429d      	cmp	r5, r3
10005afe:	d109      	bne.n	10005b14 <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
10005b00:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10005b02:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10005b04:	6063      	str	r3, [r4, #4]
	tail->next = node;
10005b06:	601c      	str	r4, [r3, #0]
	list->tail = node;
10005b08:	606c      	str	r4, [r5, #4]
}
10005b0a:	e012      	b.n	10005b32 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
10005b0c:	686a      	ldr	r2, [r5, #4]
10005b0e:	4293      	cmp	r3, r2
10005b10:	d0f6      	beq.n	10005b00 <add_to_waitq_locked+0x1e>
10005b12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10005b14:	2b00      	cmp	r3, #0
10005b16:	d0f3      	beq.n	10005b00 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
10005b18:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
10005b1a:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
10005b1c:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
10005b1e:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10005b20:	428a      	cmp	r2, r1
10005b22:	d0f3      	beq.n	10005b0c <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
10005b24:	4291      	cmp	r1, r2
10005b26:	ddf1      	ble.n	10005b0c <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
10005b28:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10005b2a:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10005b2c:	6062      	str	r2, [r4, #4]
	prev->next = node;
10005b2e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10005b30:	605c      	str	r4, [r3, #4]
}
10005b32:	bd70      	pop	{r4, r5, r6, pc}

10005b34 <z_ready_thread>:
{
10005b34:	b510      	push	{r4, lr}
10005b36:	f3ef 8410 	mrs	r4, PRIMASK
10005b3a:	b672      	cpsid	i
			ready_thread(thread);
10005b3c:	f7fe f80e 	bl	10003b5c <ready_thread>
	if (key != 0U) {
10005b40:	2c00      	cmp	r4, #0
10005b42:	d102      	bne.n	10005b4a <z_ready_thread+0x16>
	__asm__ volatile(
10005b44:	b662      	cpsie	i
10005b46:	f3bf 8f6f 	isb	sy
}
10005b4a:	bd10      	pop	{r4, pc}

10005b4c <z_unpend_thread_no_timeout>:
{
10005b4c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005b4e:	f3ef 8410 	mrs	r4, PRIMASK
10005b52:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
10005b54:	6883      	ldr	r3, [r0, #8]
10005b56:	2b00      	cmp	r3, #0
10005b58:	d001      	beq.n	10005b5e <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
10005b5a:	f7ff ffb7 	bl	10005acc <unpend_thread_no_timeout>
	if (key != 0U) {
10005b5e:	2c00      	cmp	r4, #0
10005b60:	d102      	bne.n	10005b68 <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
10005b62:	b662      	cpsie	i
10005b64:	f3bf 8f6f 	isb	sy
}
10005b68:	bd10      	pop	{r4, pc}

10005b6a <z_sched_wake_thread>:
{
10005b6a:	b570      	push	{r4, r5, r6, lr}
10005b6c:	0004      	movs	r4, r0
10005b6e:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10005b70:	f3ef 8510 	mrs	r5, PRIMASK
10005b74:	b672      	cpsid	i
		if (!killed) {
10005b76:	2328      	movs	r3, #40	; 0x28
10005b78:	7b42      	ldrb	r2, [r0, #13]
10005b7a:	421a      	tst	r2, r3
10005b7c:	d10e      	bne.n	10005b9c <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10005b7e:	6883      	ldr	r3, [r0, #8]
10005b80:	2b00      	cmp	r3, #0
10005b82:	d001      	beq.n	10005b88 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10005b84:	f7ff ffa2 	bl	10005acc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005b88:	2204      	movs	r2, #4
10005b8a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10005b8c:	2e00      	cmp	r6, #0
10005b8e:	d000      	beq.n	10005b92 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10005b90:	2214      	movs	r2, #20
10005b92:	4393      	bics	r3, r2
			ready_thread(thread);
10005b94:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005b96:	7363      	strb	r3, [r4, #13]
10005b98:	f7fd ffe0 	bl	10003b5c <ready_thread>
	if (key != 0U) {
10005b9c:	2d00      	cmp	r5, #0
10005b9e:	d102      	bne.n	10005ba6 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10005ba0:	b662      	cpsie	i
10005ba2:	f3bf 8f6f 	isb	sy
}
10005ba6:	bd70      	pop	{r4, r5, r6, pc}

10005ba8 <z_thread_timeout>:
{
10005ba8:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10005baa:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10005bac:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10005bae:	f7ff ffdc 	bl	10005b6a <z_sched_wake_thread>
}
10005bb2:	bd10      	pop	{r4, pc}

10005bb4 <z_unpend1_no_timeout>:
{
10005bb4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005bb6:	f3ef 8510 	mrs	r5, PRIMASK
10005bba:	b672      	cpsid	i
	return list->head == list;
10005bbc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005bbe:	42a0      	cmp	r0, r4
10005bc0:	d00b      	beq.n	10005bda <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
10005bc2:	2c00      	cmp	r4, #0
10005bc4:	d002      	beq.n	10005bcc <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
10005bc6:	0020      	movs	r0, r4
10005bc8:	f7ff ff80 	bl	10005acc <unpend_thread_no_timeout>
	if (key != 0U) {
10005bcc:	2d00      	cmp	r5, #0
10005bce:	d102      	bne.n	10005bd6 <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
10005bd0:	b662      	cpsie	i
10005bd2:	f3bf 8f6f 	isb	sy
}
10005bd6:	0020      	movs	r0, r4
10005bd8:	bd70      	pop	{r4, r5, r6, pc}
10005bda:	2400      	movs	r4, #0
10005bdc:	e7f6      	b.n	10005bcc <z_unpend1_no_timeout+0x18>

10005bde <z_unpend_first_thread>:
{
10005bde:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005be0:	f3ef 8510 	mrs	r5, PRIMASK
10005be4:	b672      	cpsid	i
	return list->head == list;
10005be6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005be8:	42a0      	cmp	r0, r4
10005bea:	d00f      	beq.n	10005c0c <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
10005bec:	2c00      	cmp	r4, #0
10005bee:	d006      	beq.n	10005bfe <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
10005bf0:	0020      	movs	r0, r4
10005bf2:	f7ff ff6b 	bl	10005acc <unpend_thread_no_timeout>
10005bf6:	0020      	movs	r0, r4
10005bf8:	3018      	adds	r0, #24
10005bfa:	f000 f81e 	bl	10005c3a <z_abort_timeout>
	if (key != 0U) {
10005bfe:	2d00      	cmp	r5, #0
10005c00:	d102      	bne.n	10005c08 <z_unpend_first_thread+0x2a>
	__asm__ volatile(
10005c02:	b662      	cpsie	i
10005c04:	f3bf 8f6f 	isb	sy
}
10005c08:	0020      	movs	r0, r4
10005c0a:	bd70      	pop	{r4, r5, r6, pc}
10005c0c:	2400      	movs	r4, #0
10005c0e:	e7f6      	b.n	10005bfe <z_unpend_first_thread+0x20>

10005c10 <z_reschedule_irqlock>:
{
10005c10:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10005c12:	2800      	cmp	r0, #0
10005c14:	d105      	bne.n	10005c22 <z_reschedule_irqlock+0x12>
10005c16:	f3ef 8005 	mrs	r0, IPSR
10005c1a:	2800      	cmp	r0, #0
10005c1c:	d102      	bne.n	10005c24 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10005c1e:	f7fc fbb1 	bl	10002384 <arch_swap>
}
10005c22:	bd10      	pop	{r4, pc}
10005c24:	b662      	cpsie	i
10005c26:	f3bf 8f6f 	isb	sy
10005c2a:	e7fa      	b.n	10005c22 <z_reschedule_irqlock+0x12>

10005c2c <z_reschedule_unlocked>:
{
10005c2c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005c2e:	f3ef 8010 	mrs	r0, PRIMASK
10005c32:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005c34:	f7ff ffec 	bl	10005c10 <z_reschedule_irqlock>
}
10005c38:	bd10      	pop	{r4, pc}

10005c3a <z_abort_timeout>:
{
10005c3a:	b510      	push	{r4, lr}
10005c3c:	f3ef 8410 	mrs	r4, PRIMASK
10005c40:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10005c42:	6803      	ldr	r3, [r0, #0]
10005c44:	2b00      	cmp	r3, #0
10005c46:	d008      	beq.n	10005c5a <z_abort_timeout+0x20>
			remove_timeout(to);
10005c48:	f7fe fa34 	bl	100040b4 <remove_timeout>
			ret = 0;
10005c4c:	2000      	movs	r0, #0
	if (key != 0U) {
10005c4e:	2c00      	cmp	r4, #0
10005c50:	d102      	bne.n	10005c58 <z_abort_timeout+0x1e>
	__asm__ volatile(
10005c52:	b662      	cpsie	i
10005c54:	f3bf 8f6f 	isb	sy
}
10005c58:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10005c5a:	2016      	movs	r0, #22
10005c5c:	4240      	negs	r0, r0
10005c5e:	e7f6      	b.n	10005c4e <z_abort_timeout+0x14>

10005c60 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10005c60:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10005c62:	f7fe fb1f 	bl	100042a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10005c66:	bd10      	pop	{r4, pc}

10005c68 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
10005c68:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
10005c6a:	f7fe fb1b 	bl	100042a4 <sys_clock_tick_get>
}
10005c6e:	bd10      	pop	{r4, pc}

10005c70 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
10005c70:	b570      	push	{r4, r5, r6, lr}
10005c72:	0004      	movs	r4, r0
10005c74:	000d      	movs	r5, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10005c76:	1c43      	adds	r3, r0, #1
10005c78:	d101      	bne.n	10005c7e <sys_clock_timeout_end_calc+0xe>
10005c7a:	1c4b      	adds	r3, r1, #1
10005c7c:	d017      	beq.n	10005cae <sys_clock_timeout_end_calc+0x3e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10005c7e:	0023      	movs	r3, r4
10005c80:	432b      	orrs	r3, r5
10005c82:	d106      	bne.n	10005c92 <sys_clock_timeout_end_calc+0x22>
		return sys_clock_tick_get();
10005c84:	f7fe fb0e 	bl	100042a4 <sys_clock_tick_get>
10005c88:	0002      	movs	r2, r0
10005c8a:	000b      	movs	r3, r1
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
10005c8c:	0010      	movs	r0, r2
10005c8e:	0019      	movs	r1, r3
10005c90:	bd70      	pop	{r4, r5, r6, pc}
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
10005c92:	2202      	movs	r2, #2
10005c94:	4252      	negs	r2, r2
10005c96:	17d3      	asrs	r3, r2, #31
10005c98:	1b12      	subs	r2, r2, r4
10005c9a:	41ab      	sbcs	r3, r5
10005c9c:	2b00      	cmp	r3, #0
10005c9e:	daf5      	bge.n	10005c8c <sys_clock_timeout_end_calc+0x1c>
		return sys_clock_tick_get() + MAX(1, dt);
10005ca0:	f7fe fb00 	bl	100042a4 <sys_clock_tick_get>
10005ca4:	0002      	movs	r2, r0
10005ca6:	000b      	movs	r3, r1
10005ca8:	1912      	adds	r2, r2, r4
10005caa:	416b      	adcs	r3, r5
10005cac:	e7ee      	b.n	10005c8c <sys_clock_timeout_end_calc+0x1c>
		return UINT64_MAX;
10005cae:	2201      	movs	r2, #1
10005cb0:	4252      	negs	r2, r2
10005cb2:	17d3      	asrs	r3, r2, #31
10005cb4:	e7ea      	b.n	10005c8c <sys_clock_timeout_end_calc+0x1c>

10005cb6 <k_timer_init>:
	timer->stop_fn = stop_fn;
10005cb6:	6242      	str	r2, [r0, #36]	; 0x24
	sys_dlist_init(&w->waitq);
10005cb8:	0002      	movs	r2, r0
	timer->status = 0U;
10005cba:	2300      	movs	r3, #0
10005cbc:	3218      	adds	r2, #24
	timer->expiry_fn = expiry_fn;
10005cbe:	6201      	str	r1, [r0, #32]
	timer->status = 0U;
10005cc0:	6303      	str	r3, [r0, #48]	; 0x30
	list->head = (sys_dnode_t *)list;
10005cc2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
10005cc4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
10005cc6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005cc8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
10005cca:	6343      	str	r3, [r0, #52]	; 0x34
}
10005ccc:	4770      	bx	lr

10005cce <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
10005cce:	b510      	push	{r4, lr}
10005cd0:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
10005cd2:	f7ff ffb2 	bl	10005c3a <z_abort_timeout>

	if (inactive) {
10005cd6:	2800      	cmp	r0, #0
10005cd8:	d111      	bne.n	10005cfe <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
10005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005cdc:	2b00      	cmp	r3, #0
10005cde:	d001      	beq.n	10005ce4 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
10005ce0:	0020      	movs	r0, r4
10005ce2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
10005ce4:	0020      	movs	r0, r4
10005ce6:	3018      	adds	r0, #24
10005ce8:	f7ff ff64 	bl	10005bb4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
10005cec:	2800      	cmp	r0, #0
10005cee:	d006      	beq.n	10005cfe <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
10005cf0:	f7ff ff20 	bl	10005b34 <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
10005cf4:	f3ef 8010 	mrs	r0, PRIMASK
10005cf8:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005cfa:	f7ff ff89 	bl	10005c10 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
10005cfe:	bd10      	pop	{r4, pc}

10005d00 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
10005d00:	0003      	movs	r3, r0
10005d02:	f3ef 8210 	mrs	r2, PRIMASK
10005d06:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d08:	6800      	ldr	r0, [r0, #0]
	*target += value;
10005d0a:	1841      	adds	r1, r0, r1
10005d0c:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d0e:	2a00      	cmp	r2, #0
10005d10:	d102      	bne.n	10005d18 <z_impl_atomic_add+0x18>
	__asm__ volatile(
10005d12:	b662      	cpsie	i
10005d14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d18:	4770      	bx	lr

10005d1a <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
10005d1a:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005d1c:	f3ef 8210 	mrs	r2, PRIMASK
10005d20:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d22:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10005d24:	1a41      	subs	r1, r0, r1
10005d26:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d28:	2a00      	cmp	r2, #0
10005d2a:	d102      	bne.n	10005d32 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
10005d2c:	b662      	cpsie	i
10005d2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d32:	4770      	bx	lr

10005d34 <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
10005d34:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005d36:	f3ef 8210 	mrs	r2, PRIMASK
10005d3a:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d3c:	6800      	ldr	r0, [r0, #0]
	*target = value;
10005d3e:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d40:	2a00      	cmp	r2, #0
10005d42:	d102      	bne.n	10005d4a <z_impl_atomic_set+0x16>
	__asm__ volatile(
10005d44:	b662      	cpsie	i
10005d46:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d4a:	4770      	bx	lr

10005d4c <z_heap_aligned_alloc>:
{
10005d4c:	0013      	movs	r3, r2
10005d4e:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
10005d50:	3204      	adds	r2, #4
10005d52:	0004      	movs	r4, r0
10005d54:	0008      	movs	r0, r1
10005d56:	3304      	adds	r3, #4
10005d58:	d301      	bcc.n	10005d5e <z_heap_aligned_alloc+0x12>
		return NULL;
10005d5a:	2000      	movs	r0, #0
}
10005d5c:	bdd6      	pop	{r1, r2, r4, r6, r7, pc}
	__align = align | sizeof(heap_ref);
10005d5e:	2104      	movs	r1, #4
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
10005d60:	2600      	movs	r6, #0
10005d62:	2700      	movs	r7, #0
	__align = align | sizeof(heap_ref);
10005d64:	4301      	orrs	r1, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
10005d66:	9600      	str	r6, [sp, #0]
10005d68:	9701      	str	r7, [sp, #4]
10005d6a:	0020      	movs	r0, r4
10005d6c:	f7fe fb7c 	bl	10004468 <k_heap_aligned_alloc>
	if (mem == NULL) {
10005d70:	2800      	cmp	r0, #0
10005d72:	d0f2      	beq.n	10005d5a <z_heap_aligned_alloc+0xe>
	*heap_ref = heap;
10005d74:	c010      	stmia	r0!, {r4}
	return mem;
10005d76:	e7f1      	b.n	10005d5c <z_heap_aligned_alloc+0x10>

10005d78 <k_malloc>:
{
10005d78:	b510      	push	{r4, lr}
10005d7a:	0001      	movs	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
10005d7c:	2004      	movs	r0, #4
10005d7e:	f7fe fb49 	bl	10004414 <k_aligned_alloc>
}
10005d82:	bd10      	pop	{r4, pc}

10005d84 <k_heap_init>:
10005d84:	0003      	movs	r3, r0
{
10005d86:	b510      	push	{r4, lr}
10005d88:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
10005d8a:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
10005d8c:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
10005d8e:	f7fe fe28 	bl	100049e2 <sys_heap_init>
}
10005d92:	bd10      	pop	{r4, pc}
