
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20001b68 100024d5 10004ebb 10002491     h.. .$...N...$..
	...
1000012c:	10002291 00000000 00000000 10002231     ."..........1"..
1000013c:	10002e0d                                ....

10000140 <_irq_vector_table>:
10000140:	10002301 10002301 10002301 10002301     .#...#...#...#..
10000150:	10002301 10002301 10002301 10002301     .#...#...#...#..
10000160:	10002301 10002301 10002301 10002301     .#...#...#...#..
10000170:	10002301 10002301 10002301 10002301     .#...#...#...#..
10000180:	10002301 10002301 10002301 10002301     .#...#...#...#..
10000190:	10002301 10002301 10002301 10002301     .#...#...#...#..
100001a0:	10002301 10002301                       .#...#..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__ctzsi2>:
1000029c:	4241      	negs	r1, r0
1000029e:	4008      	ands	r0, r1
100002a0:	211c      	movs	r1, #28
100002a2:	2301      	movs	r3, #1
100002a4:	041b      	lsls	r3, r3, #16
100002a6:	4298      	cmp	r0, r3
100002a8:	d301      	bcc.n	100002ae <__ctzsi2+0x12>
100002aa:	0c00      	lsrs	r0, r0, #16
100002ac:	3910      	subs	r1, #16
100002ae:	0a1b      	lsrs	r3, r3, #8
100002b0:	4298      	cmp	r0, r3
100002b2:	d301      	bcc.n	100002b8 <__ctzsi2+0x1c>
100002b4:	0a00      	lsrs	r0, r0, #8
100002b6:	3908      	subs	r1, #8
100002b8:	091b      	lsrs	r3, r3, #4
100002ba:	4298      	cmp	r0, r3
100002bc:	d301      	bcc.n	100002c2 <__ctzsi2+0x26>
100002be:	0900      	lsrs	r0, r0, #4
100002c0:	3904      	subs	r1, #4
100002c2:	a202      	add	r2, pc, #8	; (adr r2, 100002cc <__ctzsi2+0x30>)
100002c4:	5c10      	ldrb	r0, [r2, r0]
100002c6:	1a40      	subs	r0, r0, r1
100002c8:	4770      	bx	lr
100002ca:	46c0      	nop			; (mov r8, r8)
100002cc:	1d1d1c1b 	.word	0x1d1d1c1b
100002d0:	1e1e1e1e 	.word	0x1e1e1e1e
100002d4:	1f1f1f1f 	.word	0x1f1f1f1f
100002d8:	1f1f1f1f 	.word	0x1f1f1f1f

100002dc <__aeabi_uldivmod>:
100002dc:	2b00      	cmp	r3, #0
100002de:	d111      	bne.n	10000304 <__aeabi_uldivmod+0x28>
100002e0:	2a00      	cmp	r2, #0
100002e2:	d10f      	bne.n	10000304 <__aeabi_uldivmod+0x28>
100002e4:	2900      	cmp	r1, #0
100002e6:	d100      	bne.n	100002ea <__aeabi_uldivmod+0xe>
100002e8:	2800      	cmp	r0, #0
100002ea:	d002      	beq.n	100002f2 <__aeabi_uldivmod+0x16>
100002ec:	2100      	movs	r1, #0
100002ee:	43c9      	mvns	r1, r1
100002f0:	0008      	movs	r0, r1
100002f2:	b407      	push	{r0, r1, r2}
100002f4:	4802      	ldr	r0, [pc, #8]	; (10000300 <__aeabi_uldivmod+0x24>)
100002f6:	a102      	add	r1, pc, #8	; (adr r1, 10000300 <__aeabi_uldivmod+0x24>)
100002f8:	1840      	adds	r0, r0, r1
100002fa:	9002      	str	r0, [sp, #8]
100002fc:	bd03      	pop	{r0, r1, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	ffffff5d 	.word	0xffffff5d
10000304:	b403      	push	{r0, r1}
10000306:	4668      	mov	r0, sp
10000308:	b501      	push	{r0, lr}
1000030a:	9802      	ldr	r0, [sp, #8]
1000030c:	f000 f84c 	bl	100003a8 <__udivmoddi4>
10000310:	9b01      	ldr	r3, [sp, #4]
10000312:	469e      	mov	lr, r3
10000314:	b002      	add	sp, #8
10000316:	bc0c      	pop	{r2, r3}
10000318:	4770      	bx	lr
1000031a:	46c0      	nop			; (mov r8, r8)

1000031c <__aeabi_llsr>:
1000031c:	40d0      	lsrs	r0, r2
1000031e:	000b      	movs	r3, r1
10000320:	40d1      	lsrs	r1, r2
10000322:	469c      	mov	ip, r3
10000324:	3a20      	subs	r2, #32
10000326:	40d3      	lsrs	r3, r2
10000328:	4318      	orrs	r0, r3
1000032a:	4252      	negs	r2, r2
1000032c:	4663      	mov	r3, ip
1000032e:	4093      	lsls	r3, r2
10000330:	4318      	orrs	r0, r3
10000332:	4770      	bx	lr

10000334 <__aeabi_llsl>:
10000334:	4091      	lsls	r1, r2
10000336:	0003      	movs	r3, r0
10000338:	4090      	lsls	r0, r2
1000033a:	469c      	mov	ip, r3
1000033c:	3a20      	subs	r2, #32
1000033e:	4093      	lsls	r3, r2
10000340:	4319      	orrs	r1, r3
10000342:	4252      	negs	r2, r2
10000344:	4663      	mov	r3, ip
10000346:	40d3      	lsrs	r3, r2
10000348:	4319      	orrs	r1, r3
1000034a:	4770      	bx	lr

1000034c <__clzdi2>:
1000034c:	b510      	push	{r4, lr}
1000034e:	2900      	cmp	r1, #0
10000350:	d103      	bne.n	1000035a <__clzdi2+0xe>
10000352:	f7ff ff85 	bl	10000260 <__clzsi2>
10000356:	3020      	adds	r0, #32
10000358:	e002      	b.n	10000360 <__clzdi2+0x14>
1000035a:	0008      	movs	r0, r1
1000035c:	f7ff ff80 	bl	10000260 <__clzsi2>
10000360:	bd10      	pop	{r4, pc}
10000362:	46c0      	nop			; (mov r8, r8)

10000364 <__aeabi_lmul>:
10000364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000366:	0c04      	lsrs	r4, r0, #16
10000368:	000d      	movs	r5, r1
1000036a:	b291      	uxth	r1, r2
1000036c:	000f      	movs	r7, r1
1000036e:	4361      	muls	r1, r4
10000370:	468c      	mov	ip, r1
10000372:	0006      	movs	r6, r0
10000374:	9301      	str	r3, [sp, #4]
10000376:	b283      	uxth	r3, r0
10000378:	0c10      	lsrs	r0, r2, #16
1000037a:	435f      	muls	r7, r3
1000037c:	4344      	muls	r4, r0
1000037e:	4358      	muls	r0, r3
10000380:	0c3b      	lsrs	r3, r7, #16
10000382:	4460      	add	r0, ip
10000384:	181b      	adds	r3, r3, r0
10000386:	4299      	cmp	r1, r3
10000388:	d902      	bls.n	10000390 <__aeabi_lmul+0x2c>
1000038a:	2180      	movs	r1, #128	; 0x80
1000038c:	0249      	lsls	r1, r1, #9
1000038e:	1864      	adds	r4, r4, r1
10000390:	9901      	ldr	r1, [sp, #4]
10000392:	4355      	muls	r5, r2
10000394:	4371      	muls	r1, r6
10000396:	0c18      	lsrs	r0, r3, #16
10000398:	1904      	adds	r4, r0, r4
1000039a:	041b      	lsls	r3, r3, #16
1000039c:	b2bf      	uxth	r7, r7
1000039e:	1949      	adds	r1, r1, r5
100003a0:	19d8      	adds	r0, r3, r7
100003a2:	1909      	adds	r1, r1, r4
100003a4:	b003      	add	sp, #12
100003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100003a8 <__udivmoddi4>:
100003a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003aa:	0006      	movs	r6, r0
100003ac:	000f      	movs	r7, r1
100003ae:	0015      	movs	r5, r2
100003b0:	001c      	movs	r4, r3
100003b2:	b085      	sub	sp, #20
100003b4:	428b      	cmp	r3, r1
100003b6:	d863      	bhi.n	10000480 <__udivmoddi4+0xd8>
100003b8:	d101      	bne.n	100003be <__udivmoddi4+0x16>
100003ba:	4282      	cmp	r2, r0
100003bc:	d860      	bhi.n	10000480 <__udivmoddi4+0xd8>
100003be:	0021      	movs	r1, r4
100003c0:	0028      	movs	r0, r5
100003c2:	f7ff ffc3 	bl	1000034c <__clzdi2>
100003c6:	0039      	movs	r1, r7
100003c8:	9000      	str	r0, [sp, #0]
100003ca:	0030      	movs	r0, r6
100003cc:	f7ff ffbe 	bl	1000034c <__clzdi2>
100003d0:	9b00      	ldr	r3, [sp, #0]
100003d2:	0021      	movs	r1, r4
100003d4:	1a1b      	subs	r3, r3, r0
100003d6:	001a      	movs	r2, r3
100003d8:	0028      	movs	r0, r5
100003da:	9303      	str	r3, [sp, #12]
100003dc:	f7ff ffaa 	bl	10000334 <__aeabi_llsl>
100003e0:	9000      	str	r0, [sp, #0]
100003e2:	9101      	str	r1, [sp, #4]
100003e4:	42b9      	cmp	r1, r7
100003e6:	d845      	bhi.n	10000474 <__udivmoddi4+0xcc>
100003e8:	d101      	bne.n	100003ee <__udivmoddi4+0x46>
100003ea:	42b0      	cmp	r0, r6
100003ec:	d842      	bhi.n	10000474 <__udivmoddi4+0xcc>
100003ee:	9b00      	ldr	r3, [sp, #0]
100003f0:	9c01      	ldr	r4, [sp, #4]
100003f2:	2001      	movs	r0, #1
100003f4:	2100      	movs	r1, #0
100003f6:	9a03      	ldr	r2, [sp, #12]
100003f8:	1af6      	subs	r6, r6, r3
100003fa:	41a7      	sbcs	r7, r4
100003fc:	f7ff ff9a 	bl	10000334 <__aeabi_llsl>
10000400:	0004      	movs	r4, r0
10000402:	000d      	movs	r5, r1
10000404:	9b03      	ldr	r3, [sp, #12]
10000406:	2b00      	cmp	r3, #0
10000408:	d02b      	beq.n	10000462 <__udivmoddi4+0xba>
1000040a:	9b01      	ldr	r3, [sp, #4]
1000040c:	9a00      	ldr	r2, [sp, #0]
1000040e:	07db      	lsls	r3, r3, #31
10000410:	0850      	lsrs	r0, r2, #1
10000412:	4318      	orrs	r0, r3
10000414:	9b01      	ldr	r3, [sp, #4]
10000416:	0859      	lsrs	r1, r3, #1
10000418:	9b03      	ldr	r3, [sp, #12]
1000041a:	469c      	mov	ip, r3
1000041c:	42b9      	cmp	r1, r7
1000041e:	d82c      	bhi.n	1000047a <__udivmoddi4+0xd2>
10000420:	d101      	bne.n	10000426 <__udivmoddi4+0x7e>
10000422:	42b0      	cmp	r0, r6
10000424:	d829      	bhi.n	1000047a <__udivmoddi4+0xd2>
10000426:	0032      	movs	r2, r6
10000428:	003b      	movs	r3, r7
1000042a:	1a12      	subs	r2, r2, r0
1000042c:	418b      	sbcs	r3, r1
1000042e:	2601      	movs	r6, #1
10000430:	1892      	adds	r2, r2, r2
10000432:	415b      	adcs	r3, r3
10000434:	2700      	movs	r7, #0
10000436:	18b6      	adds	r6, r6, r2
10000438:	415f      	adcs	r7, r3
1000043a:	2301      	movs	r3, #1
1000043c:	425b      	negs	r3, r3
1000043e:	449c      	add	ip, r3
10000440:	4663      	mov	r3, ip
10000442:	2b00      	cmp	r3, #0
10000444:	d1ea      	bne.n	1000041c <__udivmoddi4+0x74>
10000446:	0030      	movs	r0, r6
10000448:	0039      	movs	r1, r7
1000044a:	9a03      	ldr	r2, [sp, #12]
1000044c:	f7ff ff66 	bl	1000031c <__aeabi_llsr>
10000450:	9a03      	ldr	r2, [sp, #12]
10000452:	19a4      	adds	r4, r4, r6
10000454:	417d      	adcs	r5, r7
10000456:	0006      	movs	r6, r0
10000458:	000f      	movs	r7, r1
1000045a:	f7ff ff6b 	bl	10000334 <__aeabi_llsl>
1000045e:	1a24      	subs	r4, r4, r0
10000460:	418d      	sbcs	r5, r1
10000462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000464:	2b00      	cmp	r3, #0
10000466:	d001      	beq.n	1000046c <__udivmoddi4+0xc4>
10000468:	601e      	str	r6, [r3, #0]
1000046a:	605f      	str	r7, [r3, #4]
1000046c:	0020      	movs	r0, r4
1000046e:	0029      	movs	r1, r5
10000470:	b005      	add	sp, #20
10000472:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000474:	2400      	movs	r4, #0
10000476:	2500      	movs	r5, #0
10000478:	e7c4      	b.n	10000404 <__udivmoddi4+0x5c>
1000047a:	19b6      	adds	r6, r6, r6
1000047c:	417f      	adcs	r7, r7
1000047e:	e7dc      	b.n	1000043a <__udivmoddi4+0x92>
10000480:	2400      	movs	r4, #0
10000482:	2500      	movs	r5, #0
10000484:	e7ed      	b.n	10000462 <__udivmoddi4+0xba>
	...

10000488 <main>:
LOG_MODULE_REGISTER(display);

static const struct device *display = DEVICE_DT_GET(DT_NODELABEL(ssd1306));

void main(void)
{
10000488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000048a:	b097      	sub	sp, #92	; 0x5c
1000048c:	af02      	add	r7, sp, #8
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000048e:	4b68      	ldr	r3, [pc, #416]	; (10000630 <main+0x1a8>)
10000490:	0018      	movs	r0, r3
10000492:	613b      	str	r3, [r7, #16]
10000494:	f005 f998 	bl	100057c8 <z_device_is_ready>
  if (display == NULL) {
    LOG_ERR("device pointer is NULL");
    return;
  }

  if (!device_is_ready(display)) {
10000498:	2800      	cmp	r0, #0
1000049a:	d10f      	bne.n	100004bc <main+0x34>
    LOG_ERR("display device is not ready");
1000049c:	4b65      	ldr	r3, [pc, #404]	; (10000634 <main+0x1ac>)
1000049e:	2218      	movs	r2, #24
100004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
100004a2:	2302      	movs	r3, #2
100004a4:	2182      	movs	r1, #130	; 0x82
100004a6:	64bb      	str	r3, [r7, #72]	; 0x48
100004a8:	332e      	adds	r3, #46	; 0x2e
100004aa:	189b      	adds	r3, r3, r2
100004ac:	4862      	ldr	r0, [pc, #392]	; (10000638 <main+0x1b0>)
100004ae:	19da      	adds	r2, r3, r7
100004b0:	0149      	lsls	r1, r1, #5
100004b2:	f004 f821 	bl	100044f8 <z_log_msg_static_create.constprop.0>
    for (size_t i = 255; i > 0; i--) {
      display_set_contrast(display, i);
      k_sleep(K_MSEC(ms_sleep));
    }
  }
100004b6:	46bd      	mov	sp, r7
100004b8:	b015      	add	sp, #84	; 0x54
100004ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
100004bc:	2118      	movs	r1, #24
100004be:	2210      	movs	r2, #16
100004c0:	693b      	ldr	r3, [r7, #16]
100004c2:	1852      	adds	r2, r2, r1
100004c4:	689b      	ldr	r3, [r3, #8]
100004c6:	6938      	ldr	r0, [r7, #16]
100004c8:	607b      	str	r3, [r7, #4]
100004ca:	19d1      	adds	r1, r2, r7
100004cc:	69db      	ldr	r3, [r3, #28]
100004ce:	4798      	blx	r3
  const uint16_t x_res = capabilities.x_resolution;
100004d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  LOG_INF("x_resolution: %d", x_res);
100004d2:	466e      	mov	r6, sp
  const uint16_t x_res = capabilities.x_resolution;
100004d4:	60bb      	str	r3, [r7, #8]
  const uint16_t y_res = capabilities.y_resolution;
100004d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  LOG_INF("x_resolution: %d", x_res);
100004d8:	b088      	sub	sp, #32
  const uint16_t y_res = capabilities.y_resolution;
100004da:	60fb      	str	r3, [r7, #12]
  LOG_INF("x_resolution: %d", x_res);
100004dc:	ac02      	add	r4, sp, #8
100004de:	4b57      	ldr	r3, [pc, #348]	; (1000063c <main+0x1b4>)
100004e0:	0022      	movs	r2, r4
100004e2:	6163      	str	r3, [r4, #20]
100004e4:	68bb      	ldr	r3, [r7, #8]
100004e6:	21c6      	movs	r1, #198	; 0xc6
100004e8:	61a3      	str	r3, [r4, #24]
100004ea:	2303      	movs	r3, #3
100004ec:	4d52      	ldr	r5, [pc, #328]	; (10000638 <main+0x1b0>)
100004ee:	3210      	adds	r2, #16
100004f0:	0028      	movs	r0, r5
100004f2:	6123      	str	r3, [r4, #16]
100004f4:	0149      	lsls	r1, r1, #5
100004f6:	617a      	str	r2, [r7, #20]
100004f8:	f003 fffe 	bl	100044f8 <z_log_msg_static_create.constprop.0>
  LOG_INF("y_resolution: %d", y_res);
100004fc:	4b50      	ldr	r3, [pc, #320]	; (10000640 <main+0x1b8>)
100004fe:	21c6      	movs	r1, #198	; 0xc6
10000500:	6163      	str	r3, [r4, #20]
10000502:	2303      	movs	r3, #3
10000504:	68fa      	ldr	r2, [r7, #12]
10000506:	6123      	str	r3, [r4, #16]
10000508:	61a2      	str	r2, [r4, #24]
1000050a:	0028      	movs	r0, r5
1000050c:	697a      	ldr	r2, [r7, #20]
1000050e:	0149      	lsls	r1, r1, #5
10000510:	f003 fff2 	bl	100044f8 <z_log_msg_static_create.constprop.0>
10000514:	46b5      	mov	sp, r6
  LOG_INF("supported pixel formats: %d", capabilities.supported_pixel_formats);
10000516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000518:	b088      	sub	sp, #32
1000051a:	21c6      	movs	r1, #198	; 0xc6
1000051c:	61a3      	str	r3, [r4, #24]
1000051e:	2303      	movs	r3, #3
10000520:	4a48      	ldr	r2, [pc, #288]	; (10000644 <main+0x1bc>)
10000522:	6123      	str	r3, [r4, #16]
10000524:	6162      	str	r2, [r4, #20]
10000526:	0028      	movs	r0, r5
10000528:	697a      	ldr	r2, [r7, #20]
1000052a:	0149      	lsls	r1, r1, #5
1000052c:	f003 ffe4 	bl	100044f8 <z_log_msg_static_create.constprop.0>
10000530:	46b5      	mov	sp, r6
  LOG_INF("screen_info: %d", capabilities.screen_info);
10000532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000534:	b088      	sub	sp, #32
10000536:	21c6      	movs	r1, #198	; 0xc6
10000538:	61a3      	str	r3, [r4, #24]
1000053a:	2303      	movs	r3, #3
1000053c:	4a42      	ldr	r2, [pc, #264]	; (10000648 <main+0x1c0>)
1000053e:	6123      	str	r3, [r4, #16]
10000540:	6162      	str	r2, [r4, #20]
10000542:	0028      	movs	r0, r5
10000544:	697a      	ldr	r2, [r7, #20]
10000546:	0149      	lsls	r1, r1, #5
10000548:	f003 ffd6 	bl	100044f8 <z_log_msg_static_create.constprop.0>
  LOG_INF("current_pixel_format: %d", capabilities.current_pixel_format);
1000054c:	2334      	movs	r3, #52	; 0x34
1000054e:	46b5      	mov	sp, r6
10000550:	18fb      	adds	r3, r7, r3
10000552:	781b      	ldrb	r3, [r3, #0]
10000554:	b088      	sub	sp, #32
10000556:	21c6      	movs	r1, #198	; 0xc6
10000558:	61a3      	str	r3, [r4, #24]
1000055a:	2303      	movs	r3, #3
1000055c:	4a3b      	ldr	r2, [pc, #236]	; (1000064c <main+0x1c4>)
1000055e:	6123      	str	r3, [r4, #16]
10000560:	6162      	str	r2, [r4, #20]
10000562:	0028      	movs	r0, r5
10000564:	697a      	ldr	r2, [r7, #20]
10000566:	0149      	lsls	r1, r1, #5
10000568:	f003 ffc6 	bl	100044f8 <z_log_msg_static_create.constprop.0>
  LOG_INF("current_orientation: %d", capabilities.current_orientation);
1000056c:	2335      	movs	r3, #53	; 0x35
1000056e:	46b5      	mov	sp, r6
10000570:	18fb      	adds	r3, r7, r3
10000572:	781b      	ldrb	r3, [r3, #0]
10000574:	b088      	sub	sp, #32
10000576:	21c6      	movs	r1, #198	; 0xc6
10000578:	61a3      	str	r3, [r4, #24]
1000057a:	2303      	movs	r3, #3
1000057c:	4a34      	ldr	r2, [pc, #208]	; (10000650 <main+0x1c8>)
1000057e:	6123      	str	r3, [r4, #16]
10000580:	6162      	str	r2, [r4, #20]
10000582:	0028      	movs	r0, r5
10000584:	697a      	ldr	r2, [r7, #20]
10000586:	0149      	lsls	r1, r1, #5
10000588:	f003 ffb6 	bl	100044f8 <z_log_msg_static_create.constprop.0>
    .buf_size = x_res * y_res,
1000058c:	68fa      	ldr	r2, [r7, #12]
1000058e:	68bb      	ldr	r3, [r7, #8]
10000590:	46b5      	mov	sp, r6
10000592:	4353      	muls	r3, r2
  const struct display_buffer_descriptor buf_desc = {
10000594:	61fb      	str	r3, [r7, #28]
10000596:	68bb      	ldr	r3, [r7, #8]
10000598:	847a      	strh	r2, [r7, #34]	; 0x22
1000059a:	843b      	strh	r3, [r7, #32]
1000059c:	2380      	movs	r3, #128	; 0x80
1000059e:	84bb      	strh	r3, [r7, #36]	; 0x24
	return api->write(dev, x, y, desc, buf);
100005a0:	4b2c      	ldr	r3, [pc, #176]	; (10000654 <main+0x1cc>)
100005a2:	2200      	movs	r2, #0
100005a4:	9300      	str	r3, [sp, #0]
100005a6:	687b      	ldr	r3, [r7, #4]
100005a8:	0011      	movs	r1, r2
100005aa:	689c      	ldr	r4, [r3, #8]
100005ac:	231c      	movs	r3, #28
100005ae:	6938      	ldr	r0, [r7, #16]
100005b0:	18fb      	adds	r3, r7, r3
100005b2:	47a0      	blx	r4
  if (display_write(display, 0, 0, &buf_desc, buf) != 0) {
100005b4:	2800      	cmp	r0, #0
100005b6:	d00c      	beq.n	100005d2 <main+0x14a>
    LOG_ERR("could not write to display");
100005b8:	4b27      	ldr	r3, [pc, #156]	; (10000658 <main+0x1d0>)
100005ba:	2218      	movs	r2, #24
100005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
100005be:	2302      	movs	r3, #2
100005c0:	2182      	movs	r1, #130	; 0x82
100005c2:	64bb      	str	r3, [r7, #72]	; 0x48
100005c4:	332e      	adds	r3, #46	; 0x2e
100005c6:	189b      	adds	r3, r3, r2
100005c8:	0028      	movs	r0, r5
100005ca:	19da      	adds	r2, r3, r7
100005cc:	0149      	lsls	r1, r1, #5
100005ce:	f003 ff93 	bl	100044f8 <z_log_msg_static_create.constprop.0>
  if (display_set_contrast(display, 0) != 0) {
100005d2:	4b17      	ldr	r3, [pc, #92]	; (10000630 <main+0x1a8>)
100005d4:	2100      	movs	r1, #0
100005d6:	0018      	movs	r0, r3
100005d8:	617b      	str	r3, [r7, #20]
100005da:	f003 ff88 	bl	100044ee <display_set_contrast>
100005de:	2800      	cmp	r0, #0
100005e0:	d00c      	beq.n	100005fc <main+0x174>
    LOG_ERR("could not set display contrast");
100005e2:	4b1e      	ldr	r3, [pc, #120]	; (1000065c <main+0x1d4>)
100005e4:	2218      	movs	r2, #24
100005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
100005e8:	2302      	movs	r3, #2
100005ea:	2182      	movs	r1, #130	; 0x82
100005ec:	64bb      	str	r3, [r7, #72]	; 0x48
100005ee:	332e      	adds	r3, #46	; 0x2e
100005f0:	189b      	adds	r3, r3, r2
100005f2:	0028      	movs	r0, r5
100005f4:	19da      	adds	r2, r3, r7
100005f6:	0149      	lsls	r1, r1, #5
100005f8:	f003 ff7e 	bl	100044f8 <z_log_msg_static_create.constprop.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
100005fc:	2432      	movs	r4, #50	; 0x32
100005fe:	2500      	movs	r5, #0
    for (size_t i = 0; i < 255; i++) {
10000600:	2600      	movs	r6, #0
      display_set_contrast(display, i);
10000602:	6978      	ldr	r0, [r7, #20]
10000604:	b2f1      	uxtb	r1, r6
10000606:	f003 ff72 	bl	100044ee <display_set_contrast>
1000060a:	0020      	movs	r0, r4
1000060c:	0029      	movs	r1, r5
    for (size_t i = 0; i < 255; i++) {
1000060e:	3601      	adds	r6, #1
10000610:	f003 fcda 	bl	10003fc8 <z_impl_k_sleep>
10000614:	2eff      	cmp	r6, #255	; 0xff
10000616:	d1f4      	bne.n	10000602 <main+0x17a>
      display_set_contrast(display, i);
10000618:	6978      	ldr	r0, [r7, #20]
1000061a:	b2f1      	uxtb	r1, r6
1000061c:	f003 ff67 	bl	100044ee <display_set_contrast>
10000620:	0020      	movs	r0, r4
10000622:	0029      	movs	r1, r5
    for (size_t i = 255; i > 0; i--) {
10000624:	3e01      	subs	r6, #1
10000626:	f003 fccf 	bl	10003fc8 <z_impl_k_sleep>
1000062a:	2e00      	cmp	r6, #0
1000062c:	d1f4      	bne.n	10000618 <main+0x190>
1000062e:	e7e7      	b.n	10000600 <main+0x178>
10000630:	10005b70 	.word	0x10005b70
10000634:	10005ed0 	.word	0x10005ed0
10000638:	10005c90 	.word	0x10005c90
1000063c:	10005eec 	.word	0x10005eec
10000640:	10005efd 	.word	0x10005efd
10000644:	10005f0e 	.word	0x10005f0e
10000648:	10005f2a 	.word	0x10005f2a
1000064c:	10005f3a 	.word	0x10005f3a
10000650:	10005f53 	.word	0x10005f53
10000654:	2000004c 	.word	0x2000004c
10000658:	10005f6b 	.word	0x10005f6b
1000065c:	10005f86 	.word	0x10005f86

10000660 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10000660:	b5f0      	push	{r4, r5, r6, r7, lr}
10000662:	b095      	sub	sp, #84	; 0x54
10000664:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10000666:	2304      	movs	r3, #4
{
10000668:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000066a:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000066c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000066e:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10000670:	08da      	lsrs	r2, r3, #3
10000672:	2307      	movs	r3, #7
10000674:	401a      	ands	r2, r3
10000676:	3201      	adds	r2, #1
{
10000678:	0007      	movs	r7, r0
1000067a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
1000067c:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000067e:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10000680:	0782      	lsls	r2, r0, #30
10000682:	d000      	beq.n	10000686 <cbvprintf_package+0x26>
10000684:	e1d2      	b.n	10000a2c <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10000686:	1d02      	adds	r2, r0, #4
10000688:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
1000068a:	2800      	cmp	r0, #0
1000068c:	d004      	beq.n	10000698 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
1000068e:	2907      	cmp	r1, #7
10000690:	d80a      	bhi.n	100006a8 <cbvprintf_package+0x48>
		return -ENOSPC;
10000692:	201c      	movs	r0, #28
		return -EFAULT;
10000694:	4240      	negs	r0, r0
10000696:	e154      	b.n	10000942 <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10000698:	9a02      	ldr	r2, [sp, #8]
1000069a:	401a      	ands	r2, r3
1000069c:	0013      	movs	r3, r2
1000069e:	3204      	adds	r2, #4
100006a0:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
100006a2:	2208      	movs	r2, #8
100006a4:	1ad3      	subs	r3, r2, r3
100006a6:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
100006a8:	2504      	movs	r5, #4
	s = fmt--;
100006aa:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
100006ac:	002e      	movs	r6, r5
	s = fmt--;
100006ae:	3b01      	subs	r3, #1
100006b0:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
100006b2:	2300      	movs	r3, #0
100006b4:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
100006b6:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
100006b8:	9303      	str	r3, [sp, #12]
	bool parsing = false;
100006ba:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
100006bc:	3b01      	subs	r3, #1
100006be:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
100006c0:	2f00      	cmp	r7, #0
100006c2:	d002      	beq.n	100006ca <cbvprintf_package+0x6a>
				*(const char **)buf = s;
100006c4:	9b00      	ldr	r3, [sp, #0]
100006c6:	9a04      	ldr	r2, [sp, #16]
100006c8:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100006ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100006cc:	2b00      	cmp	r3, #0
100006ce:	dd00      	ble.n	100006d2 <cbvprintf_package+0x72>
100006d0:	e0eb      	b.n	100008aa <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
100006d2:	4b9d      	ldr	r3, [pc, #628]	; (10000948 <cbvprintf_package+0x2e8>)
100006d4:	9a04      	ldr	r2, [sp, #16]
100006d6:	429a      	cmp	r2, r3
100006d8:	d303      	bcc.n	100006e2 <cbvprintf_package+0x82>
100006da:	4b9c      	ldr	r3, [pc, #624]	; (1000094c <cbvprintf_package+0x2ec>)
100006dc:	429a      	cmp	r2, r3
100006de:	d200      	bcs.n	100006e2 <cbvprintf_package+0x82>
100006e0:	e0e3      	b.n	100008aa <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100006e2:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100006e4:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100006e6:	1bda      	subs	r2, r3, r7
100006e8:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100006ea:	0789      	lsls	r1, r1, #30
100006ec:	d500      	bpl.n	100006f0 <cbvprintf_package+0x90>
100006ee:	e109      	b.n	10000904 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100006f0:	9a03      	ldr	r2, [sp, #12]
100006f2:	2a0f      	cmp	r2, #15
100006f4:	d900      	bls.n	100006f8 <cbvprintf_package+0x98>
100006f6:	e0b4      	b.n	10000862 <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
100006f8:	2f00      	cmp	r7, #0
100006fa:	d100      	bne.n	100006fe <cbvprintf_package+0x9e>
100006fc:	e10a      	b.n	10000914 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
100006fe:	9903      	ldr	r1, [sp, #12]
10000700:	aa0c      	add	r2, sp, #48	; 0x30
10000702:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
10000704:	000a      	movs	r2, r1
10000706:	9906      	ldr	r1, [sp, #24]
10000708:	ab10      	add	r3, sp, #64	; 0x40
1000070a:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
1000070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000070e:	3301      	adds	r3, #1
10000710:	930a      	str	r3, [sp, #40]	; 0x28
10000712:	e0ee      	b.n	100008f2 <cbvprintf_package+0x292>
			switch (*fmt) {
10000714:	287a      	cmp	r0, #122	; 0x7a
10000716:	d861      	bhi.n	100007dc <cbvprintf_package+0x17c>
10000718:	284b      	cmp	r0, #75	; 0x4b
1000071a:	d80e      	bhi.n	1000073a <cbvprintf_package+0xda>
1000071c:	2847      	cmp	r0, #71	; 0x47
1000071e:	d85d      	bhi.n	100007dc <cbvprintf_package+0x17c>
10000720:	2829      	cmp	r0, #41	; 0x29
10000722:	d82b      	bhi.n	1000077c <cbvprintf_package+0x11c>
10000724:	2825      	cmp	r0, #37	; 0x25
10000726:	d056      	beq.n	100007d6 <cbvprintf_package+0x176>
10000728:	d858      	bhi.n	100007dc <cbvprintf_package+0x17c>
1000072a:	2820      	cmp	r0, #32
1000072c:	d07f      	beq.n	1000082e <cbvprintf_package+0x1ce>
1000072e:	3823      	subs	r0, #35	; 0x23
10000730:	4243      	negs	r3, r0
10000732:	4158      	adcs	r0, r3
10000734:	b2c3      	uxtb	r3, r0
				parsing = false;
10000736:	9301      	str	r3, [sp, #4]
				continue;
10000738:	e079      	b.n	1000082e <cbvprintf_package+0x1ce>
			switch (*fmt) {
1000073a:	384c      	subs	r0, #76	; 0x4c
1000073c:	282e      	cmp	r0, #46	; 0x2e
1000073e:	d84d      	bhi.n	100007dc <cbvprintf_package+0x17c>
10000740:	f7ff fd32 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000744:	4c4c4c75 	.word	0x4c4c4c75
10000748:	4c4c4c4c 	.word	0x4c4c4c4c
1000074c:	4c4c4c4c 	.word	0x4c4c4c4c
10000750:	4c4c4c4e 	.word	0x4c4c4c4e
10000754:	4c4c4c4c 	.word	0x4c4c4c4c
10000758:	4e4c5d4c 	.word	0x4e4c5d4c
1000075c:	5d5d5d4e 	.word	0x5d5d5d4e
10000760:	4c734e75 	.word	0x4c734e75
10000764:	4e184c75 	.word	0x4e184c75
10000768:	894c4c18 	.word	0x894c4c18
1000076c:	4c4c4e87 	.word	0x4c4c4e87
10000770:	4c4e      	.short	0x4c4e
10000772:	87          	.byte	0x87
10000773:	00          	.byte	0x00
10000774:	2300      	movs	r3, #0
				parsing = false;
10000776:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10000778:	2504      	movs	r5, #4
1000077a:	e03e      	b.n	100007fa <cbvprintf_package+0x19a>
1000077c:	2101      	movs	r1, #1
1000077e:	000a      	movs	r2, r1
10000780:	382a      	subs	r0, #42	; 0x2a
10000782:	b2c0      	uxtb	r0, r0
10000784:	4082      	lsls	r2, r0
10000786:	4b72      	ldr	r3, [pc, #456]	; (10000950 <cbvprintf_package+0x2f0>)
10000788:	421a      	tst	r2, r3
1000078a:	d150      	bne.n	1000082e <cbvprintf_package+0x1ce>
1000078c:	20e2      	movs	r0, #226	; 0xe2
1000078e:	0013      	movs	r3, r2
10000790:	0580      	lsls	r0, r0, #22
10000792:	4003      	ands	r3, r0
10000794:	4202      	tst	r2, r0
10000796:	d132      	bne.n	100007fe <cbvprintf_package+0x19e>
10000798:	0010      	movs	r0, r2
1000079a:	4008      	ands	r0, r1
1000079c:	9001      	str	r0, [sp, #4]
1000079e:	420a      	tst	r2, r1
100007a0:	d045      	beq.n	1000082e <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
100007a2:	9a00      	ldr	r2, [sp, #0]
100007a4:	4269      	negs	r1, r5
100007a6:	3a01      	subs	r2, #1
100007a8:	1952      	adds	r2, r2, r5
100007aa:	4011      	ands	r1, r2
100007ac:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
100007ae:	2f00      	cmp	r7, #0
100007b0:	d065      	beq.n	1000087e <cbvprintf_package+0x21e>
100007b2:	1bf2      	subs	r2, r6, r7
100007b4:	1852      	adds	r2, r2, r1
100007b6:	9902      	ldr	r1, [sp, #8]
100007b8:	428a      	cmp	r2, r1
100007ba:	d900      	bls.n	100007be <cbvprintf_package+0x15e>
100007bc:	e769      	b.n	10000692 <cbvprintf_package+0x32>
		if (is_str_arg) {
100007be:	2b00      	cmp	r3, #0
100007c0:	d16a      	bne.n	10000898 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
100007c2:	2e04      	cmp	r6, #4
100007c4:	d14b      	bne.n	1000085e <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
100007c6:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
100007c8:	9a00      	ldr	r2, [sp, #0]
100007ca:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
100007cc:	9b00      	ldr	r3, [sp, #0]
100007ce:	2604      	movs	r6, #4
100007d0:	3304      	adds	r3, #4
100007d2:	9300      	str	r3, [sp, #0]
100007d4:	e02b      	b.n	1000082e <cbvprintf_package+0x1ce>
				arg_idx--;
100007d6:	9b06      	ldr	r3, [sp, #24]
100007d8:	3b01      	subs	r3, #1
100007da:	9306      	str	r3, [sp, #24]
				parsing = false;
100007dc:	2300      	movs	r3, #0
100007de:	e7aa      	b.n	10000736 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
100007e0:	9b05      	ldr	r3, [sp, #20]
100007e2:	785a      	ldrb	r2, [r3, #1]
100007e4:	2300      	movs	r3, #0
				parsing = false;
100007e6:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
100007e8:	2a6c      	cmp	r2, #108	; 0x6c
100007ea:	d1da      	bne.n	100007a2 <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
100007ec:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
100007ee:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
100007f0:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
100007f2:	7812      	ldrb	r2, [r2, #0]
100007f4:	2a6c      	cmp	r2, #108	; 0x6c
100007f6:	d1d4      	bne.n	100007a2 <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
100007f8:	196d      	adds	r5, r5, r5
			switch (*fmt) {
100007fa:	002e      	movs	r6, r5
100007fc:	e7d1      	b.n	100007a2 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
100007fe:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
10000800:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
10000802:	3407      	adds	r4, #7
10000804:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
10000806:	1949      	adds	r1, r1, r5
10000808:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
1000080a:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
1000080c:	2f00      	cmp	r7, #0
1000080e:	d008      	beq.n	10000822 <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
10000810:	3501      	adds	r5, #1
10000812:	1bed      	subs	r5, r5, r7
10000814:	9e02      	ldr	r6, [sp, #8]
10000816:	186d      	adds	r5, r5, r1
10000818:	42b5      	cmp	r5, r6
1000081a:	d900      	bls.n	1000081e <cbvprintf_package+0x1be>
1000081c:	e739      	b.n	10000692 <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
1000081e:	600a      	str	r2, [r1, #0]
10000820:	604b      	str	r3, [r1, #4]
				parsing = false;
10000822:	2300      	movs	r3, #0
				buf += size;
10000824:	3108      	adds	r1, #8
10000826:	9100      	str	r1, [sp, #0]
				parsing = false;
10000828:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
1000082a:	2508      	movs	r5, #8
1000082c:	002e      	movs	r6, r5
1000082e:	9b05      	ldr	r3, [sp, #20]
10000830:	3301      	adds	r3, #1
10000832:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
10000834:	9b05      	ldr	r3, [sp, #20]
10000836:	7898      	ldrb	r0, [r3, #2]
10000838:	2800      	cmp	r0, #0
1000083a:	d077      	beq.n	1000092c <cbvprintf_package+0x2cc>
			if (!parsing) {
1000083c:	9b01      	ldr	r3, [sp, #4]
1000083e:	2b00      	cmp	r3, #0
10000840:	d000      	beq.n	10000844 <cbvprintf_package+0x1e4>
10000842:	e767      	b.n	10000714 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
10000844:	2825      	cmp	r0, #37	; 0x25
10000846:	d1f2      	bne.n	1000082e <cbvprintf_package+0x1ce>
					arg_idx++;
10000848:	9b06      	ldr	r3, [sp, #24]
1000084a:	3301      	adds	r3, #1
1000084c:	9306      	str	r3, [sp, #24]
					parsing = true;
1000084e:	2301      	movs	r3, #1
10000850:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
10000852:	2504      	movs	r5, #4
10000854:	e7ea      	b.n	1000082c <cbvprintf_package+0x1cc>
			switch (*fmt) {
10000856:	2200      	movs	r2, #0
10000858:	9b01      	ldr	r3, [sp, #4]
1000085a:	9201      	str	r2, [sp, #4]
1000085c:	e78c      	b.n	10000778 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
1000085e:	2e08      	cmp	r6, #8
10000860:	d001      	beq.n	10000866 <cbvprintf_package+0x206>
					return -EINVAL;
10000862:	2016      	movs	r0, #22
10000864:	e716      	b.n	10000694 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
10000866:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
10000868:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
1000086a:	3407      	adds	r4, #7
1000086c:	439c      	bics	r4, r3
1000086e:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
10000870:	600a      	str	r2, [r1, #0]
10000872:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
10000874:	9b00      	ldr	r3, [sp, #0]
10000876:	2608      	movs	r6, #8
10000878:	3308      	adds	r3, #8
1000087a:	9300      	str	r3, [sp, #0]
1000087c:	e7d7      	b.n	1000082e <cbvprintf_package+0x1ce>
		if (is_str_arg) {
1000087e:	2b00      	cmp	r3, #0
10000880:	d10a      	bne.n	10000898 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
10000882:	2e04      	cmp	r6, #4
10000884:	d101      	bne.n	1000088a <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
10000886:	3404      	adds	r4, #4
			if (buf0 != NULL) {
10000888:	e7a0      	b.n	100007cc <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
1000088a:	2e08      	cmp	r6, #8
1000088c:	d1e9      	bne.n	10000862 <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
1000088e:	2307      	movs	r3, #7
10000890:	3407      	adds	r4, #7
10000892:	439c      	bics	r4, r3
10000894:	3408      	adds	r4, #8
			if (buf0 != NULL) {
10000896:	e7ed      	b.n	10000874 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
10000898:	9b05      	ldr	r3, [sp, #20]
1000089a:	3302      	adds	r3, #2
1000089c:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000089e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100008a0:	3b01      	subs	r3, #1
100008a2:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
100008a4:	cc08      	ldmia	r4!, {r3}
100008a6:	9304      	str	r3, [sp, #16]
100008a8:	e70a      	b.n	100006c0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
100008aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
100008ac:	079b      	lsls	r3, r3, #30
100008ae:	d523      	bpl.n	100008f8 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100008b0:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100008b2:	9b00      	ldr	r3, [sp, #0]
100008b4:	1bda      	subs	r2, r3, r7
100008b6:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100008b8:	2080      	movs	r0, #128	; 0x80
100008ba:	0080      	lsls	r0, r0, #2
100008bc:	4282      	cmp	r2, r0
100008be:	d2d0      	bcs.n	10000862 <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100008c0:	9a03      	ldr	r2, [sp, #12]
100008c2:	2a0f      	cmp	r2, #15
100008c4:	d8cd      	bhi.n	10000862 <cbvprintf_package+0x202>
				if (buf0 != NULL) {
100008c6:	2f00      	cmp	r7, #0
100008c8:	d01e      	beq.n	10000908 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
100008ca:	9803      	ldr	r0, [sp, #12]
100008cc:	b2db      	uxtb	r3, r3
100008ce:	aa0c      	add	r2, sp, #48	; 0x30
100008d0:	5413      	strb	r3, [r2, r0]
100008d2:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
100008d4:	9b06      	ldr	r3, [sp, #24]
100008d6:	aa10      	add	r2, sp, #64	; 0x40
100008d8:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
100008da:	2900      	cmp	r1, #0
100008dc:	d100      	bne.n	100008e0 <cbvprintf_package+0x280>
100008de:	e715      	b.n	1000070c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
100008e0:	2280      	movs	r2, #128	; 0x80
100008e2:	4663      	mov	r3, ip
100008e4:	4252      	negs	r2, r2
100008e6:	4313      	orrs	r3, r2
100008e8:	aa0c      	add	r2, sp, #48	; 0x30
100008ea:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
100008ec:	9b07      	ldr	r3, [sp, #28]
100008ee:	3301      	adds	r3, #1
100008f0:	9307      	str	r3, [sp, #28]
				s_idx++;
100008f2:	9b03      	ldr	r3, [sp, #12]
100008f4:	3301      	adds	r3, #1
100008f6:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
100008f8:	9b00      	ldr	r3, [sp, #0]
100008fa:	3304      	adds	r3, #4
100008fc:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
100008fe:	9b05      	ldr	r3, [sp, #20]
10000900:	3b01      	subs	r3, #1
10000902:	e796      	b.n	10000832 <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10000904:	2100      	movs	r1, #0
10000906:	e7d7      	b.n	100008b8 <cbvprintf_package+0x258>
				} else if (is_ro) {
10000908:	2900      	cmp	r1, #0
1000090a:	d003      	beq.n	10000914 <cbvprintf_package+0x2b4>
					len += 1;
1000090c:	9b02      	ldr	r3, [sp, #8]
1000090e:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
10000910:	9302      	str	r3, [sp, #8]
10000912:	e7ee      	b.n	100008f2 <cbvprintf_package+0x292>
					len += 2;
10000914:	9b02      	ldr	r3, [sp, #8]
10000916:	3302      	adds	r3, #2
10000918:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
1000091a:	9b08      	ldr	r3, [sp, #32]
1000091c:	2b00      	cmp	r3, #0
1000091e:	d1e8      	bne.n	100008f2 <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
10000920:	9804      	ldr	r0, [sp, #16]
10000922:	f004 fad1 	bl	10004ec8 <strlen>
10000926:	9b02      	ldr	r3, [sp, #8]
10000928:	181b      	adds	r3, r3, r0
1000092a:	e7f1      	b.n	10000910 <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
1000092c:	2280      	movs	r2, #128	; 0x80
1000092e:	9b00      	ldr	r3, [sp, #0]
10000930:	00d2      	lsls	r2, r2, #3
10000932:	1bdb      	subs	r3, r3, r7
10000934:	4293      	cmp	r3, r2
10000936:	d294      	bcs.n	10000862 <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
10000938:	2f00      	cmp	r7, #0
1000093a:	d10b      	bne.n	10000954 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
1000093c:	9802      	ldr	r0, [sp, #8]
1000093e:	3808      	subs	r0, #8
10000940:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
10000942:	b015      	add	sp, #84	; 0x54
10000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000946:	46c0      	nop			; (mov r8, r8)
10000948:	10005ac0 	.word	0x10005ac0
1000094c:	10009adc 	.word	0x10009adc
10000950:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10000954:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000956:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
10000958:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
1000095a:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
1000095c:	466b      	mov	r3, sp
1000095e:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
10000960:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000962:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
10000964:	2a00      	cmp	r2, #0
10000966:	d00c      	beq.n	10000982 <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000968:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
1000096a:	9b07      	ldr	r3, [sp, #28]
1000096c:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
1000096e:	2b00      	cmp	r3, #0
10000970:	d120      	bne.n	100009b4 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
10000972:	2600      	movs	r6, #0
10000974:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
10000976:	9b03      	ldr	r3, [sp, #12]
10000978:	42b3      	cmp	r3, r6
1000097a:	d120      	bne.n	100009be <cbvprintf_package+0x35e>
	return BUF_OFFSET;
1000097c:	9b00      	ldr	r3, [sp, #0]
1000097e:	1bd8      	subs	r0, r3, r7
10000980:	e7df      	b.n	10000942 <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
10000982:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
10000984:	e7f1      	b.n	1000096a <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
10000986:	ac0c      	add	r4, sp, #48	; 0x30
10000988:	56e4      	ldrsb	r4, [r4, r3]
1000098a:	a90c      	add	r1, sp, #48	; 0x30
1000098c:	5c59      	ldrb	r1, [r3, r1]
1000098e:	2c00      	cmp	r4, #0
10000990:	da0b      	bge.n	100009aa <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
10000992:	9c00      	ldr	r4, [sp, #0]
10000994:	9d02      	ldr	r5, [sp, #8]
10000996:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10000998:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
1000099a:	42ac      	cmp	r4, r5
1000099c:	d900      	bls.n	100009a0 <cbvprintf_package+0x340>
1000099e:	e678      	b.n	10000692 <cbvprintf_package+0x32>
			*buf++ = pos;
100009a0:	9c00      	ldr	r4, [sp, #0]
100009a2:	7021      	strb	r1, [r4, #0]
100009a4:	0021      	movs	r1, r4
100009a6:	3101      	adds	r1, #1
100009a8:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
100009aa:	3301      	adds	r3, #1
100009ac:	9903      	ldr	r1, [sp, #12]
100009ae:	4299      	cmp	r1, r3
100009b0:	d1e9      	bne.n	10000986 <cbvprintf_package+0x326>
100009b2:	e7de      	b.n	10000972 <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
100009b4:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
100009b6:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
100009b8:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
100009ba:	1bd2      	subs	r2, r2, r7
100009bc:	e7f6      	b.n	100009ac <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
100009be:	9b07      	ldr	r3, [sp, #28]
100009c0:	2b00      	cmp	r3, #0
100009c2:	d002      	beq.n	100009ca <cbvprintf_package+0x36a>
100009c4:	782b      	ldrb	r3, [r5, #0]
100009c6:	2b7f      	cmp	r3, #127	; 0x7f
100009c8:	d821      	bhi.n	10000a0e <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
100009ca:	9b08      	ldr	r3, [sp, #32]
100009cc:	2b00      	cmp	r3, #0
100009ce:	d021      	beq.n	10000a14 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
100009d0:	ab10      	add	r3, sp, #64	; 0x40
100009d2:	9a00      	ldr	r2, [sp, #0]
100009d4:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
100009d6:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
100009d8:	7013      	strb	r3, [r2, #0]
100009da:	0013      	movs	r3, r2
100009dc:	3301      	adds	r3, #1
100009de:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
100009e0:	2301      	movs	r3, #1
100009e2:	9a00      	ldr	r2, [sp, #0]
100009e4:	1bdb      	subs	r3, r3, r7
100009e6:	191b      	adds	r3, r3, r4
100009e8:	18d3      	adds	r3, r2, r3
100009ea:	9a02      	ldr	r2, [sp, #8]
100009ec:	4293      	cmp	r3, r2
100009ee:	d900      	bls.n	100009f2 <cbvprintf_package+0x392>
100009f0:	e64f      	b.n	10000692 <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
100009f2:	9b00      	ldr	r3, [sp, #0]
100009f4:	9a00      	ldr	r2, [sp, #0]
100009f6:	3301      	adds	r3, #1
100009f8:	9301      	str	r3, [sp, #4]
100009fa:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
100009fc:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
100009fe:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
10000a00:	9801      	ldr	r0, [sp, #4]
10000a02:	0022      	movs	r2, r4
10000a04:	f004 fa72 	bl	10004eec <memcpy>
		buf += size;
10000a08:	9b01      	ldr	r3, [sp, #4]
10000a0a:	191b      	adds	r3, r3, r4
10000a0c:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
10000a0e:	3601      	adds	r6, #1
10000a10:	3501      	adds	r5, #1
10000a12:	e7b0      	b.n	10000976 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
10000a14:	782b      	ldrb	r3, [r5, #0]
10000a16:	009b      	lsls	r3, r3, #2
10000a18:	18fb      	adds	r3, r7, r3
10000a1a:	681a      	ldr	r2, [r3, #0]
10000a1c:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10000a1e:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
10000a20:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10000a22:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
10000a24:	f004 fa50 	bl	10004ec8 <strlen>
10000a28:	1c44      	adds	r4, r0, #1
10000a2a:	e7d9      	b.n	100009e0 <cbvprintf_package+0x380>
		return -EFAULT;
10000a2c:	200e      	movs	r0, #14
10000a2e:	e631      	b.n	10000694 <cbvprintf_package+0x34>

10000a30 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
10000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a32:	b099      	sub	sp, #100	; 0x64
10000a34:	af00      	add	r7, sp, #0
10000a36:	61bb      	str	r3, [r7, #24]
10000a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000a3a:	0006      	movs	r6, r0
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
10000a3c:	071b      	lsls	r3, r3, #28
10000a3e:	0fdb      	lsrs	r3, r3, #31
{
10000a40:	6279      	str	r1, [r7, #36]	; 0x24
10000a42:	62ba      	str	r2, [r7, #40]	; 0x28
10000a44:	613b      	str	r3, [r7, #16]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
10000a46:	2900      	cmp	r1, #0
10000a48:	d10a      	bne.n	10000a60 <cbprintf_package_convert+0x30>
	args_size = buf[0] * sizeof(int);
10000a4a:	7804      	ldrb	r4, [r0, #0]
	ros_nbr   = buf[2];
10000a4c:	7883      	ldrb	r3, [r0, #2]
	args_size = buf[0] * sizeof(int);
10000a4e:	00a4      	lsls	r4, r4, #2
	buf += ros_nbr;
10000a50:	18e4      	adds	r4, r4, r3
	s_nbr     = buf[1];
10000a52:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
10000a54:	1904      	adds	r4, r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
10000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a58:	429d      	cmp	r5, r3
10000a5a:	d81c      	bhi.n	10000a96 <cbprintf_package_convert+0x66>
	return (size_t)(uintptr_t)(buf - start);
10000a5c:	1ba3      	subs	r3, r4, r6
10000a5e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
10000a60:	78b3      	ldrb	r3, [r6, #2]
10000a62:	633b      	str	r3, [r7, #48]	; 0x30
10000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
10000a66:	78f3      	ldrb	r3, [r6, #3]
10000a68:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
10000a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000a6c:	2b00      	cmp	r3, #0
10000a6e:	d002      	beq.n	10000a76 <cbprintf_package_convert+0x46>
10000a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000a72:	07db      	lsls	r3, r3, #31
10000a74:	d419      	bmi.n	10000aaa <cbprintf_package_convert+0x7a>
	rw_cpy = rws_nbr > 0 &&
10000a76:	697b      	ldr	r3, [r7, #20]
10000a78:	2b00      	cmp	r3, #0
10000a7a:	d167      	bne.n	10000b4c <cbprintf_package_convert+0x11c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
10000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000a7e:	2b00      	cmp	r3, #0
10000a80:	d003      	beq.n	10000a8a <cbprintf_package_convert+0x5a>
			cb(in_packaged, in_len, ctx);
10000a82:	0030      	movs	r0, r6
10000a84:	69ba      	ldr	r2, [r7, #24]
10000a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
10000a88:	4798      	blx	r3
		}

		return in_len;
10000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a8c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
10000a8e:	46bd      	mov	sp, r7
10000a90:	6b78      	ldr	r0, [r7, #52]	; 0x34
10000a92:	b019      	add	sp, #100	; 0x64
10000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf++;
10000a96:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
10000a98:	0020      	movs	r0, r4
10000a9a:	f004 fa15 	bl	10004ec8 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
10000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		buf += strlen((const char *)buf) + 1;
10000aa0:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
10000aa2:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
10000aa4:	1824      	adds	r4, r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
10000aa6:	627b      	str	r3, [r7, #36]	; 0x24
10000aa8:	e7d5      	b.n	10000a56 <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
10000aaa:	7833      	ldrb	r3, [r6, #0]
	args_size = in_desc->len * sizeof(int);
10000aac:	009b      	lsls	r3, r3, #2
10000aae:	623b      	str	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
10000ab0:	6873      	ldr	r3, [r6, #4]
10000ab2:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
10000ab4:	6a3b      	ldr	r3, [r7, #32]
10000ab6:	18f5      	adds	r5, r6, r3
	if (cb == NULL) {
10000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000aba:	2b00      	cmp	r3, #0
10000abc:	d000      	beq.n	10000ac0 <cbprintf_package_convert+0x90>
10000abe:	e124      	b.n	10000d0a <cbprintf_package_convert+0x2da>
		out_len = (int)in_len;
10000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
10000ac2:	002c      	movs	r4, r5
		out_len = (int)in_len;
10000ac4:	637b      	str	r3, [r7, #52]	; 0x34
		if (ro_cpy) {
10000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000ac8:	18ed      	adds	r5, r5, r3
	size_t strl_cnt = 0;
10000aca:	2300      	movs	r3, #0
10000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (unsigned int i = 0; i < ros_nbr; i++) {
10000ace:	42ac      	cmp	r4, r5
10000ad0:	d151      	bne.n	10000b76 <cbprintf_package_convert+0x146>
		bool drop_ro_str_pos = !(flags &
10000ad2:	2305      	movs	r3, #5
10000ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000ad6:	4013      	ands	r3, r2
10000ad8:	425a      	negs	r2, r3
10000ada:	4153      	adcs	r3, r2
10000adc:	3301      	adds	r3, #1
10000ade:	627b      	str	r3, [r7, #36]	; 0x24
10000ae0:	697b      	ldr	r3, [r7, #20]
10000ae2:	005b      	lsls	r3, r3, #1
10000ae4:	18eb      	adds	r3, r5, r3
10000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (unsigned int i = 0; i < rws_nbr; i++) {
10000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000aea:	429d      	cmp	r5, r3
10000aec:	d0cf      	beq.n	10000a8e <cbprintf_package_convert+0x5e>
			uint8_t arg_idx = *str_pos++;
10000aee:	782b      	ldrb	r3, [r5, #0]
10000af0:	633b      	str	r3, [r7, #48]	; 0x30
			const char *str = *(const char **)&buf32[arg_pos];
10000af2:	786b      	ldrb	r3, [r5, #1]
10000af4:	009b      	lsls	r3, r3, #2
10000af6:	599c      	ldr	r4, [r3, r6]
10000af8:	4bc7      	ldr	r3, [pc, #796]	; (10000e18 <cbprintf_package_convert+0x3e8>)
10000afa:	429c      	cmp	r4, r3
10000afc:	d302      	bcc.n	10000b04 <cbprintf_package_convert+0xd4>
10000afe:	4bc7      	ldr	r3, [pc, #796]	; (10000e1c <cbprintf_package_convert+0x3ec>)
10000b00:	429c      	cmp	r4, r3
10000b02:	d35d      	bcc.n	10000bc0 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
10000b04:	693b      	ldr	r3, [r7, #16]
10000b06:	2b00      	cmp	r3, #0
10000b08:	d06b      	beq.n	10000be2 <cbprintf_package_convert+0x1b2>
10000b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
10000b0c:	69f8      	ldr	r0, [r7, #28]
10000b0e:	f003 fd2c 	bl	1000456a <is_ptr>
10000b12:	2800      	cmp	r0, #0
10000b14:	d065      	beq.n	10000be2 <cbprintf_package_convert+0x1b2>
				LOG_WRN("(unsigned) char * used for %%p argument. "
10000b16:	466c      	mov	r4, sp
10000b18:	b08a      	sub	sp, #40	; 0x28
10000b1a:	466a      	mov	r2, sp
10000b1c:	4bc0      	ldr	r3, [pc, #768]	; (10000e20 <cbprintf_package_convert+0x3f0>)
10000b1e:	6153      	str	r3, [r2, #20]
10000b20:	69fb      	ldr	r3, [r7, #28]
10000b22:	6193      	str	r3, [r2, #24]
10000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000b26:	61d3      	str	r3, [r2, #28]
10000b28:	2380      	movs	r3, #128	; 0x80
10000b2a:	009b      	lsls	r3, r3, #2
10000b2c:	8413      	strh	r3, [r2, #32]
10000b2e:	4bbd      	ldr	r3, [pc, #756]	; (10000e24 <cbprintf_package_convert+0x3f4>)
10000b30:	6113      	str	r3, [r2, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
10000b32:	2192      	movs	r1, #146	; 0x92
10000b34:	2300      	movs	r3, #0
10000b36:	48bc      	ldr	r0, [pc, #752]	; (10000e28 <cbprintf_package_convert+0x3f8>)
10000b38:	3210      	adds	r2, #16
10000b3a:	0189      	lsls	r1, r1, #6
10000b3c:	f000 ffa0 	bl	10001a80 <z_impl_z_log_msg_static_create>
10000b40:	46a5      	mov	sp, r4
				out_len -= 2;
10000b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000b44:	3b02      	subs	r3, #2
				out_len += (len - 1);
10000b46:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0; i < rws_nbr; i++) {
10000b48:	3502      	adds	r5, #2
10000b4a:	e7cd      	b.n	10000ae8 <cbprintf_package_convert+0xb8>
	rw_cpy = rws_nbr > 0 &&
10000b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000b4e:	079b      	lsls	r3, r3, #30
10000b50:	d400      	bmi.n	10000b54 <cbprintf_package_convert+0x124>
10000b52:	e793      	b.n	10000a7c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
10000b54:	7833      	ldrb	r3, [r6, #0]
10000b56:	009b      	lsls	r3, r3, #2
10000b58:	623b      	str	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
10000b5a:	6873      	ldr	r3, [r6, #4]
10000b5c:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
10000b5e:	6a3b      	ldr	r3, [r7, #32]
10000b60:	18f5      	adds	r5, r6, r3
	if (cb == NULL) {
10000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000b64:	2b00      	cmp	r3, #0
10000b66:	d156      	bne.n	10000c16 <cbprintf_package_convert+0x1e6>
		out_len = (int)in_len;
10000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000b6a:	637b      	str	r3, [r7, #52]	; 0x34
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000b6e:	2b00      	cmp	r3, #0
10000b70:	d11b      	bne.n	10000baa <cbprintf_package_convert+0x17a>
	size_t strl_cnt = 0;
10000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
10000b74:	e7ad      	b.n	10000ad2 <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
10000b76:	7823      	ldrb	r3, [r4, #0]
10000b78:	009b      	lsls	r3, r3, #2
		return 1 + strlen(str);
10000b7a:	5998      	ldr	r0, [r3, r6]
10000b7c:	f004 f9a4 	bl	10004ec8 <strlen>
				if (strl && strl_cnt < strl_len) {
10000b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
10000b82:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
10000b84:	2b00      	cmp	r3, #0
10000b86:	d00b      	beq.n	10000ba0 <cbprintf_package_convert+0x170>
10000b88:	2280      	movs	r2, #128	; 0x80
10000b8a:	18ba      	adds	r2, r7, r2
10000b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000b8e:	6812      	ldr	r2, [r2, #0]
10000b90:	4293      	cmp	r3, r2
10000b92:	d205      	bcs.n	10000ba0 <cbprintf_package_convert+0x170>
					strl[strl_cnt++] = (uint16_t)len;
10000b94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
10000b96:	005b      	lsls	r3, r3, #1
10000b98:	5298      	strh	r0, [r3, r2]
10000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000b9c:	3301      	adds	r3, #1
10000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
				out_len += len;
10000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				str_pos++;
10000ba2:	3401      	adds	r4, #1
				out_len += len;
10000ba4:	181b      	adds	r3, r3, r0
10000ba6:	637b      	str	r3, [r7, #52]	; 0x34
			for (unsigned int i = 0; i < ros_nbr; i++) {
10000ba8:	e791      	b.n	10000ace <cbprintf_package_convert+0x9e>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000baa:	2304      	movs	r3, #4
10000bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000bae:	401a      	ands	r2, r3
10000bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
10000bb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000bb4:	421a      	tst	r2, r3
10000bb6:	d08c      	beq.n	10000ad2 <cbprintf_package_convert+0xa2>
				str_pos += ros_nbr;
10000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000bba:	18ed      	adds	r5, r5, r3
	size_t strl_cnt = 0;
10000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000bbe:	e7d8      	b.n	10000b72 <cbprintf_package_convert+0x142>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
10000bc0:	693b      	ldr	r3, [r7, #16]
10000bc2:	2b00      	cmp	r3, #0
10000bc4:	d005      	beq.n	10000bd2 <cbprintf_package_convert+0x1a2>
10000bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
10000bc8:	69f8      	ldr	r0, [r7, #28]
10000bca:	f003 fcce 	bl	1000456a <is_ptr>
10000bce:	2800      	cmp	r0, #0
10000bd0:	d1a1      	bne.n	10000b16 <cbprintf_package_convert+0xe6>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
10000bd2:	2201      	movs	r2, #1
10000bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000bd6:	4213      	tst	r3, r2
10000bd8:	d107      	bne.n	10000bea <cbprintf_package_convert+0x1ba>
					out_len -= drop_ro_str_pos ? 2 : 1;
10000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10000bde:	1a9b      	subs	r3, r3, r2
10000be0:	e7b1      	b.n	10000b46 <cbprintf_package_convert+0x116>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
10000be2:	2202      	movs	r2, #2
10000be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000be6:	4213      	tst	r3, r2
10000be8:	d0ae      	beq.n	10000b48 <cbprintf_package_convert+0x118>
		return 1 + strlen(str);
10000bea:	0020      	movs	r0, r4
10000bec:	f004 f96c 	bl	10004ec8 <strlen>
				if (strl && strl_cnt < strl_len) {
10000bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10000bf2:	2b00      	cmp	r3, #0
10000bf4:	d00c      	beq.n	10000c10 <cbprintf_package_convert+0x1e0>
10000bf6:	2280      	movs	r2, #128	; 0x80
10000bf8:	18ba      	adds	r2, r7, r2
10000bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000bfc:	6812      	ldr	r2, [r2, #0]
10000bfe:	4293      	cmp	r3, r2
10000c00:	d206      	bcs.n	10000c10 <cbprintf_package_convert+0x1e0>
					strl[strl_cnt++] = (uint16_t)len;
10000c02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
10000c04:	005b      	lsls	r3, r3, #1
		return 1 + strlen(str);
10000c06:	1c42      	adds	r2, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
10000c08:	525a      	strh	r2, [r3, r1]
10000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000c0c:	3301      	adds	r3, #1
10000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				out_len += (len - 1);
10000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000c12:	181b      	adds	r3, r3, r0
10000c14:	e797      	b.n	10000b46 <cbprintf_package_convert+0x116>
		scpy_cnt = 0;
10000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		keep_cnt = 0;
10000c18:	1e1c      	subs	r4, r3, #0
		scpy_cnt = 0;
10000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000c1c:	d012      	beq.n	10000c44 <cbprintf_package_convert+0x214>
10000c1e:	2304      	movs	r3, #4
10000c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000c22:	401a      	ands	r2, r3
		keep_cnt = 0;
10000c24:	0014      	movs	r4, r2
		scpy_cnt = 0;
10000c26:	62fa      	str	r2, [r7, #44]	; 0x2c
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
10000c2a:	421a      	tst	r2, r3
10000c2c:	d00a      	beq.n	10000c44 <cbprintf_package_convert+0x214>
		scpy_cnt = 0;
10000c2e:	2300      	movs	r3, #0
		keep_cnt = ros_nbr;
10000c30:	6b3c      	ldr	r4, [r7, #48]	; 0x30
		scpy_cnt = 0;
10000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
		dst = keep_str_pos;
10000c34:	3318      	adds	r3, #24
	if (cb == NULL) {
10000c36:	2238      	movs	r2, #56	; 0x38
10000c38:	189b      	adds	r3, r3, r2
		memcpy(dst, str_pos, ros_nbr);
10000c3a:	0029      	movs	r1, r5
10000c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	if (cb == NULL) {
10000c3e:	19d8      	adds	r0, r3, r7
		memcpy(dst, str_pos, ros_nbr);
10000c40:	f004 f954 	bl	10004eec <memcpy>
	str_pos += ros_nbr;
10000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10000c46:	18eb      	adds	r3, r5, r3
10000c48:	60fb      	str	r3, [r7, #12]
	for (unsigned int i = 0; i < rws_nbr; i++) {
10000c4a:	637b      	str	r3, [r7, #52]	; 0x34
10000c4c:	697b      	ldr	r3, [r7, #20]
10000c4e:	005b      	lsls	r3, r3, #1
10000c50:	60bb      	str	r3, [r7, #8]
10000c52:	68ba      	ldr	r2, [r7, #8]
10000c54:	68fb      	ldr	r3, [r7, #12]
10000c56:	4694      	mov	ip, r2
10000c58:	4463      	add	r3, ip
10000c5a:	607b      	str	r3, [r7, #4]
10000c5c:	687b      	ldr	r3, [r7, #4]
10000c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10000c60:	4293      	cmp	r3, r2
10000c62:	d155      	bne.n	10000d10 <cbprintf_package_convert+0x2e0>
	out_desc.len = in_desc->len;
10000c64:	7833      	ldrb	r3, [r6, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000c66:	2100      	movs	r1, #0
	out_desc.len = in_desc->len;
10000c68:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
10000c6a:	7875      	ldrb	r5, [r6, #1]
10000c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000c6e:	195a      	adds	r2, r3, r5
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
10000c72:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
10000c74:	079b      	lsls	r3, r3, #30
10000c76:	d400      	bmi.n	10000c7a <cbprintf_package_convert+0x24a>
10000c78:	0861      	lsrs	r1, r4, #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
10000c7a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10000c7c:	2300      	movs	r3, #0
10000c7e:	07c0      	lsls	r0, r0, #31
10000c80:	d403      	bmi.n	10000c8a <cbprintf_package_convert+0x25a>
			((flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) ? keep_cnt : 0);
10000c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000c84:	075b      	lsls	r3, r3, #29
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
10000c86:	17db      	asrs	r3, r3, #31
10000c88:	4023      	ands	r3, r4
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000c8a:	78b0      	ldrb	r0, [r6, #2]
	*in_desc = out_desc;
10000c8c:	7072      	strb	r2, [r6, #1]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000c8e:	61f8      	str	r0, [r7, #28]
10000c90:	78f0      	ldrb	r0, [r6, #3]
	*in_desc = out_desc;
10000c92:	70b3      	strb	r3, [r6, #2]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
10000c94:	6138      	str	r0, [r7, #16]
	*in_desc = out_desc;
10000c96:	70f1      	strb	r1, [r6, #3]
	rv = cb(in_packaged, args_size, ctx);
10000c98:	0030      	movs	r0, r6
10000c9a:	69ba      	ldr	r2, [r7, #24]
10000c9c:	6a39      	ldr	r1, [r7, #32]
10000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000ca0:	4798      	blx	r3
10000ca2:	6378      	str	r0, [r7, #52]	; 0x34
	if (rv < 0) {
10000ca4:	2800      	cmp	r0, #0
10000ca6:	da00      	bge.n	10000caa <cbprintf_package_convert+0x27a>
10000ca8:	e6f1      	b.n	10000a8e <cbprintf_package_convert+0x5e>
	*in_desc = in_desc_backup;
10000caa:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000cac:	2038      	movs	r0, #56	; 0x38
	*in_desc = in_desc_backup;
10000cae:	7033      	strb	r3, [r6, #0]
10000cb0:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000cb2:	0021      	movs	r1, r4
	*in_desc = in_desc_backup;
10000cb4:	70b3      	strb	r3, [r6, #2]
10000cb6:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000cb8:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
10000cba:	70f3      	strb	r3, [r6, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000cbc:	2318      	movs	r3, #24
10000cbe:	181b      	adds	r3, r3, r0
10000cc0:	19d8      	adds	r0, r3, r7
	*in_desc = in_desc_backup;
10000cc2:	7075      	strb	r5, [r6, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
10000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000cc6:	4798      	blx	r3
10000cc8:	1e04      	subs	r4, r0, #0
	if (rv < 0) {
10000cca:	da00      	bge.n	10000cce <cbprintf_package_convert+0x29e>
10000ccc:	e09f      	b.n	10000e0e <cbprintf_package_convert+0x3de>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	rv = cb(str_pos, strs_len, ctx);
10000cd2:	68f8      	ldr	r0, [r7, #12]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000cd4:	1a99      	subs	r1, r3, r2
10000cd6:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
10000cd8:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000cda:	1ac9      	subs	r1, r1, r3
10000cdc:	68bb      	ldr	r3, [r7, #8]
	rv = cb(str_pos, strs_len, ctx);
10000cde:	469c      	mov	ip, r3
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
10000ce0:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
10000ce2:	4460      	add	r0, ip
10000ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000ce6:	4798      	blx	r3
	if (rv < 0) {
10000ce8:	2800      	cmp	r0, #0
10000cea:	da00      	bge.n	10000cee <cbprintf_package_convert+0x2be>
10000cec:	e091      	b.n	10000e12 <cbprintf_package_convert+0x3e2>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000cee:	2500      	movs	r5, #0
	out_len += rv;
10000cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000cf2:	191c      	adds	r4, r3, r4
	out_len += rv;
10000cf4:	1823      	adds	r3, r4, r0
10000cf6:	637b      	str	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000cfa:	429d      	cmp	r5, r3
10000cfc:	d359      	bcc.n	10000db2 <cbprintf_package_convert+0x382>
	(void)cb(NULL, 0, ctx);
10000cfe:	2100      	movs	r1, #0
10000d00:	69ba      	ldr	r2, [r7, #24]
10000d02:	0008      	movs	r0, r1
10000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000d06:	4798      	blx	r3
	return out_len;
10000d08:	e6c1      	b.n	10000a8e <cbprintf_package_convert+0x5e>
	if (cb == NULL) {
10000d0a:	2400      	movs	r4, #0
10000d0c:	2308      	movs	r3, #8
10000d0e:	e792      	b.n	10000c36 <cbprintf_package_convert+0x206>
		uint8_t arg_idx = *str_pos++;
10000d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000d12:	4a41      	ldr	r2, [pc, #260]	; (10000e18 <cbprintf_package_convert+0x3e8>)
10000d14:	781b      	ldrb	r3, [r3, #0]
10000d16:	617b      	str	r3, [r7, #20]
		uint8_t arg_pos = *str_pos++;
10000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000d1a:	785d      	ldrb	r5, [r3, #1]
		const char *str = *(const char **)&buf32[arg_pos];
10000d1c:	00ab      	lsls	r3, r5, #2
10000d1e:	599b      	ldr	r3, [r3, r6]
10000d20:	4293      	cmp	r3, r2
10000d22:	d302      	bcc.n	10000d2a <cbprintf_package_convert+0x2fa>
10000d24:	4a3d      	ldr	r2, [pc, #244]	; (10000e1c <cbprintf_package_convert+0x3ec>)
10000d26:	4293      	cmp	r3, r2
10000d28:	d30c      	bcc.n	10000d44 <cbprintf_package_convert+0x314>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
10000d2a:	693b      	ldr	r3, [r7, #16]
10000d2c:	2b00      	cmp	r3, #0
10000d2e:	d02c      	beq.n	10000d8a <cbprintf_package_convert+0x35a>
10000d30:	6979      	ldr	r1, [r7, #20]
10000d32:	69f8      	ldr	r0, [r7, #28]
10000d34:	f003 fc19 	bl	1000456a <is_ptr>
10000d38:	2800      	cmp	r0, #0
10000d3a:	d026      	beq.n	10000d8a <cbprintf_package_convert+0x35a>
	for (unsigned int i = 0; i < rws_nbr; i++) {
10000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000d3e:	3302      	adds	r3, #2
10000d40:	637b      	str	r3, [r7, #52]	; 0x34
10000d42:	e78b      	b.n	10000c5c <cbprintf_package_convert+0x22c>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
10000d44:	693b      	ldr	r3, [r7, #16]
10000d46:	2b00      	cmp	r3, #0
10000d48:	d005      	beq.n	10000d56 <cbprintf_package_convert+0x326>
10000d4a:	6979      	ldr	r1, [r7, #20]
10000d4c:	69f8      	ldr	r0, [r7, #28]
10000d4e:	f003 fc0c 	bl	1000456a <is_ptr>
10000d52:	2800      	cmp	r0, #0
10000d54:	d1f2      	bne.n	10000d3c <cbprintf_package_convert+0x30c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
10000d56:	2201      	movs	r2, #1
10000d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000d5a:	4213      	tst	r3, r2
10000d5c:	d00a      	beq.n	10000d74 <cbprintf_package_convert+0x344>
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000d60:	189b      	adds	r3, r3, r2
10000d62:	3207      	adds	r2, #7
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000d64:	2138      	movs	r1, #56	; 0x38
10000d66:	1852      	adds	r2, r2, r1
10000d68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10000d6a:	19d2      	adds	r2, r2, r7
10000d6c:	b2db      	uxtb	r3, r3
10000d6e:	5455      	strb	r5, [r2, r1]
10000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
10000d72:	e7e3      	b.n	10000d3c <cbprintf_package_convert+0x30c>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
10000d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000d76:	075b      	lsls	r3, r3, #29
10000d78:	d5e0      	bpl.n	10000d3c <cbprintf_package_convert+0x30c>
				keep_str_pos[keep_cnt++] = arg_pos;
10000d7a:	2218      	movs	r2, #24
10000d7c:	2138      	movs	r1, #56	; 0x38
10000d7e:	1852      	adds	r2, r2, r1
10000d80:	1c63      	adds	r3, r4, #1
10000d82:	19d2      	adds	r2, r2, r7
10000d84:	5515      	strb	r5, [r2, r4]
10000d86:	b2dc      	uxtb	r4, r3
10000d88:	e7d8      	b.n	10000d3c <cbprintf_package_convert+0x30c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
10000d8a:	2202      	movs	r2, #2
10000d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10000d8e:	4213      	tst	r3, r2
10000d90:	d003      	beq.n	10000d9a <cbprintf_package_convert+0x36a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
10000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10000d94:	3206      	adds	r2, #6
10000d96:	3301      	adds	r3, #1
10000d98:	e7e4      	b.n	10000d64 <cbprintf_package_convert+0x334>
				keep_str_pos[keep_cnt++] = arg_idx;
10000d9a:	2138      	movs	r1, #56	; 0x38
10000d9c:	2218      	movs	r2, #24
10000d9e:	1852      	adds	r2, r2, r1
10000da0:	6979      	ldr	r1, [r7, #20]
10000da2:	1c63      	adds	r3, r4, #1
10000da4:	19d2      	adds	r2, r2, r7
10000da6:	5511      	strb	r1, [r2, r4]
10000da8:	b2db      	uxtb	r3, r3
				keep_str_pos[keep_cnt++] = arg_pos;
10000daa:	3402      	adds	r4, #2
10000dac:	b2e4      	uxtb	r4, r4
10000dae:	54d5      	strb	r5, [r2, r3]
10000db0:	e7c4      	b.n	10000d3c <cbprintf_package_convert+0x30c>
		uint8_t loc = cpy_str_pos[i];
10000db2:	2238      	movs	r2, #56	; 0x38
10000db4:	2308      	movs	r3, #8
10000db6:	189b      	adds	r3, r3, r2
10000db8:	19db      	adds	r3, r3, r7
10000dba:	5ceb      	ldrb	r3, [r5, r3]
10000dbc:	3207      	adds	r2, #7
10000dbe:	18ba      	adds	r2, r7, r2
10000dc0:	7013      	strb	r3, [r2, #0]
		const char *str = *(const char **)&buf32[loc];
10000dc2:	009b      	lsls	r3, r3, #2
10000dc4:	599b      	ldr	r3, [r3, r6]
		uint16_t str_len = strl ? strl[i] : 0;
10000dc6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
		const char *str = *(const char **)&buf32[loc];
10000dc8:	633b      	str	r3, [r7, #48]	; 0x30
		uint16_t str_len = strl ? strl[i] : 0;
10000dca:	2c00      	cmp	r4, #0
10000dcc:	d001      	beq.n	10000dd2 <cbprintf_package_convert+0x3a2>
10000dce:	006b      	lsls	r3, r5, #1
10000dd0:	5ae4      	ldrh	r4, [r4, r3]
		rv = cb(&loc, 1, ctx);
10000dd2:	233f      	movs	r3, #63	; 0x3f
10000dd4:	2101      	movs	r1, #1
10000dd6:	18f8      	adds	r0, r7, r3
10000dd8:	69ba      	ldr	r2, [r7, #24]
10000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000ddc:	4798      	blx	r3
		if (rv < 0) {
10000dde:	2800      	cmp	r0, #0
10000de0:	db17      	blt.n	10000e12 <cbprintf_package_convert+0x3e2>
		out_len += rv;
10000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10000de4:	181b      	adds	r3, r3, r0
10000de6:	637b      	str	r3, [r7, #52]	; 0x34
	strl = strl > 0 ? strl : strlen(str) + 1;
10000de8:	2c00      	cmp	r4, #0
10000dea:	d104      	bne.n	10000df6 <cbprintf_package_convert+0x3c6>
10000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
10000dee:	f004 f86b 	bl	10004ec8 <strlen>
10000df2:	3001      	adds	r0, #1
10000df4:	b284      	uxth	r4, r0
	return cb(str, strl, ctx);
10000df6:	0021      	movs	r1, r4
10000df8:	69ba      	ldr	r2, [r7, #24]
10000dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
10000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
10000dfe:	4798      	blx	r3
		if (rv < 0) {
10000e00:	2800      	cmp	r0, #0
10000e02:	db06      	blt.n	10000e12 <cbprintf_package_convert+0x3e2>
		out_len += rv;
10000e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000e06:	3501      	adds	r5, #1
		out_len += rv;
10000e08:	181b      	adds	r3, r3, r0
10000e0a:	637b      	str	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < scpy_cnt; i++) {
10000e0c:	e774      	b.n	10000cf8 <cbprintf_package_convert+0x2c8>
10000e0e:	6378      	str	r0, [r7, #52]	; 0x34
10000e10:	e63d      	b.n	10000a8e <cbprintf_package_convert+0x5e>
10000e12:	6378      	str	r0, [r7, #52]	; 0x34
10000e14:	e63b      	b.n	10000a8e <cbprintf_package_convert+0x5e>
10000e16:	46c0      	nop			; (mov r8, r8)
10000e18:	10005ac0 	.word	0x10005ac0
10000e1c:	10009adc 	.word	0x10009adc
10000e20:	10005fa5 	.word	0x10005fa5
10000e24:	01000004 	.word	0x01000004
10000e28:	10005c80 	.word	0x10005c80

10000e2c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
10000e2c:	4b01      	ldr	r3, [pc, #4]	; (10000e34 <__printk_hook_install+0x8>)
10000e2e:	6018      	str	r0, [r3, #0]
}
10000e30:	4770      	bx	lr
10000e32:	46c0      	nop			; (mov r8, r8)
10000e34:	20000000 	.word	0x20000000

10000e38 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
10000e38:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
10000e3a:	2500      	movs	r5, #0
{
10000e3c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
10000e3e:	9003      	str	r0, [sp, #12]
10000e40:	9104      	str	r1, [sp, #16]
{
10000e42:	0004      	movs	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10000e44:	9500      	str	r5, [sp, #0]
10000e46:	4806      	ldr	r0, [pc, #24]	; (10000e60 <vsnprintk+0x28>)
10000e48:	a903      	add	r1, sp, #12
	struct str_context ctx = { str, size, 0 };
10000e4a:	9505      	str	r5, [sp, #20]
10000e4c:	f000 f80a 	bl	10000e64 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
10000e50:	9805      	ldr	r0, [sp, #20]
10000e52:	9b04      	ldr	r3, [sp, #16]
10000e54:	4298      	cmp	r0, r3
10000e56:	da00      	bge.n	10000e5a <vsnprintk+0x22>
		str[ctx.count] = '\0';
10000e58:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
10000e5a:	b007      	add	sp, #28
10000e5c:	bd30      	pop	{r4, r5, pc}
10000e5e:	46c0      	nop			; (mov r8, r8)
10000e60:	100045b9 	.word	0x100045b9

10000e64 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e66:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000e68:	2700      	movs	r7, #0
{
10000e6a:	b099      	sub	sp, #100	; 0x64
10000e6c:	9004      	str	r0, [sp, #16]
10000e6e:	9105      	str	r1, [sp, #20]
10000e70:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10000e72:	9b08      	ldr	r3, [sp, #32]
10000e74:	7818      	ldrb	r0, [r3, #0]
10000e76:	2800      	cmp	r0, #0
10000e78:	d101      	bne.n	10000e7e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000e7a:	0038      	movs	r0, r7
10000e7c:	e327      	b.n	100014ce <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
10000e7e:	9b08      	ldr	r3, [sp, #32]
10000e80:	3301      	adds	r3, #1
10000e82:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000e84:	2825      	cmp	r0, #37	; 0x25
10000e86:	d007      	beq.n	10000e98 <z_cbvprintf_impl+0x34>
			OUTC('%');
10000e88:	9905      	ldr	r1, [sp, #20]
10000e8a:	9b04      	ldr	r3, [sp, #16]
10000e8c:	4798      	blx	r3
10000e8e:	2800      	cmp	r0, #0
10000e90:	da00      	bge.n	10000e94 <z_cbvprintf_impl+0x30>
10000e92:	e31c      	b.n	100014ce <z_cbvprintf_impl+0x66a>
10000e94:	3701      	adds	r7, #1
		if (bps == NULL) {
10000e96:	e1e3      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		} state = {
10000e98:	ad12      	add	r5, sp, #72	; 0x48
10000e9a:	2218      	movs	r2, #24
10000e9c:	2100      	movs	r1, #0
10000e9e:	0028      	movs	r0, r5
10000ea0:	f004 f82d 	bl	10004efe <memset>
	if (*sp == '%') {
10000ea4:	9b08      	ldr	r3, [sp, #32]
10000ea6:	785b      	ldrb	r3, [r3, #1]
10000ea8:	2b25      	cmp	r3, #37	; 0x25
10000eaa:	d114      	bne.n	10000ed6 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000eac:	9a08      	ldr	r2, [sp, #32]
10000eae:	72eb      	strb	r3, [r5, #11]
10000eb0:	3202      	adds	r2, #2
10000eb2:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000eb4:	ab12      	add	r3, sp, #72	; 0x48
10000eb6:	7a5a      	ldrb	r2, [r3, #9]
10000eb8:	07d1      	lsls	r1, r2, #31
10000eba:	d400      	bmi.n	10000ebe <z_cbvprintf_impl+0x5a>
10000ebc:	e17f      	b.n	100011be <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10000ebe:	cc02      	ldmia	r4!, {r1}
10000ec0:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10000ec2:	2900      	cmp	r1, #0
10000ec4:	db00      	blt.n	10000ec8 <z_cbvprintf_impl+0x64>
10000ec6:	e17f      	b.n	100011c8 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000ec8:	2104      	movs	r1, #4
10000eca:	7a18      	ldrb	r0, [r3, #8]
10000ecc:	4301      	orrs	r1, r0
10000ece:	7219      	strb	r1, [r3, #8]
				width = -width;
10000ed0:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10000ed2:	425b      	negs	r3, r3
10000ed4:	e177      	b.n	100011c6 <z_cbvprintf_impl+0x362>
10000ed6:	2200      	movs	r2, #0
		switch (*sp) {
10000ed8:	2601      	movs	r6, #1
10000eda:	0015      	movs	r5, r2
10000edc:	0010      	movs	r0, r2
10000ede:	4694      	mov	ip, r2
10000ee0:	9203      	str	r2, [sp, #12]
10000ee2:	9b07      	ldr	r3, [sp, #28]
10000ee4:	781b      	ldrb	r3, [r3, #0]
10000ee6:	2b2b      	cmp	r3, #43	; 0x2b
10000ee8:	d06f      	beq.n	10000fca <z_cbvprintf_impl+0x166>
10000eea:	d868      	bhi.n	10000fbe <z_cbvprintf_impl+0x15a>
10000eec:	2b20      	cmp	r3, #32
10000eee:	d071      	beq.n	10000fd4 <z_cbvprintf_impl+0x170>
10000ef0:	2b23      	cmp	r3, #35	; 0x23
10000ef2:	d071      	beq.n	10000fd8 <z_cbvprintf_impl+0x174>
10000ef4:	2a00      	cmp	r2, #0
10000ef6:	d005      	beq.n	10000f04 <z_cbvprintf_impl+0xa0>
10000ef8:	ae12      	add	r6, sp, #72	; 0x48
10000efa:	7a32      	ldrb	r2, [r6, #8]
10000efc:	0011      	movs	r1, r2
10000efe:	2240      	movs	r2, #64	; 0x40
10000f00:	430a      	orrs	r2, r1
10000f02:	7232      	strb	r2, [r6, #8]
10000f04:	2d00      	cmp	r5, #0
10000f06:	d004      	beq.n	10000f12 <z_cbvprintf_impl+0xae>
10000f08:	2220      	movs	r2, #32
10000f0a:	ad12      	add	r5, sp, #72	; 0x48
10000f0c:	7a2e      	ldrb	r6, [r5, #8]
10000f0e:	4332      	orrs	r2, r6
10000f10:	722a      	strb	r2, [r5, #8]
10000f12:	2800      	cmp	r0, #0
10000f14:	d004      	beq.n	10000f20 <z_cbvprintf_impl+0xbc>
10000f16:	2210      	movs	r2, #16
10000f18:	a812      	add	r0, sp, #72	; 0x48
10000f1a:	7a05      	ldrb	r5, [r0, #8]
10000f1c:	432a      	orrs	r2, r5
10000f1e:	7202      	strb	r2, [r0, #8]
10000f20:	9a03      	ldr	r2, [sp, #12]
10000f22:	2a00      	cmp	r2, #0
10000f24:	d004      	beq.n	10000f30 <z_cbvprintf_impl+0xcc>
10000f26:	2208      	movs	r2, #8
10000f28:	a912      	add	r1, sp, #72	; 0x48
10000f2a:	7a08      	ldrb	r0, [r1, #8]
10000f2c:	4302      	orrs	r2, r0
10000f2e:	720a      	strb	r2, [r1, #8]
10000f30:	4662      	mov	r2, ip
10000f32:	2a00      	cmp	r2, #0
10000f34:	d004      	beq.n	10000f40 <z_cbvprintf_impl+0xdc>
10000f36:	2204      	movs	r2, #4
10000f38:	a912      	add	r1, sp, #72	; 0x48
10000f3a:	7a08      	ldrb	r0, [r1, #8]
10000f3c:	4302      	orrs	r2, r0
10000f3e:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000f40:	2144      	movs	r1, #68	; 0x44
10000f42:	a812      	add	r0, sp, #72	; 0x48
10000f44:	7a02      	ldrb	r2, [r0, #8]
10000f46:	4011      	ands	r1, r2
10000f48:	2944      	cmp	r1, #68	; 0x44
10000f4a:	d102      	bne.n	10000f52 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
10000f4c:	2140      	movs	r1, #64	; 0x40
10000f4e:	438a      	bics	r2, r1
10000f50:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10000f52:	2280      	movs	r2, #128	; 0x80
10000f54:	7a01      	ldrb	r1, [r0, #8]
10000f56:	4252      	negs	r2, r2
10000f58:	430a      	orrs	r2, r1
10000f5a:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000f5c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000f5e:	250a      	movs	r5, #10
10000f60:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10000f62:	2b2a      	cmp	r3, #42	; 0x2a
10000f64:	d140      	bne.n	10000fe8 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10000f66:	7a41      	ldrb	r1, [r0, #9]
10000f68:	3b29      	subs	r3, #41	; 0x29
10000f6a:	430b      	orrs	r3, r1
		return ++sp;
10000f6c:	3201      	adds	r2, #1
		conv->width_star = true;
10000f6e:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000f70:	7815      	ldrb	r5, [r2, #0]
10000f72:	2602      	movs	r6, #2
10000f74:	0029      	movs	r1, r5
10000f76:	392e      	subs	r1, #46	; 0x2e
10000f78:	424b      	negs	r3, r1
10000f7a:	4159      	adcs	r1, r3
10000f7c:	a812      	add	r0, sp, #72	; 0x48
10000f7e:	7a43      	ldrb	r3, [r0, #9]
10000f80:	0049      	lsls	r1, r1, #1
10000f82:	43b3      	bics	r3, r6
10000f84:	430b      	orrs	r3, r1
10000f86:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10000f88:	2d2e      	cmp	r5, #46	; 0x2e
10000f8a:	d145      	bne.n	10001018 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10000f8c:	7853      	ldrb	r3, [r2, #1]
10000f8e:	2b2a      	cmp	r3, #42	; 0x2a
10000f90:	d03d      	beq.n	1000100e <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
10000f92:	2300      	movs	r3, #0
	++sp;
10000f94:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000f96:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000f98:	7811      	ldrb	r1, [r2, #0]
10000f9a:	1c55      	adds	r5, r2, #1
10000f9c:	0008      	movs	r0, r1
10000f9e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
10000fa0:	2809      	cmp	r0, #9
10000fa2:	d963      	bls.n	1000106c <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10000fa4:	a912      	add	r1, sp, #72	; 0x48
10000fa6:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000fa8:	7a0d      	ldrb	r5, [r1, #8]
10000faa:	07a8      	lsls	r0, r5, #30
10000fac:	4318      	orrs	r0, r3
10000fae:	2302      	movs	r3, #2
10000fb0:	439d      	bics	r5, r3
10000fb2:	002b      	movs	r3, r5
10000fb4:	0fc0      	lsrs	r0, r0, #31
10000fb6:	0040      	lsls	r0, r0, #1
10000fb8:	4303      	orrs	r3, r0
10000fba:	720b      	strb	r3, [r1, #8]
	return sp;
10000fbc:	e02c      	b.n	10001018 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10000fbe:	2b2d      	cmp	r3, #45	; 0x2d
10000fc0:	d00c      	beq.n	10000fdc <z_cbvprintf_impl+0x178>
10000fc2:	2b30      	cmp	r3, #48	; 0x30
10000fc4:	d196      	bne.n	10000ef4 <z_cbvprintf_impl+0x90>
10000fc6:	0032      	movs	r2, r6
10000fc8:	e000      	b.n	10000fcc <z_cbvprintf_impl+0x168>
10000fca:	9603      	str	r6, [sp, #12]
			++sp;
10000fcc:	9b07      	ldr	r3, [sp, #28]
10000fce:	3301      	adds	r3, #1
10000fd0:	9307      	str	r3, [sp, #28]
	} while (loop);
10000fd2:	e786      	b.n	10000ee2 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10000fd4:	0030      	movs	r0, r6
10000fd6:	e7f9      	b.n	10000fcc <z_cbvprintf_impl+0x168>
10000fd8:	0035      	movs	r5, r6
10000fda:	e7f7      	b.n	10000fcc <z_cbvprintf_impl+0x168>
10000fdc:	46b4      	mov	ip, r6
10000fde:	e7f5      	b.n	10000fcc <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10000fe0:	0032      	movs	r2, r6
10000fe2:	4369      	muls	r1, r5
10000fe4:	3930      	subs	r1, #48	; 0x30
10000fe6:	1859      	adds	r1, r3, r1
10000fe8:	7813      	ldrb	r3, [r2, #0]
10000fea:	1c56      	adds	r6, r2, #1
10000fec:	0018      	movs	r0, r3
10000fee:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
10000ff0:	2809      	cmp	r0, #9
10000ff2:	d9f5      	bls.n	10000fe0 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10000ff4:	9b07      	ldr	r3, [sp, #28]
10000ff6:	4293      	cmp	r3, r2
10000ff8:	d0ba      	beq.n	10000f70 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10000ffa:	2502      	movs	r5, #2
		conv->width_value = width;
10000ffc:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10000ffe:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10001000:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10001002:	0fc9      	lsrs	r1, r1, #31
10001004:	0049      	lsls	r1, r1, #1
10001006:	43a8      	bics	r0, r5
10001008:	4301      	orrs	r1, r0
1000100a:	7219      	strb	r1, [r3, #8]
1000100c:	e7b0      	b.n	10000f70 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
1000100e:	2304      	movs	r3, #4
10001010:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10001012:	3202      	adds	r2, #2
		conv->prec_star = true;
10001014:	430b      	orrs	r3, r1
10001016:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10001018:	7811      	ldrb	r1, [r2, #0]
1000101a:	ab12      	add	r3, sp, #72	; 0x48
1000101c:	296c      	cmp	r1, #108	; 0x6c
1000101e:	d045      	beq.n	100010ac <z_cbvprintf_impl+0x248>
10001020:	d829      	bhi.n	10001076 <z_cbvprintf_impl+0x212>
10001022:	2968      	cmp	r1, #104	; 0x68
10001024:	d030      	beq.n	10001088 <z_cbvprintf_impl+0x224>
10001026:	296a      	cmp	r1, #106	; 0x6a
10001028:	d04c      	beq.n	100010c4 <z_cbvprintf_impl+0x260>
1000102a:	294c      	cmp	r1, #76	; 0x4c
1000102c:	d054      	beq.n	100010d8 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
1000102e:	7811      	ldrb	r1, [r2, #0]
10001030:	1c53      	adds	r3, r2, #1
10001032:	aa12      	add	r2, sp, #72	; 0x48
10001034:	9307      	str	r3, [sp, #28]
10001036:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10001038:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
1000103a:	2978      	cmp	r1, #120	; 0x78
1000103c:	d900      	bls.n	10001040 <z_cbvprintf_impl+0x1dc>
1000103e:	e0b9      	b.n	100011b4 <z_cbvprintf_impl+0x350>
10001040:	296d      	cmp	r1, #109	; 0x6d
10001042:	d850      	bhi.n	100010e6 <z_cbvprintf_impl+0x282>
10001044:	2969      	cmp	r1, #105	; 0x69
10001046:	d900      	bls.n	1000104a <z_cbvprintf_impl+0x1e6>
10001048:	e0b4      	b.n	100011b4 <z_cbvprintf_impl+0x350>
1000104a:	2957      	cmp	r1, #87	; 0x57
1000104c:	d866      	bhi.n	1000111c <z_cbvprintf_impl+0x2b8>
1000104e:	2941      	cmp	r1, #65	; 0x41
10001050:	d003      	beq.n	1000105a <z_cbvprintf_impl+0x1f6>
10001052:	3945      	subs	r1, #69	; 0x45
10001054:	2902      	cmp	r1, #2
10001056:	d900      	bls.n	1000105a <z_cbvprintf_impl+0x1f6>
10001058:	e0ac      	b.n	100011b4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
1000105a:	2307      	movs	r3, #7
1000105c:	a912      	add	r1, sp, #72	; 0x48
1000105e:	7a8a      	ldrb	r2, [r1, #10]
10001060:	439a      	bics	r2, r3
10001062:	3b03      	subs	r3, #3
10001064:	4313      	orrs	r3, r2
10001066:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10001068:	2301      	movs	r3, #1
			break;
1000106a:	e073      	b.n	10001154 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
1000106c:	4373      	muls	r3, r6
1000106e:	3b30      	subs	r3, #48	; 0x30
10001070:	002a      	movs	r2, r5
10001072:	185b      	adds	r3, r3, r1
10001074:	e790      	b.n	10000f98 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10001076:	2974      	cmp	r1, #116	; 0x74
10001078:	d029      	beq.n	100010ce <z_cbvprintf_impl+0x26a>
1000107a:	297a      	cmp	r1, #122	; 0x7a
1000107c:	d1d7      	bne.n	1000102e <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
1000107e:	2178      	movs	r1, #120	; 0x78
10001080:	7a58      	ldrb	r0, [r3, #9]
10001082:	4388      	bics	r0, r1
10001084:	3948      	subs	r1, #72	; 0x48
10001086:	e00d      	b.n	100010a4 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10001088:	7850      	ldrb	r0, [r2, #1]
1000108a:	2178      	movs	r1, #120	; 0x78
1000108c:	2868      	cmp	r0, #104	; 0x68
1000108e:	d106      	bne.n	1000109e <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10001090:	7a58      	ldrb	r0, [r3, #9]
10001092:	4388      	bics	r0, r1
10001094:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10001096:	4301      	orrs	r1, r0
10001098:	7259      	strb	r1, [r3, #9]
			++sp;
1000109a:	3202      	adds	r2, #2
1000109c:	e7c7      	b.n	1000102e <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
1000109e:	7a58      	ldrb	r0, [r3, #9]
100010a0:	4388      	bics	r0, r1
100010a2:	2110      	movs	r1, #16
100010a4:	4301      	orrs	r1, r0
100010a6:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
100010a8:	3201      	adds	r2, #1
100010aa:	e7c0      	b.n	1000102e <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
100010ac:	7850      	ldrb	r0, [r2, #1]
100010ae:	2178      	movs	r1, #120	; 0x78
100010b0:	286c      	cmp	r0, #108	; 0x6c
100010b2:	d103      	bne.n	100010bc <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
100010b4:	7a58      	ldrb	r0, [r3, #9]
100010b6:	4388      	bics	r0, r1
100010b8:	3958      	subs	r1, #88	; 0x58
100010ba:	e7ec      	b.n	10001096 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
100010bc:	7a58      	ldrb	r0, [r3, #9]
100010be:	4388      	bics	r0, r1
100010c0:	2118      	movs	r1, #24
100010c2:	e7ef      	b.n	100010a4 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
100010c4:	2178      	movs	r1, #120	; 0x78
100010c6:	7a58      	ldrb	r0, [r3, #9]
100010c8:	4388      	bics	r0, r1
100010ca:	3950      	subs	r1, #80	; 0x50
100010cc:	e7ea      	b.n	100010a4 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
100010ce:	2178      	movs	r1, #120	; 0x78
100010d0:	7a58      	ldrb	r0, [r3, #9]
100010d2:	4388      	bics	r0, r1
100010d4:	3940      	subs	r1, #64	; 0x40
100010d6:	e7e5      	b.n	100010a4 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
100010d8:	8918      	ldrh	r0, [r3, #8]
100010da:	49a5      	ldr	r1, [pc, #660]	; (10001370 <z_cbvprintf_impl+0x50c>)
100010dc:	4008      	ands	r0, r1
100010de:	49a5      	ldr	r1, [pc, #660]	; (10001374 <z_cbvprintf_impl+0x510>)
100010e0:	4301      	orrs	r1, r0
100010e2:	8119      	strh	r1, [r3, #8]
		break;
100010e4:	e7e0      	b.n	100010a8 <z_cbvprintf_impl+0x244>
100010e6:	2001      	movs	r0, #1
100010e8:	0005      	movs	r5, r0
	switch (conv->specifier) {
100010ea:	396e      	subs	r1, #110	; 0x6e
100010ec:	b2c9      	uxtb	r1, r1
100010ee:	408d      	lsls	r5, r1
100010f0:	0029      	movs	r1, r5
100010f2:	4da1      	ldr	r5, [pc, #644]	; (10001378 <z_cbvprintf_impl+0x514>)
100010f4:	4229      	tst	r1, r5
100010f6:	d138      	bne.n	1000116a <z_cbvprintf_impl+0x306>
100010f8:	2524      	movs	r5, #36	; 0x24
100010fa:	4229      	tst	r1, r5
100010fc:	d151      	bne.n	100011a2 <z_cbvprintf_impl+0x33e>
100010fe:	4201      	tst	r1, r0
10001100:	d058      	beq.n	100011b4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10001102:	2107      	movs	r1, #7
10001104:	7a90      	ldrb	r0, [r2, #10]
10001106:	4388      	bics	r0, r1
10001108:	3904      	subs	r1, #4
1000110a:	4301      	orrs	r1, r0
1000110c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000110e:	2278      	movs	r2, #120	; 0x78
10001110:	4013      	ands	r3, r2
10001112:	3b40      	subs	r3, #64	; 0x40
10001114:	425a      	negs	r2, r3
10001116:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10001118:	b2db      	uxtb	r3, r3
1000111a:	e01b      	b.n	10001154 <z_cbvprintf_impl+0x2f0>
1000111c:	2001      	movs	r0, #1
	switch (conv->specifier) {
1000111e:	000d      	movs	r5, r1
10001120:	0006      	movs	r6, r0
10001122:	3d58      	subs	r5, #88	; 0x58
10001124:	b2ed      	uxtb	r5, r5
10001126:	40ae      	lsls	r6, r5
10001128:	0035      	movs	r5, r6
1000112a:	26e2      	movs	r6, #226	; 0xe2
1000112c:	0236      	lsls	r6, r6, #8
1000112e:	4235      	tst	r5, r6
10001130:	d193      	bne.n	1000105a <z_cbvprintf_impl+0x1f6>
10001132:	4e92      	ldr	r6, [pc, #584]	; (1000137c <z_cbvprintf_impl+0x518>)
10001134:	4235      	tst	r5, r6
10001136:	d122      	bne.n	1000117e <z_cbvprintf_impl+0x31a>
10001138:	2184      	movs	r1, #132	; 0x84
1000113a:	0289      	lsls	r1, r1, #10
1000113c:	420d      	tst	r5, r1
1000113e:	d039      	beq.n	100011b4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10001140:	2507      	movs	r5, #7
10001142:	7a91      	ldrb	r1, [r2, #10]
10001144:	43a9      	bics	r1, r5
10001146:	4301      	orrs	r1, r0
10001148:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000114a:	2178      	movs	r1, #120	; 0x78
1000114c:	400b      	ands	r3, r1
1000114e:	2b40      	cmp	r3, #64	; 0x40
10001150:	d011      	beq.n	10001176 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10001152:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10001154:	aa12      	add	r2, sp, #72	; 0x48
10001156:	7a11      	ldrb	r1, [r2, #8]
10001158:	0788      	lsls	r0, r1, #30
1000115a:	0fc0      	lsrs	r0, r0, #31
1000115c:	4303      	orrs	r3, r0
1000115e:	2002      	movs	r0, #2
10001160:	005b      	lsls	r3, r3, #1
10001162:	4381      	bics	r1, r0
10001164:	4319      	orrs	r1, r3
10001166:	7211      	strb	r1, [r2, #8]
	return sp;
10001168:	e6a4      	b.n	10000eb4 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
1000116a:	2107      	movs	r1, #7
1000116c:	7a95      	ldrb	r5, [r2, #10]
1000116e:	438d      	bics	r5, r1
10001170:	3905      	subs	r1, #5
10001172:	4329      	orrs	r1, r5
10001174:	e7e8      	b.n	10001148 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10001176:	7a13      	ldrb	r3, [r2, #8]
10001178:	4303      	orrs	r3, r0
		conv->invalid = true;
1000117a:	7213      	strb	r3, [r2, #8]
		break;
1000117c:	e7e9      	b.n	10001152 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
1000117e:	2507      	movs	r5, #7
10001180:	7a96      	ldrb	r6, [r2, #10]
10001182:	43ae      	bics	r6, r5
10001184:	3d05      	subs	r5, #5
10001186:	4335      	orrs	r5, r6
10001188:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000118a:	2578      	movs	r5, #120	; 0x78
1000118c:	402b      	ands	r3, r5
1000118e:	2b40      	cmp	r3, #64	; 0x40
10001190:	d102      	bne.n	10001198 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10001192:	7a15      	ldrb	r5, [r2, #8]
10001194:	4328      	orrs	r0, r5
10001196:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10001198:	2963      	cmp	r1, #99	; 0x63
1000119a:	d1da      	bne.n	10001152 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
1000119c:	1e5a      	subs	r2, r3, #1
1000119e:	4193      	sbcs	r3, r2
100011a0:	e7ba      	b.n	10001118 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
100011a2:	2107      	movs	r1, #7
100011a4:	7a90      	ldrb	r0, [r2, #10]
100011a6:	4388      	bics	r0, r1
100011a8:	3904      	subs	r1, #4
100011aa:	4301      	orrs	r1, r0
100011ac:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
100011ae:	2278      	movs	r2, #120	; 0x78
100011b0:	4013      	ands	r3, r2
100011b2:	e7f3      	b.n	1000119c <z_cbvprintf_impl+0x338>
		conv->invalid = true;
100011b4:	2301      	movs	r3, #1
100011b6:	aa12      	add	r2, sp, #72	; 0x48
100011b8:	7a11      	ldrb	r1, [r2, #8]
100011ba:	430b      	orrs	r3, r1
100011bc:	e7dd      	b.n	1000117a <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
100011be:	7a19      	ldrb	r1, [r3, #8]
100011c0:	297f      	cmp	r1, #127	; 0x7f
100011c2:	d90f      	bls.n	100011e4 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
100011c4:	68db      	ldr	r3, [r3, #12]
		int width = -1;
100011c6:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
100011c8:	ab12      	add	r3, sp, #72	; 0x48
100011ca:	0751      	lsls	r1, r2, #29
100011cc:	d50c      	bpl.n	100011e8 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
100011ce:	cc04      	ldmia	r4!, {r2}
100011d0:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
100011d2:	2a00      	cmp	r2, #0
100011d4:	da0c      	bge.n	100011f0 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
100011d6:	2102      	movs	r1, #2
100011d8:	7a5a      	ldrb	r2, [r3, #9]
100011da:	438a      	bics	r2, r1
100011dc:	725a      	strb	r2, [r3, #9]
		int precision = -1;
100011de:	2301      	movs	r3, #1
100011e0:	425b      	negs	r3, r3
100011e2:	e004      	b.n	100011ee <z_cbvprintf_impl+0x38a>
		int width = -1;
100011e4:	2301      	movs	r3, #1
100011e6:	e674      	b.n	10000ed2 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
100011e8:	0792      	lsls	r2, r2, #30
100011ea:	d5f8      	bpl.n	100011de <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
100011ec:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
100011ee:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
100011f0:	2500      	movs	r5, #0
100011f2:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
100011f4:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
100011f6:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100011f8:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100011fa:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
100011fc:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100011fe:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10001200:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10001202:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10001204:	2b01      	cmp	r3, #1
10001206:	d130      	bne.n	1000126a <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10001208:	1ed0      	subs	r0, r2, #3
1000120a:	2804      	cmp	r0, #4
1000120c:	d804      	bhi.n	10001218 <z_cbvprintf_impl+0x3b4>
1000120e:	f7fe ffcb 	bl	100001a8 <__gnu_thumb1_case_uqi>
10001212:	450e      	.short	0x450e
10001214:	0e45      	.short	0x0e45
10001216:	0e          	.byte	0x0e
10001217:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10001218:	6823      	ldr	r3, [r4, #0]
1000121a:	17d8      	asrs	r0, r3, #31
1000121c:	9312      	str	r3, [sp, #72]	; 0x48
1000121e:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10001220:	2a01      	cmp	r2, #1
10001222:	d109      	bne.n	10001238 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10001224:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
10001226:	9312      	str	r3, [sp, #72]	; 0x48
10001228:	17db      	asrs	r3, r3, #31
1000122a:	604b      	str	r3, [r1, #4]
1000122c:	e006      	b.n	1000123c <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
1000122e:	cc08      	ldmia	r4!, {r3}
10001230:	9312      	str	r3, [sp, #72]	; 0x48
10001232:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
10001234:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
10001236:	e002      	b.n	1000123e <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
10001238:	2a02      	cmp	r2, #2
1000123a:	d014      	beq.n	10001266 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
1000123c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
1000123e:	a912      	add	r1, sp, #72	; 0x48
10001240:	7a0b      	ldrb	r3, [r1, #8]
10001242:	2003      	movs	r0, #3
10001244:	001d      	movs	r5, r3
10001246:	4005      	ands	r5, r0
10001248:	4203      	tst	r3, r0
1000124a:	d045      	beq.n	100012d8 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
1000124c:	9b07      	ldr	r3, [sp, #28]
1000124e:	9a08      	ldr	r2, [sp, #32]
10001250:	9905      	ldr	r1, [sp, #20]
10001252:	9804      	ldr	r0, [sp, #16]
10001254:	f003 fb1d 	bl	10004892 <outs>
10001258:	2800      	cmp	r0, #0
1000125a:	da00      	bge.n	1000125e <z_cbvprintf_impl+0x3fa>
1000125c:	e137      	b.n	100014ce <z_cbvprintf_impl+0x66a>
1000125e:	183f      	adds	r7, r7, r0
			continue;
10001260:	9b07      	ldr	r3, [sp, #28]
10001262:	9308      	str	r3, [sp, #32]
10001264:	e605      	b.n	10000e72 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10001266:	b21b      	sxth	r3, r3
10001268:	e7dd      	b.n	10001226 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
1000126a:	2b02      	cmp	r3, #2
1000126c:	d125      	bne.n	100012ba <z_cbvprintf_impl+0x456>
			switch (length_mod) {
1000126e:	1ed0      	subs	r0, r2, #3
10001270:	2804      	cmp	r0, #4
10001272:	d804      	bhi.n	1000127e <z_cbvprintf_impl+0x41a>
10001274:	f7fe ff98 	bl	100001a8 <__gnu_thumb1_case_uqi>
10001278:	1912120d 	.word	0x1912120d
1000127c:	19          	.byte	0x19
1000127d:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000127e:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10001280:	2a01      	cmp	r2, #1
10001282:	d016      	beq.n	100012b2 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10001284:	9312      	str	r3, [sp, #72]	; 0x48
10001286:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10001288:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
1000128a:	2a02      	cmp	r2, #2
1000128c:	d1d7      	bne.n	1000123e <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000128e:	9312      	str	r3, [sp, #72]	; 0x48
10001290:	e7d5      	b.n	1000123e <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10001292:	cc08      	ldmia	r4!, {r3}
10001294:	9312      	str	r3, [sp, #72]	; 0x48
10001296:	2300      	movs	r3, #0
10001298:	9313      	str	r3, [sp, #76]	; 0x4c
1000129a:	e7d0      	b.n	1000123e <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
1000129c:	2307      	movs	r3, #7
1000129e:	3407      	adds	r4, #7
100012a0:	439c      	bics	r4, r3
				value->uint =
100012a2:	cc03      	ldmia	r4!, {r0, r1}
100012a4:	9012      	str	r0, [sp, #72]	; 0x48
100012a6:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
100012a8:	e7c9      	b.n	1000123e <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
100012aa:	cc08      	ldmia	r4!, {r3}
100012ac:	9312      	str	r3, [sp, #72]	; 0x48
100012ae:	2300      	movs	r3, #0
100012b0:	e7c0      	b.n	10001234 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
100012b2:	b2db      	uxtb	r3, r3
100012b4:	9312      	str	r3, [sp, #72]	; 0x48
100012b6:	604d      	str	r5, [r1, #4]
100012b8:	e7c1      	b.n	1000123e <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
100012ba:	2b04      	cmp	r3, #4
100012bc:	d108      	bne.n	100012d0 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
100012be:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
100012c0:	3303      	adds	r3, #3
100012c2:	439c      	bics	r4, r3
100012c4:	6820      	ldr	r0, [r4, #0]
100012c6:	6861      	ldr	r1, [r4, #4]
100012c8:	3408      	adds	r4, #8
100012ca:	9012      	str	r0, [sp, #72]	; 0x48
100012cc:	9113      	str	r1, [sp, #76]	; 0x4c
100012ce:	e7b6      	b.n	1000123e <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
100012d0:	2b03      	cmp	r3, #3
100012d2:	d1b4      	bne.n	1000123e <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100012d4:	cc08      	ldmia	r4!, {r3}
100012d6:	e7da      	b.n	1000128e <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
100012d8:	7ac8      	ldrb	r0, [r1, #11]
100012da:	2878      	cmp	r0, #120	; 0x78
100012dc:	d8c0      	bhi.n	10001260 <z_cbvprintf_impl+0x3fc>
100012de:	2862      	cmp	r0, #98	; 0x62
100012e0:	d82b      	bhi.n	1000133a <z_cbvprintf_impl+0x4d6>
100012e2:	2825      	cmp	r0, #37	; 0x25
100012e4:	d100      	bne.n	100012e8 <z_cbvprintf_impl+0x484>
100012e6:	e5cf      	b.n	10000e88 <z_cbvprintf_impl+0x24>
100012e8:	2858      	cmp	r0, #88	; 0x58
100012ea:	d1b9      	bne.n	10001260 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
100012ec:	9812      	ldr	r0, [sp, #72]	; 0x48
100012ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
100012f0:	231e      	movs	r3, #30
100012f2:	aa0a      	add	r2, sp, #40	; 0x28
100012f4:	189b      	adds	r3, r3, r2
100012f6:	9300      	str	r3, [sp, #0]
100012f8:	aa14      	add	r2, sp, #80	; 0x50
100012fa:	ab0c      	add	r3, sp, #48	; 0x30
100012fc:	f003 fa7c 	bl	100047f8 <encode_uint>
			if (precision >= 0) {
10001300:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10001302:	0006      	movs	r6, r0
			if (precision >= 0) {
10001304:	2b00      	cmp	r3, #0
10001306:	db0d      	blt.n	10001324 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10001308:	231e      	movs	r3, #30
				conv->flag_zero = false;
1000130a:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
1000130c:	aa0a      	add	r2, sp, #40	; 0x28
1000130e:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10001310:	aa12      	add	r2, sp, #72	; 0x48
10001312:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10001314:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10001316:	4381      	bics	r1, r0
10001318:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000131a:	9906      	ldr	r1, [sp, #24]
1000131c:	4299      	cmp	r1, r3
1000131e:	d901      	bls.n	10001324 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10001320:	1acb      	subs	r3, r1, r3
10001322:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10001324:	2e00      	cmp	r6, #0
10001326:	d09b      	beq.n	10001260 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10001328:	231e      	movs	r3, #30
1000132a:	aa0a      	add	r2, sp, #40	; 0x28
1000132c:	189b      	adds	r3, r3, r2
1000132e:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10001330:	9306      	str	r3, [sp, #24]
10001332:	2d00      	cmp	r5, #0
10001334:	d032      	beq.n	1000139c <z_cbvprintf_impl+0x538>
			nj_len += 1U;
10001336:	3001      	adds	r0, #1
10001338:	e030      	b.n	1000139c <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
1000133a:	3863      	subs	r0, #99	; 0x63
1000133c:	2815      	cmp	r0, #21
1000133e:	d88f      	bhi.n	10001260 <z_cbvprintf_impl+0x3fc>
10001340:	f7fe ff3c 	bl	100001bc <__gnu_thumb1_case_shi>
10001344:	0068005e 	.word	0x0068005e
10001348:	ff8eff8e 	.word	0xff8eff8e
1000134c:	ff8eff8e 	.word	0xff8eff8e
10001350:	ff8e0068 	.word	0xff8e0068
10001354:	ff8eff8e 	.word	0xff8eff8e
10001358:	00a0ff8e 	.word	0x00a0ff8e
1000135c:	007c007a 	.word	0x007c007a
10001360:	ff8eff8e 	.word	0xff8eff8e
10001364:	ff8e001e 	.word	0xff8e001e
10001368:	ff8e007a 	.word	0xff8e007a
1000136c:	007aff8e 	.word	0x007aff8e
10001370:	ffff87fd 	.word	0xffff87fd
10001374:	00004002 	.word	0x00004002
10001378:	00000482 	.word	0x00000482
1000137c:	00000801 	.word	0x00000801
			if (precision >= 0) {
10001380:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10001382:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10001384:	2b00      	cmp	r3, #0
10001386:	db37      	blt.n	100013f8 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10001388:	0019      	movs	r1, r3
1000138a:	0030      	movs	r0, r6
1000138c:	f003 fda4 	bl	10004ed8 <strnlen>
			bpe = bps + len;
10001390:	1833      	adds	r3, r6, r0
		char sign = 0;
10001392:	2500      	movs	r5, #0
			bpe = bps + len;
10001394:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10001396:	2e00      	cmp	r6, #0
10001398:	d100      	bne.n	1000139c <z_cbvprintf_impl+0x538>
1000139a:	e761      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
1000139c:	ab12      	add	r3, sp, #72	; 0x48
1000139e:	7a9b      	ldrb	r3, [r3, #10]
100013a0:	2210      	movs	r2, #16
100013a2:	0019      	movs	r1, r3
100013a4:	4011      	ands	r1, r2
100013a6:	910b      	str	r1, [sp, #44]	; 0x2c
100013a8:	4213      	tst	r3, r2
100013aa:	d100      	bne.n	100013ae <z_cbvprintf_impl+0x54a>
100013ac:	e085      	b.n	100014ba <z_cbvprintf_impl+0x656>
			nj_len += 2U;
100013ae:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
100013b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
100013b2:	920a      	str	r2, [sp, #40]	; 0x28
100013b4:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
100013b6:	065b      	lsls	r3, r3, #25
100013b8:	d501      	bpl.n	100013be <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
100013ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
100013bc:	18c0      	adds	r0, r0, r3
		if (width > 0) {
100013be:	9b03      	ldr	r3, [sp, #12]
100013c0:	2b00      	cmp	r3, #0
100013c2:	dc00      	bgt.n	100013c6 <z_cbvprintf_impl+0x562>
100013c4:	e094      	b.n	100014f0 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
100013c6:	1a1b      	subs	r3, r3, r0
100013c8:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
100013ca:	ab12      	add	r3, sp, #72	; 0x48
100013cc:	7a1b      	ldrb	r3, [r3, #8]
100013ce:	075a      	lsls	r2, r3, #29
100013d0:	0fd1      	lsrs	r1, r2, #31
100013d2:	9108      	str	r1, [sp, #32]
100013d4:	2a00      	cmp	r2, #0
100013d6:	da00      	bge.n	100013da <z_cbvprintf_impl+0x576>
100013d8:	e08a      	b.n	100014f0 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
100013da:	065b      	lsls	r3, r3, #25
100013dc:	d400      	bmi.n	100013e0 <z_cbvprintf_impl+0x57c>
100013de:	e078      	b.n	100014d2 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
100013e0:	2d00      	cmp	r5, #0
100013e2:	d007      	beq.n	100013f4 <z_cbvprintf_impl+0x590>
						OUTC(sign);
100013e4:	0028      	movs	r0, r5
100013e6:	9905      	ldr	r1, [sp, #20]
100013e8:	9b04      	ldr	r3, [sp, #16]
100013ea:	4798      	blx	r3
100013ec:	2800      	cmp	r0, #0
100013ee:	db6e      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
100013f0:	9d08      	ldr	r5, [sp, #32]
100013f2:	3701      	adds	r7, #1
					pad = '0';
100013f4:	2330      	movs	r3, #48	; 0x30
100013f6:	e06d      	b.n	100014d4 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
100013f8:	0030      	movs	r0, r6
100013fa:	f003 fd65 	bl	10004ec8 <strlen>
100013fe:	e7c7      	b.n	10001390 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10001400:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10001402:	9a12      	ldr	r2, [sp, #72]	; 0x48
10001404:	ae0c      	add	r6, sp, #48	; 0x30
10001406:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10001408:	aa0a      	add	r2, sp, #40	; 0x28
1000140a:	189b      	adds	r3, r3, r2
		char sign = 0;
1000140c:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
1000140e:	2001      	movs	r0, #1
			bpe = buf + 1;
10001410:	9306      	str	r3, [sp, #24]
10001412:	e7c3      	b.n	1000139c <z_cbvprintf_impl+0x538>
				sign = '+';
10001414:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10001416:	071a      	lsls	r2, r3, #28
10001418:	d402      	bmi.n	10001420 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
1000141a:	06db      	lsls	r3, r3, #27
1000141c:	0fdb      	lsrs	r3, r3, #31
1000141e:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10001420:	9a12      	ldr	r2, [sp, #72]	; 0x48
10001422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10001424:	2b00      	cmp	r3, #0
10001426:	db00      	blt.n	1000142a <z_cbvprintf_impl+0x5c6>
10001428:	e760      	b.n	100012ec <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
1000142a:	2100      	movs	r1, #0
1000142c:	4250      	negs	r0, r2
1000142e:	4199      	sbcs	r1, r3
				sign = '-';
10001430:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10001432:	9012      	str	r0, [sp, #72]	; 0x48
10001434:	9113      	str	r1, [sp, #76]	; 0x4c
10001436:	e759      	b.n	100012ec <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10001438:	2500      	movs	r5, #0
1000143a:	e757      	b.n	100012ec <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
1000143c:	9812      	ldr	r0, [sp, #72]	; 0x48
1000143e:	ad12      	add	r5, sp, #72	; 0x48
10001440:	2800      	cmp	r0, #0
10001442:	d034      	beq.n	100014ae <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10001444:	231e      	movs	r3, #30
10001446:	aa0a      	add	r2, sp, #40	; 0x28
10001448:	189b      	adds	r3, r3, r2
1000144a:	9300      	str	r3, [sp, #0]
1000144c:	aa14      	add	r2, sp, #80	; 0x50
1000144e:	ab0c      	add	r3, sp, #48	; 0x30
10001450:	2100      	movs	r1, #0
10001452:	f003 f9d1 	bl	100047f8 <encode_uint>
				conv->altform_0c = true;
10001456:	23ef      	movs	r3, #239	; 0xef
10001458:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000145a:	0006      	movs	r6, r0
				conv->altform_0c = true;
1000145c:	401a      	ands	r2, r3
1000145e:	4b48      	ldr	r3, [pc, #288]	; (10001580 <z_cbvprintf_impl+0x71c>)
10001460:	4313      	orrs	r3, r2
10001462:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10001464:	2500      	movs	r5, #0
			if (precision >= 0) {
10001466:	9b06      	ldr	r3, [sp, #24]
10001468:	42ab      	cmp	r3, r5
1000146a:	db00      	blt.n	1000146e <z_cbvprintf_impl+0x60a>
1000146c:	e74c      	b.n	10001308 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
1000146e:	42a8      	cmp	r0, r5
10001470:	d100      	bne.n	10001474 <z_cbvprintf_impl+0x610>
10001472:	e6f5      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10001474:	231e      	movs	r3, #30
10001476:	aa0a      	add	r2, sp, #40	; 0x28
10001478:	189b      	adds	r3, r3, r2
1000147a:	1a18      	subs	r0, r3, r0
1000147c:	231e      	movs	r3, #30
1000147e:	189b      	adds	r3, r3, r2
10001480:	9306      	str	r3, [sp, #24]
10001482:	e78b      	b.n	1000139c <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10001484:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10001486:	2a07      	cmp	r2, #7
10001488:	d900      	bls.n	1000148c <z_cbvprintf_impl+0x628>
1000148a:	e6e9      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
1000148c:	0010      	movs	r0, r2
1000148e:	f7fe fe8b 	bl	100001a8 <__gnu_thumb1_case_uqi>
10001492:	040c      	.short	0x040c
10001494:	08080c06 	.word	0x08080c06
10001498:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
1000149a:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
1000149c:	e6e0      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
1000149e:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
100014a0:	e6de      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
100014a2:	17fa      	asrs	r2, r7, #31
100014a4:	601f      	str	r7, [r3, #0]
100014a6:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
100014a8:	e6da      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
100014aa:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
100014ac:	e6d8      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
100014ae:	4b35      	ldr	r3, [pc, #212]	; (10001584 <z_cbvprintf_impl+0x720>)
		char sign = 0;
100014b0:	0005      	movs	r5, r0
100014b2:	4e35      	ldr	r6, [pc, #212]	; (10001588 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
100014b4:	2005      	movs	r0, #5
			bpe = bps + 5;
100014b6:	9306      	str	r3, [sp, #24]
100014b8:	e770      	b.n	1000139c <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
100014ba:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
100014bc:	0fd2      	lsrs	r2, r2, #31
100014be:	1880      	adds	r0, r0, r2
100014c0:	e776      	b.n	100013b0 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
100014c2:	9905      	ldr	r1, [sp, #20]
100014c4:	9809      	ldr	r0, [sp, #36]	; 0x24
100014c6:	9b04      	ldr	r3, [sp, #16]
100014c8:	4798      	blx	r3
100014ca:	2800      	cmp	r0, #0
100014cc:	da05      	bge.n	100014da <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
100014ce:	b019      	add	sp, #100	; 0x64
100014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
100014d2:	2320      	movs	r3, #32
					pad = '0';
100014d4:	9309      	str	r3, [sp, #36]	; 0x24
100014d6:	9b03      	ldr	r3, [sp, #12]
100014d8:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
100014da:	9b08      	ldr	r3, [sp, #32]
100014dc:	001a      	movs	r2, r3
100014de:	3a01      	subs	r2, #1
100014e0:	9208      	str	r2, [sp, #32]
100014e2:	2b00      	cmp	r3, #0
100014e4:	dced      	bgt.n	100014c2 <z_cbvprintf_impl+0x65e>
100014e6:	9a03      	ldr	r2, [sp, #12]
100014e8:	19d7      	adds	r7, r2, r7
100014ea:	1aff      	subs	r7, r7, r3
100014ec:	9b08      	ldr	r3, [sp, #32]
100014ee:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
100014f0:	2d00      	cmp	r5, #0
100014f2:	d006      	beq.n	10001502 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
100014f4:	0028      	movs	r0, r5
100014f6:	9905      	ldr	r1, [sp, #20]
100014f8:	9b04      	ldr	r3, [sp, #16]
100014fa:	4798      	blx	r3
100014fc:	2800      	cmp	r0, #0
100014fe:	dbe6      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
10001500:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10001502:	ab12      	add	r3, sp, #72	; 0x48
10001504:	7a9b      	ldrb	r3, [r3, #10]
10001506:	06da      	lsls	r2, r3, #27
10001508:	d401      	bmi.n	1000150e <z_cbvprintf_impl+0x6aa>
1000150a:	071b      	lsls	r3, r3, #28
1000150c:	d506      	bpl.n	1000151c <z_cbvprintf_impl+0x6b8>
				OUTC('0');
1000150e:	2030      	movs	r0, #48	; 0x30
10001510:	9905      	ldr	r1, [sp, #20]
10001512:	9b04      	ldr	r3, [sp, #16]
10001514:	4798      	blx	r3
10001516:	2800      	cmp	r0, #0
10001518:	dbd9      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
1000151a:	3701      	adds	r7, #1
			if (conv->altform_0c) {
1000151c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000151e:	2b00      	cmp	r3, #0
10001520:	d007      	beq.n	10001532 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10001522:	ab12      	add	r3, sp, #72	; 0x48
10001524:	7ad8      	ldrb	r0, [r3, #11]
10001526:	9905      	ldr	r1, [sp, #20]
10001528:	9b04      	ldr	r3, [sp, #16]
1000152a:	4798      	blx	r3
1000152c:	2800      	cmp	r0, #0
1000152e:	dbce      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
10001530:	3701      	adds	r7, #1
				while (width-- > 0) {
10001532:	003d      	movs	r5, r7
10001534:	e006      	b.n	10001544 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10001536:	2030      	movs	r0, #48	; 0x30
10001538:	9905      	ldr	r1, [sp, #20]
1000153a:	9b04      	ldr	r3, [sp, #16]
1000153c:	4798      	blx	r3
1000153e:	2800      	cmp	r0, #0
10001540:	dbc5      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
10001542:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10001544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001546:	19db      	adds	r3, r3, r7
10001548:	1b5b      	subs	r3, r3, r5
1000154a:	2b00      	cmp	r3, #0
1000154c:	dcf3      	bgt.n	10001536 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
1000154e:	0032      	movs	r2, r6
10001550:	9b06      	ldr	r3, [sp, #24]
10001552:	9905      	ldr	r1, [sp, #20]
10001554:	9804      	ldr	r0, [sp, #16]
10001556:	f003 f99c 	bl	10004892 <outs>
1000155a:	2800      	cmp	r0, #0
1000155c:	dbb7      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
1000155e:	1947      	adds	r7, r0, r5
10001560:	003d      	movs	r5, r7
		while (width > 0) {
10001562:	9b03      	ldr	r3, [sp, #12]
10001564:	195b      	adds	r3, r3, r5
10001566:	1bdb      	subs	r3, r3, r7
10001568:	2b00      	cmp	r3, #0
1000156a:	dc00      	bgt.n	1000156e <z_cbvprintf_impl+0x70a>
1000156c:	e678      	b.n	10001260 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
1000156e:	2020      	movs	r0, #32
10001570:	9905      	ldr	r1, [sp, #20]
10001572:	9b04      	ldr	r3, [sp, #16]
10001574:	4798      	blx	r3
10001576:	2800      	cmp	r0, #0
10001578:	dba9      	blt.n	100014ce <z_cbvprintf_impl+0x66a>
1000157a:	3701      	adds	r7, #1
			--width;
1000157c:	e7f1      	b.n	10001562 <z_cbvprintf_impl+0x6fe>
1000157e:	46c0      	nop			; (mov r8, r8)
10001580:	00007810 	.word	0x00007810
10001584:	1000605e 	.word	0x1000605e
10001588:	10006059 	.word	0x10006059

1000158c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
1000158c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000158e:	0005      	movs	r5, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
10001590:	0006      	movs	r6, r0
10001592:	2d00      	cmp	r5, #0
10001594:	d101      	bne.n	1000159a <activate_foreach_backend+0xe>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
10001596:	0030      	movs	r0, r6
10001598:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
1000159a:	0028      	movs	r0, r5
1000159c:	f7fe fe7e 	bl	1000029c <__ctzsi2>
		mask_cpy &= ~BIT(i);
100015a0:	2301      	movs	r3, #1
100015a2:	4083      	lsls	r3, r0
100015a4:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100015a6:	4f0e      	ldr	r7, [pc, #56]	; (100015e0 <activate_foreach_backend+0x54>)
100015a8:	0104      	lsls	r4, r0, #4
		mask_cpy &= ~BIT(i);
100015aa:	439d      	bics	r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100015ac:	193b      	adds	r3, r7, r4
100015ae:	9301      	str	r3, [sp, #4]
100015b0:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
100015b2:	9200      	str	r2, [sp, #0]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100015b4:	2b00      	cmp	r3, #0
100015b6:	d0ec      	beq.n	10001592 <activate_foreach_backend+0x6>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
100015b8:	59e3      	ldr	r3, [r4, r7]
100015ba:	691b      	ldr	r3, [r3, #16]
100015bc:	2b00      	cmp	r3, #0
100015be:	d109      	bne.n	100015d4 <activate_foreach_backend+0x48>
			mask &= ~BIT(i);
100015c0:	9b00      	ldr	r3, [sp, #0]
					   backend->cb->ctx,
100015c2:	193c      	adds	r4, r7, r4
			mask &= ~BIT(i);
100015c4:	401e      	ands	r6, r3
			log_backend_enable(backend,
100015c6:	6863      	ldr	r3, [r4, #4]
100015c8:	2204      	movs	r2, #4
100015ca:	6819      	ldr	r1, [r3, #0]
100015cc:	9801      	ldr	r0, [sp, #4]
100015ce:	f000 fa43 	bl	10001a58 <log_backend_enable>
100015d2:	e7de      	b.n	10001592 <activate_foreach_backend+0x6>
		return backend->api->is_ready(backend);
100015d4:	1938      	adds	r0, r7, r4
100015d6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100015d8:	2800      	cmp	r0, #0
100015da:	d1da      	bne.n	10001592 <activate_foreach_backend+0x6>
100015dc:	e7f0      	b.n	100015c0 <activate_foreach_backend+0x34>
100015de:	46c0      	nop			; (mov r8, r8)
100015e0:	10005cd8 	.word	0x10005cd8

100015e4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
100015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
100015e6:	2200      	movs	r2, #0
{
100015e8:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
100015ea:	490f      	ldr	r1, [pc, #60]	; (10001628 <enable_logger+0x44>)
100015ec:	480f      	ldr	r0, [pc, #60]	; (1000162c <enable_logger+0x48>)
100015ee:	f004 fa0f 	bl	10005a10 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
100015f2:	2400      	movs	r4, #0
100015f4:	2600      	movs	r6, #0
100015f6:	2700      	movs	r7, #0
100015f8:	200e      	movs	r0, #14
100015fa:	22c0      	movs	r2, #192	; 0xc0
100015fc:	4d0c      	ldr	r5, [pc, #48]	; (10001630 <enable_logger+0x4c>)
100015fe:	9003      	str	r0, [sp, #12]
10001600:	9606      	str	r6, [sp, #24]
10001602:	9707      	str	r7, [sp, #28]
10001604:	0028      	movs	r0, r5
10001606:	4b0b      	ldr	r3, [pc, #44]	; (10001634 <enable_logger+0x50>)
10001608:	490b      	ldr	r1, [pc, #44]	; (10001638 <enable_logger+0x54>)
1000160a:	9404      	str	r4, [sp, #16]
1000160c:	9402      	str	r4, [sp, #8]
1000160e:	9401      	str	r4, [sp, #4]
10001610:	9400      	str	r4, [sp, #0]
10001612:	0092      	lsls	r2, r2, #2
10001614:	f002 f8c2 	bl	1000379c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
10001618:	4908      	ldr	r1, [pc, #32]	; (1000163c <enable_logger+0x58>)
1000161a:	0028      	movs	r0, r5
1000161c:	f004 f8f3 	bl	10005806 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
10001620:	0020      	movs	r0, r4
10001622:	b009      	add	sp, #36	; 0x24
10001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001626:	46c0      	nop			; (mov r8, r8)
10001628:	10001641 	.word	0x10001641
1000162c:	20000930 	.word	0x20000930
10001630:	200004b8 	.word	0x200004b8
10001634:	1000190d 	.word	0x1000190d
10001638:	20000b68 	.word	0x20000b68
1000163c:	10009632 	.word	0x10009632

10001640 <log_process_thread_timer_expiry_fn>:
{
10001640:	b510      	push	{r4, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
10001642:	4802      	ldr	r0, [pc, #8]	; (1000164c <log_process_thread_timer_expiry_fn+0xc>)
10001644:	f002 f9d0 	bl	100039e8 <z_impl_k_sem_give>
}
10001648:	bd10      	pop	{r4, pc}
1000164a:	46c0      	nop			; (mov r8, r8)
1000164c:	200004a8 	.word	0x200004a8

10001650 <z_log_init>:
{
10001650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001652:	9000      	str	r0, [sp, #0]
	if (atomic_inc(&initialized) != 0) {
10001654:	481e      	ldr	r0, [pc, #120]	; (100016d0 <z_log_init+0x80>)
{
10001656:	9101      	str	r1, [sp, #4]
	if (atomic_inc(&initialized) != 0) {
10001658:	f003 fb90 	bl	10004d7c <atomic_inc>
1000165c:	1e06      	subs	r6, r0, #0
1000165e:	d033      	beq.n	100016c8 <z_log_init+0x78>
	uint32_t mask = 0;
10001660:	2500      	movs	r5, #0
}
10001662:	0028      	movs	r0, r5
10001664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (backend->autostart) {
10001666:	7b23      	ldrb	r3, [r4, #12]
10001668:	2b00      	cmp	r3, #0
1000166a:	d010      	beq.n	1000168e <z_log_init+0x3e>
	if (backend->api->init) {
1000166c:	6823      	ldr	r3, [r4, #0]
1000166e:	68db      	ldr	r3, [r3, #12]
10001670:	2b00      	cmp	r3, #0
10001672:	d001      	beq.n	10001678 <z_log_init+0x28>
		backend->api->init(backend);
10001674:	0020      	movs	r0, r4
10001676:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
10001678:	6823      	ldr	r3, [r4, #0]
1000167a:	691b      	ldr	r3, [r3, #16]
1000167c:	2b00      	cmp	r3, #0
1000167e:	d11b      	bne.n	100016b8 <z_log_init+0x68>
				log_backend_enable(backend,
10001680:	6863      	ldr	r3, [r4, #4]
10001682:	2204      	movs	r2, #4
10001684:	0020      	movs	r0, r4
10001686:	6819      	ldr	r1, [r3, #0]
10001688:	f000 f9e6 	bl	10001a58 <log_backend_enable>
			i++;
1000168c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
1000168e:	3410      	adds	r4, #16
10001690:	4b10      	ldr	r3, [pc, #64]	; (100016d4 <z_log_init+0x84>)
10001692:	429c      	cmp	r4, r3
10001694:	d3e7      	bcc.n	10001666 <z_log_init+0x16>
	if (blocking) {
10001696:	9b00      	ldr	r3, [sp, #0]
10001698:	2b00      	cmp	r3, #0
1000169a:	d0e2      	beq.n	10001662 <z_log_init+0x12>
		while (mask) {
1000169c:	2d00      	cmp	r5, #0
1000169e:	d0df      	beq.n	10001660 <z_log_init+0x10>
			mask = activate_foreach_backend(mask);
100016a0:	0028      	movs	r0, r5
100016a2:	f7ff ff73 	bl	1000158c <activate_foreach_backend>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
100016a6:	9b01      	ldr	r3, [sp, #4]
			mask = activate_foreach_backend(mask);
100016a8:	0005      	movs	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
100016aa:	2b00      	cmp	r3, #0
100016ac:	d0f6      	beq.n	1000169c <z_log_init+0x4c>
	return z_impl_k_sleep(timeout);
100016ae:	2100      	movs	r1, #0
100016b0:	2064      	movs	r0, #100	; 0x64
100016b2:	f002 fc89 	bl	10003fc8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
100016b6:	e7f1      	b.n	1000169c <z_log_init+0x4c>
		return backend->api->is_ready(backend);
100016b8:	0020      	movs	r0, r4
100016ba:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
100016bc:	2800      	cmp	r0, #0
100016be:	d0df      	beq.n	10001680 <z_log_init+0x30>
				mask |= BIT(i);
100016c0:	003b      	movs	r3, r7
100016c2:	40b3      	lsls	r3, r6
100016c4:	431d      	orrs	r5, r3
100016c6:	e7e1      	b.n	1000168c <z_log_init+0x3c>
	uint32_t mask = 0;
100016c8:	0005      	movs	r5, r0
				mask |= BIT(i);
100016ca:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100016cc:	4c02      	ldr	r4, [pc, #8]	; (100016d8 <z_log_init+0x88>)
100016ce:	e7df      	b.n	10001690 <z_log_init+0x40>
100016d0:	20000a78 	.word	0x20000a78
100016d4:	10005ce8 	.word	0x10005ce8
100016d8:	10005cd8 	.word	0x10005cd8

100016dc <log_format_func_t_get>:
	return format_table[log_type];
100016dc:	4b01      	ldr	r3, [pc, #4]	; (100016e4 <log_format_func_t_get+0x8>)
100016de:	0080      	lsls	r0, r0, #2
100016e0:	58c0      	ldr	r0, [r0, r3]
}
100016e2:	4770      	bx	lr
100016e4:	10005d28 	.word	0x10005d28

100016e8 <log_set_timestamp_func>:
{
100016e8:	0003      	movs	r3, r0
100016ea:	b510      	push	{r4, lr}
100016ec:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
100016ee:	2b00      	cmp	r3, #0
100016f0:	d005      	beq.n	100016fe <log_set_timestamp_func+0x16>
	timestamp_func = timestamp_getter;
100016f2:	4a04      	ldr	r2, [pc, #16]	; (10001704 <log_set_timestamp_func+0x1c>)
100016f4:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
100016f6:	f000 fc6d 	bl	10001fd4 <log_output_timestamp_freq_set>
	return 0;
100016fa:	2000      	movs	r0, #0
}
100016fc:	bd10      	pop	{r4, pc}
		return -EINVAL;
100016fe:	2016      	movs	r0, #22
10001700:	4240      	negs	r0, r0
10001702:	e7fb      	b.n	100016fc <log_set_timestamp_func+0x14>
10001704:	20000004 	.word	0x20000004

10001708 <z_log_notify_backend_enabled>:
{
10001708:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
1000170a:	4c05      	ldr	r4, [pc, #20]	; (10001720 <z_log_notify_backend_enabled+0x18>)
1000170c:	7823      	ldrb	r3, [r4, #0]
1000170e:	2b00      	cmp	r3, #0
10001710:	d102      	bne.n	10001718 <z_log_notify_backend_enabled+0x10>
	z_impl_k_sem_give(sem);
10001712:	4804      	ldr	r0, [pc, #16]	; (10001724 <z_log_notify_backend_enabled+0x1c>)
10001714:	f002 f968 	bl	100039e8 <z_impl_k_sem_give>
	backend_attached = true;
10001718:	2301      	movs	r3, #1
1000171a:	7023      	strb	r3, [r4, #0]
}
1000171c:	bd10      	pop	{r4, pc}
1000171e:	46c0      	nop			; (mov r8, r8)
10001720:	20000b60 	.word	0x20000b60
10001724:	200004a8 	.word	0x200004a8

10001728 <z_log_dropped>:
{
10001728:	b510      	push	{r4, lr}
1000172a:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
1000172c:	4804      	ldr	r0, [pc, #16]	; (10001740 <z_log_dropped+0x18>)
1000172e:	f003 fb25 	bl	10004d7c <atomic_inc>
	if (buffered) {
10001732:	2c00      	cmp	r4, #0
10001734:	d003      	beq.n	1000173e <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
10001736:	2101      	movs	r1, #1
10001738:	4802      	ldr	r0, [pc, #8]	; (10001744 <z_log_dropped+0x1c>)
1000173a:	f004 f99b 	bl	10005a74 <z_impl_atomic_sub>
}
1000173e:	bd10      	pop	{r4, pc}
10001740:	20000a70 	.word	0x20000a70
10001744:	20000a74 	.word	0x20000a74

10001748 <z_log_dropped_read_and_clear>:
{
10001748:	b510      	push	{r4, lr}
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
1000174a:	2100      	movs	r1, #0
1000174c:	4801      	ldr	r0, [pc, #4]	; (10001754 <z_log_dropped_read_and_clear+0xc>)
1000174e:	f004 f99e 	bl	10005a8e <z_impl_atomic_set>
}
10001752:	bd10      	pop	{r4, pc}
10001754:	20000a70 	.word	0x20000a70

10001758 <dropped_notify>:
{
10001758:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
1000175a:	f7ff fff5 	bl	10001748 <z_log_dropped_read_and_clear>
1000175e:	0005      	movs	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001760:	4c08      	ldr	r4, [pc, #32]	; (10001784 <dropped_notify+0x2c>)
10001762:	4b09      	ldr	r3, [pc, #36]	; (10001788 <dropped_notify+0x30>)
10001764:	429c      	cmp	r4, r3
10001766:	d300      	bcc.n	1000176a <dropped_notify+0x12>
}
10001768:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
1000176a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
1000176c:	795b      	ldrb	r3, [r3, #5]
1000176e:	2b00      	cmp	r3, #0
10001770:	d006      	beq.n	10001780 <dropped_notify+0x28>
	if (backend->api->dropped != NULL) {
10001772:	6823      	ldr	r3, [r4, #0]
10001774:	685b      	ldr	r3, [r3, #4]
10001776:	2b00      	cmp	r3, #0
10001778:	d002      	beq.n	10001780 <dropped_notify+0x28>
		backend->api->dropped(backend, cnt);
1000177a:	0029      	movs	r1, r5
1000177c:	0020      	movs	r0, r4
1000177e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001780:	3410      	adds	r4, #16
10001782:	e7ee      	b.n	10001762 <dropped_notify+0xa>
10001784:	10005cd8 	.word	0x10005cd8
10001788:	10005ce8 	.word	0x10005ce8

1000178c <z_log_msg_init>:
{
1000178c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
1000178e:	4c04      	ldr	r4, [pc, #16]	; (100017a0 <z_log_msg_init+0x14>)
10001790:	4904      	ldr	r1, [pc, #16]	; (100017a4 <z_log_msg_init+0x18>)
10001792:	0020      	movs	r0, r4
10001794:	f003 f98b 	bl	10004aae <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
10001798:	4b03      	ldr	r3, [pc, #12]	; (100017a8 <z_log_msg_init+0x1c>)
1000179a:	601c      	str	r4, [r3, #0]
}
1000179c:	bd10      	pop	{r4, pc}
1000179e:	46c0      	nop			; (mov r8, r8)
100017a0:	20000458 	.word	0x20000458
100017a4:	10005d14 	.word	0x10005d14
100017a8:	20000a68 	.word	0x20000a68

100017ac <log_core_init>:
	panic_mode = false;
100017ac:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
100017ae:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
100017b0:	4a06      	ldr	r2, [pc, #24]	; (100017cc <log_core_init+0x20>)
{
100017b2:	b510      	push	{r4, lr}
	panic_mode = false;
100017b4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
100017b6:	4a06      	ldr	r2, [pc, #24]	; (100017d0 <log_core_init+0x24>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
100017b8:	0089      	lsls	r1, r1, #2
	dropped_cnt = 0;
100017ba:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
100017bc:	4a05      	ldr	r2, [pc, #20]	; (100017d4 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
100017be:	4806      	ldr	r0, [pc, #24]	; (100017d8 <log_core_init+0x2c>)
	buffered_cnt = 0;
100017c0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
100017c2:	f7ff ff91 	bl	100016e8 <log_set_timestamp_func>
		z_log_msg_init();
100017c6:	f7ff ffe1 	bl	1000178c <z_log_msg_init>
}
100017ca:	bd10      	pop	{r4, pc}
100017cc:	20000b61 	.word	0x20000b61
100017d0:	20000a70 	.word	0x20000a70
100017d4:	20000a74 	.word	0x20000a74
100017d8:	10004d87 	.word	0x10004d87

100017dc <z_log_msg_alloc>:
{
100017dc:	b510      	push	{r4, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
100017de:	4c04      	ldr	r4, [pc, #16]	; (100017f0 <z_log_msg_alloc+0x14>)
{
100017e0:	0001      	movs	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
100017e2:	2200      	movs	r2, #0
100017e4:	2300      	movs	r3, #0
100017e6:	0020      	movs	r0, r4
100017e8:	f003 f982 	bl	10004af0 <mpsc_pbuf_alloc>
}
100017ec:	bd10      	pop	{r4, pc}
100017ee:	46c0      	nop			; (mov r8, r8)
100017f0:	20000458 	.word	0x20000458

100017f4 <z_log_msg_local_claim>:
{
100017f4:	b510      	push	{r4, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
100017f6:	4802      	ldr	r0, [pc, #8]	; (10001800 <z_log_msg_local_claim+0xc>)
100017f8:	f003 fa14 	bl	10004c24 <mpsc_pbuf_claim>
}
100017fc:	bd10      	pop	{r4, pc}
100017fe:	46c0      	nop			; (mov r8, r8)
10001800:	20000458 	.word	0x20000458

10001804 <z_log_msg_free>:
{
10001804:	b510      	push	{r4, lr}
	msg_free(curr_log_buffer, msg);
10001806:	4b03      	ldr	r3, [pc, #12]	; (10001814 <z_log_msg_free+0x10>)
{
10001808:	0001      	movs	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
1000180a:	6818      	ldr	r0, [r3, #0]
1000180c:	f003 fa5b 	bl	10004cc6 <mpsc_pbuf_free>
}
10001810:	bd10      	pop	{r4, pc}
10001812:	46c0      	nop			; (mov r8, r8)
10001814:	20000a68 	.word	0x20000a68

10001818 <z_log_msg_pending>:
{
10001818:	b510      	push	{r4, lr}
	return mpsc_pbuf_is_pending(buffer);
1000181a:	4802      	ldr	r0, [pc, #8]	; (10001824 <z_log_msg_pending+0xc>)
1000181c:	f003 fa8c 	bl	10004d38 <mpsc_pbuf_is_pending>
}
10001820:	bd10      	pop	{r4, pc}
10001822:	46c0      	nop			; (mov r8, r8)
10001824:	20000458 	.word	0x20000458

10001828 <z_impl_log_process>:
{
10001828:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
1000182a:	4b20      	ldr	r3, [pc, #128]	; (100018ac <z_impl_log_process+0x84>)
1000182c:	7818      	ldrb	r0, [r3, #0]
1000182e:	2800      	cmp	r0, #0
10001830:	d030      	beq.n	10001894 <z_impl_log_process+0x6c>
	return z_log_msg_local_claim();
10001832:	f7ff ffdf 	bl	100017f4 <z_log_msg_local_claim>
10001836:	1e05      	subs	r5, r0, #0
	if (msg) {
10001838:	d00a      	beq.n	10001850 <z_impl_log_process+0x28>
	return z_impl_atomic_sub(target, value);
1000183a:	2101      	movs	r1, #1
1000183c:	481c      	ldr	r0, [pc, #112]	; (100018b0 <z_impl_log_process+0x88>)
1000183e:	f004 f919 	bl	10005a74 <z_impl_atomic_sub>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001842:	4c1c      	ldr	r4, [pc, #112]	; (100018b4 <z_impl_log_process+0x8c>)
10001844:	4b1c      	ldr	r3, [pc, #112]	; (100018b8 <z_impl_log_process+0x90>)
10001846:	429c      	cmp	r4, r3
10001848:	d325      	bcc.n	10001896 <z_impl_log_process+0x6e>
		z_log_msg_free(msg);
1000184a:	0028      	movs	r0, r5
1000184c:	f7ff ffda 	bl	10001804 <z_log_msg_free>
	return dropped_cnt > 0;
10001850:	4b1a      	ldr	r3, [pc, #104]	; (100018bc <z_impl_log_process+0x94>)
10001852:	4c1b      	ldr	r4, [pc, #108]	; (100018c0 <z_impl_log_process+0x98>)
		if ((dropped_pend || unordered_pend) &&
10001854:	681b      	ldr	r3, [r3, #0]
10001856:	2b00      	cmp	r3, #0
10001858:	dd11      	ble.n	1000187e <z_impl_log_process+0x56>
	return z_impl_k_uptime_ticks();
1000185a:	f004 f8d5 	bl	10005a08 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
1000185e:	220a      	movs	r2, #10
10001860:	2300      	movs	r3, #0
10001862:	f7fe fd3b 	bl	100002dc <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
10001866:	6822      	ldr	r2, [r4, #0]
10001868:	6863      	ldr	r3, [r4, #4]
1000186a:	1a80      	subs	r0, r0, r2
1000186c:	4199      	sbcs	r1, r3
		if ((dropped_pend || unordered_pend) &&
1000186e:	2900      	cmp	r1, #0
10001870:	d103      	bne.n	1000187a <z_impl_log_process+0x52>
10001872:	23fa      	movs	r3, #250	; 0xfa
10001874:	009b      	lsls	r3, r3, #2
10001876:	4298      	cmp	r0, r3
10001878:	d901      	bls.n	1000187e <z_impl_log_process+0x56>
				dropped_notify();
1000187a:	f7ff ff6d 	bl	10001758 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
1000187e:	6822      	ldr	r2, [r4, #0]
10001880:	6863      	ldr	r3, [r4, #4]
10001882:	20fa      	movs	r0, #250	; 0xfa
10001884:	2100      	movs	r1, #0
10001886:	0080      	lsls	r0, r0, #2
10001888:	1812      	adds	r2, r2, r0
1000188a:	414b      	adcs	r3, r1
1000188c:	6022      	str	r2, [r4, #0]
1000188e:	6063      	str	r3, [r4, #4]
	return z_log_msg_pending();
10001890:	f7ff ffc2 	bl	10001818 <z_log_msg_pending>
}
10001894:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10001896:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
10001898:	795b      	ldrb	r3, [r3, #5]
1000189a:	2b00      	cmp	r3, #0
1000189c:	d004      	beq.n	100018a8 <z_impl_log_process+0x80>
	backend->api->process(backend, msg);
1000189e:	6823      	ldr	r3, [r4, #0]
100018a0:	0029      	movs	r1, r5
100018a2:	0020      	movs	r0, r4
100018a4:	681b      	ldr	r3, [r3, #0]
100018a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100018a8:	3410      	adds	r4, #16
100018aa:	e7cb      	b.n	10001844 <z_impl_log_process+0x1c>
100018ac:	20000b60 	.word	0x20000b60
100018b0:	20000a74 	.word	0x20000a74
100018b4:	10005cd8 	.word	0x10005cd8
100018b8:	10005ce8 	.word	0x10005ce8
100018bc:	20000a70 	.word	0x20000a70
100018c0:	20000928 	.word	0x20000928

100018c4 <z_impl_log_panic>:
{
100018c4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
100018c6:	4d0e      	ldr	r5, [pc, #56]	; (10001900 <z_impl_log_panic+0x3c>)
100018c8:	7829      	ldrb	r1, [r5, #0]
100018ca:	2900      	cmp	r1, #0
100018cc:	d10c      	bne.n	100018e8 <z_impl_log_panic+0x24>
	(void)z_log_init(true, false);
100018ce:	2001      	movs	r0, #1
100018d0:	f7ff febe 	bl	10001650 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100018d4:	4c0b      	ldr	r4, [pc, #44]	; (10001904 <z_impl_log_panic+0x40>)
100018d6:	4b0c      	ldr	r3, [pc, #48]	; (10001908 <z_impl_log_panic+0x44>)
100018d8:	429c      	cmp	r4, r3
100018da:	d306      	bcc.n	100018ea <z_impl_log_panic+0x26>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
100018dc:	f7ff ffa4 	bl	10001828 <z_impl_log_process>
		while (log_process() == true) {
100018e0:	2800      	cmp	r0, #0
100018e2:	d1fb      	bne.n	100018dc <z_impl_log_panic+0x18>
	panic_mode = true;
100018e4:	2301      	movs	r3, #1
100018e6:	702b      	strb	r3, [r5, #0]
}
100018e8:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
100018ea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
100018ec:	795b      	ldrb	r3, [r3, #5]
100018ee:	2b00      	cmp	r3, #0
100018f0:	d003      	beq.n	100018fa <z_impl_log_panic+0x36>
	backend->api->panic(backend);
100018f2:	6823      	ldr	r3, [r4, #0]
100018f4:	0020      	movs	r0, r4
100018f6:	689b      	ldr	r3, [r3, #8]
100018f8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100018fa:	3410      	adds	r4, #16
100018fc:	e7eb      	b.n	100018d6 <z_impl_log_panic+0x12>
100018fe:	46c0      	nop			; (mov r8, r8)
10001900:	20000b61 	.word	0x20000b61
10001904:	10005cd8 	.word	0x10005cd8
10001908:	10005ce8 	.word	0x10005ce8

1000190c <log_process_thread_func>:
{
1000190c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t activate_mask = z_log_init(false, false);
1000190e:	2100      	movs	r1, #0
10001910:	0008      	movs	r0, r1
10001912:	f7ff fe9d 	bl	10001650 <z_log_init>
10001916:	1e04      	subs	r4, r0, #0
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
10001918:	d02b      	beq.n	10001972 <log_process_thread_func+0x66>
1000191a:	27fa      	movs	r7, #250	; 0xfa
1000191c:	2600      	movs	r6, #0
1000191e:	007f      	lsls	r7, r7, #1
	return z_impl_z_current_get();
10001920:	f002 fb6a 	bl	10003ff8 <z_impl_z_current_get>
	proc_tid = process_tid;
10001924:	4b1b      	ldr	r3, [pc, #108]	; (10001994 <log_process_thread_func+0x88>)
10001926:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
10001928:	2800      	cmp	r0, #0
1000192a:	d006      	beq.n	1000193a <log_process_thread_func+0x2e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
1000192c:	4b1a      	ldr	r3, [pc, #104]	; (10001998 <log_process_thread_func+0x8c>)
	    process_tid &&
1000192e:	681b      	ldr	r3, [r3, #0]
10001930:	2b09      	cmp	r3, #9
10001932:	dd02      	ble.n	1000193a <log_process_thread_func+0x2e>
	z_impl_k_sem_give(sem);
10001934:	4819      	ldr	r0, [pc, #100]	; (1000199c <log_process_thread_func+0x90>)
10001936:	f002 f857 	bl	100039e8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
1000193a:	2300      	movs	r3, #0
1000193c:	9300      	str	r3, [sp, #0]
		if (activate_mask) {
1000193e:	2c00      	cmp	r4, #0
10001940:	d007      	beq.n	10001952 <log_process_thread_func+0x46>
			activate_mask = activate_foreach_backend(activate_mask);
10001942:	0020      	movs	r0, r4
10001944:	f7ff fe22 	bl	1000158c <activate_foreach_backend>
10001948:	1e04      	subs	r4, r0, #0
			if (!activate_mask) {
1000194a:	d102      	bne.n	10001952 <log_process_thread_func+0x46>
				timeout = K_FOREVER;
1000194c:	2701      	movs	r7, #1
1000194e:	427f      	negs	r7, r7
10001950:	003e      	movs	r6, r7
10001952:	f7ff ff69 	bl	10001828 <z_impl_log_process>
10001956:	9001      	str	r0, [sp, #4]
		if (log_process() == false) {
10001958:	2800      	cmp	r0, #0
1000195a:	d108      	bne.n	1000196e <log_process_thread_func+0x62>
			if (processed_any) {
1000195c:	9b00      	ldr	r3, [sp, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
1000195e:	4d10      	ldr	r5, [pc, #64]	; (100019a0 <log_process_thread_func+0x94>)
			if (processed_any) {
10001960:	2b00      	cmp	r3, #0
10001962:	d113      	bne.n	1000198c <log_process_thread_func+0x80>
	return z_impl_k_sem_take(sem, timeout);
10001964:	480d      	ldr	r0, [pc, #52]	; (1000199c <log_process_thread_func+0x90>)
10001966:	003a      	movs	r2, r7
10001968:	0033      	movs	r3, r6
1000196a:	f002 f859 	bl	10003a20 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
1000196e:	9b01      	ldr	r3, [sp, #4]
10001970:	e7e4      	b.n	1000193c <log_process_thread_func+0x30>
10001972:	2701      	movs	r7, #1
10001974:	427f      	negs	r7, r7
10001976:	003e      	movs	r6, r7
10001978:	e7d2      	b.n	10001920 <log_process_thread_func+0x14>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
1000197a:	682b      	ldr	r3, [r5, #0]
1000197c:	699b      	ldr	r3, [r3, #24]
1000197e:	2b00      	cmp	r3, #0
10001980:	d003      	beq.n	1000198a <log_process_thread_func+0x7e>
		backend->api->notify(backend, event, arg);
10001982:	2200      	movs	r2, #0
10001984:	0028      	movs	r0, r5
10001986:	0011      	movs	r1, r2
10001988:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
1000198a:	3510      	adds	r5, #16
1000198c:	4b05      	ldr	r3, [pc, #20]	; (100019a4 <log_process_thread_func+0x98>)
1000198e:	429d      	cmp	r5, r3
10001990:	d3f3      	bcc.n	1000197a <log_process_thread_func+0x6e>
10001992:	e7e7      	b.n	10001964 <log_process_thread_func+0x58>
10001994:	20000a6c 	.word	0x20000a6c
10001998:	20000a74 	.word	0x20000a74
1000199c:	200004a8 	.word	0x200004a8
100019a0:	10005cd8 	.word	0x10005cd8
100019a4:	10005ce8 	.word	0x10005ce8

100019a8 <z_log_msg_post_finalize>:
{
100019a8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
100019aa:	4815      	ldr	r0, [pc, #84]	; (10001a00 <z_log_msg_post_finalize+0x58>)
100019ac:	f003 f9e6 	bl	10004d7c <atomic_inc>
	if (panic_mode) {
100019b0:	4b14      	ldr	r3, [pc, #80]	; (10001a04 <z_log_msg_post_finalize+0x5c>)
100019b2:	781b      	ldrb	r3, [r3, #0]
100019b4:	2b00      	cmp	r3, #0
100019b6:	d00a      	beq.n	100019ce <z_log_msg_post_finalize+0x26>
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
100019b8:	f3ef 8410 	mrs	r4, PRIMASK
100019bc:	b672      	cpsid	i
100019be:	f7ff ff33 	bl	10001828 <z_impl_log_process>
 */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
100019c2:	2c00      	cmp	r4, #0
100019c4:	d102      	bne.n	100019cc <z_log_msg_post_finalize+0x24>
		return;
	}
	__asm__ volatile(
100019c6:	b662      	cpsie	i
100019c8:	f3bf 8f6f 	isb	sy
}
100019cc:	bd13      	pop	{r0, r1, r4, pc}
	} else if (proc_tid != NULL) {
100019ce:	4b0e      	ldr	r3, [pc, #56]	; (10001a08 <z_log_msg_post_finalize+0x60>)
100019d0:	681b      	ldr	r3, [r3, #0]
100019d2:	2b00      	cmp	r3, #0
100019d4:	d0fa      	beq.n	100019cc <z_log_msg_post_finalize+0x24>
		if (cnt == 0) {
100019d6:	2800      	cmp	r0, #0
100019d8:	d109      	bne.n	100019ee <z_log_msg_post_finalize+0x46>
	z_impl_k_timer_start(timer, duration, period);
100019da:	2200      	movs	r2, #0
100019dc:	2300      	movs	r3, #0
100019de:	480b      	ldr	r0, [pc, #44]	; (10001a0c <z_log_msg_post_finalize+0x64>)
100019e0:	9200      	str	r2, [sp, #0]
100019e2:	9301      	str	r3, [sp, #4]
100019e4:	2300      	movs	r3, #0
100019e6:	4a0a      	ldr	r2, [pc, #40]	; (10001a10 <z_log_msg_post_finalize+0x68>)
100019e8:	f002 fd32 	bl	10004450 <z_impl_k_timer_start>
100019ec:	e7ee      	b.n	100019cc <z_log_msg_post_finalize+0x24>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
100019ee:	280a      	cmp	r0, #10
100019f0:	d1ec      	bne.n	100019cc <z_log_msg_post_finalize+0x24>
	z_impl_k_timer_stop(timer);
100019f2:	4806      	ldr	r0, [pc, #24]	; (10001a0c <z_log_msg_post_finalize+0x64>)
100019f4:	f004 f818 	bl	10005a28 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
100019f8:	4806      	ldr	r0, [pc, #24]	; (10001a14 <z_log_msg_post_finalize+0x6c>)
100019fa:	f001 fff5 	bl	100039e8 <z_impl_k_sem_give>
}
100019fe:	e7e5      	b.n	100019cc <z_log_msg_post_finalize+0x24>
10001a00:	20000a74 	.word	0x20000a74
10001a04:	20000b61 	.word	0x20000b61
10001a08:	20000a6c 	.word	0x20000a6c
10001a0c:	20000930 	.word	0x20000930
10001a10:	00002710 	.word	0x00002710
10001a14:	200004a8 	.word	0x200004a8

10001a18 <z_log_msg_commit>:
{
10001a18:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
10001a1a:	4b06      	ldr	r3, [pc, #24]	; (10001a34 <z_log_msg_commit+0x1c>)
{
10001a1c:	0004      	movs	r4, r0
	msg->hdr.timestamp = timestamp_func();
10001a1e:	681b      	ldr	r3, [r3, #0]
10001a20:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
10001a22:	0021      	movs	r1, r4
	msg->hdr.timestamp = timestamp_func();
10001a24:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
10001a26:	4804      	ldr	r0, [pc, #16]	; (10001a38 <z_log_msg_commit+0x20>)
10001a28:	f003 f8e0 	bl	10004bec <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
10001a2c:	f7ff ffbc 	bl	100019a8 <z_log_msg_post_finalize>
}
10001a30:	bd10      	pop	{r4, pc}
10001a32:	46c0      	nop			; (mov r8, r8)
10001a34:	20000004 	.word	0x20000004
10001a38:	20000458 	.word	0x20000458

10001a3c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10001a3c:	4b04      	ldr	r3, [pc, #16]	; (10001a50 <log_source_name_get+0x14>)
10001a3e:	4a05      	ldr	r2, [pc, #20]	; (10001a54 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10001a40:	2000      	movs	r0, #0
10001a42:	1a9b      	subs	r3, r3, r2
10001a44:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10001a46:	4299      	cmp	r1, r3
10001a48:	d201      	bcs.n	10001a4e <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10001a4a:	00c9      	lsls	r1, r1, #3
10001a4c:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10001a4e:	4770      	bx	lr
10001a50:	10005cd8 	.word	0x10005cd8
10001a54:	10005c80 	.word	0x10005c80

10001a58 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10001a58:	4b08      	ldr	r3, [pc, #32]	; (10001a7c <log_backend_enable+0x24>)
{
10001a5a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10001a5c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10001a5e:	6844      	ldr	r4, [r0, #4]
10001a60:	111b      	asrs	r3, r3, #4
10001a62:	3301      	adds	r3, #1
10001a64:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10001a66:	6843      	ldr	r3, [r0, #4]
10001a68:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10001a6a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10001a6c:	6843      	ldr	r3, [r0, #4]
10001a6e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10001a70:	6843      	ldr	r3, [r0, #4]
10001a72:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10001a74:	f7ff fe48 	bl	10001708 <z_log_notify_backend_enabled>
}
10001a78:	bd10      	pop	{r4, pc}
10001a7a:	46c0      	nop			; (mov r8, r8)
10001a7c:	10005cd8 	.word	0x10005cd8

10001a80 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
10001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a82:	b091      	sub	sp, #68	; 0x44
10001a84:	af04      	add	r7, sp, #16
10001a86:	603b      	str	r3, [r7, #0]
10001a88:	030b      	lsls	r3, r1, #12
10001a8a:	0d5b      	lsrs	r3, r3, #21

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
10001a8c:	000d      	movs	r5, r1
{
10001a8e:	6078      	str	r0, [r7, #4]
10001a90:	617a      	str	r2, [r7, #20]
10001a92:	613b      	str	r3, [r7, #16]
	struct log_msg_desc out_desc = desc;
10001a94:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
10001a96:	2b00      	cmp	r3, #0
10001a98:	d100      	bne.n	10001a9c <z_impl_z_log_msg_static_create+0x1c>
10001a9a:	e073      	b.n	10001b84 <z_impl_z_log_msg_static_create+0x104>
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
10001a9c:	60bb      	str	r3, [r7, #8]
	struct z_cbprintf_buf_desc buf_desc = {
10001a9e:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
10001aa0:	2304      	movs	r3, #4
	struct z_cbprintf_buf_desc buf_desc = {
10001aa2:	627e      	str	r6, [r7, #36]	; 0x24
10001aa4:	62be      	str	r6, [r7, #40]	; 0x28
10001aa6:	62fe      	str	r6, [r7, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
10001aa8:	9302      	str	r3, [sp, #8]
10001aaa:	3318      	adds	r3, #24
10001aac:	18fb      	adds	r3, r7, r3
10001aae:	9301      	str	r3, [sp, #4]
10001ab0:	230a      	movs	r3, #10
10001ab2:	2218      	movs	r2, #24
10001ab4:	9300      	str	r3, [sp, #0]
10001ab6:	3302      	adds	r3, #2
10001ab8:	189b      	adds	r3, r3, r2
10001aba:	19db      	adds	r3, r3, r7
10001abc:	0032      	movs	r2, r6
10001abe:	68b9      	ldr	r1, [r7, #8]
10001ac0:	6978      	ldr	r0, [r7, #20]
10001ac2:	f7fe ffb5 	bl	10000a30 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
10001ac6:	2380      	movs	r3, #128	; 0x80
10001ac8:	60f8      	str	r0, [r7, #12]
10001aca:	011b      	lsls	r3, r3, #4
10001acc:	4298      	cmp	r0, r3
10001ace:	d324      	bcc.n	10001b1a <z_impl_z_log_msg_static_create+0x9a>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
10001ad0:	697b      	ldr	r3, [r7, #20]
10001ad2:	466c      	mov	r4, sp
10001ad4:	791a      	ldrb	r2, [r3, #4]
10001ad6:	795b      	ldrb	r3, [r3, #5]
10001ad8:	b08a      	sub	sp, #40	; 0x28
10001ada:	021b      	lsls	r3, r3, #8
10001adc:	4313      	orrs	r3, r2
10001ade:	697a      	ldr	r2, [r7, #20]
10001ae0:	7992      	ldrb	r2, [r2, #6]
10001ae2:	0412      	lsls	r2, r2, #16
10001ae4:	431a      	orrs	r2, r3
10001ae6:	697b      	ldr	r3, [r7, #20]
10001ae8:	79db      	ldrb	r3, [r3, #7]
10001aea:	061b      	lsls	r3, r3, #24
10001aec:	4313      	orrs	r3, r2
10001aee:	aa04      	add	r2, sp, #16
10001af0:	6193      	str	r3, [r2, #24]
10001af2:	4b29      	ldr	r3, [pc, #164]	; (10001b98 <z_impl_z_log_msg_static_create+0x118>)
10001af4:	4929      	ldr	r1, [pc, #164]	; (10001b9c <z_impl_z_log_msg_static_create+0x11c>)
10001af6:	61d3      	str	r3, [r2, #28]
10001af8:	2380      	movs	r3, #128	; 0x80
10001afa:	009b      	lsls	r3, r3, #2
10001afc:	8413      	strh	r3, [r2, #32]
10001afe:	4b28      	ldr	r3, [pc, #160]	; (10001ba0 <z_impl_z_log_msg_static_create+0x120>)
10001b00:	6151      	str	r1, [r2, #20]
10001b02:	6113      	str	r3, [r2, #16]
10001b04:	2192      	movs	r1, #146	; 0x92
10001b06:	0033      	movs	r3, r6
10001b08:	4826      	ldr	r0, [pc, #152]	; (10001ba4 <z_impl_z_log_msg_static_create+0x124>)
10001b0a:	3210      	adds	r2, #16
10001b0c:	0189      	lsls	r1, r1, #6
10001b0e:	f7ff ffb7 	bl	10001a80 <z_impl_z_log_msg_static_create>
10001b12:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
10001b14:	46bd      	mov	sp, r7
10001b16:	b00d      	add	sp, #52	; 0x34
10001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		out_desc.package_len = len;
10001b1a:	68fb      	ldr	r3, [r7, #12]
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
10001b1c:	3417      	adds	r4, #23
10001b1e:	055b      	lsls	r3, r3, #21
10001b20:	0d5a      	lsrs	r2, r3, #21
10001b22:	613a      	str	r2, [r7, #16]
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
10001b24:	4a20      	ldr	r2, [pc, #128]	; (10001ba8 <z_impl_z_log_msg_static_create+0x128>)
10001b26:	0b1b      	lsrs	r3, r3, #12
10001b28:	4015      	ands	r5, r2
10001b2a:	431d      	orrs	r5, r3
10001b2c:	68fb      	ldr	r3, [r7, #12]
10001b2e:	18e0      	adds	r0, r4, r3
10001b30:	2307      	movs	r3, #7
10001b32:	4398      	bics	r0, r3
10001b34:	3003      	adds	r0, #3
10001b36:	0880      	lsrs	r0, r0, #2
10001b38:	f7ff fe50 	bl	100017dc <z_log_msg_alloc>
10001b3c:	1e04      	subs	r4, r0, #0
		if (msg) {
10001b3e:	d015      	beq.n	10001b6c <z_impl_z_log_msg_static_create+0xec>
						    msg->data, out_desc.package_len,
10001b40:	0003      	movs	r3, r0
10001b42:	3310      	adds	r3, #16
	struct z_cbprintf_buf_desc buf_desc = {
10001b44:	627b      	str	r3, [r7, #36]	; 0x24
10001b46:	68fb      	ldr	r3, [r7, #12]
10001b48:	62fe      	str	r6, [r7, #44]	; 0x2c
10001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	return cbprintf_package_convert(in_packaged, in_len,
10001b4c:	2304      	movs	r3, #4
10001b4e:	9302      	str	r3, [sp, #8]
10001b50:	3318      	adds	r3, #24
10001b52:	18fb      	adds	r3, r7, r3
10001b54:	9301      	str	r3, [sp, #4]
10001b56:	230a      	movs	r3, #10
10001b58:	2118      	movs	r1, #24
10001b5a:	9300      	str	r3, [sp, #0]
10001b5c:	3302      	adds	r3, #2
10001b5e:	185b      	adds	r3, r3, r1
10001b60:	4a12      	ldr	r2, [pc, #72]	; (10001bac <z_impl_z_log_msg_static_create+0x12c>)
10001b62:	68b9      	ldr	r1, [r7, #8]
10001b64:	6978      	ldr	r0, [r7, #20]
10001b66:	19db      	adds	r3, r3, r7
10001b68:	f7fe ff62 	bl	10000a30 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
10001b6c:	693b      	ldr	r3, [r7, #16]
10001b6e:	4a0e      	ldr	r2, [pc, #56]	; (10001ba8 <z_impl_z_log_msg_static_create+0x128>)
10001b70:	025b      	lsls	r3, r3, #9
10001b72:	4015      	ands	r5, r2
10001b74:	431d      	orrs	r5, r3
10001b76:	002a      	movs	r2, r5
10001b78:	0020      	movs	r0, r4
10001b7a:	683b      	ldr	r3, [r7, #0]
10001b7c:	6879      	ldr	r1, [r7, #4]
10001b7e:	f003 f935 	bl	10004dec <z_log_msg_finalize>
10001b82:	e7c7      	b.n	10001b14 <z_impl_z_log_msg_static_create+0x94>
10001b84:	0020      	movs	r0, r4
10001b86:	2307      	movs	r3, #7
10001b88:	3017      	adds	r0, #23
10001b8a:	4398      	bics	r0, r3
10001b8c:	3003      	adds	r0, #3
10001b8e:	0880      	lsrs	r0, r0, #2
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
10001b90:	f7ff fe24 	bl	100017dc <z_log_msg_alloc>
10001b94:	0004      	movs	r4, r0
10001b96:	e7e9      	b.n	10001b6c <z_impl_z_log_msg_static_create+0xec>
10001b98:	000007ff 	.word	0x000007ff
10001b9c:	10009647 	.word	0x10009647
10001ba0:	01000004 	.word	0x01000004
10001ba4:	10005ca8 	.word	0x10005ca8
10001ba8:	fff001ff 	.word	0xfff001ff
10001bac:	10004dbf 	.word	0x10004dbf

10001bb0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10001bb2:	2600      	movs	r6, #0
{
10001bb4:	b087      	sub	sp, #28
10001bb6:	9303      	str	r3, [sp, #12]
	if (fmt) {
10001bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
10001bba:	0004      	movs	r4, r0
10001bbc:	000f      	movs	r7, r1
10001bbe:	0015      	movs	r5, r2
	if (fmt) {
10001bc0:	42b3      	cmp	r3, r6
10001bc2:	d009      	beq.n	10001bd8 <z_impl_z_log_msg_runtime_vcreate+0x28>
		va_copy(ap2, ap);
10001bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001bc6:	0030      	movs	r0, r6
		va_copy(ap2, ap);
10001bc8:	9305      	str	r3, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001bca:	9300      	str	r3, [sp, #0]
10001bcc:	2110      	movs	r1, #16
10001bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10001bd2:	f7fe fd45 	bl	10000660 <cbvprintf_package>
10001bd6:	0006      	movs	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10001bd8:	2307      	movs	r3, #7
10001bda:	0022      	movs	r2, r4
10001bdc:	401d      	ands	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	struct log_msg_desc desc =
10001be0:	401a      	ands	r2, r3
10001be2:	4913      	ldr	r1, [pc, #76]	; (10001c30 <z_impl_z_log_msg_runtime_vcreate+0x80>)
10001be4:	00d2      	lsls	r2, r2, #3
10001be6:	01ad      	lsls	r5, r5, #6
10001be8:	4315      	orrs	r5, r2
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bea:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10001bec:	0272      	lsls	r2, r6, #9
10001bee:	400a      	ands	r2, r1
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bf0:	19a0      	adds	r0, r4, r6
	struct log_msg_desc desc =
10001bf2:	4315      	orrs	r5, r2
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bf4:	4398      	bics	r0, r3
	struct log_msg_desc desc =
10001bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bf8:	3003      	adds	r0, #3
	struct log_msg_desc desc =
10001bfa:	0512      	lsls	r2, r2, #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001bfc:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
10001bfe:	4315      	orrs	r5, r2
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
10001c00:	f7ff fdec 	bl	100017dc <z_log_msg_alloc>
10001c04:	1e04      	subs	r4, r0, #0
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
10001c06:	d00a      	beq.n	10001c1e <z_impl_z_log_msg_runtime_vcreate+0x6e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
10001c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001c0a:	2b00      	cmp	r3, #0
10001c0c:	d007      	beq.n	10001c1e <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
10001c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10001c10:	0031      	movs	r1, r6
10001c12:	9300      	str	r3, [sp, #0]
10001c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10001c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001c18:	3010      	adds	r0, #16
10001c1a:	f7fe fd21 	bl	10000660 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
10001c1e:	002a      	movs	r2, r5
10001c20:	0039      	movs	r1, r7
10001c22:	0020      	movs	r0, r4
10001c24:	9b03      	ldr	r3, [sp, #12]
10001c26:	f003 f8e1 	bl	10004dec <z_log_msg_finalize>
	}
}
10001c2a:	b007      	add	sp, #28
10001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001c2e:	46c0      	nop			; (mov r8, r8)
10001c30:	000ffe00 	.word	0x000ffe00

10001c34 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
10001c34:	b40e      	push	{r1, r2, r3}
10001c36:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001c38:	4c05      	ldr	r4, [pc, #20]	; (10001c50 <print_formatted+0x1c>)
{
10001c3a:	ab05      	add	r3, sp, #20
10001c3c:	cb04      	ldmia	r3!, {r2}
10001c3e:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001c40:	0020      	movs	r0, r4
	va_start(args, fmt);
10001c42:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
10001c44:	f003 f8f9 	bl	10004e3a <cbvprintf>
	va_end(args);

	return length;
}
10001c48:	bc1e      	pop	{r1, r2, r3, r4}
10001c4a:	bc08      	pop	{r3}
10001c4c:	b003      	add	sp, #12
10001c4e:	4718      	bx	r3
10001c50:	10004e5f 	.word	0x10004e5f

10001c54 <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10001c54:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10001c56:	06cb      	lsls	r3, r1, #27
10001c58:	d404      	bmi.n	10001c64 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
10001c5a:	0689      	lsls	r1, r1, #26
10001c5c:	d503      	bpl.n	10001c66 <newline_print+0x12>
		print_formatted(ctx, "\n");
10001c5e:	4903      	ldr	r1, [pc, #12]	; (10001c6c <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10001c60:	f7ff ffe8 	bl	10001c34 <print_formatted>
	}
}
10001c64:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10001c66:	4902      	ldr	r1, [pc, #8]	; (10001c70 <newline_print+0x1c>)
10001c68:	e7fa      	b.n	10001c60 <newline_print+0xc>
10001c6a:	46c0      	nop			; (mov r8, r8)
10001c6c:	10009687 	.word	0x10009687
10001c70:	10009686 	.word	0x10009686

10001c74 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c76:	b08f      	sub	sp, #60	; 0x3c
10001c78:	9306      	str	r3, [sp, #24]
10001c7a:	ab14      	add	r3, sp, #80	; 0x50
10001c7c:	781b      	ldrb	r3, [r3, #0]
10001c7e:	0007      	movs	r7, r0
10001c80:	000c      	movs	r4, r1
10001c82:	9208      	str	r2, [sp, #32]
10001c84:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10001c86:	2b00      	cmp	r3, #0
10001c88:	d100      	bne.n	10001c8c <log_output_process+0x18>
10001c8a:	e09c      	b.n	10001dc6 <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10001c8c:	2502      	movs	r5, #2
10001c8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001c90:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10001c92:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001c94:	2301      	movs	r3, #1
10001c96:	401a      	ands	r2, r3
10001c98:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10001c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
10001c9c:	3307      	adds	r3, #7
10001c9e:	401a      	ands	r2, r3
10001ca0:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10001ca2:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10001ca4:	f003 f889 	bl	10004dba <z_log_get_tag>
10001ca8:	0002      	movs	r2, r0
	if (tag) {
10001caa:	42b0      	cmp	r0, r6
10001cac:	d004      	beq.n	10001cb8 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10001cae:	0038      	movs	r0, r7
10001cb0:	4983      	ldr	r1, [pc, #524]	; (10001ec0 <log_output_process+0x24c>)
10001cb2:	f7ff ffbf 	bl	10001c34 <print_formatted>
10001cb6:	0006      	movs	r6, r0
	if (stamp) {
10001cb8:	2d00      	cmp	r5, #0
10001cba:	d009      	beq.n	10001cd0 <log_output_process+0x5c>
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
10001cbc:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10001cbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
10001cc0:	421a      	tst	r2, r3
10001cc2:	d144      	bne.n	10001d4e <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10001cc4:	0022      	movs	r2, r4
10001cc6:	0038      	movs	r0, r7
10001cc8:	497e      	ldr	r1, [pc, #504]	; (10001ec4 <log_output_process+0x250>)
10001cca:	f7ff ffb3 	bl	10001c34 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10001cce:	1836      	adds	r6, r6, r0
	if (color) {
10001cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001cd2:	2b00      	cmp	r3, #0
10001cd4:	d00a      	beq.n	10001cec <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10001cd6:	9a05      	ldr	r2, [sp, #20]
10001cd8:	4b7b      	ldr	r3, [pc, #492]	; (10001ec8 <log_output_process+0x254>)
10001cda:	0092      	lsls	r2, r2, #2
10001cdc:	58d2      	ldr	r2, [r2, r3]
10001cde:	2a00      	cmp	r2, #0
10001ce0:	d100      	bne.n	10001ce4 <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10001ce2:	4a7a      	ldr	r2, [pc, #488]	; (10001ecc <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10001ce4:	0038      	movs	r0, r7
10001ce6:	497a      	ldr	r1, [pc, #488]	; (10001ed0 <log_output_process+0x25c>)
10001ce8:	f7ff ffa4 	bl	10001c34 <print_formatted>
	int total = 0;
10001cec:	2400      	movs	r4, #0
	if (level_on) {
10001cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10001cf0:	42a3      	cmp	r3, r4
10001cf2:	d008      	beq.n	10001d06 <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10001cf4:	9a05      	ldr	r2, [sp, #20]
10001cf6:	4b77      	ldr	r3, [pc, #476]	; (10001ed4 <log_output_process+0x260>)
10001cf8:	0092      	lsls	r2, r2, #2
10001cfa:	0038      	movs	r0, r7
10001cfc:	4976      	ldr	r1, [pc, #472]	; (10001ed8 <log_output_process+0x264>)
10001cfe:	58d2      	ldr	r2, [r2, r3]
10001d00:	f7ff ff98 	bl	10001c34 <print_formatted>
10001d04:	0004      	movs	r4, r0
	if (domain) {
10001d06:	9b08      	ldr	r3, [sp, #32]
10001d08:	2b00      	cmp	r3, #0
10001d0a:	d005      	beq.n	10001d18 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10001d0c:	001a      	movs	r2, r3
10001d0e:	0038      	movs	r0, r7
10001d10:	4972      	ldr	r1, [pc, #456]	; (10001edc <log_output_process+0x268>)
10001d12:	f7ff ff8f 	bl	10001c34 <print_formatted>
10001d16:	1824      	adds	r4, r4, r0
	if (source) {
10001d18:	9b06      	ldr	r3, [sp, #24]
10001d1a:	2b00      	cmp	r3, #0
10001d1c:	d005      	beq.n	10001d2a <log_output_process+0xb6>
		total += print_formatted(output,
10001d1e:	001a      	movs	r2, r3
10001d20:	0038      	movs	r0, r7
10001d22:	496f      	ldr	r1, [pc, #444]	; (10001ee0 <log_output_process+0x26c>)
10001d24:	f7ff ff86 	bl	10001c34 <print_formatted>
10001d28:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10001d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10001d2c:	486d      	ldr	r0, [pc, #436]	; (10001ee4 <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10001d2e:	19a4      	adds	r4, r4, r6
	if (package) {
10001d30:	2b00      	cmp	r3, #0
10001d32:	d000      	beq.n	10001d36 <log_output_process+0xc2>
10001d34:	e09b      	b.n	10001e6e <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10001d36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10001d38:	2b00      	cmp	r3, #0
10001d3a:	d151      	bne.n	10001de0 <log_output_process+0x16c>
	if (color) {
10001d3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
10001d3e:	07db      	lsls	r3, r3, #31
10001d40:	d500      	bpl.n	10001d44 <log_output_process+0xd0>
10001d42:	e0b7      	b.n	10001eb4 <log_output_process+0x240>
	newline_print(output, flags);
10001d44:	0038      	movs	r0, r7
10001d46:	9918      	ldr	r1, [sp, #96]	; 0x60
10001d48:	f7ff ff84 	bl	10001c54 <newline_print>
}
10001d4c:	e09b      	b.n	10001e86 <log_output_process+0x212>
		length = 0;
10001d4e:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10001d50:	4b65      	ldr	r3, [pc, #404]	; (10001ee8 <log_output_process+0x274>)
10001d52:	681d      	ldr	r5, [r3, #0]
10001d54:	4285      	cmp	r5, r0
10001d56:	d0ba      	beq.n	10001cce <log_output_process+0x5a>
		timestamp /= timestamp_div;
10001d58:	4b64      	ldr	r3, [pc, #400]	; (10001eec <log_output_process+0x278>)
10001d5a:	0020      	movs	r0, r4
10001d5c:	6819      	ldr	r1, [r3, #0]
10001d5e:	f7fe fa37 	bl	100001d0 <__udivsi3>
10001d62:	0029      	movs	r1, r5
10001d64:	f7fe fa70 	bl	10000248 <__aeabi_uidivmod>
10001d68:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10001d6a:	21e1      	movs	r1, #225	; 0xe1
10001d6c:	0109      	lsls	r1, r1, #4
10001d6e:	9007      	str	r0, [sp, #28]
10001d70:	f7fe fa6a 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10001d74:	20fa      	movs	r0, #250	; 0xfa
10001d76:	0080      	lsls	r0, r0, #2
10001d78:	9109      	str	r1, [sp, #36]	; 0x24
10001d7a:	4360      	muls	r0, r4
10001d7c:	0029      	movs	r1, r5
10001d7e:	f7fe fa63 	bl	10000248 <__aeabi_uidivmod>
10001d82:	000c      	movs	r4, r1
				length = print_formatted(output,
10001d84:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10001d86:	213c      	movs	r1, #60	; 0x3c
10001d88:	9809      	ldr	r0, [sp, #36]	; 0x24
10001d8a:	f7fe fa21 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10001d8e:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10001d90:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10001d92:	0109      	lsls	r1, r1, #4
10001d94:	9807      	ldr	r0, [sp, #28]
10001d96:	f7fe fa1b 	bl	100001d0 <__udivsi3>
10001d9a:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10001d9c:	20fa      	movs	r0, #250	; 0xfa
10001d9e:	0080      	lsls	r0, r0, #2
10001da0:	0029      	movs	r1, r5
10001da2:	4360      	muls	r0, r4
10001da4:	f7fe fa14 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10001da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001daa:	9002      	str	r0, [sp, #8]
10001dac:	213c      	movs	r1, #60	; 0x3c
10001dae:	9809      	ldr	r0, [sp, #36]	; 0x24
10001db0:	9301      	str	r3, [sp, #4]
10001db2:	f7fe fa49 	bl	10000248 <__aeabi_uidivmod>
10001db6:	0038      	movs	r0, r7
10001db8:	9100      	str	r1, [sp, #0]
10001dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001dbc:	9a07      	ldr	r2, [sp, #28]
10001dbe:	494c      	ldr	r1, [pc, #304]	; (10001ef0 <log_output_process+0x27c>)
10001dc0:	f7ff ff38 	bl	10001c34 <print_formatted>
10001dc4:	e783      	b.n	10001cce <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10001dc6:	9b06      	ldr	r3, [sp, #24]
10001dc8:	484a      	ldr	r0, [pc, #296]	; (10001ef4 <log_output_process+0x280>)
10001dca:	2b01      	cmp	r3, #1
10001dcc:	d100      	bne.n	10001dd0 <log_output_process+0x15c>
10001dce:	4845      	ldr	r0, [pc, #276]	; (10001ee4 <log_output_process+0x270>)
	if (package) {
10001dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10001dd2:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10001dd4:	2b00      	cmp	r3, #0
10001dd6:	d14a      	bne.n	10001e6e <log_output_process+0x1fa>
	if (data_len) {
10001dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10001dda:	2b00      	cmp	r3, #0
10001ddc:	d053      	beq.n	10001e86 <log_output_process+0x212>
		prefix_offset = 0;
10001dde:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10001de0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10001de2:	2e10      	cmp	r6, #16
10001de4:	d900      	bls.n	10001de8 <log_output_process+0x174>
10001de6:	2610      	movs	r6, #16
	newline_print(output, flags);
10001de8:	0038      	movs	r0, r7
10001dea:	9918      	ldr	r1, [sp, #96]	; 0x60
10001dec:	f7ff ff32 	bl	10001c54 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10001df0:	2500      	movs	r5, #0
10001df2:	42ac      	cmp	r4, r5
10001df4:	dc4c      	bgt.n	10001e90 <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
10001df6:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001df8:	0038      	movs	r0, r7
10001dfa:	781a      	ldrb	r2, [r3, #0]
10001dfc:	493e      	ldr	r1, [pc, #248]	; (10001ef8 <log_output_process+0x284>)
10001dfe:	f7ff ff19 	bl	10001c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001e02:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
10001e04:	2307      	movs	r3, #7
10001e06:	421d      	tst	r5, r3
10001e08:	d103      	bne.n	10001e12 <log_output_process+0x19e>
			print_formatted(output, " ");
10001e0a:	0038      	movs	r0, r7
10001e0c:	493b      	ldr	r1, [pc, #236]	; (10001efc <log_output_process+0x288>)
10001e0e:	f7ff ff11 	bl	10001c34 <print_formatted>
		if (i < length) {
10001e12:	42ae      	cmp	r6, r5
10001e14:	d942      	bls.n	10001e9c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
10001e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001e18:	0038      	movs	r0, r7
10001e1a:	5d5a      	ldrb	r2, [r3, r5]
10001e1c:	4936      	ldr	r1, [pc, #216]	; (10001ef8 <log_output_process+0x284>)
10001e1e:	f7ff ff09 	bl	10001c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001e22:	3501      	adds	r5, #1
10001e24:	2d10      	cmp	r5, #16
10001e26:	d1ed      	bne.n	10001e04 <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001e28:	2500      	movs	r5, #0
	print_formatted(output, "|");
10001e2a:	0038      	movs	r0, r7
10001e2c:	4934      	ldr	r1, [pc, #208]	; (10001f00 <log_output_process+0x28c>)
10001e2e:	f7ff ff01 	bl	10001c34 <print_formatted>
		if (i < length) {
10001e32:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
10001e34:	9a16      	ldr	r2, [sp, #88]	; 0x58
10001e36:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
10001e38:	0013      	movs	r3, r2
10001e3a:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
10001e3c:	2b5e      	cmp	r3, #94	; 0x5e
10001e3e:	d900      	bls.n	10001e42 <log_output_process+0x1ce>
10001e40:	222e      	movs	r2, #46	; 0x2e
10001e42:	0038      	movs	r0, r7
10001e44:	492f      	ldr	r1, [pc, #188]	; (10001f04 <log_output_process+0x290>)
10001e46:	f7ff fef5 	bl	10001c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10001e4a:	3501      	adds	r5, #1
10001e4c:	2d10      	cmp	r5, #16
10001e4e:	d02a      	beq.n	10001ea6 <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10001e50:	2307      	movs	r3, #7
10001e52:	421d      	tst	r5, r3
10001e54:	d103      	bne.n	10001e5e <log_output_process+0x1ea>
			print_formatted(output, " ");
10001e56:	0038      	movs	r0, r7
10001e58:	4928      	ldr	r1, [pc, #160]	; (10001efc <log_output_process+0x288>)
10001e5a:	f7ff feeb 	bl	10001c34 <print_formatted>
		if (i < length) {
10001e5e:	002b      	movs	r3, r5
10001e60:	42ae      	cmp	r6, r5
10001e62:	d8e7      	bhi.n	10001e34 <log_output_process+0x1c0>
			print_formatted(output, " ");
10001e64:	0038      	movs	r0, r7
10001e66:	4925      	ldr	r1, [pc, #148]	; (10001efc <log_output_process+0x288>)
10001e68:	f7ff fee4 	bl	10001c34 <print_formatted>
10001e6c:	e7ed      	b.n	10001e4a <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10001e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
10001e70:	003a      	movs	r2, r7
10001e72:	4925      	ldr	r1, [pc, #148]	; (10001f08 <log_output_process+0x294>)
10001e74:	f002 fb45 	bl	10004502 <cbpprintf_external>
	if (data_len) {
10001e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10001e7a:	2b00      	cmp	r3, #0
10001e7c:	d1b0      	bne.n	10001de0 <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10001e7e:	9b05      	ldr	r3, [sp, #20]
10001e80:	2b00      	cmp	r3, #0
10001e82:	d000      	beq.n	10001e86 <log_output_process+0x212>
10001e84:	e75a      	b.n	10001d3c <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10001e86:	0038      	movs	r0, r7
10001e88:	f002 ffdd 	bl	10004e46 <log_output_flush>
}
10001e8c:	b00f      	add	sp, #60	; 0x3c
10001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10001e90:	0038      	movs	r0, r7
10001e92:	491a      	ldr	r1, [pc, #104]	; (10001efc <log_output_process+0x288>)
10001e94:	f7ff fece 	bl	10001c34 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10001e98:	3501      	adds	r5, #1
10001e9a:	e7aa      	b.n	10001df2 <log_output_process+0x17e>
			print_formatted(output, "   ");
10001e9c:	0038      	movs	r0, r7
10001e9e:	491b      	ldr	r1, [pc, #108]	; (10001f0c <log_output_process+0x298>)
10001ea0:	f7ff fec8 	bl	10001c34 <print_formatted>
10001ea4:	e7bd      	b.n	10001e22 <log_output_process+0x1ae>
		data += length;
10001ea6:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001ea8:	199b      	adds	r3, r3, r6
10001eaa:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10001eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10001eae:	1b9b      	subs	r3, r3, r6
10001eb0:	9317      	str	r3, [sp, #92]	; 0x5c
10001eb2:	e7e2      	b.n	10001e7a <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10001eb4:	0038      	movs	r0, r7
10001eb6:	4a05      	ldr	r2, [pc, #20]	; (10001ecc <log_output_process+0x258>)
10001eb8:	4905      	ldr	r1, [pc, #20]	; (10001ed0 <log_output_process+0x25c>)
10001eba:	f7ff febb 	bl	10001c34 <print_formatted>
}
10001ebe:	e741      	b.n	10001d44 <log_output_process+0xd0>
10001ec0:	1000968e 	.word	0x1000968e
10001ec4:	10009692 	.word	0x10009692
10001ec8:	10005d38 	.word	0x10005d38
10001ecc:	10009689 	.word	0x10009689
10001ed0:	100096b7 	.word	0x100096b7
10001ed4:	10005d4c 	.word	0x10005d4c
10001ed8:	100096ba 	.word	0x100096ba
10001edc:	100096c0 	.word	0x100096c0
10001ee0:	100096c4 	.word	0x100096c4
10001ee4:	10004e5f 	.word	0x10004e5f
10001ee8:	20000a80 	.word	0x20000a80
10001eec:	20000a7c 	.word	0x20000a7c
10001ef0:	1000969b 	.word	0x1000969b
10001ef4:	10004e85 	.word	0x10004e85
10001ef8:	100096c9 	.word	0x100096c9
10001efc:	100096d1 	.word	0x100096d1
10001f00:	100096d3 	.word	0x100096d3
10001f04:	100096d5 	.word	0x100096d5
10001f08:	10004e3b 	.word	0x10004e3b
10001f0c:	100096cf 	.word	0x100096cf

10001f10 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
10001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
10001f12:	880b      	ldrh	r3, [r1, #0]
10001f14:	b089      	sub	sp, #36	; 0x24
10001f16:	05db      	lsls	r3, r3, #23
10001f18:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
10001f1a:	684b      	ldr	r3, [r1, #4]
10001f1c:	000f      	movs	r7, r1
10001f1e:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
10001f20:	688e      	ldr	r6, [r1, #8]
10001f22:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
10001f24:	2b00      	cmp	r3, #0
10001f26:	d00c      	beq.n	10001f42 <log_output_msg_process+0x32>
10001f28:	4a13      	ldr	r2, [pc, #76]	; (10001f78 <log_output_msg_process+0x68>)
10001f2a:	1a9a      	subs	r2, r3, r2
10001f2c:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
10001f2e:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
10001f30:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
10001f32:	0412      	lsls	r2, r2, #16
10001f34:	d405      	bmi.n	10001f42 <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
10001f36:	7838      	ldrb	r0, [r7, #0]
10001f38:	0680      	lsls	r0, r0, #26
10001f3a:	0f40      	lsrs	r0, r0, #29
10001f3c:	f7ff fd7e 	bl	10001a3c <log_source_name_get>
10001f40:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
10001f42:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
10001f44:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
10001f46:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
10001f48:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
10001f4a:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
10001f4c:	0d49      	lsrs	r1, r1, #21
	return msg->data;
10001f4e:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
10001f50:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
10001f52:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
10001f54:	1e48      	subs	r0, r1, #1
10001f56:	4181      	sbcs	r1, r0
10001f58:	4249      	negs	r1, r1
10001f5a:	400a      	ands	r2, r1
10001f5c:	4661      	mov	r1, ip
10001f5e:	9201      	str	r2, [sp, #4]
10001f60:	9103      	str	r1, [sp, #12]
10001f62:	2200      	movs	r2, #0
10001f64:	0031      	movs	r1, r6
10001f66:	9807      	ldr	r0, [sp, #28]
10001f68:	9504      	str	r5, [sp, #16]
10001f6a:	9702      	str	r7, [sp, #8]
10001f6c:	9400      	str	r4, [sp, #0]
10001f6e:	f7ff fe81 	bl	10001c74 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
10001f72:	b009      	add	sp, #36	; 0x24
10001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f76:	46c0      	nop			; (mov r8, r8)
10001f78:	10005c80 	.word	0x10005c80

10001f7c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
10001f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
10001f7e:	4a11      	ldr	r2, [pc, #68]	; (10001fc4 <log_output_dropped_process+0x48>)
{
10001f80:	0004      	movs	r4, r0
	cnt = MIN(cnt, 9999);
10001f82:	000b      	movs	r3, r1
	log_output_func_t outf = output->func;
10001f84:	6805      	ldr	r5, [r0, #0]
	cnt = MIN(cnt, 9999);
10001f86:	4291      	cmp	r1, r2
10001f88:	d900      	bls.n	10001f8c <log_output_dropped_process+0x10>
10001f8a:	0013      	movs	r3, r2
	len = snprintk(buf, sizeof(buf), "%d", cnt);
10001f8c:	2105      	movs	r1, #5
10001f8e:	4668      	mov	r0, sp
10001f90:	4a0d      	ldr	r2, [pc, #52]	; (10001fc8 <log_output_dropped_process+0x4c>)
10001f92:	f002 fb31 	bl	100045f8 <snprintk>
10001f96:	0006      	movs	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
10001f98:	6863      	ldr	r3, [r4, #4]
10001f9a:	0028      	movs	r0, r5
10001f9c:	220b      	movs	r2, #11
10001f9e:	490b      	ldr	r1, [pc, #44]	; (10001fcc <log_output_dropped_process+0x50>)
10001fa0:	685b      	ldr	r3, [r3, #4]
10001fa2:	f002 ff3c 	bl	10004e1e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
10001fa6:	6863      	ldr	r3, [r4, #4]
10001fa8:	0032      	movs	r2, r6
10001faa:	0028      	movs	r0, r5
10001fac:	4669      	mov	r1, sp
10001fae:	685b      	ldr	r3, [r3, #4]
10001fb0:	f002 ff35 	bl	10004e1e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
10001fb4:	6863      	ldr	r3, [r4, #4]
10001fb6:	0028      	movs	r0, r5
10001fb8:	221b      	movs	r2, #27
10001fba:	4905      	ldr	r1, [pc, #20]	; (10001fd0 <log_output_dropped_process+0x54>)
10001fbc:	685b      	ldr	r3, [r3, #4]
10001fbe:	f002 ff2e 	bl	10004e1e <buffer_write>
		     output->control_block->ctx);
}
10001fc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
10001fc4:	0000270f 	.word	0x0000270f
10001fc8:	10005f68 	.word	0x10005f68
10001fcc:	100096f4 	.word	0x100096f4
10001fd0:	100096d8 	.word	0x100096d8

10001fd4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
10001fd4:	2301      	movs	r3, #1
{
10001fd6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
10001fd8:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
10001fda:	001c      	movs	r4, r3
	while (frequency > 1000000) {
10001fdc:	4a07      	ldr	r2, [pc, #28]	; (10001ffc <log_output_timestamp_freq_set+0x28>)
10001fde:	4290      	cmp	r0, r2
10001fe0:	d807      	bhi.n	10001ff2 <log_output_timestamp_freq_set+0x1e>
10001fe2:	4a07      	ldr	r2, [pc, #28]	; (10002000 <log_output_timestamp_freq_set+0x2c>)
10001fe4:	2900      	cmp	r1, #0
10001fe6:	d100      	bne.n	10001fea <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
10001fe8:	2301      	movs	r3, #1
	}

	freq = frequency;
}
10001fea:	6013      	str	r3, [r2, #0]
	freq = frequency;
10001fec:	4b05      	ldr	r3, [pc, #20]	; (10002004 <log_output_timestamp_freq_set+0x30>)
10001fee:	6018      	str	r0, [r3, #0]
}
10001ff0:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
10001ff2:	0021      	movs	r1, r4
		frequency /= 2U;
10001ff4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
10001ff6:	005b      	lsls	r3, r3, #1
10001ff8:	e7f1      	b.n	10001fde <log_output_timestamp_freq_set+0xa>
10001ffa:	46c0      	nop			; (mov r8, r8)
10001ffc:	000f4240 	.word	0x000f4240
10002000:	20000a7c 	.word	0x20000a7c
10002004:	20000a80 	.word	0x20000a80

10002008 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
10002008:	4b01      	ldr	r3, [pc, #4]	; (10002010 <format_set+0x8>)
	return 0;
}
1000200a:	2000      	movs	r0, #0
	log_format_current = log_type;
1000200c:	6019      	str	r1, [r3, #0]
}
1000200e:	4770      	bx	lr
10002010:	20000a98 	.word	0x20000a98

10002014 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
10002014:	2201      	movs	r2, #1
{
10002016:	b510      	push	{r4, lr}
	in_panic = true;
10002018:	4b02      	ldr	r3, [pc, #8]	; (10002024 <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
1000201a:	4803      	ldr	r0, [pc, #12]	; (10002028 <panic+0x14>)
1000201c:	701a      	strb	r2, [r3, #0]
1000201e:	f002 ff12 	bl	10004e46 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
10002022:	bd10      	pop	{r4, pc}
10002024:	20000b63 	.word	0x20000b63
10002028:	10005d7c 	.word	0x10005d7c

1000202c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
1000202c:	b510      	push	{r4, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
1000202e:	4802      	ldr	r0, [pc, #8]	; (10002038 <dropped+0xc>)
10002030:	f7ff ffa4 	bl	10001f7c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
10002034:	bd10      	pop	{r4, pc}
10002036:	46c0      	nop			; (mov r8, r8)
10002038:	10005d7c 	.word	0x10005d7c

1000203c <process>:
{
1000203c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
1000203e:	4b05      	ldr	r3, [pc, #20]	; (10002054 <process+0x18>)
{
10002040:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10002042:	6818      	ldr	r0, [r3, #0]
10002044:	f7ff fb4a 	bl	100016dc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
10002048:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
1000204a:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
1000204c:	0021      	movs	r1, r4
1000204e:	4802      	ldr	r0, [pc, #8]	; (10002058 <process+0x1c>)
10002050:	4798      	blx	r3
}
10002052:	bd10      	pop	{r4, pc}
10002054:	20000a98 	.word	0x20000a98
10002058:	10005d7c 	.word	0x10005d7c

1000205c <char_out>:
{
1000205c:	b570      	push	{r4, r5, r6, lr}
1000205e:	000d      	movs	r5, r1
10002060:	0004      	movs	r4, r0
10002062:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
10002064:	42b4      	cmp	r4, r6
10002066:	d101      	bne.n	1000206c <char_out+0x10>
}
10002068:	0028      	movs	r0, r5
1000206a:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
1000206c:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
1000206e:	4803      	ldr	r0, [pc, #12]	; (1000207c <char_out+0x20>)
10002070:	3401      	adds	r4, #1
10002072:	6883      	ldr	r3, [r0, #8]
10002074:	685b      	ldr	r3, [r3, #4]
10002076:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
10002078:	e7f4      	b.n	10002064 <char_out+0x8>
1000207a:	46c0      	nop			; (mov r8, r8)
1000207c:	10005b28 	.word	0x10005b28

10002080 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10002080:	4901      	ldr	r1, [pc, #4]	; (10002088 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10002082:	2210      	movs	r2, #16
	str	r2, [r1]
10002084:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10002086:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10002088:	e000ed10 	.word	0xe000ed10

1000208c <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
1000208c:	f3bf 8f4f 	dsb	sy
10002090:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10002092:	b662      	cpsie	i
	isb
10002094:	f3bf 8f6f 	isb	sy

	bx	lr
10002098:	4770      	bx	lr
1000209a:	46c0      	nop			; (mov r8, r8)

1000209c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
1000209c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000209e:	b085      	sub	sp, #20
100020a0:	af00      	add	r7, sp, #0
100020a2:	1e0c      	subs	r4, r1, #0
100020a4:	6078      	str	r0, [r7, #4]

	if (esf != NULL) {
100020a6:	d04b      	beq.n	10002140 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
100020a8:	466e      	mov	r6, sp
100020aa:	b08a      	sub	sp, #40	; 0x28
100020ac:	6809      	ldr	r1, [r1, #0]
100020ae:	6862      	ldr	r2, [r4, #4]
100020b0:	68a3      	ldr	r3, [r4, #8]
100020b2:	466d      	mov	r5, sp
100020b4:	622b      	str	r3, [r5, #32]
100020b6:	2305      	movs	r3, #5
100020b8:	4825      	ldr	r0, [pc, #148]	; (10002150 <z_arm_fatal_error+0xb4>)
100020ba:	61a9      	str	r1, [r5, #24]
100020bc:	6168      	str	r0, [r5, #20]
100020be:	61ea      	str	r2, [r5, #28]
100020c0:	612b      	str	r3, [r5, #16]
100020c2:	21a1      	movs	r1, #161	; 0xa1
100020c4:	002a      	movs	r2, r5
100020c6:	4823      	ldr	r0, [pc, #140]	; (10002154 <z_arm_fatal_error+0xb8>)
100020c8:	3210      	adds	r2, #16
100020ca:	2300      	movs	r3, #0
100020cc:	0189      	lsls	r1, r1, #6
100020ce:	60ba      	str	r2, [r7, #8]
100020d0:	60f8      	str	r0, [r7, #12]
100020d2:	f7ff fcd5 	bl	10001a80 <z_impl_z_log_msg_static_create>
100020d6:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
100020d8:	68e1      	ldr	r1, [r4, #12]
100020da:	6922      	ldr	r2, [r4, #16]
100020dc:	6963      	ldr	r3, [r4, #20]
100020de:	46ad      	mov	sp, r5
100020e0:	622b      	str	r3, [r5, #32]
100020e2:	2305      	movs	r3, #5
100020e4:	481c      	ldr	r0, [pc, #112]	; (10002158 <z_arm_fatal_error+0xbc>)
100020e6:	61a9      	str	r1, [r5, #24]
100020e8:	6168      	str	r0, [r5, #20]
100020ea:	61ea      	str	r2, [r5, #28]
100020ec:	612b      	str	r3, [r5, #16]
100020ee:	21a1      	movs	r1, #161	; 0xa1
100020f0:	2300      	movs	r3, #0
100020f2:	68ba      	ldr	r2, [r7, #8]
100020f4:	68f8      	ldr	r0, [r7, #12]
100020f6:	0189      	lsls	r1, r1, #6
100020f8:	f7ff fcc2 	bl	10001a80 <z_impl_z_log_msg_static_create>
100020fc:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
100020fe:	b088      	sub	sp, #32
10002100:	69e3      	ldr	r3, [r4, #28]
10002102:	466d      	mov	r5, sp
10002104:	61ab      	str	r3, [r5, #24]
10002106:	2303      	movs	r3, #3
10002108:	4a14      	ldr	r2, [pc, #80]	; (1000215c <z_arm_fatal_error+0xc0>)
1000210a:	612b      	str	r3, [r5, #16]
1000210c:	616a      	str	r2, [r5, #20]
1000210e:	21c2      	movs	r1, #194	; 0xc2
10002110:	002a      	movs	r2, r5
10002112:	2300      	movs	r3, #0
10002114:	3210      	adds	r2, #16
10002116:	68f8      	ldr	r0, [r7, #12]
10002118:	0149      	lsls	r1, r1, #5
1000211a:	60ba      	str	r2, [r7, #8]
1000211c:	f7ff fcb0 	bl	10001a80 <z_impl_z_log_msg_static_create>
10002120:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
10002122:	69a3      	ldr	r3, [r4, #24]
10002124:	46ad      	mov	sp, r5
10002126:	61ab      	str	r3, [r5, #24]
10002128:	2303      	movs	r3, #3
1000212a:	4a0d      	ldr	r2, [pc, #52]	; (10002160 <z_arm_fatal_error+0xc4>)
1000212c:	612b      	str	r3, [r5, #16]
1000212e:	616a      	str	r2, [r5, #20]
10002130:	21c2      	movs	r1, #194	; 0xc2
10002132:	2300      	movs	r3, #0
10002134:	68ba      	ldr	r2, [r7, #8]
10002136:	68f8      	ldr	r0, [r7, #12]
10002138:	0149      	lsls	r1, r1, #5
1000213a:	f7ff fca1 	bl	10001a80 <z_impl_z_log_msg_static_create>
1000213e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10002140:	0021      	movs	r1, r4
10002142:	6878      	ldr	r0, [r7, #4]
10002144:	f001 f99e 	bl	10003484 <z_fatal_error>
}
10002148:	46bd      	mov	sp, r7
1000214a:	b005      	add	sp, #20
1000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000214e:	46c0      	nop			; (mov r8, r8)
10002150:	1000973a 	.word	0x1000973a
10002154:	10005cc0 	.word	0x10005cc0
10002158:	10009769 	.word	0x10009769
1000215c:	10009798 	.word	0x10009798
10002160:	100097a7 	.word	0x100097a7

10002164 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10002164:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10002166:	0600      	lsls	r0, r0, #24
10002168:	d405      	bmi.n	10002176 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000216a:	221f      	movs	r2, #31
1000216c:	401a      	ands	r2, r3
1000216e:	2301      	movs	r3, #1
10002170:	4093      	lsls	r3, r2
10002172:	4a01      	ldr	r2, [pc, #4]	; (10002178 <arch_irq_enable+0x14>)
10002174:	6013      	str	r3, [r2, #0]
}
10002176:	4770      	bx	lr
10002178:	e000e100 	.word	0xe000e100

1000217c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
1000217c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000217e:	25ff      	movs	r5, #255	; 0xff
10002180:	2203      	movs	r2, #3
10002182:	000b      	movs	r3, r1
10002184:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10002186:	b240      	sxtb	r0, r0
10002188:	4002      	ands	r2, r0
1000218a:	00d2      	lsls	r2, r2, #3
1000218c:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000218e:	015b      	lsls	r3, r3, #5
10002190:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002192:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002194:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10002196:	2800      	cmp	r0, #0
10002198:	db0a      	blt.n	100021b0 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000219a:	24c0      	movs	r4, #192	; 0xc0
1000219c:	4a0a      	ldr	r2, [pc, #40]	; (100021c8 <z_arm_irq_priority_set+0x4c>)
1000219e:	0880      	lsrs	r0, r0, #2
100021a0:	0080      	lsls	r0, r0, #2
100021a2:	1880      	adds	r0, r0, r2
100021a4:	00a4      	lsls	r4, r4, #2
100021a6:	5902      	ldr	r2, [r0, r4]
100021a8:	400a      	ands	r2, r1
100021aa:	4313      	orrs	r3, r2
100021ac:	5103      	str	r3, [r0, r4]
}
100021ae:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100021b0:	220f      	movs	r2, #15
100021b2:	4010      	ands	r0, r2
100021b4:	3808      	subs	r0, #8
100021b6:	4a05      	ldr	r2, [pc, #20]	; (100021cc <z_arm_irq_priority_set+0x50>)
100021b8:	0880      	lsrs	r0, r0, #2
100021ba:	0080      	lsls	r0, r0, #2
100021bc:	1880      	adds	r0, r0, r2
100021be:	69c2      	ldr	r2, [r0, #28]
100021c0:	4011      	ands	r1, r2
100021c2:	4319      	orrs	r1, r3
100021c4:	61c1      	str	r1, [r0, #28]
100021c6:	e7f2      	b.n	100021ae <z_arm_irq_priority_set+0x32>
100021c8:	e000e100 	.word	0xe000e100
100021cc:	e000ed00 	.word	0xe000ed00

100021d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
100021d0:	bf30      	wfi
    b z_SysNmiOnReset
100021d2:	e7fd      	b.n	100021d0 <z_SysNmiOnReset>

100021d4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100021d4:	22ff      	movs	r2, #255	; 0xff
100021d6:	4b08      	ldr	r3, [pc, #32]	; (100021f8 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
100021d8:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100021da:	4393      	bics	r3, r2
100021dc:	4a07      	ldr	r2, [pc, #28]	; (100021fc <z_arm_prep_c+0x28>)
100021de:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
100021e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
100021e4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
100021e8:	f001 fa10 	bl	1000360c <z_bss_zero>
	z_data_copy();
100021ec:	f001 ff66 	bl	100040bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
100021f0:	f000 f958 	bl	100024a4 <z_arm_interrupt_init>
	z_cstart();
100021f4:	f001 fa4a 	bl	1000368c <z_cstart>
100021f8:	10000100 	.word	0x10000100
100021fc:	e000ed00 	.word	0xe000ed00

10002200 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10002200:	4a08      	ldr	r2, [pc, #32]	; (10002224 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10002202:	4909      	ldr	r1, [pc, #36]	; (10002228 <arch_swap+0x28>)
	_current->arch.basepri = key;
10002204:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10002206:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10002208:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
1000220a:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000220c:	2380      	movs	r3, #128	; 0x80
1000220e:	4907      	ldr	r1, [pc, #28]	; (1000222c <arch_swap+0x2c>)
10002210:	055b      	lsls	r3, r3, #21
10002212:	6848      	ldr	r0, [r1, #4]
10002214:	4303      	orrs	r3, r0
10002216:	604b      	str	r3, [r1, #4]
10002218:	b662      	cpsie	i
1000221a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
1000221e:	6893      	ldr	r3, [r2, #8]
10002220:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10002222:	4770      	bx	lr
10002224:	20000b2c 	.word	0x20000b2c
10002228:	10005ea0 	.word	0x10005ea0
1000222c:	e000ed00 	.word	0xe000ed00

10002230 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10002230:	4913      	ldr	r1, [pc, #76]	; (10002280 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10002232:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10002234:	4813      	ldr	r0, [pc, #76]	; (10002284 <_thread_irq_disabled+0x22>)
    add r0, r2
10002236:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10002238:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
1000223c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
1000223e:	4643      	mov	r3, r8
    mov r4, r9
10002240:	464c      	mov	r4, r9
    mov r5, r10
10002242:	4655      	mov	r5, sl
    mov r6, r11
10002244:	465e      	mov	r6, fp
    mov r7, ip
10002246:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10002248:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000224a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
1000224c:	4f0e      	ldr	r7, [pc, #56]	; (10002288 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
1000224e:	4e0f      	ldr	r6, [pc, #60]	; (1000228c <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10002250:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10002252:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10002254:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10002256:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10002258:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
1000225a:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
1000225c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
1000225e:	d100      	bne.n	10002262 <_thread_irq_disabled>
    cpsie i
10002260:	b662      	cpsie	i

10002262 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10002262:	4c08      	ldr	r4, [pc, #32]	; (10002284 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10002264:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10002266:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10002268:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
1000226a:	4698      	mov	r8, r3
    mov r9, r4
1000226c:	46a1      	mov	r9, r4
    mov r10, r5
1000226e:	46aa      	mov	sl, r5
    mov r11, r6
10002270:	46b3      	mov	fp, r6
    mov ip, r7
10002272:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10002274:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10002276:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10002278:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
1000227c:	4770      	bx	lr
1000227e:	0000      	.short	0x0000
    ldr r1, =_kernel
10002280:	20000b2c 	.word	0x20000b2c
    ldr r0, =_thread_offset_to_callee_saved
10002284:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10002288:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
1000228c:	08000000 	.word	0x08000000

10002290 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10002290:	2004      	movs	r0, #4
  mov r1, lr
10002292:	4671      	mov	r1, lr
  tst r1, r0
10002294:	4201      	tst	r1, r0
  beq _stack_frame_msp
10002296:	d002      	beq.n	1000229e <_stack_frame_msp>
  mrs r0, PSP
10002298:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
1000229c:	d101      	bne.n	100022a2 <_stack_frame_endif>

1000229e <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
1000229e:	f3ef 8008 	mrs	r0, MSP

100022a2 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
100022a2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
100022a4:	3902      	subs	r1, #2
    ldrb r1, [r1]
100022a6:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
100022a8:	2902      	cmp	r1, #2
    beq _oops
100022aa:	d0ff      	beq.n	100022ac <_oops>

100022ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
100022ac:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
100022ae:	f002 fdf8 	bl	10004ea2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
100022b2:	bd01      	pop	{r0, pc}

100022b4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
100022b4:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
100022b6:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
100022b8:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
100022ba:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
100022bc:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
100022be:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
100022c0:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
100022c2:	4906      	ldr	r1, [pc, #24]	; (100022dc <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
100022c4:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
100022c6:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
100022c8:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
100022ca:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
100022cc:	2380      	movs	r3, #128	; 0x80
100022ce:	045b      	lsls	r3, r3, #17
100022d0:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
100022d2:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
100022d4:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
100022d6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
100022d8:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
100022da:	bd10      	pop	{r4, pc}
100022dc:	1000460f 	.word	0x1000460f

100022e0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100022e0:	4b06      	ldr	r3, [pc, #24]	; (100022fc <arch_switch_to_main_thread+0x1c>)
100022e2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100022e4:	1c10      	adds	r0, r2, #0
100022e6:	f381 8809 	msr	PSP, r1
100022ea:	2100      	movs	r1, #0
100022ec:	b662      	cpsie	i
100022ee:	f3bf 8f6f 	isb	sy
100022f2:	2200      	movs	r2, #0
100022f4:	2300      	movs	r3, #0
100022f6:	f002 f98a 	bl	1000460e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
100022fa:	46c0      	nop			; (mov r8, r8)
100022fc:	20000b2c 	.word	0x20000b2c

10002300 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10002300:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10002302:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10002306:	4905      	ldr	r1, [pc, #20]	; (1000231c <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10002308:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
1000230a:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
1000230c:	4904      	ldr	r1, [pc, #16]	; (10002320 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
1000230e:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10002310:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10002312:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10002314:	bc09      	pop	{r0, r3}
	mov lr, r3
10002316:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10002318:	4902      	ldr	r1, [pc, #8]	; (10002324 <_isr_wrapper+0x24>)
	bx r1
1000231a:	4708      	bx	r1
	ldr r1, =16
1000231c:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10002320:	10005b88 	.word	0x10005b88
	ldr r1, =z_arm_int_exit
10002324:	10002329 	.word	0x10002329

10002328 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10002328:	4b04      	ldr	r3, [pc, #16]	; (1000233c <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
1000232a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
1000232c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
1000232e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10002330:	d002      	beq.n	10002338 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10002332:	4903      	ldr	r1, [pc, #12]	; (10002340 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10002334:	4a03      	ldr	r2, [pc, #12]	; (10002344 <_EXIT_EXC+0xc>)
	str r2, [r1]
10002336:	600a      	str	r2, [r1, #0]

10002338 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10002338:	4770      	bx	lr
1000233a:	0000      	.short	0x0000
	ldr r3, =_kernel
1000233c:	20000b2c 	.word	0x20000b2c
	ldr r1, =_SCS_ICSR
10002340:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10002344:	10000000 	.word	0x10000000

10002348 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10002348:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000234a:	4b46      	ldr	r3, [pc, #280]	; (10002464 <z_arm_fault+0x11c>)
{
1000234c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000234e:	685e      	ldr	r6, [r3, #4]
{
10002350:	af00      	add	r7, sp, #0
10002352:	05f3      	lsls	r3, r6, #23
10002354:	0ddb      	lsrs	r3, r3, #23
10002356:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002358:	607b      	str	r3, [r7, #4]
1000235a:	b662      	cpsie	i
1000235c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002360:	4841      	ldr	r0, [pc, #260]	; (10002468 <z_arm_fault+0x120>)
10002362:	0e13      	lsrs	r3, r2, #24
10002364:	6038      	str	r0, [r7, #0]
10002366:	2bff      	cmp	r3, #255	; 0xff
10002368:	d111      	bne.n	1000238e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
1000236a:	3bf3      	subs	r3, #243	; 0xf3
1000236c:	4013      	ands	r3, r2
1000236e:	2b08      	cmp	r3, #8
10002370:	d150      	bne.n	10002414 <z_arm_fault+0xcc>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
10002372:	4b3e      	ldr	r3, [pc, #248]	; (1000246c <z_arm_fault+0x124>)
10002374:	61fb      	str	r3, [r7, #28]
10002376:	2302      	movs	r3, #2
10002378:	61bb      	str	r3, [r7, #24]
1000237a:	2108      	movs	r1, #8
1000237c:	2210      	movs	r2, #16
1000237e:	1852      	adds	r2, r2, r1
10002380:	2182      	movs	r1, #130	; 0x82
10002382:	2300      	movs	r3, #0
10002384:	6838      	ldr	r0, [r7, #0]
10002386:	19d2      	adds	r2, r2, r7
10002388:	0149      	lsls	r1, r1, #5
1000238a:	f7ff fb79 	bl	10001a80 <z_impl_z_log_msg_static_create>
	*nested_exc = false;
1000238e:	2500      	movs	r5, #0
		return NULL;
10002390:	002c      	movs	r4, r5
	switch (fault) {
10002392:	687b      	ldr	r3, [r7, #4]
10002394:	2b03      	cmp	r3, #3
10002396:	d143      	bne.n	10002420 <z_arm_fault+0xd8>
	PR_FAULT_INFO("***** HARD FAULT *****");
10002398:	466e      	mov	r6, sp
1000239a:	4b35      	ldr	r3, [pc, #212]	; (10002470 <z_arm_fault+0x128>)
1000239c:	61fb      	str	r3, [r7, #28]
1000239e:	2302      	movs	r3, #2
100023a0:	61bb      	str	r3, [r7, #24]
100023a2:	2108      	movs	r1, #8
100023a4:	2210      	movs	r2, #16
100023a6:	1852      	adds	r2, r2, r1
100023a8:	2182      	movs	r1, #130	; 0x82
100023aa:	4b2f      	ldr	r3, [pc, #188]	; (10002468 <z_arm_fault+0x120>)
100023ac:	19d2      	adds	r2, r2, r7
100023ae:	603b      	str	r3, [r7, #0]
100023b0:	6838      	ldr	r0, [r7, #0]
100023b2:	2300      	movs	r3, #0
100023b4:	0149      	lsls	r1, r1, #5
100023b6:	f7ff fb63 	bl	10001a80 <z_impl_z_log_msg_static_create>
	uint16_t fault_insn = *(ret_addr - 1);
100023ba:	69a3      	ldr	r3, [r4, #24]
100023bc:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
100023be:	881a      	ldrh	r2, [r3, #0]
100023c0:	4b2c      	ldr	r3, [pc, #176]	; (10002474 <z_arm_fault+0x12c>)
100023c2:	429a      	cmp	r2, r3
100023c4:	d148      	bne.n	10002458 <z_arm_fault+0x110>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
100023c6:	b088      	sub	sp, #32
100023c8:	6823      	ldr	r3, [r4, #0]
100023ca:	466a      	mov	r2, sp
100023cc:	492a      	ldr	r1, [pc, #168]	; (10002478 <z_arm_fault+0x130>)
100023ce:	6193      	str	r3, [r2, #24]
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	6151      	str	r1, [r2, #20]
100023d4:	6113      	str	r3, [r2, #16]
100023d6:	21c2      	movs	r1, #194	; 0xc2
100023d8:	2300      	movs	r3, #0
100023da:	6838      	ldr	r0, [r7, #0]
100023dc:	3210      	adds	r2, #16
100023de:	0149      	lsls	r1, r1, #5
100023e0:	f7ff fb4e 	bl	10001a80 <z_impl_z_log_msg_static_create>
100023e4:	46b5      	mov	sp, r6
		reason = esf->basic.r0;
100023e6:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100023e8:	2308      	movs	r3, #8
100023ea:	2220      	movs	r2, #32
100023ec:	18f8      	adds	r0, r7, r3
100023ee:	0021      	movs	r1, r4
100023f0:	f002 fd7c 	bl	10004eec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
100023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100023f6:	2d00      	cmp	r5, #0
100023f8:	d030      	beq.n	1000245c <z_arm_fault+0x114>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100023fa:	05da      	lsls	r2, r3, #23
100023fc:	d102      	bne.n	10002404 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100023fe:	4a1f      	ldr	r2, [pc, #124]	; (1000247c <z_arm_fault+0x134>)
10002400:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10002402:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10002404:	2308      	movs	r3, #8
10002406:	0030      	movs	r0, r6
10002408:	18f9      	adds	r1, r7, r3
1000240a:	f7ff fe47 	bl	1000209c <z_arm_fatal_error>
}
1000240e:	46bd      	mov	sp, r7
10002410:	b00b      	add	sp, #44	; 0x2c
10002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
10002414:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10002416:	0712      	lsls	r2, r2, #28
10002418:	d5bb      	bpl.n	10002392 <z_arm_fault+0x4a>
			ptr_esf =  (z_arch_esf_t *)psp;
1000241a:	000c      	movs	r4, r1
	*nested_exc = false;
1000241c:	2500      	movs	r5, #0
1000241e:	e7b8      	b.n	10002392 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** %s %d) *****",
10002420:	22f8      	movs	r2, #248	; 0xf8
10002422:	0052      	lsls	r2, r2, #1
10002424:	4b16      	ldr	r3, [pc, #88]	; (10002480 <z_arm_fault+0x138>)
10002426:	4216      	tst	r6, r2
10002428:	d000      	beq.n	1000242c <z_arm_fault+0xe4>
1000242a:	4b16      	ldr	r3, [pc, #88]	; (10002484 <z_arm_fault+0x13c>)
1000242c:	466e      	mov	r6, sp
1000242e:	b08a      	sub	sp, #40	; 0x28
10002430:	466a      	mov	r2, sp
10002432:	6193      	str	r3, [r2, #24]
10002434:	687b      	ldr	r3, [r7, #4]
10002436:	4914      	ldr	r1, [pc, #80]	; (10002488 <z_arm_fault+0x140>)
10002438:	3b10      	subs	r3, #16
1000243a:	61d3      	str	r3, [r2, #28]
1000243c:	2380      	movs	r3, #128	; 0x80
1000243e:	009b      	lsls	r3, r3, #2
10002440:	8413      	strh	r3, [r2, #32]
10002442:	4b12      	ldr	r3, [pc, #72]	; (1000248c <z_arm_fault+0x144>)
10002444:	6151      	str	r1, [r2, #20]
10002446:	6113      	str	r3, [r2, #16]
10002448:	2191      	movs	r1, #145	; 0x91
1000244a:	2300      	movs	r3, #0
1000244c:	6838      	ldr	r0, [r7, #0]
1000244e:	3210      	adds	r2, #16
10002450:	0189      	lsls	r1, r1, #6
10002452:	f7ff fb15 	bl	10001a80 <z_impl_z_log_msg_static_create>
10002456:	46b5      	mov	sp, r6
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10002458:	2600      	movs	r6, #0
1000245a:	e7c5      	b.n	100023e8 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
1000245c:	0a5b      	lsrs	r3, r3, #9
1000245e:	025b      	lsls	r3, r3, #9
10002460:	e7cf      	b.n	10002402 <z_arm_fault+0xba>
10002462:	46c0      	nop			; (mov r8, r8)
10002464:	e000ed00 	.word	0xe000ed00
10002468:	10005cc0 	.word	0x10005cc0
1000246c:	10009803 	.word	0x10009803
10002470:	1000982e 	.word	0x1000982e
10002474:	0000df02 	.word	0x0000df02
10002478:	10009845 	.word	0x10009845
1000247c:	000001ff 	.word	0x000001ff
10002480:	100097d5 	.word	0x100097d5
10002484:	100097ea 	.word	0x100097ea
10002488:	10009861 	.word	0x10009861
1000248c:	01000004 	.word	0x01000004

10002490 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10002490:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10002494:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10002498:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
1000249a:	4672      	mov	r2, lr
	bl z_arm_fault
1000249c:	f7ff ff54 	bl	10002348 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100024a0:	bd01      	pop	{r0, pc}
100024a2:	46c0      	nop			; (mov r8, r8)

100024a4 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
100024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100024a6:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100024a8:	2200      	movs	r2, #0
100024aa:	2603      	movs	r6, #3
100024ac:	25ff      	movs	r5, #255	; 0xff
100024ae:	00a4      	lsls	r4, r4, #2
100024b0:	0010      	movs	r0, r2
100024b2:	002f      	movs	r7, r5
100024b4:	4030      	ands	r0, r6
100024b6:	00c0      	lsls	r0, r0, #3
100024b8:	4087      	lsls	r7, r0
100024ba:	4905      	ldr	r1, [pc, #20]	; (100024d0 <z_arm_interrupt_init+0x2c>)
100024bc:	0893      	lsrs	r3, r2, #2
100024be:	009b      	lsls	r3, r3, #2
100024c0:	185b      	adds	r3, r3, r1
100024c2:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
100024c4:	3201      	adds	r2, #1
100024c6:	43b9      	bics	r1, r7
100024c8:	5119      	str	r1, [r3, r4]
100024ca:	2a1a      	cmp	r2, #26
100024cc:	d1f0      	bne.n	100024b0 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
100024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100024d0:	e000e100 	.word	0xe000e100

100024d4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100024d4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
100024d6:	4807      	ldr	r0, [pc, #28]	; (100024f4 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100024d8:	4907      	ldr	r1, [pc, #28]	; (100024f8 <__start+0x24>)
    adds r0, r0, r1
100024da:	1840      	adds	r0, r0, r1
    msr PSP, r0
100024dc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
100024e0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
100024e4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
100024e6:	4308      	orrs	r0, r1
    msr CONTROL, r0
100024e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
100024ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
100024f0:	f7ff fe70 	bl	100021d4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
100024f4:	20000e68 	.word	0x20000e68
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100024f8:	00000800 	.word	0x00000800

100024fc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
100024fc:	b510      	push	{r4, lr}
	if (_current == thread) {
100024fe:	4b0a      	ldr	r3, [pc, #40]	; (10002528 <z_impl_k_thread_abort+0x2c>)
10002500:	689b      	ldr	r3, [r3, #8]
10002502:	4283      	cmp	r3, r0
10002504:	d10d      	bne.n	10002522 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10002506:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
1000250a:	2b00      	cmp	r3, #0
1000250c:	d009      	beq.n	10002522 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000250e:	2280      	movs	r2, #128	; 0x80
10002510:	4b06      	ldr	r3, [pc, #24]	; (1000252c <z_impl_k_thread_abort+0x30>)
10002512:	0552      	lsls	r2, r2, #21
10002514:	6859      	ldr	r1, [r3, #4]
10002516:	430a      	orrs	r2, r1
10002518:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
1000251a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000251c:	4904      	ldr	r1, [pc, #16]	; (10002530 <z_impl_k_thread_abort+0x34>)
1000251e:	400a      	ands	r2, r1
10002520:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10002522:	f001 fd6f 	bl	10004004 <z_thread_abort>
}
10002526:	bd10      	pop	{r4, pc}
10002528:	20000b2c 	.word	0x20000b2c
1000252c:	e000ed00 	.word	0xe000ed00
10002530:	ffff7fff 	.word	0xffff7fff

10002534 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10002534:	4b01      	ldr	r3, [pc, #4]	; (1000253c <__stdout_hook_install+0x8>)
10002536:	6018      	str	r0, [r3, #0]
}
10002538:	4770      	bx	lr
1000253a:	46c0      	nop			; (mov r8, r8)
1000253c:	20000008 	.word	0x20000008

10002540 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002540:	4b0e      	ldr	r3, [pc, #56]	; (1000257c <rp2040_init+0x3c>)
10002542:	4a0f      	ldr	r2, [pc, #60]	; (10002580 <rp2040_init+0x40>)
#include <hardware/resets.h>

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(void)
{
10002544:	b570      	push	{r4, r5, r6, lr}
10002546:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002548:	4d0e      	ldr	r5, [pc, #56]	; (10002584 <rp2040_init+0x44>)
1000254a:	4b0f      	ldr	r3, [pc, #60]	; (10002588 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
1000254c:	4c0f      	ldr	r4, [pc, #60]	; (1000258c <rp2040_init+0x4c>)
1000254e:	602b      	str	r3, [r5, #0]
10002550:	0019      	movs	r1, r3
10002552:	68a2      	ldr	r2, [r4, #8]
10002554:	4391      	bics	r1, r2
10002556:	d1fb      	bne.n	10002550 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10002558:	f000 fd82 	bl	10003060 <clocks_init>
1000255c:	4b0c      	ldr	r3, [pc, #48]	; (10002590 <rp2040_init+0x50>)
1000255e:	602b      	str	r3, [r5, #0]
10002560:	68a3      	ldr	r3, [r4, #8]
10002562:	01db      	lsls	r3, r3, #7
10002564:	3380      	adds	r3, #128	; 0x80
10002566:	d1fb      	bne.n	10002560 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10002568:	f3ef 8310 	mrs	r3, PRIMASK
1000256c:	b672      	cpsid	i
	if (key != 0U) {
1000256e:	2b00      	cmp	r3, #0
10002570:	d102      	bne.n	10002578 <rp2040_init+0x38>
	__asm__ volatile(
10002572:	b662      	cpsie	i
10002574:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10002578:	2000      	movs	r0, #0
1000257a:	bd70      	pop	{r4, r5, r6, pc}
1000257c:	4000e000 	.word	0x4000e000
10002580:	ffffcdbf 	.word	0xffffcdbf
10002584:	4000f000 	.word	0x4000f000
10002588:	003c3ffe 	.word	0x003c3ffe
1000258c:	4000c000 	.word	0x4000c000
10002590:	01ffffff 	.word	0x01ffffff

10002594 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
10002594:	b510      	push	{r4, lr}
10002596:	4808      	ldr	r0, [pc, #32]	; (100025b8 <uart_console_init+0x24>)
10002598:	f003 f916 	bl	100057c8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
1000259c:	2800      	cmp	r0, #0
1000259e:	d008      	beq.n	100025b2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
100025a0:	4c06      	ldr	r4, [pc, #24]	; (100025bc <uart_console_init+0x28>)
100025a2:	0020      	movs	r0, r4
100025a4:	f7ff ffc6 	bl	10002534 <__stdout_hook_install>
	__printk_hook_install(console_out);
100025a8:	0020      	movs	r0, r4
100025aa:	f7fe fc3f 	bl	10000e2c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100025ae:	2000      	movs	r0, #0
}
100025b0:	bd10      	pop	{r4, pc}
		return -ENODEV;
100025b2:	2013      	movs	r0, #19
100025b4:	4240      	negs	r0, r0
100025b6:	e7fb      	b.n	100025b0 <uart_console_init+0x1c>
100025b8:	10005b28 	.word	0x10005b28
100025bc:	100025c1 	.word	0x100025c1

100025c0 <console_out>:
{
100025c0:	b570      	push	{r4, r5, r6, lr}
100025c2:	0004      	movs	r4, r0
100025c4:	4d07      	ldr	r5, [pc, #28]	; (100025e4 <console_out+0x24>)
	if ('\n' == c) {
100025c6:	280a      	cmp	r0, #10
100025c8:	d104      	bne.n	100025d4 <console_out+0x14>
100025ca:	68ab      	ldr	r3, [r5, #8]
100025cc:	210d      	movs	r1, #13
100025ce:	0028      	movs	r0, r5
100025d0:	685b      	ldr	r3, [r3, #4]
100025d2:	4798      	blx	r3
100025d4:	68ab      	ldr	r3, [r5, #8]
100025d6:	0028      	movs	r0, r5
100025d8:	685b      	ldr	r3, [r3, #4]
100025da:	b2e1      	uxtb	r1, r4
100025dc:	4798      	blx	r3
}
100025de:	0020      	movs	r0, r4
100025e0:	bd70      	pop	{r4, r5, r6, pc}
100025e2:	46c0      	nop			; (mov r8, r8)
100025e4:	10005b28 	.word	0x10005b28

100025e8 <ssd1306_get_capabilities>:
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
}

static void ssd1306_get_capabilities(const struct device *dev,
				     struct display_capabilities *caps)
{
100025e8:	b510      	push	{r4, lr}
100025ea:	000c      	movs	r4, r1
	memset(caps, 0, sizeof(struct display_capabilities));
100025ec:	2210      	movs	r2, #16
100025ee:	2100      	movs	r1, #0
100025f0:	0020      	movs	r0, r4
100025f2:	f002 fc84 	bl	10004efe <memset>
	caps->x_resolution = DT_INST_PROP(0, width);
100025f6:	4b04      	ldr	r3, [pc, #16]	; (10002608 <ssd1306_get_capabilities+0x20>)
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
100025f8:	2201      	movs	r2, #1
	caps->x_resolution = DT_INST_PROP(0, width);
100025fa:	6023      	str	r3, [r4, #0]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
100025fc:	2304      	movs	r3, #4
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
100025fe:	60a2      	str	r2, [r4, #8]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
10002600:	6063      	str	r3, [r4, #4]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
10002602:	7323      	strb	r3, [r4, #12]
}
10002604:	bd10      	pop	{r4, pc}
10002606:	46c0      	nop			; (mov r8, r8)
10002608:	00400080 	.word	0x00400080

1000260c <ssd1306_read>:
{
1000260c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
1000260e:	4b07      	ldr	r3, [pc, #28]	; (1000262c <ssd1306_read+0x20>)
10002610:	2182      	movs	r1, #130	; 0x82
10002612:	9305      	str	r3, [sp, #20]
10002614:	2302      	movs	r3, #2
10002616:	4806      	ldr	r0, [pc, #24]	; (10002630 <ssd1306_read+0x24>)
10002618:	aa04      	add	r2, sp, #16
1000261a:	0149      	lsls	r1, r1, #5
1000261c:	9304      	str	r3, [sp, #16]
1000261e:	f002 fc7a 	bl	10004f16 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
10002622:	2086      	movs	r0, #134	; 0x86
}
10002624:	4240      	negs	r0, r0
10002626:	b007      	add	sp, #28
10002628:	bd00      	pop	{pc}
1000262a:	46c0      	nop			; (mov r8, r8)
1000262c:	10009878 	.word	0x10009878
10002630:	10005cd0 	.word	0x10005cd0

10002634 <ssd1306_get_framebuffer>:
{
10002634:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
10002636:	4b06      	ldr	r3, [pc, #24]	; (10002650 <ssd1306_get_framebuffer+0x1c>)
10002638:	2182      	movs	r1, #130	; 0x82
1000263a:	9305      	str	r3, [sp, #20]
1000263c:	2302      	movs	r3, #2
1000263e:	4805      	ldr	r0, [pc, #20]	; (10002654 <ssd1306_get_framebuffer+0x20>)
10002640:	aa04      	add	r2, sp, #16
10002642:	0149      	lsls	r1, r1, #5
10002644:	9304      	str	r3, [sp, #16]
10002646:	f002 fc66 	bl	10004f16 <z_log_msg_static_create.constprop.0>
}
1000264a:	2000      	movs	r0, #0
1000264c:	b007      	add	sp, #28
1000264e:	bd00      	pop	{pc}
10002650:	10009878 	.word	0x10009878
10002654:	10005cd0 	.word	0x10005cd0

10002658 <ssd1306_set_brightness>:
{
10002658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_WRN("Unsupported");
1000265a:	4b07      	ldr	r3, [pc, #28]	; (10002678 <ssd1306_set_brightness+0x20>)
1000265c:	2184      	movs	r1, #132	; 0x84
1000265e:	9305      	str	r3, [sp, #20]
10002660:	2302      	movs	r3, #2
10002662:	4806      	ldr	r0, [pc, #24]	; (1000267c <ssd1306_set_brightness+0x24>)
10002664:	aa04      	add	r2, sp, #16
10002666:	0149      	lsls	r1, r1, #5
10002668:	9304      	str	r3, [sp, #16]
1000266a:	f002 fc54 	bl	10004f16 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
1000266e:	2086      	movs	r0, #134	; 0x86
}
10002670:	4240      	negs	r0, r0
10002672:	b007      	add	sp, #28
10002674:	bd00      	pop	{pc}
10002676:	46c0      	nop			; (mov r8, r8)
10002678:	10009878 	.word	0x10009878
1000267c:	10005cd0 	.word	0x10005cd0

10002680 <ssd1306_set_pixel_format.part.0>:
{
	LOG_ERR("Unsupported");
	return -ENOTSUP;
}

static int ssd1306_set_pixel_format(const struct device *dev,
10002680:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
				    const enum display_pixel_format pf)
{
	if (pf == PIXEL_FORMAT_MONO10) {
		return 0;
	}
	LOG_ERR("Unsupported");
10002682:	4b07      	ldr	r3, [pc, #28]	; (100026a0 <ssd1306_set_pixel_format.part.0+0x20>)
10002684:	2182      	movs	r1, #130	; 0x82
10002686:	9305      	str	r3, [sp, #20]
10002688:	2302      	movs	r3, #2
1000268a:	4806      	ldr	r0, [pc, #24]	; (100026a4 <ssd1306_set_pixel_format.part.0+0x24>)
1000268c:	aa04      	add	r2, sp, #16
1000268e:	0149      	lsls	r1, r1, #5
10002690:	9304      	str	r3, [sp, #16]
10002692:	f002 fc40 	bl	10004f16 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
}
10002696:	2086      	movs	r0, #134	; 0x86
10002698:	4240      	negs	r0, r0
1000269a:	b007      	add	sp, #28
1000269c:	bd00      	pop	{pc}
1000269e:	46c0      	nop			; (mov r8, r8)
100026a0:	10009878 	.word	0x10009878
100026a4:	10005cd0 	.word	0x10005cd0

100026a8 <ssd1306_set_orientation>:
{
100026a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
100026aa:	4b07      	ldr	r3, [pc, #28]	; (100026c8 <ssd1306_set_orientation+0x20>)
100026ac:	2182      	movs	r1, #130	; 0x82
100026ae:	9305      	str	r3, [sp, #20]
100026b0:	2302      	movs	r3, #2
100026b2:	4806      	ldr	r0, [pc, #24]	; (100026cc <ssd1306_set_orientation+0x24>)
100026b4:	aa04      	add	r2, sp, #16
100026b6:	0149      	lsls	r1, r1, #5
100026b8:	9304      	str	r3, [sp, #16]
100026ba:	f002 fc2c 	bl	10004f16 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
100026be:	2086      	movs	r0, #134	; 0x86
}
100026c0:	4240      	negs	r0, r0
100026c2:	b007      	add	sp, #28
100026c4:	bd00      	pop	{pc}
100026c6:	46c0      	nop			; (mov r8, r8)
100026c8:	10009878 	.word	0x10009878
100026cc:	10005cd0 	.word	0x10005cd0

100026d0 <ssd1306_write>:
{
100026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100026d2:	0005      	movs	r5, r0
	if (desc->pitch < desc->width) {
100026d4:	891f      	ldrh	r7, [r3, #8]
100026d6:	8898      	ldrh	r0, [r3, #4]
{
100026d8:	b089      	sub	sp, #36	; 0x24
	if (desc->pitch < desc->width) {
100026da:	4287      	cmp	r7, r0
100026dc:	d20d      	bcs.n	100026fa <ssd1306_write+0x2a>
		LOG_ERR("Pitch is smaller then width");
100026de:	4b23      	ldr	r3, [pc, #140]	; (1000276c <ssd1306_write+0x9c>)
		LOG_ERR("Display buffer is not available");
100026e0:	2182      	movs	r1, #130	; 0x82
100026e2:	9307      	str	r3, [sp, #28]
100026e4:	2302      	movs	r3, #2
100026e6:	4822      	ldr	r0, [pc, #136]	; (10002770 <ssd1306_write+0xa0>)
100026e8:	aa06      	add	r2, sp, #24
100026ea:	0149      	lsls	r1, r1, #5
100026ec:	9306      	str	r3, [sp, #24]
100026ee:	f002 fc12 	bl	10004f16 <z_log_msg_static_create.constprop.0>
		return -1;
100026f2:	2001      	movs	r0, #1
100026f4:	4240      	negs	r0, r0
}
100026f6:	b009      	add	sp, #36	; 0x24
100026f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
100026fa:	88de      	ldrh	r6, [r3, #6]
100026fc:	681b      	ldr	r3, [r3, #0]
100026fe:	0034      	movs	r4, r6
10002700:	4344      	muls	r4, r0
10002702:	10e4      	asrs	r4, r4, #3
10002704:	429c      	cmp	r4, r3
10002706:	d900      	bls.n	1000270a <ssd1306_write+0x3a>
10002708:	001c      	movs	r4, r3
	if (buf == NULL || buf_len == 0U) {
1000270a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000270c:	2b00      	cmp	r3, #0
1000270e:	d001      	beq.n	10002714 <ssd1306_write+0x44>
10002710:	2c00      	cmp	r4, #0
10002712:	d101      	bne.n	10002718 <ssd1306_write+0x48>
		LOG_ERR("Display buffer is not available");
10002714:	4b17      	ldr	r3, [pc, #92]	; (10002774 <ssd1306_write+0xa4>)
10002716:	e7e3      	b.n	100026e0 <ssd1306_write+0x10>
	if (desc->pitch > desc->width) {
10002718:	4287      	cmp	r7, r0
1000271a:	d901      	bls.n	10002720 <ssd1306_write+0x50>
		LOG_ERR("Unsupported mode");
1000271c:	4b16      	ldr	r3, [pc, #88]	; (10002778 <ssd1306_write+0xa8>)
1000271e:	e7df      	b.n	100026e0 <ssd1306_write+0x10>
	if ((y & 0x7) != 0U) {
10002720:	0753      	lsls	r3, r2, #29
10002722:	d001      	beq.n	10002728 <ssd1306_write+0x58>
		LOG_ERR("Unsupported origin");
10002724:	4b15      	ldr	r3, [pc, #84]	; (1000277c <ssd1306_write+0xac>)
10002726:	e7db      	b.n	100026e0 <ssd1306_write+0x10>
	uint8_t cmd_buf[] = {
10002728:	466f      	mov	r7, sp
1000272a:	2320      	movs	r3, #32
1000272c:	803b      	strh	r3, [r7, #0]
1000272e:	3301      	adds	r3, #1
10002730:	70bb      	strb	r3, [r7, #2]
10002732:	2322      	movs	r3, #34	; 0x22
10002734:	717b      	strb	r3, [r7, #5]
10002736:	08d3      	lsrs	r3, r2, #3
		((y + desc->height)/8 - 1)
10002738:	1992      	adds	r2, r2, r6
	uint8_t cmd_buf[] = {
1000273a:	b2c9      	uxtb	r1, r1
		(x + desc->width - 1),
1000273c:	3801      	subs	r0, #1
		((y + desc->height)/8 - 1)
1000273e:	10d2      	asrs	r2, r2, #3
	uint8_t cmd_buf[] = {
10002740:	70f9      	strb	r1, [r7, #3]
		((y + desc->height)/8 - 1)
10002742:	3a01      	subs	r2, #1
		(x + desc->width - 1),
10002744:	1809      	adds	r1, r1, r0
	uint8_t cmd_buf[] = {
10002746:	7139      	strb	r1, [r7, #4]
10002748:	71bb      	strb	r3, [r7, #6]
1000274a:	71fa      	strb	r2, [r7, #7]
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
1000274c:	2301      	movs	r3, #1
	uint8_t cmd_buf[] = {
1000274e:	4669      	mov	r1, sp
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
10002750:	2208      	movs	r2, #8
10002752:	6868      	ldr	r0, [r5, #4]
10002754:	f002 fbeb 	bl	10004f2e <ssd1306_write_bus.isra.0>
10002758:	1e03      	subs	r3, r0, #0
1000275a:	d001      	beq.n	10002760 <ssd1306_write+0x90>
		LOG_ERR("Failed to write command");
1000275c:	4b08      	ldr	r3, [pc, #32]	; (10002780 <ssd1306_write+0xb0>)
1000275e:	e7bf      	b.n	100026e0 <ssd1306_write+0x10>
	return ssd1306_write_bus(dev, (uint8_t *)buf, buf_len, false);
10002760:	0022      	movs	r2, r4
10002762:	990e      	ldr	r1, [sp, #56]	; 0x38
10002764:	6868      	ldr	r0, [r5, #4]
10002766:	f002 fbe2 	bl	10004f2e <ssd1306_write_bus.isra.0>
1000276a:	e7c4      	b.n	100026f6 <ssd1306_write+0x26>
1000276c:	10009884 	.word	0x10009884
10002770:	10005cd0 	.word	0x10005cd0
10002774:	100098a0 	.word	0x100098a0
10002778:	100098c0 	.word	0x100098c0
1000277c:	100098d1 	.word	0x100098d1
10002780:	100098e4 	.word	0x100098e4

10002784 <ssd1306_suspend>:
{
10002784:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
10002786:	4b05      	ldr	r3, [pc, #20]	; (1000279c <ssd1306_suspend+0x18>)
10002788:	a901      	add	r1, sp, #4
1000278a:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
1000278c:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
1000278e:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002790:	2301      	movs	r3, #1
10002792:	001a      	movs	r2, r3
10002794:	f002 fbcb 	bl	10004f2e <ssd1306_write_bus.isra.0>
}
10002798:	bd0e      	pop	{r1, r2, r3, pc}
1000279a:	46c0      	nop			; (mov r8, r8)
1000279c:	100098fc 	.word	0x100098fc

100027a0 <ssd1306_resume>:
{
100027a0:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
100027a2:	4b05      	ldr	r3, [pc, #20]	; (100027b8 <ssd1306_resume+0x18>)
100027a4:	a901      	add	r1, sp, #4
100027a6:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100027a8:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
100027aa:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100027ac:	2301      	movs	r3, #1
100027ae:	001a      	movs	r2, r3
100027b0:	f002 fbbd 	bl	10004f2e <ssd1306_write_bus.isra.0>
}
100027b4:	bd0e      	pop	{r1, r2, r3, pc}
100027b6:	46c0      	nop			; (mov r8, r8)
100027b8:	100098fe 	.word	0x100098fe

100027bc <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
100027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ssd1306_config *config = dev->config;
100027be:	6845      	ldr	r5, [r0, #4]
{
100027c0:	b08d      	sub	sp, #52	; 0x34
100027c2:	0004      	movs	r4, r0
100027c4:	af00      	add	r7, sp, #0
	return device_is_ready(config->bus.bus);
100027c6:	6828      	ldr	r0, [r5, #0]
100027c8:	f002 fffe 	bl	100057c8 <z_device_is_ready>

	LOG_DBG("");

	if (!ssd1306_bus_ready(dev)) {
100027cc:	2800      	cmp	r0, #0
100027ce:	d116      	bne.n	100027fe <ssd1306_init+0x42>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
100027d0:	682b      	ldr	r3, [r5, #0]
100027d2:	466c      	mov	r4, sp
100027d4:	b088      	sub	sp, #32
100027d6:	681b      	ldr	r3, [r3, #0]
100027d8:	466a      	mov	r2, sp
100027da:	6193      	str	r3, [r2, #24]
100027dc:	2380      	movs	r3, #128	; 0x80
100027de:	4961      	ldr	r1, [pc, #388]	; (10002964 <ssd1306_init+0x1a8>)
100027e0:	009b      	lsls	r3, r3, #2
100027e2:	6151      	str	r1, [r2, #20]
100027e4:	21e2      	movs	r1, #226	; 0xe2
100027e6:	8393      	strh	r3, [r2, #28]
100027e8:	4b5f      	ldr	r3, [pc, #380]	; (10002968 <ssd1306_init+0x1ac>)
100027ea:	4860      	ldr	r0, [pc, #384]	; (1000296c <ssd1306_init+0x1b0>)
100027ec:	6113      	str	r3, [r2, #16]
100027ee:	0149      	lsls	r1, r1, #5
100027f0:	3210      	adds	r2, #16
100027f2:	f002 fb90 	bl	10004f16 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
100027f6:	2516      	movs	r5, #22
100027f8:	46a5      	mov	sp, r4
		}
	}

	if (ssd1306_init_device(dev)) {
		LOG_ERR("Failed to initialize device!");
		return -EIO;
100027fa:	426d      	negs	r5, r5
100027fc:	e040      	b.n	10002880 <ssd1306_init+0xc4>
	if (config->reset.port) {
100027fe:	68a8      	ldr	r0, [r5, #8]
10002800:	2800      	cmp	r0, #0
10002802:	d119      	bne.n	10002838 <ssd1306_init+0x7c>
	uint8_t cmd_buf[] = {
10002804:	4b5a      	ldr	r3, [pc, #360]	; (10002970 <ssd1306_init+0x1b4>)
	const struct ssd1306_config *config = dev->config;
10002806:	6865      	ldr	r5, [r4, #4]
	uint8_t cmd_buf[] = {
10002808:	82bb      	strh	r3, [r7, #20]
	if (config->reset.port) {
1000280a:	68ab      	ldr	r3, [r5, #8]
1000280c:	2b00      	cmp	r3, #0
1000280e:	d13f      	bne.n	10002890 <ssd1306_init+0xd4>
	if (ssd1306_suspend(dev)) {
10002810:	0020      	movs	r0, r4
10002812:	f7ff ffb7 	bl	10002784 <ssd1306_suspend>
10002816:	2800      	cmp	r0, #0
10002818:	d04c      	beq.n	100028b4 <ssd1306_init+0xf8>
		LOG_ERR("Failed to initialize device!");
1000281a:	4b56      	ldr	r3, [pc, #344]	; (10002974 <ssd1306_init+0x1b8>)
1000281c:	2210      	movs	r2, #16
1000281e:	62fb      	str	r3, [r7, #44]	; 0x2c
10002820:	2302      	movs	r3, #2
10002822:	2182      	movs	r1, #130	; 0x82
10002824:	62bb      	str	r3, [r7, #40]	; 0x28
10002826:	3316      	adds	r3, #22
10002828:	189b      	adds	r3, r3, r2
1000282a:	4850      	ldr	r0, [pc, #320]	; (1000296c <ssd1306_init+0x1b0>)
1000282c:	19da      	adds	r2, r3, r7
1000282e:	0149      	lsls	r1, r1, #5
10002830:	f002 fb71 	bl	10004f16 <z_log_msg_static_create.constprop.0>
		return -EIO;
10002834:	2505      	movs	r5, #5
10002836:	e7e0      	b.n	100027fa <ssd1306_init+0x3e>
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
10002838:	7b2b      	ldrb	r3, [r5, #12]
1000283a:	60fb      	str	r3, [r7, #12]
				  spec->dt_flags | extra_flags);
1000283c:	89eb      	ldrh	r3, [r5, #14]
	const struct gpio_driver_api *api =
1000283e:	6882      	ldr	r2, [r0, #8]
10002840:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
10002842:	6902      	ldr	r2, [r0, #16]
10002844:	60ba      	str	r2, [r7, #8]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10002846:	07d9      	lsls	r1, r3, #31
10002848:	d41e      	bmi.n	10002888 <ssd1306_init+0xcc>
	return gpio_pin_configure(spec->port,
1000284a:	21b0      	movs	r1, #176	; 0xb0
1000284c:	0349      	lsls	r1, r1, #13
1000284e:	430b      	orrs	r3, r1
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002850:	2501      	movs	r5, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10002852:	4949      	ldr	r1, [pc, #292]	; (10002978 <ssd1306_init+0x1bc>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002854:	68ba      	ldr	r2, [r7, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10002856:	4019      	ands	r1, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002858:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
1000285a:	6079      	str	r1, [r7, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
1000285c:	68f9      	ldr	r1, [r7, #12]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
1000285e:	2201      	movs	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002860:	408d      	lsls	r5, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10002862:	0031      	movs	r1, r6
10002864:	43a9      	bics	r1, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10002866:	4213      	tst	r3, r2
10002868:	d001      	beq.n	1000286e <ssd1306_init+0xb2>
		data->invert |= (gpio_port_pins_t)BIT(pin);
1000286a:	0031      	movs	r1, r6
1000286c:	4329      	orrs	r1, r5
1000286e:	68bb      	ldr	r3, [r7, #8]
	return api->pin_configure(port, pin, flags);
10002870:	687a      	ldr	r2, [r7, #4]
10002872:	6019      	str	r1, [r3, #0]
10002874:	4663      	mov	r3, ip
10002876:	68f9      	ldr	r1, [r7, #12]
10002878:	681b      	ldr	r3, [r3, #0]
1000287a:	4798      	blx	r3
1000287c:	1e05      	subs	r5, r0, #0
		if (ret < 0) {
1000287e:	dac1      	bge.n	10002804 <ssd1306_init+0x48>
	}

	return 0;
}
10002880:	0028      	movs	r0, r5
10002882:	46bd      	mov	sp, r7
10002884:	b00d      	add	sp, #52	; 0x34
10002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10002888:	21d0      	movs	r1, #208	; 0xd0
1000288a:	0349      	lsls	r1, r1, #13
1000288c:	404b      	eors	r3, r1
1000288e:	e7df      	b.n	10002850 <ssd1306_init+0x94>
	return z_impl_k_sleep(timeout);
10002890:	2100      	movs	r1, #0
		gpio_pin_set_dt(&config->reset, 1);
10002892:	3508      	adds	r5, #8
10002894:	200a      	movs	r0, #10
10002896:	f001 fb97 	bl	10003fc8 <z_impl_k_sleep>
1000289a:	2101      	movs	r1, #1
1000289c:	0028      	movs	r0, r5
1000289e:	f002 fb6d 	bl	10004f7c <gpio_pin_set_dt.isra.0>
100028a2:	2100      	movs	r1, #0
100028a4:	200a      	movs	r0, #10
100028a6:	f001 fb8f 	bl	10003fc8 <z_impl_k_sleep>
		gpio_pin_set_dt(&config->reset, 0);
100028aa:	2100      	movs	r1, #0
100028ac:	0028      	movs	r0, r5
100028ae:	f002 fb65 	bl	10004f7c <gpio_pin_set_dt.isra.0>
100028b2:	e7ad      	b.n	10002810 <ssd1306_init+0x54>
	uint8_t cmd_buf[] = {
100028b4:	2508      	movs	r5, #8
100028b6:	2310      	movs	r3, #16
100028b8:	18eb      	adds	r3, r5, r3
100028ba:	2206      	movs	r2, #6
100028bc:	492f      	ldr	r1, [pc, #188]	; (1000297c <ssd1306_init+0x1c0>)
100028be:	19d8      	adds	r0, r3, r7
100028c0:	f002 fb14 	bl	10004eec <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100028c4:	2110      	movs	r1, #16
100028c6:	1869      	adds	r1, r5, r1
100028c8:	2301      	movs	r3, #1
100028ca:	2206      	movs	r2, #6
100028cc:	6860      	ldr	r0, [r4, #4]
100028ce:	19c9      	adds	r1, r1, r7
100028d0:	f002 fb2d 	bl	10004f2e <ssd1306_write_bus.isra.0>
	if (ssd1306_set_timing_setting(dev)) {
100028d4:	2800      	cmp	r0, #0
100028d6:	d1a0      	bne.n	1000281a <ssd1306_init+0x5e>
	uint8_t cmd_buf[] = {
100028d8:	2310      	movs	r3, #16
100028da:	18eb      	adds	r3, r5, r3
100028dc:	2207      	movs	r2, #7
100028de:	4928      	ldr	r1, [pc, #160]	; (10002980 <ssd1306_init+0x1c4>)
100028e0:	19d8      	adds	r0, r3, r7
100028e2:	f002 fb03 	bl	10004eec <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100028e6:	2110      	movs	r1, #16
100028e8:	1869      	adds	r1, r5, r1
100028ea:	2301      	movs	r3, #1
100028ec:	2207      	movs	r2, #7
100028ee:	6860      	ldr	r0, [r4, #4]
100028f0:	19c9      	adds	r1, r1, r7
100028f2:	f002 fb1c 	bl	10004f2e <ssd1306_write_bus.isra.0>
	if (ssd1306_set_hardware_config(dev)) {
100028f6:	2800      	cmp	r0, #0
100028f8:	d000      	beq.n	100028fc <ssd1306_init+0x140>
100028fa:	e78e      	b.n	1000281a <ssd1306_init+0x5e>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100028fc:	2110      	movs	r1, #16
	uint8_t cmd_buf[] = {
100028fe:	4b21      	ldr	r3, [pc, #132]	; (10002984 <ssd1306_init+0x1c8>)
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002900:	1869      	adds	r1, r5, r1
	uint8_t cmd_buf[] = {
10002902:	833b      	strh	r3, [r7, #24]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002904:	2202      	movs	r2, #2
10002906:	2301      	movs	r3, #1
10002908:	6860      	ldr	r0, [r4, #4]
1000290a:	19c9      	adds	r1, r1, r7
1000290c:	f002 fb0f 	bl	10004f2e <ssd1306_write_bus.isra.0>
	if (ssd1306_set_panel_orientation(dev)) {
10002910:	2800      	cmp	r0, #0
10002912:	d000      	beq.n	10002916 <ssd1306_init+0x15a>
10002914:	e781      	b.n	1000281a <ssd1306_init+0x5e>
	uint8_t cmd_buf[] = {
10002916:	2310      	movs	r3, #16
10002918:	18eb      	adds	r3, r5, r3
1000291a:	2203      	movs	r2, #3
1000291c:	491a      	ldr	r1, [pc, #104]	; (10002988 <ssd1306_init+0x1cc>)
1000291e:	19d8      	adds	r0, r3, r7
10002920:	f002 fae4 	bl	10004eec <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10002924:	2110      	movs	r1, #16
10002926:	1869      	adds	r1, r5, r1
10002928:	2301      	movs	r3, #1
1000292a:	2203      	movs	r2, #3
1000292c:	6860      	ldr	r0, [r4, #4]
1000292e:	19c9      	adds	r1, r1, r7
10002930:	f002 fafd 	bl	10004f2e <ssd1306_write_bus.isra.0>
	if (ssd1306_set_charge_pump(dev)) {
10002934:	2800      	cmp	r0, #0
10002936:	d000      	beq.n	1000293a <ssd1306_init+0x17e>
10002938:	e76f      	b.n	1000281a <ssd1306_init+0x5e>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
1000293a:	2114      	movs	r1, #20
1000293c:	2301      	movs	r3, #1
1000293e:	2202      	movs	r2, #2
10002940:	6860      	ldr	r0, [r4, #4]
10002942:	1879      	adds	r1, r7, r1
10002944:	f002 faf3 	bl	10004f2e <ssd1306_write_bus.isra.0>
10002948:	2800      	cmp	r0, #0
1000294a:	d000      	beq.n	1000294e <ssd1306_init+0x192>
1000294c:	e765      	b.n	1000281a <ssd1306_init+0x5e>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
1000294e:	2180      	movs	r1, #128	; 0x80
10002950:	0020      	movs	r0, r4
10002952:	f002 fb07 	bl	10004f64 <ssd1306_set_contrast>
10002956:	1e05      	subs	r5, r0, #0
10002958:	d000      	beq.n	1000295c <ssd1306_init+0x1a0>
1000295a:	e75e      	b.n	1000281a <ssd1306_init+0x5e>
	ssd1306_resume(dev);
1000295c:	0020      	movs	r0, r4
1000295e:	f7ff ff1f 	bl	100027a0 <ssd1306_resume>
	return 0;
10002962:	e78d      	b.n	10002880 <ssd1306_init+0xc4>
10002964:	10009900 	.word	0x10009900
10002968:	01000003 	.word	0x01000003
1000296c:	10005cd0 	.word	0x10005cd0
10002970:	ffffa6a4 	.word	0xffffa6a4
10002974:	10009919 	.word	0x10009919
10002978:	ffefffff 	.word	0xffefffff
1000297c:	10009936 	.word	0x10009936
10002980:	10005d0c 	.word	0x10005d0c
10002984:	ffffc8a1 	.word	0xffffc8a1
10002988:	1000993d 	.word	0x1000993d

1000298c <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
1000298c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000298e:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002990:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10002992:	6903      	ldr	r3, [r0, #16]
10002994:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10002996:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10002998:	4a14      	ldr	r2, [pc, #80]	; (100029ec <gpio_rpi_isr+0x60>)
1000299a:	3308      	adds	r3, #8
1000299c:	009b      	lsls	r3, r3, #2
1000299e:	589b      	ldr	r3, [r3, r2]
100029a0:	2207      	movs	r2, #7
100029a2:	4022      	ands	r2, r4
100029a4:	0092      	lsls	r2, r2, #2
100029a6:	40d3      	lsrs	r3, r2
		if (events) {
100029a8:	220f      	movs	r2, #15
100029aa:	4213      	tst	r3, r2
100029ac:	d103      	bne.n	100029b6 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100029ae:	3401      	adds	r4, #1
100029b0:	2c1e      	cmp	r4, #30
100029b2:	d1f0      	bne.n	10002996 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
100029b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
100029b6:	210f      	movs	r1, #15
100029b8:	0020      	movs	r0, r4
100029ba:	f000 fc97 	bl	100032ec <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
100029be:	9b01      	ldr	r3, [sp, #4]
100029c0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100029c2:	2900      	cmp	r1, #0
100029c4:	d0f3      	beq.n	100029ae <gpio_rpi_isr+0x22>
100029c6:	2701      	movs	r7, #1
100029c8:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
100029ca:	680d      	ldr	r5, [r1, #0]
100029cc:	2900      	cmp	r1, #0
100029ce:	d0ee      	beq.n	100029ae <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
100029d0:	688b      	ldr	r3, [r1, #8]
100029d2:	001a      	movs	r2, r3
100029d4:	403a      	ands	r2, r7
100029d6:	423b      	tst	r3, r7
100029d8:	d002      	beq.n	100029e0 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
100029da:	0030      	movs	r0, r6
100029dc:	684b      	ldr	r3, [r1, #4]
100029de:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100029e0:	1e2b      	subs	r3, r5, #0
100029e2:	d000      	beq.n	100029e6 <gpio_rpi_isr+0x5a>
100029e4:	682b      	ldr	r3, [r5, #0]
100029e6:	0029      	movs	r1, r5
100029e8:	001d      	movs	r5, r3
100029ea:	e7ef      	b.n	100029cc <gpio_rpi_isr+0x40>
100029ec:	40014100 	.word	0x40014100

100029f0 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
100029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
100029f2:	6846      	ldr	r6, [r0, #4]
{
100029f4:	b087      	sub	sp, #28
100029f6:	0005      	movs	r5, r0
	struct i2c_dw_dev_config * const dw = dev->data;
100029f8:	6904      	ldr	r4, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100029fa:	466a      	mov	r2, sp
100029fc:	2100      	movs	r1, #0
100029fe:	68f0      	ldr	r0, [r6, #12]
10002a00:	f002 fd2d 	bl	1000545e <pinctrl_lookup_state>
	if (ret < 0) {
10002a04:	2800      	cmp	r0, #0
10002a06:	db1f      	blt.n	10002a48 <i2c_dw_initialize+0x58>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10002a08:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002a0a:	2200      	movs	r2, #0
10002a0c:	7919      	ldrb	r1, [r3, #4]
10002a0e:	6818      	ldr	r0, [r3, #0]
10002a10:	f002 fd38 	bl	10005484 <pinctrl_configure_pins>
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10002a14:	2800      	cmp	r0, #0
10002a16:	d117      	bne.n	10002a48 <i2c_dw_initialize+0x58>
	return z_impl_k_sem_init(sem, initial_count, limit);
10002a18:	2201      	movs	r2, #1
10002a1a:	0001      	movs	r1, r0
10002a1c:	4252      	negs	r2, r2
10002a1e:	0020      	movs	r0, r4
10002a20:	f002 ff0f 	bl	10005842 <z_impl_k_sem_init>
	{
		DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);
	}

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&dw->bus_mutex);
10002a24:	0020      	movs	r0, r4
10002a26:	3010      	adds	r0, #16
	return z_impl_k_mutex_init(mutex);
10002a28:	f002 ff04 	bl	10005834 <z_impl_k_mutex_init>

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002a2c:	2101      	movs	r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002a2e:	686b      	ldr	r3, [r5, #4]
10002a30:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002a32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002a34:	438a      	bics	r2, r1
10002a36:	66da      	str	r2, [r3, #108]	; 0x6c

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10002a38:	001a      	movs	r2, r3
10002a3a:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10002a3c:	6811      	ldr	r1, [r2, #0]

	uint32_t reg_base = get_regs(dev);
	clear_bit_enable_en(reg_base);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
10002a3e:	4a1e      	ldr	r2, [pc, #120]	; (10002ab8 <i2c_dw_initialize+0xc8>)
10002a40:	4291      	cmp	r1, r2
10002a42:	d003      	beq.n	10002a4c <i2c_dw_initialize+0x5c>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10002a44:	2005      	movs	r0, #5
10002a46:	4240      	negs	r0, r0
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10002a48:	b007      	add	sp, #28
10002a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002a4c:	2706      	movs	r7, #6
10002a4e:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
10002a50:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002a52:	403b      	ands	r3, r7
10002a54:	3b06      	subs	r3, #6
10002a56:	425a      	negs	r2, r3
10002a58:	4153      	adcs	r3, r2
10002a5a:	0022      	movs	r2, r4
10002a5c:	323b      	adds	r2, #59	; 0x3b
10002a5e:	7013      	strb	r3, [r2, #0]
	rom->config_func(dev);
10002a60:	6873      	ldr	r3, [r6, #4]
10002a62:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002a64:	68b3      	ldr	r3, [r6, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10002a66:	4a15      	ldr	r2, [pc, #84]	; (10002abc <i2c_dw_initialize+0xcc>)
10002a68:	4293      	cmp	r3, r2
10002a6a:	d014      	beq.n	10002a96 <i2c_dw_initialize+0xa6>
10002a6c:	d81e      	bhi.n	10002aac <i2c_dw_initialize+0xbc>
10002a6e:	4a14      	ldr	r2, [pc, #80]	; (10002ac0 <i2c_dw_initialize+0xd0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10002a70:	3f04      	subs	r7, #4
	switch (bitrate) {
10002a72:	4293      	cmp	r3, r2
10002a74:	d00f      	beq.n	10002a96 <i2c_dw_initialize+0xa6>
10002a76:	4a13      	ldr	r2, [pc, #76]	; (10002ac4 <i2c_dw_initialize+0xd4>)
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10002a78:	3702      	adds	r7, #2
	switch (bitrate) {
10002a7a:	4293      	cmp	r3, r2
10002a7c:	d00b      	beq.n	10002a96 <i2c_dw_initialize+0xa6>
	}

	LOG_ERR("Invalid I2C bit rate value");
10002a7e:	4b12      	ldr	r3, [pc, #72]	; (10002ac8 <i2c_dw_initialize+0xd8>)
10002a80:	9305      	str	r3, [sp, #20]
10002a82:	2302      	movs	r3, #2
10002a84:	9304      	str	r3, [sp, #16]
10002a86:	2182      	movs	r1, #130	; 0x82

	return 0;
10002a88:	2700      	movs	r7, #0
10002a8a:	2300      	movs	r3, #0
10002a8c:	480f      	ldr	r0, [pc, #60]	; (10002acc <i2c_dw_initialize+0xdc>)
10002a8e:	aa04      	add	r2, sp, #16
10002a90:	0149      	lsls	r1, r1, #5
10002a92:	f7fe fff5 	bl	10001a80 <z_impl_z_log_msg_static_create>
10002a96:	2110      	movs	r1, #16
10002a98:	4339      	orrs	r1, r7
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002a9a:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002a9c:	6261      	str	r1, [r4, #36]	; 0x24
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002a9e:	f002 fb8b 	bl	100051b8 <i2c_dw_runtime_configure>
10002aa2:	2800      	cmp	r0, #0
10002aa4:	d1ce      	bne.n	10002a44 <i2c_dw_initialize+0x54>
	dw->state = I2C_DW_STATE_READY;
10002aa6:	3438      	adds	r4, #56	; 0x38
10002aa8:	7020      	strb	r0, [r4, #0]
	return ret;
10002aaa:	e7cd      	b.n	10002a48 <i2c_dw_initialize+0x58>
	switch (bitrate) {
10002aac:	4a08      	ldr	r2, [pc, #32]	; (10002ad0 <i2c_dw_initialize+0xe0>)
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10002aae:	2708      	movs	r7, #8
	switch (bitrate) {
10002ab0:	4293      	cmp	r3, r2
10002ab2:	d0f0      	beq.n	10002a96 <i2c_dw_initialize+0xa6>
10002ab4:	4a07      	ldr	r2, [pc, #28]	; (10002ad4 <i2c_dw_initialize+0xe4>)
10002ab6:	e7df      	b.n	10002a78 <i2c_dw_initialize+0x88>
10002ab8:	44570140 	.word	0x44570140
10002abc:	000f4240 	.word	0x000f4240
10002ac0:	000186a0 	.word	0x000186a0
10002ac4:	00061a80 	.word	0x00061a80
10002ac8:	10009966 	.word	0x10009966
10002acc:	10005ca0 	.word	0x10005ca0
10002ad0:	0033e140 	.word	0x0033e140
10002ad4:	004c4b40 	.word	0x004c4b40

10002ad8 <i2c_dw_transfer>:
{
10002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
10002ada:	2500      	movs	r5, #0
{
10002adc:	b087      	sub	sp, #28
10002ade:	0007      	movs	r7, r0
10002ae0:	9102      	str	r1, [sp, #8]
10002ae2:	9203      	str	r2, [sp, #12]
10002ae4:	9305      	str	r3, [sp, #20]
	if (!num_msgs) {
10002ae6:	42aa      	cmp	r2, r5
10002ae8:	d100      	bne.n	10002aec <i2c_dw_transfer+0x14>
10002aea:	e0b6      	b.n	10002c5a <i2c_dw_transfer+0x182>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002aec:	6843      	ldr	r3, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002aee:	6904      	ldr	r4, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002af0:	681b      	ldr	r3, [r3, #0]
10002af2:	9301      	str	r3, [sp, #4]
	ret = k_mutex_lock(&dw->bus_mutex, K_FOREVER);
10002af4:	0023      	movs	r3, r4
10002af6:	3310      	adds	r3, #16
10002af8:	9304      	str	r3, [sp, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
10002afa:	2201      	movs	r2, #1
10002afc:	4252      	negs	r2, r2
10002afe:	17d3      	asrs	r3, r2, #31
10002b00:	9804      	ldr	r0, [sp, #16]
10002b02:	f000 febf 	bl	10003884 <z_impl_k_mutex_lock>
10002b06:	1e05      	subs	r5, r0, #0
	if (ret != 0) {
10002b08:	d000      	beq.n	10002b0c <i2c_dw_transfer+0x34>
10002b0a:	e0a6      	b.n	10002c5a <i2c_dw_transfer+0x182>
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002b0c:	2201      	movs	r2, #1
}

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
10002b0e:	9b01      	ldr	r3, [sp, #4]
10002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10002b12:	4213      	tst	r3, r2
10002b14:	d000      	beq.n	10002b18 <i2c_dw_transfer+0x40>
10002b16:	e0c7      	b.n	10002ca8 <i2c_dw_transfer+0x1d0>
10002b18:	0021      	movs	r1, r4
10002b1a:	2308      	movs	r3, #8
10002b1c:	3138      	adds	r1, #56	; 0x38
10002b1e:	7808      	ldrb	r0, [r1, #0]
10002b20:	4218      	tst	r0, r3
10002b22:	d000      	beq.n	10002b26 <i2c_dw_transfer+0x4e>
10002b24:	e0c0      	b.n	10002ca8 <i2c_dw_transfer+0x1d0>
	dw->state |= I2C_DW_BUSY;
10002b26:	7808      	ldrb	r0, [r1, #0]
10002b28:	4303      	orrs	r3, r0
10002b2a:	700b      	strb	r3, [r1, #0]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002b2c:	687b      	ldr	r3, [r7, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002b2e:	6939      	ldr	r1, [r7, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002b30:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002b32:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002b34:	4390      	bics	r0, r2
10002b36:	66d8      	str	r0, [r3, #108]	; 0x6c
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002b38:	631d      	str	r5, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10002b3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002b3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
10002b3e:	06c7      	lsls	r7, r0, #27
10002b40:	d402      	bmi.n	10002b48 <i2c_dw_transfer+0x70>
		return -EINVAL;
10002b42:	2516      	movs	r5, #22
10002b44:	426d      	negs	r5, r5
10002b46:	e082      	b.n	10002c4e <i2c_dw_transfer+0x176>
		ic_con.bits.master_mode = 1U;
10002b48:	2761      	movs	r7, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
10002b4a:	4210      	tst	r0, r2
10002b4c:	d000      	beq.n	10002b50 <i2c_dw_transfer+0x78>
		ic_con.bits.addr_slave_10bit = 1U;
10002b4e:	3718      	adds	r7, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
10002b50:	2207      	movs	r2, #7
10002b52:	0840      	lsrs	r0, r0, #1
10002b54:	4002      	ands	r2, r0
10002b56:	0746      	lsls	r6, r0, #29
10002b58:	d500      	bpl.n	10002b5c <i2c_dw_transfer+0x84>
10002b5a:	e081      	b.n	10002c60 <i2c_dw_transfer+0x188>
10002b5c:	2606      	movs	r6, #6
10002b5e:	4230      	tst	r0, r6
10002b60:	d000      	beq.n	10002b64 <i2c_dw_transfer+0x8c>
10002b62:	e08c      	b.n	10002c7e <i2c_dw_transfer+0x1a6>
10002b64:	2a01      	cmp	r2, #1
10002b66:	d1ec      	bne.n	10002b42 <i2c_dw_transfer+0x6a>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
10002b68:	8ec8      	ldrh	r0, [r1, #54]	; 0x36
	*(volatile uint32_t *)addr = data;
10002b6a:	6198      	str	r0, [r3, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10002b6c:	8e88      	ldrh	r0, [r1, #52]	; 0x34
10002b6e:	6158      	str	r0, [r3, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10002b70:	2006      	movs	r0, #6
10002b72:	0052      	lsls	r2, r2, #1
10002b74:	4387      	bics	r7, r0
10002b76:	4317      	orrs	r7, r2
10002b78:	2200      	movs	r2, #0
10002b7a:	601f      	str	r7, [r3, #0]
10002b7c:	639a      	str	r2, [r3, #56]	; 0x38
10002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10002b80:	685a      	ldr	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002b82:	6818      	ldr	r0, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10002b84:	07c0      	lsls	r0, r0, #31
10002b86:	d400      	bmi.n	10002b8a <i2c_dw_transfer+0xb2>
10002b88:	e07f      	b.n	10002c8a <i2c_dw_transfer+0x1b2>
		ic_tar.bits.ic_tar = slave_address;
10002b8a:	9805      	ldr	r0, [sp, #20]
10002b8c:	0a92      	lsrs	r2, r2, #10
10002b8e:	0580      	lsls	r0, r0, #22
10002b90:	0d80      	lsrs	r0, r0, #22
10002b92:	0292      	lsls	r2, r2, #10
10002b94:	4302      	orrs	r2, r0
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002b96:	6a49      	ldr	r1, [r1, #36]	; 0x24
10002b98:	06c8      	lsls	r0, r1, #27
10002b9a:	d505      	bpl.n	10002ba8 <i2c_dw_transfer+0xd0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10002b9c:	07c9      	lsls	r1, r1, #31
10002b9e:	d400      	bmi.n	10002ba2 <i2c_dw_transfer+0xca>
10002ba0:	e076      	b.n	10002c90 <i2c_dw_transfer+0x1b8>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10002ba2:	2180      	movs	r1, #128	; 0x80
10002ba4:	0149      	lsls	r1, r1, #5
10002ba6:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002ba8:	2701      	movs	r7, #1
	*(volatile uint32_t *)addr = data;
10002baa:	605a      	str	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002bac:	9b01      	ldr	r3, [sp, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002bae:	9a01      	ldr	r2, [sp, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002bb2:	433b      	orrs	r3, r7
10002bb4:	66d3      	str	r3, [r2, #108]	; 0x6c
		pflags = dw->xfr_flags;
10002bb6:	0023      	movs	r3, r4
		dw->rx_pending = 0U;
10002bb8:	2600      	movs	r6, #0
		dw->xfr_buf = cur_msg->buf;
10002bba:	9a02      	ldr	r2, [sp, #8]
		pflags = dw->xfr_flags;
10002bbc:	333a      	adds	r3, #58	; 0x3a
		dw->xfr_buf = cur_msg->buf;
10002bbe:	6812      	ldr	r2, [r2, #0]
		pflags = dw->xfr_flags;
10002bc0:	7818      	ldrb	r0, [r3, #0]
		dw->xfr_buf = cur_msg->buf;
10002bc2:	62a2      	str	r2, [r4, #40]	; 0x28
		dw->xfr_len = cur_msg->len;
10002bc4:	9a02      	ldr	r2, [sp, #8]
10002bc6:	6851      	ldr	r1, [r2, #4]
10002bc8:	62e1      	str	r1, [r4, #44]	; 0x2c
		dw->xfr_flags = cur_msg->flags;
10002bca:	7a12      	ldrb	r2, [r2, #8]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
10002bcc:	4050      	eors	r0, r2
		dw->xfr_flags = cur_msg->flags;
10002bce:	701a      	strb	r2, [r3, #0]
		dw->rx_pending = 0U;
10002bd0:	6326      	str	r6, [r4, #48]	; 0x30
		if ((pflags & I2C_MSG_RW_MASK)
10002bd2:	4238      	tst	r0, r7
10002bd4:	d002      	beq.n	10002bdc <i2c_dw_transfer+0x104>
			dw->xfr_flags |= I2C_MSG_RESTART;
10002bd6:	2004      	movs	r0, #4
10002bd8:	4302      	orrs	r2, r0
10002bda:	701a      	strb	r2, [r3, #0]
		if (msg_left == 1U) {
10002bdc:	9a03      	ldr	r2, [sp, #12]
10002bde:	2a01      	cmp	r2, #1
10002be0:	d103      	bne.n	10002bea <i2c_dw_transfer+0x112>
			dw->xfr_flags |= I2C_MSG_STOP;
10002be2:	7818      	ldrb	r0, [r3, #0]
10002be4:	3201      	adds	r2, #1
10002be6:	4302      	orrs	r2, r0
10002be8:	701a      	strb	r2, [r3, #0]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10002bea:	0023      	movs	r3, r4
10002bec:	2003      	movs	r0, #3
10002bee:	3338      	adds	r3, #56	; 0x38
10002bf0:	781a      	ldrb	r2, [r3, #0]
10002bf2:	4382      	bics	r2, r0
10002bf4:	701a      	strb	r2, [r3, #0]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10002bf6:	0022      	movs	r2, r4
10002bf8:	323a      	adds	r2, #58	; 0x3a
10002bfa:	7812      	ldrb	r2, [r2, #0]
10002bfc:	0010      	movs	r0, r2
10002bfe:	4038      	ands	r0, r7
10002c00:	423a      	tst	r2, r7
10002c02:	d148      	bne.n	10002c96 <i2c_dw_transfer+0x1be>
			dw->state |= I2C_DW_CMD_SEND;
10002c04:	781a      	ldrb	r2, [r3, #0]
10002c06:	433a      	orrs	r2, r7
10002c08:	701a      	strb	r2, [r3, #0]
			dw->request_bytes = 0U;
10002c0a:	0023      	movs	r3, r4
10002c0c:	3339      	adds	r3, #57	; 0x39
10002c0e:	7018      	strb	r0, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002c10:	9b01      	ldr	r3, [sp, #4]
10002c12:	681b      	ldr	r3, [r3, #0]
		if (test_bit_con_master_mode(reg_base)) {
10002c14:	423b      	tst	r3, r7
10002c16:	d044      	beq.n	10002ca2 <i2c_dw_transfer+0x1ca>
10002c18:	4b25      	ldr	r3, [pc, #148]	; (10002cb0 <i2c_dw_transfer+0x1d8>)
10002c1a:	9a01      	ldr	r2, [sp, #4]
10002c1c:	6313      	str	r3, [r2, #48]	; 0x30
	return z_impl_k_sem_take(sem, timeout);
10002c1e:	2201      	movs	r2, #1
10002c20:	4252      	negs	r2, r2
10002c22:	17d3      	asrs	r3, r2, #31
10002c24:	0020      	movs	r0, r4
10002c26:	f000 fefb 	bl	10003a20 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
10002c2a:	0023      	movs	r3, r4
10002c2c:	2204      	movs	r2, #4
10002c2e:	3338      	adds	r3, #56	; 0x38
10002c30:	781b      	ldrb	r3, [r3, #0]
10002c32:	4213      	tst	r3, r2
10002c34:	d13a      	bne.n	10002cac <i2c_dw_transfer+0x1d4>
		if (dw->xfr_len > 0) {
10002c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10002c38:	2b00      	cmp	r3, #0
10002c3a:	d137      	bne.n	10002cac <i2c_dw_transfer+0x1d4>
		cur_msg++;
10002c3c:	9b02      	ldr	r3, [sp, #8]
10002c3e:	330c      	adds	r3, #12
10002c40:	9302      	str	r3, [sp, #8]
		msg_left--;
10002c42:	9b03      	ldr	r3, [sp, #12]
10002c44:	3b01      	subs	r3, #1
10002c46:	b2db      	uxtb	r3, r3
10002c48:	9303      	str	r3, [sp, #12]
	while (msg_left > 0) {
10002c4a:	2b00      	cmp	r3, #0
10002c4c:	d1b3      	bne.n	10002bb6 <i2c_dw_transfer+0xde>
	dw->state = I2C_DW_STATE_READY;
10002c4e:	2300      	movs	r3, #0
10002c50:	3438      	adds	r4, #56	; 0x38
10002c52:	7023      	strb	r3, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
10002c54:	9804      	ldr	r0, [sp, #16]
10002c56:	f000 fe8d 	bl	10003974 <z_impl_k_mutex_unlock>
}
10002c5a:	0028      	movs	r0, r5
10002c5c:	b007      	add	sp, #28
10002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (I2C_SPEED_GET(dw->app_config)) {
10002c60:	2a04      	cmp	r2, #4
10002c62:	d000      	beq.n	10002c66 <i2c_dw_transfer+0x18e>
10002c64:	e76d      	b.n	10002b42 <i2c_dw_transfer+0x6a>
		if (!dw->support_hs_mode) {
10002c66:	000a      	movs	r2, r1
10002c68:	323b      	adds	r2, #59	; 0x3b
10002c6a:	7812      	ldrb	r2, [r2, #0]
10002c6c:	2a00      	cmp	r2, #0
10002c6e:	d100      	bne.n	10002c72 <i2c_dw_transfer+0x19a>
10002c70:	e767      	b.n	10002b42 <i2c_dw_transfer+0x6a>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10002c72:	8eca      	ldrh	r2, [r1, #54]	; 0x36
10002c74:	629a      	str	r2, [r3, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10002c76:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
10002c78:	625a      	str	r2, [r3, #36]	; 0x24
		break;
10002c7a:	2203      	movs	r2, #3
10002c7c:	e778      	b.n	10002b70 <i2c_dw_transfer+0x98>
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10002c7e:	8eca      	ldrh	r2, [r1, #54]	; 0x36
10002c80:	621a      	str	r2, [r3, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10002c82:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
10002c84:	61da      	str	r2, [r3, #28]
		break;
10002c86:	2202      	movs	r2, #2
10002c88:	e772      	b.n	10002b70 <i2c_dw_transfer+0x98>
10002c8a:	9805      	ldr	r0, [sp, #20]
10002c8c:	6098      	str	r0, [r3, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10002c8e:	e782      	b.n	10002b96 <i2c_dw_transfer+0xbe>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10002c90:	4908      	ldr	r1, [pc, #32]	; (10002cb4 <i2c_dw_transfer+0x1dc>)
10002c92:	400a      	ands	r2, r1
10002c94:	e788      	b.n	10002ba8 <i2c_dw_transfer+0xd0>
			dw->state |= I2C_DW_CMD_RECV;
10002c96:	2202      	movs	r2, #2
10002c98:	7818      	ldrb	r0, [r3, #0]
10002c9a:	4302      	orrs	r2, r0
10002c9c:	701a      	strb	r2, [r3, #0]
			dw->request_bytes = dw->xfr_len;
10002c9e:	b2c8      	uxtb	r0, r1
10002ca0:	e7b3      	b.n	10002c0a <i2c_dw_transfer+0x132>
10002ca2:	2398      	movs	r3, #152	; 0x98
10002ca4:	009b      	lsls	r3, r3, #2
10002ca6:	e7b8      	b.n	10002c1a <i2c_dw_transfer+0x142>
		ret = -EBUSY;
10002ca8:	2510      	movs	r5, #16
10002caa:	e74b      	b.n	10002b44 <i2c_dw_transfer+0x6c>
10002cac:	2505      	movs	r5, #5
10002cae:	e749      	b.n	10002b44 <i2c_dw_transfer+0x6c>
10002cb0:	0000025f 	.word	0x0000025f
10002cb4:	ffffefff 	.word	0xffffefff

10002cb8 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10002cb8:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002cba:	4903      	ldr	r1, [pc, #12]	; (10002cc8 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002cbc:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002cbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002cc0:	400b      	ands	r3, r1
10002cc2:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002cc4:	4770      	bx	lr
10002cc6:	46c0      	nop			; (mov r8, r8)
10002cc8:	fffff83f 	.word	0xfffff83f

10002ccc <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10002ccc:	b510      	push	{r4, lr}
10002cce:	2b03      	cmp	r3, #3
10002cd0:	d823      	bhi.n	10002d1a <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10002cd2:	2a01      	cmp	r2, #1
10002cd4:	d002      	beq.n	10002cdc <uart_rpi_set_format.isra.0+0x10>
10002cd6:	2a03      	cmp	r2, #3
10002cd8:	d11f      	bne.n	10002d1a <uart_rpi_set_format.isra.0+0x4e>
10002cda:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10002cdc:	2902      	cmp	r1, #2
10002cde:	d81c      	bhi.n	10002d1a <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10002ce0:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002ce2:	3a01      	subs	r2, #1
10002ce4:	480e      	ldr	r0, [pc, #56]	; (10002d20 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002ce6:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002ce8:	00d2      	lsls	r2, r2, #3
10002cea:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002cec:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002cee:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002cf0:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002cf2:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002cf4:	4299      	cmp	r1, r3
10002cf6:	d005      	beq.n	10002d04 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002cf8:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002cfa:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002cfc:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002cfe:	424b      	negs	r3, r1
10002d00:	4159      	adcs	r1, r3
10002d02:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002d04:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002d06:	236e      	movs	r3, #110	; 0x6e
10002d08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10002d0a:	404a      	eors	r2, r1
10002d0c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002d0e:	2380      	movs	r3, #128	; 0x80
10002d10:	015b      	lsls	r3, r3, #5
10002d12:	4303      	orrs	r3, r0
	return 0;
10002d14:	2000      	movs	r0, #0
10002d16:	601a      	str	r2, [r3, #0]
}
10002d18:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002d1a:	2016      	movs	r0, #22
10002d1c:	4240      	negs	r0, r0
10002d1e:	e7fb      	b.n	10002d18 <uart_rpi_set_format.isra.0+0x4c>
10002d20:	100099af 	.word	0x100099af

10002d24 <uart_rpi_init>:
{
10002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10002d26:	6845      	ldr	r5, [r0, #4]
{
10002d28:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10002d2a:	682b      	ldr	r3, [r5, #0]
{
10002d2c:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10002d2e:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10002d30:	2100      	movs	r1, #0
10002d32:	68a8      	ldr	r0, [r5, #8]
10002d34:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10002d36:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10002d38:	9301      	str	r3, [sp, #4]
10002d3a:	f002 fb90 	bl	1000545e <pinctrl_lookup_state>
	if (ret < 0) {
10002d3e:	2800      	cmp	r0, #0
10002d40:	db23      	blt.n	10002d8a <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10002d42:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002d44:	2200      	movs	r2, #0
10002d46:	7919      	ldrb	r1, [r3, #4]
10002d48:	6818      	ldr	r0, [r3, #0]
10002d4a:	f002 fb9b 	bl	10005484 <pinctrl_configure_pins>
	if (ret < 0) {
10002d4e:	2800      	cmp	r0, #0
10002d50:	db1b      	blt.n	10002d8a <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10002d52:	6831      	ldr	r1, [r6, #0]
10002d54:	9801      	ldr	r0, [sp, #4]
10002d56:	f000 fb33 	bl	100033c0 <uart_init>
	if (baudrate == 0) {
10002d5a:	2800      	cmp	r0, #0
10002d5c:	d017      	beq.n	10002d8e <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10002d5e:	4b0d      	ldr	r3, [pc, #52]	; (10002d94 <uart_rpi_init+0x70>)
10002d60:	6030      	str	r0, [r6, #0]
10002d62:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10002d64:	2201      	movs	r2, #1
10002d66:	2303      	movs	r3, #3
10002d68:	2100      	movs	r1, #0
10002d6a:	6860      	ldr	r0, [r4, #4]
10002d6c:	f7ff ffae 	bl	10002ccc <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10002d70:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002d72:	23c0      	movs	r3, #192	; 0xc0
10002d74:	322c      	adds	r2, #44	; 0x2c
10002d76:	019b      	lsls	r3, r3, #6
10002d78:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10002d7a:	2600      	movs	r6, #0
10002d7c:	2210      	movs	r2, #16
10002d7e:	601a      	str	r2, [r3, #0]
10002d80:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10002d82:	0020      	movs	r0, r4
10002d84:	696b      	ldr	r3, [r5, #20]
10002d86:	4798      	blx	r3
	return 0;
10002d88:	0030      	movs	r0, r6
}
10002d8a:	b005      	add	sp, #20
10002d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002d8e:	2016      	movs	r0, #22
10002d90:	4240      	negs	r0, r0
10002d92:	e7fa      	b.n	10002d8a <uart_rpi_init+0x66>
10002d94:	00030100 	.word	0x00030100

10002d98 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10002d98:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10002d9a:	4b0a      	ldr	r3, [pc, #40]	; (10002dc4 <elapsed+0x2c>)
10002d9c:	4a0a      	ldr	r2, [pc, #40]	; (10002dc8 <elapsed+0x30>)
10002d9e:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002da0:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002da2:	4d0a      	ldr	r5, [pc, #40]	; (10002dcc <elapsed+0x34>)
10002da4:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10002da6:	03c9      	lsls	r1, r1, #15
10002da8:	d401      	bmi.n	10002dae <elapsed+0x16>
	    || (val1 < val2)) {
10002daa:	42a0      	cmp	r0, r4
10002dac:	d204      	bcs.n	10002db8 <elapsed+0x20>
		overflow_cyc += last_load;
10002dae:	6811      	ldr	r1, [r2, #0]
10002db0:	6828      	ldr	r0, [r5, #0]
10002db2:	1809      	adds	r1, r1, r0
10002db4:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10002db6:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10002db8:	682b      	ldr	r3, [r5, #0]
10002dba:	6810      	ldr	r0, [r2, #0]
10002dbc:	18c0      	adds	r0, r0, r3
10002dbe:	1b00      	subs	r0, r0, r4
}
10002dc0:	bd30      	pop	{r4, r5, pc}
10002dc2:	46c0      	nop			; (mov r8, r8)
10002dc4:	e000e010 	.word	0xe000e010
10002dc8:	20000af4 	.word	0x20000af4
10002dcc:	20000b00 	.word	0x20000b00

10002dd0 <sys_clock_driver_init>:
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002dd0:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002dd2:	4a09      	ldr	r2, [pc, #36]	; (10002df8 <sys_clock_driver_init+0x28>)
10002dd4:	6a13      	ldr	r3, [r2, #32]
10002dd6:	021b      	lsls	r3, r3, #8
10002dd8:	0a1b      	lsrs	r3, r3, #8
10002dda:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002ddc:	4b07      	ldr	r3, [pc, #28]	; (10002dfc <sys_clock_driver_init+0x2c>)
10002dde:	4a08      	ldr	r2, [pc, #32]	; (10002e00 <sys_clock_driver_init+0x30>)
10002de0:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002de2:	4b08      	ldr	r3, [pc, #32]	; (10002e04 <sys_clock_driver_init+0x34>)
10002de4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002de6:	4b08      	ldr	r3, [pc, #32]	; (10002e08 <sys_clock_driver_init+0x38>)
10002de8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002dea:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002dec:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002dee:	6819      	ldr	r1, [r3, #0]
10002df0:	430a      	orrs	r2, r1
10002df2:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002df4:	4770      	bx	lr
10002df6:	46c0      	nop			; (mov r8, r8)
10002df8:	e000ed00 	.word	0xe000ed00
10002dfc:	20000b00 	.word	0x20000b00
10002e00:	000030d3 	.word	0x000030d3
10002e04:	20000af4 	.word	0x20000af4
10002e08:	e000e010 	.word	0xe000e010

10002e0c <sys_clock_isr>:
{
10002e0c:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002e0e:	f7ff ffc3 	bl	10002d98 <elapsed>
	cycle_count += overflow_cyc;
10002e12:	4b0b      	ldr	r3, [pc, #44]	; (10002e40 <sys_clock_isr+0x34>)
10002e14:	4a0b      	ldr	r2, [pc, #44]	; (10002e44 <sys_clock_isr+0x38>)
10002e16:	6818      	ldr	r0, [r3, #0]
10002e18:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002e1a:	4c0b      	ldr	r4, [pc, #44]	; (10002e48 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002e1c:	1840      	adds	r0, r0, r1
10002e1e:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002e20:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002e22:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002e24:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002e26:	4909      	ldr	r1, [pc, #36]	; (10002e4c <sys_clock_isr+0x40>)
10002e28:	1b40      	subs	r0, r0, r5
10002e2a:	f7fd f9d1 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10002e2e:	4b07      	ldr	r3, [pc, #28]	; (10002e4c <sys_clock_isr+0x40>)
10002e30:	4343      	muls	r3, r0
10002e32:	195b      	adds	r3, r3, r5
10002e34:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10002e36:	f001 fa13 	bl	10004260 <sys_clock_announce>
	z_arm_int_exit();
10002e3a:	f7ff fa75 	bl	10002328 <z_arm_exc_exit>
}
10002e3e:	bd70      	pop	{r4, r5, r6, pc}
10002e40:	20000af4 	.word	0x20000af4
10002e44:	20000afc 	.word	0x20000afc
10002e48:	20000af8 	.word	0x20000af8
10002e4c:	000030d4 	.word	0x000030d4

10002e50 <sys_clock_set_timeout>:
{
10002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
10002e52:	4d32      	ldr	r5, [pc, #200]	; (10002f1c <sys_clock_set_timeout+0xcc>)
10002e54:	4f32      	ldr	r7, [pc, #200]	; (10002f20 <sys_clock_set_timeout+0xd0>)
10002e56:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10002e58:	2900      	cmp	r1, #0
10002e5a:	d054      	beq.n	10002f06 <sys_clock_set_timeout+0xb6>
10002e5c:	1c43      	adds	r3, r0, #1
10002e5e:	d108      	bne.n	10002e72 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10002e60:	2201      	movs	r2, #1
10002e62:	682b      	ldr	r3, [r5, #0]
10002e64:	4393      	bics	r3, r2
10002e66:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10002e68:	23ff      	movs	r3, #255	; 0xff
10002e6a:	061b      	lsls	r3, r3, #24
10002e6c:	603b      	str	r3, [r7, #0]
}
10002e6e:	b005      	add	sp, #20
10002e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10002e72:	683b      	ldr	r3, [r7, #0]
10002e74:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10002e76:	2600      	movs	r6, #0
10002e78:	2801      	cmp	r0, #1
10002e7a:	dd04      	ble.n	10002e86 <sys_clock_set_timeout+0x36>
10002e7c:	4b29      	ldr	r3, [pc, #164]	; (10002f24 <sys_clock_set_timeout+0xd4>)
10002e7e:	001e      	movs	r6, r3
10002e80:	4298      	cmp	r0, r3
10002e82:	dc00      	bgt.n	10002e86 <sys_clock_set_timeout+0x36>
10002e84:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10002e86:	f3ef 8310 	mrs	r3, PRIMASK
10002e8a:	b672      	cpsid	i
10002e8c:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10002e8e:	f7ff ff83 	bl	10002d98 <elapsed>
	overflow_cyc = 0U;
10002e92:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10002e94:	68ab      	ldr	r3, [r5, #8]
10002e96:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10002e98:	4b23      	ldr	r3, [pc, #140]	; (10002f28 <sys_clock_set_timeout+0xd8>)
10002e9a:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10002e9c:	4b23      	ldr	r3, [pc, #140]	; (10002f2c <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10002e9e:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10002ea0:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10002ea2:	4b23      	ldr	r3, [pc, #140]	; (10002f30 <sys_clock_set_timeout+0xe0>)
10002ea4:	681b      	ldr	r3, [r3, #0]
10002ea6:	9300      	str	r3, [sp, #0]
10002ea8:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10002eaa:	4290      	cmp	r0, r2
10002eac:	db31      	blt.n	10002f12 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10002eae:	4b21      	ldr	r3, [pc, #132]	; (10002f34 <sys_clock_set_timeout+0xe4>)
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
10002eb0:	4a21      	ldr	r2, [pc, #132]	; (10002f38 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10002eb2:	435e      	muls	r6, r3
		delay += unannounced;
10002eb4:	1980      	adds	r0, r0, r6
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
10002eb6:	0019      	movs	r1, r3
10002eb8:	1880      	adds	r0, r0, r2
10002eba:	f7fd f989 	bl	100001d0 <__udivsi3>
10002ebe:	4b1d      	ldr	r3, [pc, #116]	; (10002f34 <sys_clock_set_timeout+0xe4>)
10002ec0:	4358      	muls	r0, r3
		delay -= unannounced;
10002ec2:	9b00      	ldr	r3, [sp, #0]
10002ec4:	1b1b      	subs	r3, r3, r4
10002ec6:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10002ec8:	2380      	movs	r3, #128	; 0x80
10002eca:	00db      	lsls	r3, r3, #3
10002ecc:	4298      	cmp	r0, r3
10002ece:	d923      	bls.n	10002f18 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10002ed0:	4b1a      	ldr	r3, [pc, #104]	; (10002f3c <sys_clock_set_timeout+0xec>)
10002ed2:	4298      	cmp	r0, r3
10002ed4:	d820      	bhi.n	10002f18 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10002ed6:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10002ed8:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10002eda:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10002edc:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10002ede:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10002ee0:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10002ee2:	9b02      	ldr	r3, [sp, #8]
10002ee4:	9802      	ldr	r0, [sp, #8]
10002ee6:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10002ee8:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10002eea:	4288      	cmp	r0, r1
10002eec:	d202      	bcs.n	10002ef4 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10002eee:	9a01      	ldr	r2, [sp, #4]
10002ef0:	189b      	adds	r3, r3, r2
10002ef2:	191a      	adds	r2, r3, r4
10002ef4:	4b0c      	ldr	r3, [pc, #48]	; (10002f28 <sys_clock_set_timeout+0xd8>)
10002ef6:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10002ef8:	9b03      	ldr	r3, [sp, #12]
10002efa:	2b00      	cmp	r3, #0
10002efc:	d1b7      	bne.n	10002e6e <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10002efe:	b662      	cpsie	i
10002f00:	f3bf 8f6f 	isb	sy
10002f04:	e7b3      	b.n	10002e6e <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10002f06:	683b      	ldr	r3, [r7, #0]
10002f08:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10002f0a:	1c43      	adds	r3, r0, #1
10002f0c:	d1b3      	bne.n	10002e76 <sys_clock_set_timeout+0x26>
10002f0e:	4805      	ldr	r0, [pc, #20]	; (10002f24 <sys_clock_set_timeout+0xd4>)
10002f10:	e7b8      	b.n	10002e84 <sys_clock_set_timeout+0x34>
10002f12:	2080      	movs	r0, #128	; 0x80
10002f14:	00c0      	lsls	r0, r0, #3
10002f16:	e7de      	b.n	10002ed6 <sys_clock_set_timeout+0x86>
10002f18:	0018      	movs	r0, r3
10002f1a:	e7dc      	b.n	10002ed6 <sys_clock_set_timeout+0x86>
10002f1c:	e000e010 	.word	0xe000e010
10002f20:	20000b00 	.word	0x20000b00
10002f24:	0000053d 	.word	0x0000053d
10002f28:	20000afc 	.word	0x20000afc
10002f2c:	20000af4 	.word	0x20000af4
10002f30:	20000af8 	.word	0x20000af8
10002f34:	000030d4 	.word	0x000030d4
10002f38:	000030d3 	.word	0x000030d3
10002f3c:	00ffc684 	.word	0x00ffc684

10002f40 <sys_clock_elapsed>:
{
10002f40:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002f42:	f3ef 8410 	mrs	r4, PRIMASK
10002f46:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10002f48:	f7ff ff26 	bl	10002d98 <elapsed>
10002f4c:	4b07      	ldr	r3, [pc, #28]	; (10002f6c <sys_clock_elapsed+0x2c>)
10002f4e:	4a08      	ldr	r2, [pc, #32]	; (10002f70 <sys_clock_elapsed+0x30>)
10002f50:	681b      	ldr	r3, [r3, #0]
10002f52:	6812      	ldr	r2, [r2, #0]
10002f54:	1a9b      	subs	r3, r3, r2
10002f56:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10002f58:	2c00      	cmp	r4, #0
10002f5a:	d102      	bne.n	10002f62 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10002f5c:	b662      	cpsie	i
10002f5e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10002f62:	4904      	ldr	r1, [pc, #16]	; (10002f74 <sys_clock_elapsed+0x34>)
10002f64:	f7fd f934 	bl	100001d0 <__udivsi3>
}
10002f68:	bd10      	pop	{r4, pc}
10002f6a:	46c0      	nop			; (mov r8, r8)
10002f6c:	20000afc 	.word	0x20000afc
10002f70:	20000af8 	.word	0x20000af8
10002f74:	000030d4 	.word	0x000030d4

10002f78 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f7a:	b085      	sub	sp, #20
10002f7c:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10002f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002f80:	0005      	movs	r5, r0
10002f82:	000f      	movs	r7, r1
        return false;
10002f84:	2000      	movs	r0, #0
    if (freq > src_freq)
10002f86:	429a      	cmp	r2, r3
10002f88:	d863      	bhi.n	10003052 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002f8a:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002f8c:	0e1a      	lsrs	r2, r3, #24
10002f8e:	021b      	lsls	r3, r3, #8
10002f90:	9203      	str	r2, [sp, #12]
10002f92:	9302      	str	r3, [sp, #8]
10002f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10002f96:	0003      	movs	r3, r0
10002f98:	9903      	ldr	r1, [sp, #12]
10002f9a:	9802      	ldr	r0, [sp, #8]
10002f9c:	f7fd f99e 	bl	100002dc <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002fa0:	436c      	muls	r4, r5
10002fa2:	4b2d      	ldr	r3, [pc, #180]	; (10003058 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002fa4:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002fa6:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10002fa8:	6863      	ldr	r3, [r4, #4]
10002faa:	4283      	cmp	r3, r0
10002fac:	d200      	bcs.n	10002fb0 <clock_configure+0x38>
        clock->div = div;
10002fae:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10002fb0:	1f2b      	subs	r3, r5, #4
10002fb2:	b2db      	uxtb	r3, r3
10002fb4:	9300      	str	r3, [sp, #0]
10002fb6:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10002fb8:	9a00      	ldr	r2, [sp, #0]
10002fba:	019b      	lsls	r3, r3, #6
10002fbc:	4323      	orrs	r3, r4
10002fbe:	2a01      	cmp	r2, #1
10002fc0:	d81b      	bhi.n	10002ffa <clock_configure+0x82>
10002fc2:	2f01      	cmp	r7, #1
10002fc4:	d119      	bne.n	10002ffa <clock_configure+0x82>
10002fc6:	2203      	movs	r2, #3
10002fc8:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10002fca:	68a3      	ldr	r3, [r4, #8]
10002fcc:	423b      	tst	r3, r7
10002fce:	d0fc      	beq.n	10002fca <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10002fd0:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002fd2:	6823      	ldr	r3, [r4, #0]
10002fd4:	0152      	lsls	r2, r2, #5
10002fd6:	405a      	eors	r2, r3
10002fd8:	23e0      	movs	r3, #224	; 0xe0
10002fda:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002fdc:	2380      	movs	r3, #128	; 0x80
10002fde:	015b      	lsls	r3, r3, #5
10002fe0:	4323      	orrs	r3, r4
10002fe2:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002fe4:	2103      	movs	r1, #3
10002fe6:	6822      	ldr	r2, [r4, #0]
10002fe8:	407a      	eors	r2, r7
10002fea:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002fec:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10002fee:	2301      	movs	r3, #1
10002ff0:	40bb      	lsls	r3, r7
10002ff2:	68a2      	ldr	r2, [r4, #8]
10002ff4:	4213      	tst	r3, r2
10002ff6:	d0fc      	beq.n	10002ff2 <clock_configure+0x7a>
10002ff8:	e01a      	b.n	10003030 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002ffa:	2280      	movs	r2, #128	; 0x80
10002ffc:	0112      	lsls	r2, r2, #4
10002ffe:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10003000:	4b16      	ldr	r3, [pc, #88]	; (1000305c <clock_configure+0xe4>)
10003002:	00aa      	lsls	r2, r5, #2
10003004:	58d1      	ldr	r1, [r2, r3]
10003006:	2900      	cmp	r1, #0
10003008:	d005      	beq.n	10003016 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000300a:	6958      	ldr	r0, [r3, #20]
1000300c:	f7fd f8e0 	bl	100001d0 <__udivsi3>
10003010:	3001      	adds	r0, #1
            asm volatile (
10003012:	3801      	subs	r0, #1
10003014:	d1fd      	bne.n	10003012 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003016:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003018:	6823      	ldr	r3, [r4, #0]
1000301a:	0152      	lsls	r2, r2, #5
1000301c:	405a      	eors	r2, r3
1000301e:	23e0      	movs	r3, #224	; 0xe0
10003020:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003022:	2380      	movs	r3, #128	; 0x80
10003024:	015b      	lsls	r3, r3, #5
10003026:	4323      	orrs	r3, r4
10003028:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
1000302a:	9a00      	ldr	r2, [sp, #0]
1000302c:	2a01      	cmp	r2, #1
1000302e:	d9d9      	bls.n	10002fe4 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003030:	2380      	movs	r3, #128	; 0x80
10003032:	2280      	movs	r2, #128	; 0x80
10003034:	019b      	lsls	r3, r3, #6
10003036:	4323      	orrs	r3, r4
10003038:	0112      	lsls	r2, r2, #4
1000303a:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000303c:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
1000303e:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003040:	0032      	movs	r2, r6
10003042:	2300      	movs	r3, #0
10003044:	9903      	ldr	r1, [sp, #12]
10003046:	f7fd f949 	bl	100002dc <__aeabi_uldivmod>
1000304a:	4c04      	ldr	r4, [pc, #16]	; (1000305c <clock_configure+0xe4>)
1000304c:	00ad      	lsls	r5, r5, #2
1000304e:	5160      	str	r0, [r4, r5]
10003050:	2001      	movs	r0, #1

    return true;
}
10003052:	b005      	add	sp, #20
10003054:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003056:	46c0      	nop			; (mov r8, r8)
10003058:	40008000 	.word	0x40008000
1000305c:	20000b04 	.word	0x20000b04

10003060 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10003060:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10003062:	200c      	movs	r0, #12
10003064:	f000 f8de 	bl	10003224 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10003068:	f000 f8e4 	bl	10003234 <running_on_fpga>
1000306c:	2800      	cmp	r0, #0
1000306e:	d00a      	beq.n	10003086 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003070:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10003072:	4a2c      	ldr	r2, [pc, #176]	; (10003124 <clocks_init+0xc4>)
10003074:	482c      	ldr	r0, [pc, #176]	; (10003128 <clocks_init+0xc8>)
10003076:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10003078:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
1000307a:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
1000307c:	2b0a      	cmp	r3, #10
1000307e:	d1fa      	bne.n	10003076 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10003080:	4b2a      	ldr	r3, [pc, #168]	; (1000312c <clocks_init+0xcc>)
10003082:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10003084:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
10003086:	4d2a      	ldr	r5, [pc, #168]	; (10003130 <clocks_init+0xd0>)
10003088:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
1000308a:	f000 f8b7 	bl	100031fc <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000308e:	2201      	movs	r2, #1
10003090:	4b28      	ldr	r3, [pc, #160]	; (10003134 <clocks_init+0xd4>)
10003092:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10003094:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10003096:	2b01      	cmp	r3, #1
10003098:	d1fc      	bne.n	10003094 <clocks_init+0x34>
1000309a:	2203      	movs	r2, #3
1000309c:	4b26      	ldr	r3, [pc, #152]	; (10003138 <clocks_init+0xd8>)
1000309e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100030a0:	6bac      	ldr	r4, [r5, #56]	; 0x38
100030a2:	2c01      	cmp	r4, #1
100030a4:	d1fc      	bne.n	100030a0 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100030a6:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100030a8:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100030aa:	0021      	movs	r1, r4
100030ac:	9500      	str	r5, [sp, #0]
100030ae:	2306      	movs	r3, #6
100030b0:	4a22      	ldr	r2, [pc, #136]	; (1000313c <clocks_init+0xdc>)
100030b2:	4823      	ldr	r0, [pc, #140]	; (10003140 <clocks_init+0xe0>)
100030b4:	f000 f854 	bl	10003160 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100030b8:	0033      	movs	r3, r6
100030ba:	0021      	movs	r1, r4
100030bc:	4a21      	ldr	r2, [pc, #132]	; (10003144 <clocks_init+0xe4>)
100030be:	4822      	ldr	r0, [pc, #136]	; (10003148 <clocks_init+0xe8>)
100030c0:	9600      	str	r6, [sp, #0]
100030c2:	f000 f84d 	bl	10003160 <pll_init>
    clock_configure(clk_ref,
100030c6:	4b21      	ldr	r3, [pc, #132]	; (1000314c <clocks_init+0xec>)
100030c8:	0029      	movs	r1, r5
    clock_configure(clk_sys,
100030ca:	4d21      	ldr	r5, [pc, #132]	; (10003150 <clocks_init+0xf0>)
    clock_configure(clk_ref,
100030cc:	9300      	str	r3, [sp, #0]
100030ce:	2200      	movs	r2, #0
100030d0:	2004      	movs	r0, #4
100030d2:	f7ff ff51 	bl	10002f78 <clock_configure>
    clock_configure(clk_sys,
100030d6:	002b      	movs	r3, r5
100030d8:	0021      	movs	r1, r4
100030da:	2200      	movs	r2, #0
100030dc:	0030      	movs	r0, r6
100030de:	9500      	str	r5, [sp, #0]
100030e0:	f7ff ff4a 	bl	10002f78 <clock_configure>
    clock_configure(clk_usb,
100030e4:	2200      	movs	r2, #0
100030e6:	4c10      	ldr	r4, [pc, #64]	; (10003128 <clocks_init+0xc8>)
100030e8:	0011      	movs	r1, r2
100030ea:	0023      	movs	r3, r4
100030ec:	9400      	str	r4, [sp, #0]
100030ee:	2007      	movs	r0, #7
100030f0:	f7ff ff42 	bl	10002f78 <clock_configure>
    clock_configure(clk_adc,
100030f4:	2200      	movs	r2, #0
100030f6:	0023      	movs	r3, r4
100030f8:	0011      	movs	r1, r2
100030fa:	9400      	str	r4, [sp, #0]
100030fc:	2008      	movs	r0, #8
100030fe:	f7ff ff3b 	bl	10002f78 <clock_configure>
    clock_configure(clk_rtc,
10003102:	2200      	movs	r2, #0
10003104:	4b09      	ldr	r3, [pc, #36]	; (1000312c <clocks_init+0xcc>)
10003106:	0011      	movs	r1, r2
10003108:	9300      	str	r3, [sp, #0]
1000310a:	2009      	movs	r0, #9
1000310c:	0023      	movs	r3, r4
1000310e:	f7ff ff33 	bl	10002f78 <clock_configure>
    clock_configure(clk_peri,
10003112:	2200      	movs	r2, #0
10003114:	002b      	movs	r3, r5
10003116:	0011      	movs	r1, r2
10003118:	9500      	str	r5, [sp, #0]
1000311a:	2006      	movs	r0, #6
1000311c:	f7ff ff2c 	bl	10002f78 <clock_configure>
10003120:	e7b0      	b.n	10003084 <clocks_init+0x24>
10003122:	46c0      	nop			; (mov r8, r8)
10003124:	20000b04 	.word	0x20000b04
10003128:	02dc6c00 	.word	0x02dc6c00
1000312c:	0000b71b 	.word	0x0000b71b
10003130:	40008000 	.word	0x40008000
10003134:	4000b03c 	.word	0x4000b03c
10003138:	4000b030 	.word	0x4000b030
1000313c:	59682f00 	.word	0x59682f00
10003140:	40028000 	.word	0x40028000
10003144:	47868c00 	.word	0x47868c00
10003148:	4002c000 	.word	0x4002c000
1000314c:	00b71b00 	.word	0x00b71b00
10003150:	07735940 	.word	0x07735940

10003154 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10003154:	4b01      	ldr	r3, [pc, #4]	; (1000315c <clock_get_hz+0x8>)
10003156:	0080      	lsls	r0, r0, #2
10003158:	58c0      	ldr	r0, [r0, r3]
}
1000315a:	4770      	bx	lr
1000315c:	20000b04 	.word	0x20000b04

10003160 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003162:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10003164:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003166:	0017      	movs	r7, r2
10003168:	001e      	movs	r6, r3
1000316a:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000316c:	f7fd f830 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10003170:	491d      	ldr	r1, [pc, #116]	; (100031e8 <pll_init+0x88>)
10003172:	4341      	muls	r1, r0
10003174:	0038      	movs	r0, r7
10003176:	f7fd f82b 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000317a:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000317c:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000317e:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10003180:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10003182:	6822      	ldr	r2, [r4, #0]
10003184:	2a00      	cmp	r2, #0
10003186:	da0f      	bge.n	100031a8 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003188:	213f      	movs	r1, #63	; 0x3f
1000318a:	6822      	ldr	r2, [r4, #0]
1000318c:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000318e:	42aa      	cmp	r2, r5
10003190:	d10a      	bne.n	100031a8 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10003192:	68a2      	ldr	r2, [r4, #8]
10003194:	0512      	lsls	r2, r2, #20
10003196:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003198:	4282      	cmp	r2, r0
1000319a:	d105      	bne.n	100031a8 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
1000319c:	21ee      	movs	r1, #238	; 0xee
1000319e:	68e2      	ldr	r2, [r4, #12]
100031a0:	02c9      	lsls	r1, r1, #11
100031a2:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100031a4:	429a      	cmp	r2, r3
100031a6:	d01b      	beq.n	100031e0 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100031a8:	4a10      	ldr	r2, [pc, #64]	; (100031ec <pll_init+0x8c>)
100031aa:	4294      	cmp	r4, r2
100031ac:	d019      	beq.n	100031e2 <pll_init+0x82>
100031ae:	2280      	movs	r2, #128	; 0x80
100031b0:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100031b2:	490f      	ldr	r1, [pc, #60]	; (100031f0 <pll_init+0x90>)
100031b4:	4e0f      	ldr	r6, [pc, #60]	; (100031f4 <pll_init+0x94>)
100031b6:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031b8:	490f      	ldr	r1, [pc, #60]	; (100031f8 <pll_init+0x98>)
100031ba:	600a      	str	r2, [r1, #0]
100031bc:	0017      	movs	r7, r2
100031be:	68b1      	ldr	r1, [r6, #8]
100031c0:	438f      	bics	r7, r1
100031c2:	d1fb      	bne.n	100031bc <pll_init+0x5c>
100031c4:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
100031c6:	1d21      	adds	r1, r4, #4
100031c8:	0192      	lsls	r2, r2, #6
100031ca:	430a      	orrs	r2, r1
100031cc:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
100031ce:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
100031d0:	60a0      	str	r0, [r4, #8]
100031d2:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100031d4:	6821      	ldr	r1, [r4, #0]
100031d6:	2900      	cmp	r1, #0
100031d8:	dafc      	bge.n	100031d4 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
100031da:	60e3      	str	r3, [r4, #12]
100031dc:	2308      	movs	r3, #8
100031de:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100031e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100031e2:	2280      	movs	r2, #128	; 0x80
100031e4:	0192      	lsls	r2, r2, #6
100031e6:	e7e4      	b.n	100031b2 <pll_init+0x52>
100031e8:	000f4240 	.word	0x000f4240
100031ec:	4002c000 	.word	0x4002c000
100031f0:	4000e000 	.word	0x4000e000
100031f4:	4000c000 	.word	0x4000c000
100031f8:	4000f000 	.word	0x4000f000

100031fc <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100031fc:	22aa      	movs	r2, #170	; 0xaa
100031fe:	4b06      	ldr	r3, [pc, #24]	; (10003218 <xosc_init+0x1c>)
10003200:	0112      	lsls	r2, r2, #4
10003202:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10003204:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003206:	4905      	ldr	r1, [pc, #20]	; (1000321c <xosc_init+0x20>)
10003208:	60da      	str	r2, [r3, #12]
1000320a:	4a05      	ldr	r2, [pc, #20]	; (10003220 <xosc_init+0x24>)
1000320c:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000320e:	685a      	ldr	r2, [r3, #4]
10003210:	2a00      	cmp	r2, #0
10003212:	dafc      	bge.n	1000320e <xosc_init+0x12>
}
10003214:	4770      	bx	lr
10003216:	46c0      	nop			; (mov r8, r8)
10003218:	40024000 	.word	0x40024000
1000321c:	00fab000 	.word	0x00fab000
10003220:	40026000 	.word	0x40026000

10003224 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10003224:	2380      	movs	r3, #128	; 0x80
10003226:	4a02      	ldr	r2, [pc, #8]	; (10003230 <watchdog_start_tick+0xc>)
10003228:	009b      	lsls	r3, r3, #2
1000322a:	4303      	orrs	r3, r0
1000322c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000322e:	4770      	bx	lr
10003230:	40058000 	.word	0x40058000

10003234 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10003234:	4b02      	ldr	r3, [pc, #8]	; (10003240 <running_on_fpga+0xc>)
10003236:	6818      	ldr	r0, [r3, #0]
10003238:	0780      	lsls	r0, r0, #30
1000323a:	0fc0      	lsrs	r0, r0, #31
}
1000323c:	4770      	bx	lr
1000323e:	46c0      	nop			; (mov r8, r8)
10003240:	4006c000 	.word	0x4006c000

10003244 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10003244:	4b08      	ldr	r3, [pc, #32]	; (10003268 <gpio_set_function+0x24>)
10003246:	0082      	lsls	r2, r0, #2
10003248:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000324a:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
1000324c:	b510      	push	{r4, lr}
1000324e:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10003250:	00c0      	lsls	r0, r0, #3
10003252:	4063      	eors	r3, r4
10003254:	24c0      	movs	r4, #192	; 0xc0
10003256:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003258:	2480      	movs	r4, #128	; 0x80
1000325a:	0164      	lsls	r4, r4, #5
1000325c:	4322      	orrs	r2, r4
1000325e:	6013      	str	r3, [r2, #0]
10003260:	4b02      	ldr	r3, [pc, #8]	; (1000326c <gpio_set_function+0x28>)
10003262:	18c0      	adds	r0, r0, r3
10003264:	6041      	str	r1, [r0, #4]
}
10003266:	bd10      	pop	{r4, pc}
10003268:	4001c004 	.word	0x4001c004
1000326c:	40014000 	.word	0x40014000

10003270 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
10003270:	4b07      	ldr	r3, [pc, #28]	; (10003290 <gpio_set_pulls+0x20>)
10003272:	0080      	lsls	r0, r0, #2
10003274:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003276:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10003278:	00c9      	lsls	r1, r1, #3
1000327a:	0092      	lsls	r2, r2, #2
    hw_write_masked(
1000327c:	430a      	orrs	r2, r1
1000327e:	405a      	eors	r2, r3
10003280:	230c      	movs	r3, #12
10003282:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003284:	2380      	movs	r3, #128	; 0x80
10003286:	015b      	lsls	r3, r3, #5
10003288:	4303      	orrs	r3, r0
1000328a:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
1000328c:	4770      	bx	lr
1000328e:	46c0      	nop			; (mov r8, r8)
10003290:	4001c004 	.word	0x4001c004

10003294 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10003294:	4b05      	ldr	r3, [pc, #20]	; (100032ac <gpio_set_input_hysteresis_enabled+0x18>)
10003296:	0080      	lsls	r0, r0, #2
10003298:	18c0      	adds	r0, r0, r3
1000329a:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000329c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000329e:	2900      	cmp	r1, #0
100032a0:	d100      	bne.n	100032a4 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100032a2:	23c0      	movs	r3, #192	; 0xc0
100032a4:	019b      	lsls	r3, r3, #6
100032a6:	4303      	orrs	r3, r0
100032a8:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
100032aa:	4770      	bx	lr
100032ac:	4001c004 	.word	0x4001c004

100032b0 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100032b0:	4b05      	ldr	r3, [pc, #20]	; (100032c8 <gpio_set_slew_rate+0x18>)
100032b2:	0080      	lsls	r0, r0, #2
100032b4:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100032b6:	6803      	ldr	r3, [r0, #0]
100032b8:	4059      	eors	r1, r3
100032ba:	2301      	movs	r3, #1
100032bc:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100032be:	2380      	movs	r3, #128	; 0x80
100032c0:	015b      	lsls	r3, r3, #5
100032c2:	4303      	orrs	r3, r0
100032c4:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
100032c6:	4770      	bx	lr
100032c8:	4001c004 	.word	0x4001c004

100032cc <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100032cc:	4b06      	ldr	r3, [pc, #24]	; (100032e8 <gpio_set_drive_strength+0x1c>)
100032ce:	0080      	lsls	r0, r0, #2
100032d0:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100032d2:	6803      	ldr	r3, [r0, #0]
100032d4:	0109      	lsls	r1, r1, #4
100032d6:	4059      	eors	r1, r3
100032d8:	2330      	movs	r3, #48	; 0x30
100032da:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100032dc:	2380      	movs	r3, #128	; 0x80
100032de:	015b      	lsls	r3, r3, #5
100032e0:	4303      	orrs	r3, r0
100032e2:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
100032e4:	4770      	bx	lr
100032e6:	46c0      	nop			; (mov r8, r8)
100032e8:	4001c004 	.word	0x4001c004

100032ec <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
100032ec:	2207      	movs	r2, #7
100032ee:	08c3      	lsrs	r3, r0, #3
100032f0:	4010      	ands	r0, r2
100032f2:	0080      	lsls	r0, r0, #2
100032f4:	4081      	lsls	r1, r0
100032f6:	4a02      	ldr	r2, [pc, #8]	; (10003300 <gpio_acknowledge_irq+0x14>)
100032f8:	333c      	adds	r3, #60	; 0x3c
100032fa:	009b      	lsls	r3, r3, #2
100032fc:	5099      	str	r1, [r3, r2]
}
100032fe:	4770      	bx	lr
10003300:	40014000 	.word	0x40014000

10003304 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003306:	23d0      	movs	r3, #208	; 0xd0
10003308:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000330a:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000330c:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000330e:	4263      	negs	r3, r4
10003310:	415c      	adcs	r4, r3
10003312:	232f      	movs	r3, #47	; 0x2f
10003314:	4264      	negs	r4, r4
10003316:	439c      	bics	r4, r3
10003318:	4b0a      	ldr	r3, [pc, #40]	; (10003344 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000331a:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000331c:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000331e:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10003320:	f7ff ffe4 	bl	100032ec <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10003324:	2307      	movs	r3, #7
10003326:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003328:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000332a:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000332c:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
1000332e:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10003330:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003332:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003334:	2e00      	cmp	r6, #0
10003336:	d100      	bne.n	1000333a <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003338:	23c0      	movs	r3, #192	; 0xc0
1000333a:	019b      	lsls	r3, r3, #6
1000333c:	4323      	orrs	r3, r4
1000333e:	601f      	str	r7, [r3, #0]
}
10003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003342:	46c0      	nop			; (mov r8, r8)
10003344:	40014130 	.word	0x40014130

10003348 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10003348:	4b05      	ldr	r3, [pc, #20]	; (10003360 <gpio_set_input_enabled+0x18>)
1000334a:	0080      	lsls	r0, r0, #2
1000334c:	18c0      	adds	r0, r0, r3
1000334e:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003350:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003352:	2900      	cmp	r1, #0
10003354:	d100      	bne.n	10003358 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003356:	23c0      	movs	r3, #192	; 0xc0
10003358:	019b      	lsls	r3, r3, #6
1000335a:	4303      	orrs	r3, r0
1000335c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
1000335e:	4770      	bx	lr
10003360:	4001c004 	.word	0x4001c004

10003364 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10003364:	b570      	push	{r4, r5, r6, lr}
10003366:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003368:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000336a:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
1000336c:	f7ff fef2 	bl	10003154 <clock_get_hz>
10003370:	0021      	movs	r1, r4
10003372:	00c0      	lsls	r0, r0, #3
10003374:	f7fc ff2c 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10003378:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
1000337a:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
1000337c:	d007      	beq.n	1000338e <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
1000337e:	4b0e      	ldr	r3, [pc, #56]	; (100033b8 <uart_set_baudrate+0x54>)
10003380:	429d      	cmp	r5, r3
10003382:	d815      	bhi.n	100033b0 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10003384:	237f      	movs	r3, #127	; 0x7f
10003386:	4018      	ands	r0, r3
10003388:	1900      	adds	r0, r0, r4
1000338a:	002c      	movs	r4, r5
1000338c:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000338e:	2380      	movs	r3, #128	; 0x80
10003390:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10003392:	6274      	str	r4, [r6, #36]	; 0x24
10003394:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10003396:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10003398:	362c      	adds	r6, #44	; 0x2c
1000339a:	4333      	orrs	r3, r6
1000339c:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
1000339e:	2006      	movs	r0, #6
100033a0:	f7ff fed8 	bl	10003154 <clock_get_hz>
100033a4:	01a1      	lsls	r1, r4, #6
100033a6:	1949      	adds	r1, r1, r5
100033a8:	0080      	lsls	r0, r0, #2
100033aa:	f7fc ff11 	bl	100001d0 <__udivsi3>
}
100033ae:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
100033b0:	2500      	movs	r5, #0
        baud_ibrd = 65535;
100033b2:	4c02      	ldr	r4, [pc, #8]	; (100033bc <uart_set_baudrate+0x58>)
100033b4:	e7eb      	b.n	1000338e <uart_set_baudrate+0x2a>
100033b6:	46c0      	nop			; (mov r8, r8)
100033b8:	0000fffe 	.word	0x0000fffe
100033bc:	0000ffff 	.word	0x0000ffff

100033c0 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
100033c0:	b570      	push	{r4, r5, r6, lr}
100033c2:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
100033c4:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
100033c6:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
100033c8:	f7ff fec4 	bl	10003154 <clock_get_hz>
100033cc:	2800      	cmp	r0, #0
100033ce:	d02e      	beq.n	1000342e <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100033d0:	4b19      	ldr	r3, [pc, #100]	; (10003438 <uart_init+0x78>)
100033d2:	429c      	cmp	r4, r3
100033d4:	d02c      	beq.n	10003430 <uart_init+0x70>
100033d6:	2380      	movs	r3, #128	; 0x80
100033d8:	03db      	lsls	r3, r3, #15
100033da:	4a18      	ldr	r2, [pc, #96]	; (1000343c <uart_init+0x7c>)
100033dc:	4918      	ldr	r1, [pc, #96]	; (10003440 <uart_init+0x80>)
100033de:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100033e0:	4a18      	ldr	r2, [pc, #96]	; (10003444 <uart_init+0x84>)
100033e2:	6013      	str	r3, [r2, #0]
100033e4:	0018      	movs	r0, r3
100033e6:	688a      	ldr	r2, [r1, #8]
100033e8:	4390      	bics	r0, r2
100033ea:	d1fb      	bne.n	100033e4 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
100033ec:	4b16      	ldr	r3, [pc, #88]	; (10003448 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
100033ee:	4a17      	ldr	r2, [pc, #92]	; (1000344c <uart_init+0x8c>)
100033f0:	18e3      	adds	r3, r4, r3
100033f2:	4259      	negs	r1, r3
100033f4:	414b      	adcs	r3, r1
100033f6:	2180      	movs	r1, #128	; 0x80
100033f8:	005b      	lsls	r3, r3, #1
100033fa:	0049      	lsls	r1, r1, #1
100033fc:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
100033fe:	0020      	movs	r0, r4
10003400:	0029      	movs	r1, r5
10003402:	f7ff ffaf 	bl	10003364 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003406:	2360      	movs	r3, #96	; 0x60
10003408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000340a:	0021      	movs	r1, r4
1000340c:	4053      	eors	r3, r2
1000340e:	226e      	movs	r2, #110	; 0x6e
10003410:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003412:	2280      	movs	r2, #128	; 0x80
10003414:	312c      	adds	r1, #44	; 0x2c
10003416:	0152      	lsls	r2, r2, #5
10003418:	430a      	orrs	r2, r1
1000341a:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
1000341c:	4b0c      	ldr	r3, [pc, #48]	; (10003450 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000341e:	2210      	movs	r2, #16
10003420:	6323      	str	r3, [r4, #48]	; 0x30
10003422:	2380      	movs	r3, #128	; 0x80
10003424:	019b      	lsls	r3, r3, #6
10003426:	430b      	orrs	r3, r1
10003428:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000342a:	2303      	movs	r3, #3
1000342c:	64a3      	str	r3, [r4, #72]	; 0x48
}
1000342e:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003430:	2380      	movs	r3, #128	; 0x80
10003432:	041b      	lsls	r3, r3, #16
10003434:	e7d1      	b.n	100033da <uart_init+0x1a>
10003436:	46c0      	nop			; (mov r8, r8)
10003438:	40038000 	.word	0x40038000
1000343c:	4000e000 	.word	0x4000e000
10003440:	4000c000 	.word	0x4000c000
10003444:	4000f000 	.word	0x4000f000
10003448:	bffc8000 	.word	0xbffc8000
1000344c:	20000b5c 	.word	0x20000b5c
10003450:	00000301 	.word	0x00000301

10003454 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10003454:	b510      	push	{r4, lr}
10003456:	0004      	movs	r4, r0
10003458:	b086      	sub	sp, #24
	z_impl_log_panic();
1000345a:	f7fe fa33 	bl	100018c4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
1000345e:	4b07      	ldr	r3, [pc, #28]	; (1000347c <k_sys_fatal_error_handler+0x28>)
10003460:	2182      	movs	r1, #130	; 0x82
10003462:	9305      	str	r3, [sp, #20]
10003464:	2302      	movs	r3, #2
10003466:	9304      	str	r3, [sp, #16]
10003468:	4805      	ldr	r0, [pc, #20]	; (10003480 <k_sys_fatal_error_handler+0x2c>)
1000346a:	2300      	movs	r3, #0
1000346c:	aa04      	add	r2, sp, #16
1000346e:	0149      	lsls	r1, r1, #5
10003470:	f7fe fb06 	bl	10001a80 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
10003474:	0020      	movs	r0, r4
10003476:	f002 f9b4 	bl	100057e2 <arch_system_halt>
1000347a:	46c0      	nop			; (mov r8, r8)
1000347c:	100099c0 	.word	0x100099c0
10003480:	10005cc0 	.word	0x10005cc0

10003484 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003484:	b5f0      	push	{r4, r5, r6, r7, lr}
10003486:	b08b      	sub	sp, #44	; 0x2c
10003488:	0004      	movs	r4, r0
1000348a:	000d      	movs	r5, r1
1000348c:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
1000348e:	f3ef 8310 	mrs	r3, PRIMASK
10003492:	b672      	cpsid	i
10003494:	607b      	str	r3, [r7, #4]
	return z_impl_z_current_get();
10003496:	f000 fdaf 	bl	10003ff8 <z_impl_z_current_get>
1000349a:	4b30      	ldr	r3, [pc, #192]	; (1000355c <z_fatal_error+0xd8>)
1000349c:	60f8      	str	r0, [r7, #12]
	switch (reason) {
1000349e:	2c04      	cmp	r4, #4
100034a0:	d802      	bhi.n	100034a8 <z_fatal_error+0x24>
100034a2:	4b2f      	ldr	r3, [pc, #188]	; (10003560 <z_fatal_error+0xdc>)
100034a4:	00a2      	lsls	r2, r4, #2
100034a6:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
100034a8:	466e      	mov	r6, sp
100034aa:	b08a      	sub	sp, #40	; 0x28
100034ac:	466a      	mov	r2, sp
100034ae:	61d3      	str	r3, [r2, #28]
100034b0:	2300      	movs	r3, #0
100034b2:	6213      	str	r3, [r2, #32]
100034b4:	4b2b      	ldr	r3, [pc, #172]	; (10003564 <z_fatal_error+0xe0>)
100034b6:	492c      	ldr	r1, [pc, #176]	; (10003568 <z_fatal_error+0xe4>)
100034b8:	8493      	strh	r3, [r2, #36]	; 0x24
100034ba:	4b2c      	ldr	r3, [pc, #176]	; (1000356c <z_fatal_error+0xe8>)
100034bc:	6151      	str	r1, [r2, #20]
100034be:	6194      	str	r4, [r2, #24]
100034c0:	6113      	str	r3, [r2, #16]
100034c2:	21b1      	movs	r1, #177	; 0xb1
100034c4:	4b2a      	ldr	r3, [pc, #168]	; (10003570 <z_fatal_error+0xec>)
100034c6:	3210      	adds	r2, #16
100034c8:	60bb      	str	r3, [r7, #8]
100034ca:	68b8      	ldr	r0, [r7, #8]
100034cc:	2300      	movs	r3, #0
100034ce:	0189      	lsls	r1, r1, #6
100034d0:	f7fe fad6 	bl	10001a80 <z_impl_z_log_msg_static_create>
100034d4:	46b5      	mov	sp, r6
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
100034d6:	2d00      	cmp	r5, #0
100034d8:	d00f      	beq.n	100034fa <z_fatal_error+0x76>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
100034da:	69eb      	ldr	r3, [r5, #28]
100034dc:	05db      	lsls	r3, r3, #23
100034de:	d00c      	beq.n	100034fa <z_fatal_error+0x76>
		LOG_ERR("Fault during interrupt handling\n");
100034e0:	4b24      	ldr	r3, [pc, #144]	; (10003574 <z_fatal_error+0xf0>)
100034e2:	627b      	str	r3, [r7, #36]	; 0x24
100034e4:	2302      	movs	r3, #2
100034e6:	623b      	str	r3, [r7, #32]
100034e8:	2210      	movs	r2, #16
100034ea:	2182      	movs	r1, #130	; 0x82
100034ec:	1892      	adds	r2, r2, r2
100034ee:	2300      	movs	r3, #0
100034f0:	68b8      	ldr	r0, [r7, #8]
100034f2:	19d2      	adds	r2, r2, r7
100034f4:	0149      	lsls	r1, r1, #5
100034f6:	f7fe fac3 	bl	10001a80 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
100034fa:	68fb      	ldr	r3, [r7, #12]
100034fc:	2b00      	cmp	r3, #0
100034fe:	d007      	beq.n	10003510 <z_fatal_error+0x8c>
10003500:	0018      	movs	r0, r3
10003502:	f002 f983 	bl	1000580c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
10003506:	2800      	cmp	r0, #0
10003508:	d002      	beq.n	10003510 <z_fatal_error+0x8c>
1000350a:	7803      	ldrb	r3, [r0, #0]
1000350c:	2b00      	cmp	r3, #0
1000350e:	d100      	bne.n	10003512 <z_fatal_error+0x8e>
		thread_name = "unknown";
10003510:	4819      	ldr	r0, [pc, #100]	; (10003578 <z_fatal_error+0xf4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
10003512:	466e      	mov	r6, sp
10003514:	b08a      	sub	sp, #40	; 0x28
10003516:	466a      	mov	r2, sp
10003518:	4b18      	ldr	r3, [pc, #96]	; (1000357c <z_fatal_error+0xf8>)
1000351a:	61d0      	str	r0, [r2, #28]
1000351c:	6153      	str	r3, [r2, #20]
1000351e:	68fb      	ldr	r3, [r7, #12]
10003520:	6193      	str	r3, [r2, #24]
10003522:	4b10      	ldr	r3, [pc, #64]	; (10003564 <z_fatal_error+0xe0>)
10003524:	8413      	strh	r3, [r2, #32]
10003526:	4b16      	ldr	r3, [pc, #88]	; (10003580 <z_fatal_error+0xfc>)
10003528:	6113      	str	r3, [r2, #16]
1000352a:	2191      	movs	r1, #145	; 0x91
1000352c:	2300      	movs	r3, #0
1000352e:	4810      	ldr	r0, [pc, #64]	; (10003570 <z_fatal_error+0xec>)
10003530:	3210      	adds	r2, #16
10003532:	0189      	lsls	r1, r1, #6
10003534:	f7fe faa4 	bl	10001a80 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10003538:	0029      	movs	r1, r5
1000353a:	46b5      	mov	sp, r6
1000353c:	0020      	movs	r0, r4
1000353e:	f7ff ff89 	bl	10003454 <k_sys_fatal_error_handler>
	if (key != 0U) {
10003542:	687b      	ldr	r3, [r7, #4]
10003544:	2b00      	cmp	r3, #0
10003546:	d102      	bne.n	1000354e <z_fatal_error+0xca>
	__asm__ volatile(
10003548:	b662      	cpsie	i
1000354a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
1000354e:	68f8      	ldr	r0, [r7, #12]
10003550:	f7fe ffd4 	bl	100024fc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10003554:	46bd      	mov	sp, r7
10003556:	b00b      	add	sp, #44	; 0x2c
10003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000355a:	46c0      	nop			; (mov r8, r8)
1000355c:	100099cf 	.word	0x100099cf
10003560:	10005ea4 	.word	0x10005ea4
10003564:	00000301 	.word	0x00000301
10003568:	100099e5 	.word	0x100099e5
1000356c:	01000005 	.word	0x01000005
10003570:	10005cc0 	.word	0x10005cc0
10003574:	10009a0d 	.word	0x10009a0d
10003578:	100099dd 	.word	0x100099dd
1000357c:	10009a2e 	.word	0x10009a2e
10003580:	01000004 	.word	0x01000004

10003584 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
10003584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					}
					dev->state->init_res = rc;
				}
			}

			dev->state->initialized = true;
10003586:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003588:	4e12      	ldr	r6, [pc, #72]	; (100035d4 <z_sys_init_run_level+0x50>)
1000358a:	0083      	lsls	r3, r0, #2
1000358c:	3001      	adds	r0, #1
1000358e:	599c      	ldr	r4, [r3, r6]
10003590:	0083      	lsls	r3, r0, #2
10003592:	9301      	str	r3, [sp, #4]
10003594:	9b01      	ldr	r3, [sp, #4]
10003596:	58f3      	ldr	r3, [r6, r3]
10003598:	42a3      	cmp	r3, r4
1000359a:	d800      	bhi.n	1000359e <z_sys_init_run_level+0x1a>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
1000359c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
1000359e:	6865      	ldr	r5, [r4, #4]
			if (entry->init_fn.dev != NULL) {
100035a0:	6823      	ldr	r3, [r4, #0]
		if (dev != NULL) {
100035a2:	2d00      	cmp	r5, #0
100035a4:	d013      	beq.n	100035ce <z_sys_init_run_level+0x4a>
			if (entry->init_fn.dev != NULL) {
100035a6:	2b00      	cmp	r3, #0
100035a8:	d00b      	beq.n	100035c2 <z_sys_init_run_level+0x3e>
				rc = entry->init_fn.dev(dev);
100035aa:	0028      	movs	r0, r5
100035ac:	4798      	blx	r3
				if (rc != 0) {
100035ae:	2800      	cmp	r0, #0
100035b0:	d007      	beq.n	100035c2 <z_sys_init_run_level+0x3e>
					if (rc < 0) {
100035b2:	17c2      	asrs	r2, r0, #31
100035b4:	1880      	adds	r0, r0, r2
					dev->state->init_res = rc;
100035b6:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
100035b8:	4050      	eors	r0, r2
					if (rc > UINT8_MAX) {
100035ba:	28ff      	cmp	r0, #255	; 0xff
100035bc:	dd00      	ble.n	100035c0 <z_sys_init_run_level+0x3c>
100035be:	20ff      	movs	r0, #255	; 0xff
					dev->state->init_res = rc;
100035c0:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100035c2:	68ea      	ldr	r2, [r5, #12]
100035c4:	7853      	ldrb	r3, [r2, #1]
100035c6:	433b      	orrs	r3, r7
100035c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100035ca:	3408      	adds	r4, #8
100035cc:	e7e2      	b.n	10003594 <z_sys_init_run_level+0x10>
			(void)entry->init_fn.sys();
100035ce:	4798      	blx	r3
100035d0:	e7fb      	b.n	100035ca <z_sys_init_run_level+0x46>
100035d2:	46c0      	nop			; (mov r8, r8)
100035d4:	10005eb8 	.word	0x10005eb8

100035d8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
100035d8:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
100035da:	2401      	movs	r4, #1
100035dc:	4b09      	ldr	r3, [pc, #36]	; (10003604 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
100035de:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
100035e0:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
100035e2:	f7ff ffcf 	bl	10003584 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
100035e6:	f000 ff67 	bl	100044b8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
100035ea:	2004      	movs	r0, #4
100035ec:	f7ff ffca 	bl	10003584 <z_sys_init_run_level>

	z_init_static_threads();
100035f0:	f000 f900 	bl	100037f4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
100035f4:	f7fc ff48 	bl	10000488 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
100035f8:	4a03      	ldr	r2, [pc, #12]	; (10003608 <bg_thread_main+0x30>)
100035fa:	7b13      	ldrb	r3, [r2, #12]
100035fc:	43a3      	bics	r3, r4
100035fe:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10003600:	bd10      	pop	{r4, pc}
10003602:	46c0      	nop			; (mov r8, r8)
10003604:	20000b66 	.word	0x20000b66
10003608:	200009d8 	.word	0x200009d8

1000360c <z_bss_zero>:
{
1000360c:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
1000360e:	4a03      	ldr	r2, [pc, #12]	; (1000361c <z_bss_zero+0x10>)
10003610:	4803      	ldr	r0, [pc, #12]	; (10003620 <z_bss_zero+0x14>)
10003612:	2100      	movs	r1, #0
10003614:	1a12      	subs	r2, r2, r0
10003616:	f002 f8e8 	bl	100057ea <z_early_memset>
}
1000361a:	bd10      	pop	{r4, pc}
1000361c:	20000b68 	.word	0x20000b68
10003620:	200004b8 	.word	0x200004b8

10003624 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10003624:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10003626:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10003628:	2501      	movs	r5, #1
{
1000362a:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
1000362c:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000362e:	0201      	lsls	r1, r0, #8
10003630:	4811      	ldr	r0, [pc, #68]	; (10003678 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10003632:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10003634:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10003636:	2000      	movs	r0, #0
{
10003638:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000363a:	9504      	str	r5, [sp, #16]
1000363c:	350e      	adds	r5, #14
1000363e:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003640:	3505      	adds	r5, #5
10003642:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10003644:	4b0d      	ldr	r3, [pc, #52]	; (1000367c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10003646:	9005      	str	r0, [sp, #20]
10003648:	9002      	str	r0, [sp, #8]
1000364a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000364c:	480c      	ldr	r0, [pc, #48]	; (10003680 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000364e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003650:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10003652:	4b0c      	ldr	r3, [pc, #48]	; (10003684 <z_init_cpu+0x60>)
10003654:	0030      	movs	r0, r6
10003656:	9500      	str	r5, [sp, #0]
10003658:	0052      	lsls	r2, r2, #1
1000365a:	f000 f875 	bl	10003748 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000365e:	2204      	movs	r2, #4
10003660:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10003662:	742c      	strb	r4, [r5, #16]
10003664:	4393      	bics	r3, r2
10003666:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003668:	3401      	adds	r4, #1
1000366a:	4b07      	ldr	r3, [pc, #28]	; (10003688 <z_init_cpu+0x64>)
1000366c:	02e4      	lsls	r4, r4, #11
1000366e:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10003670:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10003672:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10003674:	b006      	add	sp, #24
10003676:	bd70      	pop	{r4, r5, r6, pc}
10003678:	20001668 	.word	0x20001668
1000367c:	20000968 	.word	0x20000968
10003680:	20000b2c 	.word	0x20000b2c
10003684:	10005811 	.word	0x10005811
10003688:	20000e68 	.word	0x20000e68

1000368c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
1000368c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
1000368e:	2000      	movs	r0, #0
{
10003690:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10003692:	f7ff ff77 	bl	10003584 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10003696:	4b24      	ldr	r3, [pc, #144]	; (10003728 <z_cstart+0x9c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10003698:	f383 8808 	msr	MSP, r3
1000369c:	4923      	ldr	r1, [pc, #140]	; (1000372c <z_cstart+0xa0>)
1000369e:	4b24      	ldr	r3, [pc, #144]	; (10003730 <z_cstart+0xa4>)
100036a0:	6a0a      	ldr	r2, [r1, #32]
100036a2:	401a      	ands	r2, r3
100036a4:	23e0      	movs	r3, #224	; 0xe0
100036a6:	041b      	lsls	r3, r3, #16
100036a8:	4313      	orrs	r3, r2
100036aa:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100036ac:	f001 fc0b 	bl	10004ec6 <z_arm_fault_init>
	z_arm_cpu_idle_init();
100036b0:	f7fe fce6 	bl	10002080 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
100036b4:	f7fe f87a 	bl	100017ac <log_core_init>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
100036b8:	2302      	movs	r3, #2
100036ba:	466a      	mov	r2, sp
100036bc:	33ff      	adds	r3, #255	; 0xff
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
100036be:	a806      	add	r0, sp, #24
	dummy_thread->base.user_options = K_ESSENTIAL;
100036c0:	8493      	strh	r3, [r2, #36]	; 0x24
	k_thread_system_pool_assign(dummy_thread);
100036c2:	f000 fef3 	bl	100044ac <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100036c6:	4d1b      	ldr	r5, [pc, #108]	; (10003734 <z_cstart+0xa8>)
100036c8:	ab06      	add	r3, sp, #24
100036ca:	60ab      	str	r3, [r5, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
100036cc:	f002 f87b 	bl	100057c6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
100036d0:	2001      	movs	r0, #1
100036d2:	f7ff ff57 	bl	10003584 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
100036d6:	2002      	movs	r0, #2
100036d8:	f7ff ff54 	bl	10003584 <z_sys_init_run_level>
	z_sched_init();
100036dc:	f000 fbe8 	bl	10003eb0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
100036e0:	4c15      	ldr	r4, [pc, #84]	; (10003738 <z_cstart+0xac>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
100036e2:	4b16      	ldr	r3, [pc, #88]	; (1000373c <z_cstart+0xb0>)
	_kernel.ready_q.cache = &z_main_thread;
100036e4:	616c      	str	r4, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
100036e6:	2280      	movs	r2, #128	; 0x80
100036e8:	2500      	movs	r5, #0
100036ea:	9305      	str	r3, [sp, #20]
100036ec:	2301      	movs	r3, #1
100036ee:	4e14      	ldr	r6, [pc, #80]	; (10003740 <z_cstart+0xb4>)
100036f0:	4914      	ldr	r1, [pc, #80]	; (10003744 <z_cstart+0xb8>)
100036f2:	9304      	str	r3, [sp, #16]
100036f4:	00d2      	lsls	r2, r2, #3
100036f6:	0033      	movs	r3, r6
100036f8:	0020      	movs	r0, r4
100036fa:	9503      	str	r5, [sp, #12]
100036fc:	9502      	str	r5, [sp, #8]
100036fe:	9501      	str	r5, [sp, #4]
10003700:	9500      	str	r5, [sp, #0]
10003702:	f000 f821 	bl	10003748 <z_setup_new_thread>
10003706:	2204      	movs	r2, #4
10003708:	0007      	movs	r7, r0
1000370a:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
1000370c:	0020      	movs	r0, r4
1000370e:	4393      	bics	r3, r2
10003710:	7363      	strb	r3, [r4, #13]
10003712:	f002 f8df 	bl	100058d4 <z_ready_thread>
	z_init_cpu(0);
10003716:	0028      	movs	r0, r5
10003718:	f7ff ff84 	bl	10003624 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
1000371c:	0032      	movs	r2, r6
1000371e:	0039      	movs	r1, r7
10003720:	0020      	movs	r0, r4
10003722:	f7fe fddd 	bl	100022e0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10003726:	46c0      	nop			; (mov r8, r8)
10003728:	20001668 	.word	0x20001668
1000372c:	e000ed00 	.word	0xe000ed00
10003730:	ff00ffff 	.word	0xff00ffff
10003734:	20000b2c 	.word	0x20000b2c
10003738:	200009d8 	.word	0x200009d8
1000373c:	10009a90 	.word	0x10009a90
10003740:	100035d9 	.word	0x100035d9
10003744:	20001768 	.word	0x20001768

10003748 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10003748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1000374a:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
1000374c:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
1000374e:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10003750:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10003752:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10003754:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10003756:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10003758:	2004      	movs	r0, #4
1000375a:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
1000375c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
1000375e:	3207      	adds	r2, #7
	thread_base->prio = priority;
10003760:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003762:	2007      	movs	r0, #7
10003764:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10003766:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
1000376a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
1000376c:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
1000376e:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10003770:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003772:	9202      	str	r2, [sp, #8]
10003774:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003776:	0020      	movs	r0, r4
10003778:	9201      	str	r2, [sp, #4]
1000377a:	9a08      	ldr	r2, [sp, #32]
1000377c:	9200      	str	r2, [sp, #0]
1000377e:	002a      	movs	r2, r5
10003780:	f7fe fd98 	bl	100022b4 <arch_new_thread>
	if (!_current) {
10003784:	4b04      	ldr	r3, [pc, #16]	; (10003798 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10003786:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10003788:	689b      	ldr	r3, [r3, #8]
1000378a:	42b3      	cmp	r3, r6
1000378c:	d000      	beq.n	10003790 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
1000378e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10003790:	0028      	movs	r0, r5
10003792:	6663      	str	r3, [r4, #100]	; 0x64
10003794:	b004      	add	sp, #16
10003796:	bd70      	pop	{r4, r5, r6, pc}
10003798:	20000b2c 	.word	0x20000b2c

1000379c <z_impl_k_thread_create>:
{
1000379c:	b570      	push	{r4, r5, r6, lr}
1000379e:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100037a0:	2000      	movs	r0, #0
{
100037a2:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100037a4:	9005      	str	r0, [sp, #20]
100037a6:	980e      	ldr	r0, [sp, #56]	; 0x38
{
100037a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100037aa:	9004      	str	r0, [sp, #16]
100037ac:	980d      	ldr	r0, [sp, #52]	; 0x34
{
100037ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100037b0:	9003      	str	r0, [sp, #12]
100037b2:	980c      	ldr	r0, [sp, #48]	; 0x30
100037b4:	9002      	str	r0, [sp, #8]
100037b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
100037b8:	9001      	str	r0, [sp, #4]
100037ba:	980a      	ldr	r0, [sp, #40]	; 0x28
100037bc:	9000      	str	r0, [sp, #0]
100037be:	0020      	movs	r0, r4
100037c0:	f7ff ffc2 	bl	10003748 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
100037c4:	002b      	movs	r3, r5
100037c6:	1c72      	adds	r2, r6, #1
100037c8:	d101      	bne.n	100037ce <z_impl_k_thread_create+0x32>
100037ca:	3301      	adds	r3, #1
100037cc:	d005      	beq.n	100037da <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
100037ce:	002b      	movs	r3, r5
100037d0:	4333      	orrs	r3, r6
100037d2:	d105      	bne.n	100037e0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
100037d4:	0020      	movs	r0, r4
100037d6:	f000 faff 	bl	10003dd8 <z_sched_start>
}
100037da:	0020      	movs	r0, r4
100037dc:	b006      	add	sp, #24
100037de:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100037e0:	0020      	movs	r0, r4
100037e2:	0032      	movs	r2, r6
100037e4:	002b      	movs	r3, r5
100037e6:	4902      	ldr	r1, [pc, #8]	; (100037f0 <z_impl_k_thread_create+0x54>)
100037e8:	3018      	adds	r0, #24
100037ea:	f000 fccb 	bl	10004184 <z_add_timeout>
100037ee:	e7f4      	b.n	100037da <z_impl_k_thread_create+0x3e>
100037f0:	10005949 	.word	0x10005949

100037f4 <z_init_static_threads>:
{
100037f4:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100037f6:	4c20      	ldr	r4, [pc, #128]	; (10003878 <z_init_static_threads+0x84>)
{
100037f8:	b086      	sub	sp, #24
100037fa:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
100037fc:	4d1f      	ldr	r5, [pc, #124]	; (1000387c <z_init_static_threads+0x88>)
100037fe:	42ac      	cmp	r4, r5
10003800:	d308      	bcc.n	10003814 <z_init_static_threads+0x20>
	k_sched_lock();
10003802:	f000 fb2f 	bl	10003e64 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10003806:	0034      	movs	r4, r6
10003808:	42ac      	cmp	r4, r5
1000380a:	d319      	bcc.n	10003840 <z_init_static_threads+0x4c>
	k_sched_unlock();
1000380c:	f000 fb3a 	bl	10003e84 <k_sched_unlock>
}
10003810:	b006      	add	sp, #24
10003812:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10003814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10003816:	9305      	str	r3, [sp, #20]
10003818:	6a23      	ldr	r3, [r4, #32]
1000381a:	9304      	str	r3, [sp, #16]
1000381c:	69e3      	ldr	r3, [r4, #28]
1000381e:	9303      	str	r3, [sp, #12]
10003820:	69a3      	ldr	r3, [r4, #24]
10003822:	9302      	str	r3, [sp, #8]
10003824:	6963      	ldr	r3, [r4, #20]
10003826:	9301      	str	r3, [sp, #4]
10003828:	6923      	ldr	r3, [r4, #16]
1000382a:	9300      	str	r3, [sp, #0]
1000382c:	68e3      	ldr	r3, [r4, #12]
1000382e:	68a2      	ldr	r2, [r4, #8]
10003830:	6861      	ldr	r1, [r4, #4]
10003832:	6820      	ldr	r0, [r4, #0]
10003834:	f7ff ff88 	bl	10003748 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10003838:	6823      	ldr	r3, [r4, #0]
1000383a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
1000383c:	342c      	adds	r4, #44	; 0x2c
1000383e:	e7dd      	b.n	100037fc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10003840:	6a63      	ldr	r3, [r4, #36]	; 0x24
10003842:	1c5a      	adds	r2, r3, #1
10003844:	d00f      	beq.n	10003866 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10003846:	43d8      	mvns	r0, r3
10003848:	17c0      	asrs	r0, r0, #31
1000384a:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
1000384c:	220a      	movs	r2, #10
1000384e:	2300      	movs	r3, #0
10003850:	17c1      	asrs	r1, r0, #31
10003852:	f7fc fd87 	bl	10000364 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10003856:	6826      	ldr	r6, [r4, #0]
10003858:	000b      	movs	r3, r1
1000385a:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
1000385c:	4301      	orrs	r1, r0
1000385e:	d104      	bne.n	1000386a <z_init_static_threads+0x76>
	z_sched_start(thread);
10003860:	0030      	movs	r0, r6
10003862:	f000 fab9 	bl	10003dd8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10003866:	342c      	adds	r4, #44	; 0x2c
10003868:	e7ce      	b.n	10003808 <z_init_static_threads+0x14>
1000386a:	0030      	movs	r0, r6
1000386c:	4904      	ldr	r1, [pc, #16]	; (10003880 <z_init_static_threads+0x8c>)
1000386e:	3018      	adds	r0, #24
10003870:	f000 fc88 	bl	10004184 <z_add_timeout>
10003874:	e7f7      	b.n	10003866 <z_init_static_threads+0x72>
10003876:	46c0      	nop			; (mov r8, r8)
10003878:	10005c58 	.word	0x10005c58
1000387c:	10005c58 	.word	0x10005c58
10003880:	10005949 	.word	0x10005949

10003884 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
10003884:	b5f0      	push	{r4, r5, r6, r7, lr}
10003886:	b085      	sub	sp, #20
10003888:	0004      	movs	r4, r0
1000388a:	001f      	movs	r7, r3
1000388c:	9203      	str	r2, [sp, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
1000388e:	f3ef 8610 	mrs	r6, PRIMASK
10003892:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
10003894:	68c3      	ldr	r3, [r0, #12]
10003896:	4a35      	ldr	r2, [pc, #212]	; (1000396c <z_impl_k_mutex_lock+0xe8>)
10003898:	2b00      	cmp	r3, #0
1000389a:	d00e      	beq.n	100038ba <z_impl_k_mutex_lock+0x36>
1000389c:	6880      	ldr	r0, [r0, #8]
1000389e:	6891      	ldr	r1, [r2, #8]
100038a0:	4288      	cmp	r0, r1
100038a2:	d017      	beq.n	100038d4 <z_impl_k_mutex_lock+0x50>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
100038a4:	9b03      	ldr	r3, [sp, #12]
100038a6:	433b      	orrs	r3, r7
100038a8:	d11a      	bne.n	100038e0 <z_impl_k_mutex_lock+0x5c>
	if (key != 0U) {
100038aa:	2e00      	cmp	r6, #0
100038ac:	d102      	bne.n	100038b4 <z_impl_k_mutex_lock+0x30>
	__asm__ volatile(
100038ae:	b662      	cpsie	i
100038b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
100038b4:	2010      	movs	r0, #16
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
100038b6:	4240      	negs	r0, r0
100038b8:	e00a      	b.n	100038d0 <z_impl_k_mutex_lock+0x4c>
					_current->base.prio :
100038ba:	6891      	ldr	r1, [r2, #8]
100038bc:	7b89      	ldrb	r1, [r1, #14]
100038be:	b249      	sxtb	r1, r1
		mutex->lock_count++;
100038c0:	3301      	adds	r3, #1
100038c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
100038c4:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
100038c6:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
100038c8:	60a3      	str	r3, [r4, #8]
	if (key != 0U) {
100038ca:	2e00      	cmp	r6, #0
100038cc:	d004      	beq.n	100038d8 <z_impl_k_mutex_lock+0x54>
		return 0;
100038ce:	2000      	movs	r0, #0
}
100038d0:	b005      	add	sp, #20
100038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					_current->base.prio :
100038d4:	6921      	ldr	r1, [r4, #16]
100038d6:	e7f3      	b.n	100038c0 <z_impl_k_mutex_lock+0x3c>
	__asm__ volatile(
100038d8:	b662      	cpsie	i
100038da:	f3bf 8f6f 	isb	sy
100038de:	e7f6      	b.n	100038ce <z_impl_k_mutex_lock+0x4a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
100038e0:	230e      	movs	r3, #14
100038e2:	7b89      	ldrb	r1, [r1, #14]
100038e4:	56c3      	ldrsb	r3, [r0, r3]
100038e6:	b249      	sxtb	r1, r1
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
100038e8:	4299      	cmp	r1, r3
100038ea:	dd00      	ble.n	100038ee <z_impl_k_mutex_lock+0x6a>
100038ec:	0019      	movs	r1, r3
100038ee:	000a      	movs	r2, r1
100038f0:	327f      	adds	r2, #127	; 0x7f
100038f2:	da01      	bge.n	100038f8 <z_impl_k_mutex_lock+0x74>
100038f4:	217f      	movs	r1, #127	; 0x7f
100038f6:	4249      	negs	r1, r1
	bool resched = false;
100038f8:	2500      	movs	r5, #0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
100038fa:	428b      	cmp	r3, r1
100038fc:	dd02      	ble.n	10003904 <z_impl_k_mutex_lock+0x80>
		resched = adjust_owner_prio(mutex, new_prio);
100038fe:	f001 ff8e 	bl	1000581e <adjust_owner_prio.isra.0>
10003902:	0005      	movs	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
10003904:	4b1a      	ldr	r3, [pc, #104]	; (10003970 <z_impl_k_mutex_lock+0xec>)
10003906:	0022      	movs	r2, r4
10003908:	9302      	str	r3, [sp, #8]
1000390a:	9b03      	ldr	r3, [sp, #12]
1000390c:	0031      	movs	r1, r6
1000390e:	9802      	ldr	r0, [sp, #8]
10003910:	9300      	str	r3, [sp, #0]
10003912:	9701      	str	r7, [sp, #4]
10003914:	f000 f9ec 	bl	10003cf0 <z_pend_curr>
	if (got_mutex == 0) {
10003918:	2800      	cmp	r0, #0
1000391a:	d0d8      	beq.n	100038ce <z_impl_k_mutex_lock+0x4a>
	__asm__ volatile("mrs %0, PRIMASK;"
1000391c:	f3ef 8610 	mrs	r6, PRIMASK
10003920:	b672      	cpsid	i
	if (likely(mutex->owner != NULL)) {
10003922:	68a0      	ldr	r0, [r4, #8]
10003924:	2800      	cmp	r0, #0
10003926:	d019      	beq.n	1000395c <z_impl_k_mutex_lock+0xd8>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10003928:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
1000392a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000392c:	429c      	cmp	r4, r3
1000392e:	d00b      	beq.n	10003948 <z_impl_k_mutex_lock+0xc4>
10003930:	2b00      	cmp	r3, #0
10003932:	d009      	beq.n	10003948 <z_impl_k_mutex_lock+0xc4>
10003934:	7b9b      	ldrb	r3, [r3, #14]
10003936:	b25b      	sxtb	r3, r3
10003938:	4299      	cmp	r1, r3
1000393a:	dd00      	ble.n	1000393e <z_impl_k_mutex_lock+0xba>
1000393c:	0019      	movs	r1, r3
1000393e:	000b      	movs	r3, r1
10003940:	337f      	adds	r3, #127	; 0x7f
10003942:	da01      	bge.n	10003948 <z_impl_k_mutex_lock+0xc4>
10003944:	217f      	movs	r1, #127	; 0x7f
10003946:	4249      	negs	r1, r1
		resched = adjust_owner_prio(mutex, new_prio) || resched;
10003948:	f001 ff69 	bl	1000581e <adjust_owner_prio.isra.0>
1000394c:	2800      	cmp	r0, #0
1000394e:	d005      	beq.n	1000395c <z_impl_k_mutex_lock+0xd8>
		z_reschedule(&lock, key);
10003950:	0031      	movs	r1, r6
10003952:	9802      	ldr	r0, [sp, #8]
10003954:	f000 fa2a 	bl	10003dac <z_reschedule>
	return -EAGAIN;
10003958:	200b      	movs	r0, #11
1000395a:	e7ac      	b.n	100038b6 <z_impl_k_mutex_lock+0x32>
	if (resched) {
1000395c:	2d00      	cmp	r5, #0
1000395e:	d1f7      	bne.n	10003950 <z_impl_k_mutex_lock+0xcc>
	if (key != 0U) {
10003960:	2e00      	cmp	r6, #0
10003962:	d1f9      	bne.n	10003958 <z_impl_k_mutex_lock+0xd4>
	__asm__ volatile(
10003964:	b662      	cpsie	i
10003966:	f3bf 8f6f 	isb	sy
1000396a:	e7f5      	b.n	10003958 <z_impl_k_mutex_lock+0xd4>
1000396c:	20000b2c 	.word	0x20000b2c
10003970:	20000b67 	.word	0x20000b67

10003974 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
10003974:	b570      	push	{r4, r5, r6, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
10003976:	6883      	ldr	r3, [r0, #8]
{
10003978:	0004      	movs	r4, r0
	CHECKIF(mutex->owner == NULL) {
1000397a:	2b00      	cmp	r3, #0
1000397c:	d02a      	beq.n	100039d4 <z_impl_k_mutex_unlock+0x60>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
1000397e:	4a18      	ldr	r2, [pc, #96]	; (100039e0 <z_impl_k_mutex_unlock+0x6c>)
10003980:	6892      	ldr	r2, [r2, #8]
10003982:	4293      	cmp	r3, r2
10003984:	d129      	bne.n	100039da <z_impl_k_mutex_unlock+0x66>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
10003986:	68c3      	ldr	r3, [r0, #12]
10003988:	2b01      	cmp	r3, #1
1000398a:	d903      	bls.n	10003994 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
1000398c:	3b01      	subs	r3, #1
1000398e:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
10003990:	2000      	movs	r0, #0
}
10003992:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
10003994:	f3ef 8510 	mrs	r5, PRIMASK
10003998:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
1000399a:	6901      	ldr	r1, [r0, #16]
1000399c:	6880      	ldr	r0, [r0, #8]
1000399e:	f001 ff3e 	bl	1000581e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
100039a2:	0020      	movs	r0, r4
100039a4:	f001 ffeb 	bl	1000597e <z_unpend_first_thread>
	mutex->owner = new_owner;
100039a8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
100039aa:	2800      	cmp	r0, #0
100039ac:	d00b      	beq.n	100039c6 <z_impl_k_mutex_unlock+0x52>
		mutex->owner_orig_prio = new_owner->base.prio;
100039ae:	230e      	movs	r3, #14
100039b0:	56c3      	ldrsb	r3, [r0, r3]
100039b2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
100039b4:	2300      	movs	r3, #0
100039b6:	66c3      	str	r3, [r0, #108]	; 0x6c
		z_ready_thread(new_owner);
100039b8:	f001 ff8c 	bl	100058d4 <z_ready_thread>
		z_reschedule(&lock, key);
100039bc:	0029      	movs	r1, r5
100039be:	4809      	ldr	r0, [pc, #36]	; (100039e4 <z_impl_k_mutex_unlock+0x70>)
100039c0:	f000 f9f4 	bl	10003dac <z_reschedule>
100039c4:	e7e4      	b.n	10003990 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
100039c6:	60e0      	str	r0, [r4, #12]
	if (key != 0U) {
100039c8:	2d00      	cmp	r5, #0
100039ca:	d1e1      	bne.n	10003990 <z_impl_k_mutex_unlock+0x1c>
	__asm__ volatile(
100039cc:	b662      	cpsie	i
100039ce:	f3bf 8f6f 	isb	sy
100039d2:	e7dd      	b.n	10003990 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
100039d4:	2016      	movs	r0, #22
		return -EPERM;
100039d6:	4240      	negs	r0, r0
100039d8:	e7db      	b.n	10003992 <z_impl_k_mutex_unlock+0x1e>
100039da:	2001      	movs	r0, #1
100039dc:	e7fb      	b.n	100039d6 <z_impl_k_mutex_unlock+0x62>
100039de:	46c0      	nop			; (mov r8, r8)
100039e0:	20000b2c 	.word	0x20000b2c
100039e4:	20000b67 	.word	0x20000b67

100039e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
100039e8:	b570      	push	{r4, r5, r6, lr}
100039ea:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100039ec:	f3ef 8510 	mrs	r5, PRIMASK
100039f0:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
100039f2:	f001 ffc4 	bl	1000597e <z_unpend_first_thread>

	if (thread != NULL) {
100039f6:	2800      	cmp	r0, #0
100039f8:	d008      	beq.n	10003a0c <z_impl_k_sem_give+0x24>
100039fa:	2300      	movs	r3, #0
100039fc:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
100039fe:	f001 ff69 	bl	100058d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10003a02:	0029      	movs	r1, r5
10003a04:	4805      	ldr	r0, [pc, #20]	; (10003a1c <z_impl_k_sem_give+0x34>)
10003a06:	f000 f9d1 	bl	10003dac <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10003a0a:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10003a0c:	68a2      	ldr	r2, [r4, #8]
10003a0e:	68e3      	ldr	r3, [r4, #12]
10003a10:	1a9b      	subs	r3, r3, r2
10003a12:	1e59      	subs	r1, r3, #1
10003a14:	418b      	sbcs	r3, r1
10003a16:	189b      	adds	r3, r3, r2
10003a18:	60a3      	str	r3, [r4, #8]
}
10003a1a:	e7f2      	b.n	10003a02 <z_impl_k_sem_give+0x1a>
10003a1c:	20000b67 	.word	0x20000b67

10003a20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10003a20:	b513      	push	{r0, r1, r4, lr}
10003a22:	0004      	movs	r4, r0
10003a24:	f3ef 8110 	mrs	r1, PRIMASK
10003a28:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10003a2a:	6880      	ldr	r0, [r0, #8]
10003a2c:	2800      	cmp	r0, #0
10003a2e:	d008      	beq.n	10003a42 <z_impl_k_sem_take+0x22>
		sem->count--;
10003a30:	3801      	subs	r0, #1
10003a32:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10003a34:	2900      	cmp	r1, #0
10003a36:	d102      	bne.n	10003a3e <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
10003a38:	b662      	cpsie	i
10003a3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10003a3e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10003a40:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003a42:	0010      	movs	r0, r2
10003a44:	4318      	orrs	r0, r3
10003a46:	d107      	bne.n	10003a58 <z_impl_k_sem_take+0x38>
	if (key != 0U) {
10003a48:	2900      	cmp	r1, #0
10003a4a:	d102      	bne.n	10003a52 <z_impl_k_sem_take+0x32>
	__asm__ volatile(
10003a4c:	b662      	cpsie	i
10003a4e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10003a52:	2010      	movs	r0, #16
10003a54:	4240      	negs	r0, r0
10003a56:	e7f3      	b.n	10003a40 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10003a58:	9200      	str	r2, [sp, #0]
10003a5a:	9301      	str	r3, [sp, #4]
10003a5c:	0022      	movs	r2, r4
10003a5e:	4802      	ldr	r0, [pc, #8]	; (10003a68 <z_impl_k_sem_take+0x48>)
10003a60:	f000 f946 	bl	10003cf0 <z_pend_curr>
	return ret;
10003a64:	e7ec      	b.n	10003a40 <z_impl_k_sem_take+0x20>
10003a66:	46c0      	nop			; (mov r8, r8)
10003a68:	20000b67 	.word	0x20000b67

10003a6c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
10003a6c:	89c2      	ldrh	r2, [r0, #14]
{
10003a6e:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
10003a70:	2000      	movs	r0, #0
10003a72:	2a7f      	cmp	r2, #127	; 0x7f
10003a74:	d811      	bhi.n	10003a9a <sliceable+0x2e>
	int ret = slice_ticks;
10003a76:	4a0a      	ldr	r2, [pc, #40]	; (10003aa0 <sliceable+0x34>)
10003a78:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
10003a7a:	2800      	cmp	r0, #0
10003a7c:	d00d      	beq.n	10003a9a <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10003a7e:	210e      	movs	r1, #14
10003a80:	4a08      	ldr	r2, [pc, #32]	; (10003aa4 <sliceable+0x38>)
10003a82:	5659      	ldrsb	r1, [r3, r1]
10003a84:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
10003a86:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10003a88:	4291      	cmp	r1, r2
10003a8a:	db06      	blt.n	10003a9a <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
10003a8c:	7b5a      	ldrb	r2, [r3, #13]
10003a8e:	06d2      	lsls	r2, r2, #27
10003a90:	d103      	bne.n	10003a9a <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
10003a92:	4805      	ldr	r0, [pc, #20]	; (10003aa8 <sliceable+0x3c>)
10003a94:	1a18      	subs	r0, r3, r0
10003a96:	1e43      	subs	r3, r0, #1
10003a98:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
10003a9a:	2301      	movs	r3, #1
10003a9c:	4018      	ands	r0, r3
}
10003a9e:	4770      	bx	lr
10003aa0:	20000b54 	.word	0x20000b54
10003aa4:	20000b50 	.word	0x20000b50
10003aa8:	20000968 	.word	0x20000968

10003aac <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10003aac:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10003aae:	4b04      	ldr	r3, [pc, #16]	; (10003ac0 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10003ab0:	4a04      	ldr	r2, [pc, #16]	; (10003ac4 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10003ab2:	1ac0      	subs	r0, r0, r3
10003ab4:	4b04      	ldr	r3, [pc, #16]	; (10003ac8 <slice_timeout+0x1c>)
10003ab6:	10c0      	asrs	r0, r0, #3
10003ab8:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10003aba:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10003abc:	4770      	bx	lr
10003abe:	46c0      	nop			; (mov r8, r8)
10003ac0:	20000a48 	.word	0x20000a48
10003ac4:	20000b67 	.word	0x20000b67
10003ac8:	aaaaaaab 	.word	0xaaaaaaab

10003acc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10003acc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10003ace:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10003ad0:	4b0c      	ldr	r3, [pc, #48]	; (10003b04 <z_reset_time_slice+0x38>)
{
10003ad2:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
10003ad4:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10003ad6:	4b0c      	ldr	r3, [pc, #48]	; (10003b08 <z_reset_time_slice+0x3c>)
10003ad8:	4374      	muls	r4, r6
10003ada:	18e4      	adds	r4, r4, r3
10003adc:	0020      	movs	r0, r4
10003ade:	f001 ff7c 	bl	100059da <z_abort_timeout>
	slice_expired[cpu] = false;
10003ae2:	2200      	movs	r2, #0
10003ae4:	4b09      	ldr	r3, [pc, #36]	; (10003b0c <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
10003ae6:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
10003ae8:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
10003aea:	f7ff ffbf 	bl	10003a6c <sliceable>
10003aee:	2800      	cmp	r0, #0
10003af0:	d007      	beq.n	10003b02 <z_reset_time_slice+0x36>
	int ret = slice_ticks;
10003af2:	4b07      	ldr	r3, [pc, #28]	; (10003b10 <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10003af4:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
10003af6:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10003af8:	4906      	ldr	r1, [pc, #24]	; (10003b14 <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
10003afa:	3a01      	subs	r2, #1
10003afc:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10003afe:	f000 fb41 	bl	10004184 <z_add_timeout>
	}
}
10003b02:	bd70      	pop	{r4, r5, r6, pc}
10003b04:	20000b2c 	.word	0x20000b2c
10003b08:	20000a48 	.word	0x20000a48
10003b0c:	20000b67 	.word	0x20000b67
10003b10:	20000b54 	.word	0x20000b54
10003b14:	10003aad 	.word	0x10003aad

10003b18 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10003b18:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10003b1a:	4d0e      	ldr	r5, [pc, #56]	; (10003b54 <update_cache+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b1c:	4b0e      	ldr	r3, [pc, #56]	; (10003b58 <update_cache+0x40>)
	return list->head == list;
10003b1e:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b20:	429c      	cmp	r4, r3
10003b22:	d001      	beq.n	10003b28 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003b24:	2c00      	cmp	r4, #0
10003b26:	d100      	bne.n	10003b2a <update_cache+0x12>
10003b28:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10003b2a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10003b2c:	2800      	cmp	r0, #0
10003b2e:	d108      	bne.n	10003b42 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10003b30:	7b5a      	ldrb	r2, [r3, #13]
10003b32:	06d2      	lsls	r2, r2, #27
10003b34:	d105      	bne.n	10003b42 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10003b36:	69a2      	ldr	r2, [r4, #24]
10003b38:	2a00      	cmp	r2, #0
10003b3a:	d102      	bne.n	10003b42 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10003b3c:	89da      	ldrh	r2, [r3, #14]
10003b3e:	2a7f      	cmp	r2, #127	; 0x7f
10003b40:	d805      	bhi.n	10003b4e <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10003b42:	429c      	cmp	r4, r3
10003b44:	d002      	beq.n	10003b4c <update_cache+0x34>
			z_reset_time_slice(thread);
10003b46:	0020      	movs	r0, r4
10003b48:	f7ff ffc0 	bl	10003acc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10003b4c:	0023      	movs	r3, r4
10003b4e:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10003b50:	bd70      	pop	{r4, r5, r6, pc}
10003b52:	46c0      	nop			; (mov r8, r8)
10003b54:	20000b2c 	.word	0x20000b2c
10003b58:	20000b44 	.word	0x20000b44

10003b5c <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10003b5c:	220d      	movs	r2, #13
{
10003b5e:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10003b60:	5682      	ldrsb	r2, [r0, r2]
{
10003b62:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003b64:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003b66:	2a00      	cmp	r2, #0
10003b68:	da04      	bge.n	10003b74 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003b6a:	227f      	movs	r2, #127	; 0x7f
10003b6c:	4013      	ands	r3, r2
10003b6e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10003b70:	f001 fe74 	bl	1000585c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003b74:	2380      	movs	r3, #128	; 0x80
10003b76:	7b62      	ldrb	r2, [r4, #13]
10003b78:	425b      	negs	r3, r3
10003b7a:	4313      	orrs	r3, r2
	return list->head == list;
10003b7c:	4a13      	ldr	r2, [pc, #76]	; (10003bcc <move_thread_to_end_of_prio_q+0x70>)
10003b7e:	7363      	strb	r3, [r4, #13]
10003b80:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003b82:	4813      	ldr	r0, [pc, #76]	; (10003bd0 <move_thread_to_end_of_prio_q+0x74>)
10003b84:	4283      	cmp	r3, r0
10003b86:	d100      	bne.n	10003b8a <move_thread_to_end_of_prio_q+0x2e>
10003b88:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10003b8a:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003b8c:	2b00      	cmp	r3, #0
10003b8e:	d104      	bne.n	10003b9a <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10003b90:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10003b92:	6061      	str	r1, [r4, #4]

	tail->next = node;
10003b94:	600c      	str	r4, [r1, #0]
	list->tail = node;
10003b96:	61d4      	str	r4, [r2, #28]
}
10003b98:	e00c      	b.n	10003bb4 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10003b9a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10003b9c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10003b9e:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10003ba0:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003ba2:	42b5      	cmp	r5, r6
10003ba4:	d00d      	beq.n	10003bc2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003ba6:	42ae      	cmp	r6, r5
10003ba8:	dd0b      	ble.n	10003bc2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10003baa:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10003bac:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10003bae:	6061      	str	r1, [r4, #4]
	prev->next = node;
10003bb0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10003bb2:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10003bb4:	6890      	ldr	r0, [r2, #8]
10003bb6:	1b00      	subs	r0, r0, r4
10003bb8:	4243      	negs	r3, r0
10003bba:	4158      	adcs	r0, r3
10003bbc:	f7ff ffac 	bl	10003b18 <update_cache>
}
10003bc0:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003bc2:	4299      	cmp	r1, r3
10003bc4:	d0e4      	beq.n	10003b90 <move_thread_to_end_of_prio_q+0x34>
10003bc6:	681b      	ldr	r3, [r3, #0]
10003bc8:	e7e0      	b.n	10003b8c <move_thread_to_end_of_prio_q+0x30>
10003bca:	46c0      	nop			; (mov r8, r8)
10003bcc:	20000b2c 	.word	0x20000b2c
10003bd0:	20000b44 	.word	0x20000b44

10003bd4 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003bd4:	230d      	movs	r3, #13
{
10003bd6:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003bd8:	56c3      	ldrsb	r3, [r0, r3]
10003bda:	7b41      	ldrb	r1, [r0, #13]
10003bdc:	2b00      	cmp	r3, #0
10003bde:	db26      	blt.n	10003c2e <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10003be0:	06cb      	lsls	r3, r1, #27
10003be2:	d124      	bne.n	10003c2e <ready_thread+0x5a>
	return node->next != NULL;
10003be4:	6983      	ldr	r3, [r0, #24]
10003be6:	2b00      	cmp	r3, #0
10003be8:	d121      	bne.n	10003c2e <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10003bea:	2280      	movs	r2, #128	; 0x80
10003bec:	4252      	negs	r2, r2
10003bee:	430a      	orrs	r2, r1
10003bf0:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10003bf2:	4a11      	ldr	r2, [pc, #68]	; (10003c38 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bf4:	4c11      	ldr	r4, [pc, #68]	; (10003c3c <ready_thread+0x68>)
	return list->head == list;
10003bf6:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bf8:	42a1      	cmp	r1, r4
10003bfa:	d000      	beq.n	10003bfe <ready_thread+0x2a>
10003bfc:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10003bfe:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003c00:	2b00      	cmp	r3, #0
10003c02:	d104      	bne.n	10003c0e <ready_thread+0x3a>
	node->next = list;
10003c04:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10003c06:	6041      	str	r1, [r0, #4]
	tail->next = node;
10003c08:	6008      	str	r0, [r1, #0]
	list->tail = node;
10003c0a:	61d0      	str	r0, [r2, #28]
}
10003c0c:	e00c      	b.n	10003c28 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10003c0e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10003c10:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10003c12:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10003c14:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10003c16:	42b5      	cmp	r5, r6
10003c18:	d00a      	beq.n	10003c30 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003c1a:	42ae      	cmp	r6, r5
10003c1c:	dd08      	ble.n	10003c30 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10003c1e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003c20:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10003c22:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003c24:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003c26:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003c28:	2000      	movs	r0, #0
10003c2a:	f7ff ff75 	bl	10003b18 <update_cache>
}
10003c2e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003c30:	428b      	cmp	r3, r1
10003c32:	d0e7      	beq.n	10003c04 <ready_thread+0x30>
10003c34:	681b      	ldr	r3, [r3, #0]
10003c36:	e7e3      	b.n	10003c00 <ready_thread+0x2c>
10003c38:	20000b2c 	.word	0x20000b2c
10003c3c:	20000b44 	.word	0x20000b44

10003c40 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10003c40:	220d      	movs	r2, #13
{
10003c42:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10003c44:	5682      	ldrsb	r2, [r0, r2]
{
10003c46:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003c48:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003c4a:	2a00      	cmp	r2, #0
10003c4c:	da04      	bge.n	10003c58 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003c4e:	227f      	movs	r2, #127	; 0x7f
10003c50:	4013      	ands	r3, r2
10003c52:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003c54:	f001 fe02 	bl	1000585c <sys_dlist_remove>
	update_cache(thread == _current);
10003c58:	4b03      	ldr	r3, [pc, #12]	; (10003c68 <unready_thread+0x28>)
10003c5a:	6898      	ldr	r0, [r3, #8]
10003c5c:	1b00      	subs	r0, r0, r4
10003c5e:	4243      	negs	r3, r0
10003c60:	4158      	adcs	r0, r3
10003c62:	f7ff ff59 	bl	10003b18 <update_cache>
}
10003c66:	bd10      	pop	{r4, pc}
10003c68:	20000b2c 	.word	0x20000b2c

10003c6c <pend_locked>:
{
10003c6c:	b570      	push	{r4, r5, r6, lr}
10003c6e:	001d      	movs	r5, r3
10003c70:	0016      	movs	r6, r2
10003c72:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10003c74:	f001 fe05 	bl	10005882 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
10003c78:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003c7a:	1c72      	adds	r2, r6, #1
10003c7c:	d101      	bne.n	10003c82 <pend_locked+0x16>
10003c7e:	3301      	adds	r3, #1
10003c80:	d006      	beq.n	10003c90 <pend_locked+0x24>
10003c82:	0020      	movs	r0, r4
10003c84:	0032      	movs	r2, r6
10003c86:	002b      	movs	r3, r5
10003c88:	4902      	ldr	r1, [pc, #8]	; (10003c94 <pend_locked+0x28>)
10003c8a:	3018      	adds	r0, #24
10003c8c:	f000 fa7a 	bl	10004184 <z_add_timeout>
}
10003c90:	bd70      	pop	{r4, r5, r6, pc}
10003c92:	46c0      	nop			; (mov r8, r8)
10003c94:	10005949 	.word	0x10005949

10003c98 <z_time_slice>:
{
10003c98:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003c9a:	f3ef 8510 	mrs	r5, PRIMASK
10003c9e:	b672      	cpsid	i
	struct k_thread *curr = _current;
10003ca0:	4a10      	ldr	r2, [pc, #64]	; (10003ce4 <z_time_slice+0x4c>)
	if (pending_current == curr) {
10003ca2:	4b11      	ldr	r3, [pc, #68]	; (10003ce8 <z_time_slice+0x50>)
	struct k_thread *curr = _current;
10003ca4:	6894      	ldr	r4, [r2, #8]
	if (pending_current == curr) {
10003ca6:	6818      	ldr	r0, [r3, #0]
10003ca8:	42a0      	cmp	r0, r4
10003caa:	d107      	bne.n	10003cbc <z_time_slice+0x24>
		z_reset_time_slice(curr);
10003cac:	f7ff ff0e 	bl	10003acc <z_reset_time_slice>
	if (key != 0U) {
10003cb0:	2d00      	cmp	r5, #0
10003cb2:	d102      	bne.n	10003cba <z_time_slice+0x22>
	__asm__ volatile(
10003cb4:	b662      	cpsie	i
10003cb6:	f3bf 8f6f 	isb	sy
}
10003cba:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10003cbc:	2100      	movs	r1, #0
10003cbe:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
10003cc0:	7c12      	ldrb	r2, [r2, #16]
10003cc2:	4b0a      	ldr	r3, [pc, #40]	; (10003cec <z_time_slice+0x54>)
10003cc4:	5c9b      	ldrb	r3, [r3, r2]
10003cc6:	428b      	cmp	r3, r1
10003cc8:	d0f2      	beq.n	10003cb0 <z_time_slice+0x18>
10003cca:	0020      	movs	r0, r4
10003ccc:	f7ff fece 	bl	10003a6c <sliceable>
10003cd0:	2800      	cmp	r0, #0
10003cd2:	d0ed      	beq.n	10003cb0 <z_time_slice+0x18>
		if (!z_is_thread_prevented_from_running(curr)) {
10003cd4:	7b63      	ldrb	r3, [r4, #13]
10003cd6:	06db      	lsls	r3, r3, #27
10003cd8:	d102      	bne.n	10003ce0 <z_time_slice+0x48>
			move_thread_to_end_of_prio_q(curr);
10003cda:	0020      	movs	r0, r4
10003cdc:	f7ff ff3e 	bl	10003b5c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
10003ce0:	0020      	movs	r0, r4
10003ce2:	e7e3      	b.n	10003cac <z_time_slice+0x14>
10003ce4:	20000b2c 	.word	0x20000b2c
10003ce8:	20000b4c 	.word	0x20000b4c
10003cec:	20000b67 	.word	0x20000b67

10003cf0 <z_pend_curr>:
{
10003cf0:	b510      	push	{r4, lr}
	pending_current = _current;
10003cf2:	4809      	ldr	r0, [pc, #36]	; (10003d18 <z_pend_curr+0x28>)
{
10003cf4:	000c      	movs	r4, r1
	pending_current = _current;
10003cf6:	4b09      	ldr	r3, [pc, #36]	; (10003d1c <z_pend_curr+0x2c>)
{
10003cf8:	0011      	movs	r1, r2
	pending_current = _current;
10003cfa:	6882      	ldr	r2, [r0, #8]
10003cfc:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10003cfe:	f3ef 8310 	mrs	r3, PRIMASK
10003d02:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10003d04:	9a02      	ldr	r2, [sp, #8]
10003d06:	9b03      	ldr	r3, [sp, #12]
10003d08:	6880      	ldr	r0, [r0, #8]
10003d0a:	f7ff ffaf 	bl	10003c6c <pend_locked>
	ret = arch_swap(key);
10003d0e:	0020      	movs	r0, r4
10003d10:	f7fe fa76 	bl	10002200 <arch_swap>
}
10003d14:	bd10      	pop	{r4, pc}
10003d16:	46c0      	nop			; (mov r8, r8)
10003d18:	20000b2c 	.word	0x20000b2c
10003d1c:	20000b4c 	.word	0x20000b4c

10003d20 <z_set_prio>:
{
10003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003d22:	0004      	movs	r4, r0
10003d24:	f3ef 8710 	mrs	r7, PRIMASK
10003d28:	b672      	cpsid	i
	uint8_t state = thread->base.thread_state;
10003d2a:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
10003d2c:	b24e      	sxtb	r6, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10003d2e:	06da      	lsls	r2, r3, #27
10003d30:	d11b      	bne.n	10003d6a <z_set_prio+0x4a>
	return node->next != NULL;
10003d32:	6985      	ldr	r5, [r0, #24]
10003d34:	2d00      	cmp	r5, #0
10003d36:	d118      	bne.n	10003d6a <z_set_prio+0x4a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003d38:	227f      	movs	r2, #127	; 0x7f
10003d3a:	4013      	ands	r3, r2
10003d3c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003d3e:	f001 fd8d 	bl	1000585c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003d42:	2380      	movs	r3, #128	; 0x80
10003d44:	7b62      	ldrb	r2, [r4, #13]
10003d46:	425b      	negs	r3, r3
10003d48:	4313      	orrs	r3, r2
10003d4a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
10003d4c:	4b15      	ldr	r3, [pc, #84]	; (10003da4 <z_set_prio+0x84>)
				thread->base.prio = prio;
10003d4e:	73a6      	strb	r6, [r4, #14]
10003d50:	699a      	ldr	r2, [r3, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003d52:	4915      	ldr	r1, [pc, #84]	; (10003da8 <z_set_prio+0x88>)
10003d54:	428a      	cmp	r2, r1
10003d56:	d000      	beq.n	10003d5a <z_set_prio+0x3a>
10003d58:	0015      	movs	r5, r2
	return (node == list->tail) ? NULL : node->next;
10003d5a:	69da      	ldr	r2, [r3, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003d5c:	2d00      	cmp	r5, #0
10003d5e:	d10c      	bne.n	10003d7a <z_set_prio+0x5a>
	node->next = list;
10003d60:	6021      	str	r1, [r4, #0]
	node->prev = tail;
10003d62:	6062      	str	r2, [r4, #4]
	tail->next = node;
10003d64:	6014      	str	r4, [r2, #0]
	list->tail = node;
10003d66:	61dc      	str	r4, [r3, #28]
}
10003d68:	e012      	b.n	10003d90 <z_set_prio+0x70>
10003d6a:	2000      	movs	r0, #0
			thread->base.prio = prio;
10003d6c:	73a6      	strb	r6, [r4, #14]
	if (key != 0U) {
10003d6e:	2f00      	cmp	r7, #0
10003d70:	d102      	bne.n	10003d78 <z_set_prio+0x58>
	__asm__ volatile(
10003d72:	b662      	cpsie	i
10003d74:	f3bf 8f6f 	isb	sy
}
10003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
10003d7a:	200e      	movs	r0, #14
10003d7c:	5628      	ldrsb	r0, [r5, r0]
	if (b1 != b2) {
10003d7e:	4286      	cmp	r6, r0
10003d80:	d00b      	beq.n	10003d9a <z_set_prio+0x7a>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003d82:	42b0      	cmp	r0, r6
10003d84:	dd09      	ble.n	10003d9a <z_set_prio+0x7a>
	sys_dnode_t *const prev = successor->prev;
10003d86:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
10003d88:	6025      	str	r5, [r4, #0]
	node->prev = prev;
10003d8a:	6063      	str	r3, [r4, #4]
	prev->next = node;
10003d8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10003d8e:	606c      	str	r4, [r5, #4]
			update_cache(1);
10003d90:	2001      	movs	r0, #1
10003d92:	f7ff fec1 	bl	10003b18 <update_cache>
10003d96:	2001      	movs	r0, #1
10003d98:	e7e9      	b.n	10003d6e <z_set_prio+0x4e>
	return (node == list->tail) ? NULL : node->next;
10003d9a:	42aa      	cmp	r2, r5
10003d9c:	d0e0      	beq.n	10003d60 <z_set_prio+0x40>
10003d9e:	682d      	ldr	r5, [r5, #0]
10003da0:	e7dc      	b.n	10003d5c <z_set_prio+0x3c>
10003da2:	46c0      	nop			; (mov r8, r8)
10003da4:	20000b2c 	.word	0x20000b2c
10003da8:	20000b44 	.word	0x20000b44

10003dac <z_reschedule>:
{
10003dac:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003dae:	2900      	cmp	r1, #0
10003db0:	d10a      	bne.n	10003dc8 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003db2:	f3ef 8005 	mrs	r0, IPSR
10003db6:	2800      	cmp	r0, #0
10003db8:	d107      	bne.n	10003dca <z_reschedule+0x1e>
	return new_thread != _current;
10003dba:	4b06      	ldr	r3, [pc, #24]	; (10003dd4 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003dbc:	689a      	ldr	r2, [r3, #8]
10003dbe:	695b      	ldr	r3, [r3, #20]
10003dc0:	429a      	cmp	r2, r3
10003dc2:	d002      	beq.n	10003dca <z_reschedule+0x1e>
10003dc4:	f7fe fa1c 	bl	10002200 <arch_swap>
}
10003dc8:	bd10      	pop	{r4, pc}
10003dca:	b662      	cpsie	i
10003dcc:	f3bf 8f6f 	isb	sy
10003dd0:	e7fa      	b.n	10003dc8 <z_reschedule+0x1c>
10003dd2:	46c0      	nop			; (mov r8, r8)
10003dd4:	20000b2c 	.word	0x20000b2c

10003dd8 <z_sched_start>:
{
10003dd8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003dda:	f3ef 8410 	mrs	r4, PRIMASK
10003dde:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003de0:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003de2:	7b43      	ldrb	r3, [r0, #13]
10003de4:	4213      	tst	r3, r2
10003de6:	d105      	bne.n	10003df4 <z_sched_start+0x1c>
	if (key != 0U) {
10003de8:	2c00      	cmp	r4, #0
10003dea:	d102      	bne.n	10003df2 <z_sched_start+0x1a>
	__asm__ volatile(
10003dec:	b662      	cpsie	i
10003dee:	f3bf 8f6f 	isb	sy
}
10003df2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003df4:	4393      	bics	r3, r2
10003df6:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003df8:	f7ff feec 	bl	10003bd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003dfc:	0021      	movs	r1, r4
10003dfe:	4802      	ldr	r0, [pc, #8]	; (10003e08 <z_sched_start+0x30>)
10003e00:	f7ff ffd4 	bl	10003dac <z_reschedule>
10003e04:	e7f5      	b.n	10003df2 <z_sched_start+0x1a>
10003e06:	46c0      	nop			; (mov r8, r8)
10003e08:	20000b68 	.word	0x20000b68

10003e0c <z_impl_k_thread_suspend>:
{
10003e0c:	b570      	push	{r4, r5, r6, lr}
10003e0e:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003e10:	3018      	adds	r0, #24
10003e12:	f001 fde2 	bl	100059da <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10003e16:	f3ef 8610 	mrs	r6, PRIMASK
10003e1a:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10003e1c:	220d      	movs	r2, #13
10003e1e:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10003e20:	7b63      	ldrb	r3, [r4, #13]
10003e22:	2a00      	cmp	r2, #0
10003e24:	da05      	bge.n	10003e32 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003e26:	227f      	movs	r2, #127	; 0x7f
10003e28:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003e2a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003e2c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003e2e:	f001 fd15 	bl	1000585c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003e32:	2310      	movs	r3, #16
		update_cache(thread == _current);
10003e34:	4d0a      	ldr	r5, [pc, #40]	; (10003e60 <z_impl_k_thread_suspend+0x54>)
10003e36:	7b62      	ldrb	r2, [r4, #13]
10003e38:	68a8      	ldr	r0, [r5, #8]
10003e3a:	4313      	orrs	r3, r2
10003e3c:	1b00      	subs	r0, r0, r4
10003e3e:	7363      	strb	r3, [r4, #13]
10003e40:	4243      	negs	r3, r0
10003e42:	4158      	adcs	r0, r3
10003e44:	f7ff fe68 	bl	10003b18 <update_cache>
	if (key != 0U) {
10003e48:	2e00      	cmp	r6, #0
10003e4a:	d102      	bne.n	10003e52 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10003e4c:	b662      	cpsie	i
10003e4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10003e52:	68ab      	ldr	r3, [r5, #8]
10003e54:	42a3      	cmp	r3, r4
10003e56:	d101      	bne.n	10003e5c <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10003e58:	f001 fdb8 	bl	100059cc <z_reschedule_unlocked>
}
10003e5c:	bd70      	pop	{r4, r5, r6, pc}
10003e5e:	46c0      	nop			; (mov r8, r8)
10003e60:	20000b2c 	.word	0x20000b2c

10003e64 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003e64:	f3ef 8110 	mrs	r1, PRIMASK
10003e68:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10003e6a:	4b05      	ldr	r3, [pc, #20]	; (10003e80 <k_sched_lock+0x1c>)
10003e6c:	689a      	ldr	r2, [r3, #8]
10003e6e:	7bd3      	ldrb	r3, [r2, #15]
10003e70:	3b01      	subs	r3, #1
10003e72:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003e74:	2900      	cmp	r1, #0
10003e76:	d102      	bne.n	10003e7e <k_sched_lock+0x1a>
	__asm__ volatile(
10003e78:	b662      	cpsie	i
10003e7a:	f3bf 8f6f 	isb	sy
}
10003e7e:	4770      	bx	lr
10003e80:	20000b2c 	.word	0x20000b2c

10003e84 <k_sched_unlock>:
{
10003e84:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003e86:	f3ef 8410 	mrs	r4, PRIMASK
10003e8a:	b672      	cpsid	i
		++_current->base.sched_locked;
10003e8c:	4b07      	ldr	r3, [pc, #28]	; (10003eac <k_sched_unlock+0x28>)
		update_cache(0);
10003e8e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10003e90:	689a      	ldr	r2, [r3, #8]
10003e92:	7bd3      	ldrb	r3, [r2, #15]
10003e94:	3301      	adds	r3, #1
10003e96:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10003e98:	f7ff fe3e 	bl	10003b18 <update_cache>
	if (key != 0U) {
10003e9c:	2c00      	cmp	r4, #0
10003e9e:	d102      	bne.n	10003ea6 <k_sched_unlock+0x22>
	__asm__ volatile(
10003ea0:	b662      	cpsie	i
10003ea2:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10003ea6:	f001 fd91 	bl	100059cc <z_reschedule_unlocked>
}
10003eaa:	bd10      	pop	{r4, pc}
10003eac:	20000b2c 	.word	0x20000b2c

10003eb0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
10003eb0:	4b02      	ldr	r3, [pc, #8]	; (10003ebc <z_sched_init+0xc>)
10003eb2:	4a03      	ldr	r2, [pc, #12]	; (10003ec0 <z_sched_init+0x10>)
10003eb4:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10003eb6:	61da      	str	r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
10003eb8:	4770      	bx	lr
10003eba:	46c0      	nop			; (mov r8, r8)
10003ebc:	20000b2c 	.word	0x20000b2c
10003ec0:	20000b44 	.word	0x20000b44

10003ec4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003ec6:	f3ef 8510 	mrs	r5, PRIMASK
10003eca:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003ecc:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10003ece:	4c19      	ldr	r4, [pc, #100]	; (10003f34 <z_impl_k_yield+0x70>)
10003ed0:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003ed2:	7b43      	ldrb	r3, [r0, #13]
10003ed4:	4013      	ands	r3, r2
10003ed6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003ed8:	f001 fcc0 	bl	1000585c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003edc:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10003ede:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10003ee0:	4252      	negs	r2, r2
10003ee2:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003ee4:	4814      	ldr	r0, [pc, #80]	; (10003f38 <z_impl_k_yield+0x74>)
10003ee6:	430a      	orrs	r2, r1
10003ee8:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10003eea:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003eec:	4282      	cmp	r2, r0
10003eee:	d100      	bne.n	10003ef2 <z_impl_k_yield+0x2e>
10003ef0:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10003ef2:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003ef4:	2a00      	cmp	r2, #0
10003ef6:	d104      	bne.n	10003f02 <z_impl_k_yield+0x3e>
	node->next = list;
10003ef8:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10003efa:	6059      	str	r1, [r3, #4]
	tail->next = node;
10003efc:	600b      	str	r3, [r1, #0]
	list->tail = node;
10003efe:	61e3      	str	r3, [r4, #28]
}
10003f00:	e00c      	b.n	10003f1c <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10003f02:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10003f04:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10003f06:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10003f08:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10003f0a:	42be      	cmp	r6, r7
10003f0c:	d00d      	beq.n	10003f2a <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10003f0e:	42b7      	cmp	r7, r6
10003f10:	dd0b      	ble.n	10003f2a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10003f12:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10003f14:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10003f16:	6059      	str	r1, [r3, #4]
	prev->next = node;
10003f18:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10003f1a:	6053      	str	r3, [r2, #4]
	update_cache(1);
10003f1c:	2001      	movs	r0, #1
10003f1e:	f7ff fdfb 	bl	10003b18 <update_cache>
10003f22:	0028      	movs	r0, r5
10003f24:	f7fe f96c 	bl	10002200 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10003f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003f2a:	428a      	cmp	r2, r1
10003f2c:	d0e4      	beq.n	10003ef8 <z_impl_k_yield+0x34>
10003f2e:	6812      	ldr	r2, [r2, #0]
10003f30:	e7e0      	b.n	10003ef4 <z_impl_k_yield+0x30>
10003f32:	46c0      	nop			; (mov r8, r8)
10003f34:	20000b2c 	.word	0x20000b2c
10003f38:	20000b44 	.word	0x20000b44

10003f3c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10003f3c:	0003      	movs	r3, r0
{
10003f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10003f40:	430b      	orrs	r3, r1
{
10003f42:	0004      	movs	r4, r0
10003f44:	000d      	movs	r5, r1
	if (ticks == 0) {
10003f46:	2b00      	cmp	r3, #0
10003f48:	d103      	bne.n	10003f52 <z_tick_sleep+0x16>
	z_impl_k_yield();
10003f4a:	f7ff ffbb 	bl	10003ec4 <z_impl_k_yield>
		k_yield();
		return 0;
10003f4e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10003f50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10003f52:	1c4b      	adds	r3, r1, #1
10003f54:	db2e      	blt.n	10003fb4 <z_tick_sleep+0x78>
10003f56:	1c4b      	adds	r3, r1, #1
10003f58:	d101      	bne.n	10003f5e <z_tick_sleep+0x22>
10003f5a:	1c83      	adds	r3, r0, #2
10003f5c:	d32a      	bcc.n	10003fb4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10003f5e:	f001 fd4f 	bl	10005a00 <sys_clock_tick_get_32>
10003f62:	1827      	adds	r7, r4, r0
10003f64:	f3ef 8310 	mrs	r3, PRIMASK
10003f68:	b672      	cpsid	i
	pending_current = _current;
10003f6a:	4e14      	ldr	r6, [pc, #80]	; (10003fbc <z_tick_sleep+0x80>)
10003f6c:	9301      	str	r3, [sp, #4]
10003f6e:	68b0      	ldr	r0, [r6, #8]
10003f70:	4b13      	ldr	r3, [pc, #76]	; (10003fc0 <z_tick_sleep+0x84>)
10003f72:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10003f74:	f7ff fe64 	bl	10003c40 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10003f78:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003f7a:	0022      	movs	r2, r4
10003f7c:	002b      	movs	r3, r5
10003f7e:	4911      	ldr	r1, [pc, #68]	; (10003fc4 <z_tick_sleep+0x88>)
10003f80:	3018      	adds	r0, #24
10003f82:	f000 f8ff 	bl	10004184 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003f86:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10003f88:	68b2      	ldr	r2, [r6, #8]
10003f8a:	9801      	ldr	r0, [sp, #4]
10003f8c:	7b51      	ldrb	r1, [r2, #13]
10003f8e:	430b      	orrs	r3, r1
10003f90:	7353      	strb	r3, [r2, #13]
10003f92:	f7fe f935 	bl	10002200 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10003f96:	f001 fd33 	bl	10005a00 <sys_clock_tick_get_32>
10003f9a:	2300      	movs	r3, #0
10003f9c:	003a      	movs	r2, r7
10003f9e:	0004      	movs	r4, r0
10003fa0:	001d      	movs	r5, r3
10003fa2:	1b12      	subs	r2, r2, r4
10003fa4:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10003fa6:	42ab      	cmp	r3, r5
10003fa8:	dc02      	bgt.n	10003fb0 <z_tick_sleep+0x74>
10003faa:	d1d0      	bne.n	10003f4e <z_tick_sleep+0x12>
10003fac:	42aa      	cmp	r2, r5
10003fae:	d0ce      	beq.n	10003f4e <z_tick_sleep+0x12>
		return ticks;
10003fb0:	0010      	movs	r0, r2
10003fb2:	e7cd      	b.n	10003f50 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003fb4:	2702      	movs	r7, #2
10003fb6:	427f      	negs	r7, r7
10003fb8:	1b3f      	subs	r7, r7, r4
10003fba:	e7d3      	b.n	10003f64 <z_tick_sleep+0x28>
10003fbc:	20000b2c 	.word	0x20000b2c
10003fc0:	20000b4c 	.word	0x20000b4c
10003fc4:	10005949 	.word	0x10005949

10003fc8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10003fc8:	b510      	push	{r4, lr}
10003fca:	000b      	movs	r3, r1
10003fcc:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003fce:	1c42      	adds	r2, r0, #1
10003fd0:	d107      	bne.n	10003fe2 <z_impl_k_sleep+0x1a>
10003fd2:	3301      	adds	r3, #1
10003fd4:	d105      	bne.n	10003fe2 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10003fd6:	4b07      	ldr	r3, [pc, #28]	; (10003ff4 <z_impl_k_sleep+0x2c>)
10003fd8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10003fda:	f7ff ff17 	bl	10003e0c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10003fde:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10003fe0:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10003fe2:	0021      	movs	r1, r4
10003fe4:	f7ff ffaa 	bl	10003f3c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10003fe8:	220a      	movs	r2, #10
10003fea:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10003fec:	17c1      	asrs	r1, r0, #31
10003fee:	f7fc f975 	bl	100002dc <__aeabi_uldivmod>
	return ret;
10003ff2:	e7f5      	b.n	10003fe0 <z_impl_k_sleep+0x18>
10003ff4:	20000b2c 	.word	0x20000b2c

10003ff8 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10003ff8:	4b01      	ldr	r3, [pc, #4]	; (10004000 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10003ffa:	6898      	ldr	r0, [r3, #8]
}
10003ffc:	4770      	bx	lr
10003ffe:	46c0      	nop			; (mov r8, r8)
10004000:	20000b2c 	.word	0x20000b2c

10004004 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10004004:	b570      	push	{r4, r5, r6, lr}
10004006:	0004      	movs	r4, r0
10004008:	f3ef 8610 	mrs	r6, PRIMASK
1000400c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
1000400e:	7b03      	ldrb	r3, [r0, #12]
10004010:	07db      	lsls	r3, r3, #31
10004012:	d508      	bpl.n	10004026 <z_thread_abort+0x22>
	if (key != 0U) {
10004014:	2e00      	cmp	r6, #0
10004016:	d102      	bne.n	1000401e <z_thread_abort+0x1a>
	__asm__ volatile(
10004018:	b662      	cpsie	i
1000401a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
1000401e:	2004      	movs	r0, #4
10004020:	b662      	cpsie	i
10004022:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10004024:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10004026:	2308      	movs	r3, #8
10004028:	7b42      	ldrb	r2, [r0, #13]
1000402a:	421a      	tst	r2, r3
1000402c:	d005      	beq.n	1000403a <z_thread_abort+0x36>
	if (key != 0U) {
1000402e:	2e00      	cmp	r6, #0
10004030:	d1f8      	bne.n	10004024 <z_thread_abort+0x20>
	__asm__ volatile(
10004032:	b662      	cpsie	i
10004034:	f3bf 8f6f 	isb	sy
10004038:	e7f4      	b.n	10004024 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000403a:	2120      	movs	r1, #32
1000403c:	0010      	movs	r0, r2
1000403e:	4388      	bics	r0, r1
10004040:	0001      	movs	r1, r0
10004042:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10004044:	b248      	sxtb	r0, r1
10004046:	2800      	cmp	r0, #0
10004048:	db20      	blt.n	1000408c <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000404a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
1000404c:	68a3      	ldr	r3, [r4, #8]
1000404e:	2b00      	cmp	r3, #0
10004050:	d002      	beq.n	10004058 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10004052:	0020      	movs	r0, r4
10004054:	f001 fc0a 	bl	1000586c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10004058:	0020      	movs	r0, r4
1000405a:	3018      	adds	r0, #24
1000405c:	f001 fcbd 	bl	100059da <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10004060:	0023      	movs	r3, r4
	return list->head == list;
10004062:	6da5      	ldr	r5, [r4, #88]	; 0x58
10004064:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004066:	429d      	cmp	r5, r3
10004068:	d001      	beq.n	1000406e <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
1000406a:	2d00      	cmp	r5, #0
1000406c:	d116      	bne.n	1000409c <z_thread_abort+0x98>
		update_cache(1);
1000406e:	2001      	movs	r0, #1
10004070:	f7ff fd52 	bl	10003b18 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10004074:	4b10      	ldr	r3, [pc, #64]	; (100040b8 <z_thread_abort+0xb4>)
10004076:	689b      	ldr	r3, [r3, #8]
10004078:	42a3      	cmp	r3, r4
1000407a:	d1d8      	bne.n	1000402e <z_thread_abort+0x2a>
1000407c:	f3ef 8305 	mrs	r3, IPSR
10004080:	2b00      	cmp	r3, #0
10004082:	d1d4      	bne.n	1000402e <z_thread_abort+0x2a>
10004084:	0030      	movs	r0, r6
10004086:	f7fe f8bb 	bl	10002200 <arch_swap>
	return ret;
1000408a:	e7d0      	b.n	1000402e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000408c:	215f      	movs	r1, #95	; 0x5f
1000408e:	400a      	ands	r2, r1
10004090:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004092:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004094:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004096:	f001 fbe1 	bl	1000585c <sys_dlist_remove>
}
1000409a:	e7d7      	b.n	1000404c <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
1000409c:	0028      	movs	r0, r5
1000409e:	f001 fbe5 	bl	1000586c <unpend_thread_no_timeout>
100040a2:	0028      	movs	r0, r5
100040a4:	3018      	adds	r0, #24
100040a6:	f001 fc98 	bl	100059da <z_abort_timeout>
100040aa:	2300      	movs	r3, #0
		ready_thread(thread);
100040ac:	0028      	movs	r0, r5
100040ae:	66eb      	str	r3, [r5, #108]	; 0x6c
100040b0:	f7ff fd90 	bl	10003bd4 <ready_thread>
100040b4:	e7d4      	b.n	10004060 <z_thread_abort+0x5c>
100040b6:	46c0      	nop			; (mov r8, r8)
100040b8:	20000b2c 	.word	0x20000b2c

100040bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
100040bc:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
100040be:	4806      	ldr	r0, [pc, #24]	; (100040d8 <z_data_copy+0x1c>)
100040c0:	4a06      	ldr	r2, [pc, #24]	; (100040dc <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100040c2:	4907      	ldr	r1, [pc, #28]	; (100040e0 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
100040c4:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100040c6:	f001 fb94 	bl	100057f2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
100040ca:	4a06      	ldr	r2, [pc, #24]	; (100040e4 <z_data_copy+0x28>)
100040cc:	4906      	ldr	r1, [pc, #24]	; (100040e8 <z_data_copy+0x2c>)
100040ce:	4807      	ldr	r0, [pc, #28]	; (100040ec <z_data_copy+0x30>)
100040d0:	f001 fb8f 	bl	100057f2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
100040d4:	bd10      	pop	{r4, pc}
100040d6:	46c0      	nop			; (mov r8, r8)
100040d8:	20000000 	.word	0x20000000
100040dc:	200004b8 	.word	0x200004b8
100040e0:	10009adc 	.word	0x10009adc
100040e4:	00000000 	.word	0x00000000
100040e8:	10009adc 	.word	0x10009adc
100040ec:	20000000 	.word	0x20000000

100040f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100040f0:	2000      	movs	r0, #0
{
100040f2:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100040f4:	4b03      	ldr	r3, [pc, #12]	; (10004104 <elapsed+0x14>)
100040f6:	681b      	ldr	r3, [r3, #0]
100040f8:	4283      	cmp	r3, r0
100040fa:	d101      	bne.n	10004100 <elapsed+0x10>
100040fc:	f7fe ff20 	bl	10002f40 <sys_clock_elapsed>
}
10004100:	bd10      	pop	{r4, pc}
10004102:	46c0      	nop			; (mov r8, r8)
10004104:	20000b58 	.word	0x20000b58

10004108 <next_timeout>:

static int32_t next_timeout(void)
{
10004108:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
1000410a:	4b0e      	ldr	r3, [pc, #56]	; (10004144 <next_timeout+0x3c>)
1000410c:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000410e:	429e      	cmp	r6, r3
10004110:	d103      	bne.n	1000411a <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10004112:	f7ff ffed 	bl	100040f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
10004116:	480c      	ldr	r0, [pc, #48]	; (10004148 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
10004118:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
1000411a:	f7ff ffe9 	bl	100040f0 <elapsed>
	if ((to == NULL) ||
1000411e:	2e00      	cmp	r6, #0
10004120:	d0f9      	beq.n	10004116 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10004122:	6932      	ldr	r2, [r6, #16]
10004124:	6973      	ldr	r3, [r6, #20]
10004126:	0004      	movs	r4, r0
10004128:	17c5      	asrs	r5, r0, #31
1000412a:	1b12      	subs	r2, r2, r4
1000412c:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
1000412e:	2b00      	cmp	r3, #0
10004130:	dcf1      	bgt.n	10004116 <next_timeout+0xe>
10004132:	d103      	bne.n	1000413c <next_timeout+0x34>
10004134:	2180      	movs	r1, #128	; 0x80
10004136:	0609      	lsls	r1, r1, #24
10004138:	428a      	cmp	r2, r1
1000413a:	d2ec      	bcs.n	10004116 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
1000413c:	43d8      	mvns	r0, r3
1000413e:	17c0      	asrs	r0, r0, #31
10004140:	4010      	ands	r0, r2
	return ret;
10004142:	e7e9      	b.n	10004118 <next_timeout+0x10>
10004144:	20000044 	.word	0x20000044
10004148:	7fffffff 	.word	0x7fffffff

1000414c <remove_timeout>:
{
1000414c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
1000414e:	2800      	cmp	r0, #0
10004150:	d00e      	beq.n	10004170 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10004152:	4b0b      	ldr	r3, [pc, #44]	; (10004180 <remove_timeout+0x34>)
10004154:	685b      	ldr	r3, [r3, #4]
10004156:	4298      	cmp	r0, r3
10004158:	d00a      	beq.n	10004170 <remove_timeout+0x24>
1000415a:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
1000415c:	2900      	cmp	r1, #0
1000415e:	d007      	beq.n	10004170 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10004160:	690a      	ldr	r2, [r1, #16]
10004162:	694b      	ldr	r3, [r1, #20]
10004164:	6904      	ldr	r4, [r0, #16]
10004166:	6945      	ldr	r5, [r0, #20]
10004168:	1912      	adds	r2, r2, r4
1000416a:	416b      	adcs	r3, r5
1000416c:	610a      	str	r2, [r1, #16]
1000416e:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10004170:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004172:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10004174:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10004176:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10004178:	2300      	movs	r3, #0
1000417a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000417c:	6043      	str	r3, [r0, #4]
}
1000417e:	bd30      	pop	{r4, r5, pc}
10004180:	20000044 	.word	0x20000044

10004184 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10004184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004186:	0004      	movs	r4, r0
10004188:	0016      	movs	r6, r2
1000418a:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000418c:	1c53      	adds	r3, r2, #1
1000418e:	d101      	bne.n	10004194 <z_add_timeout+0x10>
10004190:	1c7b      	adds	r3, r7, #1
10004192:	d057      	beq.n	10004244 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10004194:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10004196:	f3ef 8310 	mrs	r3, PRIMASK
1000419a:	b672      	cpsid	i
1000419c:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
1000419e:	2f00      	cmp	r7, #0
100041a0:	da23      	bge.n	100041ea <z_add_timeout+0x66>
100041a2:	1c7b      	adds	r3, r7, #1
100041a4:	d101      	bne.n	100041aa <z_add_timeout+0x26>
100041a6:	1cb3      	adds	r3, r6, #2
100041a8:	d81f      	bhi.n	100041ea <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
100041aa:	4b2b      	ldr	r3, [pc, #172]	; (10004258 <z_add_timeout+0xd4>)
100041ac:	6818      	ldr	r0, [r3, #0]
100041ae:	6859      	ldr	r1, [r3, #4]
100041b0:	2202      	movs	r2, #2
100041b2:	4252      	negs	r2, r2
100041b4:	17d3      	asrs	r3, r2, #31
100041b6:	1a12      	subs	r2, r2, r0
100041b8:	418b      	sbcs	r3, r1
100041ba:	1b92      	subs	r2, r2, r6
100041bc:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
100041be:	2b00      	cmp	r3, #0
100041c0:	dc04      	bgt.n	100041cc <z_add_timeout+0x48>
100041c2:	d101      	bne.n	100041c8 <z_add_timeout+0x44>
100041c4:	2a00      	cmp	r2, #0
100041c6:	d101      	bne.n	100041cc <z_add_timeout+0x48>
100041c8:	2201      	movs	r2, #1
100041ca:	2300      	movs	r3, #0
	return list->head == list;
100041cc:	4f23      	ldr	r7, [pc, #140]	; (1000425c <z_add_timeout+0xd8>)
100041ce:	6122      	str	r2, [r4, #16]
100041d0:	6163      	str	r3, [r4, #20]
100041d2:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100041d4:	42bd      	cmp	r5, r7
100041d6:	d100      	bne.n	100041da <z_add_timeout+0x56>
100041d8:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
100041da:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
100041dc:	2d00      	cmp	r5, #0
100041de:	d10f      	bne.n	10004200 <z_add_timeout+0x7c>
	node->next = list;
100041e0:	6027      	str	r7, [r4, #0]
	node->prev = tail;
100041e2:	6066      	str	r6, [r4, #4]
	tail->next = node;
100041e4:	6034      	str	r4, [r6, #0]
	list->tail = node;
100041e6:	607c      	str	r4, [r7, #4]
}
100041e8:	e01c      	b.n	10004224 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
100041ea:	f7ff ff81 	bl	100040f0 <elapsed>
100041ee:	2201      	movs	r2, #1
100041f0:	2300      	movs	r3, #0
100041f2:	1992      	adds	r2, r2, r6
100041f4:	417b      	adcs	r3, r7
100041f6:	0006      	movs	r6, r0
100041f8:	17c7      	asrs	r7, r0, #31
100041fa:	1992      	adds	r2, r2, r6
100041fc:	417b      	adcs	r3, r7
100041fe:	e7e5      	b.n	100041cc <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10004200:	6928      	ldr	r0, [r5, #16]
10004202:	6969      	ldr	r1, [r5, #20]
10004204:	6922      	ldr	r2, [r4, #16]
10004206:	6963      	ldr	r3, [r4, #20]
10004208:	4299      	cmp	r1, r3
1000420a:	dc02      	bgt.n	10004212 <z_add_timeout+0x8e>
1000420c:	d11b      	bne.n	10004246 <z_add_timeout+0xc2>
1000420e:	4290      	cmp	r0, r2
10004210:	d919      	bls.n	10004246 <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10004212:	1a80      	subs	r0, r0, r2
10004214:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10004216:	686b      	ldr	r3, [r5, #4]
10004218:	6128      	str	r0, [r5, #16]
1000421a:	6169      	str	r1, [r5, #20]
	node->prev = prev;
1000421c:	6063      	str	r3, [r4, #4]
	node->next = successor;
1000421e:	6025      	str	r5, [r4, #0]
	prev->next = node;
10004220:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10004222:	606c      	str	r4, [r5, #4]
	return list->head == list;
10004224:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004226:	42bb      	cmp	r3, r7
10004228:	d006      	beq.n	10004238 <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
1000422a:	429c      	cmp	r4, r3
1000422c:	d104      	bne.n	10004238 <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
1000422e:	f7ff ff6b 	bl	10004108 <next_timeout>
10004232:	2100      	movs	r1, #0
10004234:	f7fe fe0c 	bl	10002e50 <sys_clock_set_timeout>
	if (key != 0U) {
10004238:	9b01      	ldr	r3, [sp, #4]
1000423a:	2b00      	cmp	r3, #0
1000423c:	d102      	bne.n	10004244 <z_add_timeout+0xc0>
	__asm__ volatile(
1000423e:	b662      	cpsie	i
10004240:	f3bf 8f6f 	isb	sy
		}
	}
}
10004244:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10004246:	1a12      	subs	r2, r2, r0
10004248:	418b      	sbcs	r3, r1
1000424a:	6122      	str	r2, [r4, #16]
1000424c:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
1000424e:	42b5      	cmp	r5, r6
10004250:	d0c6      	beq.n	100041e0 <z_add_timeout+0x5c>
10004252:	682d      	ldr	r5, [r5, #0]
10004254:	e7c2      	b.n	100041dc <z_add_timeout+0x58>
10004256:	46c0      	nop			; (mov r8, r8)
10004258:	20000a60 	.word	0x20000a60
1000425c:	20000044 	.word	0x20000044

10004260 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10004260:	b5f0      	push	{r4, r5, r6, r7, lr}
10004262:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10004264:	f3ef 8310 	mrs	r3, PRIMASK
10004268:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000426a:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
1000426c:	4b30      	ldr	r3, [pc, #192]	; (10004330 <sys_clock_announce+0xd0>)
1000426e:	6018      	str	r0, [r3, #0]
	return list->head == list;
10004270:	4b30      	ldr	r3, [pc, #192]	; (10004334 <sys_clock_announce+0xd4>)
10004272:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004274:	429c      	cmp	r4, r3
10004276:	d100      	bne.n	1000427a <sys_clock_announce+0x1a>
10004278:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
1000427a:	4b2f      	ldr	r3, [pc, #188]	; (10004338 <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
1000427c:	4d2c      	ldr	r5, [pc, #176]	; (10004330 <sys_clock_announce+0xd0>)
		curr_tick += dt;
1000427e:	9303      	str	r3, [sp, #12]
10004280:	6818      	ldr	r0, [r3, #0]
10004282:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
10004284:	682b      	ldr	r3, [r5, #0]
10004286:	469c      	mov	ip, r3
10004288:	2c00      	cmp	r4, #0
1000428a:	d039      	beq.n	10004300 <sys_clock_announce+0xa0>
1000428c:	6962      	ldr	r2, [r4, #20]
1000428e:	6926      	ldr	r6, [r4, #16]
10004290:	17db      	asrs	r3, r3, #31
10004292:	429a      	cmp	r2, r3
10004294:	dc02      	bgt.n	1000429c <sys_clock_announce+0x3c>
10004296:	d10a      	bne.n	100042ae <sys_clock_announce+0x4e>
10004298:	4566      	cmp	r6, ip
1000429a:	d908      	bls.n	100042ae <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
1000429c:	001f      	movs	r7, r3
1000429e:	6922      	ldr	r2, [r4, #16]
100042a0:	6963      	ldr	r3, [r4, #20]
100042a2:	4666      	mov	r6, ip
100042a4:	1b92      	subs	r2, r2, r6
100042a6:	41bb      	sbcs	r3, r7
100042a8:	6122      	str	r2, [r4, #16]
100042aa:	6163      	str	r3, [r4, #20]
100042ac:	e028      	b.n	10004300 <sys_clock_announce+0xa0>
		curr_tick += dt;
100042ae:	17f3      	asrs	r3, r6, #31
100042b0:	9600      	str	r6, [sp, #0]
100042b2:	9301      	str	r3, [sp, #4]
100042b4:	9a00      	ldr	r2, [sp, #0]
100042b6:	9b01      	ldr	r3, [sp, #4]
100042b8:	1880      	adds	r0, r0, r2
100042ba:	4159      	adcs	r1, r3
		t->dticks = 0;
100042bc:	2300      	movs	r3, #0
100042be:	2200      	movs	r2, #0
		curr_tick += dt;
100042c0:	4f1d      	ldr	r7, [pc, #116]	; (10004338 <sys_clock_announce+0xd8>)
		t->dticks = 0;
100042c2:	6122      	str	r2, [r4, #16]
100042c4:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
100042c6:	6038      	str	r0, [r7, #0]
100042c8:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
100042ca:	0020      	movs	r0, r4
100042cc:	f7ff ff3e 	bl	1000414c <remove_timeout>
	if (key != 0U) {
100042d0:	9b02      	ldr	r3, [sp, #8]
100042d2:	2b00      	cmp	r3, #0
100042d4:	d102      	bne.n	100042dc <sys_clock_announce+0x7c>
	__asm__ volatile(
100042d6:	b662      	cpsie	i
100042d8:	f3bf 8f6f 	isb	sy
		t->fn(t);
100042dc:	0020      	movs	r0, r4
100042de:	68a3      	ldr	r3, [r4, #8]
100042e0:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100042e2:	f3ef 8310 	mrs	r3, PRIMASK
100042e6:	b672      	cpsid	i
100042e8:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
100042ea:	4b11      	ldr	r3, [pc, #68]	; (10004330 <sys_clock_announce+0xd0>)
100042ec:	681a      	ldr	r2, [r3, #0]
100042ee:	1b92      	subs	r2, r2, r6
100042f0:	601a      	str	r2, [r3, #0]
	return list->head == list;
100042f2:	4b10      	ldr	r3, [pc, #64]	; (10004334 <sys_clock_announce+0xd4>)
100042f4:	4694      	mov	ip, r2
100042f6:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100042f8:	429c      	cmp	r4, r3
100042fa:	d1be      	bne.n	1000427a <sys_clock_announce+0x1a>
		curr_tick += dt;
100042fc:	6838      	ldr	r0, [r7, #0]
100042fe:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10004300:	4662      	mov	r2, ip
10004302:	17d3      	asrs	r3, r2, #31
10004304:	1812      	adds	r2, r2, r0
10004306:	414b      	adcs	r3, r1
	announce_remaining = 0;
10004308:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000430a:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
1000430c:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
1000430e:	600a      	str	r2, [r1, #0]
10004310:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
10004312:	f7ff fef9 	bl	10004108 <next_timeout>
10004316:	0021      	movs	r1, r4
10004318:	f7fe fd9a 	bl	10002e50 <sys_clock_set_timeout>
	if (key != 0U) {
1000431c:	9b02      	ldr	r3, [sp, #8]
1000431e:	42a3      	cmp	r3, r4
10004320:	d102      	bne.n	10004328 <sys_clock_announce+0xc8>
	__asm__ volatile(
10004322:	b662      	cpsie	i
10004324:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
10004328:	f7ff fcb6 	bl	10003c98 <z_time_slice>
#endif
}
1000432c:	b005      	add	sp, #20
1000432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004330:	20000b58 	.word	0x20000b58
10004334:	20000044 	.word	0x20000044
10004338:	20000a60 	.word	0x20000a60

1000433c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
1000433c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000433e:	f3ef 8410 	mrs	r4, PRIMASK
10004342:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10004344:	f7ff fed4 	bl	100040f0 <elapsed>
10004348:	0002      	movs	r2, r0
1000434a:	4906      	ldr	r1, [pc, #24]	; (10004364 <sys_clock_tick_get+0x28>)
1000434c:	17c3      	asrs	r3, r0, #31
1000434e:	6808      	ldr	r0, [r1, #0]
10004350:	6849      	ldr	r1, [r1, #4]
10004352:	1880      	adds	r0, r0, r2
10004354:	4159      	adcs	r1, r3
	if (key != 0U) {
10004356:	2c00      	cmp	r4, #0
10004358:	d102      	bne.n	10004360 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000435a:	b662      	cpsie	i
1000435c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10004360:	bd10      	pop	{r4, pc}
10004362:	46c0      	nop			; (mov r8, r8)
10004364:	20000a60 	.word	0x20000a60

10004368 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
10004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000436a:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000436c:	f3ef 8510 	mrs	r5, PRIMASK
10004370:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
10004372:	6803      	ldr	r3, [r0, #0]
10004374:	9501      	str	r5, [sp, #4]
10004376:	2b00      	cmp	r3, #0
10004378:	d005      	beq.n	10004386 <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
1000437a:	2d00      	cmp	r5, #0
1000437c:	d152      	bne.n	10004424 <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
1000437e:	b662      	cpsie	i
10004380:	f3bf 8f6f 	isb	sy
10004384:	e04e      	b.n	10004424 <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
10004386:	6a82      	ldr	r2, [r0, #40]	; 0x28
10004388:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1000438a:	2100      	movs	r1, #0
1000438c:	2001      	movs	r0, #1
1000438e:	1880      	adds	r0, r0, r2
10004390:	4159      	adcs	r1, r3
10004392:	2900      	cmp	r1, #0
10004394:	d101      	bne.n	1000439a <z_timer_expiration_handler+0x32>
10004396:	2801      	cmp	r0, #1
10004398:	d929      	bls.n	100043ee <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
1000439a:	2b00      	cmp	r3, #0
1000439c:	dc04      	bgt.n	100043a8 <z_timer_expiration_handler+0x40>
1000439e:	d101      	bne.n	100043a4 <z_timer_expiration_handler+0x3c>
100043a0:	2a00      	cmp	r2, #0
100043a2:	d101      	bne.n	100043a8 <z_timer_expiration_handler+0x40>
100043a4:	2201      	movs	r2, #1
100043a6:	2300      	movs	r3, #0
100043a8:	2601      	movs	r6, #1
100043aa:	4276      	negs	r6, r6
100043ac:	17f7      	asrs	r7, r6, #31
100043ae:	18b6      	adds	r6, r6, r2
100043b0:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
100043b2:	f001 fb29 	bl	10005a08 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
100043b6:	2201      	movs	r2, #1
100043b8:	2300      	movs	r3, #0
100043ba:	1880      	adds	r0, r0, r2
100043bc:	4159      	adcs	r1, r3
100043be:	1980      	adds	r0, r0, r6
100043c0:	4179      	adcs	r1, r7
100043c2:	2900      	cmp	r1, #0
100043c4:	dc02      	bgt.n	100043cc <z_timer_expiration_handler+0x64>
100043c6:	d12e      	bne.n	10004426 <z_timer_expiration_handler+0xbe>
100043c8:	2800      	cmp	r0, #0
100043ca:	d02c      	beq.n	10004426 <z_timer_expiration_handler+0xbe>
100043cc:	f001 fb1c 	bl	10005a08 <z_impl_k_uptime_ticks>
100043d0:	2201      	movs	r2, #1
100043d2:	2300      	movs	r3, #0
100043d4:	1880      	adds	r0, r0, r2
100043d6:	4159      	adcs	r1, r3
100043d8:	2202      	movs	r2, #2
100043da:	4252      	negs	r2, r2
100043dc:	17d3      	asrs	r3, r2, #31
100043de:	1980      	adds	r0, r0, r6
100043e0:	4179      	adcs	r1, r7
100043e2:	1a12      	subs	r2, r2, r0
100043e4:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100043e6:	0020      	movs	r0, r4
100043e8:	4918      	ldr	r1, [pc, #96]	; (1000444c <z_timer_expiration_handler+0xe4>)
100043ea:	f7ff fecb 	bl	10004184 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
100043ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
100043f0:	3301      	adds	r3, #1
100043f2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100043f4:	6a23      	ldr	r3, [r4, #32]
100043f6:	2b00      	cmp	r3, #0
100043f8:	d00b      	beq.n	10004412 <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
100043fa:	2d00      	cmp	r5, #0
100043fc:	d102      	bne.n	10004404 <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
100043fe:	b662      	cpsie	i
10004400:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
10004404:	0020      	movs	r0, r4
10004406:	6a23      	ldr	r3, [r4, #32]
10004408:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000440a:	f3ef 8310 	mrs	r3, PRIMASK
1000440e:	b672      	cpsid	i
10004410:	9301      	str	r3, [sp, #4]
	return list->head == list;
10004412:	69a5      	ldr	r5, [r4, #24]
10004414:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004416:	42a5      	cmp	r5, r4
10004418:	d001      	beq.n	1000441e <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
1000441a:	2d00      	cmp	r5, #0
1000441c:	d107      	bne.n	1000442e <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
1000441e:	9b01      	ldr	r3, [sp, #4]
10004420:	2b00      	cmp	r3, #0
10004422:	d0ac      	beq.n	1000437e <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
10004424:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
10004426:	2202      	movs	r2, #2
10004428:	4252      	negs	r2, r2
1000442a:	17d3      	asrs	r3, r2, #31
1000442c:	e7db      	b.n	100043e6 <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
1000442e:	0028      	movs	r0, r5
10004430:	f001 fa5c 	bl	100058ec <z_unpend_thread_no_timeout>
10004434:	2300      	movs	r3, #0
10004436:	66eb      	str	r3, [r5, #108]	; 0x6c
10004438:	9b01      	ldr	r3, [sp, #4]
1000443a:	2b00      	cmp	r3, #0
1000443c:	d102      	bne.n	10004444 <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
1000443e:	b662      	cpsie	i
10004440:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
10004444:	0028      	movs	r0, r5
10004446:	f001 fa45 	bl	100058d4 <z_ready_thread>
1000444a:	e7eb      	b.n	10004424 <z_timer_expiration_handler+0xbc>
1000444c:	10004369 	.word	0x10004369

10004450 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10004450:	b570      	push	{r4, r5, r6, lr}
10004452:	0006      	movs	r6, r0
10004454:	0014      	movs	r4, r2
10004456:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
10004458:	1c51      	adds	r1, r2, #1
1000445a:	d101      	bne.n	10004460 <z_impl_k_timer_start+0x10>
1000445c:	1c59      	adds	r1, r3, #1
1000445e:	d022      	beq.n	100044a6 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
10004460:	2b00      	cmp	r3, #0
10004462:	da03      	bge.n	1000446c <z_impl_k_timer_start+0x1c>
10004464:	1c59      	adds	r1, r3, #1
10004466:	d10f      	bne.n	10004488 <z_impl_k_timer_start+0x38>
10004468:	1c91      	adds	r1, r2, #2
1000446a:	d90d      	bls.n	10004488 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
1000446c:	0014      	movs	r4, r2
1000446e:	1e1d      	subs	r5, r3, #0
10004470:	dc05      	bgt.n	1000447e <z_impl_k_timer_start+0x2e>
10004472:	2b00      	cmp	r3, #0
10004474:	d101      	bne.n	1000447a <z_impl_k_timer_start+0x2a>
10004476:	2a00      	cmp	r2, #0
10004478:	d101      	bne.n	1000447e <z_impl_k_timer_start+0x2e>
1000447a:	2401      	movs	r4, #1
1000447c:	2500      	movs	r5, #0
1000447e:	2201      	movs	r2, #1
10004480:	4252      	negs	r2, r2
10004482:	17d3      	asrs	r3, r2, #31
10004484:	18a4      	adds	r4, r4, r2
10004486:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
10004488:	0030      	movs	r0, r6
1000448a:	f001 faa6 	bl	100059da <z_abort_timeout>
	timer->period = period;
1000448e:	9a04      	ldr	r2, [sp, #16]
10004490:	9b05      	ldr	r3, [sp, #20]
10004492:	62b2      	str	r2, [r6, #40]	; 0x28
10004494:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
10004496:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10004498:	0022      	movs	r2, r4
	timer->status = 0U;
1000449a:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000449c:	0030      	movs	r0, r6
1000449e:	002b      	movs	r3, r5
100044a0:	4901      	ldr	r1, [pc, #4]	; (100044a8 <z_impl_k_timer_start+0x58>)
100044a2:	f7ff fe6f 	bl	10004184 <z_add_timeout>
		     duration);
}
100044a6:	bd70      	pop	{r4, r5, r6, pc}
100044a8:	10004369 	.word	0x10004369

100044ac <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
100044ac:	4b01      	ldr	r3, [pc, #4]	; (100044b4 <k_thread_system_pool_assign+0x8>)
100044ae:	6643      	str	r3, [r0, #100]	; 0x64
}
100044b0:	4770      	bx	lr
100044b2:	46c0      	nop			; (mov r8, r8)
100044b4:	20000494 	.word	0x20000494

100044b8 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
100044b8:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
100044ba:	4802      	ldr	r0, [pc, #8]	; (100044c4 <boot_banner+0xc>)
100044bc:	f000 f891 	bl	100045e2 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
100044c0:	bd10      	pop	{r4, pc}
100044c2:	46c0      	nop			; (mov r8, r8)
100044c4:	10009a98 	.word	0x10009a98

100044c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
100044c8:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
100044ca:	4c06      	ldr	r4, [pc, #24]	; (100044e4 <statics_init+0x1c>)
100044cc:	4b06      	ldr	r3, [pc, #24]	; (100044e8 <statics_init+0x20>)
100044ce:	429c      	cmp	r4, r3
100044d0:	d301      	bcc.n	100044d6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
100044d2:	2000      	movs	r0, #0
100044d4:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
100044d6:	0020      	movs	r0, r4
100044d8:	68a2      	ldr	r2, [r4, #8]
100044da:	6861      	ldr	r1, [r4, #4]
100044dc:	f001 fae3 	bl	10005aa6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
100044e0:	3414      	adds	r4, #20
100044e2:	e7f3      	b.n	100044cc <statics_init+0x4>
100044e4:	20000494 	.word	0x20000494
100044e8:	200004a8 	.word	0x200004a8

100044ec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100044ec:	4770      	bx	lr

100044ee <display_set_contrast>:
{
100044ee:	b510      	push	{r4, lr}
	return api->set_contrast(dev, contrast);
100044f0:	6883      	ldr	r3, [r0, #8]
100044f2:	699b      	ldr	r3, [r3, #24]
100044f4:	4798      	blx	r3
}
100044f6:	bd10      	pop	{r4, pc}

100044f8 <z_log_msg_static_create.constprop.0>:
static inline void z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data)
100044f8:	b510      	push	{r4, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
100044fa:	2300      	movs	r3, #0
100044fc:	f7fd fac0 	bl	10001a80 <z_impl_z_log_msg_static_create>
}
10004500:	bd10      	pop	{r4, pc}

10004502 <cbpprintf_external>:
{
10004502:	b5f0      	push	{r4, r5, r6, r7, lr}
10004504:	b085      	sub	sp, #20
10004506:	000d      	movs	r5, r1
10004508:	1e1c      	subs	r4, r3, #0
1000450a:	9002      	str	r0, [sp, #8]
1000450c:	9203      	str	r2, [sp, #12]
	if (buf == NULL) {
1000450e:	d029      	beq.n	10004564 <cbpprintf_external+0x62>
	for (i = 0; i < s_nbr; i++) {
10004510:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
10004512:	785b      	ldrb	r3, [r3, #1]
10004514:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
10004516:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
10004518:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000451a:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
1000451c:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000451e:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
10004520:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10004522:	18c0      	adds	r0, r0, r3
10004524:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
10004526:	9b01      	ldr	r3, [sp, #4]
10004528:	429e      	cmp	r6, r3
1000452a:	d310      	bcc.n	1000454e <cbpprintf_external+0x4c>
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000452c:	7962      	ldrb	r2, [r4, #5]
1000452e:	7923      	ldrb	r3, [r4, #4]
10004530:	0212      	lsls	r2, r2, #8
10004532:	431a      	orrs	r2, r3
10004534:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
10004536:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004538:	041b      	lsls	r3, r3, #16
1000453a:	4313      	orrs	r3, r2
1000453c:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
1000453e:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10004540:	0612      	lsls	r2, r2, #24
10004542:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10004544:	0023      	movs	r3, r4
10004546:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
10004548:	47a8      	blx	r5
}
1000454a:	b005      	add	sp, #20
1000454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
1000454e:	7803      	ldrb	r3, [r0, #0]
10004550:	1c47      	adds	r7, r0, #1
		*ps = s;
10004552:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
10004554:	0038      	movs	r0, r7
		*ps = s;
10004556:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
10004558:	f000 fcb6 	bl	10004ec8 <strlen>
1000455c:	3001      	adds	r0, #1
1000455e:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
10004560:	3601      	adds	r6, #1
10004562:	e7e0      	b.n	10004526 <cbpprintf_external+0x24>
		return -EINVAL;
10004564:	2016      	movs	r0, #22
10004566:	4240      	negs	r0, r0
10004568:	e7ef      	b.n	1000454a <cbpprintf_external+0x48>

1000456a <is_ptr>:
{
1000456a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
1000456c:	2400      	movs	r4, #0
1000456e:	0002      	movs	r2, r0
			mod = !mod;
10004570:	2501      	movs	r5, #1
	bool mod = false;
10004572:	0020      	movs	r0, r4
	while ((c = *fmt++) != '\0') {
10004574:	7813      	ldrb	r3, [r2, #0]
10004576:	2b00      	cmp	r3, #0
10004578:	d101      	bne.n	1000457e <is_ptr+0x14>
					return false;
1000457a:	0018      	movs	r0, r3
1000457c:	e00a      	b.n	10004594 <is_ptr+0x2a>
		if (mod) {
1000457e:	2800      	cmp	r0, #0
10004580:	d013      	beq.n	100045aa <is_ptr+0x40>
			if (cnt == n) {
10004582:	428c      	cmp	r4, r1
10004584:	d107      	bne.n	10004596 <is_ptr+0x2c>
				if (c == 'p') {
10004586:	2b70      	cmp	r3, #112	; 0x70
10004588:	d004      	beq.n	10004594 <is_ptr+0x2a>
				} else if (is_fmt_spec(c)) {
1000458a:	001e      	movs	r6, r3
1000458c:	3e40      	subs	r6, #64	; 0x40
1000458e:	2e3a      	cmp	r6, #58	; 0x3a
10004590:	d80b      	bhi.n	100045aa <is_ptr+0x40>
					return false;
10004592:	2000      	movs	r0, #0
}
10004594:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
10004596:	001e      	movs	r6, r3
10004598:	3e40      	subs	r6, #64	; 0x40
1000459a:	2e3a      	cmp	r6, #58	; 0x3a
1000459c:	d805      	bhi.n	100045aa <is_ptr+0x40>
	while ((c = *fmt++) != '\0') {
1000459e:	7853      	ldrb	r3, [r2, #1]
100045a0:	3201      	adds	r2, #1
				cnt++;
100045a2:	3401      	adds	r4, #1
	while ((c = *fmt++) != '\0') {
100045a4:	2b00      	cmp	r3, #0
100045a6:	d0e8      	beq.n	1000457a <is_ptr+0x10>
100045a8:	2000      	movs	r0, #0
		if (c == '%') {
100045aa:	2b25      	cmp	r3, #37	; 0x25
100045ac:	d100      	bne.n	100045b0 <is_ptr+0x46>
			mod = !mod;
100045ae:	4068      	eors	r0, r5
100045b0:	3201      	adds	r2, #1
100045b2:	e7df      	b.n	10004574 <is_ptr+0xa>

100045b4 <arch_printk_char_out>:
}
100045b4:	2000      	movs	r0, #0
100045b6:	4770      	bx	lr

100045b8 <str_out>:
	if (ctx->str == NULL || ctx->count >= ctx->max) {
100045b8:	688a      	ldr	r2, [r1, #8]
100045ba:	680b      	ldr	r3, [r1, #0]
{
100045bc:	b530      	push	{r4, r5, lr}
		ctx->str[ctx->count++] = '\0';
100045be:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
100045c0:	2b00      	cmp	r3, #0
100045c2:	d002      	beq.n	100045ca <str_out+0x12>
100045c4:	684c      	ldr	r4, [r1, #4]
100045c6:	4294      	cmp	r4, r2
100045c8:	dc01      	bgt.n	100045ce <str_out+0x16>
		ctx->count++;
100045ca:	608d      	str	r5, [r1, #8]
}
100045cc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
100045ce:	3c01      	subs	r4, #1
		ctx->str[ctx->count++] = '\0';
100045d0:	189b      	adds	r3, r3, r2
100045d2:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
100045d4:	4294      	cmp	r4, r2
100045d6:	d102      	bne.n	100045de <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
100045d8:	2200      	movs	r2, #0
100045da:	701a      	strb	r2, [r3, #0]
100045dc:	e7f6      	b.n	100045cc <str_out+0x14>
		ctx->str[ctx->count++] = c;
100045de:	7018      	strb	r0, [r3, #0]
100045e0:	e7f4      	b.n	100045cc <str_out+0x14>

100045e2 <printk>:
{
100045e2:	b40f      	push	{r0, r1, r2, r3}
100045e4:	b507      	push	{r0, r1, r2, lr}
100045e6:	a904      	add	r1, sp, #16
100045e8:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
100045ea:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
100045ec:	f000 fbd3 	bl	10004d96 <z_log_vprintk>
}
100045f0:	b003      	add	sp, #12
100045f2:	bc08      	pop	{r3}
100045f4:	b004      	add	sp, #16
100045f6:	4718      	bx	r3

100045f8 <snprintk>:
{
100045f8:	b40c      	push	{r2, r3}
100045fa:	b507      	push	{r0, r1, r2, lr}
100045fc:	ab04      	add	r3, sp, #16
100045fe:	cb04      	ldmia	r3!, {r2}
	va_start(ap, fmt);
10004600:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
10004602:	f7fc fc19 	bl	10000e38 <vsnprintk>
}
10004606:	b003      	add	sp, #12
10004608:	bc08      	pop	{r3}
1000460a:	b002      	add	sp, #8
1000460c:	4718      	bx	r3

1000460e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
1000460e:	b510      	push	{r4, lr}
10004610:	0004      	movs	r4, r0
10004612:	0008      	movs	r0, r1
10004614:	0011      	movs	r1, r2
10004616:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10004618:	47a0      	blx	r4
	return z_impl_z_current_get();
1000461a:	f7ff fced 	bl	10003ff8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
1000461e:	f7fd ff6d 	bl	100024fc <z_impl_k_thread_abort>

10004622 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10004622:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
10004624:	00c9      	lsls	r1, r1, #3
10004626:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004628:	6880      	ldr	r0, [r0, #8]
1000462a:	021b      	lsls	r3, r3, #8
1000462c:	4298      	cmp	r0, r3
1000462e:	d302      	bcc.n	10004636 <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
10004630:	0092      	lsls	r2, r2, #2
10004632:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
10004634:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
10004636:	0052      	lsls	r2, r2, #1
10004638:	5a50      	ldrh	r0, [r2, r1]
1000463a:	e7fb      	b.n	10004634 <chunk_field+0x12>

1000463c <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
1000463c:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000463e:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10004640:	00c9      	lsls	r1, r1, #3
10004642:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004644:	6880      	ldr	r0, [r0, #8]
10004646:	0224      	lsls	r4, r4, #8
10004648:	42a0      	cmp	r0, r4
1000464a:	d302      	bcc.n	10004652 <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
1000464c:	0092      	lsls	r2, r2, #2
1000464e:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
10004650:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
10004652:	0052      	lsls	r2, r2, #1
10004654:	5253      	strh	r3, [r2, r1]
}
10004656:	e7fb      	b.n	10004650 <chunk_set+0x14>

10004658 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
10004658:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000465a:	2201      	movs	r2, #1
1000465c:	f7ff ffe1 	bl	10004622 <chunk_field>
10004660:	0840      	lsrs	r0, r0, #1
}
10004662:	bd10      	pop	{r4, pc}

10004664 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10004664:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10004666:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10004668:	00c9      	lsls	r1, r1, #3
1000466a:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000466c:	6880      	ldr	r0, [r0, #8]
1000466e:	2301      	movs	r3, #1
10004670:	0224      	lsls	r4, r4, #8
10004672:	42a0      	cmp	r0, r4
10004674:	d308      	bcc.n	10004688 <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10004676:	6848      	ldr	r0, [r1, #4]
		if (used) {
10004678:	2a00      	cmp	r2, #0
1000467a:	d002      	beq.n	10004682 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000467c:	4303      	orrs	r3, r0
1000467e:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10004680:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004682:	4398      	bics	r0, r3
10004684:	6048      	str	r0, [r1, #4]
10004686:	e7fb      	b.n	10004680 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10004688:	8848      	ldrh	r0, [r1, #2]
		if (used) {
1000468a:	2a00      	cmp	r2, #0
1000468c:	d002      	beq.n	10004694 <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000468e:	4303      	orrs	r3, r0
10004690:	804b      	strh	r3, [r1, #2]
10004692:	e7f5      	b.n	10004680 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004694:	4398      	bics	r0, r3
10004696:	8048      	strh	r0, [r1, #2]
}
10004698:	e7f2      	b.n	10004680 <set_chunk_used+0x1c>

1000469a <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
1000469a:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
1000469c:	0053      	lsls	r3, r2, #1
1000469e:	2201      	movs	r2, #1
100046a0:	f7ff ffcc 	bl	1000463c <chunk_set>
}
100046a4:	bd10      	pop	{r4, pc}

100046a6 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
100046a6:	2280      	movs	r2, #128	; 0x80
100046a8:	2304      	movs	r3, #4
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
100046aa:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
100046ac:	0212      	lsls	r2, r2, #8
100046ae:	4290      	cmp	r0, r2
100046b0:	d300      	bcc.n	100046b4 <bucket_idx.isra.0+0xe>
100046b2:	18db      	adds	r3, r3, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
100046b4:	3308      	adds	r3, #8
100046b6:	08db      	lsrs	r3, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
100046b8:	3101      	adds	r1, #1
100046ba:	1ac8      	subs	r0, r1, r3
	return 31 - __builtin_clz(usable_sz);
100046bc:	f7fb fdd0 	bl	10000260 <__clzsi2>
100046c0:	231f      	movs	r3, #31
100046c2:	1a18      	subs	r0, r3, r0
}
100046c4:	bd10      	pop	{r4, pc}

100046c6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
100046c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100046c8:	000d      	movs	r5, r1
100046ca:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
100046cc:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
100046ce:	f7ff ffc3 	bl	10004658 <chunk_size>
100046d2:	2380      	movs	r3, #128	; 0x80
100046d4:	0001      	movs	r1, r0
100046d6:	021b      	lsls	r3, r3, #8
100046d8:	429e      	cmp	r6, r3
100046da:	d301      	bcc.n	100046e0 <free_list_add+0x1a>
100046dc:	2801      	cmp	r0, #1
100046de:	d019      	beq.n	10004714 <free_list_add+0x4e>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
100046e0:	0030      	movs	r0, r6
100046e2:	f7ff ffe0 	bl	100046a6 <bucket_idx.isra.0>
	if (b->next == 0U) {
100046e6:	0083      	lsls	r3, r0, #2
100046e8:	18e3      	adds	r3, r4, r3
100046ea:	691e      	ldr	r6, [r3, #16]
100046ec:	2e00      	cmp	r6, #0
100046ee:	d112      	bne.n	10004716 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
100046f0:	2101      	movs	r1, #1
100046f2:	4081      	lsls	r1, r0
100046f4:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
100046f6:	0020      	movs	r0, r4
100046f8:	430a      	orrs	r2, r1
100046fa:	60e2      	str	r2, [r4, #12]
100046fc:	0029      	movs	r1, r5
100046fe:	2202      	movs	r2, #2
		b->next = c;
10004700:	611d      	str	r5, [r3, #16]
10004702:	002b      	movs	r3, r5
10004704:	f7ff ff9a 	bl	1000463c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
10004708:	002b      	movs	r3, r5
1000470a:	2203      	movs	r2, #3
1000470c:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
1000470e:	0020      	movs	r0, r4
10004710:	f7ff ff94 	bl	1000463c <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
10004714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
10004716:	2202      	movs	r2, #2
10004718:	0031      	movs	r1, r6
1000471a:	0020      	movs	r0, r4
1000471c:	f7ff ff81 	bl	10004622 <chunk_field>
10004720:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
10004722:	0003      	movs	r3, r0
10004724:	2202      	movs	r2, #2
10004726:	0029      	movs	r1, r5
10004728:	0020      	movs	r0, r4
1000472a:	f7ff ff87 	bl	1000463c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
1000472e:	0033      	movs	r3, r6
10004730:	2203      	movs	r2, #3
10004732:	0029      	movs	r1, r5
10004734:	0020      	movs	r0, r4
10004736:	f7ff ff81 	bl	1000463c <chunk_set>
1000473a:	002b      	movs	r3, r5
1000473c:	2203      	movs	r2, #3
1000473e:	0039      	movs	r1, r7
10004740:	0020      	movs	r0, r4
10004742:	f7ff ff7b 	bl	1000463c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
10004746:	002b      	movs	r3, r5
10004748:	2202      	movs	r2, #2
1000474a:	0031      	movs	r1, r6
1000474c:	e7df      	b.n	1000470e <free_list_add+0x48>

1000474e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
1000474e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
10004750:	2380      	movs	r3, #128	; 0x80
10004752:	2408      	movs	r4, #8
10004754:	02db      	lsls	r3, r3, #11
10004756:	429a      	cmp	r2, r3
10004758:	d200      	bcs.n	1000475c <sys_heap_init+0xe>
1000475a:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000475c:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
1000475e:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
10004760:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10004762:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
10004764:	190c      	adds	r4, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10004766:	439e      	bics	r6, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
10004768:	439c      	bics	r4, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
1000476a:	1ba4      	subs	r4, r4, r6
1000476c:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
1000476e:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004770:	0021      	movs	r1, r4
10004772:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
10004774:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
10004776:	60f7      	str	r7, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004778:	f7ff ff95 	bl	100046a6 <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
1000477c:	0032      	movs	r2, r6
	for (int i = 0; i < nb_buckets; i++) {
1000477e:	003b      	movs	r3, r7
		h->buckets[i].next = 0;
10004780:	0039      	movs	r1, r7
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
10004782:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004784:	351b      	adds	r5, #27
10004786:	08ed      	lsrs	r5, r5, #3
		h->buckets[i].next = 0;
10004788:	3210      	adds	r2, #16
	for (int i = 0; i < nb_buckets; i++) {
1000478a:	4298      	cmp	r0, r3
1000478c:	da30      	bge.n	100047f0 <sys_heap_init+0xa2>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
1000478e:	002a      	movs	r2, r5
10004790:	0030      	movs	r0, r6
10004792:	2100      	movs	r1, #0
10004794:	f7ff ff81 	bl	1000469a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
10004798:	2300      	movs	r3, #0
1000479a:	0030      	movs	r0, r6
1000479c:	001a      	movs	r2, r3
1000479e:	0019      	movs	r1, r3
100047a0:	f7ff ff4c 	bl	1000463c <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
100047a4:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
100047a6:	0030      	movs	r0, r6
100047a8:	2201      	movs	r2, #1
100047aa:	2100      	movs	r1, #0
100047ac:	f7ff ff5a 	bl	10004664 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
100047b0:	003a      	movs	r2, r7
100047b2:	0029      	movs	r1, r5
100047b4:	0030      	movs	r0, r6
100047b6:	f7ff ff70 	bl	1000469a <set_chunk_size>
100047ba:	002b      	movs	r3, r5
100047bc:	0029      	movs	r1, r5
100047be:	0030      	movs	r0, r6
100047c0:	2200      	movs	r2, #0
100047c2:	f7ff ff3b 	bl	1000463c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
100047c6:	0030      	movs	r0, r6
100047c8:	0021      	movs	r1, r4
100047ca:	2200      	movs	r2, #0
100047cc:	f7ff ff65 	bl	1000469a <set_chunk_size>
100047d0:	003b      	movs	r3, r7
100047d2:	0030      	movs	r0, r6
100047d4:	0021      	movs	r1, r4
100047d6:	2200      	movs	r2, #0
100047d8:	f7ff ff30 	bl	1000463c <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
100047dc:	0030      	movs	r0, r6
100047de:	2201      	movs	r2, #1
100047e0:	0021      	movs	r1, r4
100047e2:	f7ff ff3f 	bl	10004664 <set_chunk_used>

	free_list_add(h, chunk0_size);
100047e6:	0029      	movs	r1, r5
100047e8:	0030      	movs	r0, r6
100047ea:	f7ff ff6c 	bl	100046c6 <free_list_add>
}
100047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
100047f0:	009f      	lsls	r7, r3, #2
100047f2:	51d1      	str	r1, [r2, r7]
	for (int i = 0; i < nb_buckets; i++) {
100047f4:	3301      	adds	r3, #1
100047f6:	e7c8      	b.n	1000478a <sys_heap_init+0x3c>

100047f8 <encode_uint>:
{
100047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100047fa:	b085      	sub	sp, #20
100047fc:	9001      	str	r0, [sp, #4]
100047fe:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier) != 0;
10004800:	78d3      	ldrb	r3, [r2, #3]
{
10004802:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10004804:	001a      	movs	r2, r3
10004806:	3a41      	subs	r2, #65	; 0x41
10004808:	000f      	movs	r7, r1
	switch (specifier) {
1000480a:	2408      	movs	r4, #8
1000480c:	9202      	str	r2, [sp, #8]
1000480e:	2b6f      	cmp	r3, #111	; 0x6f
10004810:	d00a      	beq.n	10004828 <encode_uint+0x30>
10004812:	d804      	bhi.n	1000481e <encode_uint+0x26>
		return 16;
10004814:	1924      	adds	r4, r4, r4
	switch (specifier) {
10004816:	2b58      	cmp	r3, #88	; 0x58
10004818:	d006      	beq.n	10004828 <encode_uint+0x30>
		return 10;
1000481a:	3c06      	subs	r4, #6
1000481c:	e004      	b.n	10004828 <encode_uint+0x30>
	switch (specifier) {
1000481e:	2208      	movs	r2, #8
		return 16;
10004820:	2410      	movs	r4, #16
	switch (specifier) {
10004822:	4393      	bics	r3, r2
10004824:	2b70      	cmp	r3, #112	; 0x70
10004826:	d1f8      	bne.n	1000481a <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10004828:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000482a:	0022      	movs	r2, r4
1000482c:	2300      	movs	r3, #0
1000482e:	0039      	movs	r1, r7
10004830:	9801      	ldr	r0, [sp, #4]
10004832:	f7fb fd53 	bl	100002dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004836:	0013      	movs	r3, r2
10004838:	468c      	mov	ip, r1
1000483a:	b2d2      	uxtb	r2, r2
1000483c:	2b09      	cmp	r3, #9
1000483e:	d81a      	bhi.n	10004876 <encode_uint+0x7e>
10004840:	3230      	adds	r2, #48	; 0x30
10004842:	b2d3      	uxtb	r3, r2
10004844:	3e01      	subs	r6, #1
10004846:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10004848:	2300      	movs	r3, #0
1000484a:	42bb      	cmp	r3, r7
1000484c:	d102      	bne.n	10004854 <encode_uint+0x5c>
1000484e:	9b01      	ldr	r3, [sp, #4]
10004850:	429c      	cmp	r4, r3
10004852:	d802      	bhi.n	1000485a <encode_uint+0x62>
10004854:	9b03      	ldr	r3, [sp, #12]
10004856:	429e      	cmp	r6, r3
10004858:	d80a      	bhi.n	10004870 <encode_uint+0x78>
	if (conv->flag_hash) {
1000485a:	782b      	ldrb	r3, [r5, #0]
1000485c:	069b      	lsls	r3, r3, #26
1000485e:	d504      	bpl.n	1000486a <encode_uint+0x72>
		if (radix == 8) {
10004860:	2c08      	cmp	r4, #8
10004862:	d110      	bne.n	10004886 <encode_uint+0x8e>
			conv->altform_0 = true;
10004864:	78ab      	ldrb	r3, [r5, #2]
10004866:	4323      	orrs	r3, r4
10004868:	70ab      	strb	r3, [r5, #2]
}
1000486a:	0030      	movs	r0, r6
1000486c:	b005      	add	sp, #20
1000486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10004870:	4667      	mov	r7, ip
10004872:	9001      	str	r0, [sp, #4]
10004874:	e7d9      	b.n	1000482a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004876:	0013      	movs	r3, r2
10004878:	9902      	ldr	r1, [sp, #8]
1000487a:	3357      	adds	r3, #87	; 0x57
1000487c:	b2db      	uxtb	r3, r3
1000487e:	2919      	cmp	r1, #25
10004880:	d8e0      	bhi.n	10004844 <encode_uint+0x4c>
10004882:	3237      	adds	r2, #55	; 0x37
10004884:	e7dd      	b.n	10004842 <encode_uint+0x4a>
		} else if (radix == 16) {
10004886:	2c10      	cmp	r4, #16
10004888:	d1ef      	bne.n	1000486a <encode_uint+0x72>
			conv->altform_0c = true;
1000488a:	78ab      	ldrb	r3, [r5, #2]
1000488c:	431c      	orrs	r4, r3
1000488e:	70ac      	strb	r4, [r5, #2]
	return bp;
10004890:	e7eb      	b.n	1000486a <encode_uint+0x72>

10004892 <outs>:
{
10004892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004894:	0007      	movs	r7, r0
10004896:	0015      	movs	r5, r2
10004898:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000489a:	0014      	movs	r4, r2
{
1000489c:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000489e:	42a6      	cmp	r6, r4
100048a0:	d806      	bhi.n	100048b0 <outs+0x1e>
100048a2:	2e00      	cmp	r6, #0
100048a4:	d001      	beq.n	100048aa <outs+0x18>
	return (int)count;
100048a6:	1b60      	subs	r0, r4, r5
100048a8:	e008      	b.n	100048bc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100048aa:	7823      	ldrb	r3, [r4, #0]
100048ac:	2b00      	cmp	r3, #0
100048ae:	d0fa      	beq.n	100048a6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
100048b0:	7820      	ldrb	r0, [r4, #0]
100048b2:	9901      	ldr	r1, [sp, #4]
100048b4:	47b8      	blx	r7
		if (rc < 0) {
100048b6:	3401      	adds	r4, #1
100048b8:	2800      	cmp	r0, #0
100048ba:	daf0      	bge.n	1000489e <outs+0xc>
}
100048bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100048be <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
100048be:	b570      	push	{r4, r5, r6, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
100048c0:	6905      	ldr	r5, [r0, #16]
100048c2:	2408      	movs	r4, #8
100048c4:	002e      	movs	r6, r5
100048c6:	2300      	movs	r3, #0
{
100048c8:	0002      	movs	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
100048ca:	4026      	ands	r6, r4
		*res = 0;
		return false;
100048cc:	0018      	movs	r0, r3
	if (buffer->flags & MPSC_PBUF_FULL) {
100048ce:	4225      	tst	r5, r4
100048d0:	d105      	bne.n	100048de <free_space+0x20>
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
100048d2:	68d0      	ldr	r0, [r2, #12]
100048d4:	6813      	ldr	r3, [r2, #0]
100048d6:	4298      	cmp	r0, r3
100048d8:	d903      	bls.n	100048e2 <free_space+0x24>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
100048da:	1ac3      	subs	r3, r0, r3
		return false;
100048dc:	0030      	movs	r0, r6
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
100048de:	600b      	str	r3, [r1, #0]
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
100048e0:	bd70      	pop	{r4, r5, r6, pc}
	*res = buffer->size - buffer->tmp_wr_idx;
100048e2:	6a12      	ldr	r2, [r2, #32]
	return true;
100048e4:	2001      	movs	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
100048e6:	1ad3      	subs	r3, r2, r3
	return true;
100048e8:	e7f9      	b.n	100048de <free_space+0x20>

100048ea <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
100048ea:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
100048ec:	a901      	add	r1, sp, #4
{
100048ee:	0004      	movs	r4, r0
	if (free_space(buffer, &f)) {
100048f0:	f7ff ffe5 	bl	100048be <free_space>
100048f4:	2800      	cmp	r0, #0
100048f6:	d004      	beq.n	10004902 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
100048f8:	9b01      	ldr	r3, [sp, #4]
100048fa:	68e2      	ldr	r2, [r4, #12]
100048fc:	3b01      	subs	r3, #1
100048fe:	189b      	adds	r3, r3, r2
10004900:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
10004902:	6a20      	ldr	r0, [r4, #32]
10004904:	9b01      	ldr	r3, [sp, #4]
10004906:	1ac0      	subs	r0, r0, r3
10004908:	3801      	subs	r0, #1
}
1000490a:	bd16      	pop	{r1, r2, r4, pc}

1000490c <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
1000490c:	b510      	push	{r4, lr}
1000490e:	0004      	movs	r4, r0
	uint32_t i = idx + val;
10004910:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
10004912:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
10004914:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
10004916:	07d2      	lsls	r2, r2, #31
10004918:	d502      	bpl.n	10004920 <idx_inc+0x14>
		return i & (buffer->size - 1);
1000491a:	3b01      	subs	r3, #1
1000491c:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
1000491e:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
10004920:	4298      	cmp	r0, r3
10004922:	d3fc      	bcc.n	1000491e <idx_inc+0x12>
10004924:	1ac0      	subs	r0, r0, r3
10004926:	e7fa      	b.n	1000491e <idx_inc+0x12>

10004928 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
10004928:	b510      	push	{r4, lr}
1000492a:	0004      	movs	r4, r0
1000492c:	000a      	movs	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
1000492e:	68c1      	ldr	r1, [r0, #12]
10004930:	f7ff ffec 	bl	1000490c <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
10004934:	2208      	movs	r2, #8
10004936:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
10004938:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
1000493a:	4393      	bics	r3, r2
1000493c:	6123      	str	r3, [r4, #16]
}
1000493e:	bd10      	pop	{r4, pc}

10004940 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
	union mpsc_pbuf_generic skip = {
10004940:	2202      	movs	r2, #2
{
10004942:	b570      	push	{r4, r5, r6, lr}
10004944:	000d      	movs	r5, r1
	union mpsc_pbuf_generic skip = {
10004946:	008b      	lsls	r3, r1, #2
10004948:	431a      	orrs	r2, r3
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
1000494a:	6803      	ldr	r3, [r0, #0]
1000494c:	69c1      	ldr	r1, [r0, #28]
1000494e:	009b      	lsls	r3, r3, #2
10004950:	505a      	str	r2, [r3, r1]
{
10004952:	0004      	movs	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004954:	6801      	ldr	r1, [r0, #0]
10004956:	002a      	movs	r2, r5
10004958:	f7ff ffd8 	bl	1000490c <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
1000495c:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
1000495e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004960:	4298      	cmp	r0, r3
10004962:	d103      	bne.n	1000496c <add_skip_item+0x2c>
		buffer->flags |= MPSC_PBUF_FULL;
10004964:	2308      	movs	r3, #8
10004966:	6922      	ldr	r2, [r4, #16]
10004968:	4313      	orrs	r3, r2
1000496a:	6123      	str	r3, [r4, #16]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
1000496c:	002a      	movs	r2, r5
1000496e:	6861      	ldr	r1, [r4, #4]
10004970:	0020      	movs	r0, r4
10004972:	f7ff ffcb 	bl	1000490c <idx_inc>
10004976:	6060      	str	r0, [r4, #4]
}
10004978:	bd70      	pop	{r4, r5, r6, pc}

1000497a <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
1000497a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000497c:	001e      	movs	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
1000497e:	68c3      	ldr	r3, [r0, #12]
{
10004980:	0017      	movs	r7, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
10004982:	69c2      	ldr	r2, [r0, #28]
10004984:	009b      	lsls	r3, r3, #2
10004986:	18d5      	adds	r5, r2, r3
	if (item->hdr.busy && !item->hdr.valid) {
10004988:	5cd2      	ldrb	r2, [r2, r3]
1000498a:	2303      	movs	r3, #3
{
1000498c:	b085      	sub	sp, #20
	if (item->hdr.busy && !item->hdr.valid) {
1000498e:	401a      	ands	r2, r3
{
10004990:	0004      	movs	r4, r0
10004992:	2300      	movs	r3, #0
10004994:	9102      	str	r1, [sp, #8]
	if (item->hdr.busy && !item->hdr.valid) {
10004996:	2a02      	cmp	r2, #2
10004998:	d008      	beq.n	100049ac <drop_item_locked+0x32>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
1000499a:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
1000499c:	6033      	str	r3, [r6, #0]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
1000499e:	2202      	movs	r2, #2
100049a0:	6923      	ldr	r3, [r4, #16]
100049a2:	4213      	tst	r3, r2
100049a4:	d10d      	bne.n	100049c2 <drop_item_locked+0x48>
		return false;
100049a6:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
100049a8:	b005      	add	sp, #20
100049aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return item->skip.len;
100049ac:	6829      	ldr	r1, [r5, #0]
	*item_to_drop = NULL;
100049ae:	603b      	str	r3, [r7, #0]
		return item->skip.len;
100049b0:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
100049b2:	6033      	str	r3, [r6, #0]
	if (skip_wlen) {
100049b4:	d0f3      	beq.n	1000499e <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
100049b6:	f7ff ffb7 	bl	10004928 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
100049ba:	68e3      	ldr	r3, [r4, #12]
100049bc:	60a3      	str	r3, [r4, #8]
		return true;
100049be:	2001      	movs	r0, #1
100049c0:	e7f2      	b.n	100049a8 <drop_item_locked+0x2e>
	uint32_t rd_wlen = buffer->get_wlen(item);
100049c2:	69a3      	ldr	r3, [r4, #24]
100049c4:	0028      	movs	r0, r5
100049c6:	4798      	blx	r3
	return item->hdr.valid;
100049c8:	782b      	ldrb	r3, [r5, #0]
	uint32_t rd_wlen = buffer->get_wlen(item);
100049ca:	9001      	str	r0, [sp, #4]
	if (!is_valid(item)) {
100049cc:	07da      	lsls	r2, r3, #31
100049ce:	d5ea      	bpl.n	100049a6 <drop_item_locked+0x2c>
	} else if (item->hdr.busy) {
100049d0:	2202      	movs	r2, #2
100049d2:	401a      	ands	r2, r3
100049d4:	9203      	str	r2, [sp, #12]
100049d6:	2202      	movs	r2, #2
100049d8:	4213      	tst	r3, r2
100049da:	d01d      	beq.n	10004a18 <drop_item_locked+0x9e>
		if (free_wlen) {
100049dc:	9b02      	ldr	r3, [sp, #8]
100049de:	2b00      	cmp	r3, #0
100049e0:	d003      	beq.n	100049ea <drop_item_locked+0x70>
			add_skip_item(buffer, free_wlen);
100049e2:	0019      	movs	r1, r3
100049e4:	0020      	movs	r0, r4
100049e6:	f7ff ffab 	bl	10004940 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
100049ea:	6861      	ldr	r1, [r4, #4]
100049ec:	0020      	movs	r0, r4
100049ee:	9a01      	ldr	r2, [sp, #4]
100049f0:	f7ff ff8c 	bl	1000490c <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
100049f4:	68a3      	ldr	r3, [r4, #8]
100049f6:	68e1      	ldr	r1, [r4, #12]
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
100049f8:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
100049fa:	4299      	cmp	r1, r3
100049fc:	d104      	bne.n	10004a08 <drop_item_locked+0x8e>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
100049fe:	0020      	movs	r0, r4
10004a00:	9a01      	ldr	r2, [sp, #4]
10004a02:	f7ff ff83 	bl	1000490c <idx_inc>
10004a06:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
10004a08:	68a3      	ldr	r3, [r4, #8]
		buffer->flags |= MPSC_PBUF_FULL;
10004a0a:	6922      	ldr	r2, [r4, #16]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
10004a0c:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
10004a0e:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
10004a10:	2308      	movs	r3, #8
10004a12:	4313      	orrs	r3, r2
10004a14:	6123      	str	r3, [r4, #16]
10004a16:	e7d2      	b.n	100049be <drop_item_locked+0x44>
		rd_idx_inc(buffer, rd_wlen);
10004a18:	0020      	movs	r0, r4
10004a1a:	9901      	ldr	r1, [sp, #4]
10004a1c:	f7ff ff84 	bl	10004928 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
10004a20:	68e3      	ldr	r3, [r4, #12]
10004a22:	60a3      	str	r3, [r4, #8]
		if (free_wlen) {
10004a24:	9b02      	ldr	r3, [sp, #8]
10004a26:	2b00      	cmp	r3, #0
10004a28:	d004      	beq.n	10004a34 <drop_item_locked+0xba>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
10004a2a:	6823      	ldr	r3, [r4, #0]
10004a2c:	69e2      	ldr	r2, [r4, #28]
10004a2e:	9903      	ldr	r1, [sp, #12]
10004a30:	009b      	lsls	r3, r3, #2
10004a32:	5099      	str	r1, [r3, r2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
10004a34:	9b02      	ldr	r3, [sp, #8]
10004a36:	9a01      	ldr	r2, [sp, #4]
10004a38:	469c      	mov	ip, r3
10004a3a:	4462      	add	r2, ip
10004a3c:	6032      	str	r2, [r6, #0]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
10004a3e:	6821      	ldr	r1, [r4, #0]
10004a40:	0020      	movs	r0, r4
10004a42:	f7ff ff63 	bl	1000490c <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
10004a46:	2308      	movs	r3, #8
10004a48:	6922      	ldr	r2, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
10004a4a:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
10004a4c:	4313      	orrs	r3, r2
		item->hdr.valid = 0;
10004a4e:	2201      	movs	r2, #1
		buffer->flags |= MPSC_PBUF_FULL;
10004a50:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
10004a52:	782b      	ldrb	r3, [r5, #0]
10004a54:	4393      	bics	r3, r2
10004a56:	702b      	strb	r3, [r5, #0]
		*item_to_drop = item;
10004a58:	603d      	str	r5, [r7, #0]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
10004a5a:	e7b0      	b.n	100049be <drop_item_locked+0x44>

10004a5c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
10004a5c:	b570      	push	{r4, r5, r6, lr}
10004a5e:	0004      	movs	r4, r0
10004a60:	000d      	movs	r5, r1
10004a62:	0016      	movs	r6, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
10004a64:	f7ff ff52 	bl	1000490c <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
10004a68:	6823      	ldr	r3, [r4, #0]
10004a6a:	4283      	cmp	r3, r0
10004a6c:	d105      	bne.n	10004a7a <post_drop_action+0x1e>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
10004a6e:	2208      	movs	r2, #8
10004a70:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
10004a72:	6025      	str	r5, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
10004a74:	4393      	bics	r3, r2
10004a76:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
10004a78:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
10004a7a:	2302      	movs	r3, #2
10004a7c:	00b2      	lsls	r2, r6, #2
10004a7e:	4313      	orrs	r3, r2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
10004a80:	69e2      	ldr	r2, [r4, #28]
10004a82:	00ad      	lsls	r5, r5, #2
10004a84:	50ab      	str	r3, [r5, r2]
	buffer->wr_idx = idx_inc(buffer,
10004a86:	6861      	ldr	r1, [r4, #4]
10004a88:	0032      	movs	r2, r6
10004a8a:	0020      	movs	r0, r4
10004a8c:	f7ff ff3e 	bl	1000490c <idx_inc>
10004a90:	6060      	str	r0, [r4, #4]
10004a92:	e7f1      	b.n	10004a78 <post_drop_action+0x1c>

10004a94 <max_utilization_update>:
{
10004a94:	b570      	push	{r4, r5, r6, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
10004a96:	6903      	ldr	r3, [r0, #16]
{
10004a98:	0004      	movs	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
10004a9a:	075b      	lsls	r3, r3, #29
10004a9c:	d506      	bpl.n	10004aac <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
10004a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
10004aa0:	f7ff ff23 	bl	100048ea <get_usage>
10004aa4:	4285      	cmp	r5, r0
10004aa6:	d200      	bcs.n	10004aaa <max_utilization_update+0x16>
10004aa8:	0005      	movs	r5, r0
10004aaa:	6265      	str	r5, [r4, #36]	; 0x24
}
10004aac:	bd70      	pop	{r4, r5, r6, pc}

10004aae <mpsc_pbuf_init>:
{
10004aae:	b570      	push	{r4, r5, r6, lr}
10004ab0:	000d      	movs	r5, r1
10004ab2:	0004      	movs	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
10004ab4:	221c      	movs	r2, #28
10004ab6:	2100      	movs	r1, #0
10004ab8:	f000 fa21 	bl	10004efe <memset>
	buffer->max_usage = 0;
10004abc:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
10004abe:	68eb      	ldr	r3, [r5, #12]
10004ac0:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
10004ac2:	68ab      	ldr	r3, [r5, #8]
10004ac4:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
10004ac6:	682b      	ldr	r3, [r5, #0]
10004ac8:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
10004aca:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
10004acc:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
10004ace:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
10004ad0:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
10004ad2:	2b00      	cmp	r3, #0
10004ad4:	d004      	beq.n	10004ae0 <mpsc_pbuf_init+0x32>
10004ad6:	1e59      	subs	r1, r3, #1
10004ad8:	420b      	tst	r3, r1
10004ada:	d101      	bne.n	10004ae0 <mpsc_pbuf_init+0x32>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
10004adc:	2301      	movs	r3, #1
10004ade:	431a      	orrs	r2, r3
	buffer->flags = cfg->flags;
10004ae0:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
10004ae2:	0020      	movs	r0, r4
	return z_impl_k_sem_init(sem, initial_count, limit);
10004ae4:	2201      	movs	r2, #1
10004ae6:	2100      	movs	r1, #0
10004ae8:	3028      	adds	r0, #40	; 0x28
10004aea:	f000 feaa 	bl	10005842 <z_impl_k_sem_init>
}
10004aee:	bd70      	pop	{r4, r5, r6, pc}

10004af0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
10004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
10004af2:	b08b      	sub	sp, #44	; 0x2c
10004af4:	9305      	str	r3, [sp, #20]
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
10004af6:	2300      	movs	r3, #0
{
10004af8:	9204      	str	r2, [sp, #16]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
10004afa:	6a02      	ldr	r2, [r0, #32]
{
10004afc:	0004      	movs	r4, r0
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
10004afe:	001e      	movs	r6, r3
{
10004b00:	9102      	str	r1, [sp, #8]
	union mpsc_pbuf_generic *dropped_item = NULL;
10004b02:	9307      	str	r3, [sp, #28]
	uint32_t tmp_wr_idx_shift = 0;
10004b04:	9309      	str	r3, [sp, #36]	; 0x24
	if (wlen > (buffer->size)) {
10004b06:	428a      	cmp	r2, r1
10004b08:	d33b      	bcc.n	10004b82 <mpsc_pbuf_alloc+0x92>
	uint32_t tmp_wr_idx_val = 0;
10004b0a:	9301      	str	r3, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
10004b0c:	f3ef 8710 	mrs	r7, PRIMASK
10004b10:	b672      	cpsid	i
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
10004b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004b14:	9703      	str	r7, [sp, #12]
10004b16:	2a00      	cmp	r2, #0
10004b18:	d005      	beq.n	10004b26 <mpsc_pbuf_alloc+0x36>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
10004b1a:	0020      	movs	r0, r4
10004b1c:	9901      	ldr	r1, [sp, #4]
10004b1e:	f7ff ff9d 	bl	10004a5c <post_drop_action>
			tmp_wr_idx_shift = 0;
10004b22:	2300      	movs	r3, #0
10004b24:	9309      	str	r3, [sp, #36]	; 0x24
		}

		wrap = free_space(buffer, &free_wlen);
10004b26:	0020      	movs	r0, r4
10004b28:	a908      	add	r1, sp, #32
10004b2a:	f7ff fec8 	bl	100048be <free_space>

		if (free_wlen >= wlen) {
10004b2e:	9b08      	ldr	r3, [sp, #32]
10004b30:	9a02      	ldr	r2, [sp, #8]
		wrap = free_space(buffer, &free_wlen);
10004b32:	0005      	movs	r5, r0
		if (free_wlen >= wlen) {
10004b34:	9300      	str	r3, [sp, #0]
10004b36:	4293      	cmp	r3, r2
10004b38:	d32b      	bcc.n	10004b92 <mpsc_pbuf_alloc+0xa2>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
10004b3a:	6823      	ldr	r3, [r4, #0]
			item =
10004b3c:	69e2      	ldr	r2, [r4, #28]
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
10004b3e:	009b      	lsls	r3, r3, #2
			item =
10004b40:	18d6      	adds	r6, r2, r3
			item->hdr.valid = 0;
10004b42:	5cd3      	ldrb	r3, [r2, r3]
10004b44:	2203      	movs	r2, #3
10004b46:	4393      	bics	r3, r2
10004b48:	7033      	strb	r3, [r6, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004b4a:	6821      	ldr	r1, [r4, #0]
10004b4c:	0020      	movs	r0, r4
10004b4e:	9a02      	ldr	r2, [sp, #8]
10004b50:	f7ff fedc 	bl	1000490c <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004b54:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
10004b56:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
10004b58:	4298      	cmp	r0, r3
10004b5a:	d015      	beq.n	10004b88 <mpsc_pbuf_alloc+0x98>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
10004b5c:	2500      	movs	r5, #0
	if (key != 0U) {
10004b5e:	9b03      	ldr	r3, [sp, #12]
10004b60:	2b00      	cmp	r3, #0
10004b62:	d102      	bne.n	10004b6a <mpsc_pbuf_alloc+0x7a>
	__asm__ volatile(
10004b64:	b662      	cpsie	i
10004b66:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
10004b6a:	9907      	ldr	r1, [sp, #28]
10004b6c:	2900      	cmp	r1, #0
10004b6e:	d006      	beq.n	10004b7e <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
10004b70:	6963      	ldr	r3, [r4, #20]
10004b72:	2b00      	cmp	r3, #0
10004b74:	d001      	beq.n	10004b7a <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
10004b76:	0020      	movs	r0, r4
10004b78:	4798      	blx	r3
			}
			dropped_item = NULL;
10004b7a:	2300      	movs	r3, #0
10004b7c:	9307      	str	r3, [sp, #28]
		}
	} while (cont);
10004b7e:	2d00      	cmp	r5, #0
10004b80:	d1c4      	bne.n	10004b0c <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
10004b82:	0030      	movs	r0, r6
10004b84:	b00b      	add	sp, #44	; 0x2c
10004b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer->flags |= MPSC_PBUF_FULL;
10004b88:	2208      	movs	r2, #8
10004b8a:	6923      	ldr	r3, [r4, #16]
10004b8c:	4313      	orrs	r3, r2
10004b8e:	6123      	str	r3, [r4, #16]
10004b90:	e7e4      	b.n	10004b5c <mpsc_pbuf_alloc+0x6c>
		} else if (wrap) {
10004b92:	2800      	cmp	r0, #0
10004b94:	d004      	beq.n	10004ba0 <mpsc_pbuf_alloc+0xb0>
			add_skip_item(buffer, free_wlen);
10004b96:	0020      	movs	r0, r4
10004b98:	9900      	ldr	r1, [sp, #0]
10004b9a:	f7ff fed1 	bl	10004940 <add_skip_item>
			cont = true;
10004b9e:	e7de      	b.n	10004b5e <mpsc_pbuf_alloc+0x6e>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
10004ba0:	9b04      	ldr	r3, [sp, #16]
10004ba2:	9a05      	ldr	r2, [sp, #20]
10004ba4:	4313      	orrs	r3, r2
10004ba6:	d017      	beq.n	10004bd8 <mpsc_pbuf_alloc+0xe8>
10004ba8:	f000 fe27 	bl	100057fa <k_is_in_isr>
10004bac:	2800      	cmp	r0, #0
10004bae:	d113      	bne.n	10004bd8 <mpsc_pbuf_alloc+0xe8>
	if (key != 0U) {
10004bb0:	2f00      	cmp	r7, #0
10004bb2:	d102      	bne.n	10004bba <mpsc_pbuf_alloc+0xca>
	__asm__ volatile(
10004bb4:	b662      	cpsie	i
10004bb6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
10004bba:	0020      	movs	r0, r4
10004bbc:	9a04      	ldr	r2, [sp, #16]
10004bbe:	9b05      	ldr	r3, [sp, #20]
10004bc0:	3028      	adds	r0, #40	; 0x28
10004bc2:	f7fe ff2d 	bl	10003a20 <z_impl_k_sem_take>
10004bc6:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004bc8:	f3ef 8310 	mrs	r3, PRIMASK
10004bcc:	b672      	cpsid	i
10004bce:	9303      	str	r3, [sp, #12]
			cont = (err == 0) ? true : false;
10004bd0:	426b      	negs	r3, r5
10004bd2:	415d      	adcs	r5, r3
10004bd4:	b2ed      	uxtb	r5, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
10004bd6:	e7c2      	b.n	10004b5e <mpsc_pbuf_alloc+0x6e>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
10004bd8:	6823      	ldr	r3, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
10004bda:	0020      	movs	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
10004bdc:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
10004bde:	9900      	ldr	r1, [sp, #0]
10004be0:	ab09      	add	r3, sp, #36	; 0x24
10004be2:	aa07      	add	r2, sp, #28
10004be4:	f7ff fec9 	bl	1000497a <drop_item_locked>
10004be8:	0005      	movs	r5, r0
10004bea:	e7b8      	b.n	10004b5e <mpsc_pbuf_alloc+0x6e>

10004bec <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
10004bec:	b570      	push	{r4, r5, r6, lr}
10004bee:	0004      	movs	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
10004bf0:	6983      	ldr	r3, [r0, #24]
10004bf2:	0008      	movs	r0, r1
{
10004bf4:	000d      	movs	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
10004bf6:	4798      	blx	r3
10004bf8:	0002      	movs	r2, r0
10004bfa:	f3ef 8610 	mrs	r6, PRIMASK
10004bfe:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
10004c00:	2301      	movs	r3, #1
10004c02:	7829      	ldrb	r1, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
10004c04:	0020      	movs	r0, r4
	item->hdr.valid = 1;
10004c06:	430b      	orrs	r3, r1
10004c08:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
10004c0a:	6861      	ldr	r1, [r4, #4]
10004c0c:	f7ff fe7e 	bl	1000490c <idx_inc>
10004c10:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
10004c12:	0020      	movs	r0, r4
10004c14:	f7ff ff3e 	bl	10004a94 <max_utilization_update>
	if (key != 0U) {
10004c18:	2e00      	cmp	r6, #0
10004c1a:	d102      	bne.n	10004c22 <mpsc_pbuf_commit+0x36>
	__asm__ volatile(
10004c1c:	b662      	cpsie	i
10004c1e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
10004c22:	bd70      	pop	{r4, r5, r6, pc}

10004c24 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
10004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004c26:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004c28:	f3ef 8710 	mrs	r7, PRIMASK
10004c2c:	b672      	cpsid	i
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004c2e:	2108      	movs	r1, #8
10004c30:	6922      	ldr	r2, [r4, #16]
10004c32:	68a3      	ldr	r3, [r4, #8]
10004c34:	420a      	tst	r2, r1
10004c36:	d103      	bne.n	10004c40 <mpsc_pbuf_claim+0x1c>
10004c38:	6861      	ldr	r1, [r4, #4]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
10004c3a:	1aca      	subs	r2, r1, r3
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004c3c:	428b      	cmp	r3, r1
10004c3e:	d901      	bls.n	10004c44 <mpsc_pbuf_claim+0x20>
		*res = buffer->size - buffer->tmp_rd_idx;
10004c40:	6a22      	ldr	r2, [r4, #32]
10004c42:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
10004c44:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
10004c46:	2a00      	cmp	r2, #0
10004c48:	d107      	bne.n	10004c5a <mpsc_pbuf_claim+0x36>
	if (key != 0U) {
10004c4a:	2f00      	cmp	r7, #0
10004c4c:	d102      	bne.n	10004c54 <mpsc_pbuf_claim+0x30>
	__asm__ volatile(
10004c4e:	b662      	cpsie	i
10004c50:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
10004c54:	2600      	movs	r6, #0
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
}
10004c56:	0030      	movs	r0, r6
10004c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			&buffer->buf[buffer->tmp_rd_idx];
10004c5a:	009b      	lsls	r3, r3, #2
		item = (union mpsc_pbuf_generic *)
10004c5c:	18ce      	adds	r6, r1, r3
	return !item->hdr.valid && !item->hdr.busy;
10004c5e:	2203      	movs	r2, #3
10004c60:	5ccb      	ldrb	r3, [r1, r3]
		if (!a || is_invalid(item)) {
10004c62:	2103      	movs	r1, #3
	return !item->hdr.valid && !item->hdr.busy;
10004c64:	401a      	ands	r2, r3
		if (!a || is_invalid(item)) {
10004c66:	420b      	tst	r3, r1
10004c68:	d0ef      	beq.n	10004c4a <mpsc_pbuf_claim+0x26>
	if (item->hdr.busy && !item->hdr.valid) {
10004c6a:	2a02      	cmp	r2, #2
10004c6c:	d102      	bne.n	10004c74 <mpsc_pbuf_claim+0x50>
		return item->skip.len;
10004c6e:	6835      	ldr	r5, [r6, #0]
10004c70:	08ad      	lsrs	r5, r5, #2
			if (skip || !is_valid(item)) {
10004c72:	d105      	bne.n	10004c80 <mpsc_pbuf_claim+0x5c>
10004c74:	07da      	lsls	r2, r3, #31
10004c76:	d413      	bmi.n	10004ca0 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
10004c78:	0030      	movs	r0, r6
10004c7a:	69a3      	ldr	r3, [r4, #24]
10004c7c:	4798      	blx	r3
10004c7e:	0005      	movs	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
10004c80:	68a1      	ldr	r1, [r4, #8]
10004c82:	002a      	movs	r2, r5
10004c84:	0020      	movs	r0, r4
10004c86:	f7ff fe41 	bl	1000490c <idx_inc>
				rd_idx_inc(buffer, inc);
10004c8a:	0029      	movs	r1, r5
				buffer->tmp_rd_idx =
10004c8c:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
10004c8e:	0020      	movs	r0, r4
10004c90:	f7ff fe4a 	bl	10004928 <rd_idx_inc>
	if (key != 0U) {
10004c94:	2f00      	cmp	r7, #0
10004c96:	d1c7      	bne.n	10004c28 <mpsc_pbuf_claim+0x4>
	__asm__ volatile(
10004c98:	b662      	cpsie	i
10004c9a:	f3bf 8f6f 	isb	sy
10004c9e:	e7c3      	b.n	10004c28 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
10004ca0:	2202      	movs	r2, #2
10004ca2:	4313      	orrs	r3, r2
10004ca4:	7033      	strb	r3, [r6, #0]
						buffer->get_wlen(item));
10004ca6:	69a3      	ldr	r3, [r4, #24]
10004ca8:	0030      	movs	r0, r6
					idx_inc(buffer, buffer->tmp_rd_idx,
10004caa:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
10004cac:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
10004cae:	0029      	movs	r1, r5
						buffer->get_wlen(item));
10004cb0:	0002      	movs	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
10004cb2:	0020      	movs	r0, r4
10004cb4:	f7ff fe2a 	bl	1000490c <idx_inc>
				buffer->tmp_rd_idx =
10004cb8:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10004cba:	2f00      	cmp	r7, #0
10004cbc:	d1cb      	bne.n	10004c56 <mpsc_pbuf_claim+0x32>
	__asm__ volatile(
10004cbe:	b662      	cpsie	i
10004cc0:	f3bf 8f6f 	isb	sy
	} while (cont);
10004cc4:	e7c7      	b.n	10004c56 <mpsc_pbuf_claim+0x32>

10004cc6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
10004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004cc8:	0004      	movs	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
10004cca:	6983      	ldr	r3, [r0, #24]
10004ccc:	0008      	movs	r0, r1
{
10004cce:	000d      	movs	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
10004cd0:	4798      	blx	r3
10004cd2:	0006      	movs	r6, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004cd4:	f3ef 8710 	mrs	r7, PRIMASK
10004cd8:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
10004cda:	2201      	movs	r2, #1
10004cdc:	782b      	ldrb	r3, [r5, #0]
10004cde:	4393      	bics	r3, r2
10004ce0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
10004ce2:	6923      	ldr	r3, [r4, #16]
10004ce4:	079b      	lsls	r3, r3, #30
10004ce6:	d505      	bpl.n	10004cf4 <mpsc_pbuf_free+0x2e>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
10004ce8:	68e2      	ldr	r2, [r4, #12]
10004cea:	69e3      	ldr	r3, [r4, #28]
10004cec:	0092      	lsls	r2, r2, #2
10004cee:	189b      	adds	r3, r3, r2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
10004cf0:	429d      	cmp	r5, r3
10004cf2:	d11a      	bne.n	10004d2a <mpsc_pbuf_free+0x64>
		witem->hdr.busy = 0;
10004cf4:	2202      	movs	r2, #2
10004cf6:	782b      	ldrb	r3, [r5, #0]
10004cf8:	4393      	bics	r3, r2
10004cfa:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
10004cfc:	68a3      	ldr	r3, [r4, #8]
10004cfe:	68e1      	ldr	r1, [r4, #12]
10004d00:	4299      	cmp	r1, r3
10004d02:	d104      	bne.n	10004d0e <mpsc_pbuf_free+0x48>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
10004d04:	0032      	movs	r2, r6
10004d06:	0020      	movs	r0, r4
10004d08:	f7ff fe00 	bl	1000490c <idx_inc>
10004d0c:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
10004d0e:	0031      	movs	r1, r6
10004d10:	0020      	movs	r0, r4
10004d12:	f7ff fe09 	bl	10004928 <rd_idx_inc>
	if (key != 0U) {
10004d16:	2f00      	cmp	r7, #0
10004d18:	d102      	bne.n	10004d20 <mpsc_pbuf_free+0x5a>
	__asm__ volatile(
10004d1a:	b662      	cpsie	i
10004d1c:	f3bf 8f6f 	isb	sy
		witem->skip.len = wlen;
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
10004d20:	0020      	movs	r0, r4
10004d22:	3028      	adds	r0, #40	; 0x28
	z_impl_k_sem_give(sem);
10004d24:	f7fe fe60 	bl	100039e8 <z_impl_k_sem_give>
}
10004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		witem->skip.len = wlen;
10004d2a:	2203      	movs	r2, #3
10004d2c:	682e      	ldr	r6, [r5, #0]
10004d2e:	0083      	lsls	r3, r0, #2
10004d30:	4016      	ands	r6, r2
10004d32:	431e      	orrs	r6, r3
10004d34:	602e      	str	r6, [r5, #0]
10004d36:	e7ee      	b.n	10004d16 <mpsc_pbuf_free+0x50>

10004d38 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004d38:	6903      	ldr	r3, [r0, #16]
10004d3a:	6882      	ldr	r2, [r0, #8]
10004d3c:	071b      	lsls	r3, r3, #28
10004d3e:	d403      	bmi.n	10004d48 <mpsc_pbuf_is_pending+0x10>
10004d40:	6841      	ldr	r1, [r0, #4]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
10004d42:	1a8b      	subs	r3, r1, r2
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
10004d44:	4291      	cmp	r1, r2
10004d46:	d201      	bcs.n	10004d4c <mpsc_pbuf_is_pending+0x14>
		*res = buffer->size - buffer->tmp_rd_idx;
10004d48:	6a03      	ldr	r3, [r0, #32]
10004d4a:	1a9b      	subs	r3, r3, r2
{
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
10004d4c:	1e5a      	subs	r2, r3, #1
10004d4e:	4193      	sbcs	r3, r2
10004d50:	b2d8      	uxtb	r0, r3
}
10004d52:	4770      	bx	lr

10004d54 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10004d54:	4770      	bx	lr

10004d56 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
10004d56:	7803      	ldrb	r3, [r0, #0]
{
10004d58:	0002      	movs	r2, r0
	return 0;
10004d5a:	2000      	movs	r0, #0
	if (z_log_item_is_msg(generic_msg)) {
10004d5c:	075b      	lsls	r3, r3, #29
10004d5e:	d40a      	bmi.n	10004d76 <log_msg_generic_get_wlen+0x20>
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
10004d60:	6813      	ldr	r3, [r2, #0]
10004d62:	8852      	ldrh	r2, [r2, #2]
10004d64:	031b      	lsls	r3, r3, #12
10004d66:	0d5b      	lsrs	r3, r3, #21
10004d68:	0912      	lsrs	r2, r2, #4
10004d6a:	1898      	adds	r0, r3, r2
10004d6c:	2307      	movs	r3, #7
10004d6e:	3017      	adds	r0, #23
10004d70:	4398      	bics	r0, r3
10004d72:	3003      	adds	r0, #3
10004d74:	0880      	lsrs	r0, r0, #2
}
10004d76:	4770      	bx	lr

10004d78 <dummy_timestamp>:
}
10004d78:	2000      	movs	r0, #0
10004d7a:	4770      	bx	lr

10004d7c <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
10004d7c:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
10004d7e:	2101      	movs	r1, #1
10004d80:	f000 fe6b 	bl	10005a5a <z_impl_atomic_add>
	return atomic_add(target, 1);

}
10004d84:	bd10      	pop	{r4, pc}

10004d86 <default_lf_get_timestamp>:
{
10004d86:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
10004d88:	f000 fe3e 	bl	10005a08 <z_impl_k_uptime_ticks>
10004d8c:	220a      	movs	r2, #10
10004d8e:	2300      	movs	r3, #0
10004d90:	f7fb faa4 	bl	100002dc <__aeabi_uldivmod>
}
10004d94:	bd10      	pop	{r4, pc}

10004d96 <z_log_vprintk>:
{
10004d96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
10004d98:	9002      	str	r0, [sp, #8]
10004d9a:	2000      	movs	r0, #0
10004d9c:	9103      	str	r1, [sp, #12]
10004d9e:	0003      	movs	r3, r0
10004da0:	0002      	movs	r2, r0
10004da2:	0001      	movs	r1, r0
10004da4:	9001      	str	r0, [sp, #4]
10004da6:	9000      	str	r0, [sp, #0]
10004da8:	f7fc ff02 	bl	10001bb0 <z_impl_z_log_msg_runtime_vcreate>
}
10004dac:	b005      	add	sp, #20
10004dae:	bd00      	pop	{pc}

10004db0 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
10004db0:	b510      	push	{r4, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
10004db2:	2001      	movs	r0, #1
10004db4:	f7fc fcb8 	bl	10001728 <z_log_dropped>
}
10004db8:	bd10      	pop	{r4, pc}

10004dba <z_log_get_tag>:
}
10004dba:	2000      	movs	r0, #0
10004dbc:	4770      	bx	lr

10004dbe <z_cbprintf_cpy>:
{
10004dbe:	b570      	push	{r4, r5, r6, lr}
10004dc0:	0006      	movs	r6, r0
	if ((desc->size - desc->off) < len) {
10004dc2:	6853      	ldr	r3, [r2, #4]
10004dc4:	6890      	ldr	r0, [r2, #8]
{
10004dc6:	000c      	movs	r4, r1
10004dc8:	0015      	movs	r5, r2
	if ((desc->size - desc->off) < len) {
10004dca:	1a1b      	subs	r3, r3, r0
10004dcc:	428b      	cmp	r3, r1
10004dce:	d30a      	bcc.n	10004de6 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
10004dd0:	6813      	ldr	r3, [r2, #0]
10004dd2:	000a      	movs	r2, r1
10004dd4:	1818      	adds	r0, r3, r0
10004dd6:	0031      	movs	r1, r6
10004dd8:	f000 f888 	bl	10004eec <memcpy>
	return len;
10004ddc:	0020      	movs	r0, r4
	desc->off += len;
10004dde:	68ab      	ldr	r3, [r5, #8]
10004de0:	191b      	adds	r3, r3, r4
10004de2:	60ab      	str	r3, [r5, #8]
}
10004de4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
10004de6:	201c      	movs	r0, #28
10004de8:	4240      	negs	r0, r0
10004dea:	e7fb      	b.n	10004de4 <z_cbprintf_cpy+0x26>

10004dec <z_log_msg_finalize>:
{
10004dec:	b570      	push	{r4, r5, r6, lr}
10004dee:	000e      	movs	r6, r1
10004df0:	0004      	movs	r4, r0
10004df2:	0015      	movs	r5, r2
10004df4:	0019      	movs	r1, r3
	if (!msg) {
10004df6:	2800      	cmp	r0, #0
10004df8:	d102      	bne.n	10004e00 <z_log_msg_finalize+0x14>
		z_log_dropped(false);
10004dfa:	f7fc fc95 	bl	10001728 <z_log_dropped>
}
10004dfe:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
10004e00:	2b00      	cmp	r3, #0
10004e02:	d006      	beq.n	10004e12 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
10004e04:	032b      	lsls	r3, r5, #12
10004e06:	0d5b      	lsrs	r3, r3, #21
10004e08:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
10004e0a:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
10004e0c:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
10004e0e:	f000 f86d 	bl	10004eec <memcpy>
	z_log_msg_commit(msg);
10004e12:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
10004e14:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
10004e16:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
10004e18:	f7fc fdfe 	bl	10001a18 <z_log_msg_commit>
10004e1c:	e7ef      	b.n	10004dfe <z_log_msg_finalize+0x12>

10004e1e <buffer_write>:
{
10004e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004e20:	0006      	movs	r6, r0
10004e22:	000d      	movs	r5, r1
10004e24:	0014      	movs	r4, r2
10004e26:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
10004e28:	0021      	movs	r1, r4
10004e2a:	0028      	movs	r0, r5
10004e2c:	003a      	movs	r2, r7
10004e2e:	47b0      	blx	r6
		len -= processed;
10004e30:	1a24      	subs	r4, r4, r0
		buf += processed;
10004e32:	182d      	adds	r5, r5, r0
	} while (len != 0);
10004e34:	2c00      	cmp	r4, #0
10004e36:	d1f7      	bne.n	10004e28 <buffer_write+0xa>
}
10004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004e3a <cbvprintf>:
{
10004e3a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10004e3c:	2400      	movs	r4, #0
10004e3e:	9400      	str	r4, [sp, #0]
10004e40:	f7fc f810 	bl	10000e64 <z_cbvprintf_impl>
}
10004e44:	bd16      	pop	{r1, r2, r4, pc}

10004e46 <log_output_flush>:
{
10004e46:	b510      	push	{r4, lr}
		     output->control_block->offset,
10004e48:	6842      	ldr	r2, [r0, #4]
{
10004e4a:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
10004e4c:	ca0c      	ldmia	r2, {r2, r3}
10004e4e:	6881      	ldr	r1, [r0, #8]
10004e50:	6800      	ldr	r0, [r0, #0]
10004e52:	f7ff ffe4 	bl	10004e1e <buffer_write>
	output->control_block->offset = 0;
10004e56:	2200      	movs	r2, #0
10004e58:	6863      	ldr	r3, [r4, #4]
10004e5a:	601a      	str	r2, [r3, #0]
}
10004e5c:	bd10      	pop	{r4, pc}

10004e5e <out_func>:
{
10004e5e:	b570      	push	{r4, r5, r6, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
10004e60:	684b      	ldr	r3, [r1, #4]
{
10004e62:	0005      	movs	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
10004e64:	681a      	ldr	r2, [r3, #0]
10004e66:	68cb      	ldr	r3, [r1, #12]
{
10004e68:	000c      	movs	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
10004e6a:	429a      	cmp	r2, r3
10004e6c:	d102      	bne.n	10004e74 <out_func+0x16>
		log_output_flush(out_ctx);
10004e6e:	0008      	movs	r0, r1
10004e70:	f7ff ffe9 	bl	10004e46 <log_output_flush>
	idx = atomic_inc(&out_ctx->control_block->offset);
10004e74:	6860      	ldr	r0, [r4, #4]
10004e76:	2101      	movs	r1, #1
10004e78:	f000 fdef 	bl	10005a5a <z_impl_atomic_add>
	out_ctx->buf[idx] = (uint8_t)c;
10004e7c:	68a3      	ldr	r3, [r4, #8]
10004e7e:	541d      	strb	r5, [r3, r0]
}
10004e80:	2000      	movs	r0, #0
10004e82:	bd70      	pop	{r4, r5, r6, pc}

10004e84 <cr_out_func>:
{
10004e84:	b570      	push	{r4, r5, r6, lr}
10004e86:	0004      	movs	r4, r0
10004e88:	000d      	movs	r5, r1
	if (c == '\n') {
10004e8a:	280a      	cmp	r0, #10
10004e8c:	d102      	bne.n	10004e94 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
10004e8e:	200d      	movs	r0, #13
10004e90:	f7ff ffe5 	bl	10004e5e <out_func>
	out_func(c, ctx);
10004e94:	0029      	movs	r1, r5
10004e96:	0020      	movs	r0, r4
10004e98:	f7ff ffe1 	bl	10004e5e <out_func>
}
10004e9c:	2000      	movs	r0, #0
10004e9e:	bd70      	pop	{r4, r5, r6, pc}

10004ea0 <log_backend_uart_init>:
}
10004ea0:	4770      	bx	lr

10004ea2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10004ea2:	b510      	push	{r4, lr}
10004ea4:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
10004ea6:	6800      	ldr	r0, [r0, #0]
10004ea8:	f7fd f8f8 	bl	1000209c <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10004eac:	bd10      	pop	{r4, pc}

10004eae <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10004eae:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10004eb0:	2100      	movs	r1, #0
10004eb2:	2001      	movs	r0, #1
10004eb4:	f7fd f8f2 	bl	1000209c <z_arm_fatal_error>
}
10004eb8:	bd10      	pop	{r4, pc}

10004eba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10004eba:	b510      	push	{r4, lr}
	handler();
10004ebc:	f7fd f988 	bl	100021d0 <z_SysNmiOnReset>
	z_arm_int_exit();
10004ec0:	f7fd fa32 	bl	10002328 <z_arm_exc_exit>
}
10004ec4:	bd10      	pop	{r4, pc}

10004ec6 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10004ec6:	4770      	bx	lr

10004ec8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10004ec8:	0003      	movs	r3, r0
	size_t n = 0;
10004eca:	2000      	movs	r0, #0

	while (*s != '\0') {
10004ecc:	5c1a      	ldrb	r2, [r3, r0]
10004ece:	2a00      	cmp	r2, #0
10004ed0:	d100      	bne.n	10004ed4 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10004ed2:	4770      	bx	lr
		n++;
10004ed4:	3001      	adds	r0, #1
10004ed6:	e7f9      	b.n	10004ecc <strlen+0x4>

10004ed8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10004ed8:	0003      	movs	r3, r0
	size_t n = 0;
10004eda:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10004edc:	5c1a      	ldrb	r2, [r3, r0]
10004ede:	2a00      	cmp	r2, #0
10004ee0:	d001      	beq.n	10004ee6 <strnlen+0xe>
10004ee2:	4288      	cmp	r0, r1
10004ee4:	d100      	bne.n	10004ee8 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10004ee6:	4770      	bx	lr
		n++;
10004ee8:	3001      	adds	r0, #1
10004eea:	e7f7      	b.n	10004edc <strnlen+0x4>

10004eec <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10004eec:	2300      	movs	r3, #0
{
10004eee:	b510      	push	{r4, lr}
	while (n > 0) {
10004ef0:	429a      	cmp	r2, r3
10004ef2:	d100      	bne.n	10004ef6 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10004ef4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10004ef6:	5ccc      	ldrb	r4, [r1, r3]
10004ef8:	54c4      	strb	r4, [r0, r3]
		n--;
10004efa:	3301      	adds	r3, #1
10004efc:	e7f8      	b.n	10004ef0 <memcpy+0x4>

10004efe <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10004efe:	0003      	movs	r3, r0
10004f00:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10004f02:	1882      	adds	r2, r0, r2
10004f04:	4293      	cmp	r3, r2
10004f06:	d100      	bne.n	10004f0a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10004f08:	4770      	bx	lr
		*(d_byte++) = c_byte;
10004f0a:	7019      	strb	r1, [r3, #0]
		n--;
10004f0c:	3301      	adds	r3, #1
10004f0e:	e7f9      	b.n	10004f04 <memset+0x6>

10004f10 <_stdout_hook_default>:
	return EOF;
10004f10:	2001      	movs	r0, #1
}
10004f12:	4240      	negs	r0, r0
10004f14:	4770      	bx	lr

10004f16 <z_log_msg_static_create.constprop.0>:
static inline void z_log_msg_static_create(const void * source, const struct log_msg_desc desc, uint8_t * package, const void * data)
10004f16:	b510      	push	{r4, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
10004f18:	2300      	movs	r3, #0
10004f1a:	f7fc fdb1 	bl	10001a80 <z_impl_z_log_msg_static_create>
}
10004f1e:	bd10      	pop	{r4, pc}

10004f20 <ssd1306_set_pixel_format>:
		return 0;
10004f20:	2000      	movs	r0, #0
{
10004f22:	b510      	push	{r4, lr}
	if (pf == PIXEL_FORMAT_MONO10) {
10004f24:	2904      	cmp	r1, #4
10004f26:	d001      	beq.n	10004f2c <ssd1306_set_pixel_format+0xc>
10004f28:	f7fd fbaa 	bl	10002680 <ssd1306_set_pixel_format.part.0>
}
10004f2c:	bd10      	pop	{r4, pc}

10004f2e <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
10004f2e:	b570      	push	{r4, r5, r6, lr}
10004f30:	0005      	movs	r5, r0
	return i2c_burst_write_dt(&config->bus,
10004f32:	2601      	movs	r6, #1
static inline int ssd1306_write_bus(const struct device *dev,
10004f34:	001c      	movs	r4, r3
10004f36:	b088      	sub	sp, #32
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
10004f38:	88ab      	ldrh	r3, [r5, #4]
10004f3a:	466d      	mov	r5, sp
	return i2c_burst_write_dt(&config->bus,
10004f3c:	4074      	eors	r4, r6
10004f3e:	01a4      	lsls	r4, r4, #6
10004f40:	71ec      	strb	r4, [r5, #7]
10004f42:	3507      	adds	r5, #7
	msg[0].flags = I2C_MSG_WRITE;
10004f44:	2400      	movs	r4, #0
	msg[0].buf = &start_addr;
10004f46:	9502      	str	r5, [sp, #8]
	msg[1].len = num_bytes;
10004f48:	9206      	str	r2, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
10004f4a:	466d      	mov	r5, sp
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
10004f4c:	2202      	movs	r2, #2
	return i2c_burst_write(spec->bus, spec->addr,
10004f4e:	6800      	ldr	r0, [r0, #0]
	msg[0].len = 1U;
10004f50:	9603      	str	r6, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
10004f52:	742c      	strb	r4, [r5, #16]
	msg[1].buf = (uint8_t *)buf;
10004f54:	9105      	str	r1, [sp, #20]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
10004f56:	772a      	strb	r2, [r5, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
10004f58:	6881      	ldr	r1, [r0, #8]
10004f5a:	688c      	ldr	r4, [r1, #8]
10004f5c:	a902      	add	r1, sp, #8
10004f5e:	47a0      	blx	r4
}
10004f60:	b008      	add	sp, #32
10004f62:	bd70      	pop	{r4, r5, r6, pc}

10004f64 <ssd1306_set_contrast>:
{
10004f64:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
10004f66:	2381      	movs	r3, #129	; 0x81
10004f68:	466a      	mov	r2, sp
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004f6a:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
10004f6c:	7113      	strb	r3, [r2, #4]
10004f6e:	7151      	strb	r1, [r2, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004f70:	2301      	movs	r3, #1
10004f72:	2202      	movs	r2, #2
10004f74:	a901      	add	r1, sp, #4
10004f76:	f7ff ffda 	bl	10004f2e <ssd1306_write_bus.isra.0>
}
10004f7a:	bd0e      	pop	{r1, r2, r3, pc}

10004f7c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10004f7c:	0002      	movs	r2, r0
10004f7e:	b510      	push	{r4, lr}
10004f80:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004f82:	7911      	ldrb	r1, [r2, #4]
10004f84:	2201      	movs	r2, #1
10004f86:	0014      	movs	r4, r2
10004f88:	408c      	lsls	r4, r1
10004f8a:	0021      	movs	r1, r4
{
	return gpio_pin_set(spec->port, spec->pin, value);
10004f8c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004f8e:	6904      	ldr	r4, [r0, #16]
10004f90:	6824      	ldr	r4, [r4, #0]
10004f92:	420c      	tst	r4, r1
10004f94:	d000      	beq.n	10004f98 <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
10004f96:	4053      	eors	r3, r2
	if (value != 0)	{
10004f98:	2b00      	cmp	r3, #0
10004f9a:	d003      	beq.n	10004fa4 <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
10004f9c:	6883      	ldr	r3, [r0, #8]
10004f9e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10004fa0:	4798      	blx	r3
}
10004fa2:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10004fa4:	6883      	ldr	r3, [r0, #8]
10004fa6:	691b      	ldr	r3, [r3, #16]
10004fa8:	e7fa      	b.n	10004fa0 <gpio_pin_set_dt.isra.0+0x24>

10004faa <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10004faa:	23d0      	movs	r3, #208	; 0xd0
10004fac:	061b      	lsls	r3, r3, #24
10004fae:	685b      	ldr	r3, [r3, #4]
}
10004fb0:	2000      	movs	r0, #0
	*value = gpio_get_all();
10004fb2:	600b      	str	r3, [r1, #0]
}
10004fb4:	4770      	bx	lr

10004fb6 <gpio_rpi_port_set_bits_raw>:
{
10004fb6:	000a      	movs	r2, r1
10004fb8:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10004fba:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10004fbc:	0010      	movs	r0, r2
10004fbe:	6919      	ldr	r1, [r3, #16]
10004fc0:	4388      	bics	r0, r1
10004fc2:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10004fc4:	20d0      	movs	r0, #208	; 0xd0
10004fc6:	0600      	lsls	r0, r0, #24
10004fc8:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
10004fca:	691c      	ldr	r4, [r3, #16]
10004fcc:	6959      	ldr	r1, [r3, #20]
10004fce:	4021      	ands	r1, r4
10004fd0:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10004fd2:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10004fd4:	6919      	ldr	r1, [r3, #16]
10004fd6:	695b      	ldr	r3, [r3, #20]
10004fd8:	4011      	ands	r1, r2
10004fda:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10004fdc:	6241      	str	r1, [r0, #36]	; 0x24
}
10004fde:	2000      	movs	r0, #0
10004fe0:	bd10      	pop	{r4, pc}

10004fe2 <gpio_rpi_port_clear_bits_raw>:
{
10004fe2:	000a      	movs	r2, r1
10004fe4:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10004fe6:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
10004fe8:	0010      	movs	r0, r2
10004fea:	6919      	ldr	r1, [r3, #16]
10004fec:	4388      	bics	r0, r1
10004fee:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10004ff0:	20d0      	movs	r0, #208	; 0xd0
10004ff2:	0600      	lsls	r0, r0, #24
10004ff4:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
10004ff6:	691c      	ldr	r4, [r3, #16]
10004ff8:	6959      	ldr	r1, [r3, #20]
10004ffa:	4021      	ands	r1, r4
10004ffc:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10004ffe:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10005000:	6919      	ldr	r1, [r3, #16]
10005002:	695b      	ldr	r3, [r3, #20]
10005004:	4011      	ands	r1, r2
10005006:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
10005008:	6281      	str	r1, [r0, #40]	; 0x28
}
1000500a:	2000      	movs	r0, #0
1000500c:	bd10      	pop	{r4, pc}

1000500e <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
1000500e:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
10005010:	0008      	movs	r0, r1
10005012:	691a      	ldr	r2, [r3, #16]
10005014:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
10005016:	22d0      	movs	r2, #208	; 0xd0
10005018:	0612      	lsls	r2, r2, #24
1000501a:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000501c:	691b      	ldr	r3, [r3, #16]
}
1000501e:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10005020:	400b      	ands	r3, r1
10005022:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10005024:	4770      	bx	lr

10005026 <gpio_rpi_manage_callback>:
{
10005026:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10005028:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
1000502a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
1000502c:	2800      	cmp	r0, #0
1000502e:	d021      	beq.n	10005074 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005030:	4288      	cmp	r0, r1
10005032:	d11b      	bne.n	1000506c <gpio_rpi_manage_callback+0x46>
	return node->next;
10005034:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10005036:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10005038:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
1000503a:	42a1      	cmp	r1, r4
1000503c:	d100      	bne.n	10005040 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
1000503e:	6098      	str	r0, [r3, #8]
	parent->next = child;
10005040:	2000      	movs	r0, #0
10005042:	6008      	str	r0, [r1, #0]
	if (set) {
10005044:	4282      	cmp	r2, r0
10005046:	d006      	beq.n	10005056 <gpio_rpi_manage_callback+0x30>
	return list->head;
10005048:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
1000504a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
1000504c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
1000504e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10005050:	2a00      	cmp	r2, #0
10005052:	d100      	bne.n	10005056 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
10005054:	6099      	str	r1, [r3, #8]
	return 0;
10005056:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10005058:	e010      	b.n	1000507c <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000505a:	4281      	cmp	r1, r0
1000505c:	d106      	bne.n	1000506c <gpio_rpi_manage_callback+0x46>
	return node->next;
1000505e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
10005060:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10005062:	6898      	ldr	r0, [r3, #8]
10005064:	4281      	cmp	r1, r0
10005066:	d1eb      	bne.n	10005040 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10005068:	609c      	str	r4, [r3, #8]
}
1000506a:	e7e9      	b.n	10005040 <gpio_rpi_manage_callback+0x1a>
	return node->next;
1000506c:	0004      	movs	r4, r0
1000506e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005070:	2800      	cmp	r0, #0
10005072:	d1f2      	bne.n	1000505a <gpio_rpi_manage_callback+0x34>
			if (!set) {
10005074:	2a00      	cmp	r2, #0
10005076:	d1e7      	bne.n	10005048 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10005078:	2016      	movs	r0, #22
1000507a:	4240      	negs	r0, r0
}
1000507c:	bd10      	pop	{r4, pc}

1000507e <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
1000507e:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10005080:	6843      	ldr	r3, [r0, #4]
10005082:	685b      	ldr	r3, [r3, #4]
10005084:	4798      	blx	r3
	return 0;
}
10005086:	2000      	movs	r0, #0
10005088:	bd10      	pop	{r4, pc}

1000508a <gpio_rpi_pin_interrupt_configure>:
{
1000508a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000508c:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
1000508e:	6907      	ldr	r7, [r0, #16]
{
10005090:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005092:	210f      	movs	r1, #15
10005094:	2200      	movs	r2, #0
10005096:	0028      	movs	r0, r5
{
10005098:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000509a:	f7fe f933 	bl	10003304 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000509e:	2201      	movs	r2, #1
100050a0:	0013      	movs	r3, r2
100050a2:	40ab      	lsls	r3, r5
100050a4:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
100050a6:	2380      	movs	r3, #128	; 0x80
100050a8:	039b      	lsls	r3, r3, #14
100050aa:	429e      	cmp	r6, r3
100050ac:	d105      	bne.n	100050ba <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100050ae:	68fb      	ldr	r3, [r7, #12]
100050b0:	9a01      	ldr	r2, [sp, #4]
100050b2:	4393      	bics	r3, r2
}
100050b4:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100050b6:	60fb      	str	r3, [r7, #12]
}
100050b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
100050ba:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
100050bc:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
100050be:	04db      	lsls	r3, r3, #19
100050c0:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
100050c2:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
100050c4:	01f6      	lsls	r6, r6, #7
100050c6:	d50d      	bpl.n	100050e4 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
100050c8:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
100050ca:	2b00      	cmp	r3, #0
100050cc:	d001      	beq.n	100050d2 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
100050ce:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
100050d0:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
100050d2:	2201      	movs	r2, #1
100050d4:	0028      	movs	r0, r5
100050d6:	f7fe f915 	bl	10003304 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100050da:	68fb      	ldr	r3, [r7, #12]
100050dc:	9a01      	ldr	r2, [sp, #4]
100050de:	431a      	orrs	r2, r3
100050e0:	0013      	movs	r3, r2
100050e2:	e7e7      	b.n	100050b4 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
100050e4:	2b00      	cmp	r3, #0
100050e6:	d0f4      	beq.n	100050d2 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
100050e8:	2302      	movs	r3, #2
100050ea:	e7f1      	b.n	100050d0 <gpio_rpi_pin_interrupt_configure+0x46>

100050ec <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
100050ec:	b510      	push	{r4, lr}
100050ee:	2200      	movs	r2, #0
100050f0:	2103      	movs	r1, #3
100050f2:	200d      	movs	r0, #13
100050f4:	f7fd f842 	bl	1000217c <z_arm_irq_priority_set>
100050f8:	200d      	movs	r0, #13
100050fa:	f7fd f833 	bl	10002164 <arch_irq_enable>
100050fe:	bd10      	pop	{r4, pc}

10005100 <gpio_rpi_port_set_masked_raw>:
{
10005100:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
10005102:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005104:	20d0      	movs	r0, #208	; 0xd0
10005106:	0600      	lsls	r0, r0, #24
10005108:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
1000510a:	6925      	ldr	r5, [r4, #16]
1000510c:	4053      	eors	r3, r2
1000510e:	400b      	ands	r3, r1
10005110:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10005112:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005114:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10005116:	6a03      	ldr	r3, [r0, #32]
10005118:	4053      	eors	r3, r2
1000511a:	439d      	bics	r5, r3
1000511c:	002b      	movs	r3, r5
1000511e:	6925      	ldr	r5, [r4, #16]
10005120:	401d      	ands	r5, r3
10005122:	6963      	ldr	r3, [r4, #20]
10005124:	402b      	ands	r3, r5
10005126:	62c3      	str	r3, [r0, #44]	; 0x2c
10005128:	6a03      	ldr	r3, [r0, #32]
1000512a:	405a      	eors	r2, r3
1000512c:	400a      	ands	r2, r1
1000512e:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
10005130:	6963      	ldr	r3, [r4, #20]
10005132:	4011      	ands	r1, r2
10005134:	4399      	bics	r1, r3
10005136:	62c1      	str	r1, [r0, #44]	; 0x2c
}
10005138:	2000      	movs	r0, #0
1000513a:	bd30      	pop	{r4, r5, pc}

1000513c <gpio_rpi_configure>:
{
1000513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000513e:	0015      	movs	r5, r2
10005140:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
10005142:	2401      	movs	r4, #1
10005144:	0952      	lsrs	r2, r2, #5
10005146:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
10005148:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
1000514a:	4021      	ands	r1, r4
1000514c:	0038      	movs	r0, r7
1000514e:	4022      	ands	r2, r4
10005150:	f7fe f88e 	bl	10003270 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10005154:	2105      	movs	r1, #5
10005156:	0038      	movs	r0, r7
10005158:	f7fe f874 	bl	10003244 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
1000515c:	03ab      	lsls	r3, r5, #14
1000515e:	d525      	bpl.n	100051ac <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
10005160:	40bc      	lsls	r4, r7
10005162:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
10005164:	07a9      	lsls	r1, r5, #30
10005166:	d515      	bpl.n	10005194 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
10005168:	4322      	orrs	r2, r4
1000516a:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
1000516c:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
1000516e:	6971      	ldr	r1, [r6, #20]
10005170:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005172:	0768      	lsls	r0, r5, #29
10005174:	d507      	bpl.n	10005186 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
10005176:	4321      	orrs	r1, r4
10005178:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
1000517a:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
1000517c:	036d      	lsls	r5, r5, #13
1000517e:	d507      	bpl.n	10005190 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
10005180:	6254      	str	r4, [r2, #36]	; 0x24
}
10005182:	2000      	movs	r0, #0
10005184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
10005186:	43a1      	bics	r1, r4
10005188:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
1000518a:	6154      	str	r4, [r2, #20]
    if (out)
1000518c:	032d      	lsls	r5, r5, #12
1000518e:	d4f7      	bmi.n	10005180 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
10005190:	6294      	str	r4, [r2, #40]	; 0x28
}
10005192:	e7f6      	b.n	10005182 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
10005194:	43a2      	bics	r2, r4
10005196:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
10005198:	22d0      	movs	r2, #208	; 0xd0
1000519a:	0612      	lsls	r2, r2, #24
1000519c:	0329      	lsls	r1, r5, #12
1000519e:	d501      	bpl.n	100051a4 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
100051a0:	6154      	str	r4, [r2, #20]
}
100051a2:	e7ed      	b.n	10005180 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
100051a4:	036d      	lsls	r5, r5, #13
100051a6:	d5eb      	bpl.n	10005180 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
100051a8:	6194      	str	r4, [r2, #24]
}
100051aa:	e7e9      	b.n	10005180 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
100051ac:	03ed      	lsls	r5, r5, #15
100051ae:	d5e8      	bpl.n	10005182 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
100051b0:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100051b2:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
100051b4:	0612      	lsls	r2, r2, #24
100051b6:	e7eb      	b.n	10005190 <gpio_rpi_configure+0x54>

100051b8 <i2c_dw_runtime_configure>:
{
100051b8:	b570      	push	{r4, r5, r6, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
100051ba:	6843      	ldr	r3, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100051bc:	6902      	ldr	r2, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100051be:	681c      	ldr	r4, [r3, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
100051c0:	2307      	movs	r3, #7
100051c2:	0848      	lsrs	r0, r1, #1
	dw->app_config = config;
100051c4:	6251      	str	r1, [r2, #36]	; 0x24
	switch (I2C_SPEED_GET(dw->app_config)) {
100051c6:	4003      	ands	r3, r0
100051c8:	0745      	lsls	r5, r0, #29
100051ca:	d407      	bmi.n	100051dc <i2c_dw_runtime_configure+0x24>
100051cc:	2506      	movs	r5, #6
100051ce:	4228      	tst	r0, r5
100051d0:	d124      	bne.n	1000521c <i2c_dw_runtime_configure+0x64>
100051d2:	2b01      	cmp	r3, #1
100051d4:	d00c      	beq.n	100051f0 <i2c_dw_runtime_configure+0x38>
100051d6:	2016      	movs	r0, #22
100051d8:	4240      	negs	r0, r0
100051da:	e031      	b.n	10005240 <i2c_dw_runtime_configure+0x88>
100051dc:	2b04      	cmp	r3, #4
100051de:	d1fa      	bne.n	100051d6 <i2c_dw_runtime_configure+0x1e>
		if (dw->support_hs_mode) {
100051e0:	0013      	movs	r3, r2
100051e2:	333b      	adds	r3, #59	; 0x3b
100051e4:	781b      	ldrb	r3, [r3, #0]
100051e6:	2b00      	cmp	r3, #0
100051e8:	d0f5      	beq.n	100051d6 <i2c_dw_runtime_configure+0x1e>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
100051ea:	0020      	movs	r0, r4
100051ec:	30a4      	adds	r0, #164	; 0xa4
100051ee:	e017      	b.n	10005220 <i2c_dw_runtime_configure+0x68>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
100051f0:	0020      	movs	r0, r4
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
100051f2:	26fa      	movs	r6, #250	; 0xfa
100051f4:	30a0      	adds	r0, #160	; 0xa0
	return *(volatile uint32_t *)addr;
100051f6:	6805      	ldr	r5, [r0, #0]
100051f8:	0076      	lsls	r6, r6, #1
100051fa:	3507      	adds	r5, #7
			value = I2C_STD_LCNT;
100051fc:	0033      	movs	r3, r6
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
100051fe:	42b5      	cmp	r5, r6
10005200:	d301      	bcc.n	10005206 <i2c_dw_runtime_configure+0x4e>
10005202:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
10005204:	3308      	adds	r3, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10005206:	26c8      	movs	r6, #200	; 0xc8
		dw->lcnt = value;
10005208:	86d3      	strh	r3, [r2, #54]	; 0x36
1000520a:	6805      	ldr	r5, [r0, #0]
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000520c:	0076      	lsls	r6, r6, #1
1000520e:	3505      	adds	r5, #5
			value = I2C_STD_HCNT;
10005210:	0033      	movs	r3, r6
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10005212:	42b5      	cmp	r5, r6
10005214:	d311      	bcc.n	1000523a <i2c_dw_runtime_configure+0x82>
10005216:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 6;
10005218:	3306      	adds	r3, #6
1000521a:	e00e      	b.n	1000523a <i2c_dw_runtime_configure+0x82>
1000521c:	0020      	movs	r0, r4
1000521e:	30a0      	adds	r0, #160	; 0xa0
10005220:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_LCNT;
10005222:	2357      	movs	r3, #87	; 0x57
		if (I2C_FS_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10005224:	3507      	adds	r5, #7
10005226:	2d56      	cmp	r5, #86	; 0x56
10005228:	d901      	bls.n	1000522e <i2c_dw_runtime_configure+0x76>
1000522a:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
1000522c:	3308      	adds	r3, #8
		dw->lcnt = value;
1000522e:	86d3      	strh	r3, [r2, #54]	; 0x36
10005230:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_HCNT;
10005232:	234b      	movs	r3, #75	; 0x4b
		if (I2C_FS_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10005234:	3505      	adds	r5, #5
10005236:	2d4a      	cmp	r5, #74	; 0x4a
10005238:	d8ed      	bhi.n	10005216 <i2c_dw_runtime_configure+0x5e>
	uint32_t	rc = 0U;
1000523a:	2000      	movs	r0, #0
		dw->hcnt = value;
1000523c:	b29b      	uxth	r3, r3
1000523e:	8693      	strh	r3, [r2, #52]	; 0x34
10005240:	6c23      	ldr	r3, [r4, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
10005242:	2310      	movs	r3, #16
10005244:	430b      	orrs	r3, r1
10005246:	6253      	str	r3, [r2, #36]	; 0x24
}
10005248:	bd70      	pop	{r4, r5, r6, pc}

1000524a <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
1000524a:	b510      	push	{r4, lr}
1000524c:	2200      	movs	r2, #0
1000524e:	2103      	movs	r1, #3
10005250:	2017      	movs	r0, #23
10005252:	f7fc ff93 	bl	1000217c <z_arm_irq_priority_set>
10005256:	2017      	movs	r0, #23
10005258:	f7fc ff84 	bl	10002164 <arch_irq_enable>
1000525c:	bd10      	pop	{r4, pc}

1000525e <i2c_dw_isr>:
{
1000525e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005260:	6843      	ldr	r3, [r0, #4]
{
10005262:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005264:	681b      	ldr	r3, [r3, #0]
{
10005266:	4684      	mov	ip, r0
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005268:	9301      	str	r3, [sp, #4]
1000526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	struct i2c_dw_dev_config * const dw = port->data;
1000526c:	6902      	ldr	r2, [r0, #16]
1000526e:	9302      	str	r3, [sp, #8]
10005270:	9b01      	ldr	r3, [sp, #4]
10005272:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10005274:	07db      	lsls	r3, r3, #31
10005276:	d50f      	bpl.n	10005298 <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
10005278:	214b      	movs	r1, #75	; 0x4b
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
1000527a:	9802      	ldr	r0, [sp, #8]
1000527c:	2304      	movs	r3, #4
1000527e:	4208      	tst	r0, r1
10005280:	d00c      	beq.n	1000529c <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
10005282:	3238      	adds	r2, #56	; 0x38
10005284:	7013      	strb	r3, [r2, #0]
	struct i2c_dw_dev_config * const dw = dev->data;
10005286:	4663      	mov	r3, ip
	*(volatile uint32_t *)addr = data;
10005288:	2200      	movs	r2, #0
1000528a:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000528c:	685b      	ldr	r3, [r3, #4]
1000528e:	681b      	ldr	r3, [r3, #0]
10005290:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10005294:	f7fe fba8 	bl	100039e8 <z_impl_k_sem_give>
}
10005298:	b005      	add	sp, #20
1000529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
1000529c:	4669      	mov	r1, sp
1000529e:	9802      	ldr	r0, [sp, #8]
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
100052a0:	2408      	movs	r4, #8
100052a2:	7a09      	ldrb	r1, [r1, #8]
		if (intr_stat.bits.rx_full) {
100052a4:	4218      	tst	r0, r3
100052a6:	d116      	bne.n	100052d6 <i2c_dw_isr+0x78>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100052a8:	0013      	movs	r3, r2
100052aa:	333a      	adds	r3, #58	; 0x3a
100052ac:	7818      	ldrb	r0, [r3, #0]
100052ae:	07c0      	lsls	r0, r0, #31
100052b0:	d505      	bpl.n	100052be <i2c_dw_isr+0x60>
	uint32_t temp = *(volatile uint32_t *)addr;
100052b2:	9801      	ldr	r0, [sp, #4]
100052b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
100052b6:	2010      	movs	r0, #16
100052b8:	4320      	orrs	r0, r4
100052ba:	9c01      	ldr	r4, [sp, #4]
100052bc:	6320      	str	r0, [r4, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
100052be:	2410      	movs	r4, #16
100052c0:	4221      	tst	r1, r4
100052c2:	d125      	bne.n	10005310 <i2c_dw_isr+0xb2>
		if (intr_stat.bits.stop_det) {
100052c4:	9b02      	ldr	r3, [sp, #8]
100052c6:	059b      	lsls	r3, r3, #22
100052c8:	d5e6      	bpl.n	10005298 <i2c_dw_isr+0x3a>
100052ca:	9b01      	ldr	r3, [sp, #4]
100052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
100052ce:	e7da      	b.n	10005286 <i2c_dw_isr+0x28>
	if (dw->xfr_len == 0U) {
100052d0:	2b00      	cmp	r3, #0
100052d2:	d1e9      	bne.n	100052a8 <i2c_dw_isr+0x4a>
100052d4:	e015      	b.n	10005302 <i2c_dw_isr+0xa4>
	uint32_t temp = *(volatile uint32_t *)addr;
100052d6:	9b01      	ldr	r3, [sp, #4]
100052d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
100052da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100052dc:	4220      	tst	r0, r4
100052de:	d0f7      	beq.n	100052d0 <i2c_dw_isr+0x72>
100052e0:	2b00      	cmp	r3, #0
100052e2:	d00e      	beq.n	10005302 <i2c_dw_isr+0xa4>
100052e4:	9b01      	ldr	r3, [sp, #4]
100052e6:	6918      	ldr	r0, [r3, #16]
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
100052e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
100052ea:	7018      	strb	r0, [r3, #0]
		dw->xfr_buf++;
100052ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
		dw->rx_pending--;
100052ee:	6b10      	ldr	r0, [r2, #48]	; 0x30
		dw->xfr_buf++;
100052f0:	3301      	adds	r3, #1
100052f2:	6293      	str	r3, [r2, #40]	; 0x28
		dw->xfr_len--;
100052f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		dw->rx_pending--;
100052f6:	3801      	subs	r0, #1
		dw->xfr_len--;
100052f8:	3b01      	subs	r3, #1
100052fa:	62d3      	str	r3, [r2, #44]	; 0x2c
		dw->rx_pending--;
100052fc:	6310      	str	r0, [r2, #48]	; 0x30
		if (dw->xfr_len == 0U) {
100052fe:	2b00      	cmp	r3, #0
10005300:	d1e9      	bne.n	100052d6 <i2c_dw_isr+0x78>
		dw->state &= ~I2C_DW_CMD_RECV;
10005302:	0010      	movs	r0, r2
10005304:	2402      	movs	r4, #2
10005306:	3038      	adds	r0, #56	; 0x38
10005308:	7803      	ldrb	r3, [r0, #0]
1000530a:	43a3      	bics	r3, r4
1000530c:	7003      	strb	r3, [r0, #0]
		return;
1000530e:	e7cb      	b.n	100052a8 <i2c_dw_isr+0x4a>
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10005310:	7819      	ldrb	r1, [r3, #0]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005312:	4660      	mov	r0, ip
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10005314:	9103      	str	r1, [sp, #12]
10005316:	2501      	movs	r5, #1
	struct i2c_dw_dev_config * const dw = dev->data;
10005318:	4661      	mov	r1, ip
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000531a:	6840      	ldr	r0, [r0, #4]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000531c:	9e03      	ldr	r6, [sp, #12]
	struct i2c_dw_dev_config * const dw = dev->data;
1000531e:	6909      	ldr	r1, [r1, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005320:	6800      	ldr	r0, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10005322:	422e      	tst	r6, r5
10005324:	d141      	bne.n	100053aa <i2c_dw_isr+0x14c>
	if (dw->xfr_len == 0U) {
10005326:	6ace      	ldr	r6, [r1, #44]	; 0x2c
10005328:	2e00      	cmp	r6, #0
1000532a:	d134      	bne.n	10005396 <i2c_dw_isr+0x138>
	uint32_t temp = *(volatile uint32_t *)addr;
1000532c:	6b06      	ldr	r6, [r0, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
1000532e:	3138      	adds	r1, #56	; 0x38
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005330:	43a6      	bics	r6, r4
10005332:	6306      	str	r6, [r0, #48]	; 0x30
10005334:	7808      	ldrb	r0, [r1, #0]
10005336:	43a8      	bics	r0, r5
10005338:	7008      	strb	r0, [r1, #0]
			if (((dw->xfr_len == 0U)
1000533a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1000533c:	2a00      	cmp	r2, #0
1000533e:	d1c1      	bne.n	100052c4 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
10005340:	781b      	ldrb	r3, [r3, #0]
10005342:	079b      	lsls	r3, r3, #30
10005344:	d4be      	bmi.n	100052c4 <i2c_dw_isr+0x66>
10005346:	e79e      	b.n	10005286 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005348:	6acd      	ldr	r5, [r1, #44]	; 0x2c
1000534a:	2d00      	cmp	r5, #0
1000534c:	d027      	beq.n	1000539e <i2c_dw_isr+0x140>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000534e:	000e      	movs	r6, r1
10005350:	2704      	movs	r7, #4
10005352:	363a      	adds	r6, #58	; 0x3a
		data = dw->xfr_buf[0];
10005354:	6a8b      	ldr	r3, [r1, #40]	; 0x28
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005356:	7834      	ldrb	r4, [r6, #0]
		data = dw->xfr_buf[0];
10005358:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000535a:	423c      	tst	r4, r7
1000535c:	d005      	beq.n	1000536a <i2c_dw_isr+0x10c>
			data |= IC_DATA_CMD_RESTART;
1000535e:	2780      	movs	r7, #128	; 0x80
10005360:	00ff      	lsls	r7, r7, #3
10005362:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10005364:	2704      	movs	r7, #4
10005366:	43bc      	bics	r4, r7
10005368:	7034      	strb	r4, [r6, #0]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
1000536a:	2d01      	cmp	r5, #1
1000536c:	d108      	bne.n	10005380 <i2c_dw_isr+0x122>
1000536e:	000c      	movs	r4, r1
10005370:	343a      	adds	r4, #58	; 0x3a
10005372:	7824      	ldrb	r4, [r4, #0]
10005374:	3501      	adds	r5, #1
10005376:	422c      	tst	r4, r5
10005378:	d002      	beq.n	10005380 <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
1000537a:	2480      	movs	r4, #128	; 0x80
1000537c:	00a4      	lsls	r4, r4, #2
1000537e:	4323      	orrs	r3, r4
	*(volatile uint32_t *)addr = data;
10005380:	6103      	str	r3, [r0, #16]
		dw->xfr_len--;
10005382:	6acb      	ldr	r3, [r1, #44]	; 0x2c
10005384:	3b01      	subs	r3, #1
10005386:	62cb      	str	r3, [r1, #44]	; 0x2c
		dw->xfr_buf++;
10005388:	6a8b      	ldr	r3, [r1, #40]	; 0x28
1000538a:	3301      	adds	r3, #1
1000538c:	628b      	str	r3, [r1, #40]	; 0x28
	uint32_t temp = *(volatile uint32_t *)addr;
1000538e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
10005390:	065b      	lsls	r3, r3, #25
10005392:	d500      	bpl.n	10005396 <i2c_dw_isr+0x138>
10005394:	e777      	b.n	10005286 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005396:	2402      	movs	r4, #2
10005398:	6f03      	ldr	r3, [r0, #112]	; 0x70
1000539a:	4223      	tst	r3, r4
1000539c:	d1d4      	bne.n	10005348 <i2c_dw_isr+0xea>
			if (((dw->xfr_len == 0U)
1000539e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100053a0:	2b00      	cmp	r3, #0
100053a2:	d18f      	bne.n	100052c4 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
100053a4:	323a      	adds	r2, #58	; 0x3a
100053a6:	7813      	ldrb	r3, [r2, #0]
100053a8:	e7cb      	b.n	10005342 <i2c_dw_isr+0xe4>
	if (dw->request_bytes == 0U) {
100053aa:	000d      	movs	r5, r1
100053ac:	3539      	adds	r5, #57	; 0x39
100053ae:	782e      	ldrb	r6, [r5, #0]
100053b0:	2e00      	cmp	r6, #0
100053b2:	d103      	bne.n	100053bc <i2c_dw_isr+0x15e>
	uint32_t temp = *(volatile uint32_t *)addr;
100053b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100053b6:	43a1      	bics	r1, r4
100053b8:	6301      	str	r1, [r0, #48]	; 0x30
100053ba:	e7be      	b.n	1000533a <i2c_dw_isr+0xdc>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
100053bc:	0003      	movs	r3, r0
100053be:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
100053c0:	681b      	ldr	r3, [r3, #0]
100053c2:	6f85      	ldr	r5, [r0, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
100053c4:	041c      	lsls	r4, r3, #16
100053c6:	0e24      	lsrs	r4, r4, #24
100053c8:	3401      	adds	r4, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
100053ca:	6b0f      	ldr	r7, [r1, #48]	; 0x30
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
100053cc:	b2e4      	uxtb	r4, r4
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
100053ce:	1b65      	subs	r5, r4, r5
100053d0:	1bed      	subs	r5, r5, r7
100053d2:	b2ef      	uxtb	r7, r5
	if (rx_empty < 0) {
100053d4:	062d      	lsls	r5, r5, #24
100053d6:	d505      	bpl.n	100053e4 <i2c_dw_isr+0x186>
			if (((dw->xfr_len == 0U)
100053d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100053da:	2b00      	cmp	r3, #0
100053dc:	d000      	beq.n	100053e0 <i2c_dw_isr+0x182>
100053de:	e771      	b.n	100052c4 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
100053e0:	9b03      	ldr	r3, [sp, #12]
100053e2:	e7ae      	b.n	10005342 <i2c_dw_isr+0xe4>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
100053e4:	021b      	lsls	r3, r3, #8
100053e6:	6f45      	ldr	r5, [r0, #116]	; 0x74
100053e8:	0e1b      	lsrs	r3, r3, #24
100053ea:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
100053ec:	1b5b      	subs	r3, r3, r5
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100053ee:	b2db      	uxtb	r3, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
100053f0:	1c35      	adds	r5, r6, #0
100053f2:	42a6      	cmp	r6, r4
100053f4:	d900      	bls.n	100053f8 <i2c_dw_isr+0x19a>
100053f6:	1c25      	adds	r5, r4, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100053f8:	b2ed      	uxtb	r5, r5
100053fa:	42ab      	cmp	r3, r5
100053fc:	dd00      	ble.n	10005400 <i2c_dw_isr+0x1a2>
100053fe:	002b      	movs	r3, r5
10005400:	42bb      	cmp	r3, r7
10005402:	dd00      	ble.n	10005406 <i2c_dw_isr+0x1a8>
10005404:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005406:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10005408:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
1000540a:	2b00      	cmp	r3, #0
1000540c:	d0c7      	beq.n	1000539e <i2c_dw_isr+0x140>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000540e:	000d      	movs	r5, r1
10005410:	353a      	adds	r5, #58	; 0x3a
10005412:	782c      	ldrb	r4, [r5, #0]
10005414:	4234      	tst	r4, r6
10005416:	d01f      	beq.n	10005458 <i2c_dw_isr+0x1fa>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10005418:	43b4      	bics	r4, r6
1000541a:	702c      	strb	r4, [r5, #0]
			data |= IC_DATA_CMD_RESTART;
1000541c:	24a0      	movs	r4, #160	; 0xa0
1000541e:	00e4      	lsls	r4, r4, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
10005420:	2702      	movs	r7, #2
10005422:	782d      	ldrb	r5, [r5, #0]
10005424:	423d      	tst	r5, r7
10005426:	d007      	beq.n	10005438 <i2c_dw_isr+0x1da>
		    && (dw->request_bytes == 1U)) {
10005428:	000d      	movs	r5, r1
1000542a:	3539      	adds	r5, #57	; 0x39
1000542c:	782d      	ldrb	r5, [r5, #0]
1000542e:	2d01      	cmp	r5, #1
10005430:	d102      	bne.n	10005438 <i2c_dw_isr+0x1da>
			data |= IC_DATA_CMD_STOP;
10005432:	2580      	movs	r5, #128	; 0x80
10005434:	00ad      	lsls	r5, r5, #2
10005436:	432c      	orrs	r4, r5
10005438:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
1000543a:	6b05      	ldr	r5, [r0, #48]	; 0x30
		cnt--;
1000543c:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000543e:	43bd      	bics	r5, r7
10005440:	6305      	str	r5, [r0, #48]	; 0x30
		dw->request_bytes--;
10005442:	000d      	movs	r5, r1
	*(volatile uint32_t *)addr = data;
10005444:	6104      	str	r4, [r0, #16]
		dw->rx_pending++;
10005446:	6b0c      	ldr	r4, [r1, #48]	; 0x30
		dw->request_bytes--;
10005448:	3539      	adds	r5, #57	; 0x39
		dw->rx_pending++;
1000544a:	3401      	adds	r4, #1
1000544c:	630c      	str	r4, [r1, #48]	; 0x30
		dw->request_bytes--;
1000544e:	782c      	ldrb	r4, [r5, #0]
		cnt--;
10005450:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
10005452:	3c01      	subs	r4, #1
10005454:	702c      	strb	r4, [r5, #0]
		cnt--;
10005456:	e7d8      	b.n	1000540a <i2c_dw_isr+0x1ac>
		data = IC_DATA_CMD_CMD;
10005458:	2480      	movs	r4, #128	; 0x80
1000545a:	0064      	lsls	r4, r4, #1
1000545c:	e7e0      	b.n	10005420 <i2c_dw_isr+0x1c2>

1000545e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000545e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10005460:	6803      	ldr	r3, [r0, #0]
10005462:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10005464:	7905      	ldrb	r5, [r0, #4]
10005466:	6804      	ldr	r4, [r0, #0]
10005468:	00ed      	lsls	r5, r5, #3
1000546a:	1964      	adds	r4, r4, r5
1000546c:	42a3      	cmp	r3, r4
1000546e:	d302      	bcc.n	10005476 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10005470:	2002      	movs	r0, #2
10005472:	4240      	negs	r0, r0
}
10005474:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10005476:	795c      	ldrb	r4, [r3, #5]
10005478:	428c      	cmp	r4, r1
1000547a:	d001      	beq.n	10005480 <pinctrl_lookup_state+0x22>
		(*state)++;
1000547c:	3308      	adds	r3, #8
1000547e:	e7f0      	b.n	10005462 <pinctrl_lookup_state+0x4>
			return 0;
10005480:	2000      	movs	r0, #0
10005482:	e7f7      	b.n	10005474 <pinctrl_lookup_state+0x16>

10005484 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005486:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005488:	2601      	movs	r6, #1
1000548a:	008d      	lsls	r5, r1, #2
1000548c:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000548e:	42ac      	cmp	r4, r5
10005490:	d101      	bne.n	10005496 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10005492:	2000      	movs	r0, #0
10005494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10005496:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10005498:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000549a:	06c0      	lsls	r0, r0, #27
1000549c:	0ec0      	lsrs	r0, r0, #27
1000549e:	f000 f987 	bl	100057b0 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100054a2:	8821      	ldrh	r1, [r4, #0]
100054a4:	7820      	ldrb	r0, [r4, #0]
100054a6:	05c9      	lsls	r1, r1, #23
100054a8:	06c0      	lsls	r0, r0, #27
100054aa:	0f09      	lsrs	r1, r1, #28
100054ac:	0ec0      	lsrs	r0, r0, #27
100054ae:	f7fd fec9 	bl	10003244 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100054b2:	7861      	ldrb	r1, [r4, #1]
100054b4:	7820      	ldrb	r0, [r4, #0]
100054b6:	09ca      	lsrs	r2, r1, #7
100054b8:	06c0      	lsls	r0, r0, #27
100054ba:	0649      	lsls	r1, r1, #25
100054bc:	0fc9      	lsrs	r1, r1, #31
100054be:	0ec0      	lsrs	r0, r0, #27
100054c0:	f7fd fed6 	bl	10003270 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
100054c4:	7861      	ldrb	r1, [r4, #1]
100054c6:	7820      	ldrb	r0, [r4, #0]
100054c8:	06c9      	lsls	r1, r1, #27
100054ca:	06c0      	lsls	r0, r0, #27
100054cc:	0f09      	lsrs	r1, r1, #28
100054ce:	0ec0      	lsrs	r0, r0, #27
100054d0:	f7fd fefc 	bl	100032cc <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100054d4:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100054d6:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100054d8:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100054da:	06c0      	lsls	r0, r0, #27
100054dc:	4031      	ands	r1, r6
100054de:	0ec0      	lsrs	r0, r0, #27
100054e0:	f7fd fee6 	bl	100032b0 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
100054e4:	78a1      	ldrb	r1, [r4, #2]
100054e6:	7820      	ldrb	r0, [r4, #0]
100054e8:	0789      	lsls	r1, r1, #30
100054ea:	06c0      	lsls	r0, r0, #27
100054ec:	0fc9      	lsrs	r1, r1, #31
100054ee:	0ec0      	lsrs	r0, r0, #27
100054f0:	f7fd fed0 	bl	10003294 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100054f4:	78a1      	ldrb	r1, [r4, #2]
100054f6:	7820      	ldrb	r0, [r4, #0]
100054f8:	07c9      	lsls	r1, r1, #31
100054fa:	06c0      	lsls	r0, r0, #27
100054fc:	0fc9      	lsrs	r1, r1, #31
100054fe:	0ec0      	lsrs	r0, r0, #27
10005500:	f7fd ff22 	bl	10003348 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10005504:	003c      	movs	r4, r7
10005506:	e7c2      	b.n	1000548e <pinctrl_configure_pins+0xa>

10005508 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10005508:	2000      	movs	r0, #0
1000550a:	4770      	bx	lr

1000550c <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
1000550c:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
1000550e:	7900      	ldrb	r0, [r0, #4]
10005510:	2802      	cmp	r0, #2
10005512:	d009      	beq.n	10005528 <reset_rpi_read_register.isra.0+0x1c>
10005514:	2804      	cmp	r0, #4
10005516:	d00b      	beq.n	10005530 <reset_rpi_read_register.isra.0+0x24>
10005518:	2801      	cmp	r0, #1
1000551a:	d10c      	bne.n	10005536 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
1000551c:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
1000551e:	780b      	ldrb	r3, [r1, #0]
10005520:	b2db      	uxtb	r3, r3
	return 0;
10005522:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10005524:	6013      	str	r3, [r2, #0]
}
10005526:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10005528:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
1000552a:	880b      	ldrh	r3, [r1, #0]
1000552c:	b29b      	uxth	r3, r3
		break;
1000552e:	e7f8      	b.n	10005522 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10005530:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10005532:	680b      	ldr	r3, [r1, #0]
		break;
10005534:	e7f5      	b.n	10005522 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10005536:	2016      	movs	r0, #22
10005538:	4240      	negs	r0, r0
1000553a:	e7f4      	b.n	10005526 <reset_rpi_read_register.isra.0+0x1a>

1000553c <reset_rpi_update>:
{
1000553c:	0003      	movs	r3, r0
1000553e:	b5f0      	push	{r4, r5, r6, r7, lr}
10005540:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10005542:	685f      	ldr	r7, [r3, #4]
{
10005544:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10005546:	793e      	ldrb	r6, [r7, #4]
{
10005548:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000554a:	00f1      	lsls	r1, r6, #3
1000554c:	f7fa fe7c 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005550:	aa03      	add	r2, sp, #12
10005552:	0004      	movs	r4, r0
10005554:	000d      	movs	r5, r1
10005556:	b281      	uxth	r1, r0
10005558:	0038      	movs	r0, r7
1000555a:	f7ff ffd7 	bl	1000550c <reset_rpi_read_register.isra.0>
	if (ret) {
1000555e:	2800      	cmp	r0, #0
10005560:	d117      	bne.n	10005592 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10005562:	2201      	movs	r2, #1
10005564:	9903      	ldr	r1, [sp, #12]
10005566:	b2ed      	uxtb	r5, r5
10005568:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
1000556a:	000b      	movs	r3, r1
		value |= BIT(regbit);
1000556c:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
1000556e:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10005570:	797d      	ldrb	r5, [r7, #5]
10005572:	9a01      	ldr	r2, [sp, #4]
10005574:	4295      	cmp	r5, r2
10005576:	d001      	beq.n	1000557c <reset_rpi_update+0x40>
		value |= BIT(regbit);
10005578:	4663      	mov	r3, ip
1000557a:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
1000557c:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
1000557e:	2e02      	cmp	r6, #2
10005580:	d009      	beq.n	10005596 <reset_rpi_update+0x5a>
10005582:	2e04      	cmp	r6, #4
10005584:	d00c      	beq.n	100055a0 <reset_rpi_update+0x64>
10005586:	2e01      	cmp	r6, #1
10005588:	d10e      	bne.n	100055a8 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000558a:	b2a4      	uxth	r4, r4
1000558c:	b2db      	uxtb	r3, r3
1000558e:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005590:	7023      	strb	r3, [r4, #0]
}
10005592:	b005      	add	sp, #20
10005594:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10005596:	b2a4      	uxth	r4, r4
10005598:	b29b      	uxth	r3, r3
1000559a:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
1000559c:	8023      	strh	r3, [r4, #0]
}
1000559e:	e7f8      	b.n	10005592 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
100055a0:	b2a4      	uxth	r4, r4
100055a2:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
100055a4:	6023      	str	r3, [r4, #0]
}
100055a6:	e7f4      	b.n	10005592 <reset_rpi_update+0x56>
	switch (config->reg_width) {
100055a8:	2016      	movs	r0, #22
100055aa:	4240      	negs	r0, r0
100055ac:	e7f1      	b.n	10005592 <reset_rpi_update+0x56>

100055ae <reset_rpi_line_assert>:
{
100055ae:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
100055b0:	2201      	movs	r2, #1
100055b2:	f7ff ffc3 	bl	1000553c <reset_rpi_update>
}
100055b6:	bd10      	pop	{r4, pc}

100055b8 <reset_rpi_line_deassert>:
{
100055b8:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
100055ba:	2200      	movs	r2, #0
100055bc:	f7ff ffbe 	bl	1000553c <reset_rpi_update>
}
100055c0:	bd10      	pop	{r4, pc}

100055c2 <reset_rpi_line_toggle>:
{
100055c2:	b570      	push	{r4, r5, r6, lr}
100055c4:	0004      	movs	r4, r0
100055c6:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
100055c8:	f7ff fff1 	bl	100055ae <reset_rpi_line_assert>
	if (ret) {
100055cc:	2800      	cmp	r0, #0
100055ce:	d103      	bne.n	100055d8 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
100055d0:	0029      	movs	r1, r5
100055d2:	0020      	movs	r0, r4
100055d4:	f7ff fff0 	bl	100055b8 <reset_rpi_line_deassert>
}
100055d8:	bd70      	pop	{r4, r5, r6, pc}

100055da <reset_rpi_status>:
{
100055da:	0003      	movs	r3, r0
100055dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
100055de:	685e      	ldr	r6, [r3, #4]
{
100055e0:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100055e2:	7931      	ldrb	r1, [r6, #4]
{
100055e4:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
100055e6:	00c9      	lsls	r1, r1, #3
100055e8:	f7fa fe2e 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100055ec:	aa01      	add	r2, sp, #4
100055ee:	000d      	movs	r5, r1
100055f0:	b281      	uxth	r1, r0
100055f2:	0030      	movs	r0, r6
100055f4:	f7ff ff8a 	bl	1000550c <reset_rpi_read_register.isra.0>
	if (ret) {
100055f8:	2800      	cmp	r0, #0
100055fa:	d109      	bne.n	10005610 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
100055fc:	9b01      	ldr	r3, [sp, #4]
100055fe:	b2ed      	uxtb	r5, r5
10005600:	40eb      	lsrs	r3, r5
10005602:	2201      	movs	r2, #1
10005604:	439a      	bics	r2, r3
10005606:	7973      	ldrb	r3, [r6, #5]
10005608:	4259      	negs	r1, r3
1000560a:	414b      	adcs	r3, r1
1000560c:	4053      	eors	r3, r2
1000560e:	7023      	strb	r3, [r4, #0]
}
10005610:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10005612 <uart_rpi_poll_in>:
{
10005612:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005614:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005616:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005618:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000561a:	699c      	ldr	r4, [r3, #24]
1000561c:	0020      	movs	r0, r4
1000561e:	4010      	ands	r0, r2
10005620:	4214      	tst	r4, r2
10005622:	d102      	bne.n	1000562a <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10005624:	681b      	ldr	r3, [r3, #0]
10005626:	700b      	strb	r3, [r1, #0]
}
10005628:	bd10      	pop	{r4, pc}
		return -1;
1000562a:	2001      	movs	r0, #1
1000562c:	4240      	negs	r0, r0
1000562e:	e7fb      	b.n	10005628 <uart_rpi_poll_in+0x16>

10005630 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005630:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005632:	6843      	ldr	r3, [r0, #4]
10005634:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005636:	6998      	ldr	r0, [r3, #24]
10005638:	4210      	tst	r0, r2
1000563a:	d1fc      	bne.n	10005636 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
1000563c:	6019      	str	r1, [r3, #0]
}
1000563e:	4770      	bx	lr

10005640 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005640:	6843      	ldr	r3, [r0, #4]
10005642:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10005644:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10005646:	0518      	lsls	r0, r3, #20
10005648:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000564a:	055a      	lsls	r2, r3, #21
1000564c:	d501      	bpl.n	10005652 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
1000564e:	2208      	movs	r2, #8
10005650:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10005652:	059a      	lsls	r2, r3, #22
10005654:	d501      	bpl.n	1000565a <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10005656:	2202      	movs	r2, #2
10005658:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000565a:	05db      	lsls	r3, r3, #23
1000565c:	d501      	bpl.n	10005662 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
1000565e:	2304      	movs	r3, #4
10005660:	4318      	orrs	r0, r3
}
10005662:	4770      	bx	lr

10005664 <uart_rpi_fifo_fill>:
{
10005664:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005666:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005668:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000566a:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000566c:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000566e:	699c      	ldr	r4, [r3, #24]
10005670:	422c      	tst	r4, r5
10005672:	d102      	bne.n	1000567a <uart_rpi_fifo_fill+0x16>
10005674:	1a14      	subs	r4, r2, r0
10005676:	2c00      	cmp	r4, #0
10005678:	dc00      	bgt.n	1000567c <uart_rpi_fifo_fill+0x18>
}
1000567a:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
1000567c:	5c0c      	ldrb	r4, [r1, r0]
1000567e:	3001      	adds	r0, #1
10005680:	601c      	str	r4, [r3, #0]
10005682:	e7f4      	b.n	1000566e <uart_rpi_fifo_fill+0xa>

10005684 <uart_rpi_fifo_read>:
{
10005684:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005686:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005688:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000568a:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000568c:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000568e:	699c      	ldr	r4, [r3, #24]
10005690:	422c      	tst	r4, r5
10005692:	d102      	bne.n	1000569a <uart_rpi_fifo_read+0x16>
10005694:	1a14      	subs	r4, r2, r0
10005696:	2c00      	cmp	r4, #0
10005698:	dc00      	bgt.n	1000569c <uart_rpi_fifo_read+0x18>
}
1000569a:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
1000569c:	681c      	ldr	r4, [r3, #0]
1000569e:	540c      	strb	r4, [r1, r0]
100056a0:	3001      	adds	r0, #1
100056a2:	e7f4      	b.n	1000568e <uart_rpi_fifo_read+0xa>

100056a4 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100056a4:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100056a6:	6843      	ldr	r3, [r0, #4]
100056a8:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100056aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
100056ac:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100056ae:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100056b0:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100056b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100056b4:	438a      	bics	r2, r1
100056b6:	635a      	str	r2, [r3, #52]	; 0x34
}
100056b8:	4770      	bx	lr

100056ba <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100056ba:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100056bc:	6843      	ldr	r3, [r0, #4]
100056be:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100056c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100056c2:	438b      	bics	r3, r1
100056c4:	6393      	str	r3, [r2, #56]	; 0x38
}
100056c6:	4770      	bx	lr

100056c8 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100056c8:	6843      	ldr	r3, [r0, #4]
100056ca:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
100056cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
100056ce:	0680      	lsls	r0, r0, #26
100056d0:	0fc0      	lsrs	r0, r0, #31
}
100056d2:	4770      	bx	lr

100056d4 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100056d4:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100056d6:	6843      	ldr	r3, [r0, #4]
100056d8:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100056da:	6b99      	ldr	r1, [r3, #56]	; 0x38
100056dc:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100056de:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100056e0:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100056e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100056e4:	438a      	bics	r2, r1
100056e6:	635a      	str	r2, [r3, #52]	; 0x34
}
100056e8:	4770      	bx	lr

100056ea <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100056ea:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100056ec:	6843      	ldr	r3, [r0, #4]
100056ee:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100056f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100056f2:	438b      	bics	r3, r1
100056f4:	6393      	str	r3, [r2, #56]	; 0x38
}
100056f6:	4770      	bx	lr

100056f8 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100056f8:	6843      	ldr	r3, [r0, #4]
100056fa:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100056fc:	6998      	ldr	r0, [r3, #24]
100056fe:	0600      	lsls	r0, r0, #24
10005700:	0fc0      	lsrs	r0, r0, #31
}
10005702:	4770      	bx	lr

10005704 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005704:	6843      	ldr	r3, [r0, #4]
10005706:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10005708:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000570a:	06c0      	lsls	r0, r0, #27
1000570c:	0fc0      	lsrs	r0, r0, #31
}
1000570e:	4770      	bx	lr

10005710 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005710:	6843      	ldr	r3, [r0, #4]
10005712:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005714:	23f8      	movs	r3, #248	; 0xf8
10005716:	6b91      	ldr	r1, [r2, #56]	; 0x38
10005718:	00db      	lsls	r3, r3, #3
1000571a:	430b      	orrs	r3, r1
1000571c:	6393      	str	r3, [r2, #56]	; 0x38
}
1000571e:	4770      	bx	lr

10005720 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10005720:	b510      	push	{r4, lr}
10005722:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10005724:	f7ff ffee 	bl	10005704 <uart_rpi_irq_rx_ready>
10005728:	0003      	movs	r3, r0
1000572a:	2001      	movs	r0, #1
1000572c:	2b00      	cmp	r3, #0
1000572e:	d104      	bne.n	1000573a <uart_rpi_irq_is_pending+0x1a>
10005730:	0020      	movs	r0, r4
10005732:	f7ff ffc9 	bl	100056c8 <uart_rpi_irq_tx_ready>
10005736:	1e43      	subs	r3, r0, #1
10005738:	4198      	sbcs	r0, r3
}
1000573a:	bd10      	pop	{r4, pc}

1000573c <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
1000573c:	2001      	movs	r0, #1
1000573e:	4770      	bx	lr

10005740 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10005740:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10005742:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10005744:	60da      	str	r2, [r3, #12]
}
10005746:	4770      	bx	lr

10005748 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10005748:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
1000574a:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
1000574c:	6893      	ldr	r3, [r2, #8]
1000574e:	2b00      	cmp	r3, #0
10005750:	d001      	beq.n	10005756 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10005752:	68d1      	ldr	r1, [r2, #12]
10005754:	4798      	blx	r3
	}
}
10005756:	bd10      	pop	{r4, pc}

10005758 <uart_rpi_config_get>:
{
10005758:	0003      	movs	r3, r0
1000575a:	b510      	push	{r4, lr}
1000575c:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
1000575e:	2208      	movs	r2, #8
10005760:	6919      	ldr	r1, [r3, #16]
10005762:	f7ff fbc3 	bl	10004eec <memcpy>
}
10005766:	2000      	movs	r0, #0
10005768:	bd10      	pop	{r4, pc}

1000576a <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
1000576a:	b510      	push	{r4, lr}
1000576c:	2200      	movs	r2, #0
1000576e:	2103      	movs	r1, #3
10005770:	2014      	movs	r0, #20
10005772:	f7fc fd03 	bl	1000217c <z_arm_irq_priority_set>
10005776:	2014      	movs	r0, #20
10005778:	f7fc fcf4 	bl	10002164 <arch_irq_enable>
1000577c:	bd10      	pop	{r4, pc}

1000577e <uart_rpi_configure>:
{
1000577e:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10005780:	6843      	ldr	r3, [r0, #4]
{
10005782:	0006      	movs	r6, r0
10005784:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10005786:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10005788:	6809      	ldr	r1, [r1, #0]
1000578a:	6818      	ldr	r0, [r3, #0]
1000578c:	f7fd fdea 	bl	10003364 <uart_set_baudrate>
	if (baudrate == 0) {
10005790:	2800      	cmp	r0, #0
10005792:	d102      	bne.n	1000579a <uart_rpi_configure+0x1c>
		return -EINVAL;
10005794:	2016      	movs	r0, #22
10005796:	4240      	negs	r0, r0
}
10005798:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
1000579a:	79a3      	ldrb	r3, [r4, #6]
1000579c:	7962      	ldrb	r2, [r4, #5]
1000579e:	7921      	ldrb	r1, [r4, #4]
100057a0:	6870      	ldr	r0, [r6, #4]
100057a2:	f7fd fa93 	bl	10002ccc <uart_rpi_set_format.isra.0>
100057a6:	2800      	cmp	r0, #0
100057a8:	d1f4      	bne.n	10005794 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
100057aa:	cc06      	ldmia	r4!, {r1, r2}
100057ac:	c506      	stmia	r5!, {r1, r2}
	return 0;
100057ae:	e7f3      	b.n	10005798 <uart_rpi_configure+0x1a>

100057b0 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
100057b0:	2301      	movs	r3, #1
100057b2:	22d0      	movs	r2, #208	; 0xd0
100057b4:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
100057b6:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
100057b8:	0612      	lsls	r2, r2, #24
100057ba:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100057bc:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
100057be:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100057c0:	f7fd fd40 	bl	10003244 <gpio_set_function>
}
100057c4:	bd10      	pop	{r4, pc}

100057c6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
100057c6:	4770      	bx	lr

100057c8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
100057c8:	2800      	cmp	r0, #0
100057ca:	d009      	beq.n	100057e0 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
100057cc:	2301      	movs	r3, #1
100057ce:	68c2      	ldr	r2, [r0, #12]
100057d0:	2000      	movs	r0, #0
100057d2:	7851      	ldrb	r1, [r2, #1]
100057d4:	4219      	tst	r1, r3
100057d6:	d002      	beq.n	100057de <z_device_is_ready+0x16>
100057d8:	7810      	ldrb	r0, [r2, #0]
100057da:	4242      	negs	r2, r0
100057dc:	4150      	adcs	r0, r2
100057de:	4018      	ands	r0, r3
}
100057e0:	4770      	bx	lr

100057e2 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
100057e2:	f3ef 8310 	mrs	r3, PRIMASK
100057e6:	b672      	cpsid	i
	for (;;) {
100057e8:	e7fe      	b.n	100057e8 <arch_system_halt+0x6>

100057ea <z_early_memset>:
{
100057ea:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
100057ec:	f7ff fb87 	bl	10004efe <memset>
}
100057f0:	bd10      	pop	{r4, pc}

100057f2 <z_early_memcpy>:
{
100057f2:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
100057f4:	f7ff fb7a 	bl	10004eec <memcpy>
}
100057f8:	bd10      	pop	{r4, pc}

100057fa <k_is_in_isr>:
100057fa:	f3ef 8005 	mrs	r0, IPSR
	return (__get_IPSR()) ? (true) : (false);
100057fe:	1e43      	subs	r3, r0, #1
10005800:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
10005802:	b2c0      	uxtb	r0, r0
}
10005804:	4770      	bx	lr

10005806 <z_impl_k_thread_name_set>:
	return -ENOSYS;
10005806:	2058      	movs	r0, #88	; 0x58
}
10005808:	4240      	negs	r0, r0
1000580a:	4770      	bx	lr

1000580c <k_thread_name_get>:
}
1000580c:	2000      	movs	r0, #0
1000580e:	4770      	bx	lr

10005810 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10005810:	b510      	push	{r4, lr}
10005812:	f3ef 8310 	mrs	r3, PRIMASK
10005816:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10005818:	f7fc fc38 	bl	1000208c <arch_cpu_idle>
1000581c:	e7f9      	b.n	10005812 <idle+0x2>

1000581e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
1000581e:	220e      	movs	r2, #14
static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
10005820:	b510      	push	{r4, lr}
	if (mutex->owner->base.prio != new_prio) {
10005822:	5682      	ldrsb	r2, [r0, r2]
	return false;
10005824:	2300      	movs	r3, #0
	if (mutex->owner->base.prio != new_prio) {
10005826:	428a      	cmp	r2, r1
10005828:	d002      	beq.n	10005830 <adjust_owner_prio.isra.0+0x12>
		return z_set_prio(mutex->owner, new_prio);
1000582a:	f7fe fa79 	bl	10003d20 <z_set_prio>
1000582e:	0003      	movs	r3, r0
}
10005830:	0018      	movs	r0, r3
10005832:	bd10      	pop	{r4, pc}

10005834 <z_impl_k_mutex_init>:
{
10005834:	0003      	movs	r3, r0
	mutex->owner = NULL;
10005836:	2000      	movs	r0, #0
10005838:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
1000583a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
1000583c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
1000583e:	605b      	str	r3, [r3, #4]
}
10005840:	4770      	bx	lr

10005842 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10005842:	2a00      	cmp	r2, #0
10005844:	d007      	beq.n	10005856 <z_impl_k_sem_init+0x14>
10005846:	428a      	cmp	r2, r1
10005848:	d305      	bcc.n	10005856 <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
1000584a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
1000584c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
1000584e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10005850:	6040      	str	r0, [r0, #4]
	return 0;
10005852:	2000      	movs	r0, #0
}
10005854:	4770      	bx	lr
		return -EINVAL;
10005856:	2016      	movs	r0, #22
10005858:	4240      	negs	r0, r0
1000585a:	e7fb      	b.n	10005854 <z_impl_k_sem_init+0x12>

1000585c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
1000585c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000585e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005860:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005862:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005864:	2300      	movs	r3, #0
10005866:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005868:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
1000586a:	4770      	bx	lr

1000586c <unpend_thread_no_timeout>:
{
1000586c:	b510      	push	{r4, lr}
1000586e:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10005870:	f7ff fff4 	bl	1000585c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005874:	2202      	movs	r2, #2
10005876:	7b63      	ldrb	r3, [r4, #13]
10005878:	4393      	bics	r3, r2
1000587a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
1000587c:	2300      	movs	r3, #0
1000587e:	60a3      	str	r3, [r4, #8]
}
10005880:	bd10      	pop	{r4, pc}

10005882 <add_to_waitq_locked>:
{
10005882:	b570      	push	{r4, r5, r6, lr}
10005884:	0004      	movs	r4, r0
10005886:	000d      	movs	r5, r1
	unready_thread(thread);
10005888:	f7fe f9da 	bl	10003c40 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
1000588c:	2302      	movs	r3, #2
1000588e:	7b62      	ldrb	r2, [r4, #13]
10005890:	4313      	orrs	r3, r2
10005892:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10005894:	2d00      	cmp	r5, #0
10005896:	d01c      	beq.n	100058d2 <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
10005898:	60a5      	str	r5, [r4, #8]
	return list->head == list;
1000589a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000589c:	429d      	cmp	r5, r3
1000589e:	d109      	bne.n	100058b4 <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
100058a0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
100058a2:	6025      	str	r5, [r4, #0]
	node->prev = tail;
100058a4:	6063      	str	r3, [r4, #4]
	tail->next = node;
100058a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
100058a8:	606c      	str	r4, [r5, #4]
}
100058aa:	e012      	b.n	100058d2 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
100058ac:	686a      	ldr	r2, [r5, #4]
100058ae:	4293      	cmp	r3, r2
100058b0:	d0f6      	beq.n	100058a0 <add_to_waitq_locked+0x1e>
100058b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100058b4:	2b00      	cmp	r3, #0
100058b6:	d0f3      	beq.n	100058a0 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
100058b8:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
100058ba:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
100058bc:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
100058be:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
100058c0:	428a      	cmp	r2, r1
100058c2:	d0f3      	beq.n	100058ac <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
100058c4:	4291      	cmp	r1, r2
100058c6:	ddf1      	ble.n	100058ac <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
100058c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
100058ca:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100058cc:	6062      	str	r2, [r4, #4]
	prev->next = node;
100058ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
100058d0:	605c      	str	r4, [r3, #4]
}
100058d2:	bd70      	pop	{r4, r5, r6, pc}

100058d4 <z_ready_thread>:
{
100058d4:	b510      	push	{r4, lr}
100058d6:	f3ef 8410 	mrs	r4, PRIMASK
100058da:	b672      	cpsid	i
			ready_thread(thread);
100058dc:	f7fe f97a 	bl	10003bd4 <ready_thread>
	if (key != 0U) {
100058e0:	2c00      	cmp	r4, #0
100058e2:	d102      	bne.n	100058ea <z_ready_thread+0x16>
	__asm__ volatile(
100058e4:	b662      	cpsie	i
100058e6:	f3bf 8f6f 	isb	sy
}
100058ea:	bd10      	pop	{r4, pc}

100058ec <z_unpend_thread_no_timeout>:
{
100058ec:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100058ee:	f3ef 8410 	mrs	r4, PRIMASK
100058f2:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
100058f4:	6883      	ldr	r3, [r0, #8]
100058f6:	2b00      	cmp	r3, #0
100058f8:	d001      	beq.n	100058fe <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
100058fa:	f7ff ffb7 	bl	1000586c <unpend_thread_no_timeout>
	if (key != 0U) {
100058fe:	2c00      	cmp	r4, #0
10005900:	d102      	bne.n	10005908 <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
10005902:	b662      	cpsie	i
10005904:	f3bf 8f6f 	isb	sy
}
10005908:	bd10      	pop	{r4, pc}

1000590a <z_sched_wake_thread>:
{
1000590a:	b570      	push	{r4, r5, r6, lr}
1000590c:	0004      	movs	r4, r0
1000590e:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10005910:	f3ef 8510 	mrs	r5, PRIMASK
10005914:	b672      	cpsid	i
		if (!killed) {
10005916:	2328      	movs	r3, #40	; 0x28
10005918:	7b42      	ldrb	r2, [r0, #13]
1000591a:	421a      	tst	r2, r3
1000591c:	d10e      	bne.n	1000593c <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
1000591e:	6883      	ldr	r3, [r0, #8]
10005920:	2b00      	cmp	r3, #0
10005922:	d001      	beq.n	10005928 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10005924:	f7ff ffa2 	bl	1000586c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005928:	2204      	movs	r2, #4
1000592a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
1000592c:	2e00      	cmp	r6, #0
1000592e:	d000      	beq.n	10005932 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10005930:	2214      	movs	r2, #20
10005932:	4393      	bics	r3, r2
			ready_thread(thread);
10005934:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005936:	7363      	strb	r3, [r4, #13]
10005938:	f7fe f94c 	bl	10003bd4 <ready_thread>
	if (key != 0U) {
1000593c:	2d00      	cmp	r5, #0
1000593e:	d102      	bne.n	10005946 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10005940:	b662      	cpsie	i
10005942:	f3bf 8f6f 	isb	sy
}
10005946:	bd70      	pop	{r4, r5, r6, pc}

10005948 <z_thread_timeout>:
{
10005948:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
1000594a:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
1000594c:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
1000594e:	f7ff ffdc 	bl	1000590a <z_sched_wake_thread>
}
10005952:	bd10      	pop	{r4, pc}

10005954 <z_unpend1_no_timeout>:
{
10005954:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005956:	f3ef 8510 	mrs	r5, PRIMASK
1000595a:	b672      	cpsid	i
	return list->head == list;
1000595c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000595e:	42a0      	cmp	r0, r4
10005960:	d00b      	beq.n	1000597a <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
10005962:	2c00      	cmp	r4, #0
10005964:	d002      	beq.n	1000596c <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
10005966:	0020      	movs	r0, r4
10005968:	f7ff ff80 	bl	1000586c <unpend_thread_no_timeout>
	if (key != 0U) {
1000596c:	2d00      	cmp	r5, #0
1000596e:	d102      	bne.n	10005976 <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
10005970:	b662      	cpsie	i
10005972:	f3bf 8f6f 	isb	sy
}
10005976:	0020      	movs	r0, r4
10005978:	bd70      	pop	{r4, r5, r6, pc}
1000597a:	2400      	movs	r4, #0
1000597c:	e7f6      	b.n	1000596c <z_unpend1_no_timeout+0x18>

1000597e <z_unpend_first_thread>:
{
1000597e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005980:	f3ef 8510 	mrs	r5, PRIMASK
10005984:	b672      	cpsid	i
	return list->head == list;
10005986:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005988:	42a0      	cmp	r0, r4
1000598a:	d00f      	beq.n	100059ac <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
1000598c:	2c00      	cmp	r4, #0
1000598e:	d006      	beq.n	1000599e <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
10005990:	0020      	movs	r0, r4
10005992:	f7ff ff6b 	bl	1000586c <unpend_thread_no_timeout>
10005996:	0020      	movs	r0, r4
10005998:	3018      	adds	r0, #24
1000599a:	f000 f81e 	bl	100059da <z_abort_timeout>
	if (key != 0U) {
1000599e:	2d00      	cmp	r5, #0
100059a0:	d102      	bne.n	100059a8 <z_unpend_first_thread+0x2a>
	__asm__ volatile(
100059a2:	b662      	cpsie	i
100059a4:	f3bf 8f6f 	isb	sy
}
100059a8:	0020      	movs	r0, r4
100059aa:	bd70      	pop	{r4, r5, r6, pc}
100059ac:	2400      	movs	r4, #0
100059ae:	e7f6      	b.n	1000599e <z_unpend_first_thread+0x20>

100059b0 <z_reschedule_irqlock>:
{
100059b0:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100059b2:	2800      	cmp	r0, #0
100059b4:	d105      	bne.n	100059c2 <z_reschedule_irqlock+0x12>
100059b6:	f3ef 8005 	mrs	r0, IPSR
100059ba:	2800      	cmp	r0, #0
100059bc:	d102      	bne.n	100059c4 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
100059be:	f7fc fc1f 	bl	10002200 <arch_swap>
}
100059c2:	bd10      	pop	{r4, pc}
100059c4:	b662      	cpsie	i
100059c6:	f3bf 8f6f 	isb	sy
100059ca:	e7fa      	b.n	100059c2 <z_reschedule_irqlock+0x12>

100059cc <z_reschedule_unlocked>:
{
100059cc:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100059ce:	f3ef 8010 	mrs	r0, PRIMASK
100059d2:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
100059d4:	f7ff ffec 	bl	100059b0 <z_reschedule_irqlock>
}
100059d8:	bd10      	pop	{r4, pc}

100059da <z_abort_timeout>:
{
100059da:	b510      	push	{r4, lr}
100059dc:	f3ef 8410 	mrs	r4, PRIMASK
100059e0:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
100059e2:	6803      	ldr	r3, [r0, #0]
100059e4:	2b00      	cmp	r3, #0
100059e6:	d008      	beq.n	100059fa <z_abort_timeout+0x20>
			remove_timeout(to);
100059e8:	f7fe fbb0 	bl	1000414c <remove_timeout>
			ret = 0;
100059ec:	2000      	movs	r0, #0
	if (key != 0U) {
100059ee:	2c00      	cmp	r4, #0
100059f0:	d102      	bne.n	100059f8 <z_abort_timeout+0x1e>
	__asm__ volatile(
100059f2:	b662      	cpsie	i
100059f4:	f3bf 8f6f 	isb	sy
}
100059f8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
100059fa:	2016      	movs	r0, #22
100059fc:	4240      	negs	r0, r0
100059fe:	e7f6      	b.n	100059ee <z_abort_timeout+0x14>

10005a00 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10005a00:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10005a02:	f7fe fc9b 	bl	1000433c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10005a06:	bd10      	pop	{r4, pc}

10005a08 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
10005a08:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
10005a0a:	f7fe fc97 	bl	1000433c <sys_clock_tick_get>
}
10005a0e:	bd10      	pop	{r4, pc}

10005a10 <k_timer_init>:
	timer->stop_fn = stop_fn;
10005a10:	6242      	str	r2, [r0, #36]	; 0x24
	sys_dlist_init(&w->waitq);
10005a12:	0002      	movs	r2, r0
	timer->status = 0U;
10005a14:	2300      	movs	r3, #0
10005a16:	3218      	adds	r2, #24
	timer->expiry_fn = expiry_fn;
10005a18:	6201      	str	r1, [r0, #32]
	timer->status = 0U;
10005a1a:	6303      	str	r3, [r0, #48]	; 0x30
	list->head = (sys_dnode_t *)list;
10005a1c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
10005a1e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
10005a20:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005a22:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
10005a24:	6343      	str	r3, [r0, #52]	; 0x34
}
10005a26:	4770      	bx	lr

10005a28 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
10005a28:	b510      	push	{r4, lr}
10005a2a:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
10005a2c:	f7ff ffd5 	bl	100059da <z_abort_timeout>

	if (inactive) {
10005a30:	2800      	cmp	r0, #0
10005a32:	d111      	bne.n	10005a58 <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
10005a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005a36:	2b00      	cmp	r3, #0
10005a38:	d001      	beq.n	10005a3e <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
10005a3a:	0020      	movs	r0, r4
10005a3c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
10005a3e:	0020      	movs	r0, r4
10005a40:	3018      	adds	r0, #24
10005a42:	f7ff ff87 	bl	10005954 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
10005a46:	2800      	cmp	r0, #0
10005a48:	d006      	beq.n	10005a58 <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
10005a4a:	f7ff ff43 	bl	100058d4 <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
10005a4e:	f3ef 8010 	mrs	r0, PRIMASK
10005a52:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005a54:	f7ff ffac 	bl	100059b0 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
10005a58:	bd10      	pop	{r4, pc}

10005a5a <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
10005a5a:	0003      	movs	r3, r0
10005a5c:	f3ef 8210 	mrs	r2, PRIMASK
10005a60:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005a62:	6800      	ldr	r0, [r0, #0]
	*target += value;
10005a64:	1841      	adds	r1, r0, r1
10005a66:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005a68:	2a00      	cmp	r2, #0
10005a6a:	d102      	bne.n	10005a72 <z_impl_atomic_add+0x18>
	__asm__ volatile(
10005a6c:	b662      	cpsie	i
10005a6e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005a72:	4770      	bx	lr

10005a74 <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
10005a74:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005a76:	f3ef 8210 	mrs	r2, PRIMASK
10005a7a:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005a7c:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10005a7e:	1a41      	subs	r1, r0, r1
10005a80:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005a82:	2a00      	cmp	r2, #0
10005a84:	d102      	bne.n	10005a8c <z_impl_atomic_sub+0x18>
	__asm__ volatile(
10005a86:	b662      	cpsie	i
10005a88:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005a8c:	4770      	bx	lr

10005a8e <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
10005a8e:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005a90:	f3ef 8210 	mrs	r2, PRIMASK
10005a94:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005a96:	6800      	ldr	r0, [r0, #0]
	*target = value;
10005a98:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005a9a:	2a00      	cmp	r2, #0
10005a9c:	d102      	bne.n	10005aa4 <z_impl_atomic_set+0x16>
	__asm__ volatile(
10005a9e:	b662      	cpsie	i
10005aa0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005aa4:	4770      	bx	lr

10005aa6 <k_heap_init>:
10005aa6:	0003      	movs	r3, r0
{
10005aa8:	b510      	push	{r4, lr}
10005aaa:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
10005aac:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
10005aae:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
10005ab0:	f7fe fe4d 	bl	1000474e <sys_heap_init>
}
10005ab4:	bd10      	pop	{r4, pc}
	...
