
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000fa0 10003565 10005487 10003521     ... e5...T..!5..
	...
1000012c:	1000335d 00000000 00000000 100032fd     ]3...........2..
1000013c:	10003d7d                                }=..

10000140 <_irq_vector_table>:
10000140:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
10000150:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
10000160:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
10000170:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
10000180:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
10000190:	100033cd 100033cd 100033cd 100033cd     .3...3...3...3..
100001a0:	100033cd 100033cd                       .3...3..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__aeabi_cdrcmple>:
10000260:	4684      	mov	ip, r0
10000262:	0010      	movs	r0, r2
10000264:	4662      	mov	r2, ip
10000266:	468c      	mov	ip, r1
10000268:	0019      	movs	r1, r3
1000026a:	4663      	mov	r3, ip
1000026c:	e000      	b.n	10000270 <__aeabi_cdcmpeq>
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_cdcmpeq>:
10000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000272:	f000 fd77 	bl	10000d64 <__ledf2>
10000276:	2800      	cmp	r0, #0
10000278:	d401      	bmi.n	1000027e <__aeabi_cdcmpeq+0xe>
1000027a:	2100      	movs	r1, #0
1000027c:	42c8      	cmn	r0, r1
1000027e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000280 <__aeabi_dcmpeq>:
10000280:	b510      	push	{r4, lr}
10000282:	f000 fcb7 	bl	10000bf4 <__eqdf2>
10000286:	4240      	negs	r0, r0
10000288:	3001      	adds	r0, #1
1000028a:	bd10      	pop	{r4, pc}

1000028c <__aeabi_dcmplt>:
1000028c:	b510      	push	{r4, lr}
1000028e:	f000 fd69 	bl	10000d64 <__ledf2>
10000292:	2800      	cmp	r0, #0
10000294:	db01      	blt.n	1000029a <__aeabi_dcmplt+0xe>
10000296:	2000      	movs	r0, #0
10000298:	bd10      	pop	{r4, pc}
1000029a:	2001      	movs	r0, #1
1000029c:	bd10      	pop	{r4, pc}
1000029e:	46c0      	nop			; (mov r8, r8)

100002a0 <__aeabi_dcmple>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fd5f 	bl	10000d64 <__ledf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	dd01      	ble.n	100002ae <__aeabi_dcmple+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmpgt>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fcdf 	bl	10000c78 <__gedf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	dc01      	bgt.n	100002c2 <__aeabi_dcmpgt+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_dcmpge>:
100002c8:	b510      	push	{r4, lr}
100002ca:	f000 fcd5 	bl	10000c78 <__gedf2>
100002ce:	2800      	cmp	r0, #0
100002d0:	da01      	bge.n	100002d6 <__aeabi_dcmpge+0xe>
100002d2:	2000      	movs	r0, #0
100002d4:	bd10      	pop	{r4, pc}
100002d6:	2001      	movs	r0, #1
100002d8:	bd10      	pop	{r4, pc}
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__clzsi2>:
100002dc:	211c      	movs	r1, #28
100002de:	2301      	movs	r3, #1
100002e0:	041b      	lsls	r3, r3, #16
100002e2:	4298      	cmp	r0, r3
100002e4:	d301      	bcc.n	100002ea <__clzsi2+0xe>
100002e6:	0c00      	lsrs	r0, r0, #16
100002e8:	3910      	subs	r1, #16
100002ea:	0a1b      	lsrs	r3, r3, #8
100002ec:	4298      	cmp	r0, r3
100002ee:	d301      	bcc.n	100002f4 <__clzsi2+0x18>
100002f0:	0a00      	lsrs	r0, r0, #8
100002f2:	3908      	subs	r1, #8
100002f4:	091b      	lsrs	r3, r3, #4
100002f6:	4298      	cmp	r0, r3
100002f8:	d301      	bcc.n	100002fe <__clzsi2+0x22>
100002fa:	0900      	lsrs	r0, r0, #4
100002fc:	3904      	subs	r1, #4
100002fe:	a202      	add	r2, pc, #8	; (adr r2, 10000308 <__clzsi2+0x2c>)
10000300:	5c10      	ldrb	r0, [r2, r0]
10000302:	1840      	adds	r0, r0, r1
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)
10000308:	02020304 	.word	0x02020304
1000030c:	01010101 	.word	0x01010101
	...

10000318 <__ctzsi2>:
10000318:	4241      	negs	r1, r0
1000031a:	4008      	ands	r0, r1
1000031c:	211c      	movs	r1, #28
1000031e:	2301      	movs	r3, #1
10000320:	041b      	lsls	r3, r3, #16
10000322:	4298      	cmp	r0, r3
10000324:	d301      	bcc.n	1000032a <__ctzsi2+0x12>
10000326:	0c00      	lsrs	r0, r0, #16
10000328:	3910      	subs	r1, #16
1000032a:	0a1b      	lsrs	r3, r3, #8
1000032c:	4298      	cmp	r0, r3
1000032e:	d301      	bcc.n	10000334 <__ctzsi2+0x1c>
10000330:	0a00      	lsrs	r0, r0, #8
10000332:	3908      	subs	r1, #8
10000334:	091b      	lsrs	r3, r3, #4
10000336:	4298      	cmp	r0, r3
10000338:	d301      	bcc.n	1000033e <__ctzsi2+0x26>
1000033a:	0900      	lsrs	r0, r0, #4
1000033c:	3904      	subs	r1, #4
1000033e:	a202      	add	r2, pc, #8	; (adr r2, 10000348 <__ctzsi2+0x30>)
10000340:	5c10      	ldrb	r0, [r2, r0]
10000342:	1a40      	subs	r0, r0, r1
10000344:	4770      	bx	lr
10000346:	46c0      	nop			; (mov r8, r8)
10000348:	1d1d1c1b 	.word	0x1d1d1c1b
1000034c:	1e1e1e1e 	.word	0x1e1e1e1e
10000350:	1f1f1f1f 	.word	0x1f1f1f1f
10000354:	1f1f1f1f 	.word	0x1f1f1f1f

10000358 <__aeabi_uldivmod>:
10000358:	2b00      	cmp	r3, #0
1000035a:	d111      	bne.n	10000380 <__aeabi_uldivmod+0x28>
1000035c:	2a00      	cmp	r2, #0
1000035e:	d10f      	bne.n	10000380 <__aeabi_uldivmod+0x28>
10000360:	2900      	cmp	r1, #0
10000362:	d100      	bne.n	10000366 <__aeabi_uldivmod+0xe>
10000364:	2800      	cmp	r0, #0
10000366:	d002      	beq.n	1000036e <__aeabi_uldivmod+0x16>
10000368:	2100      	movs	r1, #0
1000036a:	43c9      	mvns	r1, r1
1000036c:	0008      	movs	r0, r1
1000036e:	b407      	push	{r0, r1, r2}
10000370:	4802      	ldr	r0, [pc, #8]	; (1000037c <__aeabi_uldivmod+0x24>)
10000372:	a102      	add	r1, pc, #8	; (adr r1, 1000037c <__aeabi_uldivmod+0x24>)
10000374:	1840      	adds	r0, r0, r1
10000376:	9002      	str	r0, [sp, #8]
10000378:	bd03      	pop	{r0, r1, pc}
1000037a:	46c0      	nop			; (mov r8, r8)
1000037c:	fffffee1 	.word	0xfffffee1
10000380:	b403      	push	{r0, r1}
10000382:	4668      	mov	r0, sp
10000384:	b501      	push	{r0, lr}
10000386:	9802      	ldr	r0, [sp, #8]
10000388:	f001 fc2b 	bl	10001be2 <__udivmoddi4>
1000038c:	9b01      	ldr	r3, [sp, #4]
1000038e:	469e      	mov	lr, r3
10000390:	b002      	add	sp, #8
10000392:	bc0c      	pop	{r2, r3}
10000394:	4770      	bx	lr
10000396:	46c0      	nop			; (mov r8, r8)

10000398 <__aeabi_f2ulz>:
10000398:	b5d0      	push	{r4, r6, r7, lr}
1000039a:	f001 fab9 	bl	10001910 <__aeabi_f2d>
1000039e:	2200      	movs	r2, #0
100003a0:	4b0b      	ldr	r3, [pc, #44]	; (100003d0 <__aeabi_f2ulz+0x38>)
100003a2:	0006      	movs	r6, r0
100003a4:	000f      	movs	r7, r1
100003a6:	f000 fd55 	bl	10000e54 <__aeabi_dmul>
100003aa:	f001 fba3 	bl	10001af4 <__aeabi_d2uiz>
100003ae:	0004      	movs	r4, r0
100003b0:	f001 fa8e 	bl	100018d0 <__aeabi_ui2d>
100003b4:	2200      	movs	r2, #0
100003b6:	4b07      	ldr	r3, [pc, #28]	; (100003d4 <__aeabi_f2ulz+0x3c>)
100003b8:	f000 fd4c 	bl	10000e54 <__aeabi_dmul>
100003bc:	0002      	movs	r2, r0
100003be:	000b      	movs	r3, r1
100003c0:	0030      	movs	r0, r6
100003c2:	0039      	movs	r1, r7
100003c4:	f000 ff70 	bl	100012a8 <__aeabi_dsub>
100003c8:	f001 fb94 	bl	10001af4 <__aeabi_d2uiz>
100003cc:	0021      	movs	r1, r4
100003ce:	bdd0      	pop	{r4, r6, r7, pc}
100003d0:	3df00000 	.word	0x3df00000
100003d4:	41f00000 	.word	0x41f00000

100003d8 <__aeabi_fdiv>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	0fc3      	lsrs	r3, r0, #31
100003dc:	b085      	sub	sp, #20
100003de:	0244      	lsls	r4, r0, #9
100003e0:	0045      	lsls	r5, r0, #1
100003e2:	1c0f      	adds	r7, r1, #0
100003e4:	0a64      	lsrs	r4, r4, #9
100003e6:	0e2d      	lsrs	r5, r5, #24
100003e8:	9303      	str	r3, [sp, #12]
100003ea:	9302      	str	r3, [sp, #8]
100003ec:	d00a      	beq.n	10000404 <__aeabi_fdiv+0x2c>
100003ee:	2dff      	cmp	r5, #255	; 0xff
100003f0:	d03b      	beq.n	1000046a <__aeabi_fdiv+0x92>
100003f2:	2380      	movs	r3, #128	; 0x80
100003f4:	00e4      	lsls	r4, r4, #3
100003f6:	04db      	lsls	r3, r3, #19
100003f8:	431c      	orrs	r4, r3
100003fa:	2300      	movs	r3, #0
100003fc:	3d7f      	subs	r5, #127	; 0x7f
100003fe:	9501      	str	r5, [sp, #4]
10000400:	9300      	str	r3, [sp, #0]
10000402:	e00e      	b.n	10000422 <__aeabi_fdiv+0x4a>
10000404:	2301      	movs	r3, #1
10000406:	9401      	str	r4, [sp, #4]
10000408:	9300      	str	r3, [sp, #0]
1000040a:	2c00      	cmp	r4, #0
1000040c:	d009      	beq.n	10000422 <__aeabi_fdiv+0x4a>
1000040e:	0020      	movs	r0, r4
10000410:	f7ff ff64 	bl	100002dc <__clzsi2>
10000414:	1f43      	subs	r3, r0, #5
10000416:	409c      	lsls	r4, r3
10000418:	2376      	movs	r3, #118	; 0x76
1000041a:	425b      	negs	r3, r3
1000041c:	1a1b      	subs	r3, r3, r0
1000041e:	9301      	str	r3, [sp, #4]
10000420:	9500      	str	r5, [sp, #0]
10000422:	027d      	lsls	r5, r7, #9
10000424:	007e      	lsls	r6, r7, #1
10000426:	0a6d      	lsrs	r5, r5, #9
10000428:	0e36      	lsrs	r6, r6, #24
1000042a:	0fff      	lsrs	r7, r7, #31
1000042c:	2e00      	cmp	r6, #0
1000042e:	d023      	beq.n	10000478 <__aeabi_fdiv+0xa0>
10000430:	2eff      	cmp	r6, #255	; 0xff
10000432:	d02e      	beq.n	10000492 <__aeabi_fdiv+0xba>
10000434:	2380      	movs	r3, #128	; 0x80
10000436:	00ed      	lsls	r5, r5, #3
10000438:	04db      	lsls	r3, r3, #19
1000043a:	431d      	orrs	r5, r3
1000043c:	0033      	movs	r3, r6
1000043e:	3b7f      	subs	r3, #127	; 0x7f
10000440:	2200      	movs	r2, #0
10000442:	9801      	ldr	r0, [sp, #4]
10000444:	9903      	ldr	r1, [sp, #12]
10000446:	1ac3      	subs	r3, r0, r3
10000448:	9800      	ldr	r0, [sp, #0]
1000044a:	4079      	eors	r1, r7
1000044c:	0080      	lsls	r0, r0, #2
1000044e:	4310      	orrs	r0, r2
10000450:	3801      	subs	r0, #1
10000452:	280e      	cmp	r0, #14
10000454:	d823      	bhi.n	1000049e <__aeabi_fdiv+0xc6>
10000456:	f7ff fea7 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000045a:	994d      	.short	0x994d
1000045c:	99929973 	.word	0x99929973
10000460:	924d4d73 	.word	0x924d4d73
10000464:	61616173 	.word	0x61616173
10000468:	53          	.byte	0x53
10000469:	00          	.byte	0x00
1000046a:	2302      	movs	r3, #2
1000046c:	9501      	str	r5, [sp, #4]
1000046e:	9300      	str	r3, [sp, #0]
10000470:	2c00      	cmp	r4, #0
10000472:	d0d6      	beq.n	10000422 <__aeabi_fdiv+0x4a>
10000474:	3301      	adds	r3, #1
10000476:	e7c3      	b.n	10000400 <__aeabi_fdiv+0x28>
10000478:	002b      	movs	r3, r5
1000047a:	2201      	movs	r2, #1
1000047c:	2d00      	cmp	r5, #0
1000047e:	d0e0      	beq.n	10000442 <__aeabi_fdiv+0x6a>
10000480:	0028      	movs	r0, r5
10000482:	f7ff ff2b 	bl	100002dc <__clzsi2>
10000486:	1f43      	subs	r3, r0, #5
10000488:	409d      	lsls	r5, r3
1000048a:	2376      	movs	r3, #118	; 0x76
1000048c:	425b      	negs	r3, r3
1000048e:	1a1b      	subs	r3, r3, r0
10000490:	e7d6      	b.n	10000440 <__aeabi_fdiv+0x68>
10000492:	0033      	movs	r3, r6
10000494:	2202      	movs	r2, #2
10000496:	2d00      	cmp	r5, #0
10000498:	d0d3      	beq.n	10000442 <__aeabi_fdiv+0x6a>
1000049a:	3201      	adds	r2, #1
1000049c:	e7d1      	b.n	10000442 <__aeabi_fdiv+0x6a>
1000049e:	0164      	lsls	r4, r4, #5
100004a0:	016d      	lsls	r5, r5, #5
100004a2:	42ac      	cmp	r4, r5
100004a4:	d328      	bcc.n	100004f8 <__aeabi_fdiv+0x120>
100004a6:	201a      	movs	r0, #26
100004a8:	2201      	movs	r2, #1
100004aa:	1b64      	subs	r4, r4, r5
100004ac:	2601      	movs	r6, #1
100004ae:	0027      	movs	r7, r4
100004b0:	0052      	lsls	r2, r2, #1
100004b2:	0064      	lsls	r4, r4, #1
100004b4:	2f00      	cmp	r7, #0
100004b6:	db01      	blt.n	100004bc <__aeabi_fdiv+0xe4>
100004b8:	42a5      	cmp	r5, r4
100004ba:	d801      	bhi.n	100004c0 <__aeabi_fdiv+0xe8>
100004bc:	1b64      	subs	r4, r4, r5
100004be:	4332      	orrs	r2, r6
100004c0:	3801      	subs	r0, #1
100004c2:	2800      	cmp	r0, #0
100004c4:	d1f3      	bne.n	100004ae <__aeabi_fdiv+0xd6>
100004c6:	1e60      	subs	r0, r4, #1
100004c8:	4184      	sbcs	r4, r0
100004ca:	4314      	orrs	r4, r2
100004cc:	0018      	movs	r0, r3
100004ce:	307f      	adds	r0, #127	; 0x7f
100004d0:	2800      	cmp	r0, #0
100004d2:	dd38      	ble.n	10000546 <__aeabi_fdiv+0x16e>
100004d4:	0762      	lsls	r2, r4, #29
100004d6:	d004      	beq.n	100004e2 <__aeabi_fdiv+0x10a>
100004d8:	220f      	movs	r2, #15
100004da:	4022      	ands	r2, r4
100004dc:	2a04      	cmp	r2, #4
100004de:	d000      	beq.n	100004e2 <__aeabi_fdiv+0x10a>
100004e0:	3404      	adds	r4, #4
100004e2:	0122      	lsls	r2, r4, #4
100004e4:	d503      	bpl.n	100004ee <__aeabi_fdiv+0x116>
100004e6:	3380      	adds	r3, #128	; 0x80
100004e8:	0018      	movs	r0, r3
100004ea:	4a2b      	ldr	r2, [pc, #172]	; (10000598 <__aeabi_fdiv+0x1c0>)
100004ec:	4014      	ands	r4, r2
100004ee:	08e5      	lsrs	r5, r4, #3
100004f0:	28fe      	cmp	r0, #254	; 0xfe
100004f2:	dd1d      	ble.n	10000530 <__aeabi_fdiv+0x158>
100004f4:	2500      	movs	r5, #0
100004f6:	e00f      	b.n	10000518 <__aeabi_fdiv+0x140>
100004f8:	201b      	movs	r0, #27
100004fa:	2200      	movs	r2, #0
100004fc:	3b01      	subs	r3, #1
100004fe:	e7d5      	b.n	100004ac <__aeabi_fdiv+0xd4>
10000500:	2380      	movs	r3, #128	; 0x80
10000502:	03db      	lsls	r3, r3, #15
10000504:	421c      	tst	r4, r3
10000506:	d003      	beq.n	10000510 <__aeabi_fdiv+0x138>
10000508:	421d      	tst	r5, r3
1000050a:	d101      	bne.n	10000510 <__aeabi_fdiv+0x138>
1000050c:	002c      	movs	r4, r5
1000050e:	9702      	str	r7, [sp, #8]
10000510:	2580      	movs	r5, #128	; 0x80
10000512:	9902      	ldr	r1, [sp, #8]
10000514:	03ed      	lsls	r5, r5, #15
10000516:	4325      	orrs	r5, r4
10000518:	20ff      	movs	r0, #255	; 0xff
1000051a:	e009      	b.n	10000530 <__aeabi_fdiv+0x158>
1000051c:	9903      	ldr	r1, [sp, #12]
1000051e:	9a00      	ldr	r2, [sp, #0]
10000520:	2a02      	cmp	r2, #2
10000522:	d0e7      	beq.n	100004f4 <__aeabi_fdiv+0x11c>
10000524:	2a03      	cmp	r2, #3
10000526:	d02f      	beq.n	10000588 <__aeabi_fdiv+0x1b0>
10000528:	2500      	movs	r5, #0
1000052a:	0028      	movs	r0, r5
1000052c:	2a01      	cmp	r2, #1
1000052e:	d1cd      	bne.n	100004cc <__aeabi_fdiv+0xf4>
10000530:	026d      	lsls	r5, r5, #9
10000532:	0a6d      	lsrs	r5, r5, #9
10000534:	05c0      	lsls	r0, r0, #23
10000536:	4328      	orrs	r0, r5
10000538:	07c9      	lsls	r1, r1, #31
1000053a:	4308      	orrs	r0, r1
1000053c:	b005      	add	sp, #20
1000053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000540:	002c      	movs	r4, r5
10000542:	0039      	movs	r1, r7
10000544:	e7ec      	b.n	10000520 <__aeabi_fdiv+0x148>
10000546:	2201      	movs	r2, #1
10000548:	2500      	movs	r5, #0
1000054a:	1a12      	subs	r2, r2, r0
1000054c:	0028      	movs	r0, r5
1000054e:	2a1b      	cmp	r2, #27
10000550:	dcee      	bgt.n	10000530 <__aeabi_fdiv+0x158>
10000552:	339e      	adds	r3, #158	; 0x9e
10000554:	0025      	movs	r5, r4
10000556:	409c      	lsls	r4, r3
10000558:	40d5      	lsrs	r5, r2
1000055a:	1e63      	subs	r3, r4, #1
1000055c:	419c      	sbcs	r4, r3
1000055e:	4325      	orrs	r5, r4
10000560:	076b      	lsls	r3, r5, #29
10000562:	d004      	beq.n	1000056e <__aeabi_fdiv+0x196>
10000564:	230f      	movs	r3, #15
10000566:	402b      	ands	r3, r5
10000568:	2b04      	cmp	r3, #4
1000056a:	d000      	beq.n	1000056e <__aeabi_fdiv+0x196>
1000056c:	3504      	adds	r5, #4
1000056e:	2380      	movs	r3, #128	; 0x80
10000570:	0028      	movs	r0, r5
10000572:	04db      	lsls	r3, r3, #19
10000574:	4018      	ands	r0, r3
10000576:	421d      	tst	r5, r3
10000578:	d10b      	bne.n	10000592 <__aeabi_fdiv+0x1ba>
1000057a:	08ed      	lsrs	r5, r5, #3
1000057c:	e7d8      	b.n	10000530 <__aeabi_fdiv+0x158>
1000057e:	2480      	movs	r4, #128	; 0x80
10000580:	2300      	movs	r3, #0
10000582:	03e4      	lsls	r4, r4, #15
10000584:	9302      	str	r3, [sp, #8]
10000586:	e7c3      	b.n	10000510 <__aeabi_fdiv+0x138>
10000588:	9102      	str	r1, [sp, #8]
1000058a:	e7c1      	b.n	10000510 <__aeabi_fdiv+0x138>
1000058c:	2500      	movs	r5, #0
1000058e:	0028      	movs	r0, r5
10000590:	e7ce      	b.n	10000530 <__aeabi_fdiv+0x158>
10000592:	2500      	movs	r5, #0
10000594:	2001      	movs	r0, #1
10000596:	e7cb      	b.n	10000530 <__aeabi_fdiv+0x158>
10000598:	f7ffffff 	.word	0xf7ffffff

1000059c <__aeabi_ui2f>:
1000059c:	2300      	movs	r3, #0
1000059e:	b570      	push	{r4, r5, r6, lr}
100005a0:	0004      	movs	r4, r0
100005a2:	4298      	cmp	r0, r3
100005a4:	d009      	beq.n	100005ba <__aeabi_ui2f+0x1e>
100005a6:	f7ff fe99 	bl	100002dc <__clzsi2>
100005aa:	239e      	movs	r3, #158	; 0x9e
100005ac:	1a1b      	subs	r3, r3, r0
100005ae:	2b96      	cmp	r3, #150	; 0x96
100005b0:	dc08      	bgt.n	100005c4 <__aeabi_ui2f+0x28>
100005b2:	2808      	cmp	r0, #8
100005b4:	d029      	beq.n	1000060a <__aeabi_ui2f+0x6e>
100005b6:	3808      	subs	r0, #8
100005b8:	4084      	lsls	r4, r0
100005ba:	0264      	lsls	r4, r4, #9
100005bc:	05d8      	lsls	r0, r3, #23
100005be:	0a64      	lsrs	r4, r4, #9
100005c0:	4320      	orrs	r0, r4
100005c2:	bd70      	pop	{r4, r5, r6, pc}
100005c4:	2b99      	cmp	r3, #153	; 0x99
100005c6:	dd1b      	ble.n	10000600 <__aeabi_ui2f+0x64>
100005c8:	0002      	movs	r2, r0
100005ca:	0021      	movs	r1, r4
100005cc:	321b      	adds	r2, #27
100005ce:	4091      	lsls	r1, r2
100005d0:	000a      	movs	r2, r1
100005d2:	1e51      	subs	r1, r2, #1
100005d4:	418a      	sbcs	r2, r1
100005d6:	2105      	movs	r1, #5
100005d8:	1a09      	subs	r1, r1, r0
100005da:	40cc      	lsrs	r4, r1
100005dc:	4314      	orrs	r4, r2
100005de:	0022      	movs	r2, r4
100005e0:	4d0b      	ldr	r5, [pc, #44]	; (10000610 <__aeabi_ui2f+0x74>)
100005e2:	402a      	ands	r2, r5
100005e4:	0761      	lsls	r1, r4, #29
100005e6:	d004      	beq.n	100005f2 <__aeabi_ui2f+0x56>
100005e8:	210f      	movs	r1, #15
100005ea:	4021      	ands	r1, r4
100005ec:	2904      	cmp	r1, #4
100005ee:	d000      	beq.n	100005f2 <__aeabi_ui2f+0x56>
100005f0:	3204      	adds	r2, #4
100005f2:	0151      	lsls	r1, r2, #5
100005f4:	d502      	bpl.n	100005fc <__aeabi_ui2f+0x60>
100005f6:	239f      	movs	r3, #159	; 0x9f
100005f8:	402a      	ands	r2, r5
100005fa:	1a1b      	subs	r3, r3, r0
100005fc:	08d4      	lsrs	r4, r2, #3
100005fe:	e7dc      	b.n	100005ba <__aeabi_ui2f+0x1e>
10000600:	1f42      	subs	r2, r0, #5
10000602:	2805      	cmp	r0, #5
10000604:	d0eb      	beq.n	100005de <__aeabi_ui2f+0x42>
10000606:	4094      	lsls	r4, r2
10000608:	e7e9      	b.n	100005de <__aeabi_ui2f+0x42>
1000060a:	2396      	movs	r3, #150	; 0x96
1000060c:	e7d5      	b.n	100005ba <__aeabi_ui2f+0x1e>
1000060e:	46c0      	nop			; (mov r8, r8)
10000610:	fbffffff 	.word	0xfbffffff

10000614 <__aeabi_dadd>:
10000614:	b5f0      	push	{r4, r5, r6, r7, lr}
10000616:	b087      	sub	sp, #28
10000618:	9204      	str	r2, [sp, #16]
1000061a:	9305      	str	r3, [sp, #20]
1000061c:	0fcb      	lsrs	r3, r1, #31
1000061e:	9301      	str	r3, [sp, #4]
10000620:	9b05      	ldr	r3, [sp, #20]
10000622:	030d      	lsls	r5, r1, #12
10000624:	004c      	lsls	r4, r1, #1
10000626:	0a6d      	lsrs	r5, r5, #9
10000628:	0f41      	lsrs	r1, r0, #29
1000062a:	005f      	lsls	r7, r3, #1
1000062c:	4329      	orrs	r1, r5
1000062e:	031d      	lsls	r5, r3, #12
10000630:	0d7b      	lsrs	r3, r7, #21
10000632:	9302      	str	r3, [sp, #8]
10000634:	9b05      	ldr	r3, [sp, #20]
10000636:	0a6d      	lsrs	r5, r5, #9
10000638:	0fdb      	lsrs	r3, r3, #31
1000063a:	9303      	str	r3, [sp, #12]
1000063c:	9b04      	ldr	r3, [sp, #16]
1000063e:	9a04      	ldr	r2, [sp, #16]
10000640:	0f5b      	lsrs	r3, r3, #29
10000642:	432b      	orrs	r3, r5
10000644:	9e01      	ldr	r6, [sp, #4]
10000646:	9d02      	ldr	r5, [sp, #8]
10000648:	9f03      	ldr	r7, [sp, #12]
1000064a:	0d64      	lsrs	r4, r4, #21
1000064c:	00c0      	lsls	r0, r0, #3
1000064e:	00d2      	lsls	r2, r2, #3
10000650:	1b65      	subs	r5, r4, r5
10000652:	42be      	cmp	r6, r7
10000654:	d000      	beq.n	10000658 <__aeabi_dadd+0x44>
10000656:	e12c      	b.n	100008b2 <__aeabi_dadd+0x29e>
10000658:	4ebb      	ldr	r6, [pc, #748]	; (10000948 <__aeabi_dadd+0x334>)
1000065a:	46b4      	mov	ip, r6
1000065c:	2d00      	cmp	r5, #0
1000065e:	dc00      	bgt.n	10000662 <__aeabi_dadd+0x4e>
10000660:	e070      	b.n	10000744 <__aeabi_dadd+0x130>
10000662:	9e02      	ldr	r6, [sp, #8]
10000664:	2e00      	cmp	r6, #0
10000666:	d11e      	bne.n	100006a6 <__aeabi_dadd+0x92>
10000668:	001e      	movs	r6, r3
1000066a:	4316      	orrs	r6, r2
1000066c:	d100      	bne.n	10000670 <__aeabi_dadd+0x5c>
1000066e:	e29b      	b.n	10000ba8 <__aeabi_dadd+0x594>
10000670:	1e6e      	subs	r6, r5, #1
10000672:	2d01      	cmp	r5, #1
10000674:	d113      	bne.n	1000069e <__aeabi_dadd+0x8a>
10000676:	1882      	adds	r2, r0, r2
10000678:	4282      	cmp	r2, r0
1000067a:	4180      	sbcs	r0, r0
1000067c:	18c9      	adds	r1, r1, r3
1000067e:	4240      	negs	r0, r0
10000680:	1809      	adds	r1, r1, r0
10000682:	2401      	movs	r4, #1
10000684:	0010      	movs	r0, r2
10000686:	020b      	lsls	r3, r1, #8
10000688:	d400      	bmi.n	1000068c <__aeabi_dadd+0x78>
1000068a:	e072      	b.n	10000772 <__aeabi_dadd+0x15e>
1000068c:	2402      	movs	r4, #2
1000068e:	4baf      	ldr	r3, [pc, #700]	; (1000094c <__aeabi_dadd+0x338>)
10000690:	0842      	lsrs	r2, r0, #1
10000692:	400b      	ands	r3, r1
10000694:	2101      	movs	r1, #1
10000696:	4001      	ands	r1, r0
10000698:	430a      	orrs	r2, r1
1000069a:	07d8      	lsls	r0, r3, #31
1000069c:	e106      	b.n	100008ac <__aeabi_dadd+0x298>
1000069e:	4565      	cmp	r5, ip
100006a0:	d11c      	bne.n	100006dc <__aeabi_dadd+0xc8>
100006a2:	4ca9      	ldr	r4, [pc, #676]	; (10000948 <__aeabi_dadd+0x334>)
100006a4:	e065      	b.n	10000772 <__aeabi_dadd+0x15e>
100006a6:	4564      	cmp	r4, ip
100006a8:	d063      	beq.n	10000772 <__aeabi_dadd+0x15e>
100006aa:	2d38      	cmp	r5, #56	; 0x38
100006ac:	dc47      	bgt.n	1000073e <__aeabi_dadd+0x12a>
100006ae:	2680      	movs	r6, #128	; 0x80
100006b0:	0436      	lsls	r6, r6, #16
100006b2:	4333      	orrs	r3, r6
100006b4:	002e      	movs	r6, r5
100006b6:	2e1f      	cmp	r6, #31
100006b8:	dc2f      	bgt.n	1000071a <__aeabi_dadd+0x106>
100006ba:	2520      	movs	r5, #32
100006bc:	001f      	movs	r7, r3
100006be:	1bad      	subs	r5, r5, r6
100006c0:	40af      	lsls	r7, r5
100006c2:	9502      	str	r5, [sp, #8]
100006c4:	003d      	movs	r5, r7
100006c6:	0017      	movs	r7, r2
100006c8:	40f7      	lsrs	r7, r6
100006ca:	432f      	orrs	r7, r5
100006cc:	9d02      	ldr	r5, [sp, #8]
100006ce:	40f3      	lsrs	r3, r6
100006d0:	40aa      	lsls	r2, r5
100006d2:	1e55      	subs	r5, r2, #1
100006d4:	41aa      	sbcs	r2, r5
100006d6:	001d      	movs	r5, r3
100006d8:	4317      	orrs	r7, r2
100006da:	e003      	b.n	100006e4 <__aeabi_dadd+0xd0>
100006dc:	2701      	movs	r7, #1
100006de:	9d02      	ldr	r5, [sp, #8]
100006e0:	2e38      	cmp	r6, #56	; 0x38
100006e2:	dde8      	ble.n	100006b6 <__aeabi_dadd+0xa2>
100006e4:	183f      	adds	r7, r7, r0
100006e6:	4287      	cmp	r7, r0
100006e8:	4180      	sbcs	r0, r0
100006ea:	1869      	adds	r1, r5, r1
100006ec:	4240      	negs	r0, r0
100006ee:	1809      	adds	r1, r1, r0
100006f0:	0038      	movs	r0, r7
100006f2:	020b      	lsls	r3, r1, #8
100006f4:	d53d      	bpl.n	10000772 <__aeabi_dadd+0x15e>
100006f6:	2500      	movs	r5, #0
100006f8:	3401      	adds	r4, #1
100006fa:	002f      	movs	r7, r5
100006fc:	4564      	cmp	r4, ip
100006fe:	d1c6      	bne.n	1000068e <__aeabi_dadd+0x7a>
10000700:	4b93      	ldr	r3, [pc, #588]	; (10000950 <__aeabi_dadd+0x33c>)
10000702:	0524      	lsls	r4, r4, #20
10000704:	401c      	ands	r4, r3
10000706:	033b      	lsls	r3, r7, #12
10000708:	0b1b      	lsrs	r3, r3, #12
1000070a:	431c      	orrs	r4, r3
1000070c:	9b01      	ldr	r3, [sp, #4]
1000070e:	0028      	movs	r0, r5
10000710:	07db      	lsls	r3, r3, #31
10000712:	431c      	orrs	r4, r3
10000714:	0021      	movs	r1, r4
10000716:	b007      	add	sp, #28
10000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000071a:	0035      	movs	r5, r6
1000071c:	001f      	movs	r7, r3
1000071e:	3d20      	subs	r5, #32
10000720:	40ef      	lsrs	r7, r5
10000722:	003d      	movs	r5, r7
10000724:	2700      	movs	r7, #0
10000726:	2e20      	cmp	r6, #32
10000728:	d003      	beq.n	10000732 <__aeabi_dadd+0x11e>
1000072a:	3740      	adds	r7, #64	; 0x40
1000072c:	1bbf      	subs	r7, r7, r6
1000072e:	40bb      	lsls	r3, r7
10000730:	001f      	movs	r7, r3
10000732:	4317      	orrs	r7, r2
10000734:	1e7b      	subs	r3, r7, #1
10000736:	419f      	sbcs	r7, r3
10000738:	432f      	orrs	r7, r5
1000073a:	2500      	movs	r5, #0
1000073c:	e7d2      	b.n	100006e4 <__aeabi_dadd+0xd0>
1000073e:	2500      	movs	r5, #0
10000740:	2701      	movs	r7, #1
10000742:	e7cf      	b.n	100006e4 <__aeabi_dadd+0xd0>
10000744:	2d00      	cmp	r5, #0
10000746:	d06f      	beq.n	10000828 <__aeabi_dadd+0x214>
10000748:	9d02      	ldr	r5, [sp, #8]
1000074a:	1b2e      	subs	r6, r5, r4
1000074c:	2c00      	cmp	r4, #0
1000074e:	d130      	bne.n	100007b2 <__aeabi_dadd+0x19e>
10000750:	000d      	movs	r5, r1
10000752:	4305      	orrs	r5, r0
10000754:	d100      	bne.n	10000758 <__aeabi_dadd+0x144>
10000756:	e221      	b.n	10000b9c <__aeabi_dadd+0x588>
10000758:	1e75      	subs	r5, r6, #1
1000075a:	2e01      	cmp	r6, #1
1000075c:	d124      	bne.n	100007a8 <__aeabi_dadd+0x194>
1000075e:	1880      	adds	r0, r0, r2
10000760:	4290      	cmp	r0, r2
10000762:	4192      	sbcs	r2, r2
10000764:	18c9      	adds	r1, r1, r3
10000766:	4252      	negs	r2, r2
10000768:	1889      	adds	r1, r1, r2
1000076a:	3401      	adds	r4, #1
1000076c:	020b      	lsls	r3, r1, #8
1000076e:	d500      	bpl.n	10000772 <__aeabi_dadd+0x15e>
10000770:	e78c      	b.n	1000068c <__aeabi_dadd+0x78>
10000772:	0743      	lsls	r3, r0, #29
10000774:	d009      	beq.n	1000078a <__aeabi_dadd+0x176>
10000776:	230f      	movs	r3, #15
10000778:	4003      	ands	r3, r0
1000077a:	2b04      	cmp	r3, #4
1000077c:	d005      	beq.n	1000078a <__aeabi_dadd+0x176>
1000077e:	1d03      	adds	r3, r0, #4
10000780:	4283      	cmp	r3, r0
10000782:	4180      	sbcs	r0, r0
10000784:	4240      	negs	r0, r0
10000786:	1809      	adds	r1, r1, r0
10000788:	0018      	movs	r0, r3
1000078a:	4b6f      	ldr	r3, [pc, #444]	; (10000948 <__aeabi_dadd+0x334>)
1000078c:	020a      	lsls	r2, r1, #8
1000078e:	d400      	bmi.n	10000792 <__aeabi_dadd+0x17e>
10000790:	e210      	b.n	10000bb4 <__aeabi_dadd+0x5a0>
10000792:	2500      	movs	r5, #0
10000794:	3401      	adds	r4, #1
10000796:	002f      	movs	r7, r5
10000798:	429c      	cmp	r4, r3
1000079a:	d0b1      	beq.n	10000700 <__aeabi_dadd+0xec>
1000079c:	4b6b      	ldr	r3, [pc, #428]	; (1000094c <__aeabi_dadd+0x338>)
1000079e:	08c0      	lsrs	r0, r0, #3
100007a0:	400b      	ands	r3, r1
100007a2:	075d      	lsls	r5, r3, #29
100007a4:	4305      	orrs	r5, r0
100007a6:	e1f2      	b.n	10000b8e <__aeabi_dadd+0x57a>
100007a8:	4566      	cmp	r6, ip
100007aa:	d11d      	bne.n	100007e8 <__aeabi_dadd+0x1d4>
100007ac:	0019      	movs	r1, r3
100007ae:	0010      	movs	r0, r2
100007b0:	e777      	b.n	100006a2 <__aeabi_dadd+0x8e>
100007b2:	9c02      	ldr	r4, [sp, #8]
100007b4:	4564      	cmp	r4, ip
100007b6:	d0f9      	beq.n	100007ac <__aeabi_dadd+0x198>
100007b8:	2e38      	cmp	r6, #56	; 0x38
100007ba:	dc32      	bgt.n	10000822 <__aeabi_dadd+0x20e>
100007bc:	2480      	movs	r4, #128	; 0x80
100007be:	0035      	movs	r5, r6
100007c0:	0424      	lsls	r4, r4, #16
100007c2:	4321      	orrs	r1, r4
100007c4:	2d1f      	cmp	r5, #31
100007c6:	dc1a      	bgt.n	100007fe <__aeabi_dadd+0x1ea>
100007c8:	2420      	movs	r4, #32
100007ca:	000e      	movs	r6, r1
100007cc:	1b67      	subs	r7, r4, r5
100007ce:	40be      	lsls	r6, r7
100007d0:	0034      	movs	r4, r6
100007d2:	0006      	movs	r6, r0
100007d4:	40b8      	lsls	r0, r7
100007d6:	40ee      	lsrs	r6, r5
100007d8:	4334      	orrs	r4, r6
100007da:	0006      	movs	r6, r0
100007dc:	40e9      	lsrs	r1, r5
100007de:	1e70      	subs	r0, r6, #1
100007e0:	4186      	sbcs	r6, r0
100007e2:	4326      	orrs	r6, r4
100007e4:	000c      	movs	r4, r1
100007e6:	e002      	b.n	100007ee <__aeabi_dadd+0x1da>
100007e8:	2601      	movs	r6, #1
100007ea:	2d38      	cmp	r5, #56	; 0x38
100007ec:	ddea      	ble.n	100007c4 <__aeabi_dadd+0x1b0>
100007ee:	18b0      	adds	r0, r6, r2
100007f0:	4290      	cmp	r0, r2
100007f2:	4192      	sbcs	r2, r2
100007f4:	18e4      	adds	r4, r4, r3
100007f6:	4252      	negs	r2, r2
100007f8:	18a1      	adds	r1, r4, r2
100007fa:	9c02      	ldr	r4, [sp, #8]
100007fc:	e779      	b.n	100006f2 <__aeabi_dadd+0xde>
100007fe:	002c      	movs	r4, r5
10000800:	000e      	movs	r6, r1
10000802:	3c20      	subs	r4, #32
10000804:	40e6      	lsrs	r6, r4
10000806:	0034      	movs	r4, r6
10000808:	2600      	movs	r6, #0
1000080a:	2d20      	cmp	r5, #32
1000080c:	d003      	beq.n	10000816 <__aeabi_dadd+0x202>
1000080e:	3640      	adds	r6, #64	; 0x40
10000810:	1b76      	subs	r6, r6, r5
10000812:	40b1      	lsls	r1, r6
10000814:	000e      	movs	r6, r1
10000816:	4306      	orrs	r6, r0
10000818:	1e71      	subs	r1, r6, #1
1000081a:	418e      	sbcs	r6, r1
1000081c:	4326      	orrs	r6, r4
1000081e:	2400      	movs	r4, #0
10000820:	e7e5      	b.n	100007ee <__aeabi_dadd+0x1da>
10000822:	2400      	movs	r4, #0
10000824:	2601      	movs	r6, #1
10000826:	e7e2      	b.n	100007ee <__aeabi_dadd+0x1da>
10000828:	4f4a      	ldr	r7, [pc, #296]	; (10000954 <__aeabi_dadd+0x340>)
1000082a:	1c66      	adds	r6, r4, #1
1000082c:	423e      	tst	r6, r7
1000082e:	d130      	bne.n	10000892 <__aeabi_dadd+0x27e>
10000830:	000d      	movs	r5, r1
10000832:	4305      	orrs	r5, r0
10000834:	2c00      	cmp	r4, #0
10000836:	d112      	bne.n	1000085e <__aeabi_dadd+0x24a>
10000838:	2d00      	cmp	r5, #0
1000083a:	d100      	bne.n	1000083e <__aeabi_dadd+0x22a>
1000083c:	e1b1      	b.n	10000ba2 <__aeabi_dadd+0x58e>
1000083e:	001d      	movs	r5, r3
10000840:	4315      	orrs	r5, r2
10000842:	d096      	beq.n	10000772 <__aeabi_dadd+0x15e>
10000844:	1882      	adds	r2, r0, r2
10000846:	4282      	cmp	r2, r0
10000848:	4180      	sbcs	r0, r0
1000084a:	18c9      	adds	r1, r1, r3
1000084c:	4240      	negs	r0, r0
1000084e:	1809      	adds	r1, r1, r0
10000850:	0010      	movs	r0, r2
10000852:	020b      	lsls	r3, r1, #8
10000854:	d58d      	bpl.n	10000772 <__aeabi_dadd+0x15e>
10000856:	4b3d      	ldr	r3, [pc, #244]	; (1000094c <__aeabi_dadd+0x338>)
10000858:	4019      	ands	r1, r3
1000085a:	0034      	movs	r4, r6
1000085c:	e789      	b.n	10000772 <__aeabi_dadd+0x15e>
1000085e:	2d00      	cmp	r5, #0
10000860:	d0a4      	beq.n	100007ac <__aeabi_dadd+0x198>
10000862:	001d      	movs	r5, r3
10000864:	4664      	mov	r4, ip
10000866:	4315      	orrs	r5, r2
10000868:	d083      	beq.n	10000772 <__aeabi_dadd+0x15e>
1000086a:	2580      	movs	r5, #128	; 0x80
1000086c:	074c      	lsls	r4, r1, #29
1000086e:	08c0      	lsrs	r0, r0, #3
10000870:	08c9      	lsrs	r1, r1, #3
10000872:	032d      	lsls	r5, r5, #12
10000874:	4320      	orrs	r0, r4
10000876:	4229      	tst	r1, r5
10000878:	d006      	beq.n	10000888 <__aeabi_dadd+0x274>
1000087a:	08dc      	lsrs	r4, r3, #3
1000087c:	422c      	tst	r4, r5
1000087e:	d103      	bne.n	10000888 <__aeabi_dadd+0x274>
10000880:	0021      	movs	r1, r4
10000882:	08d0      	lsrs	r0, r2, #3
10000884:	075b      	lsls	r3, r3, #29
10000886:	4318      	orrs	r0, r3
10000888:	00cb      	lsls	r3, r1, #3
1000088a:	0f41      	lsrs	r1, r0, #29
1000088c:	4319      	orrs	r1, r3
1000088e:	00c0      	lsls	r0, r0, #3
10000890:	e707      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000892:	0034      	movs	r4, r6
10000894:	002f      	movs	r7, r5
10000896:	4566      	cmp	r6, ip
10000898:	d100      	bne.n	1000089c <__aeabi_dadd+0x288>
1000089a:	e731      	b.n	10000700 <__aeabi_dadd+0xec>
1000089c:	1882      	adds	r2, r0, r2
1000089e:	4282      	cmp	r2, r0
100008a0:	4180      	sbcs	r0, r0
100008a2:	18cb      	adds	r3, r1, r3
100008a4:	4240      	negs	r0, r0
100008a6:	181b      	adds	r3, r3, r0
100008a8:	07d8      	lsls	r0, r3, #31
100008aa:	0852      	lsrs	r2, r2, #1
100008ac:	4310      	orrs	r0, r2
100008ae:	0859      	lsrs	r1, r3, #1
100008b0:	e75f      	b.n	10000772 <__aeabi_dadd+0x15e>
100008b2:	2d00      	cmp	r5, #0
100008b4:	dd65      	ble.n	10000982 <__aeabi_dadd+0x36e>
100008b6:	9e02      	ldr	r6, [sp, #8]
100008b8:	2e00      	cmp	r6, #0
100008ba:	d125      	bne.n	10000908 <__aeabi_dadd+0x2f4>
100008bc:	001e      	movs	r6, r3
100008be:	4316      	orrs	r6, r2
100008c0:	d100      	bne.n	100008c4 <__aeabi_dadd+0x2b0>
100008c2:	e171      	b.n	10000ba8 <__aeabi_dadd+0x594>
100008c4:	1e6e      	subs	r6, r5, #1
100008c6:	2d01      	cmp	r5, #1
100008c8:	d10e      	bne.n	100008e8 <__aeabi_dadd+0x2d4>
100008ca:	1a82      	subs	r2, r0, r2
100008cc:	4290      	cmp	r0, r2
100008ce:	4180      	sbcs	r0, r0
100008d0:	1ac9      	subs	r1, r1, r3
100008d2:	4240      	negs	r0, r0
100008d4:	1a09      	subs	r1, r1, r0
100008d6:	2401      	movs	r4, #1
100008d8:	0010      	movs	r0, r2
100008da:	020b      	lsls	r3, r1, #8
100008dc:	d400      	bmi.n	100008e0 <__aeabi_dadd+0x2cc>
100008de:	e748      	b.n	10000772 <__aeabi_dadd+0x15e>
100008e0:	0249      	lsls	r1, r1, #9
100008e2:	0006      	movs	r6, r0
100008e4:	0a4d      	lsrs	r5, r1, #9
100008e6:	e107      	b.n	10000af8 <__aeabi_dadd+0x4e4>
100008e8:	4f17      	ldr	r7, [pc, #92]	; (10000948 <__aeabi_dadd+0x334>)
100008ea:	42bd      	cmp	r5, r7
100008ec:	d100      	bne.n	100008f0 <__aeabi_dadd+0x2dc>
100008ee:	e6d8      	b.n	100006a2 <__aeabi_dadd+0x8e>
100008f0:	2501      	movs	r5, #1
100008f2:	9f02      	ldr	r7, [sp, #8]
100008f4:	2e38      	cmp	r6, #56	; 0x38
100008f6:	dd11      	ble.n	1000091c <__aeabi_dadd+0x308>
100008f8:	1b45      	subs	r5, r0, r5
100008fa:	42a8      	cmp	r0, r5
100008fc:	4180      	sbcs	r0, r0
100008fe:	1bc9      	subs	r1, r1, r7
10000900:	4240      	negs	r0, r0
10000902:	1a09      	subs	r1, r1, r0
10000904:	0028      	movs	r0, r5
10000906:	e7e8      	b.n	100008da <__aeabi_dadd+0x2c6>
10000908:	4e0f      	ldr	r6, [pc, #60]	; (10000948 <__aeabi_dadd+0x334>)
1000090a:	42b4      	cmp	r4, r6
1000090c:	d100      	bne.n	10000910 <__aeabi_dadd+0x2fc>
1000090e:	e730      	b.n	10000772 <__aeabi_dadd+0x15e>
10000910:	2d38      	cmp	r5, #56	; 0x38
10000912:	dc33      	bgt.n	1000097c <__aeabi_dadd+0x368>
10000914:	2680      	movs	r6, #128	; 0x80
10000916:	0436      	lsls	r6, r6, #16
10000918:	4333      	orrs	r3, r6
1000091a:	002e      	movs	r6, r5
1000091c:	2e1f      	cmp	r6, #31
1000091e:	dc1b      	bgt.n	10000958 <__aeabi_dadd+0x344>
10000920:	2720      	movs	r7, #32
10000922:	1bbd      	subs	r5, r7, r6
10000924:	9502      	str	r5, [sp, #8]
10000926:	001d      	movs	r5, r3
10000928:	9f02      	ldr	r7, [sp, #8]
1000092a:	40f3      	lsrs	r3, r6
1000092c:	40bd      	lsls	r5, r7
1000092e:	46ac      	mov	ip, r5
10000930:	0015      	movs	r5, r2
10000932:	4667      	mov	r7, ip
10000934:	40f5      	lsrs	r5, r6
10000936:	433d      	orrs	r5, r7
10000938:	9f02      	ldr	r7, [sp, #8]
1000093a:	40ba      	lsls	r2, r7
1000093c:	1e57      	subs	r7, r2, #1
1000093e:	41ba      	sbcs	r2, r7
10000940:	001f      	movs	r7, r3
10000942:	4315      	orrs	r5, r2
10000944:	e7d8      	b.n	100008f8 <__aeabi_dadd+0x2e4>
10000946:	46c0      	nop			; (mov r8, r8)
10000948:	000007ff 	.word	0x000007ff
1000094c:	ff7fffff 	.word	0xff7fffff
10000950:	7ff00000 	.word	0x7ff00000
10000954:	000007fe 	.word	0x000007fe
10000958:	0035      	movs	r5, r6
1000095a:	001f      	movs	r7, r3
1000095c:	3d20      	subs	r5, #32
1000095e:	40ef      	lsrs	r7, r5
10000960:	003d      	movs	r5, r7
10000962:	2700      	movs	r7, #0
10000964:	2e20      	cmp	r6, #32
10000966:	d003      	beq.n	10000970 <__aeabi_dadd+0x35c>
10000968:	3740      	adds	r7, #64	; 0x40
1000096a:	1bbe      	subs	r6, r7, r6
1000096c:	40b3      	lsls	r3, r6
1000096e:	001f      	movs	r7, r3
10000970:	4317      	orrs	r7, r2
10000972:	1e7b      	subs	r3, r7, #1
10000974:	419f      	sbcs	r7, r3
10000976:	433d      	orrs	r5, r7
10000978:	2700      	movs	r7, #0
1000097a:	e7bd      	b.n	100008f8 <__aeabi_dadd+0x2e4>
1000097c:	2700      	movs	r7, #0
1000097e:	2501      	movs	r5, #1
10000980:	e7ba      	b.n	100008f8 <__aeabi_dadd+0x2e4>
10000982:	2d00      	cmp	r5, #0
10000984:	d059      	beq.n	10000a3a <__aeabi_dadd+0x426>
10000986:	9d02      	ldr	r5, [sp, #8]
10000988:	1b2e      	subs	r6, r5, r4
1000098a:	2c00      	cmp	r4, #0
1000098c:	d116      	bne.n	100009bc <__aeabi_dadd+0x3a8>
1000098e:	000d      	movs	r5, r1
10000990:	4305      	orrs	r5, r0
10000992:	d00f      	beq.n	100009b4 <__aeabi_dadd+0x3a0>
10000994:	1e75      	subs	r5, r6, #1
10000996:	2e01      	cmp	r6, #1
10000998:	d109      	bne.n	100009ae <__aeabi_dadd+0x39a>
1000099a:	1a10      	subs	r0, r2, r0
1000099c:	4282      	cmp	r2, r0
1000099e:	4192      	sbcs	r2, r2
100009a0:	1a59      	subs	r1, r3, r1
100009a2:	9b03      	ldr	r3, [sp, #12]
100009a4:	4252      	negs	r2, r2
100009a6:	1a89      	subs	r1, r1, r2
100009a8:	9301      	str	r3, [sp, #4]
100009aa:	3401      	adds	r4, #1
100009ac:	e795      	b.n	100008da <__aeabi_dadd+0x2c6>
100009ae:	4f8e      	ldr	r7, [pc, #568]	; (10000be8 <__aeabi_dadd+0x5d4>)
100009b0:	42be      	cmp	r6, r7
100009b2:	d121      	bne.n	100009f8 <__aeabi_dadd+0x3e4>
100009b4:	0019      	movs	r1, r3
100009b6:	0010      	movs	r0, r2
100009b8:	0034      	movs	r4, r6
100009ba:	e050      	b.n	10000a5e <__aeabi_dadd+0x44a>
100009bc:	4c8a      	ldr	r4, [pc, #552]	; (10000be8 <__aeabi_dadd+0x5d4>)
100009be:	9d02      	ldr	r5, [sp, #8]
100009c0:	42a5      	cmp	r5, r4
100009c2:	d100      	bne.n	100009c6 <__aeabi_dadd+0x3b2>
100009c4:	e0f2      	b.n	10000bac <__aeabi_dadd+0x598>
100009c6:	2e38      	cmp	r6, #56	; 0x38
100009c8:	dc34      	bgt.n	10000a34 <__aeabi_dadd+0x420>
100009ca:	2480      	movs	r4, #128	; 0x80
100009cc:	0035      	movs	r5, r6
100009ce:	0424      	lsls	r4, r4, #16
100009d0:	4321      	orrs	r1, r4
100009d2:	2d1f      	cmp	r5, #31
100009d4:	dc1d      	bgt.n	10000a12 <__aeabi_dadd+0x3fe>
100009d6:	2620      	movs	r6, #32
100009d8:	000c      	movs	r4, r1
100009da:	1b76      	subs	r6, r6, r5
100009dc:	40b4      	lsls	r4, r6
100009de:	46a4      	mov	ip, r4
100009e0:	0004      	movs	r4, r0
100009e2:	40b0      	lsls	r0, r6
100009e4:	40ec      	lsrs	r4, r5
100009e6:	4667      	mov	r7, ip
100009e8:	1e46      	subs	r6, r0, #1
100009ea:	41b0      	sbcs	r0, r6
100009ec:	40e9      	lsrs	r1, r5
100009ee:	433c      	orrs	r4, r7
100009f0:	4304      	orrs	r4, r0
100009f2:	0026      	movs	r6, r4
100009f4:	000c      	movs	r4, r1
100009f6:	e002      	b.n	100009fe <__aeabi_dadd+0x3ea>
100009f8:	2601      	movs	r6, #1
100009fa:	2d38      	cmp	r5, #56	; 0x38
100009fc:	dde9      	ble.n	100009d2 <__aeabi_dadd+0x3be>
100009fe:	1b90      	subs	r0, r2, r6
10000a00:	4282      	cmp	r2, r0
10000a02:	4192      	sbcs	r2, r2
10000a04:	1b1c      	subs	r4, r3, r4
10000a06:	9b03      	ldr	r3, [sp, #12]
10000a08:	4252      	negs	r2, r2
10000a0a:	1aa1      	subs	r1, r4, r2
10000a0c:	9301      	str	r3, [sp, #4]
10000a0e:	9c02      	ldr	r4, [sp, #8]
10000a10:	e763      	b.n	100008da <__aeabi_dadd+0x2c6>
10000a12:	002c      	movs	r4, r5
10000a14:	000e      	movs	r6, r1
10000a16:	3c20      	subs	r4, #32
10000a18:	40e6      	lsrs	r6, r4
10000a1a:	2400      	movs	r4, #0
10000a1c:	2d20      	cmp	r5, #32
10000a1e:	d003      	beq.n	10000a28 <__aeabi_dadd+0x414>
10000a20:	3440      	adds	r4, #64	; 0x40
10000a22:	1b64      	subs	r4, r4, r5
10000a24:	40a1      	lsls	r1, r4
10000a26:	000c      	movs	r4, r1
10000a28:	4304      	orrs	r4, r0
10000a2a:	1e61      	subs	r1, r4, #1
10000a2c:	418c      	sbcs	r4, r1
10000a2e:	4326      	orrs	r6, r4
10000a30:	2400      	movs	r4, #0
10000a32:	e7e4      	b.n	100009fe <__aeabi_dadd+0x3ea>
10000a34:	2400      	movs	r4, #0
10000a36:	2601      	movs	r6, #1
10000a38:	e7e1      	b.n	100009fe <__aeabi_dadd+0x3ea>
10000a3a:	4e6c      	ldr	r6, [pc, #432]	; (10000bec <__aeabi_dadd+0x5d8>)
10000a3c:	1c65      	adds	r5, r4, #1
10000a3e:	4235      	tst	r5, r6
10000a40:	d14a      	bne.n	10000ad8 <__aeabi_dadd+0x4c4>
10000a42:	000d      	movs	r5, r1
10000a44:	001f      	movs	r7, r3
10000a46:	4305      	orrs	r5, r0
10000a48:	4317      	orrs	r7, r2
10000a4a:	2c00      	cmp	r4, #0
10000a4c:	d123      	bne.n	10000a96 <__aeabi_dadd+0x482>
10000a4e:	2d00      	cmp	r5, #0
10000a50:	d108      	bne.n	10000a64 <__aeabi_dadd+0x450>
10000a52:	1e3d      	subs	r5, r7, #0
10000a54:	9701      	str	r7, [sp, #4]
10000a56:	d100      	bne.n	10000a5a <__aeabi_dadd+0x446>
10000a58:	e652      	b.n	10000700 <__aeabi_dadd+0xec>
10000a5a:	0019      	movs	r1, r3
10000a5c:	0010      	movs	r0, r2
10000a5e:	9b03      	ldr	r3, [sp, #12]
10000a60:	9301      	str	r3, [sp, #4]
10000a62:	e686      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a64:	2f00      	cmp	r7, #0
10000a66:	d100      	bne.n	10000a6a <__aeabi_dadd+0x456>
10000a68:	e683      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a6a:	1a86      	subs	r6, r0, r2
10000a6c:	42b0      	cmp	r0, r6
10000a6e:	41bf      	sbcs	r7, r7
10000a70:	1acd      	subs	r5, r1, r3
10000a72:	427f      	negs	r7, r7
10000a74:	1bed      	subs	r5, r5, r7
10000a76:	022f      	lsls	r7, r5, #8
10000a78:	d506      	bpl.n	10000a88 <__aeabi_dadd+0x474>
10000a7a:	1a10      	subs	r0, r2, r0
10000a7c:	4282      	cmp	r2, r0
10000a7e:	4192      	sbcs	r2, r2
10000a80:	1a59      	subs	r1, r3, r1
10000a82:	4252      	negs	r2, r2
10000a84:	1a89      	subs	r1, r1, r2
10000a86:	e7ea      	b.n	10000a5e <__aeabi_dadd+0x44a>
10000a88:	0037      	movs	r7, r6
10000a8a:	432f      	orrs	r7, r5
10000a8c:	d100      	bne.n	10000a90 <__aeabi_dadd+0x47c>
10000a8e:	e0a5      	b.n	10000bdc <__aeabi_dadd+0x5c8>
10000a90:	0029      	movs	r1, r5
10000a92:	0030      	movs	r0, r6
10000a94:	e66d      	b.n	10000772 <__aeabi_dadd+0x15e>
10000a96:	2d00      	cmp	r5, #0
10000a98:	d107      	bne.n	10000aaa <__aeabi_dadd+0x496>
10000a9a:	2f00      	cmp	r7, #0
10000a9c:	d100      	bne.n	10000aa0 <__aeabi_dadd+0x48c>
10000a9e:	e094      	b.n	10000bca <__aeabi_dadd+0x5b6>
10000aa0:	0019      	movs	r1, r3
10000aa2:	9b03      	ldr	r3, [sp, #12]
10000aa4:	0010      	movs	r0, r2
10000aa6:	9301      	str	r3, [sp, #4]
10000aa8:	e5fb      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000aaa:	2f00      	cmp	r7, #0
10000aac:	d100      	bne.n	10000ab0 <__aeabi_dadd+0x49c>
10000aae:	e5f8      	b.n	100006a2 <__aeabi_dadd+0x8e>
10000ab0:	2580      	movs	r5, #128	; 0x80
10000ab2:	074c      	lsls	r4, r1, #29
10000ab4:	08c0      	lsrs	r0, r0, #3
10000ab6:	08c9      	lsrs	r1, r1, #3
10000ab8:	032d      	lsls	r5, r5, #12
10000aba:	4320      	orrs	r0, r4
10000abc:	4229      	tst	r1, r5
10000abe:	d100      	bne.n	10000ac2 <__aeabi_dadd+0x4ae>
10000ac0:	e6e2      	b.n	10000888 <__aeabi_dadd+0x274>
10000ac2:	08dc      	lsrs	r4, r3, #3
10000ac4:	422c      	tst	r4, r5
10000ac6:	d000      	beq.n	10000aca <__aeabi_dadd+0x4b6>
10000ac8:	e6de      	b.n	10000888 <__aeabi_dadd+0x274>
10000aca:	075b      	lsls	r3, r3, #29
10000acc:	08d0      	lsrs	r0, r2, #3
10000ace:	4318      	orrs	r0, r3
10000ad0:	9b03      	ldr	r3, [sp, #12]
10000ad2:	0021      	movs	r1, r4
10000ad4:	9301      	str	r3, [sp, #4]
10000ad6:	e6d7      	b.n	10000888 <__aeabi_dadd+0x274>
10000ad8:	1a86      	subs	r6, r0, r2
10000ada:	42b0      	cmp	r0, r6
10000adc:	41bf      	sbcs	r7, r7
10000ade:	1acd      	subs	r5, r1, r3
10000ae0:	427f      	negs	r7, r7
10000ae2:	1bed      	subs	r5, r5, r7
10000ae4:	022f      	lsls	r7, r5, #8
10000ae6:	d528      	bpl.n	10000b3a <__aeabi_dadd+0x526>
10000ae8:	1a16      	subs	r6, r2, r0
10000aea:	42b2      	cmp	r2, r6
10000aec:	4192      	sbcs	r2, r2
10000aee:	1a5b      	subs	r3, r3, r1
10000af0:	4252      	negs	r2, r2
10000af2:	1a9d      	subs	r5, r3, r2
10000af4:	9b03      	ldr	r3, [sp, #12]
10000af6:	9301      	str	r3, [sp, #4]
10000af8:	2d00      	cmp	r5, #0
10000afa:	d025      	beq.n	10000b48 <__aeabi_dadd+0x534>
10000afc:	0028      	movs	r0, r5
10000afe:	f7ff fbed 	bl	100002dc <__clzsi2>
10000b02:	0003      	movs	r3, r0
10000b04:	3b08      	subs	r3, #8
10000b06:	2220      	movs	r2, #32
10000b08:	0031      	movs	r1, r6
10000b0a:	1ad2      	subs	r2, r2, r3
10000b0c:	409d      	lsls	r5, r3
10000b0e:	40d1      	lsrs	r1, r2
10000b10:	4329      	orrs	r1, r5
10000b12:	0035      	movs	r5, r6
10000b14:	409d      	lsls	r5, r3
10000b16:	429c      	cmp	r4, r3
10000b18:	dc3b      	bgt.n	10000b92 <__aeabi_dadd+0x57e>
10000b1a:	1b1a      	subs	r2, r3, r4
10000b1c:	3201      	adds	r2, #1
10000b1e:	2320      	movs	r3, #32
10000b20:	0008      	movs	r0, r1
10000b22:	1a9b      	subs	r3, r3, r2
10000b24:	002c      	movs	r4, r5
10000b26:	409d      	lsls	r5, r3
10000b28:	4098      	lsls	r0, r3
10000b2a:	40d4      	lsrs	r4, r2
10000b2c:	1e6b      	subs	r3, r5, #1
10000b2e:	419d      	sbcs	r5, r3
10000b30:	40d1      	lsrs	r1, r2
10000b32:	4320      	orrs	r0, r4
10000b34:	4328      	orrs	r0, r5
10000b36:	2400      	movs	r4, #0
10000b38:	e61b      	b.n	10000772 <__aeabi_dadd+0x15e>
10000b3a:	0037      	movs	r7, r6
10000b3c:	432f      	orrs	r7, r5
10000b3e:	d1db      	bne.n	10000af8 <__aeabi_dadd+0x4e4>
10000b40:	003d      	movs	r5, r7
10000b42:	003c      	movs	r4, r7
10000b44:	9701      	str	r7, [sp, #4]
10000b46:	e5db      	b.n	10000700 <__aeabi_dadd+0xec>
10000b48:	0030      	movs	r0, r6
10000b4a:	f7ff fbc7 	bl	100002dc <__clzsi2>
10000b4e:	0003      	movs	r3, r0
10000b50:	3318      	adds	r3, #24
10000b52:	2b1f      	cmp	r3, #31
10000b54:	ddd7      	ble.n	10000b06 <__aeabi_dadd+0x4f2>
10000b56:	0031      	movs	r1, r6
10000b58:	3808      	subs	r0, #8
10000b5a:	4081      	lsls	r1, r0
10000b5c:	429c      	cmp	r4, r3
10000b5e:	dc12      	bgt.n	10000b86 <__aeabi_dadd+0x572>
10000b60:	1b1b      	subs	r3, r3, r4
10000b62:	1c5a      	adds	r2, r3, #1
10000b64:	2a1f      	cmp	r2, #31
10000b66:	ddda      	ble.n	10000b1e <__aeabi_dadd+0x50a>
10000b68:	000c      	movs	r4, r1
10000b6a:	3b1f      	subs	r3, #31
10000b6c:	40dc      	lsrs	r4, r3
10000b6e:	0028      	movs	r0, r5
10000b70:	2a20      	cmp	r2, #32
10000b72:	d003      	beq.n	10000b7c <__aeabi_dadd+0x568>
10000b74:	2340      	movs	r3, #64	; 0x40
10000b76:	1a9b      	subs	r3, r3, r2
10000b78:	4099      	lsls	r1, r3
10000b7a:	0008      	movs	r0, r1
10000b7c:	1e43      	subs	r3, r0, #1
10000b7e:	4198      	sbcs	r0, r3
10000b80:	2100      	movs	r1, #0
10000b82:	4320      	orrs	r0, r4
10000b84:	e7d7      	b.n	10000b36 <__aeabi_dadd+0x522>
10000b86:	1ae4      	subs	r4, r4, r3
10000b88:	4b19      	ldr	r3, [pc, #100]	; (10000bf0 <__aeabi_dadd+0x5dc>)
10000b8a:	400b      	ands	r3, r1
10000b8c:	075d      	lsls	r5, r3, #29
10000b8e:	08df      	lsrs	r7, r3, #3
10000b90:	e5b6      	b.n	10000700 <__aeabi_dadd+0xec>
10000b92:	1ae4      	subs	r4, r4, r3
10000b94:	4b16      	ldr	r3, [pc, #88]	; (10000bf0 <__aeabi_dadd+0x5dc>)
10000b96:	0028      	movs	r0, r5
10000b98:	4019      	ands	r1, r3
10000b9a:	e5ea      	b.n	10000772 <__aeabi_dadd+0x15e>
10000b9c:	0019      	movs	r1, r3
10000b9e:	0010      	movs	r0, r2
10000ba0:	e65b      	b.n	1000085a <__aeabi_dadd+0x246>
10000ba2:	0019      	movs	r1, r3
10000ba4:	0010      	movs	r0, r2
10000ba6:	e5e4      	b.n	10000772 <__aeabi_dadd+0x15e>
10000ba8:	002c      	movs	r4, r5
10000baa:	e5e2      	b.n	10000772 <__aeabi_dadd+0x15e>
10000bac:	0019      	movs	r1, r3
10000bae:	0010      	movs	r0, r2
10000bb0:	9c02      	ldr	r4, [sp, #8]
10000bb2:	e754      	b.n	10000a5e <__aeabi_dadd+0x44a>
10000bb4:	074a      	lsls	r2, r1, #29
10000bb6:	08c7      	lsrs	r7, r0, #3
10000bb8:	4317      	orrs	r7, r2
10000bba:	003d      	movs	r5, r7
10000bbc:	08c9      	lsrs	r1, r1, #3
10000bbe:	429c      	cmp	r4, r3
10000bc0:	d10f      	bne.n	10000be2 <__aeabi_dadd+0x5ce>
10000bc2:	430d      	orrs	r5, r1
10000bc4:	d104      	bne.n	10000bd0 <__aeabi_dadd+0x5bc>
10000bc6:	002f      	movs	r7, r5
10000bc8:	e59a      	b.n	10000700 <__aeabi_dadd+0xec>
10000bca:	2180      	movs	r1, #128	; 0x80
10000bcc:	9701      	str	r7, [sp, #4]
10000bce:	0309      	lsls	r1, r1, #12
10000bd0:	003d      	movs	r5, r7
10000bd2:	2780      	movs	r7, #128	; 0x80
10000bd4:	033f      	lsls	r7, r7, #12
10000bd6:	4c04      	ldr	r4, [pc, #16]	; (10000be8 <__aeabi_dadd+0x5d4>)
10000bd8:	430f      	orrs	r7, r1
10000bda:	e591      	b.n	10000700 <__aeabi_dadd+0xec>
10000bdc:	003d      	movs	r5, r7
10000bde:	9701      	str	r7, [sp, #4]
10000be0:	e58e      	b.n	10000700 <__aeabi_dadd+0xec>
10000be2:	000f      	movs	r7, r1
10000be4:	e58c      	b.n	10000700 <__aeabi_dadd+0xec>
10000be6:	46c0      	nop			; (mov r8, r8)
10000be8:	000007ff 	.word	0x000007ff
10000bec:	000007fe 	.word	0x000007fe
10000bf0:	ff7fffff 	.word	0xff7fffff

10000bf4 <__eqdf2>:
10000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10000bf6:	000d      	movs	r5, r1
10000bf8:	b087      	sub	sp, #28
10000bfa:	9200      	str	r2, [sp, #0]
10000bfc:	9301      	str	r3, [sp, #4]
10000bfe:	0004      	movs	r4, r0
10000c00:	9004      	str	r0, [sp, #16]
10000c02:	9801      	ldr	r0, [sp, #4]
10000c04:	0feb      	lsrs	r3, r5, #31
10000c06:	0046      	lsls	r6, r0, #1
10000c08:	0fc7      	lsrs	r7, r0, #31
10000c0a:	481a      	ldr	r0, [pc, #104]	; (10000c74 <__eqdf2+0x80>)
10000c0c:	9303      	str	r3, [sp, #12]
10000c0e:	4684      	mov	ip, r0
10000c10:	9b00      	ldr	r3, [sp, #0]
10000c12:	0309      	lsls	r1, r1, #12
10000c14:	9305      	str	r3, [sp, #20]
10000c16:	9b01      	ldr	r3, [sp, #4]
10000c18:	006a      	lsls	r2, r5, #1
10000c1a:	031b      	lsls	r3, r3, #12
10000c1c:	2001      	movs	r0, #1
10000c1e:	0b09      	lsrs	r1, r1, #12
10000c20:	0d52      	lsrs	r2, r2, #21
10000c22:	0b1b      	lsrs	r3, r3, #12
10000c24:	0d76      	lsrs	r6, r6, #21
10000c26:	4562      	cmp	r2, ip
10000c28:	d003      	beq.n	10000c32 <__eqdf2+0x3e>
10000c2a:	4566      	cmp	r6, ip
10000c2c:	d10d      	bne.n	10000c4a <__eqdf2+0x56>
10000c2e:	b007      	add	sp, #28
10000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c32:	4296      	cmp	r6, r2
10000c34:	d1fb      	bne.n	10000c2e <__eqdf2+0x3a>
10000c36:	9a00      	ldr	r2, [sp, #0]
10000c38:	430b      	orrs	r3, r1
10000c3a:	4313      	orrs	r3, r2
10000c3c:	4323      	orrs	r3, r4
10000c3e:	d1f6      	bne.n	10000c2e <__eqdf2+0x3a>
10000c40:	9b03      	ldr	r3, [sp, #12]
10000c42:	1bd8      	subs	r0, r3, r7
10000c44:	1e43      	subs	r3, r0, #1
10000c46:	4198      	sbcs	r0, r3
10000c48:	e7f1      	b.n	10000c2e <__eqdf2+0x3a>
10000c4a:	2001      	movs	r0, #1
10000c4c:	42b2      	cmp	r2, r6
10000c4e:	d1ee      	bne.n	10000c2e <__eqdf2+0x3a>
10000c50:	4299      	cmp	r1, r3
10000c52:	d1ec      	bne.n	10000c2e <__eqdf2+0x3a>
10000c54:	9b04      	ldr	r3, [sp, #16]
10000c56:	9e05      	ldr	r6, [sp, #20]
10000c58:	42b3      	cmp	r3, r6
10000c5a:	d1e8      	bne.n	10000c2e <__eqdf2+0x3a>
10000c5c:	9b03      	ldr	r3, [sp, #12]
10000c5e:	42bb      	cmp	r3, r7
10000c60:	d006      	beq.n	10000c70 <__eqdf2+0x7c>
10000c62:	2a00      	cmp	r2, #0
10000c64:	d1e3      	bne.n	10000c2e <__eqdf2+0x3a>
10000c66:	4321      	orrs	r1, r4
10000c68:	1e4b      	subs	r3, r1, #1
10000c6a:	4199      	sbcs	r1, r3
10000c6c:	0008      	movs	r0, r1
10000c6e:	e7de      	b.n	10000c2e <__eqdf2+0x3a>
10000c70:	2000      	movs	r0, #0
10000c72:	e7dc      	b.n	10000c2e <__eqdf2+0x3a>
10000c74:	000007ff 	.word	0x000007ff

10000c78 <__gedf2>:
10000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c7a:	b087      	sub	sp, #28
10000c7c:	9000      	str	r0, [sp, #0]
10000c7e:	9101      	str	r1, [sp, #4]
10000c80:	001d      	movs	r5, r3
10000c82:	9b00      	ldr	r3, [sp, #0]
10000c84:	0014      	movs	r4, r2
10000c86:	9304      	str	r3, [sp, #16]
10000c88:	9b01      	ldr	r3, [sp, #4]
10000c8a:	0329      	lsls	r1, r5, #12
10000c8c:	031a      	lsls	r2, r3, #12
10000c8e:	0b13      	lsrs	r3, r2, #12
10000c90:	4a33      	ldr	r2, [pc, #204]	; (10000d60 <__gedf2+0xe8>)
10000c92:	9303      	str	r3, [sp, #12]
10000c94:	4694      	mov	ip, r2
10000c96:	9b01      	ldr	r3, [sp, #4]
10000c98:	0068      	lsls	r0, r5, #1
10000c9a:	005f      	lsls	r7, r3, #1
10000c9c:	0d7b      	lsrs	r3, r7, #21
10000c9e:	9302      	str	r3, [sp, #8]
10000ca0:	9a02      	ldr	r2, [sp, #8]
10000ca2:	9b01      	ldr	r3, [sp, #4]
10000ca4:	9405      	str	r4, [sp, #20]
10000ca6:	0fdb      	lsrs	r3, r3, #31
10000ca8:	0b09      	lsrs	r1, r1, #12
10000caa:	0d40      	lsrs	r0, r0, #21
10000cac:	0fee      	lsrs	r6, r5, #31
10000cae:	4562      	cmp	r2, ip
10000cb0:	d112      	bne.n	10000cd8 <__gedf2+0x60>
10000cb2:	9a00      	ldr	r2, [sp, #0]
10000cb4:	9f03      	ldr	r7, [sp, #12]
10000cb6:	4317      	orrs	r7, r2
10000cb8:	d14f      	bne.n	10000d5a <__gedf2+0xe2>
10000cba:	9a02      	ldr	r2, [sp, #8]
10000cbc:	4290      	cmp	r0, r2
10000cbe:	d004      	beq.n	10000cca <__gedf2+0x52>
10000cc0:	2001      	movs	r0, #1
10000cc2:	2b00      	cmp	r3, #0
10000cc4:	d006      	beq.n	10000cd4 <__gedf2+0x5c>
10000cc6:	3802      	subs	r0, #2
10000cc8:	e004      	b.n	10000cd4 <__gedf2+0x5c>
10000cca:	4321      	orrs	r1, r4
10000ccc:	1e08      	subs	r0, r1, #0
10000cce:	d144      	bne.n	10000d5a <__gedf2+0xe2>
10000cd0:	42b3      	cmp	r3, r6
10000cd2:	d1f5      	bne.n	10000cc0 <__gedf2+0x48>
10000cd4:	b007      	add	sp, #28
10000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000cd8:	4560      	cmp	r0, ip
10000cda:	d111      	bne.n	10000d00 <__gedf2+0x88>
10000cdc:	4321      	orrs	r1, r4
10000cde:	d13c      	bne.n	10000d5a <__gedf2+0xe2>
10000ce0:	9a02      	ldr	r2, [sp, #8]
10000ce2:	2a00      	cmp	r2, #0
10000ce4:	d004      	beq.n	10000cf0 <__gedf2+0x78>
10000ce6:	42b3      	cmp	r3, r6
10000ce8:	d1ea      	bne.n	10000cc0 <__gedf2+0x48>
10000cea:	1e18      	subs	r0, r3, #0
10000cec:	d1f2      	bne.n	10000cd4 <__gedf2+0x5c>
10000cee:	e005      	b.n	10000cfc <__gedf2+0x84>
10000cf0:	9a00      	ldr	r2, [sp, #0]
10000cf2:	9903      	ldr	r1, [sp, #12]
10000cf4:	4311      	orrs	r1, r2
10000cf6:	d1f6      	bne.n	10000ce6 <__gedf2+0x6e>
10000cf8:	1e30      	subs	r0, r6, #0
10000cfa:	d1eb      	bne.n	10000cd4 <__gedf2+0x5c>
10000cfc:	2001      	movs	r0, #1
10000cfe:	e02d      	b.n	10000d5c <__gedf2+0xe4>
10000d00:	9a02      	ldr	r2, [sp, #8]
10000d02:	2a00      	cmp	r2, #0
10000d04:	d017      	beq.n	10000d36 <__gedf2+0xbe>
10000d06:	2800      	cmp	r0, #0
10000d08:	d0da      	beq.n	10000cc0 <__gedf2+0x48>
10000d0a:	42b3      	cmp	r3, r6
10000d0c:	d1d8      	bne.n	10000cc0 <__gedf2+0x48>
10000d0e:	9a02      	ldr	r2, [sp, #8]
10000d10:	4282      	cmp	r2, r0
10000d12:	dcd5      	bgt.n	10000cc0 <__gedf2+0x48>
10000d14:	9a02      	ldr	r2, [sp, #8]
10000d16:	4282      	cmp	r2, r0
10000d18:	dbe7      	blt.n	10000cea <__gedf2+0x72>
10000d1a:	9a03      	ldr	r2, [sp, #12]
10000d1c:	428a      	cmp	r2, r1
10000d1e:	d8cf      	bhi.n	10000cc0 <__gedf2+0x48>
10000d20:	d1e3      	bne.n	10000cea <__gedf2+0x72>
10000d22:	9a04      	ldr	r2, [sp, #16]
10000d24:	9905      	ldr	r1, [sp, #20]
10000d26:	428a      	cmp	r2, r1
10000d28:	d8ca      	bhi.n	10000cc0 <__gedf2+0x48>
10000d2a:	9a04      	ldr	r2, [sp, #16]
10000d2c:	9905      	ldr	r1, [sp, #20]
10000d2e:	2000      	movs	r0, #0
10000d30:	428a      	cmp	r2, r1
10000d32:	d2cf      	bcs.n	10000cd4 <__gedf2+0x5c>
10000d34:	e7d9      	b.n	10000cea <__gedf2+0x72>
10000d36:	9f00      	ldr	r7, [sp, #0]
10000d38:	9a03      	ldr	r2, [sp, #12]
10000d3a:	4317      	orrs	r7, r2
10000d3c:	2800      	cmp	r0, #0
10000d3e:	d002      	beq.n	10000d46 <__gedf2+0xce>
10000d40:	2f00      	cmp	r7, #0
10000d42:	d0d9      	beq.n	10000cf8 <__gedf2+0x80>
10000d44:	e7cf      	b.n	10000ce6 <__gedf2+0x6e>
10000d46:	430c      	orrs	r4, r1
10000d48:	d004      	beq.n	10000d54 <__gedf2+0xdc>
10000d4a:	2f00      	cmp	r7, #0
10000d4c:	d0d4      	beq.n	10000cf8 <__gedf2+0x80>
10000d4e:	42b3      	cmp	r3, r6
10000d50:	d0e3      	beq.n	10000d1a <__gedf2+0xa2>
10000d52:	e7b5      	b.n	10000cc0 <__gedf2+0x48>
10000d54:	2f00      	cmp	r7, #0
10000d56:	d0bd      	beq.n	10000cd4 <__gedf2+0x5c>
10000d58:	e7b2      	b.n	10000cc0 <__gedf2+0x48>
10000d5a:	2002      	movs	r0, #2
10000d5c:	4240      	negs	r0, r0
10000d5e:	e7b9      	b.n	10000cd4 <__gedf2+0x5c>
10000d60:	000007ff 	.word	0x000007ff

10000d64 <__ledf2>:
10000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d66:	b087      	sub	sp, #28
10000d68:	9000      	str	r0, [sp, #0]
10000d6a:	9101      	str	r1, [sp, #4]
10000d6c:	001d      	movs	r5, r3
10000d6e:	9b00      	ldr	r3, [sp, #0]
10000d70:	0014      	movs	r4, r2
10000d72:	9304      	str	r3, [sp, #16]
10000d74:	9b01      	ldr	r3, [sp, #4]
10000d76:	0068      	lsls	r0, r5, #1
10000d78:	031a      	lsls	r2, r3, #12
10000d7a:	0b13      	lsrs	r3, r2, #12
10000d7c:	4a34      	ldr	r2, [pc, #208]	; (10000e50 <__ledf2+0xec>)
10000d7e:	9303      	str	r3, [sp, #12]
10000d80:	4694      	mov	ip, r2
10000d82:	9b01      	ldr	r3, [sp, #4]
10000d84:	9405      	str	r4, [sp, #20]
10000d86:	005f      	lsls	r7, r3, #1
10000d88:	0d7b      	lsrs	r3, r7, #21
10000d8a:	9302      	str	r3, [sp, #8]
10000d8c:	9b01      	ldr	r3, [sp, #4]
10000d8e:	9a02      	ldr	r2, [sp, #8]
10000d90:	0fd9      	lsrs	r1, r3, #31
10000d92:	032b      	lsls	r3, r5, #12
10000d94:	0b1b      	lsrs	r3, r3, #12
10000d96:	0d40      	lsrs	r0, r0, #21
10000d98:	0fee      	lsrs	r6, r5, #31
10000d9a:	4562      	cmp	r2, ip
10000d9c:	d113      	bne.n	10000dc6 <__ledf2+0x62>
10000d9e:	9a00      	ldr	r2, [sp, #0]
10000da0:	9f03      	ldr	r7, [sp, #12]
10000da2:	4317      	orrs	r7, r2
10000da4:	d152      	bne.n	10000e4c <__ledf2+0xe8>
10000da6:	9a02      	ldr	r2, [sp, #8]
10000da8:	4290      	cmp	r0, r2
10000daa:	d004      	beq.n	10000db6 <__ledf2+0x52>
10000dac:	2001      	movs	r0, #1
10000dae:	2900      	cmp	r1, #0
10000db0:	d007      	beq.n	10000dc2 <__ledf2+0x5e>
10000db2:	3802      	subs	r0, #2
10000db4:	e005      	b.n	10000dc2 <__ledf2+0x5e>
10000db6:	2002      	movs	r0, #2
10000db8:	4323      	orrs	r3, r4
10000dba:	d102      	bne.n	10000dc2 <__ledf2+0x5e>
10000dbc:	0018      	movs	r0, r3
10000dbe:	42b1      	cmp	r1, r6
10000dc0:	d1f4      	bne.n	10000dac <__ledf2+0x48>
10000dc2:	b007      	add	sp, #28
10000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000dc6:	4560      	cmp	r0, ip
10000dc8:	d113      	bne.n	10000df2 <__ledf2+0x8e>
10000dca:	2002      	movs	r0, #2
10000dcc:	4323      	orrs	r3, r4
10000dce:	d1f8      	bne.n	10000dc2 <__ledf2+0x5e>
10000dd0:	9b02      	ldr	r3, [sp, #8]
10000dd2:	2b00      	cmp	r3, #0
10000dd4:	d004      	beq.n	10000de0 <__ledf2+0x7c>
10000dd6:	42b1      	cmp	r1, r6
10000dd8:	d1e8      	bne.n	10000dac <__ledf2+0x48>
10000dda:	1e08      	subs	r0, r1, #0
10000ddc:	d1f1      	bne.n	10000dc2 <__ledf2+0x5e>
10000dde:	e005      	b.n	10000dec <__ledf2+0x88>
10000de0:	9b00      	ldr	r3, [sp, #0]
10000de2:	9a03      	ldr	r2, [sp, #12]
10000de4:	431a      	orrs	r2, r3
10000de6:	d1f6      	bne.n	10000dd6 <__ledf2+0x72>
10000de8:	1e30      	subs	r0, r6, #0
10000dea:	d1ea      	bne.n	10000dc2 <__ledf2+0x5e>
10000dec:	2001      	movs	r0, #1
10000dee:	4240      	negs	r0, r0
10000df0:	e7e7      	b.n	10000dc2 <__ledf2+0x5e>
10000df2:	9a02      	ldr	r2, [sp, #8]
10000df4:	2a00      	cmp	r2, #0
10000df6:	d017      	beq.n	10000e28 <__ledf2+0xc4>
10000df8:	2800      	cmp	r0, #0
10000dfa:	d0d7      	beq.n	10000dac <__ledf2+0x48>
10000dfc:	42b1      	cmp	r1, r6
10000dfe:	d1d5      	bne.n	10000dac <__ledf2+0x48>
10000e00:	9a02      	ldr	r2, [sp, #8]
10000e02:	4282      	cmp	r2, r0
10000e04:	dcd2      	bgt.n	10000dac <__ledf2+0x48>
10000e06:	9a02      	ldr	r2, [sp, #8]
10000e08:	4282      	cmp	r2, r0
10000e0a:	dbe6      	blt.n	10000dda <__ledf2+0x76>
10000e0c:	9a03      	ldr	r2, [sp, #12]
10000e0e:	429a      	cmp	r2, r3
10000e10:	d8cc      	bhi.n	10000dac <__ledf2+0x48>
10000e12:	d1e2      	bne.n	10000dda <__ledf2+0x76>
10000e14:	9b04      	ldr	r3, [sp, #16]
10000e16:	9a05      	ldr	r2, [sp, #20]
10000e18:	4293      	cmp	r3, r2
10000e1a:	d8c7      	bhi.n	10000dac <__ledf2+0x48>
10000e1c:	9b04      	ldr	r3, [sp, #16]
10000e1e:	9a05      	ldr	r2, [sp, #20]
10000e20:	2000      	movs	r0, #0
10000e22:	4293      	cmp	r3, r2
10000e24:	d2cd      	bcs.n	10000dc2 <__ledf2+0x5e>
10000e26:	e7d8      	b.n	10000dda <__ledf2+0x76>
10000e28:	9f00      	ldr	r7, [sp, #0]
10000e2a:	9a03      	ldr	r2, [sp, #12]
10000e2c:	4317      	orrs	r7, r2
10000e2e:	2800      	cmp	r0, #0
10000e30:	d002      	beq.n	10000e38 <__ledf2+0xd4>
10000e32:	2f00      	cmp	r7, #0
10000e34:	d0d8      	beq.n	10000de8 <__ledf2+0x84>
10000e36:	e7ce      	b.n	10000dd6 <__ledf2+0x72>
10000e38:	431c      	orrs	r4, r3
10000e3a:	d004      	beq.n	10000e46 <__ledf2+0xe2>
10000e3c:	2f00      	cmp	r7, #0
10000e3e:	d0d3      	beq.n	10000de8 <__ledf2+0x84>
10000e40:	42b1      	cmp	r1, r6
10000e42:	d0e3      	beq.n	10000e0c <__ledf2+0xa8>
10000e44:	e7b2      	b.n	10000dac <__ledf2+0x48>
10000e46:	2f00      	cmp	r7, #0
10000e48:	d0bb      	beq.n	10000dc2 <__ledf2+0x5e>
10000e4a:	e7af      	b.n	10000dac <__ledf2+0x48>
10000e4c:	2002      	movs	r0, #2
10000e4e:	e7b8      	b.n	10000dc2 <__ledf2+0x5e>
10000e50:	000007ff 	.word	0x000007ff

10000e54 <__aeabi_dmul>:
10000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e56:	b08b      	sub	sp, #44	; 0x2c
10000e58:	9200      	str	r2, [sp, #0]
10000e5a:	9301      	str	r3, [sp, #4]
10000e5c:	030d      	lsls	r5, r1, #12
10000e5e:	004b      	lsls	r3, r1, #1
10000e60:	0fca      	lsrs	r2, r1, #31
10000e62:	0006      	movs	r6, r0
10000e64:	0b2d      	lsrs	r5, r5, #12
10000e66:	0d5b      	lsrs	r3, r3, #21
10000e68:	9205      	str	r2, [sp, #20]
10000e6a:	d100      	bne.n	10000e6e <__aeabi_dmul+0x1a>
10000e6c:	e114      	b.n	10001098 <__aeabi_dmul+0x244>
10000e6e:	4acf      	ldr	r2, [pc, #828]	; (100011ac <__aeabi_dmul+0x358>)
10000e70:	4293      	cmp	r3, r2
10000e72:	d100      	bne.n	10000e76 <__aeabi_dmul+0x22>
10000e74:	e138      	b.n	100010e8 <__aeabi_dmul+0x294>
10000e76:	00ed      	lsls	r5, r5, #3
10000e78:	0f42      	lsrs	r2, r0, #29
10000e7a:	432a      	orrs	r2, r5
10000e7c:	2580      	movs	r5, #128	; 0x80
10000e7e:	042d      	lsls	r5, r5, #16
10000e80:	4315      	orrs	r5, r2
10000e82:	4acb      	ldr	r2, [pc, #812]	; (100011b0 <__aeabi_dmul+0x35c>)
10000e84:	00c4      	lsls	r4, r0, #3
10000e86:	189b      	adds	r3, r3, r2
10000e88:	9303      	str	r3, [sp, #12]
10000e8a:	2300      	movs	r3, #0
10000e8c:	9302      	str	r3, [sp, #8]
10000e8e:	9b01      	ldr	r3, [sp, #4]
10000e90:	9800      	ldr	r0, [sp, #0]
10000e92:	031e      	lsls	r6, r3, #12
10000e94:	005a      	lsls	r2, r3, #1
10000e96:	0fdb      	lsrs	r3, r3, #31
10000e98:	0b36      	lsrs	r6, r6, #12
10000e9a:	0d52      	lsrs	r2, r2, #21
10000e9c:	9304      	str	r3, [sp, #16]
10000e9e:	d100      	bne.n	10000ea2 <__aeabi_dmul+0x4e>
10000ea0:	e131      	b.n	10001106 <__aeabi_dmul+0x2b2>
10000ea2:	4bc2      	ldr	r3, [pc, #776]	; (100011ac <__aeabi_dmul+0x358>)
10000ea4:	429a      	cmp	r2, r3
10000ea6:	d100      	bne.n	10000eaa <__aeabi_dmul+0x56>
10000ea8:	e153      	b.n	10001152 <__aeabi_dmul+0x2fe>
10000eaa:	0f43      	lsrs	r3, r0, #29
10000eac:	00f6      	lsls	r6, r6, #3
10000eae:	4333      	orrs	r3, r6
10000eb0:	2680      	movs	r6, #128	; 0x80
10000eb2:	49bf      	ldr	r1, [pc, #764]	; (100011b0 <__aeabi_dmul+0x35c>)
10000eb4:	0436      	lsls	r6, r6, #16
10000eb6:	431e      	orrs	r6, r3
10000eb8:	00c3      	lsls	r3, r0, #3
10000eba:	1850      	adds	r0, r2, r1
10000ebc:	2200      	movs	r2, #0
10000ebe:	9905      	ldr	r1, [sp, #20]
10000ec0:	9f04      	ldr	r7, [sp, #16]
10000ec2:	4079      	eors	r1, r7
10000ec4:	9100      	str	r1, [sp, #0]
10000ec6:	9903      	ldr	r1, [sp, #12]
10000ec8:	1841      	adds	r1, r0, r1
10000eca:	9106      	str	r1, [sp, #24]
10000ecc:	3101      	adds	r1, #1
10000ece:	9103      	str	r1, [sp, #12]
10000ed0:	9902      	ldr	r1, [sp, #8]
10000ed2:	0088      	lsls	r0, r1, #2
10000ed4:	4310      	orrs	r0, r2
10000ed6:	280a      	cmp	r0, #10
10000ed8:	dd00      	ble.n	10000edc <__aeabi_dmul+0x88>
10000eda:	e173      	b.n	100011c4 <__aeabi_dmul+0x370>
10000edc:	2802      	cmp	r0, #2
10000ede:	dd00      	ble.n	10000ee2 <__aeabi_dmul+0x8e>
10000ee0:	e146      	b.n	10001170 <__aeabi_dmul+0x31c>
10000ee2:	3801      	subs	r0, #1
10000ee4:	2801      	cmp	r0, #1
10000ee6:	d800      	bhi.n	10000eea <__aeabi_dmul+0x96>
10000ee8:	e155      	b.n	10001196 <__aeabi_dmul+0x342>
10000eea:	0c19      	lsrs	r1, r3, #16
10000eec:	b29b      	uxth	r3, r3
10000eee:	9102      	str	r1, [sp, #8]
10000ef0:	0019      	movs	r1, r3
10000ef2:	0c22      	lsrs	r2, r4, #16
10000ef4:	b2a4      	uxth	r4, r4
10000ef6:	4351      	muls	r1, r2
10000ef8:	0020      	movs	r0, r4
10000efa:	468c      	mov	ip, r1
10000efc:	9f02      	ldr	r7, [sp, #8]
10000efe:	9902      	ldr	r1, [sp, #8]
10000f00:	4358      	muls	r0, r3
10000f02:	4351      	muls	r1, r2
10000f04:	4367      	muls	r7, r4
10000f06:	9105      	str	r1, [sp, #20]
10000f08:	4467      	add	r7, ip
10000f0a:	0c01      	lsrs	r1, r0, #16
10000f0c:	19c9      	adds	r1, r1, r7
10000f0e:	9004      	str	r0, [sp, #16]
10000f10:	458c      	cmp	ip, r1
10000f12:	d905      	bls.n	10000f20 <__aeabi_dmul+0xcc>
10000f14:	2080      	movs	r0, #128	; 0x80
10000f16:	0240      	lsls	r0, r0, #9
10000f18:	4684      	mov	ip, r0
10000f1a:	9f05      	ldr	r7, [sp, #20]
10000f1c:	4467      	add	r7, ip
10000f1e:	9705      	str	r7, [sp, #20]
10000f20:	0c08      	lsrs	r0, r1, #16
10000f22:	4684      	mov	ip, r0
10000f24:	4668      	mov	r0, sp
10000f26:	8a00      	ldrh	r0, [r0, #16]
10000f28:	0409      	lsls	r1, r1, #16
10000f2a:	1809      	adds	r1, r1, r0
10000f2c:	9109      	str	r1, [sp, #36]	; 0x24
10000f2e:	0c31      	lsrs	r1, r6, #16
10000f30:	b2b6      	uxth	r6, r6
10000f32:	9104      	str	r1, [sp, #16]
10000f34:	0030      	movs	r0, r6
10000f36:	0021      	movs	r1, r4
10000f38:	9f04      	ldr	r7, [sp, #16]
10000f3a:	4350      	muls	r0, r2
10000f3c:	437c      	muls	r4, r7
10000f3e:	4371      	muls	r1, r6
10000f40:	437a      	muls	r2, r7
10000f42:	1824      	adds	r4, r4, r0
10000f44:	0c0f      	lsrs	r7, r1, #16
10000f46:	193c      	adds	r4, r7, r4
10000f48:	42a0      	cmp	r0, r4
10000f4a:	d902      	bls.n	10000f52 <__aeabi_dmul+0xfe>
10000f4c:	2080      	movs	r0, #128	; 0x80
10000f4e:	0240      	lsls	r0, r0, #9
10000f50:	1812      	adds	r2, r2, r0
10000f52:	0c20      	lsrs	r0, r4, #16
10000f54:	1882      	adds	r2, r0, r2
10000f56:	0424      	lsls	r4, r4, #16
10000f58:	b289      	uxth	r1, r1
10000f5a:	9207      	str	r2, [sp, #28]
10000f5c:	1862      	adds	r2, r4, r1
10000f5e:	9208      	str	r2, [sp, #32]
10000f60:	9908      	ldr	r1, [sp, #32]
10000f62:	4662      	mov	r2, ip
10000f64:	468c      	mov	ip, r1
10000f66:	0c29      	lsrs	r1, r5, #16
10000f68:	b2ad      	uxth	r5, r5
10000f6a:	0028      	movs	r0, r5
10000f6c:	9f02      	ldr	r7, [sp, #8]
10000f6e:	4358      	muls	r0, r3
10000f70:	436f      	muls	r7, r5
10000f72:	434b      	muls	r3, r1
10000f74:	4462      	add	r2, ip
10000f76:	4694      	mov	ip, r2
10000f78:	9c02      	ldr	r4, [sp, #8]
10000f7a:	18ff      	adds	r7, r7, r3
10000f7c:	0c02      	lsrs	r2, r0, #16
10000f7e:	19d2      	adds	r2, r2, r7
10000f80:	434c      	muls	r4, r1
10000f82:	4293      	cmp	r3, r2
10000f84:	d902      	bls.n	10000f8c <__aeabi_dmul+0x138>
10000f86:	2380      	movs	r3, #128	; 0x80
10000f88:	025b      	lsls	r3, r3, #9
10000f8a:	18e4      	adds	r4, r4, r3
10000f8c:	0c13      	lsrs	r3, r2, #16
10000f8e:	191b      	adds	r3, r3, r4
10000f90:	9302      	str	r3, [sp, #8]
10000f92:	002b      	movs	r3, r5
10000f94:	b280      	uxth	r0, r0
10000f96:	0412      	lsls	r2, r2, #16
10000f98:	1812      	adds	r2, r2, r0
10000f9a:	9804      	ldr	r0, [sp, #16]
10000f9c:	4373      	muls	r3, r6
10000f9e:	4345      	muls	r5, r0
10000fa0:	434e      	muls	r6, r1
10000fa2:	4341      	muls	r1, r0
10000fa4:	19a8      	adds	r0, r5, r6
10000fa6:	0c1d      	lsrs	r5, r3, #16
10000fa8:	182d      	adds	r5, r5, r0
10000faa:	42ae      	cmp	r6, r5
10000fac:	d902      	bls.n	10000fb4 <__aeabi_dmul+0x160>
10000fae:	2080      	movs	r0, #128	; 0x80
10000fb0:	0240      	lsls	r0, r0, #9
10000fb2:	1809      	adds	r1, r1, r0
10000fb4:	9c05      	ldr	r4, [sp, #20]
10000fb6:	4660      	mov	r0, ip
10000fb8:	46a4      	mov	ip, r4
10000fba:	9c08      	ldr	r4, [sp, #32]
10000fbc:	4460      	add	r0, ip
10000fbe:	42a0      	cmp	r0, r4
10000fc0:	41bf      	sbcs	r7, r7
10000fc2:	1880      	adds	r0, r0, r2
10000fc4:	4290      	cmp	r0, r2
10000fc6:	4192      	sbcs	r2, r2
10000fc8:	042e      	lsls	r6, r5, #16
10000fca:	b29b      	uxth	r3, r3
10000fcc:	18f6      	adds	r6, r6, r3
10000fce:	9b07      	ldr	r3, [sp, #28]
10000fd0:	427f      	negs	r7, r7
10000fd2:	18f6      	adds	r6, r6, r3
10000fd4:	4253      	negs	r3, r2
10000fd6:	9304      	str	r3, [sp, #16]
10000fd8:	9b02      	ldr	r3, [sp, #8]
10000fda:	19f4      	adds	r4, r6, r7
10000fdc:	469c      	mov	ip, r3
10000fde:	44a4      	add	ip, r4
10000fe0:	4663      	mov	r3, ip
10000fe2:	9a04      	ldr	r2, [sp, #16]
10000fe4:	42bc      	cmp	r4, r7
10000fe6:	41a4      	sbcs	r4, r4
10000fe8:	189b      	adds	r3, r3, r2
10000fea:	9a07      	ldr	r2, [sp, #28]
10000fec:	4264      	negs	r4, r4
10000fee:	4296      	cmp	r6, r2
10000ff0:	41b6      	sbcs	r6, r6
10000ff2:	9a02      	ldr	r2, [sp, #8]
10000ff4:	4276      	negs	r6, r6
10000ff6:	4334      	orrs	r4, r6
10000ff8:	0c2d      	lsrs	r5, r5, #16
10000ffa:	1964      	adds	r4, r4, r5
10000ffc:	4594      	cmp	ip, r2
10000ffe:	41ad      	sbcs	r5, r5
10001000:	9a04      	ldr	r2, [sp, #16]
10001002:	426d      	negs	r5, r5
10001004:	4293      	cmp	r3, r2
10001006:	4192      	sbcs	r2, r2
10001008:	4252      	negs	r2, r2
1000100a:	4315      	orrs	r5, r2
1000100c:	1964      	adds	r4, r4, r5
1000100e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001010:	1864      	adds	r4, r4, r1
10001012:	0241      	lsls	r1, r0, #9
10001014:	4311      	orrs	r1, r2
10001016:	1e4a      	subs	r2, r1, #1
10001018:	4191      	sbcs	r1, r2
1000101a:	0dc0      	lsrs	r0, r0, #23
1000101c:	0dde      	lsrs	r6, r3, #23
1000101e:	0264      	lsls	r4, r4, #9
10001020:	4301      	orrs	r1, r0
10001022:	025b      	lsls	r3, r3, #9
10001024:	4326      	orrs	r6, r4
10001026:	430b      	orrs	r3, r1
10001028:	01e4      	lsls	r4, r4, #7
1000102a:	d400      	bmi.n	1000102e <__aeabi_dmul+0x1da>
1000102c:	e0df      	b.n	100011ee <__aeabi_dmul+0x39a>
1000102e:	2101      	movs	r1, #1
10001030:	085a      	lsrs	r2, r3, #1
10001032:	400b      	ands	r3, r1
10001034:	431a      	orrs	r2, r3
10001036:	07f3      	lsls	r3, r6, #31
10001038:	40ce      	lsrs	r6, r1
1000103a:	4313      	orrs	r3, r2
1000103c:	9a03      	ldr	r2, [sp, #12]
1000103e:	495d      	ldr	r1, [pc, #372]	; (100011b4 <__aeabi_dmul+0x360>)
10001040:	1852      	adds	r2, r2, r1
10001042:	2a00      	cmp	r2, #0
10001044:	dc00      	bgt.n	10001048 <__aeabi_dmul+0x1f4>
10001046:	e0d5      	b.n	100011f4 <__aeabi_dmul+0x3a0>
10001048:	0759      	lsls	r1, r3, #29
1000104a:	d009      	beq.n	10001060 <__aeabi_dmul+0x20c>
1000104c:	210f      	movs	r1, #15
1000104e:	4019      	ands	r1, r3
10001050:	2904      	cmp	r1, #4
10001052:	d005      	beq.n	10001060 <__aeabi_dmul+0x20c>
10001054:	1d19      	adds	r1, r3, #4
10001056:	4299      	cmp	r1, r3
10001058:	419b      	sbcs	r3, r3
1000105a:	425b      	negs	r3, r3
1000105c:	18f6      	adds	r6, r6, r3
1000105e:	000b      	movs	r3, r1
10001060:	01f1      	lsls	r1, r6, #7
10001062:	d506      	bpl.n	10001072 <__aeabi_dmul+0x21e>
10001064:	2180      	movs	r1, #128	; 0x80
10001066:	00c9      	lsls	r1, r1, #3
10001068:	468c      	mov	ip, r1
1000106a:	4a53      	ldr	r2, [pc, #332]	; (100011b8 <__aeabi_dmul+0x364>)
1000106c:	4016      	ands	r6, r2
1000106e:	9a03      	ldr	r2, [sp, #12]
10001070:	4462      	add	r2, ip
10001072:	4952      	ldr	r1, [pc, #328]	; (100011bc <__aeabi_dmul+0x368>)
10001074:	428a      	cmp	r2, r1
10001076:	dd00      	ble.n	1000107a <__aeabi_dmul+0x226>
10001078:	e109      	b.n	1000128e <__aeabi_dmul+0x43a>
1000107a:	0774      	lsls	r4, r6, #29
1000107c:	08db      	lsrs	r3, r3, #3
1000107e:	431c      	orrs	r4, r3
10001080:	08f6      	lsrs	r6, r6, #3
10001082:	0513      	lsls	r3, r2, #20
10001084:	0336      	lsls	r6, r6, #12
10001086:	9a00      	ldr	r2, [sp, #0]
10001088:	0b36      	lsrs	r6, r6, #12
1000108a:	4333      	orrs	r3, r6
1000108c:	07d2      	lsls	r2, r2, #31
1000108e:	4313      	orrs	r3, r2
10001090:	0020      	movs	r0, r4
10001092:	0019      	movs	r1, r3
10001094:	b00b      	add	sp, #44	; 0x2c
10001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001098:	002c      	movs	r4, r5
1000109a:	4304      	orrs	r4, r0
1000109c:	d02b      	beq.n	100010f6 <__aeabi_dmul+0x2a2>
1000109e:	2d00      	cmp	r5, #0
100010a0:	d016      	beq.n	100010d0 <__aeabi_dmul+0x27c>
100010a2:	0028      	movs	r0, r5
100010a4:	f7ff f91a 	bl	100002dc <__clzsi2>
100010a8:	0004      	movs	r4, r0
100010aa:	0002      	movs	r2, r0
100010ac:	3c0b      	subs	r4, #11
100010ae:	231d      	movs	r3, #29
100010b0:	0030      	movs	r0, r6
100010b2:	1b1b      	subs	r3, r3, r4
100010b4:	0011      	movs	r1, r2
100010b6:	40d8      	lsrs	r0, r3
100010b8:	3908      	subs	r1, #8
100010ba:	408d      	lsls	r5, r1
100010bc:	0003      	movs	r3, r0
100010be:	432b      	orrs	r3, r5
100010c0:	0035      	movs	r5, r6
100010c2:	408d      	lsls	r5, r1
100010c4:	493e      	ldr	r1, [pc, #248]	; (100011c0 <__aeabi_dmul+0x36c>)
100010c6:	002c      	movs	r4, r5
100010c8:	1a8a      	subs	r2, r1, r2
100010ca:	001d      	movs	r5, r3
100010cc:	9203      	str	r2, [sp, #12]
100010ce:	e6dc      	b.n	10000e8a <__aeabi_dmul+0x36>
100010d0:	f7ff f904 	bl	100002dc <__clzsi2>
100010d4:	0004      	movs	r4, r0
100010d6:	0002      	movs	r2, r0
100010d8:	3415      	adds	r4, #21
100010da:	3220      	adds	r2, #32
100010dc:	2c1c      	cmp	r4, #28
100010de:	dde6      	ble.n	100010ae <__aeabi_dmul+0x25a>
100010e0:	0033      	movs	r3, r6
100010e2:	3808      	subs	r0, #8
100010e4:	4083      	lsls	r3, r0
100010e6:	e7ed      	b.n	100010c4 <__aeabi_dmul+0x270>
100010e8:	0004      	movs	r4, r0
100010ea:	432c      	orrs	r4, r5
100010ec:	d007      	beq.n	100010fe <__aeabi_dmul+0x2aa>
100010ee:	9303      	str	r3, [sp, #12]
100010f0:	0004      	movs	r4, r0
100010f2:	2303      	movs	r3, #3
100010f4:	e6ca      	b.n	10000e8c <__aeabi_dmul+0x38>
100010f6:	0025      	movs	r5, r4
100010f8:	2301      	movs	r3, #1
100010fa:	9403      	str	r4, [sp, #12]
100010fc:	e6c6      	b.n	10000e8c <__aeabi_dmul+0x38>
100010fe:	9303      	str	r3, [sp, #12]
10001100:	0025      	movs	r5, r4
10001102:	2302      	movs	r3, #2
10001104:	e6c2      	b.n	10000e8c <__aeabi_dmul+0x38>
10001106:	9b00      	ldr	r3, [sp, #0]
10001108:	4333      	orrs	r3, r6
1000110a:	d029      	beq.n	10001160 <__aeabi_dmul+0x30c>
1000110c:	2e00      	cmp	r6, #0
1000110e:	d014      	beq.n	1000113a <__aeabi_dmul+0x2e6>
10001110:	0030      	movs	r0, r6
10001112:	f7ff f8e3 	bl	100002dc <__clzsi2>
10001116:	0001      	movs	r1, r0
10001118:	0003      	movs	r3, r0
1000111a:	390b      	subs	r1, #11
1000111c:	221d      	movs	r2, #29
1000111e:	0018      	movs	r0, r3
10001120:	1a52      	subs	r2, r2, r1
10001122:	9900      	ldr	r1, [sp, #0]
10001124:	3808      	subs	r0, #8
10001126:	4086      	lsls	r6, r0
10001128:	40d1      	lsrs	r1, r2
1000112a:	4331      	orrs	r1, r6
1000112c:	9e00      	ldr	r6, [sp, #0]
1000112e:	4086      	lsls	r6, r0
10001130:	4823      	ldr	r0, [pc, #140]	; (100011c0 <__aeabi_dmul+0x36c>)
10001132:	1ac0      	subs	r0, r0, r3
10001134:	0033      	movs	r3, r6
10001136:	000e      	movs	r6, r1
10001138:	e6c0      	b.n	10000ebc <__aeabi_dmul+0x68>
1000113a:	f7ff f8cf 	bl	100002dc <__clzsi2>
1000113e:	0001      	movs	r1, r0
10001140:	0003      	movs	r3, r0
10001142:	3115      	adds	r1, #21
10001144:	3320      	adds	r3, #32
10001146:	291c      	cmp	r1, #28
10001148:	dde8      	ble.n	1000111c <__aeabi_dmul+0x2c8>
1000114a:	9900      	ldr	r1, [sp, #0]
1000114c:	3808      	subs	r0, #8
1000114e:	4081      	lsls	r1, r0
10001150:	e7ee      	b.n	10001130 <__aeabi_dmul+0x2dc>
10001152:	9b00      	ldr	r3, [sp, #0]
10001154:	4333      	orrs	r3, r6
10001156:	d007      	beq.n	10001168 <__aeabi_dmul+0x314>
10001158:	0003      	movs	r3, r0
1000115a:	0010      	movs	r0, r2
1000115c:	2203      	movs	r2, #3
1000115e:	e6ae      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001160:	001e      	movs	r6, r3
10001162:	0018      	movs	r0, r3
10001164:	2201      	movs	r2, #1
10001166:	e6aa      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001168:	0010      	movs	r0, r2
1000116a:	001e      	movs	r6, r3
1000116c:	2202      	movs	r2, #2
1000116e:	e6a6      	b.n	10000ebe <__aeabi_dmul+0x6a>
10001170:	2101      	movs	r1, #1
10001172:	4081      	lsls	r1, r0
10001174:	20a6      	movs	r0, #166	; 0xa6
10001176:	000f      	movs	r7, r1
10001178:	00c0      	lsls	r0, r0, #3
1000117a:	4007      	ands	r7, r0
1000117c:	4201      	tst	r1, r0
1000117e:	d127      	bne.n	100011d0 <__aeabi_dmul+0x37c>
10001180:	2090      	movs	r0, #144	; 0x90
10001182:	0080      	lsls	r0, r0, #2
10001184:	4201      	tst	r1, r0
10001186:	d177      	bne.n	10001278 <__aeabi_dmul+0x424>
10001188:	38b9      	subs	r0, #185	; 0xb9
1000118a:	38ff      	subs	r0, #255	; 0xff
1000118c:	4201      	tst	r1, r0
1000118e:	d100      	bne.n	10001192 <__aeabi_dmul+0x33e>
10001190:	e6ab      	b.n	10000eea <__aeabi_dmul+0x96>
10001192:	9904      	ldr	r1, [sp, #16]
10001194:	9100      	str	r1, [sp, #0]
10001196:	2a02      	cmp	r2, #2
10001198:	d079      	beq.n	1000128e <__aeabi_dmul+0x43a>
1000119a:	2a03      	cmp	r2, #3
1000119c:	d075      	beq.n	1000128a <__aeabi_dmul+0x436>
1000119e:	2a01      	cmp	r2, #1
100011a0:	d000      	beq.n	100011a4 <__aeabi_dmul+0x350>
100011a2:	e74b      	b.n	1000103c <__aeabi_dmul+0x1e8>
100011a4:	2600      	movs	r6, #0
100011a6:	0034      	movs	r4, r6
100011a8:	0032      	movs	r2, r6
100011aa:	e76a      	b.n	10001082 <__aeabi_dmul+0x22e>
100011ac:	000007ff 	.word	0x000007ff
100011b0:	fffffc01 	.word	0xfffffc01
100011b4:	000003ff 	.word	0x000003ff
100011b8:	feffffff 	.word	0xfeffffff
100011bc:	000007fe 	.word	0x000007fe
100011c0:	fffffc0d 	.word	0xfffffc0d
100011c4:	9905      	ldr	r1, [sp, #20]
100011c6:	9100      	str	r1, [sp, #0]
100011c8:	280f      	cmp	r0, #15
100011ca:	d005      	beq.n	100011d8 <__aeabi_dmul+0x384>
100011cc:	280b      	cmp	r0, #11
100011ce:	d0e0      	beq.n	10001192 <__aeabi_dmul+0x33e>
100011d0:	002e      	movs	r6, r5
100011d2:	0023      	movs	r3, r4
100011d4:	9a02      	ldr	r2, [sp, #8]
100011d6:	e7de      	b.n	10001196 <__aeabi_dmul+0x342>
100011d8:	2280      	movs	r2, #128	; 0x80
100011da:	0312      	lsls	r2, r2, #12
100011dc:	4215      	tst	r5, r2
100011de:	d04f      	beq.n	10001280 <__aeabi_dmul+0x42c>
100011e0:	4216      	tst	r6, r2
100011e2:	d14d      	bne.n	10001280 <__aeabi_dmul+0x42c>
100011e4:	0035      	movs	r5, r6
100011e6:	9a04      	ldr	r2, [sp, #16]
100011e8:	9200      	str	r2, [sp, #0]
100011ea:	001c      	movs	r4, r3
100011ec:	e048      	b.n	10001280 <__aeabi_dmul+0x42c>
100011ee:	9a06      	ldr	r2, [sp, #24]
100011f0:	9203      	str	r2, [sp, #12]
100011f2:	e723      	b.n	1000103c <__aeabi_dmul+0x1e8>
100011f4:	2001      	movs	r0, #1
100011f6:	1a80      	subs	r0, r0, r2
100011f8:	2838      	cmp	r0, #56	; 0x38
100011fa:	dcd3      	bgt.n	100011a4 <__aeabi_dmul+0x350>
100011fc:	281f      	cmp	r0, #31
100011fe:	dc27      	bgt.n	10001250 <__aeabi_dmul+0x3fc>
10001200:	4926      	ldr	r1, [pc, #152]	; (1000129c <__aeabi_dmul+0x448>)
10001202:	9a03      	ldr	r2, [sp, #12]
10001204:	468c      	mov	ip, r1
10001206:	001c      	movs	r4, r3
10001208:	4462      	add	r2, ip
1000120a:	0031      	movs	r1, r6
1000120c:	4093      	lsls	r3, r2
1000120e:	4091      	lsls	r1, r2
10001210:	40c4      	lsrs	r4, r0
10001212:	001a      	movs	r2, r3
10001214:	4321      	orrs	r1, r4
10001216:	1e53      	subs	r3, r2, #1
10001218:	419a      	sbcs	r2, r3
1000121a:	000b      	movs	r3, r1
1000121c:	40c6      	lsrs	r6, r0
1000121e:	4313      	orrs	r3, r2
10001220:	075a      	lsls	r2, r3, #29
10001222:	d009      	beq.n	10001238 <__aeabi_dmul+0x3e4>
10001224:	220f      	movs	r2, #15
10001226:	401a      	ands	r2, r3
10001228:	2a04      	cmp	r2, #4
1000122a:	d005      	beq.n	10001238 <__aeabi_dmul+0x3e4>
1000122c:	1d1a      	adds	r2, r3, #4
1000122e:	429a      	cmp	r2, r3
10001230:	419b      	sbcs	r3, r3
10001232:	425b      	negs	r3, r3
10001234:	18f6      	adds	r6, r6, r3
10001236:	0013      	movs	r3, r2
10001238:	2180      	movs	r1, #128	; 0x80
1000123a:	0030      	movs	r0, r6
1000123c:	0409      	lsls	r1, r1, #16
1000123e:	4008      	ands	r0, r1
10001240:	420e      	tst	r6, r1
10001242:	d127      	bne.n	10001294 <__aeabi_dmul+0x440>
10001244:	0774      	lsls	r4, r6, #29
10001246:	08db      	lsrs	r3, r3, #3
10001248:	0002      	movs	r2, r0
1000124a:	431c      	orrs	r4, r3
1000124c:	08f6      	lsrs	r6, r6, #3
1000124e:	e718      	b.n	10001082 <__aeabi_dmul+0x22e>
10001250:	211f      	movs	r1, #31
10001252:	4249      	negs	r1, r1
10001254:	1a8a      	subs	r2, r1, r2
10001256:	0031      	movs	r1, r6
10001258:	40d1      	lsrs	r1, r2
1000125a:	2200      	movs	r2, #0
1000125c:	2820      	cmp	r0, #32
1000125e:	d005      	beq.n	1000126c <__aeabi_dmul+0x418>
10001260:	480f      	ldr	r0, [pc, #60]	; (100012a0 <__aeabi_dmul+0x44c>)
10001262:	9a03      	ldr	r2, [sp, #12]
10001264:	4684      	mov	ip, r0
10001266:	4462      	add	r2, ip
10001268:	4096      	lsls	r6, r2
1000126a:	0032      	movs	r2, r6
1000126c:	4313      	orrs	r3, r2
1000126e:	1e5a      	subs	r2, r3, #1
10001270:	4193      	sbcs	r3, r2
10001272:	2600      	movs	r6, #0
10001274:	430b      	orrs	r3, r1
10001276:	e7d3      	b.n	10001220 <__aeabi_dmul+0x3cc>
10001278:	2580      	movs	r5, #128	; 0x80
1000127a:	003c      	movs	r4, r7
1000127c:	032d      	lsls	r5, r5, #12
1000127e:	9700      	str	r7, [sp, #0]
10001280:	2680      	movs	r6, #128	; 0x80
10001282:	0336      	lsls	r6, r6, #12
10001284:	432e      	orrs	r6, r5
10001286:	4a07      	ldr	r2, [pc, #28]	; (100012a4 <__aeabi_dmul+0x450>)
10001288:	e6fb      	b.n	10001082 <__aeabi_dmul+0x22e>
1000128a:	0035      	movs	r5, r6
1000128c:	e7ad      	b.n	100011ea <__aeabi_dmul+0x396>
1000128e:	2600      	movs	r6, #0
10001290:	0034      	movs	r4, r6
10001292:	e7f8      	b.n	10001286 <__aeabi_dmul+0x432>
10001294:	2600      	movs	r6, #0
10001296:	2201      	movs	r2, #1
10001298:	0034      	movs	r4, r6
1000129a:	e6f2      	b.n	10001082 <__aeabi_dmul+0x22e>
1000129c:	0000041e 	.word	0x0000041e
100012a0:	0000043e 	.word	0x0000043e
100012a4:	000007ff 	.word	0x000007ff

100012a8 <__aeabi_dsub>:
100012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100012aa:	b085      	sub	sp, #20
100012ac:	9200      	str	r2, [sp, #0]
100012ae:	9301      	str	r3, [sp, #4]
100012b0:	0fcb      	lsrs	r3, r1, #31
100012b2:	030d      	lsls	r5, r1, #12
100012b4:	9302      	str	r3, [sp, #8]
100012b6:	9b01      	ldr	r3, [sp, #4]
100012b8:	004c      	lsls	r4, r1, #1
100012ba:	0a6d      	lsrs	r5, r5, #9
100012bc:	0f41      	lsrs	r1, r0, #29
100012be:	4329      	orrs	r1, r5
100012c0:	005d      	lsls	r5, r3, #1
100012c2:	031e      	lsls	r6, r3, #12
100012c4:	0d6b      	lsrs	r3, r5, #21
100012c6:	469c      	mov	ip, r3
100012c8:	9b01      	ldr	r3, [sp, #4]
100012ca:	0a76      	lsrs	r6, r6, #9
100012cc:	0fdd      	lsrs	r5, r3, #31
100012ce:	9b00      	ldr	r3, [sp, #0]
100012d0:	9a00      	ldr	r2, [sp, #0]
100012d2:	0f5b      	lsrs	r3, r3, #29
100012d4:	4333      	orrs	r3, r6
100012d6:	4ebe      	ldr	r6, [pc, #760]	; (100015d0 <__aeabi_dsub+0x328>)
100012d8:	0d64      	lsrs	r4, r4, #21
100012da:	00c0      	lsls	r0, r0, #3
100012dc:	00d2      	lsls	r2, r2, #3
100012de:	45b4      	cmp	ip, r6
100012e0:	d123      	bne.n	1000132a <__aeabi_dsub+0x82>
100012e2:	001e      	movs	r6, r3
100012e4:	4316      	orrs	r6, r2
100012e6:	9603      	str	r6, [sp, #12]
100012e8:	9f03      	ldr	r7, [sp, #12]
100012ea:	4eba      	ldr	r6, [pc, #744]	; (100015d4 <__aeabi_dsub+0x32c>)
100012ec:	19a6      	adds	r6, r4, r6
100012ee:	2f00      	cmp	r7, #0
100012f0:	d00c      	beq.n	1000130c <__aeabi_dsub+0x64>
100012f2:	9f02      	ldr	r7, [sp, #8]
100012f4:	9500      	str	r5, [sp, #0]
100012f6:	42af      	cmp	r7, r5
100012f8:	d000      	beq.n	100012fc <__aeabi_dsub+0x54>
100012fa:	e1b5      	b.n	10001668 <__aeabi_dsub+0x3c0>
100012fc:	2e00      	cmp	r6, #0
100012fe:	d100      	bne.n	10001302 <__aeabi_dsub+0x5a>
10001300:	e104      	b.n	1000150c <__aeabi_dsub+0x264>
10001302:	2c00      	cmp	r4, #0
10001304:	d000      	beq.n	10001308 <__aeabi_dsub+0x60>
10001306:	e2ba      	b.n	1000187e <__aeabi_dsub+0x5d6>
10001308:	4664      	mov	r4, ip
1000130a:	e0b8      	b.n	1000147e <__aeabi_dsub+0x1d6>
1000130c:	2701      	movs	r7, #1
1000130e:	406f      	eors	r7, r5
10001310:	9d02      	ldr	r5, [sp, #8]
10001312:	9700      	str	r7, [sp, #0]
10001314:	42bd      	cmp	r5, r7
10001316:	d000      	beq.n	1000131a <__aeabi_dsub+0x72>
10001318:	e1af      	b.n	1000167a <__aeabi_dsub+0x3d2>
1000131a:	2e00      	cmp	r6, #0
1000131c:	d100      	bne.n	10001320 <__aeabi_dsub+0x78>
1000131e:	e0f5      	b.n	1000150c <__aeabi_dsub+0x264>
10001320:	2c00      	cmp	r4, #0
10001322:	d0f1      	beq.n	10001308 <__aeabi_dsub+0x60>
10001324:	9903      	ldr	r1, [sp, #12]
10001326:	0008      	movs	r0, r1
10001328:	e02f      	b.n	1000138a <__aeabi_dsub+0xe2>
1000132a:	2601      	movs	r6, #1
1000132c:	4075      	eors	r5, r6
1000132e:	9500      	str	r5, [sp, #0]
10001330:	4665      	mov	r5, ip
10001332:	9f02      	ldr	r7, [sp, #8]
10001334:	9e00      	ldr	r6, [sp, #0]
10001336:	1b65      	subs	r5, r4, r5
10001338:	42b7      	cmp	r7, r6
1000133a:	d000      	beq.n	1000133e <__aeabi_dsub+0x96>
1000133c:	e12e      	b.n	1000159c <__aeabi_dsub+0x2f4>
1000133e:	2d00      	cmp	r5, #0
10001340:	dc00      	bgt.n	10001344 <__aeabi_dsub+0x9c>
10001342:	e076      	b.n	10001432 <__aeabi_dsub+0x18a>
10001344:	4667      	mov	r7, ip
10001346:	2f00      	cmp	r7, #0
10001348:	d121      	bne.n	1000138e <__aeabi_dsub+0xe6>
1000134a:	001f      	movs	r7, r3
1000134c:	4317      	orrs	r7, r2
1000134e:	d100      	bne.n	10001352 <__aeabi_dsub+0xaa>
10001350:	e122      	b.n	10001598 <__aeabi_dsub+0x2f0>
10001352:	1e6f      	subs	r7, r5, #1
10001354:	2d01      	cmp	r5, #1
10001356:	d115      	bne.n	10001384 <__aeabi_dsub+0xdc>
10001358:	1882      	adds	r2, r0, r2
1000135a:	4282      	cmp	r2, r0
1000135c:	4180      	sbcs	r0, r0
1000135e:	18c9      	adds	r1, r1, r3
10001360:	4240      	negs	r0, r0
10001362:	1809      	adds	r1, r1, r0
10001364:	2401      	movs	r4, #1
10001366:	0010      	movs	r0, r2
10001368:	020b      	lsls	r3, r1, #8
1000136a:	d400      	bmi.n	1000136e <__aeabi_dsub+0xc6>
1000136c:	e096      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000136e:	2402      	movs	r4, #2
10001370:	4b99      	ldr	r3, [pc, #612]	; (100015d8 <__aeabi_dsub+0x330>)
10001372:	0842      	lsrs	r2, r0, #1
10001374:	400b      	ands	r3, r1
10001376:	2101      	movs	r1, #1
10001378:	4001      	ands	r1, r0
1000137a:	430a      	orrs	r2, r1
1000137c:	07d8      	lsls	r0, r3, #31
1000137e:	4310      	orrs	r0, r2
10001380:	0859      	lsrs	r1, r3, #1
10001382:	e08b      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001384:	4e92      	ldr	r6, [pc, #584]	; (100015d0 <__aeabi_dsub+0x328>)
10001386:	42b5      	cmp	r5, r6
10001388:	d122      	bne.n	100013d0 <__aeabi_dsub+0x128>
1000138a:	4c91      	ldr	r4, [pc, #580]	; (100015d0 <__aeabi_dsub+0x328>)
1000138c:	e086      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000138e:	4e90      	ldr	r6, [pc, #576]	; (100015d0 <__aeabi_dsub+0x328>)
10001390:	42b4      	cmp	r4, r6
10001392:	d100      	bne.n	10001396 <__aeabi_dsub+0xee>
10001394:	e082      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001396:	2600      	movs	r6, #0
10001398:	46b4      	mov	ip, r6
1000139a:	3601      	adds	r6, #1
1000139c:	2d38      	cmp	r5, #56	; 0x38
1000139e:	dc1a      	bgt.n	100013d6 <__aeabi_dsub+0x12e>
100013a0:	2680      	movs	r6, #128	; 0x80
100013a2:	002f      	movs	r7, r5
100013a4:	0436      	lsls	r6, r6, #16
100013a6:	4333      	orrs	r3, r6
100013a8:	2f1f      	cmp	r7, #31
100013aa:	dc31      	bgt.n	10001410 <__aeabi_dsub+0x168>
100013ac:	2520      	movs	r5, #32
100013ae:	001e      	movs	r6, r3
100013b0:	1bed      	subs	r5, r5, r7
100013b2:	40ae      	lsls	r6, r5
100013b4:	46b4      	mov	ip, r6
100013b6:	0016      	movs	r6, r2
100013b8:	9500      	str	r5, [sp, #0]
100013ba:	40fe      	lsrs	r6, r7
100013bc:	4665      	mov	r5, ip
100013be:	432e      	orrs	r6, r5
100013c0:	9d00      	ldr	r5, [sp, #0]
100013c2:	40fb      	lsrs	r3, r7
100013c4:	40aa      	lsls	r2, r5
100013c6:	1e55      	subs	r5, r2, #1
100013c8:	41aa      	sbcs	r2, r5
100013ca:	4316      	orrs	r6, r2
100013cc:	469c      	mov	ip, r3
100013ce:	e002      	b.n	100013d6 <__aeabi_dsub+0x12e>
100013d0:	2601      	movs	r6, #1
100013d2:	2f38      	cmp	r7, #56	; 0x38
100013d4:	dde8      	ble.n	100013a8 <__aeabi_dsub+0x100>
100013d6:	1836      	adds	r6, r6, r0
100013d8:	4286      	cmp	r6, r0
100013da:	4180      	sbcs	r0, r0
100013dc:	4461      	add	r1, ip
100013de:	4240      	negs	r0, r0
100013e0:	1809      	adds	r1, r1, r0
100013e2:	0030      	movs	r0, r6
100013e4:	020b      	lsls	r3, r1, #8
100013e6:	d559      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
100013e8:	2600      	movs	r6, #0
100013ea:	4b79      	ldr	r3, [pc, #484]	; (100015d0 <__aeabi_dsub+0x328>)
100013ec:	3401      	adds	r4, #1
100013ee:	46b4      	mov	ip, r6
100013f0:	429c      	cmp	r4, r3
100013f2:	d1bd      	bne.n	10001370 <__aeabi_dsub+0xc8>
100013f4:	4b79      	ldr	r3, [pc, #484]	; (100015dc <__aeabi_dsub+0x334>)
100013f6:	0524      	lsls	r4, r4, #20
100013f8:	401c      	ands	r4, r3
100013fa:	4663      	mov	r3, ip
100013fc:	031b      	lsls	r3, r3, #12
100013fe:	0b1b      	lsrs	r3, r3, #12
10001400:	431c      	orrs	r4, r3
10001402:	9b02      	ldr	r3, [sp, #8]
10001404:	0030      	movs	r0, r6
10001406:	07db      	lsls	r3, r3, #31
10001408:	431c      	orrs	r4, r3
1000140a:	0021      	movs	r1, r4
1000140c:	b005      	add	sp, #20
1000140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001410:	003d      	movs	r5, r7
10001412:	001e      	movs	r6, r3
10001414:	3d20      	subs	r5, #32
10001416:	40ee      	lsrs	r6, r5
10001418:	2500      	movs	r5, #0
1000141a:	2f20      	cmp	r7, #32
1000141c:	d003      	beq.n	10001426 <__aeabi_dsub+0x17e>
1000141e:	3540      	adds	r5, #64	; 0x40
10001420:	1bed      	subs	r5, r5, r7
10001422:	40ab      	lsls	r3, r5
10001424:	001d      	movs	r5, r3
10001426:	4315      	orrs	r5, r2
10001428:	1e6b      	subs	r3, r5, #1
1000142a:	419d      	sbcs	r5, r3
1000142c:	2300      	movs	r3, #0
1000142e:	432e      	orrs	r6, r5
10001430:	e7cc      	b.n	100013cc <__aeabi_dsub+0x124>
10001432:	2d00      	cmp	r5, #0
10001434:	d06a      	beq.n	1000150c <__aeabi_dsub+0x264>
10001436:	4665      	mov	r5, ip
10001438:	1b2d      	subs	r5, r5, r4
1000143a:	2c00      	cmp	r4, #0
1000143c:	d01e      	beq.n	1000147c <__aeabi_dsub+0x1d4>
1000143e:	2400      	movs	r4, #0
10001440:	2601      	movs	r6, #1
10001442:	2d38      	cmp	r5, #56	; 0x38
10001444:	dc12      	bgt.n	1000146c <__aeabi_dsub+0x1c4>
10001446:	2480      	movs	r4, #128	; 0x80
10001448:	0424      	lsls	r4, r4, #16
1000144a:	4321      	orrs	r1, r4
1000144c:	2d1f      	cmp	r5, #31
1000144e:	dc4b      	bgt.n	100014e8 <__aeabi_dsub+0x240>
10001450:	2420      	movs	r4, #32
10001452:	000f      	movs	r7, r1
10001454:	0006      	movs	r6, r0
10001456:	1b64      	subs	r4, r4, r5
10001458:	40a0      	lsls	r0, r4
1000145a:	40a7      	lsls	r7, r4
1000145c:	40ee      	lsrs	r6, r5
1000145e:	4337      	orrs	r7, r6
10001460:	0006      	movs	r6, r0
10001462:	40e9      	lsrs	r1, r5
10001464:	1e70      	subs	r0, r6, #1
10001466:	4186      	sbcs	r6, r0
10001468:	000c      	movs	r4, r1
1000146a:	433e      	orrs	r6, r7
1000146c:	18b0      	adds	r0, r6, r2
1000146e:	4290      	cmp	r0, r2
10001470:	4192      	sbcs	r2, r2
10001472:	18e4      	adds	r4, r4, r3
10001474:	4252      	negs	r2, r2
10001476:	18a1      	adds	r1, r4, r2
10001478:	4664      	mov	r4, ip
1000147a:	e7b3      	b.n	100013e4 <__aeabi_dsub+0x13c>
1000147c:	002c      	movs	r4, r5
1000147e:	000d      	movs	r5, r1
10001480:	4305      	orrs	r5, r0
10001482:	d029      	beq.n	100014d8 <__aeabi_dsub+0x230>
10001484:	1e65      	subs	r5, r4, #1
10001486:	2c01      	cmp	r4, #1
10001488:	d123      	bne.n	100014d2 <__aeabi_dsub+0x22a>
1000148a:	1880      	adds	r0, r0, r2
1000148c:	4290      	cmp	r0, r2
1000148e:	4192      	sbcs	r2, r2
10001490:	18c9      	adds	r1, r1, r3
10001492:	4252      	negs	r2, r2
10001494:	1889      	adds	r1, r1, r2
10001496:	020b      	lsls	r3, r1, #8
10001498:	d500      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
1000149a:	e768      	b.n	1000136e <__aeabi_dsub+0xc6>
1000149c:	0743      	lsls	r3, r0, #29
1000149e:	d009      	beq.n	100014b4 <__aeabi_dsub+0x20c>
100014a0:	230f      	movs	r3, #15
100014a2:	4003      	ands	r3, r0
100014a4:	2b04      	cmp	r3, #4
100014a6:	d005      	beq.n	100014b4 <__aeabi_dsub+0x20c>
100014a8:	1d03      	adds	r3, r0, #4
100014aa:	4283      	cmp	r3, r0
100014ac:	4180      	sbcs	r0, r0
100014ae:	4240      	negs	r0, r0
100014b0:	1809      	adds	r1, r1, r0
100014b2:	0018      	movs	r0, r3
100014b4:	020b      	lsls	r3, r1, #8
100014b6:	d400      	bmi.n	100014ba <__aeabi_dsub+0x212>
100014b8:	e1e4      	b.n	10001884 <__aeabi_dsub+0x5dc>
100014ba:	2600      	movs	r6, #0
100014bc:	4b44      	ldr	r3, [pc, #272]	; (100015d0 <__aeabi_dsub+0x328>)
100014be:	3401      	adds	r4, #1
100014c0:	46b4      	mov	ip, r6
100014c2:	429c      	cmp	r4, r3
100014c4:	d096      	beq.n	100013f4 <__aeabi_dsub+0x14c>
100014c6:	4b44      	ldr	r3, [pc, #272]	; (100015d8 <__aeabi_dsub+0x330>)
100014c8:	08c0      	lsrs	r0, r0, #3
100014ca:	400b      	ands	r3, r1
100014cc:	075e      	lsls	r6, r3, #29
100014ce:	4306      	orrs	r6, r0
100014d0:	e1cd      	b.n	1000186e <__aeabi_dsub+0x5c6>
100014d2:	4e3f      	ldr	r6, [pc, #252]	; (100015d0 <__aeabi_dsub+0x328>)
100014d4:	42b4      	cmp	r4, r6
100014d6:	d102      	bne.n	100014de <__aeabi_dsub+0x236>
100014d8:	0019      	movs	r1, r3
100014da:	0010      	movs	r0, r2
100014dc:	e7de      	b.n	1000149c <__aeabi_dsub+0x1f4>
100014de:	2d38      	cmp	r5, #56	; 0x38
100014e0:	ddb4      	ble.n	1000144c <__aeabi_dsub+0x1a4>
100014e2:	2400      	movs	r4, #0
100014e4:	2601      	movs	r6, #1
100014e6:	e7c1      	b.n	1000146c <__aeabi_dsub+0x1c4>
100014e8:	002c      	movs	r4, r5
100014ea:	000e      	movs	r6, r1
100014ec:	3c20      	subs	r4, #32
100014ee:	40e6      	lsrs	r6, r4
100014f0:	0034      	movs	r4, r6
100014f2:	2600      	movs	r6, #0
100014f4:	2d20      	cmp	r5, #32
100014f6:	d003      	beq.n	10001500 <__aeabi_dsub+0x258>
100014f8:	3640      	adds	r6, #64	; 0x40
100014fa:	1b76      	subs	r6, r6, r5
100014fc:	40b1      	lsls	r1, r6
100014fe:	000e      	movs	r6, r1
10001500:	4306      	orrs	r6, r0
10001502:	1e71      	subs	r1, r6, #1
10001504:	418e      	sbcs	r6, r1
10001506:	4326      	orrs	r6, r4
10001508:	2400      	movs	r4, #0
1000150a:	e7af      	b.n	1000146c <__aeabi_dsub+0x1c4>
1000150c:	4e34      	ldr	r6, [pc, #208]	; (100015e0 <__aeabi_dsub+0x338>)
1000150e:	1c65      	adds	r5, r4, #1
10001510:	4235      	tst	r5, r6
10001512:	d133      	bne.n	1000157c <__aeabi_dsub+0x2d4>
10001514:	000d      	movs	r5, r1
10001516:	4305      	orrs	r5, r0
10001518:	2c00      	cmp	r4, #0
1000151a:	d111      	bne.n	10001540 <__aeabi_dsub+0x298>
1000151c:	2d00      	cmp	r5, #0
1000151e:	d0db      	beq.n	100014d8 <__aeabi_dsub+0x230>
10001520:	001d      	movs	r5, r3
10001522:	4315      	orrs	r5, r2
10001524:	d0ba      	beq.n	1000149c <__aeabi_dsub+0x1f4>
10001526:	1882      	adds	r2, r0, r2
10001528:	4282      	cmp	r2, r0
1000152a:	4180      	sbcs	r0, r0
1000152c:	18c9      	adds	r1, r1, r3
1000152e:	4240      	negs	r0, r0
10001530:	1809      	adds	r1, r1, r0
10001532:	0010      	movs	r0, r2
10001534:	020b      	lsls	r3, r1, #8
10001536:	d5b1      	bpl.n	1000149c <__aeabi_dsub+0x1f4>
10001538:	4b27      	ldr	r3, [pc, #156]	; (100015d8 <__aeabi_dsub+0x330>)
1000153a:	3401      	adds	r4, #1
1000153c:	4019      	ands	r1, r3
1000153e:	e7ad      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001540:	2d00      	cmp	r5, #0
10001542:	d100      	bne.n	10001546 <__aeabi_dsub+0x29e>
10001544:	e19b      	b.n	1000187e <__aeabi_dsub+0x5d6>
10001546:	001c      	movs	r4, r3
10001548:	4314      	orrs	r4, r2
1000154a:	2c00      	cmp	r4, #0
1000154c:	d100      	bne.n	10001550 <__aeabi_dsub+0x2a8>
1000154e:	e71c      	b.n	1000138a <__aeabi_dsub+0xe2>
10001550:	074c      	lsls	r4, r1, #29
10001552:	08c0      	lsrs	r0, r0, #3
10001554:	4320      	orrs	r0, r4
10001556:	2480      	movs	r4, #128	; 0x80
10001558:	08c9      	lsrs	r1, r1, #3
1000155a:	0324      	lsls	r4, r4, #12
1000155c:	4221      	tst	r1, r4
1000155e:	d008      	beq.n	10001572 <__aeabi_dsub+0x2ca>
10001560:	08dd      	lsrs	r5, r3, #3
10001562:	4225      	tst	r5, r4
10001564:	d105      	bne.n	10001572 <__aeabi_dsub+0x2ca>
10001566:	0029      	movs	r1, r5
10001568:	075b      	lsls	r3, r3, #29
1000156a:	08d0      	lsrs	r0, r2, #3
1000156c:	4318      	orrs	r0, r3
1000156e:	9b00      	ldr	r3, [sp, #0]
10001570:	9302      	str	r3, [sp, #8]
10001572:	00cb      	lsls	r3, r1, #3
10001574:	0f41      	lsrs	r1, r0, #29
10001576:	4319      	orrs	r1, r3
10001578:	00c0      	lsls	r0, r0, #3
1000157a:	e706      	b.n	1000138a <__aeabi_dsub+0xe2>
1000157c:	4c14      	ldr	r4, [pc, #80]	; (100015d0 <__aeabi_dsub+0x328>)
1000157e:	42a5      	cmp	r5, r4
10001580:	d100      	bne.n	10001584 <__aeabi_dsub+0x2dc>
10001582:	e196      	b.n	100018b2 <__aeabi_dsub+0x60a>
10001584:	1882      	adds	r2, r0, r2
10001586:	4282      	cmp	r2, r0
10001588:	4180      	sbcs	r0, r0
1000158a:	18cb      	adds	r3, r1, r3
1000158c:	4240      	negs	r0, r0
1000158e:	181b      	adds	r3, r3, r0
10001590:	07d8      	lsls	r0, r3, #31
10001592:	0852      	lsrs	r2, r2, #1
10001594:	4310      	orrs	r0, r2
10001596:	0859      	lsrs	r1, r3, #1
10001598:	002c      	movs	r4, r5
1000159a:	e77f      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000159c:	2d00      	cmp	r5, #0
1000159e:	dd76      	ble.n	1000168e <__aeabi_dsub+0x3e6>
100015a0:	4666      	mov	r6, ip
100015a2:	2e00      	cmp	r6, #0
100015a4:	d12e      	bne.n	10001604 <__aeabi_dsub+0x35c>
100015a6:	001f      	movs	r7, r3
100015a8:	4317      	orrs	r7, r2
100015aa:	d0f5      	beq.n	10001598 <__aeabi_dsub+0x2f0>
100015ac:	1e6f      	subs	r7, r5, #1
100015ae:	2d01      	cmp	r5, #1
100015b0:	d118      	bne.n	100015e4 <__aeabi_dsub+0x33c>
100015b2:	1a82      	subs	r2, r0, r2
100015b4:	4290      	cmp	r0, r2
100015b6:	4180      	sbcs	r0, r0
100015b8:	1ac9      	subs	r1, r1, r3
100015ba:	4240      	negs	r0, r0
100015bc:	1a09      	subs	r1, r1, r0
100015be:	2401      	movs	r4, #1
100015c0:	0010      	movs	r0, r2
100015c2:	020b      	lsls	r3, r1, #8
100015c4:	d400      	bmi.n	100015c8 <__aeabi_dsub+0x320>
100015c6:	e769      	b.n	1000149c <__aeabi_dsub+0x1f4>
100015c8:	0249      	lsls	r1, r1, #9
100015ca:	0006      	movs	r6, r0
100015cc:	0a4d      	lsrs	r5, r1, #9
100015ce:	e102      	b.n	100017d6 <__aeabi_dsub+0x52e>
100015d0:	000007ff 	.word	0x000007ff
100015d4:	fffff801 	.word	0xfffff801
100015d8:	ff7fffff 	.word	0xff7fffff
100015dc:	7ff00000 	.word	0x7ff00000
100015e0:	000007fe 	.word	0x000007fe
100015e4:	4eb7      	ldr	r6, [pc, #732]	; (100018c4 <__aeabi_dsub+0x61c>)
100015e6:	42b5      	cmp	r5, r6
100015e8:	d100      	bne.n	100015ec <__aeabi_dsub+0x344>
100015ea:	e6ce      	b.n	1000138a <__aeabi_dsub+0xe2>
100015ec:	2601      	movs	r6, #1
100015ee:	2f38      	cmp	r7, #56	; 0x38
100015f0:	dd15      	ble.n	1000161e <__aeabi_dsub+0x376>
100015f2:	1b86      	subs	r6, r0, r6
100015f4:	4663      	mov	r3, ip
100015f6:	42b0      	cmp	r0, r6
100015f8:	4180      	sbcs	r0, r0
100015fa:	1ac9      	subs	r1, r1, r3
100015fc:	4240      	negs	r0, r0
100015fe:	1a09      	subs	r1, r1, r0
10001600:	0030      	movs	r0, r6
10001602:	e7de      	b.n	100015c2 <__aeabi_dsub+0x31a>
10001604:	4eaf      	ldr	r6, [pc, #700]	; (100018c4 <__aeabi_dsub+0x61c>)
10001606:	42b4      	cmp	r4, r6
10001608:	d100      	bne.n	1000160c <__aeabi_dsub+0x364>
1000160a:	e747      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000160c:	2600      	movs	r6, #0
1000160e:	46b4      	mov	ip, r6
10001610:	3601      	adds	r6, #1
10001612:	2d38      	cmp	r5, #56	; 0x38
10001614:	dced      	bgt.n	100015f2 <__aeabi_dsub+0x34a>
10001616:	2680      	movs	r6, #128	; 0x80
10001618:	002f      	movs	r7, r5
1000161a:	0436      	lsls	r6, r6, #16
1000161c:	4333      	orrs	r3, r6
1000161e:	2f1f      	cmp	r7, #31
10001620:	dc11      	bgt.n	10001646 <__aeabi_dsub+0x39e>
10001622:	2520      	movs	r5, #32
10001624:	001e      	movs	r6, r3
10001626:	1bed      	subs	r5, r5, r7
10001628:	40ae      	lsls	r6, r5
1000162a:	46b4      	mov	ip, r6
1000162c:	0016      	movs	r6, r2
1000162e:	9500      	str	r5, [sp, #0]
10001630:	40fe      	lsrs	r6, r7
10001632:	4665      	mov	r5, ip
10001634:	432e      	orrs	r6, r5
10001636:	9d00      	ldr	r5, [sp, #0]
10001638:	40fb      	lsrs	r3, r7
1000163a:	40aa      	lsls	r2, r5
1000163c:	1e55      	subs	r5, r2, #1
1000163e:	41aa      	sbcs	r2, r5
10001640:	4316      	orrs	r6, r2
10001642:	469c      	mov	ip, r3
10001644:	e7d5      	b.n	100015f2 <__aeabi_dsub+0x34a>
10001646:	003d      	movs	r5, r7
10001648:	001e      	movs	r6, r3
1000164a:	3d20      	subs	r5, #32
1000164c:	40ee      	lsrs	r6, r5
1000164e:	2500      	movs	r5, #0
10001650:	2f20      	cmp	r7, #32
10001652:	d003      	beq.n	1000165c <__aeabi_dsub+0x3b4>
10001654:	3540      	adds	r5, #64	; 0x40
10001656:	1bed      	subs	r5, r5, r7
10001658:	40ab      	lsls	r3, r5
1000165a:	001d      	movs	r5, r3
1000165c:	4315      	orrs	r5, r2
1000165e:	1e6b      	subs	r3, r5, #1
10001660:	419d      	sbcs	r5, r3
10001662:	2300      	movs	r3, #0
10001664:	432e      	orrs	r6, r5
10001666:	e7ec      	b.n	10001642 <__aeabi_dsub+0x39a>
10001668:	2e00      	cmp	r6, #0
1000166a:	d067      	beq.n	1000173c <__aeabi_dsub+0x494>
1000166c:	2c00      	cmp	r4, #0
1000166e:	d025      	beq.n	100016bc <__aeabi_dsub+0x414>
10001670:	0019      	movs	r1, r3
10001672:	0010      	movs	r0, r2
10001674:	4c93      	ldr	r4, [pc, #588]	; (100018c4 <__aeabi_dsub+0x61c>)
10001676:	9502      	str	r5, [sp, #8]
10001678:	e710      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000167a:	2e00      	cmp	r6, #0
1000167c:	d05e      	beq.n	1000173c <__aeabi_dsub+0x494>
1000167e:	2c00      	cmp	r4, #0
10001680:	d01f      	beq.n	100016c2 <__aeabi_dsub+0x41a>
10001682:	9903      	ldr	r1, [sp, #12]
10001684:	4c8f      	ldr	r4, [pc, #572]	; (100018c4 <__aeabi_dsub+0x61c>)
10001686:	0008      	movs	r0, r1
10001688:	9b00      	ldr	r3, [sp, #0]
1000168a:	9302      	str	r3, [sp, #8]
1000168c:	e706      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000168e:	2d00      	cmp	r5, #0
10001690:	d054      	beq.n	1000173c <__aeabi_dsub+0x494>
10001692:	4665      	mov	r5, ip
10001694:	1b2d      	subs	r5, r5, r4
10001696:	2c00      	cmp	r4, #0
10001698:	d11f      	bne.n	100016da <__aeabi_dsub+0x432>
1000169a:	9c00      	ldr	r4, [sp, #0]
1000169c:	9402      	str	r4, [sp, #8]
1000169e:	002c      	movs	r4, r5
100016a0:	000d      	movs	r5, r1
100016a2:	4305      	orrs	r5, r0
100016a4:	d100      	bne.n	100016a8 <__aeabi_dsub+0x400>
100016a6:	e717      	b.n	100014d8 <__aeabi_dsub+0x230>
100016a8:	1e65      	subs	r5, r4, #1
100016aa:	2c01      	cmp	r4, #1
100016ac:	d10c      	bne.n	100016c8 <__aeabi_dsub+0x420>
100016ae:	1a10      	subs	r0, r2, r0
100016b0:	4282      	cmp	r2, r0
100016b2:	4192      	sbcs	r2, r2
100016b4:	1a59      	subs	r1, r3, r1
100016b6:	4252      	negs	r2, r2
100016b8:	1a89      	subs	r1, r1, r2
100016ba:	e782      	b.n	100015c2 <__aeabi_dsub+0x31a>
100016bc:	9502      	str	r5, [sp, #8]
100016be:	4664      	mov	r4, ip
100016c0:	e7ee      	b.n	100016a0 <__aeabi_dsub+0x3f8>
100016c2:	9c00      	ldr	r4, [sp, #0]
100016c4:	9402      	str	r4, [sp, #8]
100016c6:	e7fa      	b.n	100016be <__aeabi_dsub+0x416>
100016c8:	4e7e      	ldr	r6, [pc, #504]	; (100018c4 <__aeabi_dsub+0x61c>)
100016ca:	42b4      	cmp	r4, r6
100016cc:	d100      	bne.n	100016d0 <__aeabi_dsub+0x428>
100016ce:	e703      	b.n	100014d8 <__aeabi_dsub+0x230>
100016d0:	2d38      	cmp	r5, #56	; 0x38
100016d2:	dd09      	ble.n	100016e8 <__aeabi_dsub+0x440>
100016d4:	2100      	movs	r1, #0
100016d6:	2601      	movs	r6, #1
100016d8:	e014      	b.n	10001704 <__aeabi_dsub+0x45c>
100016da:	2d38      	cmp	r5, #56	; 0x38
100016dc:	dc2b      	bgt.n	10001736 <__aeabi_dsub+0x48e>
100016de:	2480      	movs	r4, #128	; 0x80
100016e0:	0424      	lsls	r4, r4, #16
100016e2:	4321      	orrs	r1, r4
100016e4:	9c00      	ldr	r4, [sp, #0]
100016e6:	9402      	str	r4, [sp, #8]
100016e8:	2d1f      	cmp	r5, #31
100016ea:	dc13      	bgt.n	10001714 <__aeabi_dsub+0x46c>
100016ec:	2420      	movs	r4, #32
100016ee:	000f      	movs	r7, r1
100016f0:	1b64      	subs	r4, r4, r5
100016f2:	0006      	movs	r6, r0
100016f4:	40a0      	lsls	r0, r4
100016f6:	40a7      	lsls	r7, r4
100016f8:	40ee      	lsrs	r6, r5
100016fa:	1e44      	subs	r4, r0, #1
100016fc:	41a0      	sbcs	r0, r4
100016fe:	40e9      	lsrs	r1, r5
10001700:	433e      	orrs	r6, r7
10001702:	4306      	orrs	r6, r0
10001704:	1b90      	subs	r0, r2, r6
10001706:	4282      	cmp	r2, r0
10001708:	4192      	sbcs	r2, r2
1000170a:	1a59      	subs	r1, r3, r1
1000170c:	4252      	negs	r2, r2
1000170e:	4664      	mov	r4, ip
10001710:	1a89      	subs	r1, r1, r2
10001712:	e756      	b.n	100015c2 <__aeabi_dsub+0x31a>
10001714:	002c      	movs	r4, r5
10001716:	000e      	movs	r6, r1
10001718:	3c20      	subs	r4, #32
1000171a:	40e6      	lsrs	r6, r4
1000171c:	2400      	movs	r4, #0
1000171e:	2d20      	cmp	r5, #32
10001720:	d003      	beq.n	1000172a <__aeabi_dsub+0x482>
10001722:	3440      	adds	r4, #64	; 0x40
10001724:	1b64      	subs	r4, r4, r5
10001726:	40a1      	lsls	r1, r4
10001728:	000c      	movs	r4, r1
1000172a:	4304      	orrs	r4, r0
1000172c:	1e61      	subs	r1, r4, #1
1000172e:	418c      	sbcs	r4, r1
10001730:	2100      	movs	r1, #0
10001732:	4326      	orrs	r6, r4
10001734:	e7e6      	b.n	10001704 <__aeabi_dsub+0x45c>
10001736:	9900      	ldr	r1, [sp, #0]
10001738:	9102      	str	r1, [sp, #8]
1000173a:	e7cb      	b.n	100016d4 <__aeabi_dsub+0x42c>
1000173c:	4e62      	ldr	r6, [pc, #392]	; (100018c8 <__aeabi_dsub+0x620>)
1000173e:	1c65      	adds	r5, r4, #1
10001740:	4235      	tst	r5, r6
10001742:	d138      	bne.n	100017b6 <__aeabi_dsub+0x50e>
10001744:	001d      	movs	r5, r3
10001746:	4315      	orrs	r5, r2
10001748:	46ac      	mov	ip, r5
1000174a:	000d      	movs	r5, r1
1000174c:	4305      	orrs	r5, r0
1000174e:	2c00      	cmp	r4, #0
10001750:	d125      	bne.n	1000179e <__aeabi_dsub+0x4f6>
10001752:	2d00      	cmp	r5, #0
10001754:	d108      	bne.n	10001768 <__aeabi_dsub+0x4c0>
10001756:	4661      	mov	r1, ip
10001758:	0026      	movs	r6, r4
1000175a:	9402      	str	r4, [sp, #8]
1000175c:	2900      	cmp	r1, #0
1000175e:	d100      	bne.n	10001762 <__aeabi_dsub+0x4ba>
10001760:	e648      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001762:	0019      	movs	r1, r3
10001764:	0010      	movs	r0, r2
10001766:	e78f      	b.n	10001688 <__aeabi_dsub+0x3e0>
10001768:	4665      	mov	r5, ip
1000176a:	2d00      	cmp	r5, #0
1000176c:	d100      	bne.n	10001770 <__aeabi_dsub+0x4c8>
1000176e:	e695      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001770:	1a86      	subs	r6, r0, r2
10001772:	42b0      	cmp	r0, r6
10001774:	41bf      	sbcs	r7, r7
10001776:	1acd      	subs	r5, r1, r3
10001778:	427f      	negs	r7, r7
1000177a:	1bed      	subs	r5, r5, r7
1000177c:	022f      	lsls	r7, r5, #8
1000177e:	d506      	bpl.n	1000178e <__aeabi_dsub+0x4e6>
10001780:	1a10      	subs	r0, r2, r0
10001782:	4282      	cmp	r2, r0
10001784:	4192      	sbcs	r2, r2
10001786:	1a59      	subs	r1, r3, r1
10001788:	4252      	negs	r2, r2
1000178a:	1a89      	subs	r1, r1, r2
1000178c:	e77c      	b.n	10001688 <__aeabi_dsub+0x3e0>
1000178e:	0033      	movs	r3, r6
10001790:	432b      	orrs	r3, r5
10001792:	469c      	mov	ip, r3
10001794:	d100      	bne.n	10001798 <__aeabi_dsub+0x4f0>
10001796:	e08f      	b.n	100018b8 <__aeabi_dsub+0x610>
10001798:	0029      	movs	r1, r5
1000179a:	0030      	movs	r0, r6
1000179c:	e67e      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000179e:	2d00      	cmp	r5, #0
100017a0:	d107      	bne.n	100017b2 <__aeabi_dsub+0x50a>
100017a2:	4661      	mov	r1, ip
100017a4:	2900      	cmp	r1, #0
100017a6:	d07a      	beq.n	1000189e <__aeabi_dsub+0x5f6>
100017a8:	0019      	movs	r1, r3
100017aa:	9b00      	ldr	r3, [sp, #0]
100017ac:	0010      	movs	r0, r2
100017ae:	9302      	str	r3, [sp, #8]
100017b0:	e5eb      	b.n	1000138a <__aeabi_dsub+0xe2>
100017b2:	4664      	mov	r4, ip
100017b4:	e6c9      	b.n	1000154a <__aeabi_dsub+0x2a2>
100017b6:	1a86      	subs	r6, r0, r2
100017b8:	42b0      	cmp	r0, r6
100017ba:	41bf      	sbcs	r7, r7
100017bc:	1acd      	subs	r5, r1, r3
100017be:	427f      	negs	r7, r7
100017c0:	1bed      	subs	r5, r5, r7
100017c2:	022f      	lsls	r7, r5, #8
100017c4:	d528      	bpl.n	10001818 <__aeabi_dsub+0x570>
100017c6:	1a16      	subs	r6, r2, r0
100017c8:	42b2      	cmp	r2, r6
100017ca:	4192      	sbcs	r2, r2
100017cc:	1a5b      	subs	r3, r3, r1
100017ce:	4252      	negs	r2, r2
100017d0:	1a9d      	subs	r5, r3, r2
100017d2:	9b00      	ldr	r3, [sp, #0]
100017d4:	9302      	str	r3, [sp, #8]
100017d6:	2d00      	cmp	r5, #0
100017d8:	d026      	beq.n	10001828 <__aeabi_dsub+0x580>
100017da:	0028      	movs	r0, r5
100017dc:	f7fe fd7e 	bl	100002dc <__clzsi2>
100017e0:	0003      	movs	r3, r0
100017e2:	3b08      	subs	r3, #8
100017e4:	2220      	movs	r2, #32
100017e6:	0031      	movs	r1, r6
100017e8:	1ad2      	subs	r2, r2, r3
100017ea:	409d      	lsls	r5, r3
100017ec:	40d1      	lsrs	r1, r2
100017ee:	4329      	orrs	r1, r5
100017f0:	0035      	movs	r5, r6
100017f2:	409d      	lsls	r5, r3
100017f4:	429c      	cmp	r4, r3
100017f6:	dc3d      	bgt.n	10001874 <__aeabi_dsub+0x5cc>
100017f8:	1b1a      	subs	r2, r3, r4
100017fa:	3201      	adds	r2, #1
100017fc:	2320      	movs	r3, #32
100017fe:	0008      	movs	r0, r1
10001800:	1a9b      	subs	r3, r3, r2
10001802:	002c      	movs	r4, r5
10001804:	409d      	lsls	r5, r3
10001806:	4098      	lsls	r0, r3
10001808:	40d4      	lsrs	r4, r2
1000180a:	1e6b      	subs	r3, r5, #1
1000180c:	419d      	sbcs	r5, r3
1000180e:	40d1      	lsrs	r1, r2
10001810:	4320      	orrs	r0, r4
10001812:	4328      	orrs	r0, r5
10001814:	2400      	movs	r4, #0
10001816:	e641      	b.n	1000149c <__aeabi_dsub+0x1f4>
10001818:	0033      	movs	r3, r6
1000181a:	432b      	orrs	r3, r5
1000181c:	469c      	mov	ip, r3
1000181e:	d1da      	bne.n	100017d6 <__aeabi_dsub+0x52e>
10001820:	001e      	movs	r6, r3
10001822:	001c      	movs	r4, r3
10001824:	9302      	str	r3, [sp, #8]
10001826:	e5e5      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001828:	0030      	movs	r0, r6
1000182a:	f7fe fd57 	bl	100002dc <__clzsi2>
1000182e:	0003      	movs	r3, r0
10001830:	3318      	adds	r3, #24
10001832:	2b1f      	cmp	r3, #31
10001834:	ddd6      	ble.n	100017e4 <__aeabi_dsub+0x53c>
10001836:	0031      	movs	r1, r6
10001838:	3808      	subs	r0, #8
1000183a:	4081      	lsls	r1, r0
1000183c:	429c      	cmp	r4, r3
1000183e:	dc12      	bgt.n	10001866 <__aeabi_dsub+0x5be>
10001840:	1b1b      	subs	r3, r3, r4
10001842:	1c5a      	adds	r2, r3, #1
10001844:	2a1f      	cmp	r2, #31
10001846:	ddd9      	ble.n	100017fc <__aeabi_dsub+0x554>
10001848:	000c      	movs	r4, r1
1000184a:	3b1f      	subs	r3, #31
1000184c:	40dc      	lsrs	r4, r3
1000184e:	0028      	movs	r0, r5
10001850:	2a20      	cmp	r2, #32
10001852:	d003      	beq.n	1000185c <__aeabi_dsub+0x5b4>
10001854:	2340      	movs	r3, #64	; 0x40
10001856:	1a9b      	subs	r3, r3, r2
10001858:	4099      	lsls	r1, r3
1000185a:	0008      	movs	r0, r1
1000185c:	1e43      	subs	r3, r0, #1
1000185e:	4198      	sbcs	r0, r3
10001860:	2100      	movs	r1, #0
10001862:	4320      	orrs	r0, r4
10001864:	e7d6      	b.n	10001814 <__aeabi_dsub+0x56c>
10001866:	1ae4      	subs	r4, r4, r3
10001868:	4b18      	ldr	r3, [pc, #96]	; (100018cc <__aeabi_dsub+0x624>)
1000186a:	400b      	ands	r3, r1
1000186c:	075e      	lsls	r6, r3, #29
1000186e:	08db      	lsrs	r3, r3, #3
10001870:	469c      	mov	ip, r3
10001872:	e5bf      	b.n	100013f4 <__aeabi_dsub+0x14c>
10001874:	1ae4      	subs	r4, r4, r3
10001876:	4b15      	ldr	r3, [pc, #84]	; (100018cc <__aeabi_dsub+0x624>)
10001878:	0028      	movs	r0, r5
1000187a:	4019      	ands	r1, r3
1000187c:	e60e      	b.n	1000149c <__aeabi_dsub+0x1f4>
1000187e:	0019      	movs	r1, r3
10001880:	0010      	movs	r0, r2
10001882:	e582      	b.n	1000138a <__aeabi_dsub+0xe2>
10001884:	074b      	lsls	r3, r1, #29
10001886:	08c0      	lsrs	r0, r0, #3
10001888:	4303      	orrs	r3, r0
1000188a:	469c      	mov	ip, r3
1000188c:	4b0d      	ldr	r3, [pc, #52]	; (100018c4 <__aeabi_dsub+0x61c>)
1000188e:	4666      	mov	r6, ip
10001890:	08c9      	lsrs	r1, r1, #3
10001892:	429c      	cmp	r4, r3
10001894:	d113      	bne.n	100018be <__aeabi_dsub+0x616>
10001896:	430e      	orrs	r6, r1
10001898:	d104      	bne.n	100018a4 <__aeabi_dsub+0x5fc>
1000189a:	46b4      	mov	ip, r6
1000189c:	e5aa      	b.n	100013f4 <__aeabi_dsub+0x14c>
1000189e:	9102      	str	r1, [sp, #8]
100018a0:	2180      	movs	r1, #128	; 0x80
100018a2:	0309      	lsls	r1, r1, #12
100018a4:	2380      	movs	r3, #128	; 0x80
100018a6:	031b      	lsls	r3, r3, #12
100018a8:	430b      	orrs	r3, r1
100018aa:	4666      	mov	r6, ip
100018ac:	4c05      	ldr	r4, [pc, #20]	; (100018c4 <__aeabi_dsub+0x61c>)
100018ae:	469c      	mov	ip, r3
100018b0:	e5a0      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018b2:	2600      	movs	r6, #0
100018b4:	4c03      	ldr	r4, [pc, #12]	; (100018c4 <__aeabi_dsub+0x61c>)
100018b6:	e7f0      	b.n	1000189a <__aeabi_dsub+0x5f2>
100018b8:	0026      	movs	r6, r4
100018ba:	9402      	str	r4, [sp, #8]
100018bc:	e59a      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018be:	468c      	mov	ip, r1
100018c0:	e598      	b.n	100013f4 <__aeabi_dsub+0x14c>
100018c2:	46c0      	nop			; (mov r8, r8)
100018c4:	000007ff 	.word	0x000007ff
100018c8:	000007fe 	.word	0x000007fe
100018cc:	ff7fffff 	.word	0xff7fffff

100018d0 <__aeabi_ui2d>:
100018d0:	b510      	push	{r4, lr}
100018d2:	0003      	movs	r3, r0
100018d4:	0004      	movs	r4, r0
100018d6:	1e02      	subs	r2, r0, #0
100018d8:	d00c      	beq.n	100018f4 <__aeabi_ui2d+0x24>
100018da:	f7fe fcff 	bl	100002dc <__clzsi2>
100018de:	4a0b      	ldr	r2, [pc, #44]	; (1000190c <__aeabi_ui2d+0x3c>)
100018e0:	1a12      	subs	r2, r2, r0
100018e2:	280a      	cmp	r0, #10
100018e4:	dc0d      	bgt.n	10001902 <__aeabi_ui2d+0x32>
100018e6:	230b      	movs	r3, #11
100018e8:	0021      	movs	r1, r4
100018ea:	1a1b      	subs	r3, r3, r0
100018ec:	40d9      	lsrs	r1, r3
100018ee:	3015      	adds	r0, #21
100018f0:	000b      	movs	r3, r1
100018f2:	4084      	lsls	r4, r0
100018f4:	031b      	lsls	r3, r3, #12
100018f6:	0b1b      	lsrs	r3, r3, #12
100018f8:	0512      	lsls	r2, r2, #20
100018fa:	431a      	orrs	r2, r3
100018fc:	0020      	movs	r0, r4
100018fe:	0011      	movs	r1, r2
10001900:	bd10      	pop	{r4, pc}
10001902:	0023      	movs	r3, r4
10001904:	380b      	subs	r0, #11
10001906:	4083      	lsls	r3, r0
10001908:	2400      	movs	r4, #0
1000190a:	e7f3      	b.n	100018f4 <__aeabi_ui2d+0x24>
1000190c:	0000041e 	.word	0x0000041e

10001910 <__aeabi_f2d>:
10001910:	22fe      	movs	r2, #254	; 0xfe
10001912:	b570      	push	{r4, r5, r6, lr}
10001914:	0044      	lsls	r4, r0, #1
10001916:	0e24      	lsrs	r4, r4, #24
10001918:	0243      	lsls	r3, r0, #9
1000191a:	1c61      	adds	r1, r4, #1
1000191c:	0a5d      	lsrs	r5, r3, #9
1000191e:	0fc6      	lsrs	r6, r0, #31
10001920:	4211      	tst	r1, r2
10001922:	d00d      	beq.n	10001940 <__aeabi_f2d+0x30>
10001924:	22e0      	movs	r2, #224	; 0xe0
10001926:	0092      	lsls	r2, r2, #2
10001928:	18a4      	adds	r4, r4, r2
1000192a:	0b1b      	lsrs	r3, r3, #12
1000192c:	076d      	lsls	r5, r5, #29
1000192e:	031b      	lsls	r3, r3, #12
10001930:	0b1b      	lsrs	r3, r3, #12
10001932:	0524      	lsls	r4, r4, #20
10001934:	07f6      	lsls	r6, r6, #31
10001936:	431c      	orrs	r4, r3
10001938:	4334      	orrs	r4, r6
1000193a:	0028      	movs	r0, r5
1000193c:	0021      	movs	r1, r4
1000193e:	bd70      	pop	{r4, r5, r6, pc}
10001940:	2c00      	cmp	r4, #0
10001942:	d118      	bne.n	10001976 <__aeabi_f2d+0x66>
10001944:	0023      	movs	r3, r4
10001946:	2d00      	cmp	r5, #0
10001948:	d0f1      	beq.n	1000192e <__aeabi_f2d+0x1e>
1000194a:	0028      	movs	r0, r5
1000194c:	f7fe fcc6 	bl	100002dc <__clzsi2>
10001950:	280a      	cmp	r0, #10
10001952:	dc0a      	bgt.n	1000196a <__aeabi_f2d+0x5a>
10001954:	230b      	movs	r3, #11
10001956:	002a      	movs	r2, r5
10001958:	1a1b      	subs	r3, r3, r0
1000195a:	40da      	lsrs	r2, r3
1000195c:	0013      	movs	r3, r2
1000195e:	0002      	movs	r2, r0
10001960:	3215      	adds	r2, #21
10001962:	4095      	lsls	r5, r2
10001964:	4c09      	ldr	r4, [pc, #36]	; (1000198c <__aeabi_f2d+0x7c>)
10001966:	1a24      	subs	r4, r4, r0
10001968:	e7e1      	b.n	1000192e <__aeabi_f2d+0x1e>
1000196a:	0003      	movs	r3, r0
1000196c:	3b0b      	subs	r3, #11
1000196e:	409d      	lsls	r5, r3
10001970:	002b      	movs	r3, r5
10001972:	0025      	movs	r5, r4
10001974:	e7f6      	b.n	10001964 <__aeabi_f2d+0x54>
10001976:	2d00      	cmp	r5, #0
10001978:	d006      	beq.n	10001988 <__aeabi_f2d+0x78>
1000197a:	0b1a      	lsrs	r2, r3, #12
1000197c:	2380      	movs	r3, #128	; 0x80
1000197e:	031b      	lsls	r3, r3, #12
10001980:	076d      	lsls	r5, r5, #29
10001982:	4313      	orrs	r3, r2
10001984:	4c02      	ldr	r4, [pc, #8]	; (10001990 <__aeabi_f2d+0x80>)
10001986:	e7d2      	b.n	1000192e <__aeabi_f2d+0x1e>
10001988:	002b      	movs	r3, r5
1000198a:	e7fb      	b.n	10001984 <__aeabi_f2d+0x74>
1000198c:	00000389 	.word	0x00000389
10001990:	000007ff 	.word	0x000007ff

10001994 <__aeabi_d2f>:
10001994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001996:	030b      	lsls	r3, r1, #12
10001998:	004a      	lsls	r2, r1, #1
1000199a:	0a5b      	lsrs	r3, r3, #9
1000199c:	0f46      	lsrs	r6, r0, #29
1000199e:	0d52      	lsrs	r2, r2, #21
100019a0:	431e      	orrs	r6, r3
100019a2:	1c53      	adds	r3, r2, #1
100019a4:	469c      	mov	ip, r3
100019a6:	0004      	movs	r4, r0
100019a8:	00c7      	lsls	r7, r0, #3
100019aa:	483c      	ldr	r0, [pc, #240]	; (10001a9c <__aeabi_d2f+0x108>)
100019ac:	0fc9      	lsrs	r1, r1, #31
100019ae:	4003      	ands	r3, r0
100019b0:	9301      	str	r3, [sp, #4]
100019b2:	4663      	mov	r3, ip
100019b4:	4203      	tst	r3, r0
100019b6:	d049      	beq.n	10001a4c <__aeabi_d2f+0xb8>
100019b8:	4b39      	ldr	r3, [pc, #228]	; (10001aa0 <__aeabi_d2f+0x10c>)
100019ba:	18d0      	adds	r0, r2, r3
100019bc:	28fe      	cmp	r0, #254	; 0xfe
100019be:	dc68      	bgt.n	10001a92 <__aeabi_d2f+0xfe>
100019c0:	2800      	cmp	r0, #0
100019c2:	dc37      	bgt.n	10001a34 <__aeabi_d2f+0xa0>
100019c4:	0003      	movs	r3, r0
100019c6:	3317      	adds	r3, #23
100019c8:	db65      	blt.n	10001a96 <__aeabi_d2f+0x102>
100019ca:	2480      	movs	r4, #128	; 0x80
100019cc:	251e      	movs	r5, #30
100019ce:	0424      	lsls	r4, r4, #16
100019d0:	4334      	orrs	r4, r6
100019d2:	1a2d      	subs	r5, r5, r0
100019d4:	2d1f      	cmp	r5, #31
100019d6:	dc10      	bgt.n	100019fa <__aeabi_d2f+0x66>
100019d8:	4b32      	ldr	r3, [pc, #200]	; (10001aa4 <__aeabi_d2f+0x110>)
100019da:	18d2      	adds	r2, r2, r3
100019dc:	003b      	movs	r3, r7
100019de:	4097      	lsls	r7, r2
100019e0:	4094      	lsls	r4, r2
100019e2:	1e78      	subs	r0, r7, #1
100019e4:	4187      	sbcs	r7, r0
100019e6:	40eb      	lsrs	r3, r5
100019e8:	4327      	orrs	r7, r4
100019ea:	433b      	orrs	r3, r7
100019ec:	2407      	movs	r4, #7
100019ee:	001a      	movs	r2, r3
100019f0:	4022      	ands	r2, r4
100019f2:	4223      	tst	r3, r4
100019f4:	d13b      	bne.n	10001a6e <__aeabi_d2f+0xda>
100019f6:	08db      	lsrs	r3, r3, #3
100019f8:	e032      	b.n	10001a60 <__aeabi_d2f+0xcc>
100019fa:	2302      	movs	r3, #2
100019fc:	425b      	negs	r3, r3
100019fe:	1a1b      	subs	r3, r3, r0
10001a00:	0020      	movs	r0, r4
10001a02:	40d8      	lsrs	r0, r3
10001a04:	0003      	movs	r3, r0
10001a06:	2000      	movs	r0, #0
10001a08:	2d20      	cmp	r5, #32
10001a0a:	d003      	beq.n	10001a14 <__aeabi_d2f+0x80>
10001a0c:	4826      	ldr	r0, [pc, #152]	; (10001aa8 <__aeabi_d2f+0x114>)
10001a0e:	1812      	adds	r2, r2, r0
10001a10:	0020      	movs	r0, r4
10001a12:	4090      	lsls	r0, r2
10001a14:	4338      	orrs	r0, r7
10001a16:	1e42      	subs	r2, r0, #1
10001a18:	4190      	sbcs	r0, r2
10001a1a:	4303      	orrs	r3, r0
10001a1c:	2407      	movs	r4, #7
10001a1e:	001a      	movs	r2, r3
10001a20:	4022      	ands	r2, r4
10001a22:	4223      	tst	r3, r4
10001a24:	d0e7      	beq.n	100019f6 <__aeabi_d2f+0x62>
10001a26:	220f      	movs	r2, #15
10001a28:	401a      	ands	r2, r3
10001a2a:	2a04      	cmp	r2, #4
10001a2c:	d024      	beq.n	10001a78 <__aeabi_d2f+0xe4>
10001a2e:	2000      	movs	r0, #0
10001a30:	3304      	adds	r3, #4
10001a32:	e008      	b.n	10001a46 <__aeabi_d2f+0xb2>
10001a34:	01a4      	lsls	r4, r4, #6
10001a36:	1e62      	subs	r2, r4, #1
10001a38:	4194      	sbcs	r4, r2
10001a3a:	00f6      	lsls	r6, r6, #3
10001a3c:	0f7b      	lsrs	r3, r7, #29
10001a3e:	4334      	orrs	r4, r6
10001a40:	4323      	orrs	r3, r4
10001a42:	075a      	lsls	r2, r3, #29
10001a44:	d11b      	bne.n	10001a7e <__aeabi_d2f+0xea>
10001a46:	0002      	movs	r2, r0
10001a48:	08db      	lsrs	r3, r3, #3
10001a4a:	e009      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a4c:	9b01      	ldr	r3, [sp, #4]
10001a4e:	2a00      	cmp	r2, #0
10001a50:	d006      	beq.n	10001a60 <__aeabi_d2f+0xcc>
10001a52:	003b      	movs	r3, r7
10001a54:	22ff      	movs	r2, #255	; 0xff
10001a56:	4333      	orrs	r3, r6
10001a58:	d002      	beq.n	10001a60 <__aeabi_d2f+0xcc>
10001a5a:	2380      	movs	r3, #128	; 0x80
10001a5c:	03db      	lsls	r3, r3, #15
10001a5e:	4333      	orrs	r3, r6
10001a60:	025b      	lsls	r3, r3, #9
10001a62:	05d0      	lsls	r0, r2, #23
10001a64:	0a5b      	lsrs	r3, r3, #9
10001a66:	4318      	orrs	r0, r3
10001a68:	07c9      	lsls	r1, r1, #31
10001a6a:	4308      	orrs	r0, r1
10001a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a6e:	220f      	movs	r2, #15
10001a70:	2000      	movs	r0, #0
10001a72:	401a      	ands	r2, r3
10001a74:	2a04      	cmp	r2, #4
10001a76:	d106      	bne.n	10001a86 <__aeabi_d2f+0xf2>
10001a78:	2200      	movs	r2, #0
10001a7a:	08db      	lsrs	r3, r3, #3
10001a7c:	e7f0      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a7e:	220f      	movs	r2, #15
10001a80:	401a      	ands	r2, r3
10001a82:	2a04      	cmp	r2, #4
10001a84:	d0df      	beq.n	10001a46 <__aeabi_d2f+0xb2>
10001a86:	3304      	adds	r3, #4
10001a88:	015a      	lsls	r2, r3, #5
10001a8a:	d5dc      	bpl.n	10001a46 <__aeabi_d2f+0xb2>
10001a8c:	1c42      	adds	r2, r0, #1
10001a8e:	2300      	movs	r3, #0
10001a90:	e7e6      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a92:	22ff      	movs	r2, #255	; 0xff
10001a94:	e7fb      	b.n	10001a8e <__aeabi_d2f+0xfa>
10001a96:	2200      	movs	r2, #0
10001a98:	0013      	movs	r3, r2
10001a9a:	e7e1      	b.n	10001a60 <__aeabi_d2f+0xcc>
10001a9c:	000007fe 	.word	0x000007fe
10001aa0:	fffffc80 	.word	0xfffffc80
10001aa4:	fffffc82 	.word	0xfffffc82
10001aa8:	fffffca2 	.word	0xfffffca2

10001aac <__aeabi_llsr>:
10001aac:	40d0      	lsrs	r0, r2
10001aae:	000b      	movs	r3, r1
10001ab0:	40d1      	lsrs	r1, r2
10001ab2:	469c      	mov	ip, r3
10001ab4:	3a20      	subs	r2, #32
10001ab6:	40d3      	lsrs	r3, r2
10001ab8:	4318      	orrs	r0, r3
10001aba:	4252      	negs	r2, r2
10001abc:	4663      	mov	r3, ip
10001abe:	4093      	lsls	r3, r2
10001ac0:	4318      	orrs	r0, r3
10001ac2:	4770      	bx	lr

10001ac4 <__aeabi_llsl>:
10001ac4:	4091      	lsls	r1, r2
10001ac6:	0003      	movs	r3, r0
10001ac8:	4090      	lsls	r0, r2
10001aca:	469c      	mov	ip, r3
10001acc:	3a20      	subs	r2, #32
10001ace:	4093      	lsls	r3, r2
10001ad0:	4319      	orrs	r1, r3
10001ad2:	4252      	negs	r2, r2
10001ad4:	4663      	mov	r3, ip
10001ad6:	40d3      	lsrs	r3, r2
10001ad8:	4319      	orrs	r1, r3
10001ada:	4770      	bx	lr

10001adc <__clzdi2>:
10001adc:	b510      	push	{r4, lr}
10001ade:	2900      	cmp	r1, #0
10001ae0:	d103      	bne.n	10001aea <__clzdi2+0xe>
10001ae2:	f7fe fbfb 	bl	100002dc <__clzsi2>
10001ae6:	3020      	adds	r0, #32
10001ae8:	e002      	b.n	10001af0 <__clzdi2+0x14>
10001aea:	0008      	movs	r0, r1
10001aec:	f7fe fbf6 	bl	100002dc <__clzsi2>
10001af0:	bd10      	pop	{r4, pc}
10001af2:	46c0      	nop			; (mov r8, r8)

10001af4 <__aeabi_d2uiz>:
10001af4:	b570      	push	{r4, r5, r6, lr}
10001af6:	2200      	movs	r2, #0
10001af8:	4b0b      	ldr	r3, [pc, #44]	; (10001b28 <__aeabi_d2uiz+0x34>)
10001afa:	0004      	movs	r4, r0
10001afc:	000d      	movs	r5, r1
10001afe:	f7fe fbe3 	bl	100002c8 <__aeabi_dcmpge>
10001b02:	2800      	cmp	r0, #0
10001b04:	d00b      	beq.n	10001b1e <__aeabi_d2uiz+0x2a>
10001b06:	4b08      	ldr	r3, [pc, #32]	; (10001b28 <__aeabi_d2uiz+0x34>)
10001b08:	2200      	movs	r2, #0
10001b0a:	0020      	movs	r0, r4
10001b0c:	0029      	movs	r1, r5
10001b0e:	f7ff fbcb 	bl	100012a8 <__aeabi_dsub>
10001b12:	f000 f80b 	bl	10001b2c <__aeabi_d2iz>
10001b16:	2380      	movs	r3, #128	; 0x80
10001b18:	061b      	lsls	r3, r3, #24
10001b1a:	18c0      	adds	r0, r0, r3
10001b1c:	bd70      	pop	{r4, r5, r6, pc}
10001b1e:	0020      	movs	r0, r4
10001b20:	0029      	movs	r1, r5
10001b22:	f000 f803 	bl	10001b2c <__aeabi_d2iz>
10001b26:	e7f9      	b.n	10001b1c <__aeabi_d2uiz+0x28>
10001b28:	41e00000 	.word	0x41e00000

10001b2c <__aeabi_d2iz>:
10001b2c:	000b      	movs	r3, r1
10001b2e:	b570      	push	{r4, r5, r6, lr}
10001b30:	4e11      	ldr	r6, [pc, #68]	; (10001b78 <__aeabi_d2iz+0x4c>)
10001b32:	030c      	lsls	r4, r1, #12
10001b34:	0049      	lsls	r1, r1, #1
10001b36:	0002      	movs	r2, r0
10001b38:	0b24      	lsrs	r4, r4, #12
10001b3a:	2000      	movs	r0, #0
10001b3c:	0d49      	lsrs	r1, r1, #21
10001b3e:	0fdd      	lsrs	r5, r3, #31
10001b40:	42b1      	cmp	r1, r6
10001b42:	dd04      	ble.n	10001b4e <__aeabi_d2iz+0x22>
10001b44:	480d      	ldr	r0, [pc, #52]	; (10001b7c <__aeabi_d2iz+0x50>)
10001b46:	4281      	cmp	r1, r0
10001b48:	dd02      	ble.n	10001b50 <__aeabi_d2iz+0x24>
10001b4a:	4b0d      	ldr	r3, [pc, #52]	; (10001b80 <__aeabi_d2iz+0x54>)
10001b4c:	18e8      	adds	r0, r5, r3
10001b4e:	bd70      	pop	{r4, r5, r6, pc}
10001b50:	2080      	movs	r0, #128	; 0x80
10001b52:	0340      	lsls	r0, r0, #13
10001b54:	4320      	orrs	r0, r4
10001b56:	4c0b      	ldr	r4, [pc, #44]	; (10001b84 <__aeabi_d2iz+0x58>)
10001b58:	1a64      	subs	r4, r4, r1
10001b5a:	2c1f      	cmp	r4, #31
10001b5c:	dc08      	bgt.n	10001b70 <__aeabi_d2iz+0x44>
10001b5e:	4e0a      	ldr	r6, [pc, #40]	; (10001b88 <__aeabi_d2iz+0x5c>)
10001b60:	40e2      	lsrs	r2, r4
10001b62:	1989      	adds	r1, r1, r6
10001b64:	4088      	lsls	r0, r1
10001b66:	4310      	orrs	r0, r2
10001b68:	2d00      	cmp	r5, #0
10001b6a:	d0f0      	beq.n	10001b4e <__aeabi_d2iz+0x22>
10001b6c:	4240      	negs	r0, r0
10001b6e:	e7ee      	b.n	10001b4e <__aeabi_d2iz+0x22>
10001b70:	4b06      	ldr	r3, [pc, #24]	; (10001b8c <__aeabi_d2iz+0x60>)
10001b72:	1a5b      	subs	r3, r3, r1
10001b74:	40d8      	lsrs	r0, r3
10001b76:	e7f7      	b.n	10001b68 <__aeabi_d2iz+0x3c>
10001b78:	000003fe 	.word	0x000003fe
10001b7c:	0000041d 	.word	0x0000041d
10001b80:	7fffffff 	.word	0x7fffffff
10001b84:	00000433 	.word	0x00000433
10001b88:	fffffbed 	.word	0xfffffbed
10001b8c:	00000413 	.word	0x00000413

10001b90 <__aeabi_lmul>:
10001b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001b92:	0c04      	lsrs	r4, r0, #16
10001b94:	000d      	movs	r5, r1
10001b96:	b291      	uxth	r1, r2
10001b98:	000f      	movs	r7, r1
10001b9a:	4361      	muls	r1, r4
10001b9c:	468c      	mov	ip, r1
10001b9e:	0006      	movs	r6, r0
10001ba0:	9301      	str	r3, [sp, #4]
10001ba2:	b283      	uxth	r3, r0
10001ba4:	0c10      	lsrs	r0, r2, #16
10001ba6:	435f      	muls	r7, r3
10001ba8:	4344      	muls	r4, r0
10001baa:	4358      	muls	r0, r3
10001bac:	0c3b      	lsrs	r3, r7, #16
10001bae:	4460      	add	r0, ip
10001bb0:	181b      	adds	r3, r3, r0
10001bb2:	4299      	cmp	r1, r3
10001bb4:	d902      	bls.n	10001bbc <__aeabi_lmul+0x2c>
10001bb6:	2180      	movs	r1, #128	; 0x80
10001bb8:	0249      	lsls	r1, r1, #9
10001bba:	1864      	adds	r4, r4, r1
10001bbc:	9901      	ldr	r1, [sp, #4]
10001bbe:	4355      	muls	r5, r2
10001bc0:	4371      	muls	r1, r6
10001bc2:	0c18      	lsrs	r0, r3, #16
10001bc4:	1904      	adds	r4, r0, r4
10001bc6:	041b      	lsls	r3, r3, #16
10001bc8:	b2bf      	uxth	r7, r7
10001bca:	1949      	adds	r1, r1, r5
10001bcc:	19d8      	adds	r0, r3, r7
10001bce:	1909      	adds	r1, r1, r4
10001bd0:	b003      	add	sp, #12
10001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001bd4 <__ffssi2>:
10001bd4:	b510      	push	{r4, lr}
10001bd6:	2800      	cmp	r0, #0
10001bd8:	d002      	beq.n	10001be0 <__ffssi2+0xc>
10001bda:	f7fe fb9d 	bl	10000318 <__ctzsi2>
10001bde:	3001      	adds	r0, #1
10001be0:	bd10      	pop	{r4, pc}

10001be2 <__udivmoddi4>:
10001be2:	b5f0      	push	{r4, r5, r6, r7, lr}
10001be4:	0006      	movs	r6, r0
10001be6:	000f      	movs	r7, r1
10001be8:	0015      	movs	r5, r2
10001bea:	001c      	movs	r4, r3
10001bec:	b085      	sub	sp, #20
10001bee:	428b      	cmp	r3, r1
10001bf0:	d863      	bhi.n	10001cba <__udivmoddi4+0xd8>
10001bf2:	d101      	bne.n	10001bf8 <__udivmoddi4+0x16>
10001bf4:	4282      	cmp	r2, r0
10001bf6:	d860      	bhi.n	10001cba <__udivmoddi4+0xd8>
10001bf8:	0021      	movs	r1, r4
10001bfa:	0028      	movs	r0, r5
10001bfc:	f7ff ff6e 	bl	10001adc <__clzdi2>
10001c00:	0039      	movs	r1, r7
10001c02:	9000      	str	r0, [sp, #0]
10001c04:	0030      	movs	r0, r6
10001c06:	f7ff ff69 	bl	10001adc <__clzdi2>
10001c0a:	9b00      	ldr	r3, [sp, #0]
10001c0c:	0021      	movs	r1, r4
10001c0e:	1a1b      	subs	r3, r3, r0
10001c10:	001a      	movs	r2, r3
10001c12:	0028      	movs	r0, r5
10001c14:	9303      	str	r3, [sp, #12]
10001c16:	f7ff ff55 	bl	10001ac4 <__aeabi_llsl>
10001c1a:	9000      	str	r0, [sp, #0]
10001c1c:	9101      	str	r1, [sp, #4]
10001c1e:	42b9      	cmp	r1, r7
10001c20:	d845      	bhi.n	10001cae <__udivmoddi4+0xcc>
10001c22:	d101      	bne.n	10001c28 <__udivmoddi4+0x46>
10001c24:	42b0      	cmp	r0, r6
10001c26:	d842      	bhi.n	10001cae <__udivmoddi4+0xcc>
10001c28:	9b00      	ldr	r3, [sp, #0]
10001c2a:	9c01      	ldr	r4, [sp, #4]
10001c2c:	2001      	movs	r0, #1
10001c2e:	2100      	movs	r1, #0
10001c30:	9a03      	ldr	r2, [sp, #12]
10001c32:	1af6      	subs	r6, r6, r3
10001c34:	41a7      	sbcs	r7, r4
10001c36:	f7ff ff45 	bl	10001ac4 <__aeabi_llsl>
10001c3a:	0004      	movs	r4, r0
10001c3c:	000d      	movs	r5, r1
10001c3e:	9b03      	ldr	r3, [sp, #12]
10001c40:	2b00      	cmp	r3, #0
10001c42:	d02b      	beq.n	10001c9c <__udivmoddi4+0xba>
10001c44:	9b01      	ldr	r3, [sp, #4]
10001c46:	9a00      	ldr	r2, [sp, #0]
10001c48:	07db      	lsls	r3, r3, #31
10001c4a:	0850      	lsrs	r0, r2, #1
10001c4c:	4318      	orrs	r0, r3
10001c4e:	9b01      	ldr	r3, [sp, #4]
10001c50:	0859      	lsrs	r1, r3, #1
10001c52:	9b03      	ldr	r3, [sp, #12]
10001c54:	469c      	mov	ip, r3
10001c56:	42b9      	cmp	r1, r7
10001c58:	d82c      	bhi.n	10001cb4 <__udivmoddi4+0xd2>
10001c5a:	d101      	bne.n	10001c60 <__udivmoddi4+0x7e>
10001c5c:	42b0      	cmp	r0, r6
10001c5e:	d829      	bhi.n	10001cb4 <__udivmoddi4+0xd2>
10001c60:	0032      	movs	r2, r6
10001c62:	003b      	movs	r3, r7
10001c64:	1a12      	subs	r2, r2, r0
10001c66:	418b      	sbcs	r3, r1
10001c68:	2601      	movs	r6, #1
10001c6a:	1892      	adds	r2, r2, r2
10001c6c:	415b      	adcs	r3, r3
10001c6e:	2700      	movs	r7, #0
10001c70:	18b6      	adds	r6, r6, r2
10001c72:	415f      	adcs	r7, r3
10001c74:	2301      	movs	r3, #1
10001c76:	425b      	negs	r3, r3
10001c78:	449c      	add	ip, r3
10001c7a:	4663      	mov	r3, ip
10001c7c:	2b00      	cmp	r3, #0
10001c7e:	d1ea      	bne.n	10001c56 <__udivmoddi4+0x74>
10001c80:	0030      	movs	r0, r6
10001c82:	0039      	movs	r1, r7
10001c84:	9a03      	ldr	r2, [sp, #12]
10001c86:	f7ff ff11 	bl	10001aac <__aeabi_llsr>
10001c8a:	9a03      	ldr	r2, [sp, #12]
10001c8c:	19a4      	adds	r4, r4, r6
10001c8e:	417d      	adcs	r5, r7
10001c90:	0006      	movs	r6, r0
10001c92:	000f      	movs	r7, r1
10001c94:	f7ff ff16 	bl	10001ac4 <__aeabi_llsl>
10001c98:	1a24      	subs	r4, r4, r0
10001c9a:	418d      	sbcs	r5, r1
10001c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001c9e:	2b00      	cmp	r3, #0
10001ca0:	d001      	beq.n	10001ca6 <__udivmoddi4+0xc4>
10001ca2:	601e      	str	r6, [r3, #0]
10001ca4:	605f      	str	r7, [r3, #4]
10001ca6:	0020      	movs	r0, r4
10001ca8:	0029      	movs	r1, r5
10001caa:	b005      	add	sp, #20
10001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001cae:	2400      	movs	r4, #0
10001cb0:	2500      	movs	r5, #0
10001cb2:	e7c4      	b.n	10001c3e <__udivmoddi4+0x5c>
10001cb4:	19b6      	adds	r6, r6, r6
10001cb6:	417f      	adcs	r7, r7
10001cb8:	e7dc      	b.n	10001c74 <__udivmoddi4+0x92>
10001cba:	2400      	movs	r4, #0
10001cbc:	2500      	movs	r5, #0
10001cbe:	e7ed      	b.n	10001c9c <__udivmoddi4+0xba>

10001cc0 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
10001cc0:	0003      	movs	r3, r0
10001cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001cc4:	000a      	movs	r2, r1
	return gpio_pin_configure(spec->port,
				  spec->pin,
10001cc6:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
10001cc8:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
10001cca:	6800      	ldr	r0, [r0, #0]
10001ccc:	4313      	orrs	r3, r2
	const struct gpio_driver_api *api =
10001cce:	6882      	ldr	r2, [r0, #8]
10001cd0:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
10001cd2:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
10001cd4:	02dc      	lsls	r4, r3, #11
10001cd6:	d506      	bpl.n	10001ce6 <gpio_pin_configure_dt+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
10001cd8:	24c0      	movs	r4, #192	; 0xc0
10001cda:	0324      	lsls	r4, r4, #12
10001cdc:	4223      	tst	r3, r4
10001cde:	d002      	beq.n	10001ce6 <gpio_pin_configure_dt+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10001ce0:	07dd      	lsls	r5, r3, #31
10001ce2:	d500      	bpl.n	10001ce6 <gpio_pin_configure_dt+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10001ce4:	4063      	eors	r3, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001ce6:	2701      	movs	r7, #1
10001ce8:	003d      	movs	r5, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cea:	4c08      	ldr	r4, [pc, #32]	; (10001d0c <gpio_pin_configure_dt+0x4c>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cec:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cee:	401c      	ands	r4, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cf0:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10001cf2:	9401      	str	r4, [sp, #4]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001cf4:	0034      	movs	r4, r6
10001cf6:	43ac      	bics	r4, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001cf8:	423b      	tst	r3, r7
10001cfa:	d001      	beq.n	10001d00 <gpio_pin_configure_dt+0x40>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001cfc:	0034      	movs	r4, r6
10001cfe:	432c      	orrs	r4, r5
	return api->pin_configure(port, pin, flags);
10001d00:	4663      	mov	r3, ip
}
10001d02:	6014      	str	r4, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001d04:	681b      	ldr	r3, [r3, #0]
10001d06:	9a01      	ldr	r2, [sp, #4]
10001d08:	4798      	blx	r3
}
10001d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001d0c:	ffefffff 	.word	0xffefffff

10001d10 <pwm_set_dt.constprop.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
10001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d12:	6843      	ldr	r3, [r0, #4]
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
10001d14:	b089      	sub	sp, #36	; 0x24
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d16:	9302      	str	r3, [sp, #8]
10001d18:	8983      	ldrh	r3, [r0, #12]
10001d1a:	6804      	ldr	r4, [r0, #0]
10001d1c:	9303      	str	r3, [sp, #12]
	return api->get_cycles_per_sec(dev, channel, cycles);
10001d1e:	68a3      	ldr	r3, [r4, #8]
10001d20:	0020      	movs	r0, r4
10001d22:	685b      	ldr	r3, [r3, #4]
10001d24:	9902      	ldr	r1, [sp, #8]
10001d26:	aa06      	add	r2, sp, #24
10001d28:	4798      	blx	r3
	if (err < 0) {
10001d2a:	2800      	cmp	r0, #0
10001d2c:	db2b      	blt.n	10001d86 <pwm_set_dt.constprop.0+0x76>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001d2e:	9e06      	ldr	r6, [sp, #24]
10001d30:	9f07      	ldr	r7, [sp, #28]
10001d32:	2300      	movs	r3, #0
10001d34:	4a17      	ldr	r2, [pc, #92]	; (10001d94 <pwm_set_dt.constprop.0+0x84>)
10001d36:	0030      	movs	r0, r6
10001d38:	0039      	movs	r1, r7
10001d3a:	f7ff ff29 	bl	10001b90 <__aeabi_lmul>
10001d3e:	2300      	movs	r3, #0
10001d40:	4a15      	ldr	r2, [pc, #84]	; (10001d98 <pwm_set_dt.constprop.0+0x88>)
10001d42:	9104      	str	r1, [sp, #16]
10001d44:	f7fe fb08 	bl	10000358 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10001d48:	9904      	ldr	r1, [sp, #16]
10001d4a:	4b14      	ldr	r3, [pc, #80]	; (10001d9c <pwm_set_dt.constprop.0+0x8c>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001d4c:	0005      	movs	r5, r0
10001d4e:	9005      	str	r0, [sp, #20]
	if (period_cycles > UINT32_MAX) {
10001d50:	4299      	cmp	r1, r3
10001d52:	d81a      	bhi.n	10001d8a <pwm_set_dt.constprop.0+0x7a>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001d54:	2300      	movs	r3, #0
10001d56:	0039      	movs	r1, r7
10001d58:	4a11      	ldr	r2, [pc, #68]	; (10001da0 <pwm_set_dt.constprop.0+0x90>)
10001d5a:	0030      	movs	r0, r6
10001d5c:	f7ff ff18 	bl	10001b90 <__aeabi_lmul>
10001d60:	2300      	movs	r3, #0
10001d62:	4a0d      	ldr	r2, [pc, #52]	; (10001d98 <pwm_set_dt.constprop.0+0x88>)
10001d64:	000f      	movs	r7, r1
10001d66:	f7fe faf7 	bl	10000358 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10001d6a:	4a0c      	ldr	r2, [pc, #48]	; (10001d9c <pwm_set_dt.constprop.0+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001d6c:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
10001d6e:	4297      	cmp	r7, r2
10001d70:	d80b      	bhi.n	10001d8a <pwm_set_dt.constprop.0+0x7a>
	const struct pwm_driver_api *api =
10001d72:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10001d74:	4285      	cmp	r5, r0
10001d76:	d30b      	bcc.n	10001d90 <pwm_set_dt.constprop.0+0x80>
	return api->set_cycles(dev, channel, period, pulse, flags);
10001d78:	9903      	ldr	r1, [sp, #12]
10001d7a:	0020      	movs	r0, r4
10001d7c:	9100      	str	r1, [sp, #0]
10001d7e:	6816      	ldr	r6, [r2, #0]
10001d80:	9902      	ldr	r1, [sp, #8]
10001d82:	002a      	movs	r2, r5
10001d84:	47b0      	blx	r6
}
10001d86:	b009      	add	sp, #36	; 0x24
10001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10001d8a:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10001d8c:	4240      	negs	r0, r0
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001d8e:	e7fa      	b.n	10001d86 <pwm_set_dt.constprop.0+0x76>
		return -EINVAL;
10001d90:	2016      	movs	r0, #22
10001d92:	e7fb      	b.n	10001d8c <pwm_set_dt.constprop.0+0x7c>
10001d94:	05f5e100 	.word	0x05f5e100
10001d98:	3b9aca00 	.word	0x3b9aca00
10001d9c:	3b9ac9ff 	.word	0x3b9ac9ff
10001da0:	02faf080 	.word	0x02faf080

10001da4 <main>:
{
	printk("Button4 pressed at %" PRIu32 "\n", k_cycle_get_32());
}

void main(void)
{
10001da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int ret;

	// ############# GPIO ###############

	// inicializar led placa
	if (!gpio_is_ready_dt(&led_placa)) {
10001da6:	4c78      	ldr	r4, [pc, #480]	; (10001f88 <main+0x1e4>)
10001da8:	0020      	movs	r0, r4
10001daa:	f003 fa24 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001dae:	2800      	cmp	r0, #0
10001db0:	d036      	beq.n	10001e20 <main+0x7c>
		return;
	}

	ret = gpio_pin_configure_dt(&led_placa, GPIO_OUTPUT_ACTIVE);
10001db2:	21d0      	movs	r1, #208	; 0xd0
10001db4:	4875      	ldr	r0, [pc, #468]	; (10001f8c <main+0x1e8>)
10001db6:	0349      	lsls	r1, r1, #13
10001db8:	f7ff ff82 	bl	10001cc0 <gpio_pin_configure_dt>
	if (ret < 0) {
10001dbc:	2800      	cmp	r0, #0
10001dbe:	db2f      	blt.n	10001e20 <main+0x7c>
		return;
	}

	// inicializar GFCI_test
	if (!gpio_is_ready_dt(&GFCI_test)) {
10001dc0:	0020      	movs	r0, r4
10001dc2:	f003 fa18 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001dc6:	2800      	cmp	r0, #0
10001dc8:	d02a      	beq.n	10001e20 <main+0x7c>
		return;
	}

	ret = gpio_pin_configure_dt(&GFCI_test, GPIO_INPUT);
10001dca:	2180      	movs	r1, #128	; 0x80
10001dcc:	4870      	ldr	r0, [pc, #448]	; (10001f90 <main+0x1ec>)
10001dce:	0249      	lsls	r1, r1, #9
10001dd0:	f7ff ff76 	bl	10001cc0 <gpio_pin_configure_dt>
	if (ret < 0) {
10001dd4:	2800      	cmp	r0, #0
10001dd6:	db23      	blt.n	10001e20 <main+0x7c>
		return;
	}

	// inicializar GFCI_fault
	if (!gpio_is_ready_dt(&GFCI_fault)) {
10001dd8:	0020      	movs	r0, r4
10001dda:	f003 fa0c 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001dde:	2800      	cmp	r0, #0
10001de0:	d01e      	beq.n	10001e20 <main+0x7c>
		return;
	}

	ret = gpio_pin_configure_dt(&GFCI_fault, GPIO_INPUT);
10001de2:	2180      	movs	r1, #128	; 0x80
10001de4:	486b      	ldr	r0, [pc, #428]	; (10001f94 <main+0x1f0>)
10001de6:	0249      	lsls	r1, r1, #9
10001de8:	f7ff ff6a 	bl	10001cc0 <gpio_pin_configure_dt>
	if (ret < 0) {
10001dec:	2800      	cmp	r0, #0
10001dee:	db17      	blt.n	10001e20 <main+0x7c>
		return;
	}

	printk("GPIOs configurados correctamente\n");
10001df0:	4869      	ldr	r0, [pc, #420]	; (10001f98 <main+0x1f4>)
10001df2:	f003 fa3a 	bl	1000526a <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10001df6:	4d69      	ldr	r5, [pc, #420]	; (10001f9c <main+0x1f8>)
10001df8:	0028      	movs	r0, r5
10001dfa:	f003 fe67 	bl	10005acc <z_device_is_ready>
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};
	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
10001dfe:	2800      	cmp	r0, #0
10001e00:	d00b      	beq.n	10001e1a <main+0x76>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
10001e02:	68ae      	ldr	r6, [r5, #8]
10001e04:	0028      	movs	r0, r5
10001e06:	4966      	ldr	r1, [pc, #408]	; (10001fa0 <main+0x1fc>)
10001e08:	6833      	ldr	r3, [r6, #0]
10001e0a:	4798      	blx	r3
10001e0c:	1e02      	subs	r2, r0, #0
			printk("ADC controller device not ready\n");
			return;
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
		if (err < 0) {
10001e0e:	db1d      	blt.n	10001e4c <main+0xa8>
10001e10:	0028      	movs	r0, r5
10001e12:	f003 fe5b 	bl	10005acc <z_device_is_ready>
		if (!device_is_ready(adc_channels[i].dev)) {
10001e16:	2800      	cmp	r0, #0
10001e18:	d103      	bne.n	10001e22 <main+0x7e>
			printk("ADC controller device not ready\n");
10001e1a:	4862      	ldr	r0, [pc, #392]	; (10001fa4 <main+0x200>)
10001e1c:	f003 fa25 	bl	1000526a <printk>
// 			print_uart(tx_buf);
// 			print_uart("\r\n");
// 		}
		
// 	}
10001e20:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10001e22:	4961      	ldr	r1, [pc, #388]	; (10001fa8 <main+0x204>)
10001e24:	0028      	movs	r0, r5
10001e26:	6833      	ldr	r3, [r6, #0]
10001e28:	4798      	blx	r3
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10001e2a:	2101      	movs	r1, #1
10001e2c:	1e02      	subs	r2, r0, #0
		if (err < 0) {
10001e2e:	db0e      	blt.n	10001e4e <main+0xaa>
	printk("ADCs configurados correctamente\n");
10001e30:	485e      	ldr	r0, [pc, #376]	; (10001fac <main+0x208>)
10001e32:	f003 fa1a 	bl	1000526a <printk>
10001e36:	4d5e      	ldr	r5, [pc, #376]	; (10001fb0 <main+0x20c>)
10001e38:	0028      	movs	r0, r5
10001e3a:	f003 fe47 	bl	10005acc <z_device_is_ready>
	if (!device_is_ready(pwm_rele1.dev)) {
10001e3e:	2800      	cmp	r0, #0
10001e40:	d109      	bne.n	10001e56 <main+0xb2>
		printk("Error: PWM device %s is not ready\n",
10001e42:	485c      	ldr	r0, [pc, #368]	; (10001fb4 <main+0x210>)
10001e44:	6829      	ldr	r1, [r5, #0]
			printk("Error %d: failed to set pulse width\n", ret);
10001e46:	f003 fa10 	bl	1000526a <printk>
			return;
10001e4a:	e7e9      	b.n	10001e20 <main+0x7c>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10001e4c:	2100      	movs	r1, #0
			printk("Could not setup channel #%d (%d)\n", i, err);
10001e4e:	485a      	ldr	r0, [pc, #360]	; (10001fb8 <main+0x214>)
10001e50:	f003 fa0b 	bl	1000526a <printk>
			return;
10001e54:	e7e4      	b.n	10001e20 <main+0x7c>
10001e56:	0028      	movs	r0, r5
10001e58:	f003 fe38 	bl	10005acc <z_device_is_ready>
	if (!device_is_ready(pwm_rele2.dev)) {
10001e5c:	2800      	cmp	r0, #0
10001e5e:	d0f0      	beq.n	10001e42 <main+0x9e>
10001e60:	0028      	movs	r0, r5
10001e62:	f003 fe33 	bl	10005acc <z_device_is_ready>
	if (!device_is_ready(pwm_pilot_out.dev)) {
10001e66:	2800      	cmp	r0, #0
10001e68:	d0eb      	beq.n	10001e42 <main+0x9e>
	printk("PWMs configurados correctamente\n");
10001e6a:	4854      	ldr	r0, [pc, #336]	; (10001fbc <main+0x218>)
10001e6c:	f003 f9fd 	bl	1000526a <printk>
	if (!gpio_is_ready_dt(&button0)) {
10001e70:	0020      	movs	r0, r4
10001e72:	f003 f9c0 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001e76:	2800      	cmp	r0, #0
10001e78:	d102      	bne.n	10001e80 <main+0xdc>
		printk("Error: button0 device %s is not ready\n",
10001e7a:	4851      	ldr	r0, [pc, #324]	; (10001fc0 <main+0x21c>)
		printk("Error: button4 device %s is not ready\n",
10001e7c:	6821      	ldr	r1, [r4, #0]
10001e7e:	e7e2      	b.n	10001e46 <main+0xa2>
		if (!gpio_is_ready_dt(&button1)) {
10001e80:	0020      	movs	r0, r4
10001e82:	f003 f9b8 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001e86:	2800      	cmp	r0, #0
10001e88:	d101      	bne.n	10001e8e <main+0xea>
		printk("Error: button1 device %s is not ready\n",
10001e8a:	484e      	ldr	r0, [pc, #312]	; (10001fc4 <main+0x220>)
10001e8c:	e7f6      	b.n	10001e7c <main+0xd8>
		if (!gpio_is_ready_dt(&button2)) {
10001e8e:	0020      	movs	r0, r4
10001e90:	f003 f9b1 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001e94:	2800      	cmp	r0, #0
10001e96:	d101      	bne.n	10001e9c <main+0xf8>
		printk("Error: button2 device %s is not ready\n",
10001e98:	484b      	ldr	r0, [pc, #300]	; (10001fc8 <main+0x224>)
10001e9a:	e7ef      	b.n	10001e7c <main+0xd8>
		if (!gpio_is_ready_dt(&button3)) {
10001e9c:	0020      	movs	r0, r4
10001e9e:	f003 f9aa 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001ea2:	2800      	cmp	r0, #0
10001ea4:	d101      	bne.n	10001eaa <main+0x106>
		printk("Error: button3 device %s is not ready\n",
10001ea6:	4849      	ldr	r0, [pc, #292]	; (10001fcc <main+0x228>)
10001ea8:	e7e8      	b.n	10001e7c <main+0xd8>
		if (!gpio_is_ready_dt(&button4)) {
10001eaa:	0020      	movs	r0, r4
10001eac:	f003 f9a3 	bl	100051f6 <gpio_is_ready_dt.isra.0>
10001eb0:	2800      	cmp	r0, #0
10001eb2:	d101      	bne.n	10001eb8 <main+0x114>
		printk("Error: button4 device %s is not ready\n",
10001eb4:	4846      	ldr	r0, [pc, #280]	; (10001fd0 <main+0x22c>)
10001eb6:	e7e1      	b.n	10001e7c <main+0xd8>
	ret = gpio_pin_configure_dt(&button0, GPIO_INPUT);
10001eb8:	2180      	movs	r1, #128	; 0x80
10001eba:	4f46      	ldr	r7, [pc, #280]	; (10001fd4 <main+0x230>)
10001ebc:	0249      	lsls	r1, r1, #9
10001ebe:	0038      	movs	r0, r7
10001ec0:	f7ff fefe 	bl	10001cc0 <gpio_pin_configure_dt>
10001ec4:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10001ec6:	4844      	ldr	r0, [pc, #272]	; (10001fd8 <main+0x234>)
	if (ret != 0) {
10001ec8:	d12b      	bne.n	10001f22 <main+0x17e>
		ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
10001eca:	2180      	movs	r1, #128	; 0x80
10001ecc:	4e43      	ldr	r6, [pc, #268]	; (10001fdc <main+0x238>)
10001ece:	0249      	lsls	r1, r1, #9
10001ed0:	0030      	movs	r0, r6
10001ed2:	f7ff fef5 	bl	10001cc0 <gpio_pin_configure_dt>
10001ed6:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10001ed8:	483f      	ldr	r0, [pc, #252]	; (10001fd8 <main+0x234>)
	if (ret != 0) {
10001eda:	d12d      	bne.n	10001f38 <main+0x194>
	ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
10001edc:	2180      	movs	r1, #128	; 0x80
10001ede:	4d40      	ldr	r5, [pc, #256]	; (10001fe0 <main+0x23c>)
10001ee0:	0249      	lsls	r1, r1, #9
10001ee2:	0028      	movs	r0, r5
10001ee4:	f7ff feec 	bl	10001cc0 <gpio_pin_configure_dt>
10001ee8:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10001eea:	483b      	ldr	r0, [pc, #236]	; (10001fd8 <main+0x234>)
	if (ret != 0) {
10001eec:	d12c      	bne.n	10001f48 <main+0x1a4>
	ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);
10001eee:	2180      	movs	r1, #128	; 0x80
10001ef0:	4b3c      	ldr	r3, [pc, #240]	; (10001fe4 <main+0x240>)
10001ef2:	0249      	lsls	r1, r1, #9
10001ef4:	0018      	movs	r0, r3
10001ef6:	9300      	str	r3, [sp, #0]
10001ef8:	f7ff fee2 	bl	10001cc0 <gpio_pin_configure_dt>
10001efc:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10001efe:	4836      	ldr	r0, [pc, #216]	; (10001fd8 <main+0x234>)
	if (ret != 0) {
10001f00:	d12a      	bne.n	10001f58 <main+0x1b4>
	ret = gpio_pin_configure_dt(&button4, GPIO_INPUT);
10001f02:	2180      	movs	r1, #128	; 0x80
10001f04:	4b38      	ldr	r3, [pc, #224]	; (10001fe8 <main+0x244>)
10001f06:	0249      	lsls	r1, r1, #9
10001f08:	0018      	movs	r0, r3
10001f0a:	9301      	str	r3, [sp, #4]
10001f0c:	f7ff fed8 	bl	10001cc0 <gpio_pin_configure_dt>
10001f10:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10001f12:	4831      	ldr	r0, [pc, #196]	; (10001fd8 <main+0x234>)
	if (ret != 0) {
10001f14:	d128      	bne.n	10001f68 <main+0x1c4>
	ret = gpio_pin_interrupt_configure_dt(&button0,
10001f16:	0038      	movs	r0, r7
10001f18:	f003 f953 	bl	100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>
10001f1c:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10001f1e:	d005      	beq.n	10001f2c <main+0x188>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f20:	4832      	ldr	r0, [pc, #200]	; (10001fec <main+0x248>)
10001f22:	2306      	movs	r3, #6
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f24:	6822      	ldr	r2, [r4, #0]
10001f26:	f003 f9a0 	bl	1000526a <printk>
		return;
10001f2a:	e779      	b.n	10001e20 <main+0x7c>
	ret = gpio_pin_interrupt_configure_dt(&button1,
10001f2c:	0030      	movs	r0, r6
10001f2e:	f003 f948 	bl	100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>
10001f32:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10001f34:	d002      	beq.n	10001f3c <main+0x198>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f36:	482d      	ldr	r0, [pc, #180]	; (10001fec <main+0x248>)
10001f38:	2307      	movs	r3, #7
10001f3a:	e7f3      	b.n	10001f24 <main+0x180>
	ret = gpio_pin_interrupt_configure_dt(&button2,
10001f3c:	0028      	movs	r0, r5
10001f3e:	f003 f940 	bl	100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>
10001f42:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10001f44:	d002      	beq.n	10001f4c <main+0x1a8>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f46:	4829      	ldr	r0, [pc, #164]	; (10001fec <main+0x248>)
10001f48:	2308      	movs	r3, #8
10001f4a:	e7eb      	b.n	10001f24 <main+0x180>
	ret = gpio_pin_interrupt_configure_dt(&button3,
10001f4c:	9800      	ldr	r0, [sp, #0]
10001f4e:	f003 f938 	bl	100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>
10001f52:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10001f54:	d002      	beq.n	10001f5c <main+0x1b8>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f56:	4825      	ldr	r0, [pc, #148]	; (10001fec <main+0x248>)
10001f58:	2309      	movs	r3, #9
10001f5a:	e7e3      	b.n	10001f24 <main+0x180>
	ret = gpio_pin_interrupt_configure_dt(&button4,
10001f5c:	9801      	ldr	r0, [sp, #4]
10001f5e:	f003 f930 	bl	100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>
10001f62:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10001f64:	d002      	beq.n	10001f6c <main+0x1c8>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10001f66:	4821      	ldr	r0, [pc, #132]	; (10001fec <main+0x248>)
10001f68:	230a      	movs	r3, #10
10001f6a:	e7db      	b.n	10001f24 <main+0x180>
	ret = pwm_set_dt(&pwm_rele1, period, period / 2U);
10001f6c:	4820      	ldr	r0, [pc, #128]	; (10001ff0 <main+0x24c>)
10001f6e:	f7ff fecf 	bl	10001d10 <pwm_set_dt.constprop.0>
10001f72:	1e01      	subs	r1, r0, #0
		if (ret) {
10001f74:	d001      	beq.n	10001f7a <main+0x1d6>
			printk("Error %d: failed to set pulse width\n", ret);
10001f76:	481f      	ldr	r0, [pc, #124]	; (10001ff4 <main+0x250>)
10001f78:	e765      	b.n	10001e46 <main+0xa2>
	ret = pwm_set_dt(&pwm_rele2, period, period / 2U);
10001f7a:	481f      	ldr	r0, [pc, #124]	; (10001ff8 <main+0x254>)
10001f7c:	f7ff fec8 	bl	10001d10 <pwm_set_dt.constprop.0>
10001f80:	1e01      	subs	r1, r0, #0
		if (ret) {
10001f82:	d100      	bne.n	10001f86 <main+0x1e2>
10001f84:	e74c      	b.n	10001e20 <main+0x7c>
10001f86:	e7f6      	b.n	10001f76 <main+0x1d2>
10001f88:	10005de0 	.word	0x10005de0
10001f8c:	10005fec 	.word	0x10005fec
10001f90:	10005fe4 	.word	0x10005fe4
10001f94:	10005fdc 	.word	0x10005fdc
10001f98:	10006198 	.word	0x10006198
10001f9c:	10005df8 	.word	0x10005df8
10001fa0:	10005fa2 	.word	0x10005fa2
10001fa4:	100061ba 	.word	0x100061ba
10001fa8:	10005fb2 	.word	0x10005fb2
10001fac:	100061fd 	.word	0x100061fd
10001fb0:	10005e10 	.word	0x10005e10
10001fb4:	1000621e 	.word	0x1000621e
10001fb8:	100061db 	.word	0x100061db
10001fbc:	10006241 	.word	0x10006241
10001fc0:	10006262 	.word	0x10006262
10001fc4:	10006289 	.word	0x10006289
10001fc8:	100062b0 	.word	0x100062b0
10001fcc:	100062d7 	.word	0x100062d7
10001fd0:	100062fe 	.word	0x100062fe
10001fd4:	10005f94 	.word	0x10005f94
10001fd8:	10006325 	.word	0x10006325
10001fdc:	10005f8c 	.word	0x10005f8c
10001fe0:	10005f84 	.word	0x10005f84
10001fe4:	10005f7c 	.word	0x10005f7c
10001fe8:	10005f74 	.word	0x10005f74
10001fec:	1000634e 	.word	0x1000634e
10001ff0:	10005fcc 	.word	0x10005fcc
10001ff4:	10006384 	.word	0x10006384
10001ff8:	10005fbc 	.word	0x10005fbc

10001ffc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ffe:	b095      	sub	sp, #84	; 0x54
10002000:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10002002:	2304      	movs	r3, #4
{
10002004:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10002006:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10002008:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000200a:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000200c:	08da      	lsrs	r2, r3, #3
1000200e:	2307      	movs	r3, #7
10002010:	401a      	ands	r2, r3
10002012:	3201      	adds	r2, #1
{
10002014:	0007      	movs	r7, r0
10002016:	9c1a      	ldr	r4, [sp, #104]	; 0x68
10002018:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000201a:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
1000201c:	0782      	lsls	r2, r0, #30
1000201e:	d000      	beq.n	10002022 <cbvprintf_package+0x26>
10002020:	e1d2      	b.n	100023c8 <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10002022:	1d02      	adds	r2, r0, #4
10002024:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
10002026:	2800      	cmp	r0, #0
10002028:	d004      	beq.n	10002034 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
1000202a:	2907      	cmp	r1, #7
1000202c:	d80a      	bhi.n	10002044 <cbvprintf_package+0x48>
		return -ENOSPC;
1000202e:	201c      	movs	r0, #28
		return -EFAULT;
10002030:	4240      	negs	r0, r0
10002032:	e154      	b.n	100022de <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10002034:	9a02      	ldr	r2, [sp, #8]
10002036:	401a      	ands	r2, r3
10002038:	0013      	movs	r3, r2
1000203a:	3204      	adds	r2, #4
1000203c:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
1000203e:	2208      	movs	r2, #8
10002040:	1ad3      	subs	r3, r2, r3
10002042:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10002044:	2504      	movs	r5, #4
	s = fmt--;
10002046:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
10002048:	002e      	movs	r6, r5
	s = fmt--;
1000204a:	3b01      	subs	r3, #1
1000204c:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
1000204e:	2300      	movs	r3, #0
10002050:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
10002052:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
10002054:	9303      	str	r3, [sp, #12]
	bool parsing = false;
10002056:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
10002058:	3b01      	subs	r3, #1
1000205a:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
1000205c:	2f00      	cmp	r7, #0
1000205e:	d002      	beq.n	10002066 <cbvprintf_package+0x6a>
				*(const char **)buf = s;
10002060:	9b00      	ldr	r3, [sp, #0]
10002062:	9a04      	ldr	r2, [sp, #16]
10002064:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002068:	2b00      	cmp	r3, #0
1000206a:	dd00      	ble.n	1000206e <cbvprintf_package+0x72>
1000206c:	e0eb      	b.n	10002246 <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
1000206e:	4b9d      	ldr	r3, [pc, #628]	; (100022e4 <cbvprintf_package+0x2e8>)
10002070:	9a04      	ldr	r2, [sp, #16]
10002072:	429a      	cmp	r2, r3
10002074:	d303      	bcc.n	1000207e <cbvprintf_package+0x82>
10002076:	4b9c      	ldr	r3, [pc, #624]	; (100022e8 <cbvprintf_package+0x2ec>)
10002078:	429a      	cmp	r2, r3
1000207a:	d200      	bcs.n	1000207e <cbvprintf_package+0x82>
1000207c:	e0e3      	b.n	10002246 <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000207e:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002080:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10002082:	1bda      	subs	r2, r3, r7
10002084:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002086:	0789      	lsls	r1, r1, #30
10002088:	d500      	bpl.n	1000208c <cbvprintf_package+0x90>
1000208a:	e109      	b.n	100022a0 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
1000208c:	9a03      	ldr	r2, [sp, #12]
1000208e:	2a0f      	cmp	r2, #15
10002090:	d900      	bls.n	10002094 <cbvprintf_package+0x98>
10002092:	e0b4      	b.n	100021fe <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
10002094:	2f00      	cmp	r7, #0
10002096:	d100      	bne.n	1000209a <cbvprintf_package+0x9e>
10002098:	e10a      	b.n	100022b0 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
1000209a:	9903      	ldr	r1, [sp, #12]
1000209c:	aa0c      	add	r2, sp, #48	; 0x30
1000209e:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
100020a0:	000a      	movs	r2, r1
100020a2:	9906      	ldr	r1, [sp, #24]
100020a4:	ab10      	add	r3, sp, #64	; 0x40
100020a6:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
100020a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100020aa:	3301      	adds	r3, #1
100020ac:	930a      	str	r3, [sp, #40]	; 0x28
100020ae:	e0ee      	b.n	1000228e <cbvprintf_package+0x292>
			switch (*fmt) {
100020b0:	287a      	cmp	r0, #122	; 0x7a
100020b2:	d861      	bhi.n	10002178 <cbvprintf_package+0x17c>
100020b4:	284b      	cmp	r0, #75	; 0x4b
100020b6:	d80e      	bhi.n	100020d6 <cbvprintf_package+0xda>
100020b8:	2847      	cmp	r0, #71	; 0x47
100020ba:	d85d      	bhi.n	10002178 <cbvprintf_package+0x17c>
100020bc:	2829      	cmp	r0, #41	; 0x29
100020be:	d82b      	bhi.n	10002118 <cbvprintf_package+0x11c>
100020c0:	2825      	cmp	r0, #37	; 0x25
100020c2:	d056      	beq.n	10002172 <cbvprintf_package+0x176>
100020c4:	d858      	bhi.n	10002178 <cbvprintf_package+0x17c>
100020c6:	2820      	cmp	r0, #32
100020c8:	d07f      	beq.n	100021ca <cbvprintf_package+0x1ce>
100020ca:	3823      	subs	r0, #35	; 0x23
100020cc:	4243      	negs	r3, r0
100020ce:	4158      	adcs	r0, r3
100020d0:	b2c3      	uxtb	r3, r0
				parsing = false;
100020d2:	9301      	str	r3, [sp, #4]
				continue;
100020d4:	e079      	b.n	100021ca <cbvprintf_package+0x1ce>
			switch (*fmt) {
100020d6:	384c      	subs	r0, #76	; 0x4c
100020d8:	282e      	cmp	r0, #46	; 0x2e
100020da:	d84d      	bhi.n	10002178 <cbvprintf_package+0x17c>
100020dc:	f7fe f864 	bl	100001a8 <__gnu_thumb1_case_uqi>
100020e0:	4c4c4c75 	.word	0x4c4c4c75
100020e4:	4c4c4c4c 	.word	0x4c4c4c4c
100020e8:	4c4c4c4c 	.word	0x4c4c4c4c
100020ec:	4c4c4c4e 	.word	0x4c4c4c4e
100020f0:	4c4c4c4c 	.word	0x4c4c4c4c
100020f4:	4e4c5d4c 	.word	0x4e4c5d4c
100020f8:	5d5d5d4e 	.word	0x5d5d5d4e
100020fc:	4c734e75 	.word	0x4c734e75
10002100:	4e184c75 	.word	0x4e184c75
10002104:	894c4c18 	.word	0x894c4c18
10002108:	4c4c4e87 	.word	0x4c4c4e87
1000210c:	4c4e      	.short	0x4c4e
1000210e:	87          	.byte	0x87
1000210f:	00          	.byte	0x00
10002110:	2300      	movs	r3, #0
				parsing = false;
10002112:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10002114:	2504      	movs	r5, #4
10002116:	e03e      	b.n	10002196 <cbvprintf_package+0x19a>
10002118:	2101      	movs	r1, #1
1000211a:	000a      	movs	r2, r1
1000211c:	382a      	subs	r0, #42	; 0x2a
1000211e:	b2c0      	uxtb	r0, r0
10002120:	4082      	lsls	r2, r0
10002122:	4b72      	ldr	r3, [pc, #456]	; (100022ec <cbvprintf_package+0x2f0>)
10002124:	421a      	tst	r2, r3
10002126:	d150      	bne.n	100021ca <cbvprintf_package+0x1ce>
10002128:	20e2      	movs	r0, #226	; 0xe2
1000212a:	0013      	movs	r3, r2
1000212c:	0580      	lsls	r0, r0, #22
1000212e:	4003      	ands	r3, r0
10002130:	4202      	tst	r2, r0
10002132:	d132      	bne.n	1000219a <cbvprintf_package+0x19e>
10002134:	0010      	movs	r0, r2
10002136:	4008      	ands	r0, r1
10002138:	9001      	str	r0, [sp, #4]
1000213a:	420a      	tst	r2, r1
1000213c:	d045      	beq.n	100021ca <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
1000213e:	9a00      	ldr	r2, [sp, #0]
10002140:	4269      	negs	r1, r5
10002142:	3a01      	subs	r2, #1
10002144:	1952      	adds	r2, r2, r5
10002146:	4011      	ands	r1, r2
10002148:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
1000214a:	2f00      	cmp	r7, #0
1000214c:	d065      	beq.n	1000221a <cbvprintf_package+0x21e>
1000214e:	1bf2      	subs	r2, r6, r7
10002150:	1852      	adds	r2, r2, r1
10002152:	9902      	ldr	r1, [sp, #8]
10002154:	428a      	cmp	r2, r1
10002156:	d900      	bls.n	1000215a <cbvprintf_package+0x15e>
10002158:	e769      	b.n	1000202e <cbvprintf_package+0x32>
		if (is_str_arg) {
1000215a:	2b00      	cmp	r3, #0
1000215c:	d16a      	bne.n	10002234 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
1000215e:	2e04      	cmp	r6, #4
10002160:	d14b      	bne.n	100021fa <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
10002162:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
10002164:	9a00      	ldr	r2, [sp, #0]
10002166:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
10002168:	9b00      	ldr	r3, [sp, #0]
1000216a:	2604      	movs	r6, #4
1000216c:	3304      	adds	r3, #4
1000216e:	9300      	str	r3, [sp, #0]
10002170:	e02b      	b.n	100021ca <cbvprintf_package+0x1ce>
				arg_idx--;
10002172:	9b06      	ldr	r3, [sp, #24]
10002174:	3b01      	subs	r3, #1
10002176:	9306      	str	r3, [sp, #24]
				parsing = false;
10002178:	2300      	movs	r3, #0
1000217a:	e7aa      	b.n	100020d2 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
1000217c:	9b05      	ldr	r3, [sp, #20]
1000217e:	785a      	ldrb	r2, [r3, #1]
10002180:	2300      	movs	r3, #0
				parsing = false;
10002182:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
10002184:	2a6c      	cmp	r2, #108	; 0x6c
10002186:	d1da      	bne.n	1000213e <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
10002188:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
1000218a:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
1000218c:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
1000218e:	7812      	ldrb	r2, [r2, #0]
10002190:	2a6c      	cmp	r2, #108	; 0x6c
10002192:	d1d4      	bne.n	1000213e <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
10002194:	196d      	adds	r5, r5, r5
			switch (*fmt) {
10002196:	002e      	movs	r6, r5
10002198:	e7d1      	b.n	1000213e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
1000219a:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
1000219c:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
1000219e:	3407      	adds	r4, #7
100021a0:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
100021a2:	1949      	adds	r1, r1, r5
100021a4:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
100021a6:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
100021a8:	2f00      	cmp	r7, #0
100021aa:	d008      	beq.n	100021be <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
100021ac:	3501      	adds	r5, #1
100021ae:	1bed      	subs	r5, r5, r7
100021b0:	9e02      	ldr	r6, [sp, #8]
100021b2:	186d      	adds	r5, r5, r1
100021b4:	42b5      	cmp	r5, r6
100021b6:	d900      	bls.n	100021ba <cbvprintf_package+0x1be>
100021b8:	e739      	b.n	1000202e <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
100021ba:	600a      	str	r2, [r1, #0]
100021bc:	604b      	str	r3, [r1, #4]
				parsing = false;
100021be:	2300      	movs	r3, #0
				buf += size;
100021c0:	3108      	adds	r1, #8
100021c2:	9100      	str	r1, [sp, #0]
				parsing = false;
100021c4:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
100021c6:	2508      	movs	r5, #8
100021c8:	002e      	movs	r6, r5
100021ca:	9b05      	ldr	r3, [sp, #20]
100021cc:	3301      	adds	r3, #1
100021ce:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
100021d0:	9b05      	ldr	r3, [sp, #20]
100021d2:	7898      	ldrb	r0, [r3, #2]
100021d4:	2800      	cmp	r0, #0
100021d6:	d077      	beq.n	100022c8 <cbvprintf_package+0x2cc>
			if (!parsing) {
100021d8:	9b01      	ldr	r3, [sp, #4]
100021da:	2b00      	cmp	r3, #0
100021dc:	d000      	beq.n	100021e0 <cbvprintf_package+0x1e4>
100021de:	e767      	b.n	100020b0 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
100021e0:	2825      	cmp	r0, #37	; 0x25
100021e2:	d1f2      	bne.n	100021ca <cbvprintf_package+0x1ce>
					arg_idx++;
100021e4:	9b06      	ldr	r3, [sp, #24]
100021e6:	3301      	adds	r3, #1
100021e8:	9306      	str	r3, [sp, #24]
					parsing = true;
100021ea:	2301      	movs	r3, #1
100021ec:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
100021ee:	2504      	movs	r5, #4
100021f0:	e7ea      	b.n	100021c8 <cbvprintf_package+0x1cc>
			switch (*fmt) {
100021f2:	2200      	movs	r2, #0
100021f4:	9b01      	ldr	r3, [sp, #4]
100021f6:	9201      	str	r2, [sp, #4]
100021f8:	e78c      	b.n	10002114 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
100021fa:	2e08      	cmp	r6, #8
100021fc:	d001      	beq.n	10002202 <cbvprintf_package+0x206>
					return -EINVAL;
100021fe:	2016      	movs	r0, #22
10002200:	e716      	b.n	10002030 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
10002202:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
10002204:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
10002206:	3407      	adds	r4, #7
10002208:	439c      	bics	r4, r3
1000220a:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
1000220c:	600a      	str	r2, [r1, #0]
1000220e:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
10002210:	9b00      	ldr	r3, [sp, #0]
10002212:	2608      	movs	r6, #8
10002214:	3308      	adds	r3, #8
10002216:	9300      	str	r3, [sp, #0]
10002218:	e7d7      	b.n	100021ca <cbvprintf_package+0x1ce>
		if (is_str_arg) {
1000221a:	2b00      	cmp	r3, #0
1000221c:	d10a      	bne.n	10002234 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
1000221e:	2e04      	cmp	r6, #4
10002220:	d101      	bne.n	10002226 <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
10002222:	3404      	adds	r4, #4
			if (buf0 != NULL) {
10002224:	e7a0      	b.n	10002168 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
10002226:	2e08      	cmp	r6, #8
10002228:	d1e9      	bne.n	100021fe <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
1000222a:	2307      	movs	r3, #7
1000222c:	3407      	adds	r4, #7
1000222e:	439c      	bics	r4, r3
10002230:	3408      	adds	r4, #8
			if (buf0 != NULL) {
10002232:	e7ed      	b.n	10002210 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
10002234:	9b05      	ldr	r3, [sp, #20]
10002236:	3302      	adds	r3, #2
10002238:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000223a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000223c:	3b01      	subs	r3, #1
1000223e:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
10002240:	cc08      	ldmia	r4!, {r3}
10002242:	9304      	str	r3, [sp, #16]
10002244:	e70a      	b.n	1000205c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
10002246:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002248:	079b      	lsls	r3, r3, #30
1000224a:	d523      	bpl.n	10002294 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000224c:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000224e:	9b00      	ldr	r3, [sp, #0]
10002250:	1bda      	subs	r2, r3, r7
10002252:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002254:	2080      	movs	r0, #128	; 0x80
10002256:	0080      	lsls	r0, r0, #2
10002258:	4282      	cmp	r2, r0
1000225a:	d2d0      	bcs.n	100021fe <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
1000225c:	9a03      	ldr	r2, [sp, #12]
1000225e:	2a0f      	cmp	r2, #15
10002260:	d8cd      	bhi.n	100021fe <cbvprintf_package+0x202>
				if (buf0 != NULL) {
10002262:	2f00      	cmp	r7, #0
10002264:	d01e      	beq.n	100022a4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
10002266:	9803      	ldr	r0, [sp, #12]
10002268:	b2db      	uxtb	r3, r3
1000226a:	aa0c      	add	r2, sp, #48	; 0x30
1000226c:	5413      	strb	r3, [r2, r0]
1000226e:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
10002270:	9b06      	ldr	r3, [sp, #24]
10002272:	aa10      	add	r2, sp, #64	; 0x40
10002274:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
10002276:	2900      	cmp	r1, #0
10002278:	d100      	bne.n	1000227c <cbvprintf_package+0x280>
1000227a:	e715      	b.n	100020a8 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
1000227c:	2280      	movs	r2, #128	; 0x80
1000227e:	4663      	mov	r3, ip
10002280:	4252      	negs	r2, r2
10002282:	4313      	orrs	r3, r2
10002284:	aa0c      	add	r2, sp, #48	; 0x30
10002286:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
10002288:	9b07      	ldr	r3, [sp, #28]
1000228a:	3301      	adds	r3, #1
1000228c:	9307      	str	r3, [sp, #28]
				s_idx++;
1000228e:	9b03      	ldr	r3, [sp, #12]
10002290:	3301      	adds	r3, #1
10002292:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
10002294:	9b00      	ldr	r3, [sp, #0]
10002296:	3304      	adds	r3, #4
10002298:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
1000229a:	9b05      	ldr	r3, [sp, #20]
1000229c:	3b01      	subs	r3, #1
1000229e:	e796      	b.n	100021ce <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100022a0:	2100      	movs	r1, #0
100022a2:	e7d7      	b.n	10002254 <cbvprintf_package+0x258>
				} else if (is_ro) {
100022a4:	2900      	cmp	r1, #0
100022a6:	d003      	beq.n	100022b0 <cbvprintf_package+0x2b4>
					len += 1;
100022a8:	9b02      	ldr	r3, [sp, #8]
100022aa:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
100022ac:	9302      	str	r3, [sp, #8]
100022ae:	e7ee      	b.n	1000228e <cbvprintf_package+0x292>
					len += 2;
100022b0:	9b02      	ldr	r3, [sp, #8]
100022b2:	3302      	adds	r3, #2
100022b4:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
100022b6:	9b08      	ldr	r3, [sp, #32]
100022b8:	2b00      	cmp	r3, #0
100022ba:	d1e8      	bne.n	1000228e <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
100022bc:	9804      	ldr	r0, [sp, #16]
100022be:	f003 f8f8 	bl	100054b2 <strlen>
100022c2:	9b02      	ldr	r3, [sp, #8]
100022c4:	181b      	adds	r3, r3, r0
100022c6:	e7f1      	b.n	100022ac <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
100022c8:	2280      	movs	r2, #128	; 0x80
100022ca:	9b00      	ldr	r3, [sp, #0]
100022cc:	00d2      	lsls	r2, r2, #3
100022ce:	1bdb      	subs	r3, r3, r7
100022d0:	4293      	cmp	r3, r2
100022d2:	d294      	bcs.n	100021fe <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
100022d4:	2f00      	cmp	r7, #0
100022d6:	d10b      	bne.n	100022f0 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
100022d8:	9802      	ldr	r0, [sp, #8]
100022da:	3808      	subs	r0, #8
100022dc:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
100022de:	b015      	add	sp, #84	; 0x54
100022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022e2:	46c0      	nop			; (mov r8, r8)
100022e4:	10005d68 	.word	0x10005d68
100022e8:	10006804 	.word	0x10006804
100022ec:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
100022f0:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022f2:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
100022f4:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
100022f6:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022f8:	466b      	mov	r3, sp
100022fa:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
100022fc:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022fe:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
10002300:	2a00      	cmp	r2, #0
10002302:	d00c      	beq.n	1000231e <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002304:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
10002306:	9b07      	ldr	r3, [sp, #28]
10002308:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
1000230a:	2b00      	cmp	r3, #0
1000230c:	d120      	bne.n	10002350 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
1000230e:	2600      	movs	r6, #0
10002310:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
10002312:	9b03      	ldr	r3, [sp, #12]
10002314:	42b3      	cmp	r3, r6
10002316:	d120      	bne.n	1000235a <cbvprintf_package+0x35e>
	return BUF_OFFSET;
10002318:	9b00      	ldr	r3, [sp, #0]
1000231a:	1bd8      	subs	r0, r3, r7
1000231c:	e7df      	b.n	100022de <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
1000231e:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
10002320:	e7f1      	b.n	10002306 <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
10002322:	ac0c      	add	r4, sp, #48	; 0x30
10002324:	56e4      	ldrsb	r4, [r4, r3]
10002326:	a90c      	add	r1, sp, #48	; 0x30
10002328:	5c59      	ldrb	r1, [r3, r1]
1000232a:	2c00      	cmp	r4, #0
1000232c:	da0b      	bge.n	10002346 <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
1000232e:	9c00      	ldr	r4, [sp, #0]
10002330:	9d02      	ldr	r5, [sp, #8]
10002332:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10002334:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
10002336:	42ac      	cmp	r4, r5
10002338:	d900      	bls.n	1000233c <cbvprintf_package+0x340>
1000233a:	e678      	b.n	1000202e <cbvprintf_package+0x32>
			*buf++ = pos;
1000233c:	9c00      	ldr	r4, [sp, #0]
1000233e:	7021      	strb	r1, [r4, #0]
10002340:	0021      	movs	r1, r4
10002342:	3101      	adds	r1, #1
10002344:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
10002346:	3301      	adds	r3, #1
10002348:	9903      	ldr	r1, [sp, #12]
1000234a:	4299      	cmp	r1, r3
1000234c:	d1e9      	bne.n	10002322 <cbvprintf_package+0x326>
1000234e:	e7de      	b.n	1000230e <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
10002350:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
10002352:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10002354:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
10002356:	1bd2      	subs	r2, r2, r7
10002358:	e7f6      	b.n	10002348 <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
1000235a:	9b07      	ldr	r3, [sp, #28]
1000235c:	2b00      	cmp	r3, #0
1000235e:	d002      	beq.n	10002366 <cbvprintf_package+0x36a>
10002360:	782b      	ldrb	r3, [r5, #0]
10002362:	2b7f      	cmp	r3, #127	; 0x7f
10002364:	d821      	bhi.n	100023aa <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
10002366:	9b08      	ldr	r3, [sp, #32]
10002368:	2b00      	cmp	r3, #0
1000236a:	d021      	beq.n	100023b0 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
1000236c:	ab10      	add	r3, sp, #64	; 0x40
1000236e:	9a00      	ldr	r2, [sp, #0]
10002370:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
10002372:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10002374:	7013      	strb	r3, [r2, #0]
10002376:	0013      	movs	r3, r2
10002378:	3301      	adds	r3, #1
1000237a:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
1000237c:	2301      	movs	r3, #1
1000237e:	9a00      	ldr	r2, [sp, #0]
10002380:	1bdb      	subs	r3, r3, r7
10002382:	191b      	adds	r3, r3, r4
10002384:	18d3      	adds	r3, r2, r3
10002386:	9a02      	ldr	r2, [sp, #8]
10002388:	4293      	cmp	r3, r2
1000238a:	d900      	bls.n	1000238e <cbvprintf_package+0x392>
1000238c:	e64f      	b.n	1000202e <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
1000238e:	9b00      	ldr	r3, [sp, #0]
10002390:	9a00      	ldr	r2, [sp, #0]
10002392:	3301      	adds	r3, #1
10002394:	9301      	str	r3, [sp, #4]
10002396:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
10002398:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
1000239a:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
1000239c:	9801      	ldr	r0, [sp, #4]
1000239e:	0022      	movs	r2, r4
100023a0:	f003 f899 	bl	100054d6 <memcpy>
		buf += size;
100023a4:	9b01      	ldr	r3, [sp, #4]
100023a6:	191b      	adds	r3, r3, r4
100023a8:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
100023aa:	3601      	adds	r6, #1
100023ac:	3501      	adds	r5, #1
100023ae:	e7b0      	b.n	10002312 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
100023b0:	782b      	ldrb	r3, [r5, #0]
100023b2:	009b      	lsls	r3, r3, #2
100023b4:	18fb      	adds	r3, r7, r3
100023b6:	681a      	ldr	r2, [r3, #0]
100023b8:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
100023ba:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
100023bc:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
100023be:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
100023c0:	f003 f877 	bl	100054b2 <strlen>
100023c4:	1c44      	adds	r4, r0, #1
100023c6:	e7d9      	b.n	1000237c <cbvprintf_package+0x380>
		return -EFAULT;
100023c8:	200e      	movs	r0, #14
100023ca:	e631      	b.n	10002030 <cbvprintf_package+0x34>

100023cc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
100023cc:	4b01      	ldr	r3, [pc, #4]	; (100023d4 <__printk_hook_install+0x8>)
100023ce:	6018      	str	r0, [r3, #0]
}
100023d0:	4770      	bx	lr
100023d2:	46c0      	nop			; (mov r8, r8)
100023d4:	200000a0 	.word	0x200000a0

100023d8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
100023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100023da:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
100023dc:	2700      	movs	r7, #0
{
100023de:	b099      	sub	sp, #100	; 0x64
100023e0:	9004      	str	r0, [sp, #16]
100023e2:	9105      	str	r1, [sp, #20]
100023e4:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
100023e6:	9b08      	ldr	r3, [sp, #32]
100023e8:	7818      	ldrb	r0, [r3, #0]
100023ea:	2800      	cmp	r0, #0
100023ec:	d101      	bne.n	100023f2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
100023ee:	0038      	movs	r0, r7
100023f0:	e327      	b.n	10002a42 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
100023f2:	9b08      	ldr	r3, [sp, #32]
100023f4:	3301      	adds	r3, #1
100023f6:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
100023f8:	2825      	cmp	r0, #37	; 0x25
100023fa:	d007      	beq.n	1000240c <z_cbvprintf_impl+0x34>
			OUTC('%');
100023fc:	9905      	ldr	r1, [sp, #20]
100023fe:	9b04      	ldr	r3, [sp, #16]
10002400:	4798      	blx	r3
10002402:	2800      	cmp	r0, #0
10002404:	da00      	bge.n	10002408 <z_cbvprintf_impl+0x30>
10002406:	e31c      	b.n	10002a42 <z_cbvprintf_impl+0x66a>
10002408:	3701      	adds	r7, #1
		if (bps == NULL) {
1000240a:	e1e3      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		} state = {
1000240c:	ad12      	add	r5, sp, #72	; 0x48
1000240e:	2218      	movs	r2, #24
10002410:	2100      	movs	r1, #0
10002412:	0028      	movs	r0, r5
10002414:	f003 f868 	bl	100054e8 <memset>
	if (*sp == '%') {
10002418:	9b08      	ldr	r3, [sp, #32]
1000241a:	785b      	ldrb	r3, [r3, #1]
1000241c:	2b25      	cmp	r3, #37	; 0x25
1000241e:	d114      	bne.n	1000244a <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10002420:	9a08      	ldr	r2, [sp, #32]
10002422:	72eb      	strb	r3, [r5, #11]
10002424:	3202      	adds	r2, #2
10002426:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10002428:	ab12      	add	r3, sp, #72	; 0x48
1000242a:	7a5a      	ldrb	r2, [r3, #9]
1000242c:	07d1      	lsls	r1, r2, #31
1000242e:	d400      	bmi.n	10002432 <z_cbvprintf_impl+0x5a>
10002430:	e17f      	b.n	10002732 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10002432:	cc02      	ldmia	r4!, {r1}
10002434:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10002436:	2900      	cmp	r1, #0
10002438:	db00      	blt.n	1000243c <z_cbvprintf_impl+0x64>
1000243a:	e17f      	b.n	1000273c <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
1000243c:	2104      	movs	r1, #4
1000243e:	7a18      	ldrb	r0, [r3, #8]
10002440:	4301      	orrs	r1, r0
10002442:	7219      	strb	r1, [r3, #8]
				width = -width;
10002444:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10002446:	425b      	negs	r3, r3
10002448:	e177      	b.n	1000273a <z_cbvprintf_impl+0x362>
1000244a:	2200      	movs	r2, #0
		switch (*sp) {
1000244c:	2601      	movs	r6, #1
1000244e:	0015      	movs	r5, r2
10002450:	0010      	movs	r0, r2
10002452:	4694      	mov	ip, r2
10002454:	9203      	str	r2, [sp, #12]
10002456:	9b07      	ldr	r3, [sp, #28]
10002458:	781b      	ldrb	r3, [r3, #0]
1000245a:	2b2b      	cmp	r3, #43	; 0x2b
1000245c:	d06f      	beq.n	1000253e <z_cbvprintf_impl+0x166>
1000245e:	d868      	bhi.n	10002532 <z_cbvprintf_impl+0x15a>
10002460:	2b20      	cmp	r3, #32
10002462:	d071      	beq.n	10002548 <z_cbvprintf_impl+0x170>
10002464:	2b23      	cmp	r3, #35	; 0x23
10002466:	d071      	beq.n	1000254c <z_cbvprintf_impl+0x174>
10002468:	2a00      	cmp	r2, #0
1000246a:	d005      	beq.n	10002478 <z_cbvprintf_impl+0xa0>
1000246c:	ae12      	add	r6, sp, #72	; 0x48
1000246e:	7a32      	ldrb	r2, [r6, #8]
10002470:	0011      	movs	r1, r2
10002472:	2240      	movs	r2, #64	; 0x40
10002474:	430a      	orrs	r2, r1
10002476:	7232      	strb	r2, [r6, #8]
10002478:	2d00      	cmp	r5, #0
1000247a:	d004      	beq.n	10002486 <z_cbvprintf_impl+0xae>
1000247c:	2220      	movs	r2, #32
1000247e:	ad12      	add	r5, sp, #72	; 0x48
10002480:	7a2e      	ldrb	r6, [r5, #8]
10002482:	4332      	orrs	r2, r6
10002484:	722a      	strb	r2, [r5, #8]
10002486:	2800      	cmp	r0, #0
10002488:	d004      	beq.n	10002494 <z_cbvprintf_impl+0xbc>
1000248a:	2210      	movs	r2, #16
1000248c:	a812      	add	r0, sp, #72	; 0x48
1000248e:	7a05      	ldrb	r5, [r0, #8]
10002490:	432a      	orrs	r2, r5
10002492:	7202      	strb	r2, [r0, #8]
10002494:	9a03      	ldr	r2, [sp, #12]
10002496:	2a00      	cmp	r2, #0
10002498:	d004      	beq.n	100024a4 <z_cbvprintf_impl+0xcc>
1000249a:	2208      	movs	r2, #8
1000249c:	a912      	add	r1, sp, #72	; 0x48
1000249e:	7a08      	ldrb	r0, [r1, #8]
100024a0:	4302      	orrs	r2, r0
100024a2:	720a      	strb	r2, [r1, #8]
100024a4:	4662      	mov	r2, ip
100024a6:	2a00      	cmp	r2, #0
100024a8:	d004      	beq.n	100024b4 <z_cbvprintf_impl+0xdc>
100024aa:	2204      	movs	r2, #4
100024ac:	a912      	add	r1, sp, #72	; 0x48
100024ae:	7a08      	ldrb	r0, [r1, #8]
100024b0:	4302      	orrs	r2, r0
100024b2:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100024b4:	2144      	movs	r1, #68	; 0x44
100024b6:	a812      	add	r0, sp, #72	; 0x48
100024b8:	7a02      	ldrb	r2, [r0, #8]
100024ba:	4011      	ands	r1, r2
100024bc:	2944      	cmp	r1, #68	; 0x44
100024be:	d102      	bne.n	100024c6 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100024c0:	2140      	movs	r1, #64	; 0x40
100024c2:	438a      	bics	r2, r1
100024c4:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100024c6:	2280      	movs	r2, #128	; 0x80
100024c8:	7a01      	ldrb	r1, [r0, #8]
100024ca:	4252      	negs	r2, r2
100024cc:	430a      	orrs	r2, r1
100024ce:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
100024d0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
100024d2:	250a      	movs	r5, #10
100024d4:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
100024d6:	2b2a      	cmp	r3, #42	; 0x2a
100024d8:	d140      	bne.n	1000255c <z_cbvprintf_impl+0x184>
		conv->width_star = true;
100024da:	7a41      	ldrb	r1, [r0, #9]
100024dc:	3b29      	subs	r3, #41	; 0x29
100024de:	430b      	orrs	r3, r1
		return ++sp;
100024e0:	3201      	adds	r2, #1
		conv->width_star = true;
100024e2:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
100024e4:	7815      	ldrb	r5, [r2, #0]
100024e6:	2602      	movs	r6, #2
100024e8:	0029      	movs	r1, r5
100024ea:	392e      	subs	r1, #46	; 0x2e
100024ec:	424b      	negs	r3, r1
100024ee:	4159      	adcs	r1, r3
100024f0:	a812      	add	r0, sp, #72	; 0x48
100024f2:	7a43      	ldrb	r3, [r0, #9]
100024f4:	0049      	lsls	r1, r1, #1
100024f6:	43b3      	bics	r3, r6
100024f8:	430b      	orrs	r3, r1
100024fa:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
100024fc:	2d2e      	cmp	r5, #46	; 0x2e
100024fe:	d145      	bne.n	1000258c <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10002500:	7853      	ldrb	r3, [r2, #1]
10002502:	2b2a      	cmp	r3, #42	; 0x2a
10002504:	d03d      	beq.n	10002582 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
10002506:	2300      	movs	r3, #0
	++sp;
10002508:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
1000250a:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
1000250c:	7811      	ldrb	r1, [r2, #0]
1000250e:	1c55      	adds	r5, r2, #1
10002510:	0008      	movs	r0, r1
10002512:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002514:	2809      	cmp	r0, #9
10002516:	d963      	bls.n	100025e0 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10002518:	a912      	add	r1, sp, #72	; 0x48
1000251a:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
1000251c:	7a0d      	ldrb	r5, [r1, #8]
1000251e:	07a8      	lsls	r0, r5, #30
10002520:	4318      	orrs	r0, r3
10002522:	2302      	movs	r3, #2
10002524:	439d      	bics	r5, r3
10002526:	002b      	movs	r3, r5
10002528:	0fc0      	lsrs	r0, r0, #31
1000252a:	0040      	lsls	r0, r0, #1
1000252c:	4303      	orrs	r3, r0
1000252e:	720b      	strb	r3, [r1, #8]
	return sp;
10002530:	e02c      	b.n	1000258c <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10002532:	2b2d      	cmp	r3, #45	; 0x2d
10002534:	d00c      	beq.n	10002550 <z_cbvprintf_impl+0x178>
10002536:	2b30      	cmp	r3, #48	; 0x30
10002538:	d196      	bne.n	10002468 <z_cbvprintf_impl+0x90>
1000253a:	0032      	movs	r2, r6
1000253c:	e000      	b.n	10002540 <z_cbvprintf_impl+0x168>
1000253e:	9603      	str	r6, [sp, #12]
			++sp;
10002540:	9b07      	ldr	r3, [sp, #28]
10002542:	3301      	adds	r3, #1
10002544:	9307      	str	r3, [sp, #28]
	} while (loop);
10002546:	e786      	b.n	10002456 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10002548:	0030      	movs	r0, r6
1000254a:	e7f9      	b.n	10002540 <z_cbvprintf_impl+0x168>
1000254c:	0035      	movs	r5, r6
1000254e:	e7f7      	b.n	10002540 <z_cbvprintf_impl+0x168>
10002550:	46b4      	mov	ip, r6
10002552:	e7f5      	b.n	10002540 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10002554:	0032      	movs	r2, r6
10002556:	4369      	muls	r1, r5
10002558:	3930      	subs	r1, #48	; 0x30
1000255a:	1859      	adds	r1, r3, r1
1000255c:	7813      	ldrb	r3, [r2, #0]
1000255e:	1c56      	adds	r6, r2, #1
10002560:	0018      	movs	r0, r3
10002562:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002564:	2809      	cmp	r0, #9
10002566:	d9f5      	bls.n	10002554 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10002568:	9b07      	ldr	r3, [sp, #28]
1000256a:	4293      	cmp	r3, r2
1000256c:	d0ba      	beq.n	100024e4 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
1000256e:	2502      	movs	r5, #2
		conv->width_value = width;
10002570:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10002572:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10002574:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10002576:	0fc9      	lsrs	r1, r1, #31
10002578:	0049      	lsls	r1, r1, #1
1000257a:	43a8      	bics	r0, r5
1000257c:	4301      	orrs	r1, r0
1000257e:	7219      	strb	r1, [r3, #8]
10002580:	e7b0      	b.n	100024e4 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10002582:	2304      	movs	r3, #4
10002584:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10002586:	3202      	adds	r2, #2
		conv->prec_star = true;
10002588:	430b      	orrs	r3, r1
1000258a:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
1000258c:	7811      	ldrb	r1, [r2, #0]
1000258e:	ab12      	add	r3, sp, #72	; 0x48
10002590:	296c      	cmp	r1, #108	; 0x6c
10002592:	d045      	beq.n	10002620 <z_cbvprintf_impl+0x248>
10002594:	d829      	bhi.n	100025ea <z_cbvprintf_impl+0x212>
10002596:	2968      	cmp	r1, #104	; 0x68
10002598:	d030      	beq.n	100025fc <z_cbvprintf_impl+0x224>
1000259a:	296a      	cmp	r1, #106	; 0x6a
1000259c:	d04c      	beq.n	10002638 <z_cbvprintf_impl+0x260>
1000259e:	294c      	cmp	r1, #76	; 0x4c
100025a0:	d054      	beq.n	1000264c <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
100025a2:	7811      	ldrb	r1, [r2, #0]
100025a4:	1c53      	adds	r3, r2, #1
100025a6:	aa12      	add	r2, sp, #72	; 0x48
100025a8:	9307      	str	r3, [sp, #28]
100025aa:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100025ac:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
100025ae:	2978      	cmp	r1, #120	; 0x78
100025b0:	d900      	bls.n	100025b4 <z_cbvprintf_impl+0x1dc>
100025b2:	e0b9      	b.n	10002728 <z_cbvprintf_impl+0x350>
100025b4:	296d      	cmp	r1, #109	; 0x6d
100025b6:	d850      	bhi.n	1000265a <z_cbvprintf_impl+0x282>
100025b8:	2969      	cmp	r1, #105	; 0x69
100025ba:	d900      	bls.n	100025be <z_cbvprintf_impl+0x1e6>
100025bc:	e0b4      	b.n	10002728 <z_cbvprintf_impl+0x350>
100025be:	2957      	cmp	r1, #87	; 0x57
100025c0:	d866      	bhi.n	10002690 <z_cbvprintf_impl+0x2b8>
100025c2:	2941      	cmp	r1, #65	; 0x41
100025c4:	d003      	beq.n	100025ce <z_cbvprintf_impl+0x1f6>
100025c6:	3945      	subs	r1, #69	; 0x45
100025c8:	2902      	cmp	r1, #2
100025ca:	d900      	bls.n	100025ce <z_cbvprintf_impl+0x1f6>
100025cc:	e0ac      	b.n	10002728 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
100025ce:	2307      	movs	r3, #7
100025d0:	a912      	add	r1, sp, #72	; 0x48
100025d2:	7a8a      	ldrb	r2, [r1, #10]
100025d4:	439a      	bics	r2, r3
100025d6:	3b03      	subs	r3, #3
100025d8:	4313      	orrs	r3, r2
100025da:	728b      	strb	r3, [r1, #10]
			unsupported = true;
100025dc:	2301      	movs	r3, #1
			break;
100025de:	e073      	b.n	100026c8 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
100025e0:	4373      	muls	r3, r6
100025e2:	3b30      	subs	r3, #48	; 0x30
100025e4:	002a      	movs	r2, r5
100025e6:	185b      	adds	r3, r3, r1
100025e8:	e790      	b.n	1000250c <z_cbvprintf_impl+0x134>
	switch (*sp) {
100025ea:	2974      	cmp	r1, #116	; 0x74
100025ec:	d029      	beq.n	10002642 <z_cbvprintf_impl+0x26a>
100025ee:	297a      	cmp	r1, #122	; 0x7a
100025f0:	d1d7      	bne.n	100025a2 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
100025f2:	2178      	movs	r1, #120	; 0x78
100025f4:	7a58      	ldrb	r0, [r3, #9]
100025f6:	4388      	bics	r0, r1
100025f8:	3948      	subs	r1, #72	; 0x48
100025fa:	e00d      	b.n	10002618 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
100025fc:	7850      	ldrb	r0, [r2, #1]
100025fe:	2178      	movs	r1, #120	; 0x78
10002600:	2868      	cmp	r0, #104	; 0x68
10002602:	d106      	bne.n	10002612 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10002604:	7a58      	ldrb	r0, [r3, #9]
10002606:	4388      	bics	r0, r1
10002608:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
1000260a:	4301      	orrs	r1, r0
1000260c:	7259      	strb	r1, [r3, #9]
			++sp;
1000260e:	3202      	adds	r2, #2
10002610:	e7c7      	b.n	100025a2 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
10002612:	7a58      	ldrb	r0, [r3, #9]
10002614:	4388      	bics	r0, r1
10002616:	2110      	movs	r1, #16
10002618:	4301      	orrs	r1, r0
1000261a:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
1000261c:	3201      	adds	r2, #1
1000261e:	e7c0      	b.n	100025a2 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10002620:	7850      	ldrb	r0, [r2, #1]
10002622:	2178      	movs	r1, #120	; 0x78
10002624:	286c      	cmp	r0, #108	; 0x6c
10002626:	d103      	bne.n	10002630 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10002628:	7a58      	ldrb	r0, [r3, #9]
1000262a:	4388      	bics	r0, r1
1000262c:	3958      	subs	r1, #88	; 0x58
1000262e:	e7ec      	b.n	1000260a <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10002630:	7a58      	ldrb	r0, [r3, #9]
10002632:	4388      	bics	r0, r1
10002634:	2118      	movs	r1, #24
10002636:	e7ef      	b.n	10002618 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10002638:	2178      	movs	r1, #120	; 0x78
1000263a:	7a58      	ldrb	r0, [r3, #9]
1000263c:	4388      	bics	r0, r1
1000263e:	3950      	subs	r1, #80	; 0x50
10002640:	e7ea      	b.n	10002618 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10002642:	2178      	movs	r1, #120	; 0x78
10002644:	7a58      	ldrb	r0, [r3, #9]
10002646:	4388      	bics	r0, r1
10002648:	3940      	subs	r1, #64	; 0x40
1000264a:	e7e5      	b.n	10002618 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
1000264c:	8918      	ldrh	r0, [r3, #8]
1000264e:	49a5      	ldr	r1, [pc, #660]	; (100028e4 <z_cbvprintf_impl+0x50c>)
10002650:	4008      	ands	r0, r1
10002652:	49a5      	ldr	r1, [pc, #660]	; (100028e8 <z_cbvprintf_impl+0x510>)
10002654:	4301      	orrs	r1, r0
10002656:	8119      	strh	r1, [r3, #8]
		break;
10002658:	e7e0      	b.n	1000261c <z_cbvprintf_impl+0x244>
1000265a:	2001      	movs	r0, #1
1000265c:	0005      	movs	r5, r0
	switch (conv->specifier) {
1000265e:	396e      	subs	r1, #110	; 0x6e
10002660:	b2c9      	uxtb	r1, r1
10002662:	408d      	lsls	r5, r1
10002664:	0029      	movs	r1, r5
10002666:	4da1      	ldr	r5, [pc, #644]	; (100028ec <z_cbvprintf_impl+0x514>)
10002668:	4229      	tst	r1, r5
1000266a:	d138      	bne.n	100026de <z_cbvprintf_impl+0x306>
1000266c:	2524      	movs	r5, #36	; 0x24
1000266e:	4229      	tst	r1, r5
10002670:	d151      	bne.n	10002716 <z_cbvprintf_impl+0x33e>
10002672:	4201      	tst	r1, r0
10002674:	d058      	beq.n	10002728 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10002676:	2107      	movs	r1, #7
10002678:	7a90      	ldrb	r0, [r2, #10]
1000267a:	4388      	bics	r0, r1
1000267c:	3904      	subs	r1, #4
1000267e:	4301      	orrs	r1, r0
10002680:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10002682:	2278      	movs	r2, #120	; 0x78
10002684:	4013      	ands	r3, r2
10002686:	3b40      	subs	r3, #64	; 0x40
10002688:	425a      	negs	r2, r3
1000268a:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
1000268c:	b2db      	uxtb	r3, r3
1000268e:	e01b      	b.n	100026c8 <z_cbvprintf_impl+0x2f0>
10002690:	2001      	movs	r0, #1
	switch (conv->specifier) {
10002692:	000d      	movs	r5, r1
10002694:	0006      	movs	r6, r0
10002696:	3d58      	subs	r5, #88	; 0x58
10002698:	b2ed      	uxtb	r5, r5
1000269a:	40ae      	lsls	r6, r5
1000269c:	0035      	movs	r5, r6
1000269e:	26e2      	movs	r6, #226	; 0xe2
100026a0:	0236      	lsls	r6, r6, #8
100026a2:	4235      	tst	r5, r6
100026a4:	d193      	bne.n	100025ce <z_cbvprintf_impl+0x1f6>
100026a6:	4e92      	ldr	r6, [pc, #584]	; (100028f0 <z_cbvprintf_impl+0x518>)
100026a8:	4235      	tst	r5, r6
100026aa:	d122      	bne.n	100026f2 <z_cbvprintf_impl+0x31a>
100026ac:	2184      	movs	r1, #132	; 0x84
100026ae:	0289      	lsls	r1, r1, #10
100026b0:	420d      	tst	r5, r1
100026b2:	d039      	beq.n	10002728 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
100026b4:	2507      	movs	r5, #7
100026b6:	7a91      	ldrb	r1, [r2, #10]
100026b8:	43a9      	bics	r1, r5
100026ba:	4301      	orrs	r1, r0
100026bc:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100026be:	2178      	movs	r1, #120	; 0x78
100026c0:	400b      	ands	r3, r1
100026c2:	2b40      	cmp	r3, #64	; 0x40
100026c4:	d011      	beq.n	100026ea <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100026c6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100026c8:	aa12      	add	r2, sp, #72	; 0x48
100026ca:	7a11      	ldrb	r1, [r2, #8]
100026cc:	0788      	lsls	r0, r1, #30
100026ce:	0fc0      	lsrs	r0, r0, #31
100026d0:	4303      	orrs	r3, r0
100026d2:	2002      	movs	r0, #2
100026d4:	005b      	lsls	r3, r3, #1
100026d6:	4381      	bics	r1, r0
100026d8:	4319      	orrs	r1, r3
100026da:	7211      	strb	r1, [r2, #8]
	return sp;
100026dc:	e6a4      	b.n	10002428 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
100026de:	2107      	movs	r1, #7
100026e0:	7a95      	ldrb	r5, [r2, #10]
100026e2:	438d      	bics	r5, r1
100026e4:	3905      	subs	r1, #5
100026e6:	4329      	orrs	r1, r5
100026e8:	e7e8      	b.n	100026bc <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100026ea:	7a13      	ldrb	r3, [r2, #8]
100026ec:	4303      	orrs	r3, r0
		conv->invalid = true;
100026ee:	7213      	strb	r3, [r2, #8]
		break;
100026f0:	e7e9      	b.n	100026c6 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100026f2:	2507      	movs	r5, #7
100026f4:	7a96      	ldrb	r6, [r2, #10]
100026f6:	43ae      	bics	r6, r5
100026f8:	3d05      	subs	r5, #5
100026fa:	4335      	orrs	r5, r6
100026fc:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100026fe:	2578      	movs	r5, #120	; 0x78
10002700:	402b      	ands	r3, r5
10002702:	2b40      	cmp	r3, #64	; 0x40
10002704:	d102      	bne.n	1000270c <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10002706:	7a15      	ldrb	r5, [r2, #8]
10002708:	4328      	orrs	r0, r5
1000270a:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
1000270c:	2963      	cmp	r1, #99	; 0x63
1000270e:	d1da      	bne.n	100026c6 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10002710:	1e5a      	subs	r2, r3, #1
10002712:	4193      	sbcs	r3, r2
10002714:	e7ba      	b.n	1000268c <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
10002716:	2107      	movs	r1, #7
10002718:	7a90      	ldrb	r0, [r2, #10]
1000271a:	4388      	bics	r0, r1
1000271c:	3904      	subs	r1, #4
1000271e:	4301      	orrs	r1, r0
10002720:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
10002722:	2278      	movs	r2, #120	; 0x78
10002724:	4013      	ands	r3, r2
10002726:	e7f3      	b.n	10002710 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10002728:	2301      	movs	r3, #1
1000272a:	aa12      	add	r2, sp, #72	; 0x48
1000272c:	7a11      	ldrb	r1, [r2, #8]
1000272e:	430b      	orrs	r3, r1
10002730:	e7dd      	b.n	100026ee <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
10002732:	7a19      	ldrb	r1, [r3, #8]
10002734:	297f      	cmp	r1, #127	; 0x7f
10002736:	d90f      	bls.n	10002758 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10002738:	68db      	ldr	r3, [r3, #12]
		int width = -1;
1000273a:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
1000273c:	ab12      	add	r3, sp, #72	; 0x48
1000273e:	0751      	lsls	r1, r2, #29
10002740:	d50c      	bpl.n	1000275c <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10002742:	cc04      	ldmia	r4!, {r2}
10002744:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10002746:	2a00      	cmp	r2, #0
10002748:	da0c      	bge.n	10002764 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
1000274a:	2102      	movs	r1, #2
1000274c:	7a5a      	ldrb	r2, [r3, #9]
1000274e:	438a      	bics	r2, r1
10002750:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10002752:	2301      	movs	r3, #1
10002754:	425b      	negs	r3, r3
10002756:	e004      	b.n	10002762 <z_cbvprintf_impl+0x38a>
		int width = -1;
10002758:	2301      	movs	r3, #1
1000275a:	e674      	b.n	10002446 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
1000275c:	0792      	lsls	r2, r2, #30
1000275e:	d5f8      	bpl.n	10002752 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10002760:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10002762:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10002764:	2500      	movs	r5, #0
10002766:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10002768:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
1000276a:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
1000276c:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000276e:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10002770:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10002772:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10002774:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10002776:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10002778:	2b01      	cmp	r3, #1
1000277a:	d130      	bne.n	100027de <z_cbvprintf_impl+0x406>
			switch (length_mod) {
1000277c:	1ed0      	subs	r0, r2, #3
1000277e:	2804      	cmp	r0, #4
10002780:	d804      	bhi.n	1000278c <z_cbvprintf_impl+0x3b4>
10002782:	f7fd fd11 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002786:	450e      	.short	0x450e
10002788:	0e45      	.short	0x0e45
1000278a:	0e          	.byte	0x0e
1000278b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
1000278c:	6823      	ldr	r3, [r4, #0]
1000278e:	17d8      	asrs	r0, r3, #31
10002790:	9312      	str	r3, [sp, #72]	; 0x48
10002792:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10002794:	2a01      	cmp	r2, #1
10002796:	d109      	bne.n	100027ac <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10002798:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
1000279a:	9312      	str	r3, [sp, #72]	; 0x48
1000279c:	17db      	asrs	r3, r3, #31
1000279e:	604b      	str	r3, [r1, #4]
100027a0:	e006      	b.n	100027b0 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100027a2:	cc08      	ldmia	r4!, {r3}
100027a4:	9312      	str	r3, [sp, #72]	; 0x48
100027a6:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100027a8:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100027aa:	e002      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100027ac:	2a02      	cmp	r2, #2
100027ae:	d014      	beq.n	100027da <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100027b0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100027b2:	a912      	add	r1, sp, #72	; 0x48
100027b4:	7a0b      	ldrb	r3, [r1, #8]
100027b6:	2003      	movs	r0, #3
100027b8:	001d      	movs	r5, r3
100027ba:	4005      	ands	r5, r0
100027bc:	4203      	tst	r3, r0
100027be:	d045      	beq.n	1000284c <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100027c0:	9b07      	ldr	r3, [sp, #28]
100027c2:	9a08      	ldr	r2, [sp, #32]
100027c4:	9905      	ldr	r1, [sp, #20]
100027c6:	9804      	ldr	r0, [sp, #16]
100027c8:	f002 fdb1 	bl	1000532e <outs>
100027cc:	2800      	cmp	r0, #0
100027ce:	da00      	bge.n	100027d2 <z_cbvprintf_impl+0x3fa>
100027d0:	e137      	b.n	10002a42 <z_cbvprintf_impl+0x66a>
100027d2:	183f      	adds	r7, r7, r0
			continue;
100027d4:	9b07      	ldr	r3, [sp, #28]
100027d6:	9308      	str	r3, [sp, #32]
100027d8:	e605      	b.n	100023e6 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
100027da:	b21b      	sxth	r3, r3
100027dc:	e7dd      	b.n	1000279a <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
100027de:	2b02      	cmp	r3, #2
100027e0:	d125      	bne.n	1000282e <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100027e2:	1ed0      	subs	r0, r2, #3
100027e4:	2804      	cmp	r0, #4
100027e6:	d804      	bhi.n	100027f2 <z_cbvprintf_impl+0x41a>
100027e8:	f7fd fcde 	bl	100001a8 <__gnu_thumb1_case_uqi>
100027ec:	1912120d 	.word	0x1912120d
100027f0:	19          	.byte	0x19
100027f1:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100027f2:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
100027f4:	2a01      	cmp	r2, #1
100027f6:	d016      	beq.n	10002826 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
100027f8:	9312      	str	r3, [sp, #72]	; 0x48
100027fa:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
100027fc:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
100027fe:	2a02      	cmp	r2, #2
10002800:	d1d7      	bne.n	100027b2 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10002802:	9312      	str	r3, [sp, #72]	; 0x48
10002804:	e7d5      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10002806:	cc08      	ldmia	r4!, {r3}
10002808:	9312      	str	r3, [sp, #72]	; 0x48
1000280a:	2300      	movs	r3, #0
1000280c:	9313      	str	r3, [sp, #76]	; 0x4c
1000280e:	e7d0      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10002810:	2307      	movs	r3, #7
10002812:	3407      	adds	r4, #7
10002814:	439c      	bics	r4, r3
				value->uint =
10002816:	cc03      	ldmia	r4!, {r0, r1}
10002818:	9012      	str	r0, [sp, #72]	; 0x48
1000281a:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
1000281c:	e7c9      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
1000281e:	cc08      	ldmia	r4!, {r3}
10002820:	9312      	str	r3, [sp, #72]	; 0x48
10002822:	2300      	movs	r3, #0
10002824:	e7c0      	b.n	100027a8 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10002826:	b2db      	uxtb	r3, r3
10002828:	9312      	str	r3, [sp, #72]	; 0x48
1000282a:	604d      	str	r5, [r1, #4]
1000282c:	e7c1      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
1000282e:	2b04      	cmp	r3, #4
10002830:	d108      	bne.n	10002844 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
10002832:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10002834:	3303      	adds	r3, #3
10002836:	439c      	bics	r4, r3
10002838:	6820      	ldr	r0, [r4, #0]
1000283a:	6861      	ldr	r1, [r4, #4]
1000283c:	3408      	adds	r4, #8
1000283e:	9012      	str	r0, [sp, #72]	; 0x48
10002840:	9113      	str	r1, [sp, #76]	; 0x4c
10002842:	e7b6      	b.n	100027b2 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10002844:	2b03      	cmp	r3, #3
10002846:	d1b4      	bne.n	100027b2 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10002848:	cc08      	ldmia	r4!, {r3}
1000284a:	e7da      	b.n	10002802 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
1000284c:	7ac8      	ldrb	r0, [r1, #11]
1000284e:	2878      	cmp	r0, #120	; 0x78
10002850:	d8c0      	bhi.n	100027d4 <z_cbvprintf_impl+0x3fc>
10002852:	2862      	cmp	r0, #98	; 0x62
10002854:	d82b      	bhi.n	100028ae <z_cbvprintf_impl+0x4d6>
10002856:	2825      	cmp	r0, #37	; 0x25
10002858:	d100      	bne.n	1000285c <z_cbvprintf_impl+0x484>
1000285a:	e5cf      	b.n	100023fc <z_cbvprintf_impl+0x24>
1000285c:	2858      	cmp	r0, #88	; 0x58
1000285e:	d1b9      	bne.n	100027d4 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10002860:	9812      	ldr	r0, [sp, #72]	; 0x48
10002862:	9913      	ldr	r1, [sp, #76]	; 0x4c
10002864:	231e      	movs	r3, #30
10002866:	aa0a      	add	r2, sp, #40	; 0x28
10002868:	189b      	adds	r3, r3, r2
1000286a:	9300      	str	r3, [sp, #0]
1000286c:	aa14      	add	r2, sp, #80	; 0x50
1000286e:	ab0c      	add	r3, sp, #48	; 0x30
10002870:	f002 fd10 	bl	10005294 <encode_uint>
			if (precision >= 0) {
10002874:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10002876:	0006      	movs	r6, r0
			if (precision >= 0) {
10002878:	2b00      	cmp	r3, #0
1000287a:	db0d      	blt.n	10002898 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
1000287c:	231e      	movs	r3, #30
				conv->flag_zero = false;
1000287e:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10002880:	aa0a      	add	r2, sp, #40	; 0x28
10002882:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10002884:	aa12      	add	r2, sp, #72	; 0x48
10002886:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10002888:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
1000288a:	4381      	bics	r1, r0
1000288c:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000288e:	9906      	ldr	r1, [sp, #24]
10002890:	4299      	cmp	r1, r3
10002892:	d901      	bls.n	10002898 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10002894:	1acb      	subs	r3, r1, r3
10002896:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10002898:	2e00      	cmp	r6, #0
1000289a:	d09b      	beq.n	100027d4 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
1000289c:	231e      	movs	r3, #30
1000289e:	aa0a      	add	r2, sp, #40	; 0x28
100028a0:	189b      	adds	r3, r3, r2
100028a2:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
100028a4:	9306      	str	r3, [sp, #24]
100028a6:	2d00      	cmp	r5, #0
100028a8:	d032      	beq.n	10002910 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
100028aa:	3001      	adds	r0, #1
100028ac:	e030      	b.n	10002910 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100028ae:	3863      	subs	r0, #99	; 0x63
100028b0:	2815      	cmp	r0, #21
100028b2:	d88f      	bhi.n	100027d4 <z_cbvprintf_impl+0x3fc>
100028b4:	f7fd fc82 	bl	100001bc <__gnu_thumb1_case_shi>
100028b8:	0068005e 	.word	0x0068005e
100028bc:	ff8eff8e 	.word	0xff8eff8e
100028c0:	ff8eff8e 	.word	0xff8eff8e
100028c4:	ff8e0068 	.word	0xff8e0068
100028c8:	ff8eff8e 	.word	0xff8eff8e
100028cc:	00a0ff8e 	.word	0x00a0ff8e
100028d0:	007c007a 	.word	0x007c007a
100028d4:	ff8eff8e 	.word	0xff8eff8e
100028d8:	ff8e001e 	.word	0xff8e001e
100028dc:	ff8e007a 	.word	0xff8e007a
100028e0:	007aff8e 	.word	0x007aff8e
100028e4:	ffff87fd 	.word	0xffff87fd
100028e8:	00004002 	.word	0x00004002
100028ec:	00000482 	.word	0x00000482
100028f0:	00000801 	.word	0x00000801
			if (precision >= 0) {
100028f4:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
100028f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
100028f8:	2b00      	cmp	r3, #0
100028fa:	db37      	blt.n	1000296c <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
100028fc:	0019      	movs	r1, r3
100028fe:	0030      	movs	r0, r6
10002900:	f002 fddf 	bl	100054c2 <strnlen>
			bpe = bps + len;
10002904:	1833      	adds	r3, r6, r0
		char sign = 0;
10002906:	2500      	movs	r5, #0
			bpe = bps + len;
10002908:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
1000290a:	2e00      	cmp	r6, #0
1000290c:	d100      	bne.n	10002910 <z_cbvprintf_impl+0x538>
1000290e:	e761      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10002910:	ab12      	add	r3, sp, #72	; 0x48
10002912:	7a9b      	ldrb	r3, [r3, #10]
10002914:	2210      	movs	r2, #16
10002916:	0019      	movs	r1, r3
10002918:	4011      	ands	r1, r2
1000291a:	910b      	str	r1, [sp, #44]	; 0x2c
1000291c:	4213      	tst	r3, r2
1000291e:	d100      	bne.n	10002922 <z_cbvprintf_impl+0x54a>
10002920:	e085      	b.n	10002a2e <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10002922:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10002924:	9a15      	ldr	r2, [sp, #84]	; 0x54
10002926:	920a      	str	r2, [sp, #40]	; 0x28
10002928:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
1000292a:	065b      	lsls	r3, r3, #25
1000292c:	d501      	bpl.n	10002932 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
1000292e:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002930:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10002932:	9b03      	ldr	r3, [sp, #12]
10002934:	2b00      	cmp	r3, #0
10002936:	dc00      	bgt.n	1000293a <z_cbvprintf_impl+0x562>
10002938:	e094      	b.n	10002a64 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
1000293a:	1a1b      	subs	r3, r3, r0
1000293c:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
1000293e:	ab12      	add	r3, sp, #72	; 0x48
10002940:	7a1b      	ldrb	r3, [r3, #8]
10002942:	075a      	lsls	r2, r3, #29
10002944:	0fd1      	lsrs	r1, r2, #31
10002946:	9108      	str	r1, [sp, #32]
10002948:	2a00      	cmp	r2, #0
1000294a:	da00      	bge.n	1000294e <z_cbvprintf_impl+0x576>
1000294c:	e08a      	b.n	10002a64 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
1000294e:	065b      	lsls	r3, r3, #25
10002950:	d400      	bmi.n	10002954 <z_cbvprintf_impl+0x57c>
10002952:	e078      	b.n	10002a46 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10002954:	2d00      	cmp	r5, #0
10002956:	d007      	beq.n	10002968 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10002958:	0028      	movs	r0, r5
1000295a:	9905      	ldr	r1, [sp, #20]
1000295c:	9b04      	ldr	r3, [sp, #16]
1000295e:	4798      	blx	r3
10002960:	2800      	cmp	r0, #0
10002962:	db6e      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002964:	9d08      	ldr	r5, [sp, #32]
10002966:	3701      	adds	r7, #1
					pad = '0';
10002968:	2330      	movs	r3, #48	; 0x30
1000296a:	e06d      	b.n	10002a48 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
1000296c:	0030      	movs	r0, r6
1000296e:	f002 fda0 	bl	100054b2 <strlen>
10002972:	e7c7      	b.n	10002904 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10002974:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10002976:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002978:	ae0c      	add	r6, sp, #48	; 0x30
1000297a:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
1000297c:	aa0a      	add	r2, sp, #40	; 0x28
1000297e:	189b      	adds	r3, r3, r2
		char sign = 0;
10002980:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10002982:	2001      	movs	r0, #1
			bpe = buf + 1;
10002984:	9306      	str	r3, [sp, #24]
10002986:	e7c3      	b.n	10002910 <z_cbvprintf_impl+0x538>
				sign = '+';
10002988:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
1000298a:	071a      	lsls	r2, r3, #28
1000298c:	d402      	bmi.n	10002994 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
1000298e:	06db      	lsls	r3, r3, #27
10002990:	0fdb      	lsrs	r3, r3, #31
10002992:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10002994:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10002998:	2b00      	cmp	r3, #0
1000299a:	db00      	blt.n	1000299e <z_cbvprintf_impl+0x5c6>
1000299c:	e760      	b.n	10002860 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
1000299e:	2100      	movs	r1, #0
100029a0:	4250      	negs	r0, r2
100029a2:	4199      	sbcs	r1, r3
				sign = '-';
100029a4:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
100029a6:	9012      	str	r0, [sp, #72]	; 0x48
100029a8:	9113      	str	r1, [sp, #76]	; 0x4c
100029aa:	e759      	b.n	10002860 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
100029ac:	2500      	movs	r5, #0
100029ae:	e757      	b.n	10002860 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
100029b0:	9812      	ldr	r0, [sp, #72]	; 0x48
100029b2:	ad12      	add	r5, sp, #72	; 0x48
100029b4:	2800      	cmp	r0, #0
100029b6:	d034      	beq.n	10002a22 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
100029b8:	231e      	movs	r3, #30
100029ba:	aa0a      	add	r2, sp, #40	; 0x28
100029bc:	189b      	adds	r3, r3, r2
100029be:	9300      	str	r3, [sp, #0]
100029c0:	aa14      	add	r2, sp, #80	; 0x50
100029c2:	ab0c      	add	r3, sp, #48	; 0x30
100029c4:	2100      	movs	r1, #0
100029c6:	f002 fc65 	bl	10005294 <encode_uint>
				conv->altform_0c = true;
100029ca:	23ef      	movs	r3, #239	; 0xef
100029cc:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
100029ce:	0006      	movs	r6, r0
				conv->altform_0c = true;
100029d0:	401a      	ands	r2, r3
100029d2:	4b48      	ldr	r3, [pc, #288]	; (10002af4 <z_cbvprintf_impl+0x71c>)
100029d4:	4313      	orrs	r3, r2
100029d6:	816b      	strh	r3, [r5, #10]
		char sign = 0;
100029d8:	2500      	movs	r5, #0
			if (precision >= 0) {
100029da:	9b06      	ldr	r3, [sp, #24]
100029dc:	42ab      	cmp	r3, r5
100029de:	db00      	blt.n	100029e2 <z_cbvprintf_impl+0x60a>
100029e0:	e74c      	b.n	1000287c <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
100029e2:	42a8      	cmp	r0, r5
100029e4:	d100      	bne.n	100029e8 <z_cbvprintf_impl+0x610>
100029e6:	e6f5      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100029e8:	231e      	movs	r3, #30
100029ea:	aa0a      	add	r2, sp, #40	; 0x28
100029ec:	189b      	adds	r3, r3, r2
100029ee:	1a18      	subs	r0, r3, r0
100029f0:	231e      	movs	r3, #30
100029f2:	189b      	adds	r3, r3, r2
100029f4:	9306      	str	r3, [sp, #24]
100029f6:	e78b      	b.n	10002910 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
100029f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
100029fa:	2a07      	cmp	r2, #7
100029fc:	d900      	bls.n	10002a00 <z_cbvprintf_impl+0x628>
100029fe:	e6e9      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
10002a00:	0010      	movs	r0, r2
10002a02:	f7fd fbd1 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002a06:	040c      	.short	0x040c
10002a08:	08080c06 	.word	0x08080c06
10002a0c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10002a0e:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10002a10:	e6e0      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10002a12:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10002a14:	e6de      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10002a16:	17fa      	asrs	r2, r7, #31
10002a18:	601f      	str	r7, [r3, #0]
10002a1a:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10002a1c:	e6da      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10002a1e:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10002a20:	e6d8      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10002a22:	4b35      	ldr	r3, [pc, #212]	; (10002af8 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10002a24:	0005      	movs	r5, r0
10002a26:	4e35      	ldr	r6, [pc, #212]	; (10002afc <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10002a28:	2005      	movs	r0, #5
			bpe = bps + 5;
10002a2a:	9306      	str	r3, [sp, #24]
10002a2c:	e770      	b.n	10002910 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10002a2e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10002a30:	0fd2      	lsrs	r2, r2, #31
10002a32:	1880      	adds	r0, r0, r2
10002a34:	e776      	b.n	10002924 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10002a36:	9905      	ldr	r1, [sp, #20]
10002a38:	9809      	ldr	r0, [sp, #36]	; 0x24
10002a3a:	9b04      	ldr	r3, [sp, #16]
10002a3c:	4798      	blx	r3
10002a3e:	2800      	cmp	r0, #0
10002a40:	da05      	bge.n	10002a4e <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10002a42:	b019      	add	sp, #100	; 0x64
10002a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10002a46:	2320      	movs	r3, #32
					pad = '0';
10002a48:	9309      	str	r3, [sp, #36]	; 0x24
10002a4a:	9b03      	ldr	r3, [sp, #12]
10002a4c:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10002a4e:	9b08      	ldr	r3, [sp, #32]
10002a50:	001a      	movs	r2, r3
10002a52:	3a01      	subs	r2, #1
10002a54:	9208      	str	r2, [sp, #32]
10002a56:	2b00      	cmp	r3, #0
10002a58:	dced      	bgt.n	10002a36 <z_cbvprintf_impl+0x65e>
10002a5a:	9a03      	ldr	r2, [sp, #12]
10002a5c:	19d7      	adds	r7, r2, r7
10002a5e:	1aff      	subs	r7, r7, r3
10002a60:	9b08      	ldr	r3, [sp, #32]
10002a62:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10002a64:	2d00      	cmp	r5, #0
10002a66:	d006      	beq.n	10002a76 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10002a68:	0028      	movs	r0, r5
10002a6a:	9905      	ldr	r1, [sp, #20]
10002a6c:	9b04      	ldr	r3, [sp, #16]
10002a6e:	4798      	blx	r3
10002a70:	2800      	cmp	r0, #0
10002a72:	dbe6      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002a74:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10002a76:	ab12      	add	r3, sp, #72	; 0x48
10002a78:	7a9b      	ldrb	r3, [r3, #10]
10002a7a:	06da      	lsls	r2, r3, #27
10002a7c:	d401      	bmi.n	10002a82 <z_cbvprintf_impl+0x6aa>
10002a7e:	071b      	lsls	r3, r3, #28
10002a80:	d506      	bpl.n	10002a90 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10002a82:	2030      	movs	r0, #48	; 0x30
10002a84:	9905      	ldr	r1, [sp, #20]
10002a86:	9b04      	ldr	r3, [sp, #16]
10002a88:	4798      	blx	r3
10002a8a:	2800      	cmp	r0, #0
10002a8c:	dbd9      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002a8e:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10002a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002a92:	2b00      	cmp	r3, #0
10002a94:	d007      	beq.n	10002aa6 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10002a96:	ab12      	add	r3, sp, #72	; 0x48
10002a98:	7ad8      	ldrb	r0, [r3, #11]
10002a9a:	9905      	ldr	r1, [sp, #20]
10002a9c:	9b04      	ldr	r3, [sp, #16]
10002a9e:	4798      	blx	r3
10002aa0:	2800      	cmp	r0, #0
10002aa2:	dbce      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002aa4:	3701      	adds	r7, #1
				while (width-- > 0) {
10002aa6:	003d      	movs	r5, r7
10002aa8:	e006      	b.n	10002ab8 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10002aaa:	2030      	movs	r0, #48	; 0x30
10002aac:	9905      	ldr	r1, [sp, #20]
10002aae:	9b04      	ldr	r3, [sp, #16]
10002ab0:	4798      	blx	r3
10002ab2:	2800      	cmp	r0, #0
10002ab4:	dbc5      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002ab6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10002ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002aba:	19db      	adds	r3, r3, r7
10002abc:	1b5b      	subs	r3, r3, r5
10002abe:	2b00      	cmp	r3, #0
10002ac0:	dcf3      	bgt.n	10002aaa <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10002ac2:	0032      	movs	r2, r6
10002ac4:	9b06      	ldr	r3, [sp, #24]
10002ac6:	9905      	ldr	r1, [sp, #20]
10002ac8:	9804      	ldr	r0, [sp, #16]
10002aca:	f002 fc30 	bl	1000532e <outs>
10002ace:	2800      	cmp	r0, #0
10002ad0:	dbb7      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002ad2:	1947      	adds	r7, r0, r5
10002ad4:	003d      	movs	r5, r7
		while (width > 0) {
10002ad6:	9b03      	ldr	r3, [sp, #12]
10002ad8:	195b      	adds	r3, r3, r5
10002ada:	1bdb      	subs	r3, r3, r7
10002adc:	2b00      	cmp	r3, #0
10002ade:	dc00      	bgt.n	10002ae2 <z_cbvprintf_impl+0x70a>
10002ae0:	e678      	b.n	100027d4 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10002ae2:	2020      	movs	r0, #32
10002ae4:	9905      	ldr	r1, [sp, #20]
10002ae6:	9b04      	ldr	r3, [sp, #16]
10002ae8:	4798      	blx	r3
10002aea:	2800      	cmp	r0, #0
10002aec:	dba9      	blt.n	10002a42 <z_cbvprintf_impl+0x66a>
10002aee:	3701      	adds	r7, #1
			--width;
10002af0:	e7f1      	b.n	10002ad6 <z_cbvprintf_impl+0x6fe>
10002af2:	46c0      	nop			; (mov r8, r8)
10002af4:	00007810 	.word	0x00007810
10002af8:	100063bf 	.word	0x100063bf
10002afc:	100063ba 	.word	0x100063ba

10002b00 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
10002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b02:	b085      	sub	sp, #20
10002b04:	9001      	str	r0, [sp, #4]
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
10002b06:	482f      	ldr	r0, [pc, #188]	; (10002bc4 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
10002b08:	9103      	str	r1, [sp, #12]
	if (atomic_inc(&initialized) != 0) {
10002b0a:	f002 fc31 	bl	10005370 <atomic_inc>
10002b0e:	1e06      	subs	r6, r0, #0
10002b10:	d10a      	bne.n	10002b28 <z_log_init.isra.0+0x28>
	uint32_t mask = 0;
10002b12:	0004      	movs	r4, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
10002b14:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002b16:	4d2c      	ldr	r5, [pc, #176]	; (10002bc8 <z_log_init.isra.0+0xc8>)
10002b18:	4b2c      	ldr	r3, [pc, #176]	; (10002bcc <z_log_init.isra.0+0xcc>)
10002b1a:	429d      	cmp	r5, r3
10002b1c:	d306      	bcc.n	10002b2c <z_log_init.isra.0+0x2c>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
10002b1e:	9b01      	ldr	r3, [sp, #4]
10002b20:	2b00      	cmp	r3, #0
10002b22:	d001      	beq.n	10002b28 <z_log_init.isra.0+0x28>
		while (mask) {
10002b24:	2c00      	cmp	r4, #0
10002b26:	d11f      	bne.n	10002b68 <z_log_init.isra.0+0x68>
			}
		}
	}

	return mask;
}
10002b28:	b005      	add	sp, #20
10002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (backend->autostart) {
10002b2c:	7b2b      	ldrb	r3, [r5, #12]
10002b2e:	2b00      	cmp	r3, #0
10002b30:	d010      	beq.n	10002b54 <z_log_init.isra.0+0x54>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
10002b32:	682b      	ldr	r3, [r5, #0]
10002b34:	68db      	ldr	r3, [r3, #12]
10002b36:	2b00      	cmp	r3, #0
10002b38:	d001      	beq.n	10002b3e <z_log_init.isra.0+0x3e>
		backend->api->init(backend);
10002b3a:	0028      	movs	r0, r5
10002b3c:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
10002b3e:	682b      	ldr	r3, [r5, #0]
10002b40:	691b      	ldr	r3, [r3, #16]
10002b42:	2b00      	cmp	r3, #0
10002b44:	d108      	bne.n	10002b58 <z_log_init.isra.0+0x58>
				log_backend_enable(backend,
10002b46:	686b      	ldr	r3, [r5, #4]
10002b48:	2204      	movs	r2, #4
10002b4a:	0028      	movs	r0, r5
10002b4c:	6819      	ldr	r1, [r3, #0]
10002b4e:	f000 f8c5 	bl	10002cdc <log_backend_enable>
			i++;
10002b52:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002b54:	3510      	adds	r5, #16
10002b56:	e7df      	b.n	10002b18 <z_log_init.isra.0+0x18>
		return backend->api->is_ready(backend);
10002b58:	0028      	movs	r0, r5
10002b5a:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
10002b5c:	2800      	cmp	r0, #0
10002b5e:	d0f2      	beq.n	10002b46 <z_log_init.isra.0+0x46>
				mask |= BIT(i);
10002b60:	003b      	movs	r3, r7
10002b62:	40b3      	lsls	r3, r6
10002b64:	431c      	orrs	r4, r3
10002b66:	e7f4      	b.n	10002b52 <z_log_init.isra.0+0x52>
10002b68:	0027      	movs	r7, r4
		uint32_t i = __builtin_ctz(mask_cpy);
10002b6a:	0020      	movs	r0, r4
10002b6c:	f7fd fbd4 	bl	10000318 <__ctzsi2>
		mask_cpy &= ~BIT(i);
10002b70:	2301      	movs	r3, #1
10002b72:	4083      	lsls	r3, r0
10002b74:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b76:	4e14      	ldr	r6, [pc, #80]	; (10002bc8 <z_log_init.isra.0+0xc8>)
10002b78:	0105      	lsls	r5, r0, #4
		mask_cpy &= ~BIT(i);
10002b7a:	439c      	bics	r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b7c:	1973      	adds	r3, r6, r5
10002b7e:	9301      	str	r3, [sp, #4]
10002b80:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
10002b82:	9202      	str	r2, [sp, #8]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b84:	2b00      	cmp	r3, #0
10002b86:	d00c      	beq.n	10002ba2 <z_log_init.isra.0+0xa2>
	if (backend->api->is_ready != NULL) {
10002b88:	59ab      	ldr	r3, [r5, r6]
10002b8a:	691b      	ldr	r3, [r3, #16]
10002b8c:	2b00      	cmp	r3, #0
10002b8e:	d113      	bne.n	10002bb8 <z_log_init.isra.0+0xb8>
			mask &= ~BIT(i);
10002b90:	9b02      	ldr	r3, [sp, #8]
					   backend->cb->ctx,
10002b92:	1976      	adds	r6, r6, r5
			mask &= ~BIT(i);
10002b94:	401f      	ands	r7, r3
			log_backend_enable(backend,
10002b96:	6873      	ldr	r3, [r6, #4]
10002b98:	2204      	movs	r2, #4
10002b9a:	6819      	ldr	r1, [r3, #0]
10002b9c:	9801      	ldr	r0, [sp, #4]
10002b9e:	f000 f89d 	bl	10002cdc <log_backend_enable>
	while (mask_cpy) {
10002ba2:	2c00      	cmp	r4, #0
10002ba4:	d1e1      	bne.n	10002b6a <z_log_init.isra.0+0x6a>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
10002ba6:	9b03      	ldr	r3, [sp, #12]
10002ba8:	2b00      	cmp	r3, #0
10002baa:	d003      	beq.n	10002bb4 <z_log_init.isra.0+0xb4>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10002bac:	2064      	movs	r0, #100	; 0x64
10002bae:	2100      	movs	r1, #0
10002bb0:	f002 f88c 	bl	10004ccc <z_impl_k_sleep>
10002bb4:	003c      	movs	r4, r7
10002bb6:	e7b5      	b.n	10002b24 <z_log_init.isra.0+0x24>
		return backend->api->is_ready(backend);
10002bb8:	9801      	ldr	r0, [sp, #4]
10002bba:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002bbc:	2800      	cmp	r0, #0
10002bbe:	d1f0      	bne.n	10002ba2 <z_log_init.isra.0+0xa2>
10002bc0:	e7e6      	b.n	10002b90 <z_log_init.isra.0+0x90>
10002bc2:	46c0      	nop			; (mov r8, r8)
10002bc4:	200001f0 	.word	0x200001f0
10002bc8:	10005f64 	.word	0x10005f64
10002bcc:	10005f74 	.word	0x10005f74

10002bd0 <log_format_func_t_get>:
	return format_table[log_type];
10002bd0:	4b01      	ldr	r3, [pc, #4]	; (10002bd8 <log_format_func_t_get+0x8>)
10002bd2:	0080      	lsls	r0, r0, #2
10002bd4:	58c0      	ldr	r0, [r0, r3]
}
10002bd6:	4770      	bx	lr
10002bd8:	10005ff4 	.word	0x10005ff4

10002bdc <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
10002bdc:	0003      	movs	r3, r0
10002bde:	b510      	push	{r4, lr}
10002be0:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
10002be2:	2b00      	cmp	r3, #0
10002be4:	d005      	beq.n	10002bf2 <log_set_timestamp_func+0x16>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
10002be6:	4a04      	ldr	r2, [pc, #16]	; (10002bf8 <log_set_timestamp_func+0x1c>)
10002be8:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
10002bea:	f000 fa75 	bl	100030d8 <log_output_timestamp_freq_set>
	}

	return 0;
10002bee:	2000      	movs	r0, #0
}
10002bf0:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002bf2:	2016      	movs	r0, #22
10002bf4:	4240      	negs	r0, r0
10002bf6:	e7fb      	b.n	10002bf0 <log_set_timestamp_func+0x14>
10002bf8:	200000a4 	.word	0x200000a4

10002bfc <log_core_init>:
	panic_mode = false;
10002bfc:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bfe:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
10002c00:	4a05      	ldr	r2, [pc, #20]	; (10002c18 <log_core_init+0x1c>)
{
10002c02:	b510      	push	{r4, lr}
	panic_mode = false;
10002c04:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
10002c06:	4a05      	ldr	r2, [pc, #20]	; (10002c1c <log_core_init+0x20>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002c08:	4805      	ldr	r0, [pc, #20]	; (10002c20 <log_core_init+0x24>)
	dropped_cnt = 0;
10002c0a:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
10002c0c:	4a05      	ldr	r2, [pc, #20]	; (10002c24 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002c0e:	0089      	lsls	r1, r1, #2
	buffered_cnt = 0;
10002c10:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002c12:	f7ff ffe3 	bl	10002bdc <log_set_timestamp_func>
}
10002c16:	bd10      	pop	{r4, pc}
10002c18:	20000298 	.word	0x20000298
10002c1c:	200001e8 	.word	0x200001e8
10002c20:	10005361 	.word	0x10005361
10002c24:	200001ec 	.word	0x200001ec

10002c28 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
10002c28:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
10002c2a:	4d0c      	ldr	r5, [pc, #48]	; (10002c5c <z_impl_log_panic+0x34>)
10002c2c:	7829      	ldrb	r1, [r5, #0]
10002c2e:	2900      	cmp	r1, #0
10002c30:	d108      	bne.n	10002c44 <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
10002c32:	2001      	movs	r0, #1
10002c34:	f7ff ff64 	bl	10002b00 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c38:	4c09      	ldr	r4, [pc, #36]	; (10002c60 <z_impl_log_panic+0x38>)
10002c3a:	4b0a      	ldr	r3, [pc, #40]	; (10002c64 <z_impl_log_panic+0x3c>)
10002c3c:	429c      	cmp	r4, r3
10002c3e:	d302      	bcc.n	10002c46 <z_impl_log_panic+0x1e>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
10002c40:	2301      	movs	r3, #1
10002c42:	702b      	strb	r3, [r5, #0]
}
10002c44:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
10002c46:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
10002c48:	795b      	ldrb	r3, [r3, #5]
10002c4a:	2b00      	cmp	r3, #0
10002c4c:	d003      	beq.n	10002c56 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
10002c4e:	6823      	ldr	r3, [r4, #0]
10002c50:	0020      	movs	r0, r4
10002c52:	689b      	ldr	r3, [r3, #8]
10002c54:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c56:	3410      	adds	r4, #16
10002c58:	e7ef      	b.n	10002c3a <z_impl_log_panic+0x12>
10002c5a:	46c0      	nop			; (mov r8, r8)
10002c5c:	20000298 	.word	0x20000298
10002c60:	10005f64 	.word	0x10005f64
10002c64:	10005f74 	.word	0x10005f74

10002c68 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
10002c68:	b510      	push	{r4, lr}
10002c6a:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
10002c6c:	4804      	ldr	r0, [pc, #16]	; (10002c80 <z_log_dropped+0x18>)
10002c6e:	f002 fb7f 	bl	10005370 <atomic_inc>
	if (buffered) {
10002c72:	2c00      	cmp	r4, #0
10002c74:	d003      	beq.n	10002c7e <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
10002c76:	2101      	movs	r1, #1
10002c78:	4802      	ldr	r0, [pc, #8]	; (10002c84 <z_log_dropped+0x1c>)
10002c7a:	f003 f858 	bl	10005d2e <z_impl_atomic_sub>
		atomic_dec(&buffered_cnt);
	}
}
10002c7e:	bd10      	pop	{r4, pc}
10002c80:	200001e8 	.word	0x200001e8
10002c84:	200001ec 	.word	0x200001ec

10002c88 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
10002c88:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
10002c8a:	4b0a      	ldr	r3, [pc, #40]	; (10002cb4 <z_log_msg_commit+0x2c>)
{
10002c8c:	0005      	movs	r5, r0
	msg->hdr.timestamp = timestamp_func();
10002c8e:	681b      	ldr	r3, [r3, #0]
10002c90:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c92:	4c09      	ldr	r4, [pc, #36]	; (10002cb8 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
10002c94:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c96:	4b09      	ldr	r3, [pc, #36]	; (10002cbc <z_log_msg_commit+0x34>)
10002c98:	429c      	cmp	r4, r3
10002c9a:	d300      	bcc.n	10002c9e <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
10002c9c:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10002c9e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
10002ca0:	795b      	ldrb	r3, [r3, #5]
10002ca2:	2b00      	cmp	r3, #0
10002ca4:	d004      	beq.n	10002cb0 <z_log_msg_commit+0x28>
	backend->api->process(backend, msg);
10002ca6:	6823      	ldr	r3, [r4, #0]
10002ca8:	0029      	movs	r1, r5
10002caa:	0020      	movs	r0, r4
10002cac:	681b      	ldr	r3, [r3, #0]
10002cae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002cb0:	3410      	adds	r4, #16
10002cb2:	e7f0      	b.n	10002c96 <z_log_msg_commit+0xe>
10002cb4:	200000a4 	.word	0x200000a4
10002cb8:	10005f64 	.word	0x10005f64
10002cbc:	10005f74 	.word	0x10005f74

10002cc0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10002cc0:	4b04      	ldr	r3, [pc, #16]	; (10002cd4 <log_source_name_get+0x14>)
10002cc2:	4a05      	ldr	r2, [pc, #20]	; (10002cd8 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10002cc4:	2000      	movs	r0, #0
10002cc6:	1a9b      	subs	r3, r3, r2
10002cc8:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10002cca:	4299      	cmp	r1, r3
10002ccc:	d201      	bcs.n	10002cd2 <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10002cce:	00c9      	lsls	r1, r1, #3
10002cd0:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10002cd2:	4770      	bx	lr
10002cd4:	10005f64 	.word	0x10005f64
10002cd8:	10005f24 	.word	0x10005f24

10002cdc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10002cdc:	4b08      	ldr	r3, [pc, #32]	; (10002d00 <log_backend_enable+0x24>)
{
10002cde:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10002ce0:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10002ce2:	6844      	ldr	r4, [r0, #4]
10002ce4:	111b      	asrs	r3, r3, #4
10002ce6:	3301      	adds	r3, #1
10002ce8:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10002cea:	6843      	ldr	r3, [r0, #4]
10002cec:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10002cee:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10002cf0:	6843      	ldr	r3, [r0, #4]
10002cf2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10002cf4:	6843      	ldr	r3, [r0, #4]
10002cf6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10002cf8:	f002 fb53 	bl	100053a2 <z_log_notify_backend_enabled>
}
10002cfc:	bd10      	pop	{r4, pc}
10002cfe:	46c0      	nop			; (mov r8, r8)
10002d00:	10005f64 	.word	0x10005f64

10002d04 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d06:	0004      	movs	r4, r0
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10002d08:	2000      	movs	r0, #0
{
10002d0a:	b087      	sub	sp, #28
10002d0c:	af02      	add	r7, sp, #8
10002d0e:	607b      	str	r3, [r7, #4]
	if (fmt) {
10002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
{
10002d12:	000e      	movs	r6, r1
10002d14:	0015      	movs	r5, r2
	if (fmt) {
10002d16:	4283      	cmp	r3, r0
10002d18:	d007      	beq.n	10002d2a <z_impl_z_log_msg_runtime_vcreate+0x26>
		va_copy(ap2, ap);
10002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10002d1c:	2110      	movs	r1, #16
		va_copy(ap2, ap);
10002d1e:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10002d20:	9300      	str	r3, [sp, #0]
10002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002d26:	f7ff f969 	bl	10001ffc <cbvprintf_package>
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10002d2a:	2207      	movs	r2, #7
10002d2c:	0023      	movs	r3, r4
10002d2e:	4015      	ands	r5, r2
10002d30:	4013      	ands	r3, r2
10002d32:	00db      	lsls	r3, r3, #3
10002d34:	4915      	ldr	r1, [pc, #84]	; (10002d8c <z_impl_z_log_msg_runtime_vcreate+0x88>)
10002d36:	01ad      	lsls	r5, r5, #6
10002d38:	431d      	orrs	r5, r3
10002d3a:	0243      	lsls	r3, r0, #9
10002d3c:	400b      	ands	r3, r1
10002d3e:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002d40:	6abc      	ldr	r4, [r7, #40]	; 0x28
	struct log_msg_desc desc =
10002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002d44:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10002d46:	051b      	lsls	r3, r3, #20
10002d48:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002d4a:	1823      	adds	r3, r4, r0
10002d4c:	4393      	bics	r3, r2
10002d4e:	3303      	adds	r3, #3
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
10002d50:	3a04      	subs	r2, #4
10002d52:	4393      	bics	r3, r2
10002d54:	3307      	adds	r3, #7
10002d56:	40d3      	lsrs	r3, r2
10002d58:	4093      	lsls	r3, r2
10002d5a:	466a      	mov	r2, sp
10002d5c:	1ad3      	subs	r3, r2, r3
10002d5e:	469d      	mov	sp, r3
		pkg = msg->data;
	}

	if (pkg && fmt) {
10002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		msg = alloca(msg_wlen * sizeof(int));
10002d62:	ac02      	add	r4, sp, #8
	if (pkg && fmt) {
10002d64:	2b00      	cmp	r3, #0
10002d66:	d008      	beq.n	10002d7a <z_impl_z_log_msg_runtime_vcreate+0x76>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
10002d68:	0001      	movs	r1, r0
10002d6a:	0020      	movs	r0, r4
10002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002d6e:	3010      	adds	r0, #16
10002d70:	9300      	str	r3, [sp, #0]
10002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002d76:	f7ff f941 	bl	10001ffc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
10002d7a:	002a      	movs	r2, r5
10002d7c:	0031      	movs	r1, r6
10002d7e:	0020      	movs	r0, r4
10002d80:	687b      	ldr	r3, [r7, #4]
10002d82:	f002 fb11 	bl	100053a8 <z_log_msg_finalize>
	}
}
10002d86:	46bd      	mov	sp, r7
10002d88:	b005      	add	sp, #20
10002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002d8c:	000ffe00 	.word	0x000ffe00

10002d90 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
10002d90:	b40e      	push	{r1, r2, r3}
10002d92:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d94:	4c05      	ldr	r4, [pc, #20]	; (10002dac <print_formatted+0x1c>)
{
10002d96:	ab05      	add	r3, sp, #20
10002d98:	cb04      	ldmia	r3!, {r2}
10002d9a:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d9c:	0020      	movs	r0, r4
	va_start(args, fmt);
10002d9e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002da0:	f002 fb43 	bl	1000542a <cbvprintf>
	va_end(args);

	return length;
}
10002da4:	bc1e      	pop	{r1, r2, r3, r4}
10002da6:	bc08      	pop	{r3}
10002da8:	b003      	add	sp, #12
10002daa:	4718      	bx	r3
10002dac:	100053db 	.word	0x100053db

10002db0 <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10002db0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10002db2:	06cb      	lsls	r3, r1, #27
10002db4:	d404      	bmi.n	10002dc0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
10002db6:	0689      	lsls	r1, r1, #26
10002db8:	d503      	bpl.n	10002dc2 <newline_print+0x12>
		print_formatted(ctx, "\n");
10002dba:	4903      	ldr	r1, [pc, #12]	; (10002dc8 <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10002dbc:	f7ff ffe8 	bl	10002d90 <print_formatted>
	}
}
10002dc0:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10002dc2:	4902      	ldr	r1, [pc, #8]	; (10002dcc <newline_print+0x1c>)
10002dc4:	e7fa      	b.n	10002dbc <newline_print+0xc>
10002dc6:	46c0      	nop			; (mov r8, r8)
10002dc8:	100063ce 	.word	0x100063ce
10002dcc:	100063cd 	.word	0x100063cd

10002dd0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002dd2:	b08f      	sub	sp, #60	; 0x3c
10002dd4:	9306      	str	r3, [sp, #24]
10002dd6:	ab14      	add	r3, sp, #80	; 0x50
10002dd8:	781b      	ldrb	r3, [r3, #0]
10002dda:	0007      	movs	r7, r0
10002ddc:	000c      	movs	r4, r1
10002dde:	9208      	str	r2, [sp, #32]
10002de0:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10002de2:	2b00      	cmp	r3, #0
10002de4:	d100      	bne.n	10002de8 <log_output_process+0x18>
10002de6:	e09c      	b.n	10002f22 <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002de8:	2502      	movs	r5, #2
10002dea:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002dec:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002dee:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002df0:	2301      	movs	r3, #1
10002df2:	401a      	ands	r2, r3
10002df4:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10002df6:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002df8:	3307      	adds	r3, #7
10002dfa:	401a      	ands	r2, r3
10002dfc:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10002dfe:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10002e00:	f002 fad0 	bl	100053a4 <z_log_get_tag>
10002e04:	0002      	movs	r2, r0
	if (tag) {
10002e06:	42b0      	cmp	r0, r6
10002e08:	d004      	beq.n	10002e14 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10002e0a:	0038      	movs	r0, r7
10002e0c:	4983      	ldr	r1, [pc, #524]	; (1000301c <log_output_process+0x24c>)
10002e0e:	f7ff ffbf 	bl	10002d90 <print_formatted>
10002e12:	0006      	movs	r6, r0
	if (stamp) {
10002e14:	2d00      	cmp	r5, #0
10002e16:	d009      	beq.n	10002e2c <log_output_process+0x5c>
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
10002e18:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10002e1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002e1c:	421a      	tst	r2, r3
10002e1e:	d144      	bne.n	10002eaa <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10002e20:	0022      	movs	r2, r4
10002e22:	0038      	movs	r0, r7
10002e24:	497e      	ldr	r1, [pc, #504]	; (10003020 <log_output_process+0x250>)
10002e26:	f7ff ffb3 	bl	10002d90 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10002e2a:	1836      	adds	r6, r6, r0
	if (color) {
10002e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002e2e:	2b00      	cmp	r3, #0
10002e30:	d00a      	beq.n	10002e48 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10002e32:	9a05      	ldr	r2, [sp, #20]
10002e34:	4b7b      	ldr	r3, [pc, #492]	; (10003024 <log_output_process+0x254>)
10002e36:	0092      	lsls	r2, r2, #2
10002e38:	58d2      	ldr	r2, [r2, r3]
10002e3a:	2a00      	cmp	r2, #0
10002e3c:	d100      	bne.n	10002e40 <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10002e3e:	4a7a      	ldr	r2, [pc, #488]	; (10003028 <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10002e40:	0038      	movs	r0, r7
10002e42:	497a      	ldr	r1, [pc, #488]	; (1000302c <log_output_process+0x25c>)
10002e44:	f7ff ffa4 	bl	10002d90 <print_formatted>
	int total = 0;
10002e48:	2400      	movs	r4, #0
	if (level_on) {
10002e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002e4c:	42a3      	cmp	r3, r4
10002e4e:	d008      	beq.n	10002e62 <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10002e50:	9a05      	ldr	r2, [sp, #20]
10002e52:	4b77      	ldr	r3, [pc, #476]	; (10003030 <log_output_process+0x260>)
10002e54:	0092      	lsls	r2, r2, #2
10002e56:	0038      	movs	r0, r7
10002e58:	4976      	ldr	r1, [pc, #472]	; (10003034 <log_output_process+0x264>)
10002e5a:	58d2      	ldr	r2, [r2, r3]
10002e5c:	f7ff ff98 	bl	10002d90 <print_formatted>
10002e60:	0004      	movs	r4, r0
	if (domain) {
10002e62:	9b08      	ldr	r3, [sp, #32]
10002e64:	2b00      	cmp	r3, #0
10002e66:	d005      	beq.n	10002e74 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10002e68:	001a      	movs	r2, r3
10002e6a:	0038      	movs	r0, r7
10002e6c:	4972      	ldr	r1, [pc, #456]	; (10003038 <log_output_process+0x268>)
10002e6e:	f7ff ff8f 	bl	10002d90 <print_formatted>
10002e72:	1824      	adds	r4, r4, r0
	if (source) {
10002e74:	9b06      	ldr	r3, [sp, #24]
10002e76:	2b00      	cmp	r3, #0
10002e78:	d005      	beq.n	10002e86 <log_output_process+0xb6>
		total += print_formatted(output,
10002e7a:	001a      	movs	r2, r3
10002e7c:	0038      	movs	r0, r7
10002e7e:	496f      	ldr	r1, [pc, #444]	; (1000303c <log_output_process+0x26c>)
10002e80:	f7ff ff86 	bl	10002d90 <print_formatted>
10002e84:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10002e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10002e88:	486d      	ldr	r0, [pc, #436]	; (10003040 <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10002e8a:	19a4      	adds	r4, r4, r6
	if (package) {
10002e8c:	2b00      	cmp	r3, #0
10002e8e:	d000      	beq.n	10002e92 <log_output_process+0xc2>
10002e90:	e09b      	b.n	10002fca <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10002e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002e94:	2b00      	cmp	r3, #0
10002e96:	d151      	bne.n	10002f3c <log_output_process+0x16c>
	if (color) {
10002e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
10002e9a:	07db      	lsls	r3, r3, #31
10002e9c:	d500      	bpl.n	10002ea0 <log_output_process+0xd0>
10002e9e:	e0b7      	b.n	10003010 <log_output_process+0x240>
	newline_print(output, flags);
10002ea0:	0038      	movs	r0, r7
10002ea2:	9918      	ldr	r1, [sp, #96]	; 0x60
10002ea4:	f7ff ff84 	bl	10002db0 <newline_print>
}
10002ea8:	e09b      	b.n	10002fe2 <log_output_process+0x212>
		length = 0;
10002eaa:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10002eac:	4b65      	ldr	r3, [pc, #404]	; (10003044 <log_output_process+0x274>)
10002eae:	681d      	ldr	r5, [r3, #0]
10002eb0:	4285      	cmp	r5, r0
10002eb2:	d0ba      	beq.n	10002e2a <log_output_process+0x5a>
		timestamp /= timestamp_div;
10002eb4:	4b64      	ldr	r3, [pc, #400]	; (10003048 <log_output_process+0x278>)
10002eb6:	0020      	movs	r0, r4
10002eb8:	6819      	ldr	r1, [r3, #0]
10002eba:	f7fd f989 	bl	100001d0 <__udivsi3>
10002ebe:	0029      	movs	r1, r5
10002ec0:	f7fd f9c2 	bl	10000248 <__aeabi_uidivmod>
10002ec4:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10002ec6:	21e1      	movs	r1, #225	; 0xe1
10002ec8:	0109      	lsls	r1, r1, #4
10002eca:	9007      	str	r0, [sp, #28]
10002ecc:	f7fd f9bc 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10002ed0:	20fa      	movs	r0, #250	; 0xfa
10002ed2:	0080      	lsls	r0, r0, #2
10002ed4:	9109      	str	r1, [sp, #36]	; 0x24
10002ed6:	4360      	muls	r0, r4
10002ed8:	0029      	movs	r1, r5
10002eda:	f7fd f9b5 	bl	10000248 <__aeabi_uidivmod>
10002ede:	000c      	movs	r4, r1
				length = print_formatted(output,
10002ee0:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10002ee2:	213c      	movs	r1, #60	; 0x3c
10002ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
10002ee6:	f7fd f973 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10002eea:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10002eec:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10002eee:	0109      	lsls	r1, r1, #4
10002ef0:	9807      	ldr	r0, [sp, #28]
10002ef2:	f7fd f96d 	bl	100001d0 <__udivsi3>
10002ef6:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10002ef8:	20fa      	movs	r0, #250	; 0xfa
10002efa:	0080      	lsls	r0, r0, #2
10002efc:	0029      	movs	r1, r5
10002efe:	4360      	muls	r0, r4
10002f00:	f7fd f966 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10002f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002f06:	9002      	str	r0, [sp, #8]
10002f08:	213c      	movs	r1, #60	; 0x3c
10002f0a:	9809      	ldr	r0, [sp, #36]	; 0x24
10002f0c:	9301      	str	r3, [sp, #4]
10002f0e:	f7fd f99b 	bl	10000248 <__aeabi_uidivmod>
10002f12:	0038      	movs	r0, r7
10002f14:	9100      	str	r1, [sp, #0]
10002f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002f18:	9a07      	ldr	r2, [sp, #28]
10002f1a:	494c      	ldr	r1, [pc, #304]	; (1000304c <log_output_process+0x27c>)
10002f1c:	f7ff ff38 	bl	10002d90 <print_formatted>
10002f20:	e783      	b.n	10002e2a <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10002f22:	9b06      	ldr	r3, [sp, #24]
10002f24:	484a      	ldr	r0, [pc, #296]	; (10003050 <log_output_process+0x280>)
10002f26:	2b01      	cmp	r3, #1
10002f28:	d100      	bne.n	10002f2c <log_output_process+0x15c>
10002f2a:	4845      	ldr	r0, [pc, #276]	; (10003040 <log_output_process+0x270>)
	if (package) {
10002f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10002f2e:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10002f30:	2b00      	cmp	r3, #0
10002f32:	d14a      	bne.n	10002fca <log_output_process+0x1fa>
	if (data_len) {
10002f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002f36:	2b00      	cmp	r3, #0
10002f38:	d053      	beq.n	10002fe2 <log_output_process+0x212>
		prefix_offset = 0;
10002f3a:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10002f3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10002f3e:	2e10      	cmp	r6, #16
10002f40:	d900      	bls.n	10002f44 <log_output_process+0x174>
10002f42:	2610      	movs	r6, #16
	newline_print(output, flags);
10002f44:	0038      	movs	r0, r7
10002f46:	9918      	ldr	r1, [sp, #96]	; 0x60
10002f48:	f7ff ff32 	bl	10002db0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10002f4c:	2500      	movs	r5, #0
10002f4e:	42ac      	cmp	r4, r5
10002f50:	dc4c      	bgt.n	10002fec <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
10002f52:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002f54:	0038      	movs	r0, r7
10002f56:	781a      	ldrb	r2, [r3, #0]
10002f58:	493e      	ldr	r1, [pc, #248]	; (10003054 <log_output_process+0x284>)
10002f5a:	f7ff ff19 	bl	10002d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f5e:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
10002f60:	2307      	movs	r3, #7
10002f62:	421d      	tst	r5, r3
10002f64:	d103      	bne.n	10002f6e <log_output_process+0x19e>
			print_formatted(output, " ");
10002f66:	0038      	movs	r0, r7
10002f68:	493b      	ldr	r1, [pc, #236]	; (10003058 <log_output_process+0x288>)
10002f6a:	f7ff ff11 	bl	10002d90 <print_formatted>
		if (i < length) {
10002f6e:	42ae      	cmp	r6, r5
10002f70:	d942      	bls.n	10002ff8 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
10002f72:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002f74:	0038      	movs	r0, r7
10002f76:	5d5a      	ldrb	r2, [r3, r5]
10002f78:	4936      	ldr	r1, [pc, #216]	; (10003054 <log_output_process+0x284>)
10002f7a:	f7ff ff09 	bl	10002d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f7e:	3501      	adds	r5, #1
10002f80:	2d10      	cmp	r5, #16
10002f82:	d1ed      	bne.n	10002f60 <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f84:	2500      	movs	r5, #0
	print_formatted(output, "|");
10002f86:	0038      	movs	r0, r7
10002f88:	4934      	ldr	r1, [pc, #208]	; (1000305c <log_output_process+0x28c>)
10002f8a:	f7ff ff01 	bl	10002d90 <print_formatted>
		if (i < length) {
10002f8e:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
10002f90:	9a16      	ldr	r2, [sp, #88]	; 0x58
10002f92:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
10002f94:	0013      	movs	r3, r2
10002f96:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
10002f98:	2b5e      	cmp	r3, #94	; 0x5e
10002f9a:	d900      	bls.n	10002f9e <log_output_process+0x1ce>
10002f9c:	222e      	movs	r2, #46	; 0x2e
10002f9e:	0038      	movs	r0, r7
10002fa0:	492f      	ldr	r1, [pc, #188]	; (10003060 <log_output_process+0x290>)
10002fa2:	f7ff fef5 	bl	10002d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002fa6:	3501      	adds	r5, #1
10002fa8:	2d10      	cmp	r5, #16
10002faa:	d02a      	beq.n	10003002 <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10002fac:	2307      	movs	r3, #7
10002fae:	421d      	tst	r5, r3
10002fb0:	d103      	bne.n	10002fba <log_output_process+0x1ea>
			print_formatted(output, " ");
10002fb2:	0038      	movs	r0, r7
10002fb4:	4928      	ldr	r1, [pc, #160]	; (10003058 <log_output_process+0x288>)
10002fb6:	f7ff feeb 	bl	10002d90 <print_formatted>
		if (i < length) {
10002fba:	002b      	movs	r3, r5
10002fbc:	42ae      	cmp	r6, r5
10002fbe:	d8e7      	bhi.n	10002f90 <log_output_process+0x1c0>
			print_formatted(output, " ");
10002fc0:	0038      	movs	r0, r7
10002fc2:	4925      	ldr	r1, [pc, #148]	; (10003058 <log_output_process+0x288>)
10002fc4:	f7ff fee4 	bl	10002d90 <print_formatted>
10002fc8:	e7ed      	b.n	10002fa6 <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10002fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
10002fcc:	003a      	movs	r2, r7
10002fce:	4925      	ldr	r1, [pc, #148]	; (10003064 <log_output_process+0x294>)
10002fd0:	f002 f915 	bl	100051fe <cbpprintf_external>
	if (data_len) {
10002fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10002fd6:	2b00      	cmp	r3, #0
10002fd8:	d1b0      	bne.n	10002f3c <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10002fda:	9b05      	ldr	r3, [sp, #20]
10002fdc:	2b00      	cmp	r3, #0
10002fde:	d000      	beq.n	10002fe2 <log_output_process+0x212>
10002fe0:	e75a      	b.n	10002e98 <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10002fe2:	0038      	movs	r0, r7
10002fe4:	f002 fa27 	bl	10005436 <log_output_flush>
}
10002fe8:	b00f      	add	sp, #60	; 0x3c
10002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10002fec:	0038      	movs	r0, r7
10002fee:	491a      	ldr	r1, [pc, #104]	; (10003058 <log_output_process+0x288>)
10002ff0:	f7ff fece 	bl	10002d90 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10002ff4:	3501      	adds	r5, #1
10002ff6:	e7aa      	b.n	10002f4e <log_output_process+0x17e>
			print_formatted(output, "   ");
10002ff8:	0038      	movs	r0, r7
10002ffa:	491b      	ldr	r1, [pc, #108]	; (10003068 <log_output_process+0x298>)
10002ffc:	f7ff fec8 	bl	10002d90 <print_formatted>
10003000:	e7bd      	b.n	10002f7e <log_output_process+0x1ae>
		data += length;
10003002:	9b16      	ldr	r3, [sp, #88]	; 0x58
10003004:	199b      	adds	r3, r3, r6
10003006:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10003008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000300a:	1b9b      	subs	r3, r3, r6
1000300c:	9317      	str	r3, [sp, #92]	; 0x5c
1000300e:	e7e2      	b.n	10002fd6 <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10003010:	0038      	movs	r0, r7
10003012:	4a05      	ldr	r2, [pc, #20]	; (10003028 <log_output_process+0x258>)
10003014:	4905      	ldr	r1, [pc, #20]	; (1000302c <log_output_process+0x25c>)
10003016:	f7ff febb 	bl	10002d90 <print_formatted>
}
1000301a:	e741      	b.n	10002ea0 <log_output_process+0xd0>
1000301c:	100063d5 	.word	0x100063d5
10003020:	100063d9 	.word	0x100063d9
10003024:	10006004 	.word	0x10006004
10003028:	100063d0 	.word	0x100063d0
1000302c:	100063fe 	.word	0x100063fe
10003030:	10006018 	.word	0x10006018
10003034:	10006401 	.word	0x10006401
10003038:	10006407 	.word	0x10006407
1000303c:	1000640b 	.word	0x1000640b
10003040:	100053db 	.word	0x100053db
10003044:	200001f8 	.word	0x200001f8
10003048:	200001f4 	.word	0x200001f4
1000304c:	100063e2 	.word	0x100063e2
10003050:	100053f3 	.word	0x100053f3
10003054:	10006410 	.word	0x10006410
10003058:	10006418 	.word	0x10006418
1000305c:	1000641a 	.word	0x1000641a
10003060:	1000641c 	.word	0x1000641c
10003064:	1000542b 	.word	0x1000542b
10003068:	10006416 	.word	0x10006416

1000306c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
1000306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
1000306e:	880b      	ldrh	r3, [r1, #0]
10003070:	b089      	sub	sp, #36	; 0x24
10003072:	05db      	lsls	r3, r3, #23
10003074:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
10003076:	684b      	ldr	r3, [r1, #4]
10003078:	000f      	movs	r7, r1
1000307a:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
1000307c:	688e      	ldr	r6, [r1, #8]
1000307e:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
10003080:	2b00      	cmp	r3, #0
10003082:	d00c      	beq.n	1000309e <log_output_msg_process+0x32>
10003084:	4a13      	ldr	r2, [pc, #76]	; (100030d4 <log_output_msg_process+0x68>)
10003086:	1a9a      	subs	r2, r3, r2
10003088:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
1000308a:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
1000308c:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
1000308e:	0412      	lsls	r2, r2, #16
10003090:	d405      	bmi.n	1000309e <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
10003092:	7838      	ldrb	r0, [r7, #0]
10003094:	0680      	lsls	r0, r0, #26
10003096:	0f40      	lsrs	r0, r0, #29
10003098:	f7ff fe12 	bl	10002cc0 <log_source_name_get>
1000309c:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
1000309e:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
100030a0:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
100030a2:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
100030a4:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
100030a6:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
100030a8:	0d49      	lsrs	r1, r1, #21
	return msg->data;
100030aa:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
100030ac:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
100030ae:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
100030b0:	1e48      	subs	r0, r1, #1
100030b2:	4181      	sbcs	r1, r0
100030b4:	4249      	negs	r1, r1
100030b6:	400a      	ands	r2, r1
100030b8:	4661      	mov	r1, ip
100030ba:	9201      	str	r2, [sp, #4]
100030bc:	9103      	str	r1, [sp, #12]
100030be:	2200      	movs	r2, #0
100030c0:	0031      	movs	r1, r6
100030c2:	9807      	ldr	r0, [sp, #28]
100030c4:	9504      	str	r5, [sp, #16]
100030c6:	9702      	str	r7, [sp, #8]
100030c8:	9400      	str	r4, [sp, #0]
100030ca:	f7ff fe81 	bl	10002dd0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
100030ce:	b009      	add	sp, #36	; 0x24
100030d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100030d2:	46c0      	nop			; (mov r8, r8)
100030d4:	10005f24 	.word	0x10005f24

100030d8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
100030d8:	2301      	movs	r3, #1
{
100030da:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
100030dc:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
100030de:	001c      	movs	r4, r3
	while (frequency > 1000000) {
100030e0:	4a07      	ldr	r2, [pc, #28]	; (10003100 <log_output_timestamp_freq_set+0x28>)
100030e2:	4290      	cmp	r0, r2
100030e4:	d807      	bhi.n	100030f6 <log_output_timestamp_freq_set+0x1e>
100030e6:	4a07      	ldr	r2, [pc, #28]	; (10003104 <log_output_timestamp_freq_set+0x2c>)
100030e8:	2900      	cmp	r1, #0
100030ea:	d100      	bne.n	100030ee <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
100030ec:	2301      	movs	r3, #1
	}

	freq = frequency;
}
100030ee:	6013      	str	r3, [r2, #0]
	freq = frequency;
100030f0:	4b05      	ldr	r3, [pc, #20]	; (10003108 <log_output_timestamp_freq_set+0x30>)
100030f2:	6018      	str	r0, [r3, #0]
}
100030f4:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
100030f6:	0021      	movs	r1, r4
		frequency /= 2U;
100030f8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
100030fa:	005b      	lsls	r3, r3, #1
100030fc:	e7f1      	b.n	100030e2 <log_output_timestamp_freq_set+0xa>
100030fe:	46c0      	nop			; (mov r8, r8)
10003100:	000f4240 	.word	0x000f4240
10003104:	200001f4 	.word	0x200001f4
10003108:	200001f8 	.word	0x200001f8

1000310c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
1000310c:	4b01      	ldr	r3, [pc, #4]	; (10003114 <format_set+0x8>)
	return 0;
}
1000310e:	2000      	movs	r0, #0
	log_format_current = log_type;
10003110:	6019      	str	r1, [r3, #0]
}
10003112:	4770      	bx	lr
10003114:	20000210 	.word	0x20000210

10003118 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
10003118:	2201      	movs	r2, #1
{
1000311a:	b510      	push	{r4, lr}
	in_panic = true;
1000311c:	4b02      	ldr	r3, [pc, #8]	; (10003128 <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
1000311e:	4803      	ldr	r0, [pc, #12]	; (1000312c <panic+0x14>)
10003120:	701a      	strb	r2, [r3, #0]
10003122:	f002 f988 	bl	10005436 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
10003126:	bd10      	pop	{r4, pc}
10003128:	2000029a 	.word	0x2000029a
1000312c:	10006048 	.word	0x10006048

10003130 <process>:
{
10003130:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10003132:	4b05      	ldr	r3, [pc, #20]	; (10003148 <process+0x18>)
{
10003134:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10003136:	6818      	ldr	r0, [r3, #0]
10003138:	f7ff fd4a 	bl	10002bd0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
1000313c:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
1000313e:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
10003140:	0021      	movs	r1, r4
10003142:	4802      	ldr	r0, [pc, #8]	; (1000314c <process+0x1c>)
10003144:	4798      	blx	r3
}
10003146:	bd10      	pop	{r4, pc}
10003148:	20000210 	.word	0x20000210
1000314c:	10006048 	.word	0x10006048

10003150 <char_out>:
{
10003150:	b570      	push	{r4, r5, r6, lr}
10003152:	000d      	movs	r5, r1
10003154:	0004      	movs	r4, r0
10003156:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
10003158:	42b4      	cmp	r4, r6
1000315a:	d101      	bne.n	10003160 <char_out+0x10>
}
1000315c:	0028      	movs	r0, r5
1000315e:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
10003160:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10003162:	4803      	ldr	r0, [pc, #12]	; (10003170 <char_out+0x20>)
10003164:	3401      	adds	r4, #1
10003166:	6883      	ldr	r3, [r0, #8]
10003168:	685b      	ldr	r3, [r3, #4]
1000316a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
1000316c:	e7f4      	b.n	10003158 <char_out+0x8>
1000316e:	46c0      	nop			; (mov r8, r8)
10003170:	10005dc8 	.word	0x10005dc8

10003174 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10003174:	4901      	ldr	r1, [pc, #4]	; (1000317c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10003176:	2210      	movs	r2, #16
	str	r2, [r1]
10003178:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
1000317a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
1000317c:	e000ed10 	.word	0xe000ed10

10003180 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10003180:	f3bf 8f4f 	dsb	sy
10003184:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10003186:	b662      	cpsie	i
	isb
10003188:	f3bf 8f6f 	isb	sy

	bx	lr
1000318c:	4770      	bx	lr
1000318e:	46c0      	nop			; (mov r8, r8)

10003190 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003190:	b5f0      	push	{r4, r5, r6, r7, lr}
10003192:	0007      	movs	r7, r0
10003194:	000d      	movs	r5, r1
10003196:	b087      	sub	sp, #28

	if (esf != NULL) {
10003198:	2900      	cmp	r1, #0
1000319a:	d039      	beq.n	10003210 <z_arm_fatal_error+0x80>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
1000319c:	2400      	movs	r4, #0
1000319e:	688b      	ldr	r3, [r1, #8]
100031a0:	4e1e      	ldr	r6, [pc, #120]	; (1000321c <z_arm_fatal_error+0x8c>)
100031a2:	9305      	str	r3, [sp, #20]
100031a4:	684b      	ldr	r3, [r1, #4]
100031a6:	2201      	movs	r2, #1
100031a8:	9304      	str	r3, [sp, #16]
100031aa:	680b      	ldr	r3, [r1, #0]
100031ac:	0020      	movs	r0, r4
100031ae:	9303      	str	r3, [sp, #12]
100031b0:	4b1b      	ldr	r3, [pc, #108]	; (10003220 <z_arm_fatal_error+0x90>)
100031b2:	0031      	movs	r1, r6
100031b4:	9302      	str	r3, [sp, #8]
100031b6:	9401      	str	r4, [sp, #4]
100031b8:	0023      	movs	r3, r4
100031ba:	9400      	str	r4, [sp, #0]
100031bc:	f002 f948 	bl	10005450 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
100031c0:	696b      	ldr	r3, [r5, #20]
100031c2:	2201      	movs	r2, #1
100031c4:	9305      	str	r3, [sp, #20]
100031c6:	692b      	ldr	r3, [r5, #16]
100031c8:	0031      	movs	r1, r6
100031ca:	9304      	str	r3, [sp, #16]
100031cc:	68eb      	ldr	r3, [r5, #12]
100031ce:	0020      	movs	r0, r4
100031d0:	9303      	str	r3, [sp, #12]
100031d2:	4b14      	ldr	r3, [pc, #80]	; (10003224 <z_arm_fatal_error+0x94>)
100031d4:	9401      	str	r4, [sp, #4]
100031d6:	9302      	str	r3, [sp, #8]
100031d8:	9400      	str	r4, [sp, #0]
100031da:	0023      	movs	r3, r4
100031dc:	f002 f938 	bl	10005450 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
100031e0:	69eb      	ldr	r3, [r5, #28]
100031e2:	2201      	movs	r2, #1
100031e4:	9303      	str	r3, [sp, #12]
100031e6:	4b10      	ldr	r3, [pc, #64]	; (10003228 <z_arm_fatal_error+0x98>)
100031e8:	0031      	movs	r1, r6
100031ea:	0020      	movs	r0, r4
100031ec:	9302      	str	r3, [sp, #8]
100031ee:	9401      	str	r4, [sp, #4]
100031f0:	0023      	movs	r3, r4
100031f2:	9400      	str	r4, [sp, #0]
100031f4:	f002 f92c 	bl	10005450 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
100031f8:	69ab      	ldr	r3, [r5, #24]
100031fa:	2201      	movs	r2, #1
100031fc:	9303      	str	r3, [sp, #12]
100031fe:	4b0b      	ldr	r3, [pc, #44]	; (1000322c <z_arm_fatal_error+0x9c>)
10003200:	0031      	movs	r1, r6
10003202:	9302      	str	r3, [sp, #8]
10003204:	0020      	movs	r0, r4
10003206:	0023      	movs	r3, r4
10003208:	9401      	str	r4, [sp, #4]
1000320a:	9400      	str	r4, [sp, #0]
1000320c:	f002 f920 	bl	10005450 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10003210:	0029      	movs	r1, r5
10003212:	0038      	movs	r0, r7
10003214:	f001 f8ec 	bl	100043f0 <z_fatal_error>
}
10003218:	b007      	add	sp, #28
1000321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000321c:	10005f4c 	.word	0x10005f4c
10003220:	10006459 	.word	0x10006459
10003224:	10006488 	.word	0x10006488
10003228:	100064b7 	.word	0x100064b7
1000322c:	100064c6 	.word	0x100064c6

10003230 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10003230:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10003232:	0600      	lsls	r0, r0, #24
10003234:	d405      	bmi.n	10003242 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003236:	221f      	movs	r2, #31
10003238:	401a      	ands	r2, r3
1000323a:	2301      	movs	r3, #1
1000323c:	4093      	lsls	r3, r2
1000323e:	4a01      	ldr	r2, [pc, #4]	; (10003244 <arch_irq_enable+0x14>)
10003240:	6013      	str	r3, [r2, #0]
}
10003242:	4770      	bx	lr
10003244:	e000e100 	.word	0xe000e100

10003248 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10003248:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000324a:	25ff      	movs	r5, #255	; 0xff
1000324c:	2203      	movs	r2, #3
1000324e:	000b      	movs	r3, r1
10003250:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10003252:	b240      	sxtb	r0, r0
10003254:	4002      	ands	r2, r0
10003256:	00d2      	lsls	r2, r2, #3
10003258:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000325a:	015b      	lsls	r3, r3, #5
1000325c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000325e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003260:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10003262:	2800      	cmp	r0, #0
10003264:	db0a      	blt.n	1000327c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003266:	24c0      	movs	r4, #192	; 0xc0
10003268:	4a0a      	ldr	r2, [pc, #40]	; (10003294 <z_arm_irq_priority_set+0x4c>)
1000326a:	0880      	lsrs	r0, r0, #2
1000326c:	0080      	lsls	r0, r0, #2
1000326e:	1880      	adds	r0, r0, r2
10003270:	00a4      	lsls	r4, r4, #2
10003272:	5902      	ldr	r2, [r0, r4]
10003274:	400a      	ands	r2, r1
10003276:	4313      	orrs	r3, r2
10003278:	5103      	str	r3, [r0, r4]
}
1000327a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000327c:	220f      	movs	r2, #15
1000327e:	4010      	ands	r0, r2
10003280:	3808      	subs	r0, #8
10003282:	4a05      	ldr	r2, [pc, #20]	; (10003298 <z_arm_irq_priority_set+0x50>)
10003284:	0880      	lsrs	r0, r0, #2
10003286:	0080      	lsls	r0, r0, #2
10003288:	1880      	adds	r0, r0, r2
1000328a:	69c2      	ldr	r2, [r0, #28]
1000328c:	4011      	ands	r1, r2
1000328e:	4319      	orrs	r1, r3
10003290:	61c1      	str	r1, [r0, #28]
10003292:	e7f2      	b.n	1000327a <z_arm_irq_priority_set+0x32>
10003294:	e000e100 	.word	0xe000e100
10003298:	e000ed00 	.word	0xe000ed00

1000329c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
1000329c:	bf30      	wfi
    b z_SysNmiOnReset
1000329e:	e7fd      	b.n	1000329c <z_SysNmiOnReset>

100032a0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100032a0:	22ff      	movs	r2, #255	; 0xff
100032a2:	4b08      	ldr	r3, [pc, #32]	; (100032c4 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
100032a4:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100032a6:	4393      	bics	r3, r2
100032a8:	4a07      	ldr	r2, [pc, #28]	; (100032c8 <z_arm_prep_c+0x28>)
100032aa:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
100032ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
100032b0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
100032b4:	f001 f942 	bl	1000453c <z_bss_zero>
	z_data_copy();
100032b8:	f001 fd82 	bl	10004dc0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
100032bc:	f000 f93a 	bl	10003534 <z_arm_interrupt_init>
	z_cstart();
100032c0:	f001 f97c 	bl	100045bc <z_cstart>
100032c4:	10000100 	.word	0x10000100
100032c8:	e000ed00 	.word	0xe000ed00

100032cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
100032cc:	4a08      	ldr	r2, [pc, #32]	; (100032f0 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
100032ce:	4909      	ldr	r1, [pc, #36]	; (100032f4 <arch_swap+0x28>)
	_current->arch.basepri = key;
100032d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
100032d2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
100032d4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
100032d6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
100032d8:	2380      	movs	r3, #128	; 0x80
100032da:	4907      	ldr	r1, [pc, #28]	; (100032f8 <arch_swap+0x2c>)
100032dc:	055b      	lsls	r3, r3, #21
100032de:	6848      	ldr	r0, [r1, #4]
100032e0:	4303      	orrs	r3, r0
100032e2:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
100032e4:	b662      	cpsie	i
100032e6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
100032ea:	6893      	ldr	r3, [r2, #8]
100032ec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
100032ee:	4770      	bx	lr
100032f0:	20000264 	.word	0x20000264
100032f4:	10006168 	.word	0x10006168
100032f8:	e000ed00 	.word	0xe000ed00

100032fc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
100032fc:	4913      	ldr	r1, [pc, #76]	; (1000334c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
100032fe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10003300:	4813      	ldr	r0, [pc, #76]	; (10003350 <_thread_irq_disabled+0x22>)
    add r0, r2
10003302:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10003304:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10003308:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
1000330a:	4643      	mov	r3, r8
    mov r4, r9
1000330c:	464c      	mov	r4, r9
    mov r5, r10
1000330e:	4655      	mov	r5, sl
    mov r6, r11
10003310:	465e      	mov	r6, fp
    mov r7, ip
10003312:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10003314:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10003316:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10003318:	4f0e      	ldr	r7, [pc, #56]	; (10003354 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
1000331a:	4e0f      	ldr	r6, [pc, #60]	; (10003358 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
1000331c:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
1000331e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10003320:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10003322:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10003324:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10003326:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10003328:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
1000332a:	d100      	bne.n	1000332e <_thread_irq_disabled>
    cpsie i
1000332c:	b662      	cpsie	i

1000332e <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
1000332e:	4c08      	ldr	r4, [pc, #32]	; (10003350 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10003330:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10003332:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10003334:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10003336:	4698      	mov	r8, r3
    mov r9, r4
10003338:	46a1      	mov	r9, r4
    mov r10, r5
1000333a:	46aa      	mov	sl, r5
    mov r11, r6
1000333c:	46b3      	mov	fp, r6
    mov ip, r7
1000333e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10003340:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10003342:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10003344:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10003348:	4770      	bx	lr
1000334a:	0000      	.short	0x0000
    ldr r1, =_kernel
1000334c:	20000264 	.word	0x20000264
    ldr r0, =_thread_offset_to_callee_saved
10003350:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10003354:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10003358:	08000000 	.word	0x08000000

1000335c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
1000335c:	2004      	movs	r0, #4
  mov r1, lr
1000335e:	4671      	mov	r1, lr
  tst r1, r0
10003360:	4201      	tst	r1, r0
  beq _stack_frame_msp
10003362:	d002      	beq.n	1000336a <_stack_frame_msp>
  mrs r0, PSP
10003364:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10003368:	d101      	bne.n	1000336e <_stack_frame_endif>

1000336a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
1000336a:	f3ef 8008 	mrs	r0, MSP

1000336e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
1000336e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10003370:	3902      	subs	r1, #2
    ldrb r1, [r1]
10003372:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10003374:	2902      	cmp	r1, #2
    beq _oops
10003376:	d0ff      	beq.n	10003378 <_oops>

10003378 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10003378:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
1000337a:	f002 f878 	bl	1000546e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
1000337e:	bd01      	pop	{r0, pc}

10003380 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10003380:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10003382:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10003384:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10003386:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10003388:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
1000338a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
1000338c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
1000338e:	4906      	ldr	r1, [pc, #24]	; (100033a8 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10003390:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10003392:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10003394:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10003396:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10003398:	2380      	movs	r3, #128	; 0x80
1000339a:	045b      	lsls	r3, r3, #17
1000339c:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
1000339e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
100033a0:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
100033a2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
100033a4:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
100033a6:	bd10      	pop	{r4, pc}
100033a8:	10005281 	.word	0x10005281

100033ac <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100033ac:	4b06      	ldr	r3, [pc, #24]	; (100033c8 <arch_switch_to_main_thread+0x1c>)
100033ae:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100033b0:	1c10      	adds	r0, r2, #0
100033b2:	f381 8809 	msr	PSP, r1
100033b6:	2100      	movs	r1, #0
100033b8:	b662      	cpsie	i
100033ba:	f3bf 8f6f 	isb	sy
100033be:	2200      	movs	r2, #0
100033c0:	2300      	movs	r3, #0
100033c2:	f001 ff5d 	bl	10005280 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
100033c6:	46c0      	nop			; (mov r8, r8)
100033c8:	20000264 	.word	0x20000264

100033cc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
100033cc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
100033ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
100033d2:	4905      	ldr	r1, [pc, #20]	; (100033e8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
100033d4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
100033d6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
100033d8:	4904      	ldr	r1, [pc, #16]	; (100033ec <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
100033da:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
100033dc:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
100033de:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
100033e0:	bc09      	pop	{r0, r3}
	mov lr, r3
100033e2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
100033e4:	4902      	ldr	r1, [pc, #8]	; (100033f0 <_isr_wrapper+0x24>)
	bx r1
100033e6:	4708      	bx	r1
	ldr r1, =16
100033e8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
100033ec:	10005e28 	.word	0x10005e28
	ldr r1, =z_arm_int_exit
100033f0:	100033f5 	.word	0x100033f5

100033f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
100033f4:	4b04      	ldr	r3, [pc, #16]	; (10003408 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
100033f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
100033f8:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
100033fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
100033fc:	d002      	beq.n	10003404 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
100033fe:	4903      	ldr	r1, [pc, #12]	; (1000340c <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10003400:	4a03      	ldr	r2, [pc, #12]	; (10003410 <_EXIT_EXC+0xc>)
	str r2, [r1]
10003402:	600a      	str	r2, [r1, #0]

10003404 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10003404:	4770      	bx	lr
10003406:	0000      	.short	0x0000
	ldr r3, =_kernel
10003408:	20000264 	.word	0x20000264
	ldr r1, =_SCS_ICSR
1000340c:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10003410:	10000000 	.word	0x10000000

10003414 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10003414:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10003416:	4b38      	ldr	r3, [pc, #224]	; (100034f8 <z_arm_fault+0xe4>)
{
10003418:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000341a:	685f      	ldr	r7, [r3, #4]
{
1000341c:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000341e:	05fb      	lsls	r3, r7, #23
10003420:	0ddb      	lsrs	r3, r3, #23
10003422:	9307      	str	r3, [sp, #28]
10003424:	b662      	cpsie	i
10003426:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000342a:	4e34      	ldr	r6, [pc, #208]	; (100034fc <z_arm_fault+0xe8>)
1000342c:	0e13      	lsrs	r3, r2, #24
1000342e:	2bff      	cmp	r3, #255	; 0xff
10003430:	d10d      	bne.n	1000344e <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10003432:	3bf3      	subs	r3, #243	; 0xf3
10003434:	4013      	ands	r3, r2
10003436:	2b08      	cmp	r3, #8
10003438:	d13f      	bne.n	100034ba <z_arm_fault+0xa6>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
1000343a:	2000      	movs	r0, #0
1000343c:	4b30      	ldr	r3, [pc, #192]	; (10003500 <z_arm_fault+0xec>)
1000343e:	2201      	movs	r2, #1
10003440:	9302      	str	r3, [sp, #8]
10003442:	0031      	movs	r1, r6
10003444:	0003      	movs	r3, r0
10003446:	9001      	str	r0, [sp, #4]
10003448:	9000      	str	r0, [sp, #0]
1000344a:	f002 f822 	bl	10005492 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
1000344e:	2500      	movs	r5, #0
		return NULL;
10003450:	002c      	movs	r4, r5
	switch (fault) {
10003452:	9b07      	ldr	r3, [sp, #28]
10003454:	2b03      	cmp	r3, #3
10003456:	d136      	bne.n	100034c6 <z_arm_fault+0xb2>
	PR_FAULT_INFO("***** HARD FAULT *****");
10003458:	2700      	movs	r7, #0
1000345a:	4b2a      	ldr	r3, [pc, #168]	; (10003504 <z_arm_fault+0xf0>)
1000345c:	2201      	movs	r2, #1
1000345e:	9302      	str	r3, [sp, #8]
10003460:	0031      	movs	r1, r6
10003462:	003b      	movs	r3, r7
10003464:	0038      	movs	r0, r7
10003466:	9701      	str	r7, [sp, #4]
10003468:	9700      	str	r7, [sp, #0]
1000346a:	f002 f812 	bl	10005492 <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
1000346e:	69a3      	ldr	r3, [r4, #24]
10003470:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10003472:	881a      	ldrh	r2, [r3, #0]
10003474:	4b24      	ldr	r3, [pc, #144]	; (10003508 <z_arm_fault+0xf4>)
10003476:	429a      	cmp	r2, r3
10003478:	d139      	bne.n	100034ee <z_arm_fault+0xda>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
1000347a:	6823      	ldr	r3, [r4, #0]
1000347c:	0031      	movs	r1, r6
1000347e:	9303      	str	r3, [sp, #12]
10003480:	4b22      	ldr	r3, [pc, #136]	; (1000350c <z_arm_fault+0xf8>)
10003482:	2201      	movs	r2, #1
10003484:	9302      	str	r3, [sp, #8]
10003486:	0038      	movs	r0, r7
10003488:	003b      	movs	r3, r7
1000348a:	9701      	str	r7, [sp, #4]
1000348c:	9700      	str	r7, [sp, #0]
1000348e:	f002 f800 	bl	10005492 <z_log_msg_runtime_create.constprop.0>
		reason = esf->basic.r0;
10003492:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10003494:	2220      	movs	r2, #32
10003496:	0021      	movs	r1, r4
10003498:	a808      	add	r0, sp, #32
1000349a:	f002 f81c 	bl	100054d6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
1000349e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100034a0:	2d00      	cmp	r5, #0
100034a2:	d026      	beq.n	100034f2 <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100034a4:	05da      	lsls	r2, r3, #23
100034a6:	d102      	bne.n	100034ae <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100034a8:	4a19      	ldr	r2, [pc, #100]	; (10003510 <z_arm_fault+0xfc>)
100034aa:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100034ac:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
100034ae:	0030      	movs	r0, r6
100034b0:	a908      	add	r1, sp, #32
100034b2:	f7ff fe6d 	bl	10003190 <z_arm_fatal_error>
}
100034b6:	b011      	add	sp, #68	; 0x44
100034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
100034ba:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
100034bc:	0712      	lsls	r2, r2, #28
100034be:	d5c8      	bpl.n	10003452 <z_arm_fault+0x3e>
			ptr_esf =  (z_arch_esf_t *)psp;
100034c0:	000c      	movs	r4, r1
	*nested_exc = false;
100034c2:	2500      	movs	r5, #0
100034c4:	e7c5      	b.n	10003452 <z_arm_fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****",
100034c6:	23f8      	movs	r3, #248	; 0xf8
100034c8:	005b      	lsls	r3, r3, #1
100034ca:	4a12      	ldr	r2, [pc, #72]	; (10003514 <z_arm_fault+0x100>)
100034cc:	421f      	tst	r7, r3
100034ce:	d000      	beq.n	100034d2 <z_arm_fault+0xbe>
100034d0:	4a11      	ldr	r2, [pc, #68]	; (10003518 <z_arm_fault+0x104>)
100034d2:	2000      	movs	r0, #0
100034d4:	9b07      	ldr	r3, [sp, #28]
100034d6:	9203      	str	r2, [sp, #12]
100034d8:	3b10      	subs	r3, #16
100034da:	9304      	str	r3, [sp, #16]
100034dc:	4b0f      	ldr	r3, [pc, #60]	; (1000351c <z_arm_fault+0x108>)
100034de:	2201      	movs	r2, #1
100034e0:	9302      	str	r3, [sp, #8]
100034e2:	0031      	movs	r1, r6
100034e4:	0003      	movs	r3, r0
100034e6:	9001      	str	r0, [sp, #4]
100034e8:	9000      	str	r0, [sp, #0]
100034ea:	f001 ffd2 	bl	10005492 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
100034ee:	2600      	movs	r6, #0
100034f0:	e7d0      	b.n	10003494 <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100034f2:	0a5b      	lsrs	r3, r3, #9
100034f4:	025b      	lsls	r3, r3, #9
100034f6:	e7d9      	b.n	100034ac <z_arm_fault+0x98>
100034f8:	e000ed00 	.word	0xe000ed00
100034fc:	10005f4c 	.word	0x10005f4c
10003500:	10006522 	.word	0x10006522
10003504:	1000654d 	.word	0x1000654d
10003508:	0000df02 	.word	0x0000df02
1000350c:	10006564 	.word	0x10006564
10003510:	000001ff 	.word	0x000001ff
10003514:	100064f4 	.word	0x100064f4
10003518:	10006509 	.word	0x10006509
1000351c:	10006580 	.word	0x10006580

10003520 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10003520:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10003524:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10003528:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
1000352a:	4672      	mov	r2, lr
	bl z_arm_fault
1000352c:	f7ff ff72 	bl	10003414 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10003530:	bd01      	pop	{r0, pc}
10003532:	46c0      	nop			; (mov r8, r8)

10003534 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10003534:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003536:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10003538:	2200      	movs	r2, #0
1000353a:	2603      	movs	r6, #3
1000353c:	25ff      	movs	r5, #255	; 0xff
1000353e:	00a4      	lsls	r4, r4, #2
10003540:	0010      	movs	r0, r2
10003542:	002f      	movs	r7, r5
10003544:	4030      	ands	r0, r6
10003546:	00c0      	lsls	r0, r0, #3
10003548:	4087      	lsls	r7, r0
1000354a:	4905      	ldr	r1, [pc, #20]	; (10003560 <z_arm_interrupt_init+0x2c>)
1000354c:	0893      	lsrs	r3, r2, #2
1000354e:	009b      	lsls	r3, r3, #2
10003550:	185b      	adds	r3, r3, r1
10003552:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10003554:	3201      	adds	r2, #1
10003556:	43b9      	bics	r1, r7
10003558:	5119      	str	r1, [r3, r4]
1000355a:	2a1a      	cmp	r2, #26
1000355c:	d1f0      	bne.n	10003540 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
1000355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003560:	e000e100 	.word	0xe000e100

10003564 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10003564:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10003566:	4807      	ldr	r0, [pc, #28]	; (10003584 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003568:	4907      	ldr	r1, [pc, #28]	; (10003588 <__start+0x24>)
    adds r0, r0, r1
1000356a:	1840      	adds	r0, r0, r1
    msr PSP, r0
1000356c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10003570:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10003574:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10003576:	4308      	orrs	r0, r1
    msr CONTROL, r0
10003578:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
1000357c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10003580:	f7ff fe8e 	bl	100032a0 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10003584:	200002a0 	.word	0x200002a0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003588:	00000800 	.word	0x00000800

1000358c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
1000358c:	b510      	push	{r4, lr}
	if (_current == thread) {
1000358e:	4b0a      	ldr	r3, [pc, #40]	; (100035b8 <z_impl_k_thread_abort+0x2c>)
10003590:	689b      	ldr	r3, [r3, #8]
10003592:	4283      	cmp	r3, r0
10003594:	d10d      	bne.n	100035b2 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003596:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
1000359a:	2b00      	cmp	r3, #0
1000359c:	d009      	beq.n	100035b2 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000359e:	2280      	movs	r2, #128	; 0x80
100035a0:	4b06      	ldr	r3, [pc, #24]	; (100035bc <z_impl_k_thread_abort+0x30>)
100035a2:	0552      	lsls	r2, r2, #21
100035a4:	6859      	ldr	r1, [r3, #4]
100035a6:	430a      	orrs	r2, r1
100035a8:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
100035aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100035ac:	4904      	ldr	r1, [pc, #16]	; (100035c0 <z_impl_k_thread_abort+0x34>)
100035ae:	400a      	ands	r2, r1
100035b0:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
100035b2:	f001 fba9 	bl	10004d08 <z_thread_abort>
}
100035b6:	bd10      	pop	{r4, pc}
100035b8:	20000264 	.word	0x20000264
100035bc:	e000ed00 	.word	0xe000ed00
100035c0:	ffff7fff 	.word	0xffff7fff

100035c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
100035c4:	4b01      	ldr	r3, [pc, #4]	; (100035cc <__stdout_hook_install+0x8>)
100035c6:	6018      	str	r0, [r3, #0]
}
100035c8:	4770      	bx	lr
100035ca:	46c0      	nop			; (mov r8, r8)
100035cc:	200000a8 	.word	0x200000a8

100035d0 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100035d0:	4b0e      	ldr	r3, [pc, #56]	; (1000360c <rp2040_init+0x3c>)
100035d2:	4a0f      	ldr	r2, [pc, #60]	; (10003610 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
100035d4:	b570      	push	{r4, r5, r6, lr}
100035d6:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100035d8:	4d0e      	ldr	r5, [pc, #56]	; (10003614 <rp2040_init+0x44>)
100035da:	4b0f      	ldr	r3, [pc, #60]	; (10003618 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100035dc:	4c0f      	ldr	r4, [pc, #60]	; (1000361c <rp2040_init+0x4c>)
100035de:	602b      	str	r3, [r5, #0]
100035e0:	0019      	movs	r1, r3
100035e2:	68a2      	ldr	r2, [r4, #8]
100035e4:	4391      	bics	r1, r2
100035e6:	d1fb      	bne.n	100035e0 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100035e8:	f000 fcf2 	bl	10003fd0 <clocks_init>
100035ec:	4b0c      	ldr	r3, [pc, #48]	; (10003620 <rp2040_init+0x50>)
100035ee:	602b      	str	r3, [r5, #0]
100035f0:	68a3      	ldr	r3, [r4, #8]
100035f2:	01db      	lsls	r3, r3, #7
100035f4:	3380      	adds	r3, #128	; 0x80
100035f6:	d1fb      	bne.n	100035f0 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100035f8:	f3ef 8310 	mrs	r3, PRIMASK
100035fc:	b672      	cpsid	i
	if (key != 0U) {
100035fe:	2b00      	cmp	r3, #0
10003600:	d102      	bne.n	10003608 <rp2040_init+0x38>
	__asm__ volatile(
10003602:	b662      	cpsie	i
10003604:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10003608:	2000      	movs	r0, #0
1000360a:	bd70      	pop	{r4, r5, r6, pc}
1000360c:	4000e000 	.word	0x4000e000
10003610:	ffffcdbf 	.word	0xffffcdbf
10003614:	4000f000 	.word	0x4000f000
10003618:	003c3ffe 	.word	0x003c3ffe
1000361c:	4000c000 	.word	0x4000c000
10003620:	01ffffff 	.word	0x01ffffff

10003624 <adc_rpi_init>:
 * @param dev RaspberryPi Pico ADC device
 *
 * @return 0 on success
 */
static int adc_rpi_init(const struct device *dev)
{
10003624:	b510      	push	{r4, lr}
	const struct adc_rpi_config *config = dev->config;
	struct adc_rpi_data *data = dev->data;

	config->irq_configure();
10003626:	6843      	ldr	r3, [r0, #4]
	struct adc_rpi_data *data = dev->data;
10003628:	6904      	ldr	r4, [r0, #16]
	config->irq_configure();
1000362a:	685b      	ldr	r3, [r3, #4]
1000362c:	4798      	blx	r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000362e:	4b0e      	ldr	r3, [pc, #56]	; (10003668 <adc_rpi_init+0x44>)
10003630:	681a      	ldr	r2, [r3, #0]
10003632:	4b0e      	ldr	r3, [pc, #56]	; (1000366c <adc_rpi_init+0x48>)
10003634:	4053      	eors	r3, r2
10003636:	4a0e      	ldr	r2, [pc, #56]	; (10003670 <adc_rpi_init+0x4c>)
10003638:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000363a:	4a0e      	ldr	r2, [pc, #56]	; (10003674 <adc_rpi_init+0x50>)
1000363c:	6013      	str	r3, [r2, #0]
 *
 * \param clkdiv If non-zero, conversion will be started at intervals rather than back to back.
 */
static inline void adc_set_clkdiv(float clkdiv) {
    invalid_params_if(ADC, clkdiv >= 1 << (ADC_DIV_INT_MSB - ADC_DIV_INT_LSB + 1));
    adc_hw->div = (uint32_t)(clkdiv * (float) (1 << ADC_DIV_INT_LSB));
1000363e:	2200      	movs	r2, #0
10003640:	4b0d      	ldr	r3, [pc, #52]	; (10003678 <adc_rpi_init+0x54>)
10003642:	611a      	str	r2, [r3, #16]
	adc_hw->cs = ADC_CS_EN_BITS;
10003644:	3201      	adds	r2, #1
10003646:	601a      	str	r2, [r3, #0]
	while (!(adc_hw->cs & ADC_CS_READY_BITS))
10003648:	32ff      	adds	r2, #255	; 0xff
1000364a:	6819      	ldr	r1, [r3, #0]
1000364c:	4211      	tst	r1, r2
1000364e:	d0fc      	beq.n	1000364a <adc_rpi_init+0x26>
 *  \ingroup hardware_adc
 *
 * \param enabled Set to true to enable the ADC interrupts, false to disable
 */
static inline void adc_irq_set_enabled(bool enabled) {
    adc_hw->inte = !!enabled;
10003650:	2201      	movs	r2, #1
10003652:	619a      	str	r2, [r3, #24]
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
10003654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
10003656:	2b00      	cmp	r3, #0
10003658:	d103      	bne.n	10003662 <adc_rpi_init+0x3e>
		k_sem_give(&ctx->lock);
1000365a:	0020      	movs	r0, r4
1000365c:	3040      	adds	r0, #64	; 0x40
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
1000365e:	f001 f879 	bl	10004754 <z_impl_k_sem_give>
	adc_irq_set_enabled(true);

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
10003662:	2000      	movs	r0, #0
10003664:	bd10      	pop	{r4, pc}
10003666:	46c0      	nop			; (mov r8, r8)
10003668:	4004c008 	.word	0x4004c008
1000366c:	01000007 	.word	0x01000007
10003670:	0f00000f 	.word	0x0f00000f
10003674:	4004d008 	.word	0x4004d008
10003678:	4004c000 	.word	0x4004c000

1000367c <adc_rpi_channel_setup>:
{
1000367c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (channel_cfg->channel_id >= config->num_channels) {
1000367e:	6840      	ldr	r0, [r0, #4]
10003680:	790a      	ldrb	r2, [r1, #4]
10003682:	7800      	ldrb	r0, [r0, #0]
10003684:	06d3      	lsls	r3, r2, #27
10003686:	0edb      	lsrs	r3, r3, #27
10003688:	4298      	cmp	r0, r3
1000368a:	d80e      	bhi.n	100036aa <adc_rpi_channel_setup+0x2e>
		LOG_ERR("unsupported channel id '%d'", channel_cfg->channel_id);
1000368c:	2000      	movs	r0, #0
1000368e:	9303      	str	r3, [sp, #12]
10003690:	4b1a      	ldr	r3, [pc, #104]	; (100036fc <adc_rpi_channel_setup+0x80>)
10003692:	2201      	movs	r2, #1
10003694:	9302      	str	r3, [sp, #8]
10003696:	491a      	ldr	r1, [pc, #104]	; (10003700 <adc_rpi_channel_setup+0x84>)
10003698:	0003      	movs	r3, r0
1000369a:	9001      	str	r0, [sp, #4]
1000369c:	9000      	str	r0, [sp, #0]
1000369e:	f001 ff39 	bl	10005514 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
100036a2:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
100036a4:	4240      	negs	r0, r0
}
100036a6:	b004      	add	sp, #16
100036a8:	bd10      	pop	{r4, pc}
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
100036aa:	8848      	ldrh	r0, [r1, #2]
100036ac:	2800      	cmp	r0, #0
100036ae:	d00b      	beq.n	100036c8 <adc_rpi_channel_setup+0x4c>
		LOG_ERR("Acquisition time is not valid");
100036b0:	2000      	movs	r0, #0
100036b2:	4b14      	ldr	r3, [pc, #80]	; (10003704 <adc_rpi_channel_setup+0x88>)
100036b4:	4912      	ldr	r1, [pc, #72]	; (10003700 <adc_rpi_channel_setup+0x84>)
100036b6:	9302      	str	r3, [sp, #8]
100036b8:	0003      	movs	r3, r0
100036ba:	9001      	str	r0, [sp, #4]
100036bc:	9000      	str	r0, [sp, #0]
		LOG_ERR("Gain is not valid");
100036be:	2201      	movs	r2, #1
100036c0:	f001 ff28 	bl	10005514 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
100036c4:	2016      	movs	r0, #22
100036c6:	e7ed      	b.n	100036a4 <adc_rpi_channel_setup+0x28>
	if (channel_cfg->differential) {
100036c8:	2420      	movs	r4, #32
100036ca:	0013      	movs	r3, r2
100036cc:	4023      	ands	r3, r4
100036ce:	4222      	tst	r2, r4
100036d0:	d009      	beq.n	100036e6 <adc_rpi_channel_setup+0x6a>
		LOG_ERR("unsupported differential mode");
100036d2:	4b0d      	ldr	r3, [pc, #52]	; (10003708 <adc_rpi_channel_setup+0x8c>)
100036d4:	2201      	movs	r2, #1
100036d6:	9302      	str	r3, [sp, #8]
100036d8:	4909      	ldr	r1, [pc, #36]	; (10003700 <adc_rpi_channel_setup+0x84>)
100036da:	0003      	movs	r3, r0
100036dc:	9001      	str	r0, [sp, #4]
100036de:	9000      	str	r0, [sp, #0]
100036e0:	f001 ff18 	bl	10005514 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
100036e4:	e7dd      	b.n	100036a2 <adc_rpi_channel_setup+0x26>
	if (channel_cfg->gain != ADC_GAIN_1) {
100036e6:	780a      	ldrb	r2, [r1, #0]
	return 0;
100036e8:	0018      	movs	r0, r3
	if (channel_cfg->gain != ADC_GAIN_1) {
100036ea:	2a08      	cmp	r2, #8
100036ec:	d0db      	beq.n	100036a6 <adc_rpi_channel_setup+0x2a>
		LOG_ERR("Gain is not valid");
100036ee:	4a07      	ldr	r2, [pc, #28]	; (1000370c <adc_rpi_channel_setup+0x90>)
100036f0:	4903      	ldr	r1, [pc, #12]	; (10003700 <adc_rpi_channel_setup+0x84>)
100036f2:	9202      	str	r2, [sp, #8]
100036f4:	9301      	str	r3, [sp, #4]
100036f6:	9300      	str	r3, [sp, #0]
100036f8:	e7e1      	b.n	100036be <adc_rpi_channel_setup+0x42>
100036fa:	46c0      	nop			; (mov r8, r8)
100036fc:	10006597 	.word	0x10006597
10003700:	10005f24 	.word	0x10005f24
10003704:	100065b3 	.word	0x100065b3
10003708:	100065d1 	.word	0x100065d1
1000370c:	100065ef 	.word	0x100065ef

10003710 <adc_context_start_sampling>:
	data->channels = ctx->sequence.channels;
10003710:	0002      	movs	r2, r0
{
10003712:	b570      	push	{r4, r5, r6, lr}
	data->channels = ctx->sequence.channels;
10003714:	6e83      	ldr	r3, [r0, #104]	; 0x68
10003716:	329c      	adds	r2, #156	; 0x9c
10003718:	6013      	str	r3, [r2, #0]
	data->repeat_buf = data->buf;
1000371a:	0003      	movs	r3, r0
1000371c:	3094      	adds	r0, #148	; 0x94
1000371e:	6801      	ldr	r1, [r0, #0]
10003720:	3398      	adds	r3, #152	; 0x98
10003722:	6019      	str	r1, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003724:	2180      	movs	r1, #128	; 0x80
10003726:	4b0c      	ldr	r3, [pc, #48]	; (10003758 <adc_context_start_sampling+0x48>)
10003728:	0109      	lsls	r1, r1, #4
1000372a:	6019      	str	r1, [r3, #0]
1000372c:	2180      	movs	r1, #128	; 0x80
1000372e:	2504      	movs	r5, #4
10003730:	4c0a      	ldr	r4, [pc, #40]	; (1000375c <adc_context_start_sampling+0x4c>)
10003732:	00c9      	lsls	r1, r1, #3
10003734:	6019      	str	r1, [r3, #0]
10003736:	601d      	str	r5, [r3, #0]
10003738:	6021      	str	r1, [r4, #0]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
1000373a:	6810      	ldr	r0, [r2, #0]
1000373c:	f7fe fa4a 	bl	10001bd4 <__ffssi2>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003740:	4b07      	ldr	r3, [pc, #28]	; (10003760 <adc_context_start_sampling+0x50>)
	adc_select_input(find_lsb_set(data->channels) - 1);
10003742:	3801      	subs	r0, #1
10003744:	681b      	ldr	r3, [r3, #0]
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
10003746:	0300      	lsls	r0, r0, #12
10003748:	4058      	eors	r0, r3
1000374a:	23e0      	movs	r3, #224	; 0xe0
1000374c:	01db      	lsls	r3, r3, #7
1000374e:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003750:	4b04      	ldr	r3, [pc, #16]	; (10003764 <adc_context_start_sampling+0x54>)
10003752:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003754:	6025      	str	r5, [r4, #0]
}
10003756:	bd70      	pop	{r4, r5, r6, pc}
10003758:	4004e008 	.word	0x4004e008
1000375c:	4004e000 	.word	0x4004e000
10003760:	4004c000 	.word	0x4004c000
10003764:	4004d000 	.word	0x4004d000

10003768 <adc_rpi_read>:
{
10003768:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_sem_take(&ctx->lock, K_FOREVER);
1000376a:	6903      	ldr	r3, [r0, #16]
1000376c:	b087      	sub	sp, #28
1000376e:	3340      	adds	r3, #64	; 0x40
10003770:	0004      	movs	r4, r0
10003772:	000d      	movs	r5, r1
10003774:	9305      	str	r3, [sp, #20]
	return z_impl_k_sem_take(sem, timeout);
10003776:	2201      	movs	r2, #1
10003778:	4252      	negs	r2, r2
1000377a:	17d3      	asrs	r3, r2, #31
1000377c:	9805      	ldr	r0, [sp, #20]
1000377e:	f001 f805 	bl	1000478c <z_impl_k_sem_take>
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10003782:	7c2b      	ldrb	r3, [r5, #16]
	const struct adc_rpi_config *config = dev->config;
10003784:	6862      	ldr	r2, [r4, #4]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10003786:	1e59      	subs	r1, r3, #1
	struct adc_rpi_data *data = dev->data;
10003788:	6924      	ldr	r4, [r4, #16]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
1000378a:	290b      	cmp	r1, #11
1000378c:	d912      	bls.n	100037b4 <adc_rpi_read+0x4c>
		LOG_ERR("unsupported resolution %d", sequence->resolution);
1000378e:	9303      	str	r3, [sp, #12]
10003790:	4940      	ldr	r1, [pc, #256]	; (10003894 <adc_rpi_read+0x12c>)
10003792:	4b41      	ldr	r3, [pc, #260]	; (10003898 <adc_rpi_read+0x130>)
		LOG_ERR("unsupported channels in mask: 0x%08x",
10003794:	2000      	movs	r0, #0
10003796:	9302      	str	r3, [sp, #8]
10003798:	2201      	movs	r2, #1
1000379a:	0003      	movs	r3, r0
1000379c:	9001      	str	r0, [sp, #4]
1000379e:	9000      	str	r0, [sp, #0]
100037a0:	f001 feb8 	bl	10005514 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
100037a4:	2486      	movs	r4, #134	; 0x86
		return -ENOMEM;
100037a6:	4264      	negs	r4, r4
	z_impl_k_sem_give(sem);
100037a8:	9805      	ldr	r0, [sp, #20]
100037aa:	f000 ffd3 	bl	10004754 <z_impl_k_sem_give>
}
100037ae:	0020      	movs	r0, r4
100037b0:	b007      	add	sp, #28
100037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (find_msb_set(sequence->channels) > config->num_channels) {
100037b4:	686f      	ldr	r7, [r5, #4]
100037b6:	7816      	ldrb	r6, [r2, #0]
	if (op == 0) {
100037b8:	2f00      	cmp	r7, #0
100037ba:	d11f      	bne.n	100037fc <adc_rpi_read+0x94>
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
100037bc:	2201      	movs	r2, #1
100037be:	3e01      	subs	r6, #1
100037c0:	40b2      	lsls	r2, r6
	uint8_t channels = 0;
100037c2:	2300      	movs	r3, #0
		if (mask & sequence->channels) {
100037c4:	423a      	tst	r2, r7
100037c6:	d001      	beq.n	100037cc <adc_rpi_read+0x64>
			channels++;
100037c8:	3301      	adds	r3, #1
100037ca:	b2db      	uxtb	r3, r3
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
100037cc:	0852      	lsrs	r2, r2, #1
100037ce:	d1f9      	bne.n	100037c4 <adc_rpi_read+0x5c>
	if (sequence->options) {
100037d0:	682a      	ldr	r2, [r5, #0]
	needed = channels * sizeof(uint16_t);
100037d2:	005b      	lsls	r3, r3, #1
	if (sequence->options) {
100037d4:	2a00      	cmp	r2, #0
100037d6:	d002      	beq.n	100037de <adc_rpi_read+0x76>
		needed *= (1 + sequence->options->extra_samplings);
100037d8:	8992      	ldrh	r2, [r2, #12]
100037da:	3201      	adds	r2, #1
100037dc:	4353      	muls	r3, r2
	if (sequence->buffer_size < needed) {
100037de:	68ea      	ldr	r2, [r5, #12]
100037e0:	429a      	cmp	r2, r3
100037e2:	d216      	bcs.n	10003812 <adc_rpi_read+0xaa>
		LOG_ERR("buffer size too small");
100037e4:	2000      	movs	r0, #0
100037e6:	4b2d      	ldr	r3, [pc, #180]	; (1000389c <adc_rpi_read+0x134>)
100037e8:	2201      	movs	r2, #1
100037ea:	9302      	str	r3, [sp, #8]
100037ec:	4929      	ldr	r1, [pc, #164]	; (10003894 <adc_rpi_read+0x12c>)
100037ee:	0003      	movs	r3, r0
100037f0:	9001      	str	r0, [sp, #4]
100037f2:	9000      	str	r0, [sp, #0]
100037f4:	f001 fe8e 	bl	10005514 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
100037f8:	240c      	movs	r4, #12
100037fa:	e7d4      	b.n	100037a6 <adc_rpi_read+0x3e>
	return 32 - __builtin_clz(op);
100037fc:	0038      	movs	r0, r7
100037fe:	f7fc fd6d 	bl	100002dc <__clzsi2>
10003802:	2320      	movs	r3, #32
10003804:	1a1b      	subs	r3, r3, r0
	if (find_msb_set(sequence->channels) > config->num_channels) {
10003806:	42b3      	cmp	r3, r6
10003808:	d9d8      	bls.n	100037bc <adc_rpi_read+0x54>
		LOG_ERR("unsupported channels in mask: 0x%08x",
1000380a:	4922      	ldr	r1, [pc, #136]	; (10003894 <adc_rpi_read+0x12c>)
1000380c:	4b24      	ldr	r3, [pc, #144]	; (100038a0 <adc_rpi_read+0x138>)
1000380e:	9703      	str	r7, [sp, #12]
10003810:	e7c0      	b.n	10003794 <adc_rpi_read+0x2c>
	data->buf = sequence->buffer;
10003812:	0023      	movs	r3, r4
10003814:	68aa      	ldr	r2, [r5, #8]
10003816:	3394      	adds	r3, #148	; 0x94
10003818:	601a      	str	r2, [r3, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
1000381a:	002a      	movs	r2, r5
1000381c:	3b30      	subs	r3, #48	; 0x30
1000381e:	ca43      	ldmia	r2!, {r0, r1, r6}
10003820:	c343      	stmia	r3!, {r0, r1, r6}
	ctx->status = 0;
10003822:	2600      	movs	r6, #0
	ctx->sequence = *sequence;
10003824:	ca03      	ldmia	r2!, {r0, r1}
10003826:	c303      	stmia	r3!, {r0, r1}
	ctx->status = 0;
10003828:	6626      	str	r6, [r4, #96]	; 0x60

	if (sequence->options) {
1000382a:	682b      	ldr	r3, [r5, #0]
1000382c:	42b3      	cmp	r3, r6
1000382e:	d02c      	beq.n	1000388a <adc_rpi_read+0x122>
		ctx->options = *sequence->options;
10003830:	0022      	movs	r2, r4
10003832:	3278      	adds	r2, #120	; 0x78
10003834:	cb23      	ldmia	r3!, {r0, r1, r5}
10003836:	c223      	stmia	r2!, {r0, r1, r5}
10003838:	681b      	ldr	r3, [r3, #0]
		ctx->sequence.options = &ctx->options;
		ctx->sampling_index = 0U;
1000383a:	0025      	movs	r5, r4
		ctx->options = *sequence->options;
1000383c:	6013      	str	r3, [r2, #0]
		ctx->sequence.options = &ctx->options;
1000383e:	0023      	movs	r3, r4
10003840:	3378      	adds	r3, #120	; 0x78
10003842:	6663      	str	r3, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
10003844:	821e      	strh	r6, [r3, #16]

		if (ctx->options.interval_us != 0U) {
10003846:	6fa3      	ldr	r3, [r4, #120]	; 0x78
		ctx->sampling_index = 0U;
10003848:	3508      	adds	r5, #8
		if (ctx->options.interval_us != 0U) {
1000384a:	42b3      	cmp	r3, r6
1000384c:	d01d      	beq.n	1000388a <adc_rpi_read+0x122>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
1000384e:	0031      	movs	r1, r6
10003850:	0020      	movs	r0, r4
10003852:	f002 fa79 	bl	10005d48 <z_impl_atomic_set>
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
10003856:	0031      	movs	r1, r6
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
10003858:	2263      	movs	r2, #99	; 0x63
1000385a:	2300      	movs	r3, #0
1000385c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
1000385e:	1880      	adds	r0, r0, r2
10003860:	4159      	adcs	r1, r3
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
10003862:	2264      	movs	r2, #100	; 0x64
10003864:	2300      	movs	r3, #0
10003866:	f7fc fd77 	bl	10000358 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
1000386a:	2200      	movs	r2, #0
1000386c:	9000      	str	r0, [sp, #0]
1000386e:	2300      	movs	r3, #0
10003870:	0028      	movs	r0, r5
10003872:	9101      	str	r1, [sp, #4]
10003874:	f001 fc6e 	bl	10005154 <z_impl_k_timer_start>
	k_sem_take(&ctx->sync, K_FOREVER);
10003878:	0020      	movs	r0, r4
	return z_impl_k_sem_take(sem, timeout);
1000387a:	2201      	movs	r2, #1
1000387c:	4252      	negs	r2, r2
1000387e:	17d3      	asrs	r3, r2, #31
10003880:	3050      	adds	r0, #80	; 0x50
10003882:	f000 ff83 	bl	1000478c <z_impl_k_sem_take>
	return ctx->status;
10003886:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return adc_context_wait_for_completion(&data->ctx);
10003888:	e78e      	b.n	100037a8 <adc_rpi_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
1000388a:	0020      	movs	r0, r4
1000388c:	f7ff ff40 	bl	10003710 <adc_context_start_sampling>
10003890:	e7f2      	b.n	10003878 <adc_rpi_read+0x110>
10003892:	46c0      	nop			; (mov r8, r8)
10003894:	10005f24 	.word	0x10005f24
10003898:	10006601 	.word	0x10006601
1000389c:	10006640 	.word	0x10006640
100038a0:	1000661b 	.word	0x1000661b

100038a4 <adc_rpi_isr>:
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
100038a4:	2180      	movs	r1, #128	; 0x80
{
100038a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (uint16_t)adc_hw->result;
100038a8:	4d34      	ldr	r5, [pc, #208]	; (1000397c <adc_rpi_isr+0xd8>)
	struct adc_rpi_data *data = dev->data;
100038aa:	6904      	ldr	r4, [r0, #16]
	return (uint16_t)adc_hw->result;
100038ac:	686a      	ldr	r2, [r5, #4]
    return (adc_hw->cs & ADC_CS_AINSEL_BITS) >> ADC_CS_AINSEL_LSB;
100038ae:	682b      	ldr	r3, [r5, #0]
100038b0:	b292      	uxth	r2, r2
100038b2:	045b      	lsls	r3, r3, #17
100038b4:	0f5b      	lsrs	r3, r3, #29
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
100038b6:	0049      	lsls	r1, r1, #1
100038b8:	68ae      	ldr	r6, [r5, #8]
	while (!adc_fifo_is_empty()) {
100038ba:	420e      	tst	r6, r1
100038bc:	d00a      	beq.n	100038d4 <adc_rpi_isr+0x30>
	return (adc_hw->cs & ADC_CS_ERR_BITS) ? true : false;
100038be:	6829      	ldr	r1, [r5, #0]
	if (adc_get_err()) {
100038c0:	0589      	lsls	r1, r1, #22
100038c2:	d509      	bpl.n	100038d8 <adc_rpi_isr+0x34>
		ctx->status = status;
100038c4:	2305      	movs	r3, #5
100038c6:	425b      	negs	r3, r3
100038c8:	6623      	str	r3, [r4, #96]	; 0x60
	k_sem_give(&ctx->sync);
100038ca:	0020      	movs	r0, r4
100038cc:	3050      	adds	r0, #80	; 0x50
	z_impl_k_sem_give(sem);
100038ce:	f000 ff41 	bl	10004754 <z_impl_k_sem_give>
}
100038d2:	e038      	b.n	10003946 <adc_rpi_isr+0xa2>
    return (uint16_t)adc_hw->fifo;
100038d4:	68ee      	ldr	r6, [r5, #12]
100038d6:	e7ef      	b.n	100038b8 <adc_rpi_isr+0x14>
	*data->buf++ = result;
100038d8:	0026      	movs	r6, r4
100038da:	3694      	adds	r6, #148	; 0x94
100038dc:	6831      	ldr	r1, [r6, #0]
100038de:	1c8f      	adds	r7, r1, #2
100038e0:	6037      	str	r7, [r6, #0]
100038e2:	800a      	strh	r2, [r1, #0]
	data->channels &= ~(BIT(ainsel));
100038e4:	2201      	movs	r2, #1
100038e6:	0021      	movs	r1, r4
100038e8:	409a      	lsls	r2, r3
100038ea:	319c      	adds	r1, #156	; 0x9c
100038ec:	680b      	ldr	r3, [r1, #0]
100038ee:	4393      	bics	r3, r2
100038f0:	600b      	str	r3, [r1, #0]
	if (data->channels == 0) {
100038f2:	d131      	bne.n	10003958 <adc_rpi_isr+0xb4>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
100038f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
100038f6:	2b00      	cmp	r3, #0
100038f8:	d0e7      	beq.n	100038ca <adc_rpi_isr+0x26>
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
100038fa:	0025      	movs	r5, r4
		adc_sequence_callback callback = ctx->options.callback;
100038fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			action = callback(dev,
100038fe:	3588      	adds	r5, #136	; 0x88
10003900:	882a      	ldrh	r2, [r5, #0]
		if (callback) {
10003902:	2b00      	cmp	r3, #0
10003904:	d005      	beq.n	10003912 <adc_rpi_isr+0x6e>
			action = callback(dev,
10003906:	3938      	subs	r1, #56	; 0x38
10003908:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
1000390a:	2801      	cmp	r0, #1
1000390c:	d00a      	beq.n	10003924 <adc_rpi_isr+0x80>
1000390e:	2802      	cmp	r0, #2
10003910:	d01a      	beq.n	10003948 <adc_rpi_isr+0xa4>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->options.extra_samplings) {
10003912:	0022      	movs	r2, r4
10003914:	3284      	adds	r2, #132	; 0x84
			if (ctx->sampling_index <
10003916:	882b      	ldrh	r3, [r5, #0]
10003918:	8812      	ldrh	r2, [r2, #0]
1000391a:	429a      	cmp	r2, r3
1000391c:	d914      	bls.n	10003948 <adc_rpi_isr+0xa4>
				++ctx->sampling_index;
1000391e:	3301      	adds	r3, #1
10003920:	802b      	strh	r3, [r5, #0]
			} else {
				finish = true;
			}
		}

		if (!finish) {
10003922:	e003      	b.n	1000392c <adc_rpi_isr+0x88>
		data->buf = data->repeat_buf;
10003924:	0023      	movs	r3, r4
10003926:	3398      	adds	r3, #152	; 0x98
10003928:	681b      	ldr	r3, [r3, #0]
1000392a:	6033      	str	r3, [r6, #0]
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
1000392c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1000392e:	2b00      	cmp	r3, #0
10003930:	d103      	bne.n	1000393a <adc_rpi_isr+0x96>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
10003932:	0020      	movs	r0, r4
10003934:	f7ff feec 	bl	10003710 <adc_context_start_sampling>
10003938:	e005      	b.n	10003946 <adc_rpi_isr+0xa2>
	return z_impl_atomic_sub(target, value);
1000393a:	2101      	movs	r1, #1
1000393c:	0020      	movs	r0, r4
1000393e:	f002 f9f6 	bl	10005d2e <z_impl_atomic_sub>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
10003942:	2801      	cmp	r0, #1
10003944:	dcf5      	bgt.n	10003932 <adc_rpi_isr+0x8e>
}
10003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
10003948:	6fa3      	ldr	r3, [r4, #120]	; 0x78
1000394a:	2b00      	cmp	r3, #0
1000394c:	d0bd      	beq.n	100038ca <adc_rpi_isr+0x26>
	k_timer_stop(&ctx->timer);
1000394e:	0020      	movs	r0, r4
10003950:	3008      	adds	r0, #8
	z_impl_k_timer_stop(timer);
10003952:	f002 f9c6 	bl	10005ce2 <z_impl_k_timer_stop>
}
10003956:	e7b8      	b.n	100038ca <adc_rpi_isr+0x26>
	return __builtin_ffs(op);
10003958:	0018      	movs	r0, r3
1000395a:	f7fe f93b 	bl	10001bd4 <__ffssi2>
	ainsel = (uint8_t)(find_lsb_set(data->channels) - 1);
1000395e:	3801      	subs	r0, #1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003960:	682b      	ldr	r3, [r5, #0]
	adc_select_input(ainsel);
10003962:	b2c0      	uxtb	r0, r0
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
10003964:	0300      	lsls	r0, r0, #12
10003966:	4058      	eors	r0, r3
10003968:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000396a:	2204      	movs	r2, #4
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000396c:	01db      	lsls	r3, r3, #7
1000396e:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003970:	4b03      	ldr	r3, [pc, #12]	; (10003980 <adc_rpi_isr+0xdc>)
10003972:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003974:	4b03      	ldr	r3, [pc, #12]	; (10003984 <adc_rpi_isr+0xe0>)
10003976:	601a      	str	r2, [r3, #0]
}
10003978:	e7e5      	b.n	10003946 <adc_rpi_isr+0xa2>
1000397a:	46c0      	nop			; (mov r8, r8)
1000397c:	4004c000 	.word	0x4004c000
10003980:	4004d000 	.word	0x4004d000
10003984:	4004e000 	.word	0x4004e000

10003988 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10003988:	b510      	push	{r4, lr}
1000398a:	4808      	ldr	r0, [pc, #32]	; (100039ac <uart_console_init+0x24>)
1000398c:	f002 f89e 	bl	10005acc <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10003990:	2800      	cmp	r0, #0
10003992:	d008      	beq.n	100039a6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10003994:	4c06      	ldr	r4, [pc, #24]	; (100039b0 <uart_console_init+0x28>)
10003996:	0020      	movs	r0, r4
10003998:	f7ff fe14 	bl	100035c4 <__stdout_hook_install>
	__printk_hook_install(console_out);
1000399c:	0020      	movs	r0, r4
1000399e:	f7fe fd15 	bl	100023cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100039a2:	2000      	movs	r0, #0
}
100039a4:	bd10      	pop	{r4, pc}
		return -ENODEV;
100039a6:	2013      	movs	r0, #19
100039a8:	4240      	negs	r0, r0
100039aa:	e7fb      	b.n	100039a4 <uart_console_init+0x1c>
100039ac:	10005dc8 	.word	0x10005dc8
100039b0:	100039b5 	.word	0x100039b5

100039b4 <console_out>:
{
100039b4:	b570      	push	{r4, r5, r6, lr}
100039b6:	0004      	movs	r4, r0
100039b8:	4d07      	ldr	r5, [pc, #28]	; (100039d8 <console_out+0x24>)
	if ('\n' == c) {
100039ba:	280a      	cmp	r0, #10
100039bc:	d104      	bne.n	100039c8 <console_out+0x14>
100039be:	68ab      	ldr	r3, [r5, #8]
100039c0:	210d      	movs	r1, #13
100039c2:	0028      	movs	r0, r5
100039c4:	685b      	ldr	r3, [r3, #4]
100039c6:	4798      	blx	r3
100039c8:	68ab      	ldr	r3, [r5, #8]
100039ca:	0028      	movs	r0, r5
100039cc:	685b      	ldr	r3, [r3, #4]
100039ce:	b2e1      	uxtb	r1, r4
100039d0:	4798      	blx	r3
}
100039d2:	0020      	movs	r0, r4
100039d4:	bd70      	pop	{r4, r5, r6, pc}
100039d6:	46c0      	nop			; (mov r8, r8)
100039d8:	10005dc8 	.word	0x10005dc8

100039dc <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
100039dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100039de:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100039e0:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
100039e2:	6903      	ldr	r3, [r0, #16]
100039e4:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
100039e6:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
100039e8:	4a14      	ldr	r2, [pc, #80]	; (10003a3c <gpio_rpi_isr+0x60>)
100039ea:	3308      	adds	r3, #8
100039ec:	009b      	lsls	r3, r3, #2
100039ee:	589b      	ldr	r3, [r3, r2]
100039f0:	2207      	movs	r2, #7
100039f2:	4022      	ands	r2, r4
100039f4:	0092      	lsls	r2, r2, #2
100039f6:	40d3      	lsrs	r3, r2
		if (events) {
100039f8:	220f      	movs	r2, #15
100039fa:	4213      	tst	r3, r2
100039fc:	d103      	bne.n	10003a06 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100039fe:	3401      	adds	r4, #1
10003a00:	2c1e      	cmp	r4, #30
10003a02:	d1f0      	bne.n	100039e6 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10003a04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10003a06:	210f      	movs	r1, #15
10003a08:	0020      	movs	r0, r4
10003a0a:	f000 fc27 	bl	1000425c <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10003a0e:	9b01      	ldr	r3, [sp, #4]
10003a10:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10003a12:	2900      	cmp	r1, #0
10003a14:	d0f3      	beq.n	100039fe <gpio_rpi_isr+0x22>
10003a16:	2701      	movs	r7, #1
10003a18:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10003a1a:	680d      	ldr	r5, [r1, #0]
10003a1c:	2900      	cmp	r1, #0
10003a1e:	d0ee      	beq.n	100039fe <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10003a20:	688b      	ldr	r3, [r1, #8]
10003a22:	001a      	movs	r2, r3
10003a24:	403a      	ands	r2, r7
10003a26:	423b      	tst	r3, r7
10003a28:	d002      	beq.n	10003a30 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10003a2a:	0030      	movs	r0, r6
10003a2c:	684b      	ldr	r3, [r1, #4]
10003a2e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10003a30:	1e2b      	subs	r3, r5, #0
10003a32:	d000      	beq.n	10003a36 <gpio_rpi_isr+0x5a>
10003a34:	682b      	ldr	r3, [r5, #0]
10003a36:	0029      	movs	r1, r5
10003a38:	001d      	movs	r5, r3
10003a3a:	e7ef      	b.n	10003a1c <gpio_rpi_isr+0x40>
10003a3c:	40014100 	.word	0x40014100

10003a40 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10003a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10003a42:	ab0b      	add	r3, sp, #44	; 0x2c
10003a44:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
10003a46:	2000      	movs	r0, #0
10003a48:	9303      	str	r3, [sp, #12]
10003a4a:	4b05      	ldr	r3, [pc, #20]	; (10003a60 <z_log_msg_runtime_create.constprop.0+0x20>)
10003a4c:	2201      	movs	r2, #1
10003a4e:	9302      	str	r3, [sp, #8]
10003a50:	9001      	str	r0, [sp, #4]
10003a52:	0003      	movs	r3, r0
10003a54:	9000      	str	r0, [sp, #0]
10003a56:	f7ff f955 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
10003a5a:	b007      	add	sp, #28
10003a5c:	bd00      	pop	{pc}
10003a5e:	46c0      	nop			; (mov r8, r8)
10003a60:	10006679 	.word	0x10006679

10003a64 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10003a66:	6845      	ldr	r5, [r0, #4]
{
10003a68:	b087      	sub	sp, #28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10003a6a:	2100      	movs	r1, #0
10003a6c:	69e8      	ldr	r0, [r5, #28]
10003a6e:	aa05      	add	r2, sp, #20
10003a70:	f001 fe77 	bl	10005762 <pinctrl_lookup_state>
10003a74:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
10003a76:	db07      	blt.n	10003a88 <pwm_rpi_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10003a78:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003a7a:	2200      	movs	r2, #0
10003a7c:	7919      	ldrb	r1, [r3, #4]
10003a7e:	6818      	ldr	r0, [r3, #0]
10003a80:	f001 fe82 	bl	10005788 <pinctrl_configure_pins>
10003a84:	1e04      	subs	r4, r0, #0
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10003a86:	d00d      	beq.n	10003aa4 <pwm_rpi_init+0x40>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
10003a88:	2000      	movs	r0, #0
10003a8a:	4b1c      	ldr	r3, [pc, #112]	; (10003afc <pwm_rpi_init+0x98>)
10003a8c:	2201      	movs	r2, #1
10003a8e:	9302      	str	r3, [sp, #8]
10003a90:	491b      	ldr	r1, [pc, #108]	; (10003b00 <pwm_rpi_init+0x9c>)
10003a92:	0003      	movs	r3, r0
10003a94:	9403      	str	r4, [sp, #12]
10003a96:	9001      	str	r0, [sp, #4]
10003a98:	9000      	str	r0, [sp, #0]
10003a9a:	f7ff ffd1 	bl	10003a40 <z_log_msg_runtime_create.constprop.0>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
10003a9e:	0020      	movs	r0, r4
10003aa0:	b007      	add	sp, #28
10003aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003aa4:	0021      	movs	r1, r4
	if (err) {
10003aa6:	4817      	ldr	r0, [pc, #92]	; (10003b04 <pwm_rpi_init+0xa0>)
10003aa8:	1d2b      	adds	r3, r5, #4
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10003aaa:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003aac:	4f16      	ldr	r7, [pc, #88]	; (10003b08 <pwm_rpi_init+0xa4>)
10003aae:	434a      	muls	r2, r1
10003ab0:	46bc      	mov	ip, r7
10003ab2:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10003ab4:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003ab6:	4667      	mov	r7, ip
10003ab8:	4d12      	ldr	r5, [pc, #72]	; (10003b04 <pwm_rpi_init+0xa0>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003aba:	3101      	adds	r1, #1
10003abc:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10003abe:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003ac0:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10003ac2:	4f12      	ldr	r7, [pc, #72]	; (10003b0c <pwm_rpi_init+0xa8>)
10003ac4:	46bc      	mov	ip, r7
10003ac6:	4494      	add	ip, r2
10003ac8:	4667      	mov	r7, ip
10003aca:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10003acc:	4f10      	ldr	r7, [pc, #64]	; (10003b10 <pwm_rpi_init+0xac>)
10003ace:	19d2      	adds	r2, r2, r7
10003ad0:	4f10      	ldr	r7, [pc, #64]	; (10003b14 <pwm_rpi_init+0xb0>)
10003ad2:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10003ad4:	2210      	movs	r2, #16
10003ad6:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10003ad8:	602e      	str	r6, [r5, #0]
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, integer >= 1);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10003ada:	781a      	ldrb	r2, [r3, #0]
10003adc:	785e      	ldrb	r6, [r3, #1]
10003ade:	0112      	lsls	r2, r2, #4
10003ae0:	4332      	orrs	r2, r6
10003ae2:	606a      	str	r2, [r5, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003ae4:	2501      	movs	r5, #1
10003ae6:	6802      	ldr	r2, [r0, #0]
10003ae8:	3303      	adds	r3, #3
10003aea:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003aec:	2280      	movs	r2, #128	; 0x80
10003aee:	0152      	lsls	r2, r2, #5
10003af0:	4302      	orrs	r2, r0
10003af2:	6015      	str	r5, [r2, #0]
10003af4:	3014      	adds	r0, #20
10003af6:	2908      	cmp	r1, #8
10003af8:	d1d7      	bne.n	10003aaa <pwm_rpi_init+0x46>
10003afa:	e7d0      	b.n	10003a9e <pwm_rpi_init+0x3a>
10003afc:	10006679 	.word	0x10006679
10003b00:	10005f54 	.word	0x10005f54
10003b04:	40050000 	.word	0x40050000
10003b08:	40050008 	.word	0x40050008
10003b0c:	4005000c 	.word	0x4005000c
10003b10:	40050010 	.word	0x40050010
10003b14:	0000ffff 	.word	0x0000ffff

10003b18 <pwm_rpi_set_cycles>:
{
10003b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003b1a:	ac08      	add	r4, sp, #32
10003b1c:	8824      	ldrh	r4, [r4, #0]
10003b1e:	9300      	str	r3, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10003b20:	290f      	cmp	r1, #15
10003b22:	d843      	bhi.n	10003bac <pwm_rpi_set_cycles+0x94>
	if (period_cycles - 1 > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10003b24:	2680      	movs	r6, #128	; 0x80
10003b26:	1e55      	subs	r5, r2, #1
10003b28:	0276      	lsls	r6, r6, #9
10003b2a:	42b5      	cmp	r5, r6
10003b2c:	d23e      	bcs.n	10003bac <pwm_rpi_set_cycles+0x94>
10003b2e:	42b3      	cmp	r3, r6
10003b30:	d23c      	bcs.n	10003bac <pwm_rpi_set_cycles+0x94>
	return channel % 2;
10003b32:	2601      	movs	r6, #1
10003b34:	000d      	movs	r5, r1
10003b36:	4035      	ands	r5, r6
10003b38:	9501      	str	r5, [sp, #4]
10003b3a:	2514      	movs	r5, #20
	return channel / 2;
10003b3c:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10003b3e:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b40:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10003b42:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b44:	6800      	ldr	r0, [r0, #0]
10003b46:	1940      	adds	r0, r0, r5
10003b48:	6803      	ldr	r3, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10003b4a:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10003b4c:	4231      	tst	r1, r6
10003b4e:	d028      	beq.n	10003ba2 <pwm_rpi_set_cycles+0x8a>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b50:	0899      	lsrs	r1, r3, #2
10003b52:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
10003b54:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b56:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10003b58:	00c0      	lsls	r0, r0, #3
10003b5a:	00a4      	lsls	r4, r4, #2
10003b5c:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b5e:	200c      	movs	r0, #12
10003b60:	4914      	ldr	r1, [pc, #80]	; (10003bb4 <pwm_rpi_set_cycles+0x9c>)
	pwm_set_wrap(slice, period_cycles - 1);
10003b62:	3a01      	subs	r2, #1
10003b64:	000b      	movs	r3, r1
10003b66:	1869      	adds	r1, r5, r1
10003b68:	680e      	ldr	r6, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
10003b6a:	b292      	uxth	r2, r2
10003b6c:	4074      	eors	r4, r6
10003b6e:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003b70:	2080      	movs	r0, #128	; 0x80
10003b72:	0140      	lsls	r0, r0, #5
10003b74:	4301      	orrs	r1, r0
10003b76:	600c      	str	r4, [r1, #0]
10003b78:	2114      	movs	r1, #20
10003b7a:	4379      	muls	r1, r7
10003b7c:	18c9      	adds	r1, r1, r3
    hw_write_masked(
10003b7e:	4b0e      	ldr	r3, [pc, #56]	; (10003bb8 <pwm_rpi_set_cycles+0xa0>)
    pwm_hw->slice[slice_num].top = wrap;
10003b80:	610a      	str	r2, [r1, #16]
    hw_write_masked(
10003b82:	18ed      	adds	r5, r5, r3
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10003b84:	9b01      	ldr	r3, [sp, #4]
10003b86:	2b00      	cmp	r3, #0
10003b88:	d00e      	beq.n	10003ba8 <pwm_rpi_set_cycles+0x90>
    hw_write_masked(
10003b8a:	9b00      	ldr	r3, [sp, #0]
10003b8c:	4a0b      	ldr	r2, [pc, #44]	; (10003bbc <pwm_rpi_set_cycles+0xa4>)
10003b8e:	041b      	lsls	r3, r3, #16
10003b90:	9300      	str	r3, [sp, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b92:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003b94:	4305      	orrs	r5, r0
	return 0;
10003b96:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b98:	9b00      	ldr	r3, [sp, #0]
10003b9a:	404b      	eors	r3, r1
10003b9c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003b9e:	602a      	str	r2, [r5, #0]
};
10003ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10003ba2:	08c0      	lsrs	r0, r0, #3
10003ba4:	4030      	ands	r0, r6
10003ba6:	e7d7      	b.n	10003b58 <pwm_rpi_set_cycles+0x40>
10003ba8:	4a05      	ldr	r2, [pc, #20]	; (10003bc0 <pwm_rpi_set_cycles+0xa8>)
10003baa:	e7f2      	b.n	10003b92 <pwm_rpi_set_cycles+0x7a>
		return -EINVAL;
10003bac:	2016      	movs	r0, #22
10003bae:	4240      	negs	r0, r0
10003bb0:	e7f6      	b.n	10003ba0 <pwm_rpi_set_cycles+0x88>
10003bb2:	46c0      	nop			; (mov r8, r8)
10003bb4:	40050000 	.word	0x40050000
10003bb8:	4005000c 	.word	0x4005000c
10003bbc:	ffff0000 	.word	0xffff0000
10003bc0:	0000ffff 	.word	0x0000ffff

10003bc4 <pwm_rpi_get_cycles_per_sec>:
{
10003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003bc6:	0015      	movs	r5, r2
	return channel / 2;
10003bc8:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10003bca:	290f      	cmp	r1, #15
10003bcc:	d825      	bhi.n	10003c1a <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10003bce:	2303      	movs	r3, #3
10003bd0:	4353      	muls	r3, r2
10003bd2:	6844      	ldr	r4, [r0, #4]
10003bd4:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10003bd6:	7960      	ldrb	r0, [r4, #5]
10003bd8:	f7fc fce0 	bl	1000059c <__aeabi_ui2f>
10003bdc:	f7fd fe98 	bl	10001910 <__aeabi_f2d>
10003be0:	2200      	movs	r2, #0
10003be2:	4b0f      	ldr	r3, [pc, #60]	; (10003c20 <pwm_rpi_get_cycles_per_sec+0x5c>)
10003be4:	f7fd f936 	bl	10000e54 <__aeabi_dmul>
10003be8:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10003bea:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10003bec:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10003bee:	f7fc fcd5 	bl	1000059c <__aeabi_ui2f>
10003bf2:	f7fd fe8d 	bl	10001910 <__aeabi_f2d>
10003bf6:	0002      	movs	r2, r0
10003bf8:	000b      	movs	r3, r1
10003bfa:	0030      	movs	r0, r6
10003bfc:	0039      	movs	r1, r7
10003bfe:	f7fc fd09 	bl	10000614 <__aeabi_dadd>
10003c02:	f7fd fec7 	bl	10001994 <__aeabi_d2f>
10003c06:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10003c08:	4806      	ldr	r0, [pc, #24]	; (10003c24 <pwm_rpi_get_cycles_per_sec+0x60>)
10003c0a:	f7fc fbe5 	bl	100003d8 <__aeabi_fdiv>
10003c0e:	f7fc fbc3 	bl	10000398 <__aeabi_f2ulz>
10003c12:	6028      	str	r0, [r5, #0]
10003c14:	6069      	str	r1, [r5, #4]
	return 0;
10003c16:	2000      	movs	r0, #0
}
10003c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10003c1a:	2016      	movs	r0, #22
10003c1c:	4240      	negs	r0, r0
10003c1e:	e7fb      	b.n	10003c18 <pwm_rpi_get_cycles_per_sec+0x54>
10003c20:	3fb00000 	.word	0x3fb00000
10003c24:	4cee6b28 	.word	0x4cee6b28

10003c28 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10003c28:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10003c2a:	4903      	ldr	r1, [pc, #12]	; (10003c38 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10003c2c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10003c2e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10003c30:	400b      	ands	r3, r1
10003c32:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10003c34:	4770      	bx	lr
10003c36:	46c0      	nop			; (mov r8, r8)
10003c38:	fffff83f 	.word	0xfffff83f

10003c3c <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10003c3c:	b510      	push	{r4, lr}
10003c3e:	2b03      	cmp	r3, #3
10003c40:	d823      	bhi.n	10003c8a <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10003c42:	2a01      	cmp	r2, #1
10003c44:	d002      	beq.n	10003c4c <uart_rpi_set_format.isra.0+0x10>
10003c46:	2a03      	cmp	r2, #3
10003c48:	d11f      	bne.n	10003c8a <uart_rpi_set_format.isra.0+0x4e>
10003c4a:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10003c4c:	2902      	cmp	r1, #2
10003c4e:	d81c      	bhi.n	10003c8a <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10003c50:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c52:	3a01      	subs	r2, #1
10003c54:	480e      	ldr	r0, [pc, #56]	; (10003c90 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10003c56:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c58:	00d2      	lsls	r2, r2, #3
10003c5a:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10003c5c:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003c5e:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003c60:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003c62:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10003c64:	4299      	cmp	r1, r3
10003c66:	d005      	beq.n	10003c74 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c68:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003c6a:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c6c:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003c6e:	424b      	negs	r3, r1
10003c70:	4159      	adcs	r1, r3
10003c72:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003c74:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003c76:	236e      	movs	r3, #110	; 0x6e
10003c78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10003c7a:	404a      	eors	r2, r1
10003c7c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003c7e:	2380      	movs	r3, #128	; 0x80
10003c80:	015b      	lsls	r3, r3, #5
10003c82:	4303      	orrs	r3, r0
	return 0;
10003c84:	2000      	movs	r0, #0
10003c86:	601a      	str	r2, [r3, #0]
}
10003c88:	bd10      	pop	{r4, pc}
		return -EINVAL;
10003c8a:	2016      	movs	r0, #22
10003c8c:	4240      	negs	r0, r0
10003c8e:	e7fb      	b.n	10003c88 <uart_rpi_set_format.isra.0+0x4c>
10003c90:	100066d6 	.word	0x100066d6

10003c94 <uart_rpi_init>:
{
10003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10003c96:	6845      	ldr	r5, [r0, #4]
{
10003c98:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10003c9a:	682b      	ldr	r3, [r5, #0]
{
10003c9c:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10003c9e:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10003ca0:	2100      	movs	r1, #0
10003ca2:	68a8      	ldr	r0, [r5, #8]
10003ca4:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10003ca6:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10003ca8:	9301      	str	r3, [sp, #4]
10003caa:	f001 fd5a 	bl	10005762 <pinctrl_lookup_state>
	if (ret < 0) {
10003cae:	2800      	cmp	r0, #0
10003cb0:	db23      	blt.n	10003cfa <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10003cb2:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003cb4:	2200      	movs	r2, #0
10003cb6:	7919      	ldrb	r1, [r3, #4]
10003cb8:	6818      	ldr	r0, [r3, #0]
10003cba:	f001 fd65 	bl	10005788 <pinctrl_configure_pins>
	if (ret < 0) {
10003cbe:	2800      	cmp	r0, #0
10003cc0:	db1b      	blt.n	10003cfa <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10003cc2:	6831      	ldr	r1, [r6, #0]
10003cc4:	9801      	ldr	r0, [sp, #4]
10003cc6:	f000 fb33 	bl	10004330 <uart_init>
	if (baudrate == 0) {
10003cca:	2800      	cmp	r0, #0
10003ccc:	d017      	beq.n	10003cfe <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10003cce:	4b0d      	ldr	r3, [pc, #52]	; (10003d04 <uart_rpi_init+0x70>)
10003cd0:	6030      	str	r0, [r6, #0]
10003cd2:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10003cd4:	2201      	movs	r2, #1
10003cd6:	2303      	movs	r3, #3
10003cd8:	2100      	movs	r1, #0
10003cda:	6860      	ldr	r0, [r4, #4]
10003cdc:	f7ff ffae 	bl	10003c3c <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10003ce0:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003ce2:	23c0      	movs	r3, #192	; 0xc0
10003ce4:	322c      	adds	r2, #44	; 0x2c
10003ce6:	019b      	lsls	r3, r3, #6
10003ce8:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10003cea:	2600      	movs	r6, #0
10003cec:	2210      	movs	r2, #16
10003cee:	601a      	str	r2, [r3, #0]
10003cf0:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10003cf2:	0020      	movs	r0, r4
10003cf4:	696b      	ldr	r3, [r5, #20]
10003cf6:	4798      	blx	r3
	return 0;
10003cf8:	0030      	movs	r0, r6
}
10003cfa:	b005      	add	sp, #20
10003cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10003cfe:	2016      	movs	r0, #22
10003d00:	4240      	negs	r0, r0
10003d02:	e7fa      	b.n	10003cfa <uart_rpi_init+0x66>
10003d04:	00030100 	.word	0x00030100

10003d08 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10003d08:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10003d0a:	4b0a      	ldr	r3, [pc, #40]	; (10003d34 <elapsed+0x2c>)
10003d0c:	4a0a      	ldr	r2, [pc, #40]	; (10003d38 <elapsed+0x30>)
10003d0e:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10003d10:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10003d12:	4d0a      	ldr	r5, [pc, #40]	; (10003d3c <elapsed+0x34>)
10003d14:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10003d16:	03c9      	lsls	r1, r1, #15
10003d18:	d401      	bmi.n	10003d1e <elapsed+0x16>
	    || (val1 < val2)) {
10003d1a:	42a0      	cmp	r0, r4
10003d1c:	d204      	bcs.n	10003d28 <elapsed+0x20>
		overflow_cyc += last_load;
10003d1e:	6811      	ldr	r1, [r2, #0]
10003d20:	6828      	ldr	r0, [r5, #0]
10003d22:	1809      	adds	r1, r1, r0
10003d24:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10003d26:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10003d28:	682b      	ldr	r3, [r5, #0]
10003d2a:	6810      	ldr	r0, [r2, #0]
10003d2c:	18c0      	adds	r0, r0, r3
10003d2e:	1b00      	subs	r0, r0, r4
}
10003d30:	bd30      	pop	{r4, r5, pc}
10003d32:	46c0      	nop			; (mov r8, r8)
10003d34:	e000e010 	.word	0xe000e010
10003d38:	2000022c 	.word	0x2000022c
10003d3c:	20000238 	.word	0x20000238

10003d40 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10003d40:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003d42:	4a09      	ldr	r2, [pc, #36]	; (10003d68 <sys_clock_driver_init+0x28>)
10003d44:	6a13      	ldr	r3, [r2, #32]
10003d46:	021b      	lsls	r3, r3, #8
10003d48:	0a1b      	lsrs	r3, r3, #8
10003d4a:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10003d4c:	4b07      	ldr	r3, [pc, #28]	; (10003d6c <sys_clock_driver_init+0x2c>)
10003d4e:	4a08      	ldr	r2, [pc, #32]	; (10003d70 <sys_clock_driver_init+0x30>)
10003d50:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10003d52:	4b08      	ldr	r3, [pc, #32]	; (10003d74 <sys_clock_driver_init+0x34>)
10003d54:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10003d56:	4b08      	ldr	r3, [pc, #32]	; (10003d78 <sys_clock_driver_init+0x38>)
10003d58:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10003d5a:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10003d5c:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10003d5e:	6819      	ldr	r1, [r3, #0]
10003d60:	430a      	orrs	r2, r1
10003d62:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10003d64:	4770      	bx	lr
10003d66:	46c0      	nop			; (mov r8, r8)
10003d68:	e000ed00 	.word	0xe000ed00
10003d6c:	20000238 	.word	0x20000238
10003d70:	000030d3 	.word	0x000030d3
10003d74:	2000022c 	.word	0x2000022c
10003d78:	e000e010 	.word	0xe000e010

10003d7c <sys_clock_isr>:
{
10003d7c:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10003d7e:	f7ff ffc3 	bl	10003d08 <elapsed>
	cycle_count += overflow_cyc;
10003d82:	4b0b      	ldr	r3, [pc, #44]	; (10003db0 <sys_clock_isr+0x34>)
10003d84:	4a0b      	ldr	r2, [pc, #44]	; (10003db4 <sys_clock_isr+0x38>)
10003d86:	6818      	ldr	r0, [r3, #0]
10003d88:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003d8a:	4c0b      	ldr	r4, [pc, #44]	; (10003db8 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10003d8c:	1840      	adds	r0, r0, r1
10003d8e:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10003d90:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003d92:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10003d94:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003d96:	4909      	ldr	r1, [pc, #36]	; (10003dbc <sys_clock_isr+0x40>)
10003d98:	1b40      	subs	r0, r0, r5
10003d9a:	f7fc fa19 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10003d9e:	4b07      	ldr	r3, [pc, #28]	; (10003dbc <sys_clock_isr+0x40>)
10003da0:	4343      	muls	r3, r0
10003da2:	195b      	adds	r3, r3, r5
10003da4:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10003da6:	f001 f8dd 	bl	10004f64 <sys_clock_announce>
	z_arm_int_exit();
10003daa:	f7ff fb23 	bl	100033f4 <z_arm_exc_exit>
}
10003dae:	bd70      	pop	{r4, r5, r6, pc}
10003db0:	2000022c 	.word	0x2000022c
10003db4:	20000234 	.word	0x20000234
10003db8:	20000230 	.word	0x20000230
10003dbc:	000030d4 	.word	0x000030d4

10003dc0 <sys_clock_set_timeout>:
{
10003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003dc2:	4d32      	ldr	r5, [pc, #200]	; (10003e8c <sys_clock_set_timeout+0xcc>)
10003dc4:	4f32      	ldr	r7, [pc, #200]	; (10003e90 <sys_clock_set_timeout+0xd0>)
10003dc6:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10003dc8:	2900      	cmp	r1, #0
10003dca:	d054      	beq.n	10003e76 <sys_clock_set_timeout+0xb6>
10003dcc:	1c43      	adds	r3, r0, #1
10003dce:	d108      	bne.n	10003de2 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10003dd0:	2201      	movs	r2, #1
10003dd2:	682b      	ldr	r3, [r5, #0]
10003dd4:	4393      	bics	r3, r2
10003dd6:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10003dd8:	23ff      	movs	r3, #255	; 0xff
10003dda:	061b      	lsls	r3, r3, #24
10003ddc:	603b      	str	r3, [r7, #0]
}
10003dde:	b005      	add	sp, #20
10003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10003de2:	683b      	ldr	r3, [r7, #0]
10003de4:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10003de6:	2600      	movs	r6, #0
10003de8:	2801      	cmp	r0, #1
10003dea:	dd04      	ble.n	10003df6 <sys_clock_set_timeout+0x36>
10003dec:	4b29      	ldr	r3, [pc, #164]	; (10003e94 <sys_clock_set_timeout+0xd4>)
10003dee:	001e      	movs	r6, r3
10003df0:	4298      	cmp	r0, r3
10003df2:	dc00      	bgt.n	10003df6 <sys_clock_set_timeout+0x36>
10003df4:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10003df6:	f3ef 8310 	mrs	r3, PRIMASK
10003dfa:	b672      	cpsid	i
10003dfc:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10003dfe:	f7ff ff83 	bl	10003d08 <elapsed>
	overflow_cyc = 0U;
10003e02:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10003e04:	68ab      	ldr	r3, [r5, #8]
10003e06:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10003e08:	4b23      	ldr	r3, [pc, #140]	; (10003e98 <sys_clock_set_timeout+0xd8>)
10003e0a:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10003e0c:	4b23      	ldr	r3, [pc, #140]	; (10003e9c <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10003e0e:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10003e10:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10003e12:	4b23      	ldr	r3, [pc, #140]	; (10003ea0 <sys_clock_set_timeout+0xe0>)
10003e14:	681b      	ldr	r3, [r3, #0]
10003e16:	9300      	str	r3, [sp, #0]
10003e18:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10003e1a:	4290      	cmp	r0, r2
10003e1c:	db31      	blt.n	10003e82 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10003e1e:	4b21      	ldr	r3, [pc, #132]	; (10003ea4 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003e20:	4a21      	ldr	r2, [pc, #132]	; (10003ea8 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10003e22:	435e      	muls	r6, r3
		delay += unannounced;
10003e24:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003e26:	0019      	movs	r1, r3
10003e28:	1880      	adds	r0, r0, r2
10003e2a:	f7fc f9d1 	bl	100001d0 <__udivsi3>
		delay =
10003e2e:	4b1d      	ldr	r3, [pc, #116]	; (10003ea4 <sys_clock_set_timeout+0xe4>)
10003e30:	4358      	muls	r0, r3
		delay -= unannounced;
10003e32:	9b00      	ldr	r3, [sp, #0]
10003e34:	1b1b      	subs	r3, r3, r4
10003e36:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10003e38:	2380      	movs	r3, #128	; 0x80
10003e3a:	00db      	lsls	r3, r3, #3
10003e3c:	4298      	cmp	r0, r3
10003e3e:	d923      	bls.n	10003e88 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10003e40:	4b1a      	ldr	r3, [pc, #104]	; (10003eac <sys_clock_set_timeout+0xec>)
10003e42:	4298      	cmp	r0, r3
10003e44:	d820      	bhi.n	10003e88 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10003e46:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10003e48:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10003e4a:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10003e4c:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10003e4e:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10003e50:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10003e52:	9b02      	ldr	r3, [sp, #8]
10003e54:	9802      	ldr	r0, [sp, #8]
10003e56:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10003e58:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10003e5a:	4288      	cmp	r0, r1
10003e5c:	d202      	bcs.n	10003e64 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10003e5e:	9a01      	ldr	r2, [sp, #4]
10003e60:	189b      	adds	r3, r3, r2
10003e62:	191a      	adds	r2, r3, r4
10003e64:	4b0c      	ldr	r3, [pc, #48]	; (10003e98 <sys_clock_set_timeout+0xd8>)
10003e66:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10003e68:	9b03      	ldr	r3, [sp, #12]
10003e6a:	2b00      	cmp	r3, #0
10003e6c:	d1b7      	bne.n	10003dde <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10003e6e:	b662      	cpsie	i
10003e70:	f3bf 8f6f 	isb	sy
10003e74:	e7b3      	b.n	10003dde <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10003e76:	683b      	ldr	r3, [r7, #0]
10003e78:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10003e7a:	1c43      	adds	r3, r0, #1
10003e7c:	d1b3      	bne.n	10003de6 <sys_clock_set_timeout+0x26>
10003e7e:	4805      	ldr	r0, [pc, #20]	; (10003e94 <sys_clock_set_timeout+0xd4>)
10003e80:	e7b8      	b.n	10003df4 <sys_clock_set_timeout+0x34>
10003e82:	2080      	movs	r0, #128	; 0x80
10003e84:	00c0      	lsls	r0, r0, #3
10003e86:	e7de      	b.n	10003e46 <sys_clock_set_timeout+0x86>
10003e88:	0018      	movs	r0, r3
10003e8a:	e7dc      	b.n	10003e46 <sys_clock_set_timeout+0x86>
10003e8c:	e000e010 	.word	0xe000e010
10003e90:	20000238 	.word	0x20000238
10003e94:	0000053d 	.word	0x0000053d
10003e98:	20000234 	.word	0x20000234
10003e9c:	2000022c 	.word	0x2000022c
10003ea0:	20000230 	.word	0x20000230
10003ea4:	000030d4 	.word	0x000030d4
10003ea8:	000030d3 	.word	0x000030d3
10003eac:	00ffc684 	.word	0x00ffc684

10003eb0 <sys_clock_elapsed>:
{
10003eb0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003eb2:	f3ef 8410 	mrs	r4, PRIMASK
10003eb6:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003eb8:	f7ff ff26 	bl	10003d08 <elapsed>
10003ebc:	4b07      	ldr	r3, [pc, #28]	; (10003edc <sys_clock_elapsed+0x2c>)
10003ebe:	4a08      	ldr	r2, [pc, #32]	; (10003ee0 <sys_clock_elapsed+0x30>)
10003ec0:	681b      	ldr	r3, [r3, #0]
10003ec2:	6812      	ldr	r2, [r2, #0]
10003ec4:	1a9b      	subs	r3, r3, r2
10003ec6:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10003ec8:	2c00      	cmp	r4, #0
10003eca:	d102      	bne.n	10003ed2 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10003ecc:	b662      	cpsie	i
10003ece:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10003ed2:	4904      	ldr	r1, [pc, #16]	; (10003ee4 <sys_clock_elapsed+0x34>)
10003ed4:	f7fc f97c 	bl	100001d0 <__udivsi3>
}
10003ed8:	bd10      	pop	{r4, pc}
10003eda:	46c0      	nop			; (mov r8, r8)
10003edc:	20000234 	.word	0x20000234
10003ee0:	20000230 	.word	0x20000230
10003ee4:	000030d4 	.word	0x000030d4

10003ee8 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003eea:	b085      	sub	sp, #20
10003eec:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10003eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003ef0:	0005      	movs	r5, r0
10003ef2:	000f      	movs	r7, r1
        return false;
10003ef4:	2000      	movs	r0, #0
    if (freq > src_freq)
10003ef6:	429a      	cmp	r2, r3
10003ef8:	d863      	bhi.n	10003fc2 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003efa:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003efc:	0e1a      	lsrs	r2, r3, #24
10003efe:	021b      	lsls	r3, r3, #8
10003f00:	9203      	str	r2, [sp, #12]
10003f02:	9302      	str	r3, [sp, #8]
10003f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003f06:	0003      	movs	r3, r0
10003f08:	9903      	ldr	r1, [sp, #12]
10003f0a:	9802      	ldr	r0, [sp, #8]
10003f0c:	f7fc fa24 	bl	10000358 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003f10:	436c      	muls	r4, r5
10003f12:	4b2d      	ldr	r3, [pc, #180]	; (10003fc8 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003f14:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003f16:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10003f18:	6863      	ldr	r3, [r4, #4]
10003f1a:	4283      	cmp	r3, r0
10003f1c:	d200      	bcs.n	10003f20 <clock_configure+0x38>
        clock->div = div;
10003f1e:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10003f20:	1f2b      	subs	r3, r5, #4
10003f22:	b2db      	uxtb	r3, r3
10003f24:	9300      	str	r3, [sp, #0]
10003f26:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10003f28:	9a00      	ldr	r2, [sp, #0]
10003f2a:	019b      	lsls	r3, r3, #6
10003f2c:	4323      	orrs	r3, r4
10003f2e:	2a01      	cmp	r2, #1
10003f30:	d81b      	bhi.n	10003f6a <clock_configure+0x82>
10003f32:	2f01      	cmp	r7, #1
10003f34:	d119      	bne.n	10003f6a <clock_configure+0x82>
10003f36:	2203      	movs	r2, #3
10003f38:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10003f3a:	68a3      	ldr	r3, [r4, #8]
10003f3c:	423b      	tst	r3, r7
10003f3e:	d0fc      	beq.n	10003f3a <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10003f40:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003f42:	6823      	ldr	r3, [r4, #0]
10003f44:	0152      	lsls	r2, r2, #5
10003f46:	405a      	eors	r2, r3
10003f48:	23e0      	movs	r3, #224	; 0xe0
10003f4a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003f4c:	2380      	movs	r3, #128	; 0x80
10003f4e:	015b      	lsls	r3, r3, #5
10003f50:	4323      	orrs	r3, r4
10003f52:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003f54:	2103      	movs	r1, #3
10003f56:	6822      	ldr	r2, [r4, #0]
10003f58:	407a      	eors	r2, r7
10003f5a:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003f5c:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10003f5e:	2301      	movs	r3, #1
10003f60:	40bb      	lsls	r3, r7
10003f62:	68a2      	ldr	r2, [r4, #8]
10003f64:	4213      	tst	r3, r2
10003f66:	d0fc      	beq.n	10003f62 <clock_configure+0x7a>
10003f68:	e01a      	b.n	10003fa0 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003f6a:	2280      	movs	r2, #128	; 0x80
10003f6c:	0112      	lsls	r2, r2, #4
10003f6e:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10003f70:	4b16      	ldr	r3, [pc, #88]	; (10003fcc <clock_configure+0xe4>)
10003f72:	00aa      	lsls	r2, r5, #2
10003f74:	58d1      	ldr	r1, [r2, r3]
10003f76:	2900      	cmp	r1, #0
10003f78:	d005      	beq.n	10003f86 <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003f7a:	6958      	ldr	r0, [r3, #20]
10003f7c:	f7fc f928 	bl	100001d0 <__udivsi3>
10003f80:	3001      	adds	r0, #1
            asm volatile (
10003f82:	3801      	subs	r0, #1
10003f84:	d1fd      	bne.n	10003f82 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003f86:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003f88:	6823      	ldr	r3, [r4, #0]
10003f8a:	0152      	lsls	r2, r2, #5
10003f8c:	405a      	eors	r2, r3
10003f8e:	23e0      	movs	r3, #224	; 0xe0
10003f90:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003f92:	2380      	movs	r3, #128	; 0x80
10003f94:	015b      	lsls	r3, r3, #5
10003f96:	4323      	orrs	r3, r4
10003f98:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10003f9a:	9a00      	ldr	r2, [sp, #0]
10003f9c:	2a01      	cmp	r2, #1
10003f9e:	d9d9      	bls.n	10003f54 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003fa0:	2380      	movs	r3, #128	; 0x80
10003fa2:	2280      	movs	r2, #128	; 0x80
10003fa4:	019b      	lsls	r3, r3, #6
10003fa6:	4323      	orrs	r3, r4
10003fa8:	0112      	lsls	r2, r2, #4
10003faa:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003fac:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10003fae:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003fb0:	0032      	movs	r2, r6
10003fb2:	2300      	movs	r3, #0
10003fb4:	9903      	ldr	r1, [sp, #12]
10003fb6:	f7fc f9cf 	bl	10000358 <__aeabi_uldivmod>
10003fba:	4c04      	ldr	r4, [pc, #16]	; (10003fcc <clock_configure+0xe4>)
10003fbc:	00ad      	lsls	r5, r5, #2
10003fbe:	5160      	str	r0, [r4, r5]
10003fc0:	2001      	movs	r0, #1

    return true;
}
10003fc2:	b005      	add	sp, #20
10003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003fc6:	46c0      	nop			; (mov r8, r8)
10003fc8:	40008000 	.word	0x40008000
10003fcc:	2000023c 	.word	0x2000023c

10003fd0 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10003fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10003fd2:	200c      	movs	r0, #12
10003fd4:	f000 f8de 	bl	10004194 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10003fd8:	f000 f8e4 	bl	100041a4 <running_on_fpga>
10003fdc:	2800      	cmp	r0, #0
10003fde:	d00a      	beq.n	10003ff6 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003fe0:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10003fe2:	4a2c      	ldr	r2, [pc, #176]	; (10004094 <clocks_init+0xc4>)
10003fe4:	482c      	ldr	r0, [pc, #176]	; (10004098 <clocks_init+0xc8>)
10003fe6:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10003fe8:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10003fea:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10003fec:	2b0a      	cmp	r3, #10
10003fee:	d1fa      	bne.n	10003fe6 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10003ff0:	4b2a      	ldr	r3, [pc, #168]	; (1000409c <clocks_init+0xcc>)
10003ff2:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10003ff4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
10003ff6:	4d2a      	ldr	r5, [pc, #168]	; (100040a0 <clocks_init+0xd0>)
10003ff8:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10003ffa:	f000 f8b7 	bl	1000416c <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003ffe:	2201      	movs	r2, #1
10004000:	4b28      	ldr	r3, [pc, #160]	; (100040a4 <clocks_init+0xd4>)
10004002:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10004004:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10004006:	2b01      	cmp	r3, #1
10004008:	d1fc      	bne.n	10004004 <clocks_init+0x34>
1000400a:	2203      	movs	r2, #3
1000400c:	4b26      	ldr	r3, [pc, #152]	; (100040a8 <clocks_init+0xd8>)
1000400e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10004010:	6bac      	ldr	r4, [r5, #56]	; 0x38
10004012:	2c01      	cmp	r4, #1
10004014:	d1fc      	bne.n	10004010 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10004016:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10004018:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000401a:	0021      	movs	r1, r4
1000401c:	9500      	str	r5, [sp, #0]
1000401e:	2306      	movs	r3, #6
10004020:	4a22      	ldr	r2, [pc, #136]	; (100040ac <clocks_init+0xdc>)
10004022:	4823      	ldr	r0, [pc, #140]	; (100040b0 <clocks_init+0xe0>)
10004024:	f000 f854 	bl	100040d0 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10004028:	0033      	movs	r3, r6
1000402a:	0021      	movs	r1, r4
1000402c:	4a21      	ldr	r2, [pc, #132]	; (100040b4 <clocks_init+0xe4>)
1000402e:	4822      	ldr	r0, [pc, #136]	; (100040b8 <clocks_init+0xe8>)
10004030:	9600      	str	r6, [sp, #0]
10004032:	f000 f84d 	bl	100040d0 <pll_init>
    clock_configure(clk_ref,
10004036:	4b21      	ldr	r3, [pc, #132]	; (100040bc <clocks_init+0xec>)
10004038:	0029      	movs	r1, r5
    clock_configure(clk_sys,
1000403a:	4d21      	ldr	r5, [pc, #132]	; (100040c0 <clocks_init+0xf0>)
    clock_configure(clk_ref,
1000403c:	9300      	str	r3, [sp, #0]
1000403e:	2200      	movs	r2, #0
10004040:	2004      	movs	r0, #4
10004042:	f7ff ff51 	bl	10003ee8 <clock_configure>
    clock_configure(clk_sys,
10004046:	002b      	movs	r3, r5
10004048:	0021      	movs	r1, r4
1000404a:	2200      	movs	r2, #0
1000404c:	0030      	movs	r0, r6
1000404e:	9500      	str	r5, [sp, #0]
10004050:	f7ff ff4a 	bl	10003ee8 <clock_configure>
    clock_configure(clk_usb,
10004054:	2200      	movs	r2, #0
10004056:	4c10      	ldr	r4, [pc, #64]	; (10004098 <clocks_init+0xc8>)
10004058:	0011      	movs	r1, r2
1000405a:	0023      	movs	r3, r4
1000405c:	9400      	str	r4, [sp, #0]
1000405e:	2007      	movs	r0, #7
10004060:	f7ff ff42 	bl	10003ee8 <clock_configure>
    clock_configure(clk_adc,
10004064:	2200      	movs	r2, #0
10004066:	0023      	movs	r3, r4
10004068:	0011      	movs	r1, r2
1000406a:	9400      	str	r4, [sp, #0]
1000406c:	2008      	movs	r0, #8
1000406e:	f7ff ff3b 	bl	10003ee8 <clock_configure>
    clock_configure(clk_rtc,
10004072:	2200      	movs	r2, #0
10004074:	4b09      	ldr	r3, [pc, #36]	; (1000409c <clocks_init+0xcc>)
10004076:	0011      	movs	r1, r2
10004078:	9300      	str	r3, [sp, #0]
1000407a:	2009      	movs	r0, #9
1000407c:	0023      	movs	r3, r4
1000407e:	f7ff ff33 	bl	10003ee8 <clock_configure>
    clock_configure(clk_peri,
10004082:	2200      	movs	r2, #0
10004084:	002b      	movs	r3, r5
10004086:	0011      	movs	r1, r2
10004088:	9500      	str	r5, [sp, #0]
1000408a:	2006      	movs	r0, #6
1000408c:	f7ff ff2c 	bl	10003ee8 <clock_configure>
10004090:	e7b0      	b.n	10003ff4 <clocks_init+0x24>
10004092:	46c0      	nop			; (mov r8, r8)
10004094:	2000023c 	.word	0x2000023c
10004098:	02dc6c00 	.word	0x02dc6c00
1000409c:	0000b71b 	.word	0x0000b71b
100040a0:	40008000 	.word	0x40008000
100040a4:	4000b03c 	.word	0x4000b03c
100040a8:	4000b030 	.word	0x4000b030
100040ac:	59682f00 	.word	0x59682f00
100040b0:	40028000 	.word	0x40028000
100040b4:	47868c00 	.word	0x47868c00
100040b8:	4002c000 	.word	0x4002c000
100040bc:	00b71b00 	.word	0x00b71b00
100040c0:	07735940 	.word	0x07735940

100040c4 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100040c4:	4b01      	ldr	r3, [pc, #4]	; (100040cc <clock_get_hz+0x8>)
100040c6:	0080      	lsls	r0, r0, #2
100040c8:	58c0      	ldr	r0, [r0, r3]
}
100040ca:	4770      	bx	lr
100040cc:	2000023c 	.word	0x2000023c

100040d0 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100040d2:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100040d4:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100040d6:	0017      	movs	r7, r2
100040d8:	001e      	movs	r6, r3
100040da:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100040dc:	f7fc f878 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100040e0:	491d      	ldr	r1, [pc, #116]	; (10004158 <pll_init+0x88>)
100040e2:	4341      	muls	r1, r0
100040e4:	0038      	movs	r0, r7
100040e6:	f7fc f873 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100040ea:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100040ec:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100040ee:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100040f0:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100040f2:	6822      	ldr	r2, [r4, #0]
100040f4:	2a00      	cmp	r2, #0
100040f6:	da0f      	bge.n	10004118 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100040f8:	213f      	movs	r1, #63	; 0x3f
100040fa:	6822      	ldr	r2, [r4, #0]
100040fc:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100040fe:	42aa      	cmp	r2, r5
10004100:	d10a      	bne.n	10004118 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10004102:	68a2      	ldr	r2, [r4, #8]
10004104:	0512      	lsls	r2, r2, #20
10004106:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10004108:	4282      	cmp	r2, r0
1000410a:	d105      	bne.n	10004118 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
1000410c:	21ee      	movs	r1, #238	; 0xee
1000410e:	68e2      	ldr	r2, [r4, #12]
10004110:	02c9      	lsls	r1, r1, #11
10004112:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10004114:	429a      	cmp	r2, r3
10004116:	d01b      	beq.n	10004150 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10004118:	4a10      	ldr	r2, [pc, #64]	; (1000415c <pll_init+0x8c>)
1000411a:	4294      	cmp	r4, r2
1000411c:	d019      	beq.n	10004152 <pll_init+0x82>
1000411e:	2280      	movs	r2, #128	; 0x80
10004120:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004122:	490f      	ldr	r1, [pc, #60]	; (10004160 <pll_init+0x90>)
10004124:	4e0f      	ldr	r6, [pc, #60]	; (10004164 <pll_init+0x94>)
10004126:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004128:	490f      	ldr	r1, [pc, #60]	; (10004168 <pll_init+0x98>)
1000412a:	600a      	str	r2, [r1, #0]
1000412c:	0017      	movs	r7, r2
1000412e:	68b1      	ldr	r1, [r6, #8]
10004130:	438f      	bics	r7, r1
10004132:	d1fb      	bne.n	1000412c <pll_init+0x5c>
10004134:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10004136:	1d21      	adds	r1, r4, #4
10004138:	0192      	lsls	r2, r2, #6
1000413a:	430a      	orrs	r2, r1
1000413c:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
1000413e:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10004140:	60a0      	str	r0, [r4, #8]
10004142:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10004144:	6821      	ldr	r1, [r4, #0]
10004146:	2900      	cmp	r1, #0
10004148:	dafc      	bge.n	10004144 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
1000414a:	60e3      	str	r3, [r4, #12]
1000414c:	2308      	movs	r3, #8
1000414e:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10004152:	2280      	movs	r2, #128	; 0x80
10004154:	0192      	lsls	r2, r2, #6
10004156:	e7e4      	b.n	10004122 <pll_init+0x52>
10004158:	000f4240 	.word	0x000f4240
1000415c:	4002c000 	.word	0x4002c000
10004160:	4000e000 	.word	0x4000e000
10004164:	4000c000 	.word	0x4000c000
10004168:	4000f000 	.word	0x4000f000

1000416c <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
1000416c:	22aa      	movs	r2, #170	; 0xaa
1000416e:	4b06      	ldr	r3, [pc, #24]	; (10004188 <xosc_init+0x1c>)
10004170:	0112      	lsls	r2, r2, #4
10004172:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10004174:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004176:	4905      	ldr	r1, [pc, #20]	; (1000418c <xosc_init+0x20>)
10004178:	60da      	str	r2, [r3, #12]
1000417a:	4a05      	ldr	r2, [pc, #20]	; (10004190 <xosc_init+0x24>)
1000417c:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000417e:	685a      	ldr	r2, [r3, #4]
10004180:	2a00      	cmp	r2, #0
10004182:	dafc      	bge.n	1000417e <xosc_init+0x12>
}
10004184:	4770      	bx	lr
10004186:	46c0      	nop			; (mov r8, r8)
10004188:	40024000 	.word	0x40024000
1000418c:	00fab000 	.word	0x00fab000
10004190:	40026000 	.word	0x40026000

10004194 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10004194:	2380      	movs	r3, #128	; 0x80
10004196:	4a02      	ldr	r2, [pc, #8]	; (100041a0 <watchdog_start_tick+0xc>)
10004198:	009b      	lsls	r3, r3, #2
1000419a:	4303      	orrs	r3, r0
1000419c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000419e:	4770      	bx	lr
100041a0:	40058000 	.word	0x40058000

100041a4 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100041a4:	4b02      	ldr	r3, [pc, #8]	; (100041b0 <running_on_fpga+0xc>)
100041a6:	6818      	ldr	r0, [r3, #0]
100041a8:	0780      	lsls	r0, r0, #30
100041aa:	0fc0      	lsrs	r0, r0, #31
}
100041ac:	4770      	bx	lr
100041ae:	46c0      	nop			; (mov r8, r8)
100041b0:	4006c000 	.word	0x4006c000

100041b4 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100041b4:	4b08      	ldr	r3, [pc, #32]	; (100041d8 <gpio_set_function+0x24>)
100041b6:	0082      	lsls	r2, r0, #2
100041b8:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100041ba:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100041bc:	b510      	push	{r4, lr}
100041be:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100041c0:	00c0      	lsls	r0, r0, #3
100041c2:	4063      	eors	r3, r4
100041c4:	24c0      	movs	r4, #192	; 0xc0
100041c6:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100041c8:	2480      	movs	r4, #128	; 0x80
100041ca:	0164      	lsls	r4, r4, #5
100041cc:	4322      	orrs	r2, r4
100041ce:	6013      	str	r3, [r2, #0]
100041d0:	4b02      	ldr	r3, [pc, #8]	; (100041dc <gpio_set_function+0x28>)
100041d2:	18c0      	adds	r0, r0, r3
100041d4:	6041      	str	r1, [r0, #4]
}
100041d6:	bd10      	pop	{r4, pc}
100041d8:	4001c004 	.word	0x4001c004
100041dc:	40014000 	.word	0x40014000

100041e0 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
100041e0:	4b07      	ldr	r3, [pc, #28]	; (10004200 <gpio_set_pulls+0x20>)
100041e2:	0080      	lsls	r0, r0, #2
100041e4:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100041e6:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100041e8:	00c9      	lsls	r1, r1, #3
100041ea:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100041ec:	430a      	orrs	r2, r1
100041ee:	405a      	eors	r2, r3
100041f0:	230c      	movs	r3, #12
100041f2:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100041f4:	2380      	movs	r3, #128	; 0x80
100041f6:	015b      	lsls	r3, r3, #5
100041f8:	4303      	orrs	r3, r0
100041fa:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100041fc:	4770      	bx	lr
100041fe:	46c0      	nop			; (mov r8, r8)
10004200:	4001c004 	.word	0x4001c004

10004204 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10004204:	4b05      	ldr	r3, [pc, #20]	; (1000421c <gpio_set_input_hysteresis_enabled+0x18>)
10004206:	0080      	lsls	r0, r0, #2
10004208:	18c0      	adds	r0, r0, r3
1000420a:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000420c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000420e:	2900      	cmp	r1, #0
10004210:	d100      	bne.n	10004214 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004212:	23c0      	movs	r3, #192	; 0xc0
10004214:	019b      	lsls	r3, r3, #6
10004216:	4303      	orrs	r3, r0
10004218:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000421a:	4770      	bx	lr
1000421c:	4001c004 	.word	0x4001c004

10004220 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10004220:	4b05      	ldr	r3, [pc, #20]	; (10004238 <gpio_set_slew_rate+0x18>)
10004222:	0080      	lsls	r0, r0, #2
10004224:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004226:	6803      	ldr	r3, [r0, #0]
10004228:	4059      	eors	r1, r3
1000422a:	2301      	movs	r3, #1
1000422c:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000422e:	2380      	movs	r3, #128	; 0x80
10004230:	015b      	lsls	r3, r3, #5
10004232:	4303      	orrs	r3, r0
10004234:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10004236:	4770      	bx	lr
10004238:	4001c004 	.word	0x4001c004

1000423c <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
1000423c:	4b06      	ldr	r3, [pc, #24]	; (10004258 <gpio_set_drive_strength+0x1c>)
1000423e:	0080      	lsls	r0, r0, #2
10004240:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004242:	6803      	ldr	r3, [r0, #0]
10004244:	0109      	lsls	r1, r1, #4
10004246:	4059      	eors	r1, r3
10004248:	2330      	movs	r3, #48	; 0x30
1000424a:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000424c:	2380      	movs	r3, #128	; 0x80
1000424e:	015b      	lsls	r3, r3, #5
10004250:	4303      	orrs	r3, r0
10004252:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10004254:	4770      	bx	lr
10004256:	46c0      	nop			; (mov r8, r8)
10004258:	4001c004 	.word	0x4001c004

1000425c <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
1000425c:	2207      	movs	r2, #7
1000425e:	08c3      	lsrs	r3, r0, #3
10004260:	4010      	ands	r0, r2
10004262:	0080      	lsls	r0, r0, #2
10004264:	4081      	lsls	r1, r0
10004266:	4a02      	ldr	r2, [pc, #8]	; (10004270 <gpio_acknowledge_irq+0x14>)
10004268:	333c      	adds	r3, #60	; 0x3c
1000426a:	009b      	lsls	r3, r3, #2
1000426c:	5099      	str	r1, [r3, r2]
}
1000426e:	4770      	bx	lr
10004270:	40014000 	.word	0x40014000

10004274 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10004276:	23d0      	movs	r3, #208	; 0xd0
10004278:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000427a:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000427c:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000427e:	4263      	negs	r3, r4
10004280:	415c      	adcs	r4, r3
10004282:	232f      	movs	r3, #47	; 0x2f
10004284:	4264      	negs	r4, r4
10004286:	439c      	bics	r4, r3
10004288:	4b0a      	ldr	r3, [pc, #40]	; (100042b4 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000428a:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000428c:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000428e:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10004290:	f7ff ffe4 	bl	1000425c <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10004294:	2307      	movs	r3, #7
10004296:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10004298:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000429a:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000429c:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
1000429e:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100042a0:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042a2:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100042a4:	2e00      	cmp	r6, #0
100042a6:	d100      	bne.n	100042aa <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100042a8:	23c0      	movs	r3, #192	; 0xc0
100042aa:	019b      	lsls	r3, r3, #6
100042ac:	4323      	orrs	r3, r4
100042ae:	601f      	str	r7, [r3, #0]
}
100042b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100042b2:	46c0      	nop			; (mov r8, r8)
100042b4:	40014130 	.word	0x40014130

100042b8 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100042b8:	4b05      	ldr	r3, [pc, #20]	; (100042d0 <gpio_set_input_enabled+0x18>)
100042ba:	0080      	lsls	r0, r0, #2
100042bc:	18c0      	adds	r0, r0, r3
100042be:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042c0:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100042c2:	2900      	cmp	r1, #0
100042c4:	d100      	bne.n	100042c8 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100042c6:	23c0      	movs	r3, #192	; 0xc0
100042c8:	019b      	lsls	r3, r3, #6
100042ca:	4303      	orrs	r3, r0
100042cc:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100042ce:	4770      	bx	lr
100042d0:	4001c004 	.word	0x4001c004

100042d4 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100042d4:	b570      	push	{r4, r5, r6, lr}
100042d6:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100042d8:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100042da:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100042dc:	f7ff fef2 	bl	100040c4 <clock_get_hz>
100042e0:	0021      	movs	r1, r4
100042e2:	00c0      	lsls	r0, r0, #3
100042e4:	f7fb ff74 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100042e8:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100042ea:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100042ec:	d007      	beq.n	100042fe <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100042ee:	4b0e      	ldr	r3, [pc, #56]	; (10004328 <uart_set_baudrate+0x54>)
100042f0:	429d      	cmp	r5, r3
100042f2:	d815      	bhi.n	10004320 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100042f4:	237f      	movs	r3, #127	; 0x7f
100042f6:	4018      	ands	r0, r3
100042f8:	1900      	adds	r0, r0, r4
100042fa:	002c      	movs	r4, r5
100042fc:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042fe:	2380      	movs	r3, #128	; 0x80
10004300:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10004302:	6274      	str	r4, [r6, #36]	; 0x24
10004304:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10004306:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10004308:	362c      	adds	r6, #44	; 0x2c
1000430a:	4333      	orrs	r3, r6
1000430c:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
1000430e:	2006      	movs	r0, #6
10004310:	f7ff fed8 	bl	100040c4 <clock_get_hz>
10004314:	01a1      	lsls	r1, r4, #6
10004316:	1949      	adds	r1, r1, r5
10004318:	0080      	lsls	r0, r0, #2
1000431a:	f7fb ff59 	bl	100001d0 <__udivsi3>
}
1000431e:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10004320:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10004322:	4c02      	ldr	r4, [pc, #8]	; (1000432c <uart_set_baudrate+0x58>)
10004324:	e7eb      	b.n	100042fe <uart_set_baudrate+0x2a>
10004326:	46c0      	nop			; (mov r8, r8)
10004328:	0000fffe 	.word	0x0000fffe
1000432c:	0000ffff 	.word	0x0000ffff

10004330 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10004330:	b570      	push	{r4, r5, r6, lr}
10004332:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10004334:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10004336:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10004338:	f7ff fec4 	bl	100040c4 <clock_get_hz>
1000433c:	2800      	cmp	r0, #0
1000433e:	d02e      	beq.n	1000439e <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10004340:	4b19      	ldr	r3, [pc, #100]	; (100043a8 <uart_init+0x78>)
10004342:	429c      	cmp	r4, r3
10004344:	d02c      	beq.n	100043a0 <uart_init+0x70>
10004346:	2380      	movs	r3, #128	; 0x80
10004348:	03db      	lsls	r3, r3, #15
1000434a:	4a18      	ldr	r2, [pc, #96]	; (100043ac <uart_init+0x7c>)
1000434c:	4918      	ldr	r1, [pc, #96]	; (100043b0 <uart_init+0x80>)
1000434e:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004350:	4a18      	ldr	r2, [pc, #96]	; (100043b4 <uart_init+0x84>)
10004352:	6013      	str	r3, [r2, #0]
10004354:	0018      	movs	r0, r3
10004356:	688a      	ldr	r2, [r1, #8]
10004358:	4390      	bics	r0, r2
1000435a:	d1fb      	bne.n	10004354 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
1000435c:	4b16      	ldr	r3, [pc, #88]	; (100043b8 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
1000435e:	4a17      	ldr	r2, [pc, #92]	; (100043bc <uart_init+0x8c>)
10004360:	18e3      	adds	r3, r4, r3
10004362:	4259      	negs	r1, r3
10004364:	414b      	adcs	r3, r1
10004366:	2180      	movs	r1, #128	; 0x80
10004368:	005b      	lsls	r3, r3, #1
1000436a:	0049      	lsls	r1, r1, #1
1000436c:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
1000436e:	0020      	movs	r0, r4
10004370:	0029      	movs	r1, r5
10004372:	f7ff ffaf 	bl	100042d4 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004376:	2360      	movs	r3, #96	; 0x60
10004378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000437a:	0021      	movs	r1, r4
1000437c:	4053      	eors	r3, r2
1000437e:	226e      	movs	r2, #110	; 0x6e
10004380:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004382:	2280      	movs	r2, #128	; 0x80
10004384:	312c      	adds	r1, #44	; 0x2c
10004386:	0152      	lsls	r2, r2, #5
10004388:	430a      	orrs	r2, r1
1000438a:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
1000438c:	4b0c      	ldr	r3, [pc, #48]	; (100043c0 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000438e:	2210      	movs	r2, #16
10004390:	6323      	str	r3, [r4, #48]	; 0x30
10004392:	2380      	movs	r3, #128	; 0x80
10004394:	019b      	lsls	r3, r3, #6
10004396:	430b      	orrs	r3, r1
10004398:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000439a:	2303      	movs	r3, #3
1000439c:	64a3      	str	r3, [r4, #72]	; 0x48
}
1000439e:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100043a0:	2380      	movs	r3, #128	; 0x80
100043a2:	041b      	lsls	r3, r3, #16
100043a4:	e7d1      	b.n	1000434a <uart_init+0x1a>
100043a6:	46c0      	nop			; (mov r8, r8)
100043a8:	40038000 	.word	0x40038000
100043ac:	4000e000 	.word	0x4000e000
100043b0:	4000c000 	.word	0x4000c000
100043b4:	4000f000 	.word	0x4000f000
100043b8:	bffc8000 	.word	0xbffc8000
100043bc:	20000294 	.word	0x20000294
100043c0:	00000301 	.word	0x00000301

100043c4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100043c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100043c6:	0004      	movs	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
100043c8:	f7fe fc2e 	bl	10002c28 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
100043cc:	2000      	movs	r0, #0
100043ce:	4b06      	ldr	r3, [pc, #24]	; (100043e8 <k_sys_fatal_error_handler+0x24>)
100043d0:	9001      	str	r0, [sp, #4]
100043d2:	9302      	str	r3, [sp, #8]
100043d4:	9000      	str	r0, [sp, #0]
100043d6:	0003      	movs	r3, r0
100043d8:	2201      	movs	r2, #1
100043da:	4904      	ldr	r1, [pc, #16]	; (100043ec <k_sys_fatal_error_handler+0x28>)
100043dc:	f001 fb83 	bl	10005ae6 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
100043e0:	0020      	movs	r0, r4
100043e2:	f001 fb8f 	bl	10005b04 <arch_system_halt>
100043e6:	46c0      	nop			; (mov r8, r8)
100043e8:	100066e7 	.word	0x100066e7
100043ec:	10005f4c 	.word	0x10005f4c

100043f0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100043f2:	0006      	movs	r6, r0
100043f4:	000f      	movs	r7, r1
100043f6:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile("mrs %0, PRIMASK;"
100043f8:	f3ef 8310 	mrs	r3, PRIMASK
100043fc:	b672      	cpsid	i
100043fe:	9307      	str	r3, [sp, #28]
	return z_impl_z_current_get();
10004400:	f000 fc7c 	bl	10004cfc <z_impl_z_current_get>
10004404:	4b26      	ldr	r3, [pc, #152]	; (100044a0 <z_fatal_error+0xb0>)
10004406:	0005      	movs	r5, r0
	switch (reason) {
10004408:	2e04      	cmp	r6, #4
1000440a:	d802      	bhi.n	10004412 <z_fatal_error+0x22>
1000440c:	4b25      	ldr	r3, [pc, #148]	; (100044a4 <z_fatal_error+0xb4>)
1000440e:	00b2      	lsls	r2, r6, #2
10004410:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
10004412:	2400      	movs	r4, #0
10004414:	4a24      	ldr	r2, [pc, #144]	; (100044a8 <z_fatal_error+0xb8>)
10004416:	9304      	str	r3, [sp, #16]
10004418:	4b24      	ldr	r3, [pc, #144]	; (100044ac <z_fatal_error+0xbc>)
1000441a:	9206      	str	r2, [sp, #24]
1000441c:	9302      	str	r3, [sp, #8]
1000441e:	2201      	movs	r2, #1
10004420:	0023      	movs	r3, r4
10004422:	0020      	movs	r0, r4
10004424:	9906      	ldr	r1, [sp, #24]
10004426:	9405      	str	r4, [sp, #20]
10004428:	9603      	str	r6, [sp, #12]
1000442a:	9401      	str	r4, [sp, #4]
1000442c:	9400      	str	r4, [sp, #0]
1000442e:	f001 fb5a 	bl	10005ae6 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
10004432:	42a7      	cmp	r7, r4
10004434:	d00d      	beq.n	10004452 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
10004436:	69fb      	ldr	r3, [r7, #28]
10004438:	05db      	lsls	r3, r3, #23
1000443a:	42a3      	cmp	r3, r4
1000443c:	d009      	beq.n	10004452 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
1000443e:	4b1c      	ldr	r3, [pc, #112]	; (100044b0 <z_fatal_error+0xc0>)
10004440:	2201      	movs	r2, #1
10004442:	9302      	str	r3, [sp, #8]
10004444:	0020      	movs	r0, r4
10004446:	0023      	movs	r3, r4
10004448:	9906      	ldr	r1, [sp, #24]
1000444a:	9401      	str	r4, [sp, #4]
1000444c:	9400      	str	r4, [sp, #0]
1000444e:	f001 fb4a 	bl	10005ae6 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
10004452:	2d00      	cmp	r5, #0
10004454:	d007      	beq.n	10004466 <z_fatal_error+0x76>
10004456:	0028      	movs	r0, r5
10004458:	f001 fb60 	bl	10005b1c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
1000445c:	2800      	cmp	r0, #0
1000445e:	d002      	beq.n	10004466 <z_fatal_error+0x76>
10004460:	7803      	ldrb	r3, [r0, #0]
10004462:	2b00      	cmp	r3, #0
10004464:	d100      	bne.n	10004468 <z_fatal_error+0x78>
		thread_name = "unknown";
10004466:	4813      	ldr	r0, [pc, #76]	; (100044b4 <z_fatal_error+0xc4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
10004468:	9004      	str	r0, [sp, #16]
1000446a:	2000      	movs	r0, #0
1000446c:	4b12      	ldr	r3, [pc, #72]	; (100044b8 <z_fatal_error+0xc8>)
1000446e:	2201      	movs	r2, #1
10004470:	9906      	ldr	r1, [sp, #24]
10004472:	9302      	str	r3, [sp, #8]
10004474:	9001      	str	r0, [sp, #4]
10004476:	0003      	movs	r3, r0
10004478:	9000      	str	r0, [sp, #0]
1000447a:	9503      	str	r5, [sp, #12]
1000447c:	f001 fb33 	bl	10005ae6 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10004480:	0039      	movs	r1, r7
10004482:	0030      	movs	r0, r6
10004484:	f7ff ff9e 	bl	100043c4 <k_sys_fatal_error_handler>
	if (key != 0U) {
10004488:	9b07      	ldr	r3, [sp, #28]
1000448a:	2b00      	cmp	r3, #0
1000448c:	d102      	bne.n	10004494 <z_fatal_error+0xa4>
	__asm__ volatile(
1000448e:	b662      	cpsie	i
10004490:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10004494:	0028      	movs	r0, r5
10004496:	f7ff f879 	bl	1000358c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
1000449a:	b009      	add	sp, #36	; 0x24
1000449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000449e:	46c0      	nop			; (mov r8, r8)
100044a0:	100066f6 	.word	0x100066f6
100044a4:	1000616c 	.word	0x1000616c
100044a8:	10005f4c 	.word	0x10005f4c
100044ac:	1000670c 	.word	0x1000670c
100044b0:	10006734 	.word	0x10006734
100044b4:	10006704 	.word	0x10006704
100044b8:	10006755 	.word	0x10006755

100044bc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100044bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100044be:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100044c0:	4e10      	ldr	r6, [pc, #64]	; (10004504 <z_sys_init_run_level+0x48>)
100044c2:	0083      	lsls	r3, r0, #2
100044c4:	3001      	adds	r0, #1
100044c6:	599c      	ldr	r4, [r3, r6]
100044c8:	0083      	lsls	r3, r0, #2
100044ca:	9301      	str	r3, [sp, #4]
100044cc:	9b01      	ldr	r3, [sp, #4]
100044ce:	58f3      	ldr	r3, [r6, r3]
100044d0:	42a3      	cmp	r3, r4
100044d2:	d800      	bhi.n	100044d6 <z_sys_init_run_level+0x1a>
		}
	}
}
100044d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100044d6:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
100044d8:	6823      	ldr	r3, [r4, #0]
100044da:	0028      	movs	r0, r5
100044dc:	4798      	blx	r3
		if (dev != NULL) {
100044de:	2d00      	cmp	r5, #0
100044e0:	d00d      	beq.n	100044fe <z_sys_init_run_level+0x42>
			if (rc != 0) {
100044e2:	2800      	cmp	r0, #0
100044e4:	d007      	beq.n	100044f6 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
100044e6:	17c2      	asrs	r2, r0, #31
100044e8:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
100044ea:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
100044ec:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
100044ee:	28ff      	cmp	r0, #255	; 0xff
100044f0:	dd00      	ble.n	100044f4 <z_sys_init_run_level+0x38>
100044f2:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
100044f4:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100044f6:	68ea      	ldr	r2, [r5, #12]
100044f8:	7853      	ldrb	r3, [r2, #1]
100044fa:	433b      	orrs	r3, r7
100044fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100044fe:	3408      	adds	r4, #8
10004500:	e7e4      	b.n	100044cc <z_sys_init_run_level+0x10>
10004502:	46c0      	nop			; (mov r8, r8)
10004504:	10006180 	.word	0x10006180

10004508 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10004508:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000450a:	2401      	movs	r4, #1
1000450c:	4b09      	ldr	r3, [pc, #36]	; (10004534 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000450e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10004510:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10004512:	f7ff ffd3 	bl	100044bc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10004516:	f000 fe4b 	bl	100051b0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
1000451a:	2004      	movs	r0, #4
1000451c:	f7ff ffce 	bl	100044bc <z_sys_init_run_level>

	z_init_static_threads();
10004520:	f000 f8d0 	bl	100046c4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10004524:	f7fd fc3e 	bl	10001da4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10004528:	4a03      	ldr	r2, [pc, #12]	; (10004538 <bg_thread_main+0x30>)
1000452a:	7b13      	ldrb	r3, [r2, #12]
1000452c:	43a3      	bics	r3, r4
1000452e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10004530:	bd10      	pop	{r4, pc}
10004532:	46c0      	nop			; (mov r8, r8)
10004534:	2000029b 	.word	0x2000029b
10004538:	20000158 	.word	0x20000158

1000453c <z_bss_zero>:
{
1000453c:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
1000453e:	4a03      	ldr	r2, [pc, #12]	; (1000454c <z_bss_zero+0x10>)
10004540:	4803      	ldr	r0, [pc, #12]	; (10004550 <z_bss_zero+0x14>)
10004542:	2100      	movs	r1, #0
10004544:	1a12      	subs	r2, r2, r0
10004546:	f001 fae1 	bl	10005b0c <z_early_memset>
}
1000454a:	bd10      	pop	{r4, pc}
1000454c:	200002a0 	.word	0x200002a0
10004550:	200000e8 	.word	0x200000e8

10004554 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10004554:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10004556:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10004558:	2501      	movs	r5, #1
{
1000455a:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
1000455c:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000455e:	0201      	lsls	r1, r0, #8
10004560:	4811      	ldr	r0, [pc, #68]	; (100045a8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10004562:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10004564:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10004566:	2000      	movs	r0, #0
{
10004568:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000456a:	9504      	str	r5, [sp, #16]
1000456c:	350e      	adds	r5, #14
1000456e:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10004570:	3505      	adds	r5, #5
10004572:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10004574:	4b0d      	ldr	r3, [pc, #52]	; (100045ac <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10004576:	9005      	str	r0, [sp, #20]
10004578:	9002      	str	r0, [sp, #8]
1000457a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000457c:	480c      	ldr	r0, [pc, #48]	; (100045b0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000457e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10004580:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10004582:	4b0c      	ldr	r3, [pc, #48]	; (100045b4 <z_init_cpu+0x60>)
10004584:	0030      	movs	r0, r6
10004586:	9500      	str	r5, [sp, #0]
10004588:	0052      	lsls	r2, r2, #1
1000458a:	f000 f871 	bl	10004670 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000458e:	2204      	movs	r2, #4
10004590:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10004592:	742c      	strb	r4, [r5, #16]
10004594:	4393      	bics	r3, r2
10004596:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10004598:	3401      	adds	r4, #1
1000459a:	4b07      	ldr	r3, [pc, #28]	; (100045b8 <z_init_cpu+0x64>)
1000459c:	02e4      	lsls	r4, r4, #11
1000459e:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100045a0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100045a2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100045a4:	b006      	add	sp, #24
100045a6:	bd70      	pop	{r4, r5, r6, pc}
100045a8:	20000aa0 	.word	0x20000aa0
100045ac:	200000e8 	.word	0x200000e8
100045b0:	20000264 	.word	0x20000264
100045b4:	10005b21 	.word	0x10005b21
100045b8:	200002a0 	.word	0x200002a0

100045bc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
100045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100045be:	2000      	movs	r0, #0
{
100045c0:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100045c2:	f7ff ff7b 	bl	100044bc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100045c6:	4b22      	ldr	r3, [pc, #136]	; (10004650 <z_cstart+0x94>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100045c8:	f383 8808 	msr	MSP, r3
100045cc:	4921      	ldr	r1, [pc, #132]	; (10004654 <z_cstart+0x98>)
100045ce:	4b22      	ldr	r3, [pc, #136]	; (10004658 <z_cstart+0x9c>)
100045d0:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
100045d2:	2500      	movs	r5, #0
100045d4:	401a      	ands	r2, r3
100045d6:	23e0      	movs	r3, #224	; 0xe0
100045d8:	041b      	lsls	r3, r3, #16
100045da:	4313      	orrs	r3, r2
100045dc:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100045de:	f000 ff67 	bl	100054b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
100045e2:	f7fe fdc7 	bl	10003174 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
100045e6:	f7fe fb09 	bl	10002bfc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
100045ea:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100045ec:	4e1b      	ldr	r6, [pc, #108]	; (1000465c <z_cstart+0xa0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
100045ee:	ab06      	add	r3, sp, #24
100045f0:	32ff      	adds	r2, #255	; 0xff
100045f2:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
100045f4:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
100045f6:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
100045f8:	f001 fa67 	bl	10005aca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
100045fc:	2001      	movs	r0, #1
100045fe:	f7ff ff5d 	bl	100044bc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10004602:	2002      	movs	r0, #2
10004604:	f7ff ff5a 	bl	100044bc <z_sys_init_run_level>
	z_sched_init();
10004608:	f000 fad0 	bl	10004bac <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
1000460c:	4c14      	ldr	r4, [pc, #80]	; (10004660 <z_cstart+0xa4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000460e:	4b15      	ldr	r3, [pc, #84]	; (10004664 <z_cstart+0xa8>)
	_kernel.ready_q.cache = &z_main_thread;
10004610:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10004612:	2280      	movs	r2, #128	; 0x80
10004614:	9305      	str	r3, [sp, #20]
10004616:	2301      	movs	r3, #1
10004618:	4e13      	ldr	r6, [pc, #76]	; (10004668 <z_cstart+0xac>)
1000461a:	4914      	ldr	r1, [pc, #80]	; (1000466c <z_cstart+0xb0>)
1000461c:	9304      	str	r3, [sp, #16]
1000461e:	00d2      	lsls	r2, r2, #3
10004620:	0033      	movs	r3, r6
10004622:	0020      	movs	r0, r4
10004624:	9503      	str	r5, [sp, #12]
10004626:	9502      	str	r5, [sp, #8]
10004628:	9501      	str	r5, [sp, #4]
1000462a:	9500      	str	r5, [sp, #0]
1000462c:	f000 f820 	bl	10004670 <z_setup_new_thread>
10004630:	2204      	movs	r2, #4
10004632:	0007      	movs	r7, r0
10004634:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10004636:	0020      	movs	r0, r4
10004638:	4393      	bics	r3, r2
1000463a:	7363      	strb	r3, [r4, #13]
1000463c:	f001 fab3 	bl	10005ba6 <z_ready_thread>
	z_init_cpu(0);
10004640:	0028      	movs	r0, r5
10004642:	f7ff ff87 	bl	10004554 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10004646:	0032      	movs	r2, r6
10004648:	0039      	movs	r1, r7
1000464a:	0020      	movs	r0, r4
1000464c:	f7fe feae 	bl	100033ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10004650:	20000aa0 	.word	0x20000aa0
10004654:	e000ed00 	.word	0xe000ed00
10004658:	ff00ffff 	.word	0xff00ffff
1000465c:	20000264 	.word	0x20000264
10004660:	20000158 	.word	0x20000158
10004664:	100067b7 	.word	0x100067b7
10004668:	10004509 	.word	0x10004509
1000466c:	20000ba0 	.word	0x20000ba0

10004670 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10004670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10004672:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10004674:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10004676:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10004678:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
1000467a:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
1000467c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
1000467e:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10004680:	2004      	movs	r0, #4
10004682:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10004684:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10004686:	3207      	adds	r2, #7
	thread_base->prio = priority;
10004688:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
1000468a:	2007      	movs	r0, #7
1000468c:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
1000468e:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10004690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10004692:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10004694:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10004696:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10004698:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000469a:	9202      	str	r2, [sp, #8]
1000469c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000469e:	0020      	movs	r0, r4
100046a0:	9201      	str	r2, [sp, #4]
100046a2:	9a08      	ldr	r2, [sp, #32]
100046a4:	9200      	str	r2, [sp, #0]
100046a6:	002a      	movs	r2, r5
100046a8:	f7fe fe6a 	bl	10003380 <arch_new_thread>
	if (!_current) {
100046ac:	4b04      	ldr	r3, [pc, #16]	; (100046c0 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100046ae:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100046b0:	689b      	ldr	r3, [r3, #8]
100046b2:	42b3      	cmp	r3, r6
100046b4:	d000      	beq.n	100046b8 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
100046b8:	0028      	movs	r0, r5
100046ba:	6663      	str	r3, [r4, #100]	; 0x64
100046bc:	b004      	add	sp, #16
100046be:	bd70      	pop	{r4, r5, r6, pc}
100046c0:	20000264 	.word	0x20000264

100046c4 <z_init_static_threads>:
{
100046c4:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100046c6:	4c20      	ldr	r4, [pc, #128]	; (10004748 <z_init_static_threads+0x84>)
{
100046c8:	b086      	sub	sp, #24
100046ca:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
100046cc:	4d1f      	ldr	r5, [pc, #124]	; (1000474c <z_init_static_threads+0x88>)
100046ce:	42ac      	cmp	r4, r5
100046d0:	d308      	bcc.n	100046e4 <z_init_static_threads+0x20>
	k_sched_lock();
100046d2:	f000 fa45 	bl	10004b60 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
100046d6:	0034      	movs	r4, r6
100046d8:	42ac      	cmp	r4, r5
100046da:	d319      	bcc.n	10004710 <z_init_static_threads+0x4c>
	k_sched_unlock();
100046dc:	f000 fa50 	bl	10004b80 <k_sched_unlock>
}
100046e0:	b006      	add	sp, #24
100046e2:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
100046e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100046e6:	9305      	str	r3, [sp, #20]
100046e8:	6a23      	ldr	r3, [r4, #32]
100046ea:	9304      	str	r3, [sp, #16]
100046ec:	69e3      	ldr	r3, [r4, #28]
100046ee:	9303      	str	r3, [sp, #12]
100046f0:	69a3      	ldr	r3, [r4, #24]
100046f2:	9302      	str	r3, [sp, #8]
100046f4:	6963      	ldr	r3, [r4, #20]
100046f6:	9301      	str	r3, [sp, #4]
100046f8:	6923      	ldr	r3, [r4, #16]
100046fa:	9300      	str	r3, [sp, #0]
100046fc:	68e3      	ldr	r3, [r4, #12]
100046fe:	68a2      	ldr	r2, [r4, #8]
10004700:	6861      	ldr	r1, [r4, #4]
10004702:	6820      	ldr	r0, [r4, #0]
10004704:	f7ff ffb4 	bl	10004670 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10004708:	6823      	ldr	r3, [r4, #0]
1000470a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
1000470c:	342c      	adds	r4, #44	; 0x2c
1000470e:	e7dd      	b.n	100046cc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10004710:	6a63      	ldr	r3, [r4, #36]	; 0x24
10004712:	1c5a      	adds	r2, r3, #1
10004714:	d00f      	beq.n	10004736 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10004716:	43d8      	mvns	r0, r3
10004718:	17c0      	asrs	r0, r0, #31
1000471a:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
1000471c:	220a      	movs	r2, #10
1000471e:	2300      	movs	r3, #0
10004720:	17c1      	asrs	r1, r0, #31
10004722:	f7fd fa35 	bl	10001b90 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10004726:	6826      	ldr	r6, [r4, #0]
10004728:	000b      	movs	r3, r1
1000472a:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
1000472c:	4301      	orrs	r1, r0
1000472e:	d104      	bne.n	1000473a <z_init_static_threads+0x76>
	z_sched_start(thread);
10004730:	0030      	movs	r0, r6
10004732:	f000 f9cf 	bl	10004ad4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10004736:	342c      	adds	r4, #44	; 0x2c
10004738:	e7ce      	b.n	100046d8 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
1000473a:	0030      	movs	r0, r6
1000473c:	4904      	ldr	r1, [pc, #16]	; (10004750 <z_init_static_threads+0x8c>)
1000473e:	3018      	adds	r0, #24
10004740:	f000 fba2 	bl	10004e88 <z_add_timeout>
10004744:	e7f7      	b.n	10004736 <z_init_static_threads+0x72>
10004746:	46c0      	nop			; (mov r8, r8)
10004748:	10005ef8 	.word	0x10005ef8
1000474c:	10005ef8 	.word	0x10005ef8
10004750:	10005c1b 	.word	0x10005c1b

10004754 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10004754:	b570      	push	{r4, r5, r6, lr}
10004756:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004758:	f3ef 8510 	mrs	r5, PRIMASK
1000475c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
1000475e:	f001 fa77 	bl	10005c50 <z_unpend_first_thread>

	if (thread != NULL) {
10004762:	2800      	cmp	r0, #0
10004764:	d008      	beq.n	10004778 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10004766:	2300      	movs	r3, #0
10004768:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
1000476a:	f001 fa1c 	bl	10005ba6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
1000476e:	0029      	movs	r1, r5
10004770:	4805      	ldr	r0, [pc, #20]	; (10004788 <z_impl_k_sem_give+0x34>)
10004772:	f000 f999 	bl	10004aa8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10004776:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10004778:	68a2      	ldr	r2, [r4, #8]
1000477a:	68e3      	ldr	r3, [r4, #12]
1000477c:	1a9b      	subs	r3, r3, r2
1000477e:	1e59      	subs	r1, r3, #1
10004780:	418b      	sbcs	r3, r1
10004782:	189b      	adds	r3, r3, r2
10004784:	60a3      	str	r3, [r4, #8]
}
10004786:	e7f2      	b.n	1000476e <z_impl_k_sem_give+0x1a>
10004788:	2000029c 	.word	0x2000029c

1000478c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
1000478c:	b513      	push	{r0, r1, r4, lr}
1000478e:	0004      	movs	r4, r0
10004790:	f3ef 8110 	mrs	r1, PRIMASK
10004794:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10004796:	6880      	ldr	r0, [r0, #8]
10004798:	2800      	cmp	r0, #0
1000479a:	d008      	beq.n	100047ae <z_impl_k_sem_take+0x22>
		sem->count--;
1000479c:	3801      	subs	r0, #1
1000479e:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
100047a0:	2900      	cmp	r1, #0
100047a2:	d102      	bne.n	100047aa <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
100047a4:	b662      	cpsie	i
100047a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
100047aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
100047ac:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
100047ae:	0010      	movs	r0, r2
100047b0:	4318      	orrs	r0, r3
100047b2:	d107      	bne.n	100047c4 <z_impl_k_sem_take+0x38>
	if (key != 0U) {
100047b4:	2900      	cmp	r1, #0
100047b6:	d102      	bne.n	100047be <z_impl_k_sem_take+0x32>
	__asm__ volatile(
100047b8:	b662      	cpsie	i
100047ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
100047be:	2010      	movs	r0, #16
100047c0:	4240      	negs	r0, r0
100047c2:	e7f3      	b.n	100047ac <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
100047c4:	9200      	str	r2, [sp, #0]
100047c6:	9301      	str	r3, [sp, #4]
100047c8:	0022      	movs	r2, r4
100047ca:	4802      	ldr	r0, [pc, #8]	; (100047d4 <z_impl_k_sem_take+0x48>)
100047cc:	f000 f954 	bl	10004a78 <z_pend_curr>
	return ret;
100047d0:	e7ec      	b.n	100047ac <z_impl_k_sem_take+0x20>
100047d2:	46c0      	nop			; (mov r8, r8)
100047d4:	2000029c 	.word	0x2000029c

100047d8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
100047d8:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
100047da:	4b04      	ldr	r3, [pc, #16]	; (100047ec <slice_timeout+0x14>)
	slice_expired[cpu] = true;
100047dc:	4a04      	ldr	r2, [pc, #16]	; (100047f0 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
100047de:	1ac0      	subs	r0, r0, r3
100047e0:	4b04      	ldr	r3, [pc, #16]	; (100047f4 <slice_timeout+0x1c>)
100047e2:	10c0      	asrs	r0, r0, #3
100047e4:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
100047e6:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
100047e8:	4770      	bx	lr
100047ea:	46c0      	nop			; (mov r8, r8)
100047ec:	200001c8 	.word	0x200001c8
100047f0:	2000029c 	.word	0x2000029c
100047f4:	aaaaaaab 	.word	0xaaaaaaab

100047f8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
100047f8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
100047fa:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
100047fc:	4b0a      	ldr	r3, [pc, #40]	; (10004828 <z_reset_time_slice+0x30>)
100047fe:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10004800:	4b0a      	ldr	r3, [pc, #40]	; (1000482c <z_reset_time_slice+0x34>)
10004802:	436c      	muls	r4, r5
10004804:	18e4      	adds	r4, r4, r3
10004806:	0020      	movs	r0, r4
10004808:	f001 fa50 	bl	10005cac <z_abort_timeout>
	int ret = slice_ticks;
1000480c:	4b08      	ldr	r3, [pc, #32]	; (10004830 <z_reset_time_slice+0x38>)
1000480e:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
10004810:	2a00      	cmp	r2, #0
10004812:	d008      	beq.n	10004826 <z_reset_time_slice+0x2e>
		slice_expired[cpu] = false;
10004814:	2100      	movs	r1, #0
10004816:	4b07      	ldr	r3, [pc, #28]	; (10004834 <z_reset_time_slice+0x3c>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
10004818:	3a01      	subs	r2, #1
		slice_expired[cpu] = false;
1000481a:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
1000481c:	0020      	movs	r0, r4
1000481e:	4906      	ldr	r1, [pc, #24]	; (10004838 <z_reset_time_slice+0x40>)
			      K_TICKS(slice_time(curr) - 1));
10004820:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10004822:	f000 fb31 	bl	10004e88 <z_add_timeout>
	}
}
10004826:	bd70      	pop	{r4, r5, r6, pc}
10004828:	20000264 	.word	0x20000264
1000482c:	200001c8 	.word	0x200001c8
10004830:	2000028c 	.word	0x2000028c
10004834:	2000029c 	.word	0x2000029c
10004838:	100047d9 	.word	0x100047d9

1000483c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
1000483c:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
1000483e:	4d0e      	ldr	r5, [pc, #56]	; (10004878 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004840:	4b0e      	ldr	r3, [pc, #56]	; (1000487c <update_cache+0x40>)
	return list->head == list;
10004842:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004844:	429c      	cmp	r4, r3
10004846:	d001      	beq.n	1000484c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10004848:	2c00      	cmp	r4, #0
1000484a:	d100      	bne.n	1000484e <update_cache+0x12>
1000484c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
1000484e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10004850:	2800      	cmp	r0, #0
10004852:	d108      	bne.n	10004866 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10004854:	7b5a      	ldrb	r2, [r3, #13]
10004856:	06d2      	lsls	r2, r2, #27
10004858:	d105      	bne.n	10004866 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
1000485a:	69a2      	ldr	r2, [r4, #24]
1000485c:	2a00      	cmp	r2, #0
1000485e:	d102      	bne.n	10004866 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10004860:	89da      	ldrh	r2, [r3, #14]
10004862:	2a7f      	cmp	r2, #127	; 0x7f
10004864:	d805      	bhi.n	10004872 <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10004866:	429c      	cmp	r4, r3
10004868:	d002      	beq.n	10004870 <update_cache+0x34>
			z_reset_time_slice(thread);
1000486a:	0020      	movs	r0, r4
1000486c:	f7ff ffc4 	bl	100047f8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10004870:	0023      	movs	r3, r4
10004872:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10004874:	bd70      	pop	{r4, r5, r6, pc}
10004876:	46c0      	nop			; (mov r8, r8)
10004878:	20000264 	.word	0x20000264
1000487c:	2000027c 	.word	0x2000027c

10004880 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10004880:	220d      	movs	r2, #13
{
10004882:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10004884:	5682      	ldrsb	r2, [r0, r2]
{
10004886:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10004888:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
1000488a:	2a00      	cmp	r2, #0
1000488c:	da04      	bge.n	10004898 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000488e:	227f      	movs	r2, #127	; 0x7f
10004890:	4013      	ands	r3, r2
10004892:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10004894:	f001 f94b 	bl	10005b2e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004898:	2380      	movs	r3, #128	; 0x80
1000489a:	7b62      	ldrb	r2, [r4, #13]
1000489c:	425b      	negs	r3, r3
1000489e:	4313      	orrs	r3, r2
	return list->head == list;
100048a0:	4a13      	ldr	r2, [pc, #76]	; (100048f0 <move_thread_to_end_of_prio_q+0x70>)
100048a2:	7363      	strb	r3, [r4, #13]
100048a4:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100048a6:	4813      	ldr	r0, [pc, #76]	; (100048f4 <move_thread_to_end_of_prio_q+0x74>)
100048a8:	4283      	cmp	r3, r0
100048aa:	d100      	bne.n	100048ae <move_thread_to_end_of_prio_q+0x2e>
100048ac:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
100048ae:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100048b0:	2b00      	cmp	r3, #0
100048b2:	d104      	bne.n	100048be <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
100048b4:	6020      	str	r0, [r4, #0]
	node->prev = tail;
100048b6:	6061      	str	r1, [r4, #4]

	tail->next = node;
100048b8:	600c      	str	r4, [r1, #0]
	list->tail = node;
100048ba:	61d4      	str	r4, [r2, #28]
}
100048bc:	e00c      	b.n	100048d8 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
100048be:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
100048c0:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
100048c2:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
100048c4:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
100048c6:	42b5      	cmp	r5, r6
100048c8:	d00d      	beq.n	100048e6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
100048ca:	42ae      	cmp	r6, r5
100048cc:	dd0b      	ble.n	100048e6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
100048ce:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
100048d0:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100048d2:	6061      	str	r1, [r4, #4]
	prev->next = node;
100048d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
100048d6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
100048d8:	6890      	ldr	r0, [r2, #8]
100048da:	1b00      	subs	r0, r0, r4
100048dc:	4243      	negs	r3, r0
100048de:	4158      	adcs	r0, r3
100048e0:	f7ff ffac 	bl	1000483c <update_cache>
}
100048e4:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100048e6:	4299      	cmp	r1, r3
100048e8:	d0e4      	beq.n	100048b4 <move_thread_to_end_of_prio_q+0x34>
100048ea:	681b      	ldr	r3, [r3, #0]
100048ec:	e7e0      	b.n	100048b0 <move_thread_to_end_of_prio_q+0x30>
100048ee:	46c0      	nop			; (mov r8, r8)
100048f0:	20000264 	.word	0x20000264
100048f4:	2000027c 	.word	0x2000027c

100048f8 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100048f8:	230d      	movs	r3, #13
{
100048fa:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100048fc:	56c3      	ldrsb	r3, [r0, r3]
100048fe:	7b41      	ldrb	r1, [r0, #13]
10004900:	2b00      	cmp	r3, #0
10004902:	db26      	blt.n	10004952 <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10004904:	06cb      	lsls	r3, r1, #27
10004906:	d124      	bne.n	10004952 <ready_thread+0x5a>
	return node->next != NULL;
10004908:	6983      	ldr	r3, [r0, #24]
1000490a:	2b00      	cmp	r3, #0
1000490c:	d121      	bne.n	10004952 <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
1000490e:	2280      	movs	r2, #128	; 0x80
10004910:	4252      	negs	r2, r2
10004912:	430a      	orrs	r2, r1
10004914:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10004916:	4a11      	ldr	r2, [pc, #68]	; (1000495c <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004918:	4c11      	ldr	r4, [pc, #68]	; (10004960 <ready_thread+0x68>)
	return list->head == list;
1000491a:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000491c:	42a1      	cmp	r1, r4
1000491e:	d000      	beq.n	10004922 <ready_thread+0x2a>
10004920:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10004922:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004924:	2b00      	cmp	r3, #0
10004926:	d104      	bne.n	10004932 <ready_thread+0x3a>
	node->next = list;
10004928:	6004      	str	r4, [r0, #0]
	node->prev = tail;
1000492a:	6041      	str	r1, [r0, #4]
	tail->next = node;
1000492c:	6008      	str	r0, [r1, #0]
	list->tail = node;
1000492e:	61d0      	str	r0, [r2, #28]
}
10004930:	e00c      	b.n	1000494c <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10004932:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10004934:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10004936:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10004938:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
1000493a:	42b5      	cmp	r5, r6
1000493c:	d00a      	beq.n	10004954 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000493e:	42ae      	cmp	r6, r5
10004940:	dd08      	ble.n	10004954 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10004942:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10004944:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10004946:	6042      	str	r2, [r0, #4]
	prev->next = node;
10004948:	6010      	str	r0, [r2, #0]
	successor->prev = node;
1000494a:	6058      	str	r0, [r3, #4]
		update_cache(0);
1000494c:	2000      	movs	r0, #0
1000494e:	f7ff ff75 	bl	1000483c <update_cache>
}
10004952:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10004954:	428b      	cmp	r3, r1
10004956:	d0e7      	beq.n	10004928 <ready_thread+0x30>
10004958:	681b      	ldr	r3, [r3, #0]
1000495a:	e7e3      	b.n	10004924 <ready_thread+0x2c>
1000495c:	20000264 	.word	0x20000264
10004960:	2000027c 	.word	0x2000027c

10004964 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10004964:	220d      	movs	r2, #13
{
10004966:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10004968:	5682      	ldrsb	r2, [r0, r2]
{
1000496a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
1000496c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
1000496e:	2a00      	cmp	r2, #0
10004970:	da04      	bge.n	1000497c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004972:	227f      	movs	r2, #127	; 0x7f
10004974:	4013      	ands	r3, r2
10004976:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004978:	f001 f8d9 	bl	10005b2e <sys_dlist_remove>
	update_cache(thread == _current);
1000497c:	4b03      	ldr	r3, [pc, #12]	; (1000498c <unready_thread+0x28>)
1000497e:	6898      	ldr	r0, [r3, #8]
10004980:	1b00      	subs	r0, r0, r4
10004982:	4243      	negs	r3, r0
10004984:	4158      	adcs	r0, r3
10004986:	f7ff ff59 	bl	1000483c <update_cache>
}
1000498a:	bd10      	pop	{r4, pc}
1000498c:	20000264 	.word	0x20000264

10004990 <pend_locked>:
{
10004990:	b570      	push	{r4, r5, r6, lr}
10004992:	001d      	movs	r5, r3
10004994:	0016      	movs	r6, r2
10004996:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10004998:	f001 f8dc 	bl	10005b54 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
1000499c:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000499e:	1c72      	adds	r2, r6, #1
100049a0:	d101      	bne.n	100049a6 <pend_locked+0x16>
100049a2:	3301      	adds	r3, #1
100049a4:	d006      	beq.n	100049b4 <pend_locked+0x24>
100049a6:	0020      	movs	r0, r4
100049a8:	0032      	movs	r2, r6
100049aa:	002b      	movs	r3, r5
100049ac:	4902      	ldr	r1, [pc, #8]	; (100049b8 <pend_locked+0x28>)
100049ae:	3018      	adds	r0, #24
100049b0:	f000 fa6a 	bl	10004e88 <z_add_timeout>
}
100049b4:	bd70      	pop	{r4, r5, r6, pc}
100049b6:	46c0      	nop			; (mov r8, r8)
100049b8:	10005c1b 	.word	0x10005c1b

100049bc <k_sched_time_slice_set>:
{
100049bc:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100049be:	f3ef 8410 	mrs	r4, PRIMASK
100049c2:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
100049c4:	230a      	movs	r3, #10
100049c6:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
100049c8:	2800      	cmp	r0, #0
100049ca:	dd02      	ble.n	100049d2 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
100049cc:	2b02      	cmp	r3, #2
100049ce:	da00      	bge.n	100049d2 <k_sched_time_slice_set+0x16>
100049d0:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
100049d2:	4a07      	ldr	r2, [pc, #28]	; (100049f0 <k_sched_time_slice_set+0x34>)
100049d4:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
100049d6:	4b07      	ldr	r3, [pc, #28]	; (100049f4 <k_sched_time_slice_set+0x38>)
100049d8:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
100049da:	4b07      	ldr	r3, [pc, #28]	; (100049f8 <k_sched_time_slice_set+0x3c>)
100049dc:	6898      	ldr	r0, [r3, #8]
100049de:	f7ff ff0b 	bl	100047f8 <z_reset_time_slice>
	if (key != 0U) {
100049e2:	2c00      	cmp	r4, #0
100049e4:	d102      	bne.n	100049ec <k_sched_time_slice_set+0x30>
	__asm__ volatile(
100049e6:	b662      	cpsie	i
100049e8:	f3bf 8f6f 	isb	sy
}
100049ec:	bd10      	pop	{r4, pc}
100049ee:	46c0      	nop			; (mov r8, r8)
100049f0:	2000028c 	.word	0x2000028c
100049f4:	20000288 	.word	0x20000288
100049f8:	20000264 	.word	0x20000264

100049fc <z_time_slice>:
{
100049fc:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100049fe:	f3ef 8510 	mrs	r5, PRIMASK
10004a02:	b672      	cpsid	i
	if (pending_current == _current) {
10004a04:	4a16      	ldr	r2, [pc, #88]	; (10004a60 <z_time_slice+0x64>)
10004a06:	4b17      	ldr	r3, [pc, #92]	; (10004a64 <z_time_slice+0x68>)
10004a08:	6894      	ldr	r4, [r2, #8]
10004a0a:	6819      	ldr	r1, [r3, #0]
10004a0c:	428c      	cmp	r4, r1
10004a0e:	d108      	bne.n	10004a22 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10004a10:	0020      	movs	r0, r4
10004a12:	f7ff fef1 	bl	100047f8 <z_reset_time_slice>
	if (key != 0U) {
10004a16:	2d00      	cmp	r5, #0
10004a18:	d102      	bne.n	10004a20 <z_time_slice+0x24>
	__asm__ volatile(
10004a1a:	b662      	cpsie	i
10004a1c:	f3bf 8f6f 	isb	sy
}
10004a20:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10004a22:	2100      	movs	r1, #0
10004a24:	6019      	str	r1, [r3, #0]
	int ret = slice_ticks;
10004a26:	4b10      	ldr	r3, [pc, #64]	; (10004a68 <z_time_slice+0x6c>)
	if (slice_time(_current) && sliceable(_current)) {
10004a28:	681b      	ldr	r3, [r3, #0]
10004a2a:	428b      	cmp	r3, r1
10004a2c:	d0f3      	beq.n	10004a16 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10004a2e:	89e3      	ldrh	r3, [r4, #14]
10004a30:	2b7f      	cmp	r3, #127	; 0x7f
10004a32:	d8f0      	bhi.n	10004a16 <z_time_slice+0x1a>
		&& !z_is_thread_prevented_from_running(thread)
10004a34:	7b63      	ldrb	r3, [r4, #13]
10004a36:	06db      	lsls	r3, r3, #27
10004a38:	d1ed      	bne.n	10004a16 <z_time_slice+0x1a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10004a3a:	210e      	movs	r1, #14
10004a3c:	4b0b      	ldr	r3, [pc, #44]	; (10004a6c <z_time_slice+0x70>)
10004a3e:	5661      	ldrsb	r1, [r4, r1]
10004a40:	681b      	ldr	r3, [r3, #0]
10004a42:	4299      	cmp	r1, r3
10004a44:	dbe7      	blt.n	10004a16 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10004a46:	4b0a      	ldr	r3, [pc, #40]	; (10004a70 <z_time_slice+0x74>)
10004a48:	429c      	cmp	r4, r3
10004a4a:	d0e4      	beq.n	10004a16 <z_time_slice+0x1a>
		if (slice_expired[_current_cpu->id]) {
10004a4c:	4b09      	ldr	r3, [pc, #36]	; (10004a74 <z_time_slice+0x78>)
10004a4e:	7c12      	ldrb	r2, [r2, #16]
10004a50:	5c9b      	ldrb	r3, [r3, r2]
10004a52:	2b00      	cmp	r3, #0
10004a54:	d0df      	beq.n	10004a16 <z_time_slice+0x1a>
		move_thread_to_end_of_prio_q(curr);
10004a56:	0020      	movs	r0, r4
10004a58:	f7ff ff12 	bl	10004880 <move_thread_to_end_of_prio_q>
10004a5c:	e7d8      	b.n	10004a10 <z_time_slice+0x14>
10004a5e:	46c0      	nop			; (mov r8, r8)
10004a60:	20000264 	.word	0x20000264
10004a64:	20000284 	.word	0x20000284
10004a68:	2000028c 	.word	0x2000028c
10004a6c:	20000288 	.word	0x20000288
10004a70:	200000e8 	.word	0x200000e8
10004a74:	2000029c 	.word	0x2000029c

10004a78 <z_pend_curr>:
{
10004a78:	b510      	push	{r4, lr}
	pending_current = _current;
10004a7a:	4809      	ldr	r0, [pc, #36]	; (10004aa0 <z_pend_curr+0x28>)
{
10004a7c:	000c      	movs	r4, r1
	pending_current = _current;
10004a7e:	4b09      	ldr	r3, [pc, #36]	; (10004aa4 <z_pend_curr+0x2c>)
{
10004a80:	0011      	movs	r1, r2
	pending_current = _current;
10004a82:	6882      	ldr	r2, [r0, #8]
10004a84:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10004a86:	f3ef 8310 	mrs	r3, PRIMASK
10004a8a:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10004a8c:	9a02      	ldr	r2, [sp, #8]
10004a8e:	9b03      	ldr	r3, [sp, #12]
10004a90:	6880      	ldr	r0, [r0, #8]
10004a92:	f7ff ff7d 	bl	10004990 <pend_locked>
	ret = arch_swap(key);
10004a96:	0020      	movs	r0, r4
10004a98:	f7fe fc18 	bl	100032cc <arch_swap>
}
10004a9c:	bd10      	pop	{r4, pc}
10004a9e:	46c0      	nop			; (mov r8, r8)
10004aa0:	20000264 	.word	0x20000264
10004aa4:	20000284 	.word	0x20000284

10004aa8 <z_reschedule>:
{
10004aa8:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10004aaa:	2900      	cmp	r1, #0
10004aac:	d10a      	bne.n	10004ac4 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10004aae:	f3ef 8005 	mrs	r0, IPSR
10004ab2:	2800      	cmp	r0, #0
10004ab4:	d107      	bne.n	10004ac6 <z_reschedule+0x1e>
	return new_thread != _current;
10004ab6:	4b06      	ldr	r3, [pc, #24]	; (10004ad0 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10004ab8:	689a      	ldr	r2, [r3, #8]
10004aba:	695b      	ldr	r3, [r3, #20]
10004abc:	429a      	cmp	r2, r3
10004abe:	d002      	beq.n	10004ac6 <z_reschedule+0x1e>
10004ac0:	f7fe fc04 	bl	100032cc <arch_swap>
}
10004ac4:	bd10      	pop	{r4, pc}
	__asm__ volatile(
10004ac6:	b662      	cpsie	i
10004ac8:	f3bf 8f6f 	isb	sy
10004acc:	e7fa      	b.n	10004ac4 <z_reschedule+0x1c>
10004ace:	46c0      	nop			; (mov r8, r8)
10004ad0:	20000264 	.word	0x20000264

10004ad4 <z_sched_start>:
{
10004ad4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004ad6:	f3ef 8410 	mrs	r4, PRIMASK
10004ada:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10004adc:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10004ade:	7b43      	ldrb	r3, [r0, #13]
10004ae0:	4213      	tst	r3, r2
10004ae2:	d105      	bne.n	10004af0 <z_sched_start+0x1c>
	if (key != 0U) {
10004ae4:	2c00      	cmp	r4, #0
10004ae6:	d102      	bne.n	10004aee <z_sched_start+0x1a>
	__asm__ volatile(
10004ae8:	b662      	cpsie	i
10004aea:	f3bf 8f6f 	isb	sy
}
10004aee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10004af0:	4393      	bics	r3, r2
10004af2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10004af4:	f7ff ff00 	bl	100048f8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10004af8:	0021      	movs	r1, r4
10004afa:	4802      	ldr	r0, [pc, #8]	; (10004b04 <z_sched_start+0x30>)
10004afc:	f7ff ffd4 	bl	10004aa8 <z_reschedule>
10004b00:	e7f5      	b.n	10004aee <z_sched_start+0x1a>
10004b02:	46c0      	nop			; (mov r8, r8)
10004b04:	2000029d 	.word	0x2000029d

10004b08 <z_impl_k_thread_suspend>:
{
10004b08:	b570      	push	{r4, r5, r6, lr}
10004b0a:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10004b0c:	3018      	adds	r0, #24
10004b0e:	f001 f8cd 	bl	10005cac <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10004b12:	f3ef 8610 	mrs	r6, PRIMASK
10004b16:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10004b18:	220d      	movs	r2, #13
10004b1a:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10004b1c:	7b63      	ldrb	r3, [r4, #13]
10004b1e:	2a00      	cmp	r2, #0
10004b20:	da05      	bge.n	10004b2e <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004b22:	227f      	movs	r2, #127	; 0x7f
10004b24:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004b26:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004b28:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004b2a:	f001 f800 	bl	10005b2e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10004b2e:	2310      	movs	r3, #16
		update_cache(thread == _current);
10004b30:	4d0a      	ldr	r5, [pc, #40]	; (10004b5c <z_impl_k_thread_suspend+0x54>)
10004b32:	7b62      	ldrb	r2, [r4, #13]
10004b34:	68a8      	ldr	r0, [r5, #8]
10004b36:	4313      	orrs	r3, r2
10004b38:	1b00      	subs	r0, r0, r4
10004b3a:	7363      	strb	r3, [r4, #13]
10004b3c:	4243      	negs	r3, r0
10004b3e:	4158      	adcs	r0, r3
10004b40:	f7ff fe7c 	bl	1000483c <update_cache>
	if (key != 0U) {
10004b44:	2e00      	cmp	r6, #0
10004b46:	d102      	bne.n	10004b4e <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10004b48:	b662      	cpsie	i
10004b4a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10004b4e:	68ab      	ldr	r3, [r5, #8]
10004b50:	42a3      	cmp	r3, r4
10004b52:	d101      	bne.n	10004b58 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10004b54:	f001 f8a3 	bl	10005c9e <z_reschedule_unlocked>
}
10004b58:	bd70      	pop	{r4, r5, r6, pc}
10004b5a:	46c0      	nop			; (mov r8, r8)
10004b5c:	20000264 	.word	0x20000264

10004b60 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10004b60:	f3ef 8110 	mrs	r1, PRIMASK
10004b64:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10004b66:	4b05      	ldr	r3, [pc, #20]	; (10004b7c <k_sched_lock+0x1c>)
10004b68:	689a      	ldr	r2, [r3, #8]
10004b6a:	7bd3      	ldrb	r3, [r2, #15]
10004b6c:	3b01      	subs	r3, #1
10004b6e:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10004b70:	2900      	cmp	r1, #0
10004b72:	d102      	bne.n	10004b7a <k_sched_lock+0x1a>
	__asm__ volatile(
10004b74:	b662      	cpsie	i
10004b76:	f3bf 8f6f 	isb	sy
}
10004b7a:	4770      	bx	lr
10004b7c:	20000264 	.word	0x20000264

10004b80 <k_sched_unlock>:
{
10004b80:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004b82:	f3ef 8410 	mrs	r4, PRIMASK
10004b86:	b672      	cpsid	i
		++_current->base.sched_locked;
10004b88:	4b07      	ldr	r3, [pc, #28]	; (10004ba8 <k_sched_unlock+0x28>)
		update_cache(0);
10004b8a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10004b8c:	689a      	ldr	r2, [r3, #8]
10004b8e:	7bd3      	ldrb	r3, [r2, #15]
10004b90:	3301      	adds	r3, #1
10004b92:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10004b94:	f7ff fe52 	bl	1000483c <update_cache>
	if (key != 0U) {
10004b98:	2c00      	cmp	r4, #0
10004b9a:	d102      	bne.n	10004ba2 <k_sched_unlock+0x22>
	__asm__ volatile(
10004b9c:	b662      	cpsie	i
10004b9e:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10004ba2:	f001 f87c 	bl	10005c9e <z_reschedule_unlocked>
}
10004ba6:	bd10      	pop	{r4, pc}
10004ba8:	20000264 	.word	0x20000264

10004bac <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004bac:	2100      	movs	r1, #0
{
10004bae:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10004bb0:	4b03      	ldr	r3, [pc, #12]	; (10004bc0 <z_sched_init+0x14>)
10004bb2:	4a04      	ldr	r2, [pc, #16]	; (10004bc4 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004bb4:	0008      	movs	r0, r1
10004bb6:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10004bb8:	61da      	str	r2, [r3, #28]
10004bba:	f7ff feff 	bl	100049bc <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10004bbe:	bd10      	pop	{r4, pc}
10004bc0:	20000264 	.word	0x20000264
10004bc4:	2000027c 	.word	0x2000027c

10004bc8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004bca:	f3ef 8510 	mrs	r5, PRIMASK
10004bce:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004bd0:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10004bd2:	4c19      	ldr	r4, [pc, #100]	; (10004c38 <z_impl_k_yield+0x70>)
10004bd4:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004bd6:	7b43      	ldrb	r3, [r0, #13]
10004bd8:	4013      	ands	r3, r2
10004bda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004bdc:	f000 ffa7 	bl	10005b2e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004be0:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10004be2:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10004be4:	4252      	negs	r2, r2
10004be6:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004be8:	4814      	ldr	r0, [pc, #80]	; (10004c3c <z_impl_k_yield+0x74>)
10004bea:	430a      	orrs	r2, r1
10004bec:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10004bee:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004bf0:	4282      	cmp	r2, r0
10004bf2:	d100      	bne.n	10004bf6 <z_impl_k_yield+0x2e>
10004bf4:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10004bf6:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004bf8:	2a00      	cmp	r2, #0
10004bfa:	d104      	bne.n	10004c06 <z_impl_k_yield+0x3e>
	node->next = list;
10004bfc:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10004bfe:	6059      	str	r1, [r3, #4]
	tail->next = node;
10004c00:	600b      	str	r3, [r1, #0]
	list->tail = node;
10004c02:	61e3      	str	r3, [r4, #28]
}
10004c04:	e00c      	b.n	10004c20 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10004c06:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10004c08:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10004c0a:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10004c0c:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10004c0e:	42be      	cmp	r6, r7
10004c10:	d00d      	beq.n	10004c2e <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10004c12:	42b7      	cmp	r7, r6
10004c14:	dd0b      	ble.n	10004c2e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10004c16:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10004c18:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10004c1a:	6059      	str	r1, [r3, #4]
	prev->next = node;
10004c1c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10004c1e:	6053      	str	r3, [r2, #4]
	update_cache(1);
10004c20:	2001      	movs	r0, #1
10004c22:	f7ff fe0b 	bl	1000483c <update_cache>
10004c26:	0028      	movs	r0, r5
10004c28:	f7fe fb50 	bl	100032cc <arch_swap>
	z_swap(&sched_spinlock, key);
}
10004c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10004c2e:	428a      	cmp	r2, r1
10004c30:	d0e4      	beq.n	10004bfc <z_impl_k_yield+0x34>
10004c32:	6812      	ldr	r2, [r2, #0]
10004c34:	e7e0      	b.n	10004bf8 <z_impl_k_yield+0x30>
10004c36:	46c0      	nop			; (mov r8, r8)
10004c38:	20000264 	.word	0x20000264
10004c3c:	2000027c 	.word	0x2000027c

10004c40 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10004c40:	0003      	movs	r3, r0
{
10004c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10004c44:	430b      	orrs	r3, r1
{
10004c46:	0004      	movs	r4, r0
10004c48:	000d      	movs	r5, r1
	if (ticks == 0) {
10004c4a:	2b00      	cmp	r3, #0
10004c4c:	d103      	bne.n	10004c56 <z_tick_sleep+0x16>
	z_impl_k_yield();
10004c4e:	f7ff ffbb 	bl	10004bc8 <z_impl_k_yield>
		k_yield();
		return 0;
10004c52:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10004c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10004c56:	1c4b      	adds	r3, r1, #1
10004c58:	db2e      	blt.n	10004cb8 <z_tick_sleep+0x78>
10004c5a:	1c4b      	adds	r3, r1, #1
10004c5c:	d101      	bne.n	10004c62 <z_tick_sleep+0x22>
10004c5e:	1c83      	adds	r3, r0, #2
10004c60:	d32a      	bcc.n	10004cb8 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10004c62:	f001 f836 	bl	10005cd2 <sys_clock_tick_get_32>
10004c66:	1827      	adds	r7, r4, r0
10004c68:	f3ef 8310 	mrs	r3, PRIMASK
10004c6c:	b672      	cpsid	i
	pending_current = _current;
10004c6e:	4e14      	ldr	r6, [pc, #80]	; (10004cc0 <z_tick_sleep+0x80>)
10004c70:	9301      	str	r3, [sp, #4]
10004c72:	68b0      	ldr	r0, [r6, #8]
10004c74:	4b13      	ldr	r3, [pc, #76]	; (10004cc4 <z_tick_sleep+0x84>)
10004c76:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10004c78:	f7ff fe74 	bl	10004964 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10004c7c:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10004c7e:	0022      	movs	r2, r4
10004c80:	002b      	movs	r3, r5
10004c82:	4911      	ldr	r1, [pc, #68]	; (10004cc8 <z_tick_sleep+0x88>)
10004c84:	3018      	adds	r0, #24
10004c86:	f000 f8ff 	bl	10004e88 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10004c8a:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10004c8c:	68b2      	ldr	r2, [r6, #8]
10004c8e:	9801      	ldr	r0, [sp, #4]
10004c90:	7b51      	ldrb	r1, [r2, #13]
10004c92:	430b      	orrs	r3, r1
10004c94:	7353      	strb	r3, [r2, #13]
10004c96:	f7fe fb19 	bl	100032cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10004c9a:	f001 f81a 	bl	10005cd2 <sys_clock_tick_get_32>
10004c9e:	2300      	movs	r3, #0
10004ca0:	003a      	movs	r2, r7
10004ca2:	0004      	movs	r4, r0
10004ca4:	001d      	movs	r5, r3
10004ca6:	1b12      	subs	r2, r2, r4
10004ca8:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10004caa:	42ab      	cmp	r3, r5
10004cac:	dc02      	bgt.n	10004cb4 <z_tick_sleep+0x74>
10004cae:	d1d0      	bne.n	10004c52 <z_tick_sleep+0x12>
10004cb0:	42aa      	cmp	r2, r5
10004cb2:	d0ce      	beq.n	10004c52 <z_tick_sleep+0x12>
		return ticks;
10004cb4:	0010      	movs	r0, r2
10004cb6:	e7cd      	b.n	10004c54 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10004cb8:	2702      	movs	r7, #2
10004cba:	427f      	negs	r7, r7
10004cbc:	1b3f      	subs	r7, r7, r4
10004cbe:	e7d3      	b.n	10004c68 <z_tick_sleep+0x28>
10004cc0:	20000264 	.word	0x20000264
10004cc4:	20000284 	.word	0x20000284
10004cc8:	10005c1b 	.word	0x10005c1b

10004ccc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10004ccc:	b510      	push	{r4, lr}
10004cce:	000b      	movs	r3, r1
10004cd0:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004cd2:	1c42      	adds	r2, r0, #1
10004cd4:	d107      	bne.n	10004ce6 <z_impl_k_sleep+0x1a>
10004cd6:	3301      	adds	r3, #1
10004cd8:	d105      	bne.n	10004ce6 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10004cda:	4b07      	ldr	r3, [pc, #28]	; (10004cf8 <z_impl_k_sleep+0x2c>)
10004cdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10004cde:	f7ff ff13 	bl	10004b08 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10004ce2:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10004ce4:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10004ce6:	0021      	movs	r1, r4
10004ce8:	f7ff ffaa 	bl	10004c40 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10004cec:	220a      	movs	r2, #10
10004cee:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10004cf0:	17c1      	asrs	r1, r0, #31
10004cf2:	f7fb fb31 	bl	10000358 <__aeabi_uldivmod>
	return ret;
10004cf6:	e7f5      	b.n	10004ce4 <z_impl_k_sleep+0x18>
10004cf8:	20000264 	.word	0x20000264

10004cfc <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10004cfc:	4b01      	ldr	r3, [pc, #4]	; (10004d04 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10004cfe:	6898      	ldr	r0, [r3, #8]
}
10004d00:	4770      	bx	lr
10004d02:	46c0      	nop			; (mov r8, r8)
10004d04:	20000264 	.word	0x20000264

10004d08 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10004d08:	b570      	push	{r4, r5, r6, lr}
10004d0a:	0004      	movs	r4, r0
10004d0c:	f3ef 8610 	mrs	r6, PRIMASK
10004d10:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10004d12:	7b03      	ldrb	r3, [r0, #12]
10004d14:	07db      	lsls	r3, r3, #31
10004d16:	d508      	bpl.n	10004d2a <z_thread_abort+0x22>
	if (key != 0U) {
10004d18:	2e00      	cmp	r6, #0
10004d1a:	d102      	bne.n	10004d22 <z_thread_abort+0x1a>
	__asm__ volatile(
10004d1c:	b662      	cpsie	i
10004d1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10004d22:	2004      	movs	r0, #4
10004d24:	b662      	cpsie	i
10004d26:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10004d28:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10004d2a:	2308      	movs	r3, #8
10004d2c:	7b42      	ldrb	r2, [r0, #13]
10004d2e:	421a      	tst	r2, r3
10004d30:	d005      	beq.n	10004d3e <z_thread_abort+0x36>
	if (key != 0U) {
10004d32:	2e00      	cmp	r6, #0
10004d34:	d1f8      	bne.n	10004d28 <z_thread_abort+0x20>
	__asm__ volatile(
10004d36:	b662      	cpsie	i
10004d38:	f3bf 8f6f 	isb	sy
10004d3c:	e7f4      	b.n	10004d28 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10004d3e:	2120      	movs	r1, #32
10004d40:	0010      	movs	r0, r2
10004d42:	4388      	bics	r0, r1
10004d44:	0001      	movs	r1, r0
10004d46:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10004d48:	b248      	sxtb	r0, r1
10004d4a:	2800      	cmp	r0, #0
10004d4c:	db20      	blt.n	10004d90 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10004d4e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10004d50:	68a3      	ldr	r3, [r4, #8]
10004d52:	2b00      	cmp	r3, #0
10004d54:	d002      	beq.n	10004d5c <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10004d56:	0020      	movs	r0, r4
10004d58:	f000 fef1 	bl	10005b3e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10004d5c:	0020      	movs	r0, r4
10004d5e:	3018      	adds	r0, #24
10004d60:	f000 ffa4 	bl	10005cac <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10004d64:	0023      	movs	r3, r4
	return list->head == list;
10004d66:	6da5      	ldr	r5, [r4, #88]	; 0x58
10004d68:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004d6a:	429d      	cmp	r5, r3
10004d6c:	d001      	beq.n	10004d72 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10004d6e:	2d00      	cmp	r5, #0
10004d70:	d116      	bne.n	10004da0 <z_thread_abort+0x98>
		update_cache(1);
10004d72:	2001      	movs	r0, #1
10004d74:	f7ff fd62 	bl	1000483c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10004d78:	4b10      	ldr	r3, [pc, #64]	; (10004dbc <z_thread_abort+0xb4>)
10004d7a:	689b      	ldr	r3, [r3, #8]
10004d7c:	42a3      	cmp	r3, r4
10004d7e:	d1d8      	bne.n	10004d32 <z_thread_abort+0x2a>
10004d80:	f3ef 8305 	mrs	r3, IPSR
10004d84:	2b00      	cmp	r3, #0
10004d86:	d1d4      	bne.n	10004d32 <z_thread_abort+0x2a>
10004d88:	0030      	movs	r0, r6
10004d8a:	f7fe fa9f 	bl	100032cc <arch_swap>
	return ret;
10004d8e:	e7d0      	b.n	10004d32 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004d90:	215f      	movs	r1, #95	; 0x5f
10004d92:	400a      	ands	r2, r1
10004d94:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004d96:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004d98:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004d9a:	f000 fec8 	bl	10005b2e <sys_dlist_remove>
}
10004d9e:	e7d7      	b.n	10004d50 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10004da0:	0028      	movs	r0, r5
10004da2:	f000 fecc 	bl	10005b3e <unpend_thread_no_timeout>
10004da6:	0028      	movs	r0, r5
10004da8:	3018      	adds	r0, #24
10004daa:	f000 ff7f 	bl	10005cac <z_abort_timeout>
10004dae:	2300      	movs	r3, #0
		ready_thread(thread);
10004db0:	0028      	movs	r0, r5
10004db2:	66eb      	str	r3, [r5, #108]	; 0x6c
10004db4:	f7ff fda0 	bl	100048f8 <ready_thread>
10004db8:	e7d4      	b.n	10004d64 <z_thread_abort+0x5c>
10004dba:	46c0      	nop			; (mov r8, r8)
10004dbc:	20000264 	.word	0x20000264

10004dc0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10004dc0:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10004dc2:	4806      	ldr	r0, [pc, #24]	; (10004ddc <z_data_copy+0x1c>)
10004dc4:	4a06      	ldr	r2, [pc, #24]	; (10004de0 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10004dc6:	4907      	ldr	r1, [pc, #28]	; (10004de4 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10004dc8:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10004dca:	f000 fea3 	bl	10005b14 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10004dce:	4a06      	ldr	r2, [pc, #24]	; (10004de8 <z_data_copy+0x28>)
10004dd0:	4906      	ldr	r1, [pc, #24]	; (10004dec <z_data_copy+0x2c>)
10004dd2:	4807      	ldr	r0, [pc, #28]	; (10004df0 <z_data_copy+0x30>)
10004dd4:	f000 fe9e 	bl	10005b14 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10004dd8:	bd10      	pop	{r4, pc}
10004dda:	46c0      	nop			; (mov r8, r8)
10004ddc:	20000000 	.word	0x20000000
10004de0:	200000e8 	.word	0x200000e8
10004de4:	10006804 	.word	0x10006804
10004de8:	00000000 	.word	0x00000000
10004dec:	10006804 	.word	0x10006804
10004df0:	20000000 	.word	0x20000000

10004df4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004df4:	2000      	movs	r0, #0
{
10004df6:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004df8:	4b03      	ldr	r3, [pc, #12]	; (10004e08 <elapsed+0x14>)
10004dfa:	681b      	ldr	r3, [r3, #0]
10004dfc:	4283      	cmp	r3, r0
10004dfe:	d101      	bne.n	10004e04 <elapsed+0x10>
10004e00:	f7ff f856 	bl	10003eb0 <sys_clock_elapsed>
}
10004e04:	bd10      	pop	{r4, pc}
10004e06:	46c0      	nop			; (mov r8, r8)
10004e08:	20000290 	.word	0x20000290

10004e0c <next_timeout>:

static int32_t next_timeout(void)
{
10004e0c:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10004e0e:	4b0e      	ldr	r3, [pc, #56]	; (10004e48 <next_timeout+0x3c>)
10004e10:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004e12:	429e      	cmp	r6, r3
10004e14:	d103      	bne.n	10004e1e <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10004e16:	f7ff ffed 	bl	10004df4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
10004e1a:	480c      	ldr	r0, [pc, #48]	; (10004e4c <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
10004e1c:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
10004e1e:	f7ff ffe9 	bl	10004df4 <elapsed>
	if ((to == NULL) ||
10004e22:	2e00      	cmp	r6, #0
10004e24:	d0f9      	beq.n	10004e1a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10004e26:	6932      	ldr	r2, [r6, #16]
10004e28:	6973      	ldr	r3, [r6, #20]
10004e2a:	0004      	movs	r4, r0
10004e2c:	17c5      	asrs	r5, r0, #31
10004e2e:	1b12      	subs	r2, r2, r4
10004e30:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10004e32:	2b00      	cmp	r3, #0
10004e34:	dcf1      	bgt.n	10004e1a <next_timeout+0xe>
10004e36:	d103      	bne.n	10004e40 <next_timeout+0x34>
10004e38:	2180      	movs	r1, #128	; 0x80
10004e3a:	0609      	lsls	r1, r1, #24
10004e3c:	428a      	cmp	r2, r1
10004e3e:	d2ec      	bcs.n	10004e1a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
10004e40:	43d8      	mvns	r0, r3
10004e42:	17c0      	asrs	r0, r0, #31
10004e44:	4010      	ands	r0, r2
	return ret;
10004e46:	e7e9      	b.n	10004e1c <next_timeout+0x10>
10004e48:	200000d0 	.word	0x200000d0
10004e4c:	7fffffff 	.word	0x7fffffff

10004e50 <remove_timeout>:
{
10004e50:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10004e52:	2800      	cmp	r0, #0
10004e54:	d00e      	beq.n	10004e74 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10004e56:	4b0b      	ldr	r3, [pc, #44]	; (10004e84 <remove_timeout+0x34>)
10004e58:	685b      	ldr	r3, [r3, #4]
10004e5a:	4298      	cmp	r0, r3
10004e5c:	d00a      	beq.n	10004e74 <remove_timeout+0x24>
10004e5e:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10004e60:	2900      	cmp	r1, #0
10004e62:	d007      	beq.n	10004e74 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10004e64:	690a      	ldr	r2, [r1, #16]
10004e66:	694b      	ldr	r3, [r1, #20]
10004e68:	6904      	ldr	r4, [r0, #16]
10004e6a:	6945      	ldr	r5, [r0, #20]
10004e6c:	1912      	adds	r2, r2, r4
10004e6e:	416b      	adcs	r3, r5
10004e70:	610a      	str	r2, [r1, #16]
10004e72:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10004e74:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004e76:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10004e78:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10004e7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10004e7c:	2300      	movs	r3, #0
10004e7e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10004e80:	6043      	str	r3, [r0, #4]
}
10004e82:	bd30      	pop	{r4, r5, pc}
10004e84:	200000d0 	.word	0x200000d0

10004e88 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10004e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004e8a:	0004      	movs	r4, r0
10004e8c:	0016      	movs	r6, r2
10004e8e:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004e90:	1c53      	adds	r3, r2, #1
10004e92:	d101      	bne.n	10004e98 <z_add_timeout+0x10>
10004e94:	1c7b      	adds	r3, r7, #1
10004e96:	d057      	beq.n	10004f48 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10004e98:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10004e9a:	f3ef 8310 	mrs	r3, PRIMASK
10004e9e:	b672      	cpsid	i
10004ea0:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10004ea2:	2f00      	cmp	r7, #0
10004ea4:	da23      	bge.n	10004eee <z_add_timeout+0x66>
10004ea6:	1c7b      	adds	r3, r7, #1
10004ea8:	d101      	bne.n	10004eae <z_add_timeout+0x26>
10004eaa:	1cb3      	adds	r3, r6, #2
10004eac:	d81f      	bhi.n	10004eee <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10004eae:	4b2b      	ldr	r3, [pc, #172]	; (10004f5c <z_add_timeout+0xd4>)
10004eb0:	6818      	ldr	r0, [r3, #0]
10004eb2:	6859      	ldr	r1, [r3, #4]
10004eb4:	2202      	movs	r2, #2
10004eb6:	4252      	negs	r2, r2
10004eb8:	17d3      	asrs	r3, r2, #31
10004eba:	1a12      	subs	r2, r2, r0
10004ebc:	418b      	sbcs	r3, r1
10004ebe:	1b92      	subs	r2, r2, r6
10004ec0:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10004ec2:	2b00      	cmp	r3, #0
10004ec4:	dc04      	bgt.n	10004ed0 <z_add_timeout+0x48>
10004ec6:	d101      	bne.n	10004ecc <z_add_timeout+0x44>
10004ec8:	2a00      	cmp	r2, #0
10004eca:	d101      	bne.n	10004ed0 <z_add_timeout+0x48>
10004ecc:	2201      	movs	r2, #1
10004ece:	2300      	movs	r3, #0
	return list->head == list;
10004ed0:	4f23      	ldr	r7, [pc, #140]	; (10004f60 <z_add_timeout+0xd8>)
10004ed2:	6122      	str	r2, [r4, #16]
10004ed4:	6163      	str	r3, [r4, #20]
10004ed6:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004ed8:	42bd      	cmp	r5, r7
10004eda:	d100      	bne.n	10004ede <z_add_timeout+0x56>
10004edc:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10004ede:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10004ee0:	2d00      	cmp	r5, #0
10004ee2:	d10f      	bne.n	10004f04 <z_add_timeout+0x7c>
	node->next = list;
10004ee4:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10004ee6:	6066      	str	r6, [r4, #4]
	tail->next = node;
10004ee8:	6034      	str	r4, [r6, #0]
	list->tail = node;
10004eea:	607c      	str	r4, [r7, #4]
}
10004eec:	e01c      	b.n	10004f28 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
10004eee:	f7ff ff81 	bl	10004df4 <elapsed>
10004ef2:	2201      	movs	r2, #1
10004ef4:	2300      	movs	r3, #0
10004ef6:	1992      	adds	r2, r2, r6
10004ef8:	417b      	adcs	r3, r7
10004efa:	0006      	movs	r6, r0
10004efc:	17c7      	asrs	r7, r0, #31
10004efe:	1992      	adds	r2, r2, r6
10004f00:	417b      	adcs	r3, r7
10004f02:	e7e5      	b.n	10004ed0 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10004f04:	6928      	ldr	r0, [r5, #16]
10004f06:	6969      	ldr	r1, [r5, #20]
10004f08:	6922      	ldr	r2, [r4, #16]
10004f0a:	6963      	ldr	r3, [r4, #20]
10004f0c:	4299      	cmp	r1, r3
10004f0e:	dc02      	bgt.n	10004f16 <z_add_timeout+0x8e>
10004f10:	d11b      	bne.n	10004f4a <z_add_timeout+0xc2>
10004f12:	4290      	cmp	r0, r2
10004f14:	d919      	bls.n	10004f4a <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10004f16:	1a80      	subs	r0, r0, r2
10004f18:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10004f1a:	686b      	ldr	r3, [r5, #4]
10004f1c:	6128      	str	r0, [r5, #16]
10004f1e:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10004f20:	6063      	str	r3, [r4, #4]
	node->next = successor;
10004f22:	6025      	str	r5, [r4, #0]
	prev->next = node;
10004f24:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10004f26:	606c      	str	r4, [r5, #4]
	return list->head == list;
10004f28:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004f2a:	42bb      	cmp	r3, r7
10004f2c:	d006      	beq.n	10004f3c <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10004f2e:	429c      	cmp	r4, r3
10004f30:	d104      	bne.n	10004f3c <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
10004f32:	f7ff ff6b 	bl	10004e0c <next_timeout>
10004f36:	2100      	movs	r1, #0
10004f38:	f7fe ff42 	bl	10003dc0 <sys_clock_set_timeout>
	if (key != 0U) {
10004f3c:	9b01      	ldr	r3, [sp, #4]
10004f3e:	2b00      	cmp	r3, #0
10004f40:	d102      	bne.n	10004f48 <z_add_timeout+0xc0>
	__asm__ volatile(
10004f42:	b662      	cpsie	i
10004f44:	f3bf 8f6f 	isb	sy
		}
	}
}
10004f48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10004f4a:	1a12      	subs	r2, r2, r0
10004f4c:	418b      	sbcs	r3, r1
10004f4e:	6122      	str	r2, [r4, #16]
10004f50:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10004f52:	42b5      	cmp	r5, r6
10004f54:	d0c6      	beq.n	10004ee4 <z_add_timeout+0x5c>
10004f56:	682d      	ldr	r5, [r5, #0]
10004f58:	e7c2      	b.n	10004ee0 <z_add_timeout+0x58>
10004f5a:	46c0      	nop			; (mov r8, r8)
10004f5c:	200001e0 	.word	0x200001e0
10004f60:	200000d0 	.word	0x200000d0

10004f64 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10004f64:	b5f0      	push	{r4, r5, r6, r7, lr}
10004f66:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10004f68:	f3ef 8310 	mrs	r3, PRIMASK
10004f6c:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10004f6e:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10004f70:	4b30      	ldr	r3, [pc, #192]	; (10005034 <sys_clock_announce+0xd0>)
10004f72:	6018      	str	r0, [r3, #0]
	return list->head == list;
10004f74:	4b30      	ldr	r3, [pc, #192]	; (10005038 <sys_clock_announce+0xd4>)
10004f76:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004f78:	429c      	cmp	r4, r3
10004f7a:	d100      	bne.n	10004f7e <sys_clock_announce+0x1a>
10004f7c:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
10004f7e:	4b2f      	ldr	r3, [pc, #188]	; (1000503c <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
10004f80:	4d2c      	ldr	r5, [pc, #176]	; (10005034 <sys_clock_announce+0xd0>)
		curr_tick += dt;
10004f82:	9303      	str	r3, [sp, #12]
10004f84:	6818      	ldr	r0, [r3, #0]
10004f86:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
10004f88:	682b      	ldr	r3, [r5, #0]
10004f8a:	469c      	mov	ip, r3
10004f8c:	2c00      	cmp	r4, #0
10004f8e:	d039      	beq.n	10005004 <sys_clock_announce+0xa0>
10004f90:	6962      	ldr	r2, [r4, #20]
10004f92:	6926      	ldr	r6, [r4, #16]
10004f94:	17db      	asrs	r3, r3, #31
10004f96:	429a      	cmp	r2, r3
10004f98:	dc02      	bgt.n	10004fa0 <sys_clock_announce+0x3c>
10004f9a:	d10a      	bne.n	10004fb2 <sys_clock_announce+0x4e>
10004f9c:	4566      	cmp	r6, ip
10004f9e:	d908      	bls.n	10004fb2 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10004fa0:	001f      	movs	r7, r3
10004fa2:	6922      	ldr	r2, [r4, #16]
10004fa4:	6963      	ldr	r3, [r4, #20]
10004fa6:	4666      	mov	r6, ip
10004fa8:	1b92      	subs	r2, r2, r6
10004faa:	41bb      	sbcs	r3, r7
10004fac:	6122      	str	r2, [r4, #16]
10004fae:	6163      	str	r3, [r4, #20]
10004fb0:	e028      	b.n	10005004 <sys_clock_announce+0xa0>
		curr_tick += dt;
10004fb2:	17f3      	asrs	r3, r6, #31
10004fb4:	9600      	str	r6, [sp, #0]
10004fb6:	9301      	str	r3, [sp, #4]
10004fb8:	9a00      	ldr	r2, [sp, #0]
10004fba:	9b01      	ldr	r3, [sp, #4]
10004fbc:	1880      	adds	r0, r0, r2
10004fbe:	4159      	adcs	r1, r3
		t->dticks = 0;
10004fc0:	2300      	movs	r3, #0
10004fc2:	2200      	movs	r2, #0
		curr_tick += dt;
10004fc4:	4f1d      	ldr	r7, [pc, #116]	; (1000503c <sys_clock_announce+0xd8>)
		t->dticks = 0;
10004fc6:	6122      	str	r2, [r4, #16]
10004fc8:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
10004fca:	6038      	str	r0, [r7, #0]
10004fcc:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
10004fce:	0020      	movs	r0, r4
10004fd0:	f7ff ff3e 	bl	10004e50 <remove_timeout>
	if (key != 0U) {
10004fd4:	9b02      	ldr	r3, [sp, #8]
10004fd6:	2b00      	cmp	r3, #0
10004fd8:	d102      	bne.n	10004fe0 <sys_clock_announce+0x7c>
	__asm__ volatile(
10004fda:	b662      	cpsie	i
10004fdc:	f3bf 8f6f 	isb	sy
		t->fn(t);
10004fe0:	0020      	movs	r0, r4
10004fe2:	68a3      	ldr	r3, [r4, #8]
10004fe4:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10004fe6:	f3ef 8310 	mrs	r3, PRIMASK
10004fea:	b672      	cpsid	i
10004fec:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
10004fee:	4b11      	ldr	r3, [pc, #68]	; (10005034 <sys_clock_announce+0xd0>)
10004ff0:	681a      	ldr	r2, [r3, #0]
10004ff2:	1b92      	subs	r2, r2, r6
10004ff4:	601a      	str	r2, [r3, #0]
	return list->head == list;
10004ff6:	4b10      	ldr	r3, [pc, #64]	; (10005038 <sys_clock_announce+0xd4>)
10004ff8:	4694      	mov	ip, r2
10004ffa:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004ffc:	429c      	cmp	r4, r3
10004ffe:	d1be      	bne.n	10004f7e <sys_clock_announce+0x1a>
		curr_tick += dt;
10005000:	6838      	ldr	r0, [r7, #0]
10005002:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10005004:	4662      	mov	r2, ip
10005006:	17d3      	asrs	r3, r2, #31
10005008:	1812      	adds	r2, r2, r0
1000500a:	414b      	adcs	r3, r1
	announce_remaining = 0;
1000500c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000500e:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
10005010:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
10005012:	600a      	str	r2, [r1, #0]
10005014:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
10005016:	f7ff fef9 	bl	10004e0c <next_timeout>
1000501a:	0021      	movs	r1, r4
1000501c:	f7fe fed0 	bl	10003dc0 <sys_clock_set_timeout>
	if (key != 0U) {
10005020:	9b02      	ldr	r3, [sp, #8]
10005022:	42a3      	cmp	r3, r4
10005024:	d102      	bne.n	1000502c <sys_clock_announce+0xc8>
	__asm__ volatile(
10005026:	b662      	cpsie	i
10005028:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
1000502c:	f7ff fce6 	bl	100049fc <z_time_slice>
#endif
}
10005030:	b005      	add	sp, #20
10005032:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005034:	20000290 	.word	0x20000290
10005038:	200000d0 	.word	0x200000d0
1000503c:	200001e0 	.word	0x200001e0

10005040 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10005040:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005042:	f3ef 8410 	mrs	r4, PRIMASK
10005046:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10005048:	f7ff fed4 	bl	10004df4 <elapsed>
1000504c:	0002      	movs	r2, r0
1000504e:	4906      	ldr	r1, [pc, #24]	; (10005068 <sys_clock_tick_get+0x28>)
10005050:	17c3      	asrs	r3, r0, #31
10005052:	6808      	ldr	r0, [r1, #0]
10005054:	6849      	ldr	r1, [r1, #4]
10005056:	1880      	adds	r0, r0, r2
10005058:	4159      	adcs	r1, r3
	if (key != 0U) {
1000505a:	2c00      	cmp	r4, #0
1000505c:	d102      	bne.n	10005064 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000505e:	b662      	cpsie	i
10005060:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10005064:	bd10      	pop	{r4, pc}
10005066:	46c0      	nop			; (mov r8, r8)
10005068:	200001e0 	.word	0x200001e0

1000506c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
1000506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000506e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005070:	f3ef 8510 	mrs	r5, PRIMASK
10005074:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
10005076:	6803      	ldr	r3, [r0, #0]
10005078:	9501      	str	r5, [sp, #4]
1000507a:	2b00      	cmp	r3, #0
1000507c:	d005      	beq.n	1000508a <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
1000507e:	2d00      	cmp	r5, #0
10005080:	d152      	bne.n	10005128 <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
10005082:	b662      	cpsie	i
10005084:	f3bf 8f6f 	isb	sy
10005088:	e04e      	b.n	10005128 <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
1000508a:	6a82      	ldr	r2, [r0, #40]	; 0x28
1000508c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1000508e:	2100      	movs	r1, #0
10005090:	2001      	movs	r0, #1
10005092:	1880      	adds	r0, r0, r2
10005094:	4159      	adcs	r1, r3
10005096:	2900      	cmp	r1, #0
10005098:	d101      	bne.n	1000509e <z_timer_expiration_handler+0x32>
1000509a:	2801      	cmp	r0, #1
1000509c:	d929      	bls.n	100050f2 <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
1000509e:	2b00      	cmp	r3, #0
100050a0:	dc04      	bgt.n	100050ac <z_timer_expiration_handler+0x40>
100050a2:	d101      	bne.n	100050a8 <z_timer_expiration_handler+0x3c>
100050a4:	2a00      	cmp	r2, #0
100050a6:	d101      	bne.n	100050ac <z_timer_expiration_handler+0x40>
100050a8:	2201      	movs	r2, #1
100050aa:	2300      	movs	r3, #0
100050ac:	2601      	movs	r6, #1
100050ae:	4276      	negs	r6, r6
100050b0:	17f7      	asrs	r7, r6, #31
100050b2:	18b6      	adds	r6, r6, r2
100050b4:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
100050b6:	f000 fe10 	bl	10005cda <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
100050ba:	2201      	movs	r2, #1
100050bc:	2300      	movs	r3, #0
100050be:	1880      	adds	r0, r0, r2
100050c0:	4159      	adcs	r1, r3
100050c2:	1980      	adds	r0, r0, r6
100050c4:	4179      	adcs	r1, r7
100050c6:	2900      	cmp	r1, #0
100050c8:	dc02      	bgt.n	100050d0 <z_timer_expiration_handler+0x64>
100050ca:	d12e      	bne.n	1000512a <z_timer_expiration_handler+0xbe>
100050cc:	2800      	cmp	r0, #0
100050ce:	d02c      	beq.n	1000512a <z_timer_expiration_handler+0xbe>
100050d0:	f000 fe03 	bl	10005cda <z_impl_k_uptime_ticks>
100050d4:	2201      	movs	r2, #1
100050d6:	2300      	movs	r3, #0
100050d8:	1880      	adds	r0, r0, r2
100050da:	4159      	adcs	r1, r3
100050dc:	2202      	movs	r2, #2
100050de:	4252      	negs	r2, r2
100050e0:	17d3      	asrs	r3, r2, #31
100050e2:	1980      	adds	r0, r0, r6
100050e4:	4179      	adcs	r1, r7
100050e6:	1a12      	subs	r2, r2, r0
100050e8:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100050ea:	0020      	movs	r0, r4
100050ec:	4918      	ldr	r1, [pc, #96]	; (10005150 <z_timer_expiration_handler+0xe4>)
100050ee:	f7ff fecb 	bl	10004e88 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
100050f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
100050f4:	3301      	adds	r3, #1
100050f6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100050f8:	6a23      	ldr	r3, [r4, #32]
100050fa:	2b00      	cmp	r3, #0
100050fc:	d00b      	beq.n	10005116 <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
100050fe:	2d00      	cmp	r5, #0
10005100:	d102      	bne.n	10005108 <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
10005102:	b662      	cpsie	i
10005104:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
10005108:	0020      	movs	r0, r4
1000510a:	6a23      	ldr	r3, [r4, #32]
1000510c:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000510e:	f3ef 8310 	mrs	r3, PRIMASK
10005112:	b672      	cpsid	i
10005114:	9301      	str	r3, [sp, #4]
	return list->head == list;
10005116:	69a5      	ldr	r5, [r4, #24]
10005118:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000511a:	42a5      	cmp	r5, r4
1000511c:	d001      	beq.n	10005122 <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
1000511e:	2d00      	cmp	r5, #0
10005120:	d107      	bne.n	10005132 <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
10005122:	9b01      	ldr	r3, [sp, #4]
10005124:	2b00      	cmp	r3, #0
10005126:	d0ac      	beq.n	10005082 <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
10005128:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000512a:	2202      	movs	r2, #2
1000512c:	4252      	negs	r2, r2
1000512e:	17d3      	asrs	r3, r2, #31
10005130:	e7db      	b.n	100050ea <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
10005132:	0028      	movs	r0, r5
10005134:	f000 fd43 	bl	10005bbe <z_unpend_thread_no_timeout>
10005138:	2300      	movs	r3, #0
1000513a:	66eb      	str	r3, [r5, #108]	; 0x6c
1000513c:	9b01      	ldr	r3, [sp, #4]
1000513e:	2b00      	cmp	r3, #0
10005140:	d102      	bne.n	10005148 <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
10005142:	b662      	cpsie	i
10005144:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
10005148:	0028      	movs	r0, r5
1000514a:	f000 fd2c 	bl	10005ba6 <z_ready_thread>
1000514e:	e7eb      	b.n	10005128 <z_timer_expiration_handler+0xbc>
10005150:	1000506d 	.word	0x1000506d

10005154 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10005154:	b570      	push	{r4, r5, r6, lr}
10005156:	0006      	movs	r6, r0
10005158:	0014      	movs	r4, r2
1000515a:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
1000515c:	1c51      	adds	r1, r2, #1
1000515e:	d101      	bne.n	10005164 <z_impl_k_timer_start+0x10>
10005160:	1c59      	adds	r1, r3, #1
10005162:	d022      	beq.n	100051aa <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
10005164:	2b00      	cmp	r3, #0
10005166:	da03      	bge.n	10005170 <z_impl_k_timer_start+0x1c>
10005168:	1c59      	adds	r1, r3, #1
1000516a:	d10f      	bne.n	1000518c <z_impl_k_timer_start+0x38>
1000516c:	1c91      	adds	r1, r2, #2
1000516e:	d90d      	bls.n	1000518c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
10005170:	0014      	movs	r4, r2
10005172:	1e1d      	subs	r5, r3, #0
10005174:	dc05      	bgt.n	10005182 <z_impl_k_timer_start+0x2e>
10005176:	2b00      	cmp	r3, #0
10005178:	d101      	bne.n	1000517e <z_impl_k_timer_start+0x2a>
1000517a:	2a00      	cmp	r2, #0
1000517c:	d101      	bne.n	10005182 <z_impl_k_timer_start+0x2e>
1000517e:	2401      	movs	r4, #1
10005180:	2500      	movs	r5, #0
10005182:	2201      	movs	r2, #1
10005184:	4252      	negs	r2, r2
10005186:	17d3      	asrs	r3, r2, #31
10005188:	18a4      	adds	r4, r4, r2
1000518a:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
1000518c:	0030      	movs	r0, r6
1000518e:	f000 fd8d 	bl	10005cac <z_abort_timeout>
	timer->period = period;
10005192:	9a04      	ldr	r2, [sp, #16]
10005194:	9b05      	ldr	r3, [sp, #20]
10005196:	62b2      	str	r2, [r6, #40]	; 0x28
10005198:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
1000519a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000519c:	0022      	movs	r2, r4
	timer->status = 0U;
1000519e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100051a0:	0030      	movs	r0, r6
100051a2:	002b      	movs	r3, r5
100051a4:	4901      	ldr	r1, [pc, #4]	; (100051ac <z_impl_k_timer_start+0x58>)
100051a6:	f7ff fe6f 	bl	10004e88 <z_add_timeout>
		     duration);
}
100051aa:	bd70      	pop	{r4, r5, r6, pc}
100051ac:	1000506d 	.word	0x1000506d

100051b0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
100051b0:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
100051b2:	4802      	ldr	r0, [pc, #8]	; (100051bc <boot_banner+0xc>)
100051b4:	f000 f859 	bl	1000526a <printk>
#endif /* CONFIG_BOOT_BANNER */
}
100051b8:	bd10      	pop	{r4, pc}
100051ba:	46c0      	nop			; (mov r8, r8)
100051bc:	100067bf 	.word	0x100067bf

100051c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100051c0:	4770      	bx	lr

100051c2 <gpio_pin_interrupt_configure_dt.constprop.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
100051c2:	0003      	movs	r3, r0
100051c4:	b510      	push	{r4, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
100051c6:	6800      	ldr	r0, [r0, #0]
100051c8:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
100051ca:	2401      	movs	r4, #1
100051cc:	408c      	lsls	r4, r1
100051ce:	6903      	ldr	r3, [r0, #16]
	const struct gpio_driver_api *api =
100051d0:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
100051d2:	681b      	ldr	r3, [r3, #0]
100051d4:	4023      	ands	r3, r4
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
100051d6:	1e5c      	subs	r4, r3, #1
100051d8:	41a3      	sbcs	r3, r4
100051da:	24b8      	movs	r4, #184	; 0xb8
100051dc:	425b      	negs	r3, r3
100051de:	0e5b      	lsrs	r3, r3, #25
100051e0:	04e4      	lsls	r4, r4, #19
100051e2:	065b      	lsls	r3, r3, #25
100051e4:	191b      	adds	r3, r3, r4
	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
100051e6:	24c0      	movs	r4, #192	; 0xc0
100051e8:	04e4      	lsls	r4, r4, #19
100051ea:	4023      	ands	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
100051ec:	6994      	ldr	r4, [r2, #24]
100051ee:	22a0      	movs	r2, #160	; 0xa0
100051f0:	0452      	lsls	r2, r2, #17
100051f2:	47a0      	blx	r4
}
100051f4:	bd10      	pop	{r4, pc}

100051f6 <gpio_is_ready_dt.isra.0>:
static inline bool gpio_is_ready_dt(const struct gpio_dt_spec *spec)
100051f6:	b510      	push	{r4, lr}
100051f8:	f000 fc68 	bl	10005acc <z_device_is_ready>
}
100051fc:	bd10      	pop	{r4, pc}

100051fe <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
100051fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10005200:	b085      	sub	sp, #20
10005202:	000d      	movs	r5, r1
10005204:	1e1c      	subs	r4, r3, #0
10005206:	9002      	str	r0, [sp, #8]
10005208:	9203      	str	r2, [sp, #12]
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
1000520a:	d029      	beq.n	10005260 <cbpprintf_external+0x62>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
1000520c:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
1000520e:	785b      	ldrb	r3, [r3, #1]
10005210:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
10005212:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
10005214:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10005216:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
10005218:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000521a:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
1000521c:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000521e:	18c0      	adds	r0, r0, r3
10005220:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
10005222:	9b01      	ldr	r3, [sp, #4]
10005224:	429e      	cmp	r6, r3
10005226:	d310      	bcc.n	1000524a <cbpprintf_external+0x4c>

	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10005228:	7962      	ldrb	r2, [r4, #5]
1000522a:	7923      	ldrb	r3, [r4, #4]
1000522c:	0212      	lsls	r2, r2, #8
1000522e:	431a      	orrs	r2, r3
10005230:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
10005232:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10005234:	041b      	lsls	r3, r3, #16
10005236:	4313      	orrs	r3, r2
10005238:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
1000523a:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000523c:	0612      	lsls	r2, r2, #24
1000523e:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10005240:	0023      	movs	r3, r4
10005242:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
10005244:	47a8      	blx	r5
}
10005246:	b005      	add	sp, #20
10005248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
1000524a:	7803      	ldrb	r3, [r0, #0]
1000524c:	1c47      	adds	r7, r0, #1
		*ps = s;
1000524e:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
10005250:	0038      	movs	r0, r7
		*ps = s;
10005252:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
10005254:	f000 f92d 	bl	100054b2 <strlen>
10005258:	3001      	adds	r0, #1
1000525a:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
1000525c:	3601      	adds	r6, #1
1000525e:	e7e0      	b.n	10005222 <cbpprintf_external+0x24>
		return -EINVAL;
10005260:	2016      	movs	r0, #22
10005262:	4240      	negs	r0, r0
10005264:	e7ef      	b.n	10005246 <cbpprintf_external+0x48>

10005266 <arch_printk_char_out>:
}
10005266:	2000      	movs	r0, #0
10005268:	4770      	bx	lr

1000526a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
1000526a:	b40f      	push	{r0, r1, r2, r3}
1000526c:	b507      	push	{r0, r1, r2, lr}
1000526e:	a904      	add	r1, sp, #16
10005270:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10005272:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
10005274:	f000 f888 	bl	10005388 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
10005278:	b003      	add	sp, #12
1000527a:	bc08      	pop	{r3}
1000527c:	b004      	add	sp, #16
1000527e:	4718      	bx	r3

10005280 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10005280:	b510      	push	{r4, lr}
10005282:	0004      	movs	r4, r0
10005284:	0008      	movs	r0, r1
10005286:	0011      	movs	r1, r2
10005288:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000528a:	47a0      	blx	r4
	return z_impl_z_current_get();
1000528c:	f7ff fd36 	bl	10004cfc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10005290:	f7fe f97c 	bl	1000358c <z_impl_k_thread_abort>

10005294 <encode_uint>:
{
10005294:	b5f0      	push	{r4, r5, r6, r7, lr}
10005296:	b085      	sub	sp, #20
10005298:	9001      	str	r0, [sp, #4]
1000529a:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
1000529c:	78d3      	ldrb	r3, [r2, #3]
{
1000529e:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
100052a0:	001a      	movs	r2, r3
100052a2:	3a41      	subs	r2, #65	; 0x41
100052a4:	000f      	movs	r7, r1
	switch (specifier) {
100052a6:	2408      	movs	r4, #8
100052a8:	9202      	str	r2, [sp, #8]
100052aa:	2b6f      	cmp	r3, #111	; 0x6f
100052ac:	d00a      	beq.n	100052c4 <encode_uint+0x30>
100052ae:	d804      	bhi.n	100052ba <encode_uint+0x26>
		return 16;
100052b0:	1924      	adds	r4, r4, r4
	switch (specifier) {
100052b2:	2b58      	cmp	r3, #88	; 0x58
100052b4:	d006      	beq.n	100052c4 <encode_uint+0x30>
		return 10;
100052b6:	3c06      	subs	r4, #6
100052b8:	e004      	b.n	100052c4 <encode_uint+0x30>
	switch (specifier) {
100052ba:	2208      	movs	r2, #8
		return 16;
100052bc:	2410      	movs	r4, #16
	switch (specifier) {
100052be:	4393      	bics	r3, r2
100052c0:	2b70      	cmp	r3, #112	; 0x70
100052c2:	d1f8      	bne.n	100052b6 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
100052c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
100052c6:	0022      	movs	r2, r4
100052c8:	2300      	movs	r3, #0
100052ca:	0039      	movs	r1, r7
100052cc:	9801      	ldr	r0, [sp, #4]
100052ce:	f7fb f843 	bl	10000358 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100052d2:	0013      	movs	r3, r2
100052d4:	468c      	mov	ip, r1
100052d6:	b2d2      	uxtb	r2, r2
100052d8:	2b09      	cmp	r3, #9
100052da:	d81a      	bhi.n	10005312 <encode_uint+0x7e>
100052dc:	3230      	adds	r2, #48	; 0x30
100052de:	b2d3      	uxtb	r3, r2
100052e0:	3e01      	subs	r6, #1
100052e2:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
100052e4:	2300      	movs	r3, #0
100052e6:	42bb      	cmp	r3, r7
100052e8:	d102      	bne.n	100052f0 <encode_uint+0x5c>
100052ea:	9b01      	ldr	r3, [sp, #4]
100052ec:	429c      	cmp	r4, r3
100052ee:	d802      	bhi.n	100052f6 <encode_uint+0x62>
100052f0:	9b03      	ldr	r3, [sp, #12]
100052f2:	429e      	cmp	r6, r3
100052f4:	d80a      	bhi.n	1000530c <encode_uint+0x78>
	if (conv->flag_hash) {
100052f6:	782b      	ldrb	r3, [r5, #0]
100052f8:	069b      	lsls	r3, r3, #26
100052fa:	d504      	bpl.n	10005306 <encode_uint+0x72>
		if (radix == 8) {
100052fc:	2c08      	cmp	r4, #8
100052fe:	d110      	bne.n	10005322 <encode_uint+0x8e>
			conv->altform_0 = true;
10005300:	78ab      	ldrb	r3, [r5, #2]
10005302:	4323      	orrs	r3, r4
10005304:	70ab      	strb	r3, [r5, #2]
}
10005306:	0030      	movs	r0, r6
10005308:	b005      	add	sp, #20
1000530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
1000530c:	4667      	mov	r7, ip
1000530e:	9001      	str	r0, [sp, #4]
10005310:	e7d9      	b.n	100052c6 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10005312:	0013      	movs	r3, r2
10005314:	9902      	ldr	r1, [sp, #8]
10005316:	3357      	adds	r3, #87	; 0x57
10005318:	b2db      	uxtb	r3, r3
1000531a:	2919      	cmp	r1, #25
1000531c:	d8e0      	bhi.n	100052e0 <encode_uint+0x4c>
1000531e:	3237      	adds	r2, #55	; 0x37
10005320:	e7dd      	b.n	100052de <encode_uint+0x4a>
		} else if (radix == 16) {
10005322:	2c10      	cmp	r4, #16
10005324:	d1ef      	bne.n	10005306 <encode_uint+0x72>
			conv->altform_0c = true;
10005326:	78ab      	ldrb	r3, [r5, #2]
10005328:	431c      	orrs	r4, r3
1000532a:	70ac      	strb	r4, [r5, #2]
	return bp;
1000532c:	e7eb      	b.n	10005306 <encode_uint+0x72>

1000532e <outs>:
{
1000532e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005330:	0007      	movs	r7, r0
10005332:	0015      	movs	r5, r2
10005334:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10005336:	0014      	movs	r4, r2
{
10005338:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000533a:	42a6      	cmp	r6, r4
1000533c:	d806      	bhi.n	1000534c <outs+0x1e>
1000533e:	2e00      	cmp	r6, #0
10005340:	d001      	beq.n	10005346 <outs+0x18>
	return (int)count;
10005342:	1b60      	subs	r0, r4, r5
10005344:	e008      	b.n	10005358 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10005346:	7823      	ldrb	r3, [r4, #0]
10005348:	2b00      	cmp	r3, #0
1000534a:	d0fa      	beq.n	10005342 <outs+0x14>
		int rc = out((int)*sp++, ctx);
1000534c:	7820      	ldrb	r0, [r4, #0]
1000534e:	9901      	ldr	r1, [sp, #4]
10005350:	47b8      	blx	r7
		if (rc < 0) {
10005352:	3401      	adds	r4, #1
10005354:	2800      	cmp	r0, #0
10005356:	daf0      	bge.n	1000533a <outs+0xc>
}
10005358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000535a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
1000535a:	4770      	bx	lr

1000535c <dummy_timestamp>:
}
1000535c:	2000      	movs	r0, #0
1000535e:	4770      	bx	lr

10005360 <default_lf_get_timestamp>:
{
10005360:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
10005362:	f000 fcba 	bl	10005cda <z_impl_k_uptime_ticks>
10005366:	220a      	movs	r2, #10
10005368:	2300      	movs	r3, #0
1000536a:	f7fa fff5 	bl	10000358 <__aeabi_uldivmod>
}
1000536e:	bd10      	pop	{r4, pc}

10005370 <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
10005370:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
10005372:	2101      	movs	r1, #1
10005374:	f000 fcce 	bl	10005d14 <z_impl_atomic_add>
	return atomic_add(target, 1);

}
10005378:	bd10      	pop	{r4, pc}

1000537a <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
1000537a:	2100      	movs	r1, #0
{
1000537c:	b510      	push	{r4, lr}
		(void)z_log_init(false, false);
1000537e:	0008      	movs	r0, r1
10005380:	f7fd fbbe 	bl	10002b00 <z_log_init.isra.0>
	}

	return 0;
}
10005384:	2000      	movs	r0, #0
10005386:	bd10      	pop	{r4, pc}

10005388 <z_log_vprintk>:
{
10005388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000538a:	9002      	str	r0, [sp, #8]
1000538c:	2000      	movs	r0, #0
1000538e:	9103      	str	r1, [sp, #12]
10005390:	0003      	movs	r3, r0
10005392:	0002      	movs	r2, r0
10005394:	0001      	movs	r1, r0
10005396:	9001      	str	r0, [sp, #4]
10005398:	9000      	str	r0, [sp, #0]
1000539a:	f7fd fcb3 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
1000539e:	b005      	add	sp, #20
100053a0:	bd00      	pop	{pc}

100053a2 <z_log_notify_backend_enabled>:
}
100053a2:	4770      	bx	lr

100053a4 <z_log_get_tag>:
}
100053a4:	2000      	movs	r0, #0
100053a6:	4770      	bx	lr

100053a8 <z_log_msg_finalize>:
{
100053a8:	b570      	push	{r4, r5, r6, lr}
100053aa:	000e      	movs	r6, r1
100053ac:	0004      	movs	r4, r0
100053ae:	0015      	movs	r5, r2
100053b0:	0019      	movs	r1, r3
	if (!msg) {
100053b2:	2800      	cmp	r0, #0
100053b4:	d102      	bne.n	100053bc <z_log_msg_finalize+0x14>
		z_log_dropped(false);
100053b6:	f7fd fc57 	bl	10002c68 <z_log_dropped>
}
100053ba:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
100053bc:	2b00      	cmp	r3, #0
100053be:	d006      	beq.n	100053ce <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
100053c0:	032b      	lsls	r3, r5, #12
100053c2:	0d5b      	lsrs	r3, r3, #21
100053c4:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
100053c6:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
100053c8:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
100053ca:	f000 f884 	bl	100054d6 <memcpy>
	z_log_msg_commit(msg);
100053ce:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
100053d0:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
100053d2:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
100053d4:	f7fd fc58 	bl	10002c88 <z_log_msg_commit>
100053d8:	e7ef      	b.n	100053ba <z_log_msg_finalize+0x12>

100053da <out_func>:
{
100053da:	b513      	push	{r0, r1, r4, lr}
		char x = (char)c;
100053dc:	466b      	mov	r3, sp
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
100053de:	684a      	ldr	r2, [r1, #4]
		char x = (char)c;
100053e0:	71d8      	strb	r0, [r3, #7]
100053e2:	3307      	adds	r3, #7
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
100053e4:	680c      	ldr	r4, [r1, #0]
100053e6:	0018      	movs	r0, r3
100053e8:	2101      	movs	r1, #1
100053ea:	6852      	ldr	r2, [r2, #4]
100053ec:	47a0      	blx	r4
}
100053ee:	2000      	movs	r0, #0
100053f0:	bd16      	pop	{r1, r2, r4, pc}

100053f2 <cr_out_func>:
{
100053f2:	b570      	push	{r4, r5, r6, lr}
100053f4:	0004      	movs	r4, r0
100053f6:	000d      	movs	r5, r1
	if (c == '\n') {
100053f8:	280a      	cmp	r0, #10
100053fa:	d102      	bne.n	10005402 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
100053fc:	200d      	movs	r0, #13
100053fe:	f7ff ffec 	bl	100053da <out_func>
	out_func(c, ctx);
10005402:	0029      	movs	r1, r5
10005404:	0020      	movs	r0, r4
10005406:	f7ff ffe8 	bl	100053da <out_func>
}
1000540a:	2000      	movs	r0, #0
1000540c:	bd70      	pop	{r4, r5, r6, pc}

1000540e <buffer_write>:
{
1000540e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005410:	0006      	movs	r6, r0
10005412:	000d      	movs	r5, r1
10005414:	0014      	movs	r4, r2
10005416:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
10005418:	0021      	movs	r1, r4
1000541a:	0028      	movs	r0, r5
1000541c:	003a      	movs	r2, r7
1000541e:	47b0      	blx	r6
		len -= processed;
10005420:	1a24      	subs	r4, r4, r0
		buf += processed;
10005422:	182d      	adds	r5, r5, r0
	} while (len != 0);
10005424:	2c00      	cmp	r4, #0
10005426:	d1f7      	bne.n	10005418 <buffer_write+0xa>
}
10005428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000542a <cbvprintf>:
{
1000542a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
1000542c:	2400      	movs	r4, #0
1000542e:	9400      	str	r4, [sp, #0]
10005430:	f7fc ffd2 	bl	100023d8 <z_cbvprintf_impl>
}
10005434:	bd16      	pop	{r1, r2, r4, pc}

10005436 <log_output_flush>:
{
10005436:	b510      	push	{r4, lr}
		     output->control_block->offset,
10005438:	6842      	ldr	r2, [r0, #4]
{
1000543a:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
1000543c:	ca0c      	ldmia	r2, {r2, r3}
1000543e:	6881      	ldr	r1, [r0, #8]
10005440:	6800      	ldr	r0, [r0, #0]
10005442:	f7ff ffe4 	bl	1000540e <buffer_write>
	output->control_block->offset = 0;
10005446:	2200      	movs	r2, #0
10005448:	6863      	ldr	r3, [r4, #4]
1000544a:	601a      	str	r2, [r3, #0]
}
1000544c:	bd10      	pop	{r4, pc}

1000544e <log_backend_uart_init>:
}
1000544e:	4770      	bx	lr

10005450 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005452:	ab0b      	add	r3, sp, #44	; 0x2c
10005454:	9305      	str	r3, [sp, #20]
10005456:	2000      	movs	r0, #0
10005458:	9303      	str	r3, [sp, #12]
1000545a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000545c:	2201      	movs	r2, #1
1000545e:	9302      	str	r3, [sp, #8]
10005460:	9001      	str	r0, [sp, #4]
10005462:	0003      	movs	r3, r0
10005464:	9000      	str	r0, [sp, #0]
10005466:	f7fd fc4d 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
1000546a:	b007      	add	sp, #28
1000546c:	bd00      	pop	{pc}

1000546e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
1000546e:	b510      	push	{r4, lr}
10005470:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
10005472:	6800      	ldr	r0, [r0, #0]
10005474:	f7fd fe8c 	bl	10003190 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10005478:	bd10      	pop	{r4, pc}

1000547a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
1000547a:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
1000547c:	2100      	movs	r1, #0
1000547e:	2001      	movs	r0, #1
10005480:	f7fd fe86 	bl	10003190 <z_arm_fatal_error>
}
10005484:	bd10      	pop	{r4, pc}

10005486 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10005486:	b510      	push	{r4, lr}
	handler();
10005488:	f7fd ff08 	bl	1000329c <z_SysNmiOnReset>
	z_arm_int_exit();
1000548c:	f7fd ffb2 	bl	100033f4 <z_arm_exc_exit>
}
10005490:	bd10      	pop	{r4, pc}

10005492 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005492:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005494:	ab0b      	add	r3, sp, #44	; 0x2c
10005496:	9305      	str	r3, [sp, #20]
10005498:	2000      	movs	r0, #0
1000549a:	9303      	str	r3, [sp, #12]
1000549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000549e:	2201      	movs	r2, #1
100054a0:	9302      	str	r3, [sp, #8]
100054a2:	9001      	str	r0, [sp, #4]
100054a4:	0003      	movs	r3, r0
100054a6:	9000      	str	r0, [sp, #0]
100054a8:	f7fd fc2c 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
100054ac:	b007      	add	sp, #28
100054ae:	bd00      	pop	{pc}

100054b0 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
100054b0:	4770      	bx	lr

100054b2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100054b2:	0003      	movs	r3, r0
	size_t n = 0;
100054b4:	2000      	movs	r0, #0

	while (*s != '\0') {
100054b6:	5c1a      	ldrb	r2, [r3, r0]
100054b8:	2a00      	cmp	r2, #0
100054ba:	d100      	bne.n	100054be <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
100054bc:	4770      	bx	lr
		n++;
100054be:	3001      	adds	r0, #1
100054c0:	e7f9      	b.n	100054b6 <strlen+0x4>

100054c2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
100054c2:	0003      	movs	r3, r0
	size_t n = 0;
100054c4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
100054c6:	5c1a      	ldrb	r2, [r3, r0]
100054c8:	2a00      	cmp	r2, #0
100054ca:	d001      	beq.n	100054d0 <strnlen+0xe>
100054cc:	4288      	cmp	r0, r1
100054ce:	d100      	bne.n	100054d2 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
100054d0:	4770      	bx	lr
		n++;
100054d2:	3001      	adds	r0, #1
100054d4:	e7f7      	b.n	100054c6 <strnlen+0x4>

100054d6 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
100054d6:	2300      	movs	r3, #0
{
100054d8:	b510      	push	{r4, lr}
	while (n > 0) {
100054da:	429a      	cmp	r2, r3
100054dc:	d100      	bne.n	100054e0 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
100054de:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
100054e0:	5ccc      	ldrb	r4, [r1, r3]
100054e2:	54c4      	strb	r4, [r0, r3]
		n--;
100054e4:	3301      	adds	r3, #1
100054e6:	e7f8      	b.n	100054da <memcpy+0x4>

100054e8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
100054e8:	0003      	movs	r3, r0
100054ea:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
100054ec:	1882      	adds	r2, r0, r2
100054ee:	4293      	cmp	r3, r2
100054f0:	d100      	bne.n	100054f4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
100054f2:	4770      	bx	lr
		*(d_byte++) = c_byte;
100054f4:	7019      	strb	r1, [r3, #0]
		n--;
100054f6:	3301      	adds	r3, #1
100054f8:	e7f9      	b.n	100054ee <memset+0x6>

100054fa <_stdout_hook_default>:
	return EOF;
100054fa:	2001      	movs	r0, #1
}
100054fc:	4240      	negs	r0, r0
100054fe:	4770      	bx	lr

10005500 <adc_rpi_configure_func_0>:
			      &adc_rpi_data_##idx,				   \
			      &adc_rpi_config_##idx, POST_KERNEL,		   \
			      CONFIG_ADC_INIT_PRIORITY,				   \
			      &adc_rpi_api_##idx)

DT_INST_FOREACH_STATUS_OKAY(ADC_RPI_INIT);
10005500:	b510      	push	{r4, lr}
10005502:	2200      	movs	r2, #0
10005504:	2103      	movs	r1, #3
10005506:	2016      	movs	r0, #22
10005508:	f7fd fe9e 	bl	10003248 <z_arm_irq_priority_set>
1000550c:	2016      	movs	r0, #22
1000550e:	f7fd fe8f 	bl	10003230 <arch_irq_enable>
10005512:	bd10      	pop	{r4, pc}

10005514 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005516:	ab0b      	add	r3, sp, #44	; 0x2c
10005518:	9305      	str	r3, [sp, #20]
1000551a:	2000      	movs	r0, #0
1000551c:	9303      	str	r3, [sp, #12]
1000551e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10005520:	2201      	movs	r2, #1
10005522:	9302      	str	r3, [sp, #8]
10005524:	9001      	str	r0, [sp, #4]
10005526:	0003      	movs	r3, r0
10005528:	9000      	str	r0, [sp, #0]
1000552a:	f7fd fbeb 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
1000552e:	b007      	add	sp, #28
10005530:	bd00      	pop	{pc}

10005532 <adc_context_on_timer_expired>:
{
10005532:	b510      	push	{r4, lr}
10005534:	0004      	movs	r4, r0
	if (atomic_inc(&ctx->sampling_requested) == 0) {
10005536:	3c08      	subs	r4, #8
10005538:	2101      	movs	r1, #1
1000553a:	0020      	movs	r0, r4
1000553c:	f000 fbea 	bl	10005d14 <z_impl_atomic_add>
10005540:	2800      	cmp	r0, #0
10005542:	d103      	bne.n	1000554c <adc_context_on_timer_expired+0x1a>
		adc_context_start_sampling(ctx);
10005544:	0020      	movs	r0, r4
10005546:	f7fe f8e3 	bl	10003710 <adc_context_start_sampling>
}
1000554a:	bd10      	pop	{r4, pc}
		ctx->status = -EBUSY;
1000554c:	2310      	movs	r3, #16
1000554e:	425b      	negs	r3, r3
10005550:	6623      	str	r3, [r4, #96]	; 0x60
}
10005552:	e7fa      	b.n	1000554a <adc_context_on_timer_expired+0x18>

10005554 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10005554:	23d0      	movs	r3, #208	; 0xd0
10005556:	061b      	lsls	r3, r3, #24
10005558:	685b      	ldr	r3, [r3, #4]
}
1000555a:	2000      	movs	r0, #0
	*value = gpio_get_all();
1000555c:	600b      	str	r3, [r1, #0]
}
1000555e:	4770      	bx	lr

10005560 <gpio_rpi_port_set_bits_raw>:
{
10005560:	000a      	movs	r2, r1
10005562:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10005564:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10005566:	0010      	movs	r0, r2
10005568:	6919      	ldr	r1, [r3, #16]
1000556a:	4388      	bics	r0, r1
1000556c:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
1000556e:	20d0      	movs	r0, #208	; 0xd0
10005570:	0600      	lsls	r0, r0, #24
10005572:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
10005574:	691c      	ldr	r4, [r3, #16]
10005576:	6959      	ldr	r1, [r3, #20]
10005578:	4021      	ands	r1, r4
1000557a:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
1000557c:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
1000557e:	6919      	ldr	r1, [r3, #16]
10005580:	695b      	ldr	r3, [r3, #20]
10005582:	4011      	ands	r1, r2
10005584:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10005586:	6241      	str	r1, [r0, #36]	; 0x24
}
10005588:	2000      	movs	r0, #0
1000558a:	bd10      	pop	{r4, pc}

1000558c <gpio_rpi_port_clear_bits_raw>:
{
1000558c:	000a      	movs	r2, r1
1000558e:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10005590:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
10005592:	0010      	movs	r0, r2
10005594:	6919      	ldr	r1, [r3, #16]
10005596:	4388      	bics	r0, r1
10005598:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
1000559a:	20d0      	movs	r0, #208	; 0xd0
1000559c:	0600      	lsls	r0, r0, #24
1000559e:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
100055a0:	691c      	ldr	r4, [r3, #16]
100055a2:	6959      	ldr	r1, [r3, #20]
100055a4:	4021      	ands	r1, r4
100055a6:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
100055a8:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
100055aa:	6919      	ldr	r1, [r3, #16]
100055ac:	695b      	ldr	r3, [r3, #20]
100055ae:	4011      	ands	r1, r2
100055b0:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
100055b2:	6281      	str	r1, [r0, #40]	; 0x28
}
100055b4:	2000      	movs	r0, #0
100055b6:	bd10      	pop	{r4, pc}

100055b8 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
100055b8:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
100055ba:	0008      	movs	r0, r1
100055bc:	691a      	ldr	r2, [r3, #16]
100055be:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
100055c0:	22d0      	movs	r2, #208	; 0xd0
100055c2:	0612      	lsls	r2, r2, #24
100055c4:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
100055c6:	691b      	ldr	r3, [r3, #16]
}
100055c8:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
100055ca:	400b      	ands	r3, r1
100055cc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100055ce:	4770      	bx	lr

100055d0 <gpio_rpi_manage_callback>:
{
100055d0:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
100055d2:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100055d4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
100055d6:	2800      	cmp	r0, #0
100055d8:	d021      	beq.n	1000561e <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100055da:	4288      	cmp	r0, r1
100055dc:	d11b      	bne.n	10005616 <gpio_rpi_manage_callback+0x46>
	return node->next;
100055de:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
100055e0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
100055e2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100055e4:	42a1      	cmp	r1, r4
100055e6:	d100      	bne.n	100055ea <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100055e8:	6098      	str	r0, [r3, #8]
	parent->next = child;
100055ea:	2000      	movs	r0, #0
100055ec:	6008      	str	r0, [r1, #0]
	if (set) {
100055ee:	4282      	cmp	r2, r0
100055f0:	d006      	beq.n	10005600 <gpio_rpi_manage_callback+0x30>
	return list->head;
100055f2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
100055f4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
100055f6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
100055f8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
100055fa:	2a00      	cmp	r2, #0
100055fc:	d100      	bne.n	10005600 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
100055fe:	6099      	str	r1, [r3, #8]
	return 0;
10005600:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10005602:	e010      	b.n	10005626 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005604:	4281      	cmp	r1, r0
10005606:	d106      	bne.n	10005616 <gpio_rpi_manage_callback+0x46>
	return node->next;
10005608:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
1000560a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
1000560c:	6898      	ldr	r0, [r3, #8]
1000560e:	4281      	cmp	r1, r0
10005610:	d1eb      	bne.n	100055ea <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10005612:	609c      	str	r4, [r3, #8]
}
10005614:	e7e9      	b.n	100055ea <gpio_rpi_manage_callback+0x1a>
	return node->next;
10005616:	0004      	movs	r4, r0
10005618:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000561a:	2800      	cmp	r0, #0
1000561c:	d1f2      	bne.n	10005604 <gpio_rpi_manage_callback+0x34>
			if (!set) {
1000561e:	2a00      	cmp	r2, #0
10005620:	d1e7      	bne.n	100055f2 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10005622:	2016      	movs	r0, #22
10005624:	4240      	negs	r0, r0
}
10005626:	bd10      	pop	{r4, pc}

10005628 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10005628:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
1000562a:	6843      	ldr	r3, [r0, #4]
1000562c:	685b      	ldr	r3, [r3, #4]
1000562e:	4798      	blx	r3
	return 0;
}
10005630:	2000      	movs	r0, #0
10005632:	bd10      	pop	{r4, pc}

10005634 <gpio_rpi_pin_interrupt_configure>:
{
10005634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005636:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10005638:	6907      	ldr	r7, [r0, #16]
{
1000563a:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000563c:	210f      	movs	r1, #15
1000563e:	2200      	movs	r2, #0
10005640:	0028      	movs	r0, r5
{
10005642:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005644:	f7fe fe16 	bl	10004274 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005648:	2201      	movs	r2, #1
1000564a:	0013      	movs	r3, r2
1000564c:	40ab      	lsls	r3, r5
1000564e:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10005650:	2380      	movs	r3, #128	; 0x80
10005652:	039b      	lsls	r3, r3, #14
10005654:	429e      	cmp	r6, r3
10005656:	d105      	bne.n	10005664 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005658:	68fb      	ldr	r3, [r7, #12]
1000565a:	9a01      	ldr	r2, [sp, #4]
1000565c:	4393      	bics	r3, r2
}
1000565e:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005660:	60fb      	str	r3, [r7, #12]
}
10005662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10005664:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10005666:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10005668:	04db      	lsls	r3, r3, #19
1000566a:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
1000566c:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
1000566e:	01f6      	lsls	r6, r6, #7
10005670:	d50d      	bpl.n	1000568e <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10005672:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10005674:	2b00      	cmp	r3, #0
10005676:	d001      	beq.n	1000567c <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10005678:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
1000567a:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
1000567c:	2201      	movs	r2, #1
1000567e:	0028      	movs	r0, r5
10005680:	f7fe fdf8 	bl	10004274 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005684:	68fb      	ldr	r3, [r7, #12]
10005686:	9a01      	ldr	r2, [sp, #4]
10005688:	431a      	orrs	r2, r3
1000568a:	0013      	movs	r3, r2
1000568c:	e7e7      	b.n	1000565e <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
1000568e:	2b00      	cmp	r3, #0
10005690:	d0f4      	beq.n	1000567c <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10005692:	2302      	movs	r3, #2
10005694:	e7f1      	b.n	1000567a <gpio_rpi_pin_interrupt_configure+0x46>

10005696 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10005696:	b510      	push	{r4, lr}
10005698:	2200      	movs	r2, #0
1000569a:	2103      	movs	r1, #3
1000569c:	200d      	movs	r0, #13
1000569e:	f7fd fdd3 	bl	10003248 <z_arm_irq_priority_set>
100056a2:	200d      	movs	r0, #13
100056a4:	f7fd fdc4 	bl	10003230 <arch_irq_enable>
100056a8:	bd10      	pop	{r4, pc}

100056aa <gpio_rpi_port_set_masked_raw>:
{
100056aa:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
100056ac:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100056ae:	20d0      	movs	r0, #208	; 0xd0
100056b0:	0600      	lsls	r0, r0, #24
100056b2:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
100056b4:	6925      	ldr	r5, [r4, #16]
100056b6:	4053      	eors	r3, r2
100056b8:	400b      	ands	r3, r1
100056ba:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
100056bc:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100056be:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
100056c0:	6a03      	ldr	r3, [r0, #32]
100056c2:	4053      	eors	r3, r2
100056c4:	439d      	bics	r5, r3
100056c6:	002b      	movs	r3, r5
100056c8:	6925      	ldr	r5, [r4, #16]
100056ca:	401d      	ands	r5, r3
100056cc:	6963      	ldr	r3, [r4, #20]
100056ce:	402b      	ands	r3, r5
100056d0:	62c3      	str	r3, [r0, #44]	; 0x2c
100056d2:	6a03      	ldr	r3, [r0, #32]
100056d4:	405a      	eors	r2, r3
100056d6:	400a      	ands	r2, r1
100056d8:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
100056da:	6963      	ldr	r3, [r4, #20]
100056dc:	4011      	ands	r1, r2
100056de:	4399      	bics	r1, r3
100056e0:	62c1      	str	r1, [r0, #44]	; 0x2c
}
100056e2:	2000      	movs	r0, #0
100056e4:	bd30      	pop	{r4, r5, pc}

100056e6 <gpio_rpi_configure>:
{
100056e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100056e8:	0015      	movs	r5, r2
100056ea:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
100056ec:	2401      	movs	r4, #1
100056ee:	0952      	lsrs	r2, r2, #5
100056f0:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
100056f2:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
100056f4:	4021      	ands	r1, r4
100056f6:	0038      	movs	r0, r7
100056f8:	4022      	ands	r2, r4
100056fa:	f7fe fd71 	bl	100041e0 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100056fe:	2105      	movs	r1, #5
10005700:	0038      	movs	r0, r7
10005702:	f7fe fd57 	bl	100041b4 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10005706:	03ab      	lsls	r3, r5, #14
10005708:	d525      	bpl.n	10005756 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
1000570a:	40bc      	lsls	r4, r7
1000570c:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
1000570e:	07a9      	lsls	r1, r5, #30
10005710:	d515      	bpl.n	1000573e <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
10005712:	4322      	orrs	r2, r4
10005714:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005716:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
10005718:	6971      	ldr	r1, [r6, #20]
1000571a:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
1000571c:	0768      	lsls	r0, r5, #29
1000571e:	d507      	bpl.n	10005730 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
10005720:	4321      	orrs	r1, r4
10005722:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
10005724:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
10005726:	036d      	lsls	r5, r5, #13
10005728:	d507      	bpl.n	1000573a <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
1000572a:	6254      	str	r4, [r2, #36]	; 0x24
}
1000572c:	2000      	movs	r0, #0
1000572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
10005730:	43a1      	bics	r1, r4
10005732:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
10005734:	6154      	str	r4, [r2, #20]
    if (out)
10005736:	032d      	lsls	r5, r5, #12
10005738:	d4f7      	bmi.n	1000572a <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
1000573a:	6294      	str	r4, [r2, #40]	; 0x28
}
1000573c:	e7f6      	b.n	1000572c <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
1000573e:	43a2      	bics	r2, r4
10005740:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
10005742:	22d0      	movs	r2, #208	; 0xd0
10005744:	0612      	lsls	r2, r2, #24
10005746:	0329      	lsls	r1, r5, #12
10005748:	d501      	bpl.n	1000574e <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
1000574a:	6154      	str	r4, [r2, #20]
}
1000574c:	e7ed      	b.n	1000572a <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000574e:	036d      	lsls	r5, r5, #13
10005750:	d5eb      	bpl.n	1000572a <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
10005752:	6194      	str	r4, [r2, #24]
}
10005754:	e7e9      	b.n	1000572a <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
10005756:	03ed      	lsls	r5, r5, #15
10005758:	d5e8      	bpl.n	1000572c <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
1000575a:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
1000575c:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
1000575e:	0612      	lsls	r2, r2, #24
10005760:	e7eb      	b.n	1000573a <gpio_rpi_configure+0x54>

10005762 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10005762:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10005764:	6803      	ldr	r3, [r0, #0]
10005766:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10005768:	7905      	ldrb	r5, [r0, #4]
1000576a:	6804      	ldr	r4, [r0, #0]
1000576c:	00ed      	lsls	r5, r5, #3
1000576e:	1964      	adds	r4, r4, r5
10005770:	42a3      	cmp	r3, r4
10005772:	d302      	bcc.n	1000577a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10005774:	2002      	movs	r0, #2
10005776:	4240      	negs	r0, r0
}
10005778:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
1000577a:	795c      	ldrb	r4, [r3, #5]
1000577c:	428c      	cmp	r4, r1
1000577e:	d001      	beq.n	10005784 <pinctrl_lookup_state+0x22>
		(*state)++;
10005780:	3308      	adds	r3, #8
10005782:	e7f0      	b.n	10005766 <pinctrl_lookup_state+0x4>
			return 0;
10005784:	2000      	movs	r0, #0
10005786:	e7f7      	b.n	10005778 <pinctrl_lookup_state+0x16>

10005788 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000578a:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000578c:	2601      	movs	r6, #1
1000578e:	008d      	lsls	r5, r1, #2
10005790:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10005792:	42ac      	cmp	r4, r5
10005794:	d101      	bne.n	1000579a <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10005796:	2000      	movs	r0, #0
10005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
1000579a:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
1000579c:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000579e:	06c0      	lsls	r0, r0, #27
100057a0:	0ec0      	lsrs	r0, r0, #27
100057a2:	f000 f987 	bl	10005ab4 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100057a6:	8821      	ldrh	r1, [r4, #0]
100057a8:	7820      	ldrb	r0, [r4, #0]
100057aa:	05c9      	lsls	r1, r1, #23
100057ac:	06c0      	lsls	r0, r0, #27
100057ae:	0f09      	lsrs	r1, r1, #28
100057b0:	0ec0      	lsrs	r0, r0, #27
100057b2:	f7fe fcff 	bl	100041b4 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100057b6:	7861      	ldrb	r1, [r4, #1]
100057b8:	7820      	ldrb	r0, [r4, #0]
100057ba:	09ca      	lsrs	r2, r1, #7
100057bc:	06c0      	lsls	r0, r0, #27
100057be:	0649      	lsls	r1, r1, #25
100057c0:	0fc9      	lsrs	r1, r1, #31
100057c2:	0ec0      	lsrs	r0, r0, #27
100057c4:	f7fe fd0c 	bl	100041e0 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
100057c8:	7861      	ldrb	r1, [r4, #1]
100057ca:	7820      	ldrb	r0, [r4, #0]
100057cc:	06c9      	lsls	r1, r1, #27
100057ce:	06c0      	lsls	r0, r0, #27
100057d0:	0f09      	lsrs	r1, r1, #28
100057d2:	0ec0      	lsrs	r0, r0, #27
100057d4:	f7fe fd32 	bl	1000423c <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100057d8:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100057da:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100057dc:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100057de:	06c0      	lsls	r0, r0, #27
100057e0:	4031      	ands	r1, r6
100057e2:	0ec0      	lsrs	r0, r0, #27
100057e4:	f7fe fd1c 	bl	10004220 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
100057e8:	78a1      	ldrb	r1, [r4, #2]
100057ea:	7820      	ldrb	r0, [r4, #0]
100057ec:	0789      	lsls	r1, r1, #30
100057ee:	06c0      	lsls	r0, r0, #27
100057f0:	0fc9      	lsrs	r1, r1, #31
100057f2:	0ec0      	lsrs	r0, r0, #27
100057f4:	f7fe fd06 	bl	10004204 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100057f8:	78a1      	ldrb	r1, [r4, #2]
100057fa:	7820      	ldrb	r0, [r4, #0]
100057fc:	07c9      	lsls	r1, r1, #31
100057fe:	06c0      	lsls	r0, r0, #27
10005800:	0fc9      	lsrs	r1, r1, #31
10005802:	0ec0      	lsrs	r0, r0, #27
10005804:	f7fe fd58 	bl	100042b8 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10005808:	003c      	movs	r4, r7
1000580a:	e7c2      	b.n	10005792 <pinctrl_configure_pins+0xa>

1000580c <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
1000580c:	2000      	movs	r0, #0
1000580e:	4770      	bx	lr

10005810 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10005810:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10005812:	7900      	ldrb	r0, [r0, #4]
10005814:	2802      	cmp	r0, #2
10005816:	d009      	beq.n	1000582c <reset_rpi_read_register.isra.0+0x1c>
10005818:	2804      	cmp	r0, #4
1000581a:	d00b      	beq.n	10005834 <reset_rpi_read_register.isra.0+0x24>
1000581c:	2801      	cmp	r0, #1
1000581e:	d10c      	bne.n	1000583a <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
10005820:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
10005822:	780b      	ldrb	r3, [r1, #0]
10005824:	b2db      	uxtb	r3, r3
	return 0;
10005826:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10005828:	6013      	str	r3, [r2, #0]
}
1000582a:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
1000582c:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
1000582e:	880b      	ldrh	r3, [r1, #0]
10005830:	b29b      	uxth	r3, r3
		break;
10005832:	e7f8      	b.n	10005826 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10005834:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10005836:	680b      	ldr	r3, [r1, #0]
		break;
10005838:	e7f5      	b.n	10005826 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
1000583a:	2016      	movs	r0, #22
1000583c:	4240      	negs	r0, r0
1000583e:	e7f4      	b.n	1000582a <reset_rpi_read_register.isra.0+0x1a>

10005840 <reset_rpi_update>:
{
10005840:	0003      	movs	r3, r0
10005842:	b5f0      	push	{r4, r5, r6, r7, lr}
10005844:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10005846:	685f      	ldr	r7, [r3, #4]
{
10005848:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
1000584a:	793e      	ldrb	r6, [r7, #4]
{
1000584c:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000584e:	00f1      	lsls	r1, r6, #3
10005850:	f7fa fcfa 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005854:	aa03      	add	r2, sp, #12
10005856:	0004      	movs	r4, r0
10005858:	000d      	movs	r5, r1
1000585a:	b281      	uxth	r1, r0
1000585c:	0038      	movs	r0, r7
1000585e:	f7ff ffd7 	bl	10005810 <reset_rpi_read_register.isra.0>
	if (ret) {
10005862:	2800      	cmp	r0, #0
10005864:	d117      	bne.n	10005896 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10005866:	2201      	movs	r2, #1
10005868:	9903      	ldr	r1, [sp, #12]
1000586a:	b2ed      	uxtb	r5, r5
1000586c:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
1000586e:	000b      	movs	r3, r1
		value |= BIT(regbit);
10005870:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
10005872:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10005874:	797d      	ldrb	r5, [r7, #5]
10005876:	9a01      	ldr	r2, [sp, #4]
10005878:	4295      	cmp	r5, r2
1000587a:	d001      	beq.n	10005880 <reset_rpi_update+0x40>
		value |= BIT(regbit);
1000587c:	4663      	mov	r3, ip
1000587e:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10005880:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
10005882:	2e02      	cmp	r6, #2
10005884:	d009      	beq.n	1000589a <reset_rpi_update+0x5a>
10005886:	2e04      	cmp	r6, #4
10005888:	d00c      	beq.n	100058a4 <reset_rpi_update+0x64>
1000588a:	2e01      	cmp	r6, #1
1000588c:	d10e      	bne.n	100058ac <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000588e:	b2a4      	uxth	r4, r4
10005890:	b2db      	uxtb	r3, r3
10005892:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005894:	7023      	strb	r3, [r4, #0]
}
10005896:	b005      	add	sp, #20
10005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
1000589a:	b2a4      	uxth	r4, r4
1000589c:	b29b      	uxth	r3, r3
1000589e:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
100058a0:	8023      	strh	r3, [r4, #0]
}
100058a2:	e7f8      	b.n	10005896 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
100058a4:	b2a4      	uxth	r4, r4
100058a6:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100058a8:	6023      	str	r3, [r4, #0]
}
100058aa:	e7f4      	b.n	10005896 <reset_rpi_update+0x56>
	switch (config->reg_width) {
100058ac:	2016      	movs	r0, #22
100058ae:	4240      	negs	r0, r0
100058b0:	e7f1      	b.n	10005896 <reset_rpi_update+0x56>

100058b2 <reset_rpi_line_assert>:
{
100058b2:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
100058b4:	2201      	movs	r2, #1
100058b6:	f7ff ffc3 	bl	10005840 <reset_rpi_update>
}
100058ba:	bd10      	pop	{r4, pc}

100058bc <reset_rpi_line_deassert>:
{
100058bc:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
100058be:	2200      	movs	r2, #0
100058c0:	f7ff ffbe 	bl	10005840 <reset_rpi_update>
}
100058c4:	bd10      	pop	{r4, pc}

100058c6 <reset_rpi_line_toggle>:
{
100058c6:	b570      	push	{r4, r5, r6, lr}
100058c8:	0004      	movs	r4, r0
100058ca:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
100058cc:	f7ff fff1 	bl	100058b2 <reset_rpi_line_assert>
	if (ret) {
100058d0:	2800      	cmp	r0, #0
100058d2:	d103      	bne.n	100058dc <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
100058d4:	0029      	movs	r1, r5
100058d6:	0020      	movs	r0, r4
100058d8:	f7ff fff0 	bl	100058bc <reset_rpi_line_deassert>
}
100058dc:	bd70      	pop	{r4, r5, r6, pc}

100058de <reset_rpi_status>:
{
100058de:	0003      	movs	r3, r0
100058e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
100058e2:	685e      	ldr	r6, [r3, #4]
{
100058e4:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100058e6:	7931      	ldrb	r1, [r6, #4]
{
100058e8:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
100058ea:	00c9      	lsls	r1, r1, #3
100058ec:	f7fa fcac 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100058f0:	aa01      	add	r2, sp, #4
100058f2:	000d      	movs	r5, r1
100058f4:	b281      	uxth	r1, r0
100058f6:	0030      	movs	r0, r6
100058f8:	f7ff ff8a 	bl	10005810 <reset_rpi_read_register.isra.0>
	if (ret) {
100058fc:	2800      	cmp	r0, #0
100058fe:	d109      	bne.n	10005914 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10005900:	9b01      	ldr	r3, [sp, #4]
10005902:	b2ed      	uxtb	r5, r5
10005904:	40eb      	lsrs	r3, r5
10005906:	2201      	movs	r2, #1
10005908:	439a      	bics	r2, r3
1000590a:	7973      	ldrb	r3, [r6, #5]
1000590c:	4259      	negs	r1, r3
1000590e:	414b      	adcs	r3, r1
10005910:	4053      	eors	r3, r2
10005912:	7023      	strb	r3, [r4, #0]
}
10005914:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10005916 <uart_rpi_poll_in>:
{
10005916:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005918:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000591a:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000591c:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000591e:	699c      	ldr	r4, [r3, #24]
10005920:	0020      	movs	r0, r4
10005922:	4010      	ands	r0, r2
10005924:	4214      	tst	r4, r2
10005926:	d102      	bne.n	1000592e <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10005928:	681b      	ldr	r3, [r3, #0]
1000592a:	700b      	strb	r3, [r1, #0]
}
1000592c:	bd10      	pop	{r4, pc}
		return -1;
1000592e:	2001      	movs	r0, #1
10005930:	4240      	negs	r0, r0
10005932:	e7fb      	b.n	1000592c <uart_rpi_poll_in+0x16>

10005934 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005934:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005936:	6843      	ldr	r3, [r0, #4]
10005938:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000593a:	6998      	ldr	r0, [r3, #24]
1000593c:	4210      	tst	r0, r2
1000593e:	d1fc      	bne.n	1000593a <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10005940:	6019      	str	r1, [r3, #0]
}
10005942:	4770      	bx	lr

10005944 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005944:	6843      	ldr	r3, [r0, #4]
10005946:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10005948:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
1000594a:	0518      	lsls	r0, r3, #20
1000594c:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000594e:	055a      	lsls	r2, r3, #21
10005950:	d501      	bpl.n	10005956 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10005952:	2208      	movs	r2, #8
10005954:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10005956:	059a      	lsls	r2, r3, #22
10005958:	d501      	bpl.n	1000595e <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
1000595a:	2202      	movs	r2, #2
1000595c:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000595e:	05db      	lsls	r3, r3, #23
10005960:	d501      	bpl.n	10005966 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10005962:	2304      	movs	r3, #4
10005964:	4318      	orrs	r0, r3
}
10005966:	4770      	bx	lr

10005968 <uart_rpi_fifo_fill>:
{
10005968:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000596a:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000596c:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000596e:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10005970:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005972:	699c      	ldr	r4, [r3, #24]
10005974:	422c      	tst	r4, r5
10005976:	d102      	bne.n	1000597e <uart_rpi_fifo_fill+0x16>
10005978:	1a14      	subs	r4, r2, r0
1000597a:	2c00      	cmp	r4, #0
1000597c:	dc00      	bgt.n	10005980 <uart_rpi_fifo_fill+0x18>
}
1000597e:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10005980:	5c0c      	ldrb	r4, [r1, r0]
10005982:	3001      	adds	r0, #1
10005984:	601c      	str	r4, [r3, #0]
10005986:	e7f4      	b.n	10005972 <uart_rpi_fifo_fill+0xa>

10005988 <uart_rpi_fifo_read>:
{
10005988:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000598a:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000598c:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000598e:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10005990:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005992:	699c      	ldr	r4, [r3, #24]
10005994:	422c      	tst	r4, r5
10005996:	d102      	bne.n	1000599e <uart_rpi_fifo_read+0x16>
10005998:	1a14      	subs	r4, r2, r0
1000599a:	2c00      	cmp	r4, #0
1000599c:	dc00      	bgt.n	100059a0 <uart_rpi_fifo_read+0x18>
}
1000599e:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
100059a0:	681c      	ldr	r4, [r3, #0]
100059a2:	540c      	strb	r4, [r1, r0]
100059a4:	3001      	adds	r0, #1
100059a6:	e7f4      	b.n	10005992 <uart_rpi_fifo_read+0xa>

100059a8 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100059a8:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100059aa:	6843      	ldr	r3, [r0, #4]
100059ac:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100059ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
100059b0:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100059b2:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100059b4:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100059b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100059b8:	438a      	bics	r2, r1
100059ba:	635a      	str	r2, [r3, #52]	; 0x34
}
100059bc:	4770      	bx	lr

100059be <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100059be:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100059c0:	6843      	ldr	r3, [r0, #4]
100059c2:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100059c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
100059c6:	438b      	bics	r3, r1
100059c8:	6393      	str	r3, [r2, #56]	; 0x38
}
100059ca:	4770      	bx	lr

100059cc <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100059cc:	6843      	ldr	r3, [r0, #4]
100059ce:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
100059d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
100059d2:	0680      	lsls	r0, r0, #26
100059d4:	0fc0      	lsrs	r0, r0, #31
}
100059d6:	4770      	bx	lr

100059d8 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100059d8:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100059da:	6843      	ldr	r3, [r0, #4]
100059dc:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100059de:	6b99      	ldr	r1, [r3, #56]	; 0x38
100059e0:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100059e2:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100059e4:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100059e8:	438a      	bics	r2, r1
100059ea:	635a      	str	r2, [r3, #52]	; 0x34
}
100059ec:	4770      	bx	lr

100059ee <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100059ee:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100059f0:	6843      	ldr	r3, [r0, #4]
100059f2:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100059f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
100059f6:	438b      	bics	r3, r1
100059f8:	6393      	str	r3, [r2, #56]	; 0x38
}
100059fa:	4770      	bx	lr

100059fc <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100059fc:	6843      	ldr	r3, [r0, #4]
100059fe:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10005a00:	6998      	ldr	r0, [r3, #24]
10005a02:	0600      	lsls	r0, r0, #24
10005a04:	0fc0      	lsrs	r0, r0, #31
}
10005a06:	4770      	bx	lr

10005a08 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005a08:	6843      	ldr	r3, [r0, #4]
10005a0a:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10005a0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
10005a0e:	06c0      	lsls	r0, r0, #27
10005a10:	0fc0      	lsrs	r0, r0, #31
}
10005a12:	4770      	bx	lr

10005a14 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005a14:	6843      	ldr	r3, [r0, #4]
10005a16:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005a18:	23f8      	movs	r3, #248	; 0xf8
10005a1a:	6b91      	ldr	r1, [r2, #56]	; 0x38
10005a1c:	00db      	lsls	r3, r3, #3
10005a1e:	430b      	orrs	r3, r1
10005a20:	6393      	str	r3, [r2, #56]	; 0x38
}
10005a22:	4770      	bx	lr

10005a24 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10005a24:	b510      	push	{r4, lr}
10005a26:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10005a28:	f7ff ffee 	bl	10005a08 <uart_rpi_irq_rx_ready>
10005a2c:	0003      	movs	r3, r0
10005a2e:	2001      	movs	r0, #1
10005a30:	2b00      	cmp	r3, #0
10005a32:	d104      	bne.n	10005a3e <uart_rpi_irq_is_pending+0x1a>
10005a34:	0020      	movs	r0, r4
10005a36:	f7ff ffc9 	bl	100059cc <uart_rpi_irq_tx_ready>
10005a3a:	1e43      	subs	r3, r0, #1
10005a3c:	4198      	sbcs	r0, r3
}
10005a3e:	bd10      	pop	{r4, pc}

10005a40 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10005a40:	2001      	movs	r0, #1
10005a42:	4770      	bx	lr

10005a44 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10005a44:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10005a46:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10005a48:	60da      	str	r2, [r3, #12]
}
10005a4a:	4770      	bx	lr

10005a4c <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10005a4c:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10005a4e:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10005a50:	6893      	ldr	r3, [r2, #8]
10005a52:	2b00      	cmp	r3, #0
10005a54:	d001      	beq.n	10005a5a <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10005a56:	68d1      	ldr	r1, [r2, #12]
10005a58:	4798      	blx	r3
	}
}
10005a5a:	bd10      	pop	{r4, pc}

10005a5c <uart_rpi_config_get>:
{
10005a5c:	0003      	movs	r3, r0
10005a5e:	b510      	push	{r4, lr}
10005a60:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
10005a62:	2208      	movs	r2, #8
10005a64:	6919      	ldr	r1, [r3, #16]
10005a66:	f7ff fd36 	bl	100054d6 <memcpy>
}
10005a6a:	2000      	movs	r0, #0
10005a6c:	bd10      	pop	{r4, pc}

10005a6e <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10005a6e:	b510      	push	{r4, lr}
10005a70:	2200      	movs	r2, #0
10005a72:	2103      	movs	r1, #3
10005a74:	2014      	movs	r0, #20
10005a76:	f7fd fbe7 	bl	10003248 <z_arm_irq_priority_set>
10005a7a:	2014      	movs	r0, #20
10005a7c:	f7fd fbd8 	bl	10003230 <arch_irq_enable>
10005a80:	bd10      	pop	{r4, pc}

10005a82 <uart_rpi_configure>:
{
10005a82:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10005a84:	6843      	ldr	r3, [r0, #4]
{
10005a86:	0006      	movs	r6, r0
10005a88:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10005a8a:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10005a8c:	6809      	ldr	r1, [r1, #0]
10005a8e:	6818      	ldr	r0, [r3, #0]
10005a90:	f7fe fc20 	bl	100042d4 <uart_set_baudrate>
	if (baudrate == 0) {
10005a94:	2800      	cmp	r0, #0
10005a96:	d102      	bne.n	10005a9e <uart_rpi_configure+0x1c>
		return -EINVAL;
10005a98:	2016      	movs	r0, #22
10005a9a:	4240      	negs	r0, r0
}
10005a9c:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10005a9e:	79a3      	ldrb	r3, [r4, #6]
10005aa0:	7962      	ldrb	r2, [r4, #5]
10005aa2:	7921      	ldrb	r1, [r4, #4]
10005aa4:	6870      	ldr	r0, [r6, #4]
10005aa6:	f7fe f8c9 	bl	10003c3c <uart_rpi_set_format.isra.0>
10005aaa:	2800      	cmp	r0, #0
10005aac:	d1f4      	bne.n	10005a98 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10005aae:	cc06      	ldmia	r4!, {r1, r2}
10005ab0:	c506      	stmia	r5!, {r1, r2}
	return 0;
10005ab2:	e7f3      	b.n	10005a9c <uart_rpi_configure+0x1a>

10005ab4 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005ab4:	2301      	movs	r3, #1
10005ab6:	22d0      	movs	r2, #208	; 0xd0
10005ab8:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10005aba:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005abc:	0612      	lsls	r2, r2, #24
10005abe:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005ac0:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10005ac2:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005ac4:	f7fe fb76 	bl	100041b4 <gpio_set_function>
}
10005ac8:	bd10      	pop	{r4, pc}

10005aca <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10005aca:	4770      	bx	lr

10005acc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10005acc:	2800      	cmp	r0, #0
10005ace:	d009      	beq.n	10005ae4 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10005ad0:	2301      	movs	r3, #1
10005ad2:	68c2      	ldr	r2, [r0, #12]
10005ad4:	2000      	movs	r0, #0
10005ad6:	7851      	ldrb	r1, [r2, #1]
10005ad8:	4219      	tst	r1, r3
10005ada:	d002      	beq.n	10005ae2 <z_device_is_ready+0x16>
10005adc:	7810      	ldrb	r0, [r2, #0]
10005ade:	4242      	negs	r2, r0
10005ae0:	4150      	adcs	r0, r2
10005ae2:	4018      	ands	r0, r3
}
10005ae4:	4770      	bx	lr

10005ae6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005ae6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005ae8:	ab0b      	add	r3, sp, #44	; 0x2c
10005aea:	9305      	str	r3, [sp, #20]
10005aec:	2000      	movs	r0, #0
10005aee:	9303      	str	r3, [sp, #12]
10005af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10005af2:	2201      	movs	r2, #1
10005af4:	9302      	str	r3, [sp, #8]
10005af6:	9001      	str	r0, [sp, #4]
10005af8:	0003      	movs	r3, r0
10005afa:	9000      	str	r0, [sp, #0]
10005afc:	f7fd f902 	bl	10002d04 <z_impl_z_log_msg_runtime_vcreate>
}
10005b00:	b007      	add	sp, #28
10005b02:	bd00      	pop	{pc}

10005b04 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10005b04:	f3ef 8310 	mrs	r3, PRIMASK
10005b08:	b672      	cpsid	i
	for (;;) {
10005b0a:	e7fe      	b.n	10005b0a <arch_system_halt+0x6>

10005b0c <z_early_memset>:
{
10005b0c:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10005b0e:	f7ff fceb 	bl	100054e8 <memset>
}
10005b12:	bd10      	pop	{r4, pc}

10005b14 <z_early_memcpy>:
{
10005b14:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10005b16:	f7ff fcde 	bl	100054d6 <memcpy>
}
10005b1a:	bd10      	pop	{r4, pc}

10005b1c <k_thread_name_get>:
}
10005b1c:	2000      	movs	r0, #0
10005b1e:	4770      	bx	lr

10005b20 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10005b20:	b510      	push	{r4, lr}
10005b22:	f3ef 8310 	mrs	r3, PRIMASK
10005b26:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10005b28:	f7fd fb2a 	bl	10003180 <arch_cpu_idle>
10005b2c:	e7f9      	b.n	10005b22 <idle+0x2>

10005b2e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10005b2e:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10005b30:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005b32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005b34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005b36:	2300      	movs	r3, #0
10005b38:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005b3a:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10005b3c:	4770      	bx	lr

10005b3e <unpend_thread_no_timeout>:
{
10005b3e:	b510      	push	{r4, lr}
10005b40:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10005b42:	f7ff fff4 	bl	10005b2e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005b46:	2202      	movs	r2, #2
10005b48:	7b63      	ldrb	r3, [r4, #13]
10005b4a:	4393      	bics	r3, r2
10005b4c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10005b4e:	2300      	movs	r3, #0
10005b50:	60a3      	str	r3, [r4, #8]
}
10005b52:	bd10      	pop	{r4, pc}

10005b54 <add_to_waitq_locked>:
{
10005b54:	b570      	push	{r4, r5, r6, lr}
10005b56:	0004      	movs	r4, r0
10005b58:	000d      	movs	r5, r1
	unready_thread(thread);
10005b5a:	f7fe ff03 	bl	10004964 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10005b5e:	2302      	movs	r3, #2
10005b60:	7b62      	ldrb	r2, [r4, #13]
10005b62:	4313      	orrs	r3, r2
10005b64:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10005b66:	2d00      	cmp	r5, #0
10005b68:	d01c      	beq.n	10005ba4 <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
10005b6a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
10005b6c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005b6e:	429d      	cmp	r5, r3
10005b70:	d109      	bne.n	10005b86 <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
10005b72:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10005b74:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10005b76:	6063      	str	r3, [r4, #4]
	tail->next = node;
10005b78:	601c      	str	r4, [r3, #0]
	list->tail = node;
10005b7a:	606c      	str	r4, [r5, #4]
}
10005b7c:	e012      	b.n	10005ba4 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
10005b7e:	686a      	ldr	r2, [r5, #4]
10005b80:	4293      	cmp	r3, r2
10005b82:	d0f6      	beq.n	10005b72 <add_to_waitq_locked+0x1e>
10005b84:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10005b86:	2b00      	cmp	r3, #0
10005b88:	d0f3      	beq.n	10005b72 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
10005b8a:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
10005b8c:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
10005b8e:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
10005b90:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10005b92:	428a      	cmp	r2, r1
10005b94:	d0f3      	beq.n	10005b7e <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
10005b96:	4291      	cmp	r1, r2
10005b98:	ddf1      	ble.n	10005b7e <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
10005b9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10005b9c:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10005b9e:	6062      	str	r2, [r4, #4]
	prev->next = node;
10005ba0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10005ba2:	605c      	str	r4, [r3, #4]
}
10005ba4:	bd70      	pop	{r4, r5, r6, pc}

10005ba6 <z_ready_thread>:
{
10005ba6:	b510      	push	{r4, lr}
10005ba8:	f3ef 8410 	mrs	r4, PRIMASK
10005bac:	b672      	cpsid	i
			ready_thread(thread);
10005bae:	f7fe fea3 	bl	100048f8 <ready_thread>
	if (key != 0U) {
10005bb2:	2c00      	cmp	r4, #0
10005bb4:	d102      	bne.n	10005bbc <z_ready_thread+0x16>
	__asm__ volatile(
10005bb6:	b662      	cpsie	i
10005bb8:	f3bf 8f6f 	isb	sy
}
10005bbc:	bd10      	pop	{r4, pc}

10005bbe <z_unpend_thread_no_timeout>:
{
10005bbe:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005bc0:	f3ef 8410 	mrs	r4, PRIMASK
10005bc4:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
10005bc6:	6883      	ldr	r3, [r0, #8]
10005bc8:	2b00      	cmp	r3, #0
10005bca:	d001      	beq.n	10005bd0 <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
10005bcc:	f7ff ffb7 	bl	10005b3e <unpend_thread_no_timeout>
	if (key != 0U) {
10005bd0:	2c00      	cmp	r4, #0
10005bd2:	d102      	bne.n	10005bda <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
10005bd4:	b662      	cpsie	i
10005bd6:	f3bf 8f6f 	isb	sy
}
10005bda:	bd10      	pop	{r4, pc}

10005bdc <z_sched_wake_thread>:
{
10005bdc:	b570      	push	{r4, r5, r6, lr}
10005bde:	0004      	movs	r4, r0
10005be0:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10005be2:	f3ef 8510 	mrs	r5, PRIMASK
10005be6:	b672      	cpsid	i
		if (!killed) {
10005be8:	2328      	movs	r3, #40	; 0x28
10005bea:	7b42      	ldrb	r2, [r0, #13]
10005bec:	421a      	tst	r2, r3
10005bee:	d10e      	bne.n	10005c0e <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10005bf0:	6883      	ldr	r3, [r0, #8]
10005bf2:	2b00      	cmp	r3, #0
10005bf4:	d001      	beq.n	10005bfa <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10005bf6:	f7ff ffa2 	bl	10005b3e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005bfa:	2204      	movs	r2, #4
10005bfc:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10005bfe:	2e00      	cmp	r6, #0
10005c00:	d000      	beq.n	10005c04 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10005c02:	2214      	movs	r2, #20
10005c04:	4393      	bics	r3, r2
			ready_thread(thread);
10005c06:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10005c08:	7363      	strb	r3, [r4, #13]
10005c0a:	f7fe fe75 	bl	100048f8 <ready_thread>
	if (key != 0U) {
10005c0e:	2d00      	cmp	r5, #0
10005c10:	d102      	bne.n	10005c18 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10005c12:	b662      	cpsie	i
10005c14:	f3bf 8f6f 	isb	sy
}
10005c18:	bd70      	pop	{r4, r5, r6, pc}

10005c1a <z_thread_timeout>:
{
10005c1a:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10005c1c:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10005c1e:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10005c20:	f7ff ffdc 	bl	10005bdc <z_sched_wake_thread>
}
10005c24:	bd10      	pop	{r4, pc}

10005c26 <z_unpend1_no_timeout>:
{
10005c26:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005c28:	f3ef 8510 	mrs	r5, PRIMASK
10005c2c:	b672      	cpsid	i
	return list->head == list;
10005c2e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005c30:	42a0      	cmp	r0, r4
10005c32:	d00b      	beq.n	10005c4c <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
10005c34:	2c00      	cmp	r4, #0
10005c36:	d002      	beq.n	10005c3e <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
10005c38:	0020      	movs	r0, r4
10005c3a:	f7ff ff80 	bl	10005b3e <unpend_thread_no_timeout>
	if (key != 0U) {
10005c3e:	2d00      	cmp	r5, #0
10005c40:	d102      	bne.n	10005c48 <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
10005c42:	b662      	cpsie	i
10005c44:	f3bf 8f6f 	isb	sy
}
10005c48:	0020      	movs	r0, r4
10005c4a:	bd70      	pop	{r4, r5, r6, pc}
10005c4c:	2400      	movs	r4, #0
10005c4e:	e7f6      	b.n	10005c3e <z_unpend1_no_timeout+0x18>

10005c50 <z_unpend_first_thread>:
{
10005c50:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005c52:	f3ef 8510 	mrs	r5, PRIMASK
10005c56:	b672      	cpsid	i
	return list->head == list;
10005c58:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005c5a:	42a0      	cmp	r0, r4
10005c5c:	d00f      	beq.n	10005c7e <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
10005c5e:	2c00      	cmp	r4, #0
10005c60:	d006      	beq.n	10005c70 <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
10005c62:	0020      	movs	r0, r4
10005c64:	f7ff ff6b 	bl	10005b3e <unpend_thread_no_timeout>
10005c68:	0020      	movs	r0, r4
10005c6a:	3018      	adds	r0, #24
10005c6c:	f000 f81e 	bl	10005cac <z_abort_timeout>
	if (key != 0U) {
10005c70:	2d00      	cmp	r5, #0
10005c72:	d102      	bne.n	10005c7a <z_unpend_first_thread+0x2a>
	__asm__ volatile(
10005c74:	b662      	cpsie	i
10005c76:	f3bf 8f6f 	isb	sy
}
10005c7a:	0020      	movs	r0, r4
10005c7c:	bd70      	pop	{r4, r5, r6, pc}
10005c7e:	2400      	movs	r4, #0
10005c80:	e7f6      	b.n	10005c70 <z_unpend_first_thread+0x20>

10005c82 <z_reschedule_irqlock>:
{
10005c82:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10005c84:	2800      	cmp	r0, #0
10005c86:	d105      	bne.n	10005c94 <z_reschedule_irqlock+0x12>
10005c88:	f3ef 8005 	mrs	r0, IPSR
10005c8c:	2800      	cmp	r0, #0
10005c8e:	d102      	bne.n	10005c96 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10005c90:	f7fd fb1c 	bl	100032cc <arch_swap>
}
10005c94:	bd10      	pop	{r4, pc}
10005c96:	b662      	cpsie	i
10005c98:	f3bf 8f6f 	isb	sy
10005c9c:	e7fa      	b.n	10005c94 <z_reschedule_irqlock+0x12>

10005c9e <z_reschedule_unlocked>:
{
10005c9e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005ca0:	f3ef 8010 	mrs	r0, PRIMASK
10005ca4:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005ca6:	f7ff ffec 	bl	10005c82 <z_reschedule_irqlock>
}
10005caa:	bd10      	pop	{r4, pc}

10005cac <z_abort_timeout>:
{
10005cac:	b510      	push	{r4, lr}
10005cae:	f3ef 8410 	mrs	r4, PRIMASK
10005cb2:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10005cb4:	6803      	ldr	r3, [r0, #0]
10005cb6:	2b00      	cmp	r3, #0
10005cb8:	d008      	beq.n	10005ccc <z_abort_timeout+0x20>
			remove_timeout(to);
10005cba:	f7ff f8c9 	bl	10004e50 <remove_timeout>
			ret = 0;
10005cbe:	2000      	movs	r0, #0
	if (key != 0U) {
10005cc0:	2c00      	cmp	r4, #0
10005cc2:	d102      	bne.n	10005cca <z_abort_timeout+0x1e>
	__asm__ volatile(
10005cc4:	b662      	cpsie	i
10005cc6:	f3bf 8f6f 	isb	sy
}
10005cca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10005ccc:	2016      	movs	r0, #22
10005cce:	4240      	negs	r0, r0
10005cd0:	e7f6      	b.n	10005cc0 <z_abort_timeout+0x14>

10005cd2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10005cd2:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10005cd4:	f7ff f9b4 	bl	10005040 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10005cd8:	bd10      	pop	{r4, pc}

10005cda <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
10005cda:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
10005cdc:	f7ff f9b0 	bl	10005040 <sys_clock_tick_get>
}
10005ce0:	bd10      	pop	{r4, pc}

10005ce2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
10005ce2:	b510      	push	{r4, lr}
10005ce4:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
10005ce6:	f7ff ffe1 	bl	10005cac <z_abort_timeout>

	if (inactive) {
10005cea:	2800      	cmp	r0, #0
10005cec:	d111      	bne.n	10005d12 <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
10005cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005cf0:	2b00      	cmp	r3, #0
10005cf2:	d001      	beq.n	10005cf8 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
10005cf4:	0020      	movs	r0, r4
10005cf6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
10005cf8:	0020      	movs	r0, r4
10005cfa:	3018      	adds	r0, #24
10005cfc:	f7ff ff93 	bl	10005c26 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
10005d00:	2800      	cmp	r0, #0
10005d02:	d006      	beq.n	10005d12 <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
10005d04:	f7ff ff4f 	bl	10005ba6 <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
10005d08:	f3ef 8010 	mrs	r0, PRIMASK
10005d0c:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005d0e:	f7ff ffb8 	bl	10005c82 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
10005d12:	bd10      	pop	{r4, pc}

10005d14 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
10005d14:	0003      	movs	r3, r0
10005d16:	f3ef 8210 	mrs	r2, PRIMASK
10005d1a:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d1c:	6800      	ldr	r0, [r0, #0]
	*target += value;
10005d1e:	1841      	adds	r1, r0, r1
10005d20:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d22:	2a00      	cmp	r2, #0
10005d24:	d102      	bne.n	10005d2c <z_impl_atomic_add+0x18>
	__asm__ volatile(
10005d26:	b662      	cpsie	i
10005d28:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d2c:	4770      	bx	lr

10005d2e <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
10005d2e:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005d30:	f3ef 8210 	mrs	r2, PRIMASK
10005d34:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d36:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10005d38:	1a41      	subs	r1, r0, r1
10005d3a:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d3c:	2a00      	cmp	r2, #0
10005d3e:	d102      	bne.n	10005d46 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
10005d40:	b662      	cpsie	i
10005d42:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d46:	4770      	bx	lr

10005d48 <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
10005d48:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005d4a:	f3ef 8210 	mrs	r2, PRIMASK
10005d4e:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10005d50:	6800      	ldr	r0, [r0, #0]
	*target = value;
10005d52:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10005d54:	2a00      	cmp	r2, #0
10005d56:	d102      	bne.n	10005d5e <z_impl_atomic_set+0x16>
	__asm__ volatile(
10005d58:	b662      	cpsie	i
10005d5a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10005d5e:	4770      	bx	lr
