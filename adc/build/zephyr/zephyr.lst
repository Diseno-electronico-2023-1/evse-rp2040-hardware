
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20001070 10003501 100058df 100034bd     p.. .5...X...4..
	...
1000012c:	100032f9 00000000 00000000 10003299     .2...........2..
1000013c:	10003db1                                .=..

10000140 <_irq_vector_table>:
10000140:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
10000150:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
10000160:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
10000170:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
10000180:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
10000190:	10003369 10003369 10003369 10003369     i3..i3..i3..i3..
100001a0:	10003369 10003369                       i3..i3..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f85f 	bl	10000304 <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__divsi3>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d041      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>

10000260 <.divsi3_skip_div0_test>:
10000260:	b410      	push	{r4}
10000262:	0004      	movs	r4, r0
10000264:	404c      	eors	r4, r1
10000266:	46a4      	mov	ip, r4
10000268:	2301      	movs	r3, #1
1000026a:	2200      	movs	r2, #0
1000026c:	2900      	cmp	r1, #0
1000026e:	d500      	bpl.n	10000272 <.divsi3_skip_div0_test+0x12>
10000270:	4249      	negs	r1, r1
10000272:	2800      	cmp	r0, #0
10000274:	d500      	bpl.n	10000278 <.divsi3_skip_div0_test+0x18>
10000276:	4240      	negs	r0, r0
10000278:	4288      	cmp	r0, r1
1000027a:	d32c      	bcc.n	100002d6 <.divsi3_skip_div0_test+0x76>
1000027c:	2401      	movs	r4, #1
1000027e:	0724      	lsls	r4, r4, #28
10000280:	42a1      	cmp	r1, r4
10000282:	d204      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000284:	4281      	cmp	r1, r0
10000286:	d202      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000288:	0109      	lsls	r1, r1, #4
1000028a:	011b      	lsls	r3, r3, #4
1000028c:	e7f8      	b.n	10000280 <.divsi3_skip_div0_test+0x20>
1000028e:	00e4      	lsls	r4, r4, #3
10000290:	42a1      	cmp	r1, r4
10000292:	d204      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000294:	4281      	cmp	r1, r0
10000296:	d202      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000298:	0049      	lsls	r1, r1, #1
1000029a:	005b      	lsls	r3, r3, #1
1000029c:	e7f8      	b.n	10000290 <.divsi3_skip_div0_test+0x30>
1000029e:	4288      	cmp	r0, r1
100002a0:	d301      	bcc.n	100002a6 <.divsi3_skip_div0_test+0x46>
100002a2:	1a40      	subs	r0, r0, r1
100002a4:	431a      	orrs	r2, r3
100002a6:	084c      	lsrs	r4, r1, #1
100002a8:	42a0      	cmp	r0, r4
100002aa:	d302      	bcc.n	100002b2 <.divsi3_skip_div0_test+0x52>
100002ac:	1b00      	subs	r0, r0, r4
100002ae:	085c      	lsrs	r4, r3, #1
100002b0:	4322      	orrs	r2, r4
100002b2:	088c      	lsrs	r4, r1, #2
100002b4:	42a0      	cmp	r0, r4
100002b6:	d302      	bcc.n	100002be <.divsi3_skip_div0_test+0x5e>
100002b8:	1b00      	subs	r0, r0, r4
100002ba:	089c      	lsrs	r4, r3, #2
100002bc:	4322      	orrs	r2, r4
100002be:	08cc      	lsrs	r4, r1, #3
100002c0:	42a0      	cmp	r0, r4
100002c2:	d302      	bcc.n	100002ca <.divsi3_skip_div0_test+0x6a>
100002c4:	1b00      	subs	r0, r0, r4
100002c6:	08dc      	lsrs	r4, r3, #3
100002c8:	4322      	orrs	r2, r4
100002ca:	2800      	cmp	r0, #0
100002cc:	d003      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002ce:	091b      	lsrs	r3, r3, #4
100002d0:	d001      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002d2:	0909      	lsrs	r1, r1, #4
100002d4:	e7e3      	b.n	1000029e <.divsi3_skip_div0_test+0x3e>
100002d6:	0010      	movs	r0, r2
100002d8:	4664      	mov	r4, ip
100002da:	2c00      	cmp	r4, #0
100002dc:	d500      	bpl.n	100002e0 <.divsi3_skip_div0_test+0x80>
100002de:	4240      	negs	r0, r0
100002e0:	bc10      	pop	{r4}
100002e2:	4770      	bx	lr
100002e4:	b501      	push	{r0, lr}
100002e6:	2000      	movs	r0, #0
100002e8:	f000 f80c 	bl	10000304 <__aeabi_idiv0>
100002ec:	bd02      	pop	{r1, pc}
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_idivmod>:
100002f0:	2900      	cmp	r1, #0
100002f2:	d0f7      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>
100002f4:	b503      	push	{r0, r1, lr}
100002f6:	f7ff ffb3 	bl	10000260 <.divsi3_skip_div0_test>
100002fa:	bc0e      	pop	{r1, r2, r3}
100002fc:	4342      	muls	r2, r0
100002fe:	1a89      	subs	r1, r1, r2
10000300:	4718      	bx	r3
10000302:	46c0      	nop			; (mov r8, r8)

10000304 <__aeabi_idiv0>:
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)

10000308 <__aeabi_cdrcmple>:
10000308:	4684      	mov	ip, r0
1000030a:	0010      	movs	r0, r2
1000030c:	4662      	mov	r2, ip
1000030e:	468c      	mov	ip, r1
10000310:	0019      	movs	r1, r3
10000312:	4663      	mov	r3, ip
10000314:	e000      	b.n	10000318 <__aeabi_cdcmpeq>
10000316:	46c0      	nop			; (mov r8, r8)

10000318 <__aeabi_cdcmpeq>:
10000318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000031a:	f000 fd77 	bl	10000e0c <__ledf2>
1000031e:	2800      	cmp	r0, #0
10000320:	d401      	bmi.n	10000326 <__aeabi_cdcmpeq+0xe>
10000322:	2100      	movs	r1, #0
10000324:	42c8      	cmn	r0, r1
10000326:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000328 <__aeabi_dcmpeq>:
10000328:	b510      	push	{r4, lr}
1000032a:	f000 fcb7 	bl	10000c9c <__eqdf2>
1000032e:	4240      	negs	r0, r0
10000330:	3001      	adds	r0, #1
10000332:	bd10      	pop	{r4, pc}

10000334 <__aeabi_dcmplt>:
10000334:	b510      	push	{r4, lr}
10000336:	f000 fd69 	bl	10000e0c <__ledf2>
1000033a:	2800      	cmp	r0, #0
1000033c:	db01      	blt.n	10000342 <__aeabi_dcmplt+0xe>
1000033e:	2000      	movs	r0, #0
10000340:	bd10      	pop	{r4, pc}
10000342:	2001      	movs	r0, #1
10000344:	bd10      	pop	{r4, pc}
10000346:	46c0      	nop			; (mov r8, r8)

10000348 <__aeabi_dcmple>:
10000348:	b510      	push	{r4, lr}
1000034a:	f000 fd5f 	bl	10000e0c <__ledf2>
1000034e:	2800      	cmp	r0, #0
10000350:	dd01      	ble.n	10000356 <__aeabi_dcmple+0xe>
10000352:	2000      	movs	r0, #0
10000354:	bd10      	pop	{r4, pc}
10000356:	2001      	movs	r0, #1
10000358:	bd10      	pop	{r4, pc}
1000035a:	46c0      	nop			; (mov r8, r8)

1000035c <__aeabi_dcmpgt>:
1000035c:	b510      	push	{r4, lr}
1000035e:	f000 fcdf 	bl	10000d20 <__gedf2>
10000362:	2800      	cmp	r0, #0
10000364:	dc01      	bgt.n	1000036a <__aeabi_dcmpgt+0xe>
10000366:	2000      	movs	r0, #0
10000368:	bd10      	pop	{r4, pc}
1000036a:	2001      	movs	r0, #1
1000036c:	bd10      	pop	{r4, pc}
1000036e:	46c0      	nop			; (mov r8, r8)

10000370 <__aeabi_dcmpge>:
10000370:	b510      	push	{r4, lr}
10000372:	f000 fcd5 	bl	10000d20 <__gedf2>
10000376:	2800      	cmp	r0, #0
10000378:	da01      	bge.n	1000037e <__aeabi_dcmpge+0xe>
1000037a:	2000      	movs	r0, #0
1000037c:	bd10      	pop	{r4, pc}
1000037e:	2001      	movs	r0, #1
10000380:	bd10      	pop	{r4, pc}
10000382:	46c0      	nop			; (mov r8, r8)

10000384 <__clzsi2>:
10000384:	211c      	movs	r1, #28
10000386:	2301      	movs	r3, #1
10000388:	041b      	lsls	r3, r3, #16
1000038a:	4298      	cmp	r0, r3
1000038c:	d301      	bcc.n	10000392 <__clzsi2+0xe>
1000038e:	0c00      	lsrs	r0, r0, #16
10000390:	3910      	subs	r1, #16
10000392:	0a1b      	lsrs	r3, r3, #8
10000394:	4298      	cmp	r0, r3
10000396:	d301      	bcc.n	1000039c <__clzsi2+0x18>
10000398:	0a00      	lsrs	r0, r0, #8
1000039a:	3908      	subs	r1, #8
1000039c:	091b      	lsrs	r3, r3, #4
1000039e:	4298      	cmp	r0, r3
100003a0:	d301      	bcc.n	100003a6 <__clzsi2+0x22>
100003a2:	0900      	lsrs	r0, r0, #4
100003a4:	3904      	subs	r1, #4
100003a6:	a202      	add	r2, pc, #8	; (adr r2, 100003b0 <__clzsi2+0x2c>)
100003a8:	5c10      	ldrb	r0, [r2, r0]
100003aa:	1840      	adds	r0, r0, r1
100003ac:	4770      	bx	lr
100003ae:	46c0      	nop			; (mov r8, r8)
100003b0:	02020304 	.word	0x02020304
100003b4:	01010101 	.word	0x01010101
	...

100003c0 <__ctzsi2>:
100003c0:	4241      	negs	r1, r0
100003c2:	4008      	ands	r0, r1
100003c4:	211c      	movs	r1, #28
100003c6:	2301      	movs	r3, #1
100003c8:	041b      	lsls	r3, r3, #16
100003ca:	4298      	cmp	r0, r3
100003cc:	d301      	bcc.n	100003d2 <__ctzsi2+0x12>
100003ce:	0c00      	lsrs	r0, r0, #16
100003d0:	3910      	subs	r1, #16
100003d2:	0a1b      	lsrs	r3, r3, #8
100003d4:	4298      	cmp	r0, r3
100003d6:	d301      	bcc.n	100003dc <__ctzsi2+0x1c>
100003d8:	0a00      	lsrs	r0, r0, #8
100003da:	3908      	subs	r1, #8
100003dc:	091b      	lsrs	r3, r3, #4
100003de:	4298      	cmp	r0, r3
100003e0:	d301      	bcc.n	100003e6 <__ctzsi2+0x26>
100003e2:	0900      	lsrs	r0, r0, #4
100003e4:	3904      	subs	r1, #4
100003e6:	a202      	add	r2, pc, #8	; (adr r2, 100003f0 <__ctzsi2+0x30>)
100003e8:	5c10      	ldrb	r0, [r2, r0]
100003ea:	1a40      	subs	r0, r0, r1
100003ec:	4770      	bx	lr
100003ee:	46c0      	nop			; (mov r8, r8)
100003f0:	1d1d1c1b 	.word	0x1d1d1c1b
100003f4:	1e1e1e1e 	.word	0x1e1e1e1e
100003f8:	1f1f1f1f 	.word	0x1f1f1f1f
100003fc:	1f1f1f1f 	.word	0x1f1f1f1f

10000400 <__aeabi_uldivmod>:
10000400:	2b00      	cmp	r3, #0
10000402:	d111      	bne.n	10000428 <__aeabi_uldivmod+0x28>
10000404:	2a00      	cmp	r2, #0
10000406:	d10f      	bne.n	10000428 <__aeabi_uldivmod+0x28>
10000408:	2900      	cmp	r1, #0
1000040a:	d100      	bne.n	1000040e <__aeabi_uldivmod+0xe>
1000040c:	2800      	cmp	r0, #0
1000040e:	d002      	beq.n	10000416 <__aeabi_uldivmod+0x16>
10000410:	2100      	movs	r1, #0
10000412:	43c9      	mvns	r1, r1
10000414:	0008      	movs	r0, r1
10000416:	b407      	push	{r0, r1, r2}
10000418:	4802      	ldr	r0, [pc, #8]	; (10000424 <__aeabi_uldivmod+0x24>)
1000041a:	a102      	add	r1, pc, #8	; (adr r1, 10000424 <__aeabi_uldivmod+0x24>)
1000041c:	1840      	adds	r0, r0, r1
1000041e:	9002      	str	r0, [sp, #8]
10000420:	bd03      	pop	{r0, r1, pc}
10000422:	46c0      	nop			; (mov r8, r8)
10000424:	fffffee1 	.word	0xfffffee1
10000428:	b403      	push	{r0, r1}
1000042a:	4668      	mov	r0, sp
1000042c:	b501      	push	{r0, lr}
1000042e:	9802      	ldr	r0, [sp, #8]
10000430:	f001 fc2b 	bl	10001c8a <__udivmoddi4>
10000434:	9b01      	ldr	r3, [sp, #4]
10000436:	469e      	mov	lr, r3
10000438:	b002      	add	sp, #8
1000043a:	bc0c      	pop	{r2, r3}
1000043c:	4770      	bx	lr
1000043e:	46c0      	nop			; (mov r8, r8)

10000440 <__aeabi_f2ulz>:
10000440:	b5d0      	push	{r4, r6, r7, lr}
10000442:	f001 fab9 	bl	100019b8 <__aeabi_f2d>
10000446:	2200      	movs	r2, #0
10000448:	4b0b      	ldr	r3, [pc, #44]	; (10000478 <__aeabi_f2ulz+0x38>)
1000044a:	0006      	movs	r6, r0
1000044c:	000f      	movs	r7, r1
1000044e:	f000 fd55 	bl	10000efc <__aeabi_dmul>
10000452:	f001 fba3 	bl	10001b9c <__aeabi_d2uiz>
10000456:	0004      	movs	r4, r0
10000458:	f001 fa8e 	bl	10001978 <__aeabi_ui2d>
1000045c:	2200      	movs	r2, #0
1000045e:	4b07      	ldr	r3, [pc, #28]	; (1000047c <__aeabi_f2ulz+0x3c>)
10000460:	f000 fd4c 	bl	10000efc <__aeabi_dmul>
10000464:	0002      	movs	r2, r0
10000466:	000b      	movs	r3, r1
10000468:	0030      	movs	r0, r6
1000046a:	0039      	movs	r1, r7
1000046c:	f000 ff70 	bl	10001350 <__aeabi_dsub>
10000470:	f001 fb94 	bl	10001b9c <__aeabi_d2uiz>
10000474:	0021      	movs	r1, r4
10000476:	bdd0      	pop	{r4, r6, r7, pc}
10000478:	3df00000 	.word	0x3df00000
1000047c:	41f00000 	.word	0x41f00000

10000480 <__aeabi_fdiv>:
10000480:	b5f0      	push	{r4, r5, r6, r7, lr}
10000482:	0fc3      	lsrs	r3, r0, #31
10000484:	b085      	sub	sp, #20
10000486:	0244      	lsls	r4, r0, #9
10000488:	0045      	lsls	r5, r0, #1
1000048a:	1c0f      	adds	r7, r1, #0
1000048c:	0a64      	lsrs	r4, r4, #9
1000048e:	0e2d      	lsrs	r5, r5, #24
10000490:	9303      	str	r3, [sp, #12]
10000492:	9302      	str	r3, [sp, #8]
10000494:	d00a      	beq.n	100004ac <__aeabi_fdiv+0x2c>
10000496:	2dff      	cmp	r5, #255	; 0xff
10000498:	d03b      	beq.n	10000512 <__aeabi_fdiv+0x92>
1000049a:	2380      	movs	r3, #128	; 0x80
1000049c:	00e4      	lsls	r4, r4, #3
1000049e:	04db      	lsls	r3, r3, #19
100004a0:	431c      	orrs	r4, r3
100004a2:	2300      	movs	r3, #0
100004a4:	3d7f      	subs	r5, #127	; 0x7f
100004a6:	9501      	str	r5, [sp, #4]
100004a8:	9300      	str	r3, [sp, #0]
100004aa:	e00e      	b.n	100004ca <__aeabi_fdiv+0x4a>
100004ac:	2301      	movs	r3, #1
100004ae:	9401      	str	r4, [sp, #4]
100004b0:	9300      	str	r3, [sp, #0]
100004b2:	2c00      	cmp	r4, #0
100004b4:	d009      	beq.n	100004ca <__aeabi_fdiv+0x4a>
100004b6:	0020      	movs	r0, r4
100004b8:	f7ff ff64 	bl	10000384 <__clzsi2>
100004bc:	1f43      	subs	r3, r0, #5
100004be:	409c      	lsls	r4, r3
100004c0:	2376      	movs	r3, #118	; 0x76
100004c2:	425b      	negs	r3, r3
100004c4:	1a1b      	subs	r3, r3, r0
100004c6:	9301      	str	r3, [sp, #4]
100004c8:	9500      	str	r5, [sp, #0]
100004ca:	027d      	lsls	r5, r7, #9
100004cc:	007e      	lsls	r6, r7, #1
100004ce:	0a6d      	lsrs	r5, r5, #9
100004d0:	0e36      	lsrs	r6, r6, #24
100004d2:	0fff      	lsrs	r7, r7, #31
100004d4:	2e00      	cmp	r6, #0
100004d6:	d023      	beq.n	10000520 <__aeabi_fdiv+0xa0>
100004d8:	2eff      	cmp	r6, #255	; 0xff
100004da:	d02e      	beq.n	1000053a <__aeabi_fdiv+0xba>
100004dc:	2380      	movs	r3, #128	; 0x80
100004de:	00ed      	lsls	r5, r5, #3
100004e0:	04db      	lsls	r3, r3, #19
100004e2:	431d      	orrs	r5, r3
100004e4:	0033      	movs	r3, r6
100004e6:	3b7f      	subs	r3, #127	; 0x7f
100004e8:	2200      	movs	r2, #0
100004ea:	9801      	ldr	r0, [sp, #4]
100004ec:	9903      	ldr	r1, [sp, #12]
100004ee:	1ac3      	subs	r3, r0, r3
100004f0:	9800      	ldr	r0, [sp, #0]
100004f2:	4079      	eors	r1, r7
100004f4:	0080      	lsls	r0, r0, #2
100004f6:	4310      	orrs	r0, r2
100004f8:	3801      	subs	r0, #1
100004fa:	280e      	cmp	r0, #14
100004fc:	d823      	bhi.n	10000546 <__aeabi_fdiv+0xc6>
100004fe:	f7ff fe53 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000502:	994d      	.short	0x994d
10000504:	99929973 	.word	0x99929973
10000508:	924d4d73 	.word	0x924d4d73
1000050c:	61616173 	.word	0x61616173
10000510:	53          	.byte	0x53
10000511:	00          	.byte	0x00
10000512:	2302      	movs	r3, #2
10000514:	9501      	str	r5, [sp, #4]
10000516:	9300      	str	r3, [sp, #0]
10000518:	2c00      	cmp	r4, #0
1000051a:	d0d6      	beq.n	100004ca <__aeabi_fdiv+0x4a>
1000051c:	3301      	adds	r3, #1
1000051e:	e7c3      	b.n	100004a8 <__aeabi_fdiv+0x28>
10000520:	002b      	movs	r3, r5
10000522:	2201      	movs	r2, #1
10000524:	2d00      	cmp	r5, #0
10000526:	d0e0      	beq.n	100004ea <__aeabi_fdiv+0x6a>
10000528:	0028      	movs	r0, r5
1000052a:	f7ff ff2b 	bl	10000384 <__clzsi2>
1000052e:	1f43      	subs	r3, r0, #5
10000530:	409d      	lsls	r5, r3
10000532:	2376      	movs	r3, #118	; 0x76
10000534:	425b      	negs	r3, r3
10000536:	1a1b      	subs	r3, r3, r0
10000538:	e7d6      	b.n	100004e8 <__aeabi_fdiv+0x68>
1000053a:	0033      	movs	r3, r6
1000053c:	2202      	movs	r2, #2
1000053e:	2d00      	cmp	r5, #0
10000540:	d0d3      	beq.n	100004ea <__aeabi_fdiv+0x6a>
10000542:	3201      	adds	r2, #1
10000544:	e7d1      	b.n	100004ea <__aeabi_fdiv+0x6a>
10000546:	0164      	lsls	r4, r4, #5
10000548:	016d      	lsls	r5, r5, #5
1000054a:	42ac      	cmp	r4, r5
1000054c:	d328      	bcc.n	100005a0 <__aeabi_fdiv+0x120>
1000054e:	201a      	movs	r0, #26
10000550:	2201      	movs	r2, #1
10000552:	1b64      	subs	r4, r4, r5
10000554:	2601      	movs	r6, #1
10000556:	0027      	movs	r7, r4
10000558:	0052      	lsls	r2, r2, #1
1000055a:	0064      	lsls	r4, r4, #1
1000055c:	2f00      	cmp	r7, #0
1000055e:	db01      	blt.n	10000564 <__aeabi_fdiv+0xe4>
10000560:	42a5      	cmp	r5, r4
10000562:	d801      	bhi.n	10000568 <__aeabi_fdiv+0xe8>
10000564:	1b64      	subs	r4, r4, r5
10000566:	4332      	orrs	r2, r6
10000568:	3801      	subs	r0, #1
1000056a:	2800      	cmp	r0, #0
1000056c:	d1f3      	bne.n	10000556 <__aeabi_fdiv+0xd6>
1000056e:	1e60      	subs	r0, r4, #1
10000570:	4184      	sbcs	r4, r0
10000572:	4314      	orrs	r4, r2
10000574:	0018      	movs	r0, r3
10000576:	307f      	adds	r0, #127	; 0x7f
10000578:	2800      	cmp	r0, #0
1000057a:	dd38      	ble.n	100005ee <__aeabi_fdiv+0x16e>
1000057c:	0762      	lsls	r2, r4, #29
1000057e:	d004      	beq.n	1000058a <__aeabi_fdiv+0x10a>
10000580:	220f      	movs	r2, #15
10000582:	4022      	ands	r2, r4
10000584:	2a04      	cmp	r2, #4
10000586:	d000      	beq.n	1000058a <__aeabi_fdiv+0x10a>
10000588:	3404      	adds	r4, #4
1000058a:	0122      	lsls	r2, r4, #4
1000058c:	d503      	bpl.n	10000596 <__aeabi_fdiv+0x116>
1000058e:	3380      	adds	r3, #128	; 0x80
10000590:	0018      	movs	r0, r3
10000592:	4a2b      	ldr	r2, [pc, #172]	; (10000640 <__aeabi_fdiv+0x1c0>)
10000594:	4014      	ands	r4, r2
10000596:	08e5      	lsrs	r5, r4, #3
10000598:	28fe      	cmp	r0, #254	; 0xfe
1000059a:	dd1d      	ble.n	100005d8 <__aeabi_fdiv+0x158>
1000059c:	2500      	movs	r5, #0
1000059e:	e00f      	b.n	100005c0 <__aeabi_fdiv+0x140>
100005a0:	201b      	movs	r0, #27
100005a2:	2200      	movs	r2, #0
100005a4:	3b01      	subs	r3, #1
100005a6:	e7d5      	b.n	10000554 <__aeabi_fdiv+0xd4>
100005a8:	2380      	movs	r3, #128	; 0x80
100005aa:	03db      	lsls	r3, r3, #15
100005ac:	421c      	tst	r4, r3
100005ae:	d003      	beq.n	100005b8 <__aeabi_fdiv+0x138>
100005b0:	421d      	tst	r5, r3
100005b2:	d101      	bne.n	100005b8 <__aeabi_fdiv+0x138>
100005b4:	002c      	movs	r4, r5
100005b6:	9702      	str	r7, [sp, #8]
100005b8:	2580      	movs	r5, #128	; 0x80
100005ba:	9902      	ldr	r1, [sp, #8]
100005bc:	03ed      	lsls	r5, r5, #15
100005be:	4325      	orrs	r5, r4
100005c0:	20ff      	movs	r0, #255	; 0xff
100005c2:	e009      	b.n	100005d8 <__aeabi_fdiv+0x158>
100005c4:	9903      	ldr	r1, [sp, #12]
100005c6:	9a00      	ldr	r2, [sp, #0]
100005c8:	2a02      	cmp	r2, #2
100005ca:	d0e7      	beq.n	1000059c <__aeabi_fdiv+0x11c>
100005cc:	2a03      	cmp	r2, #3
100005ce:	d02f      	beq.n	10000630 <__aeabi_fdiv+0x1b0>
100005d0:	2500      	movs	r5, #0
100005d2:	0028      	movs	r0, r5
100005d4:	2a01      	cmp	r2, #1
100005d6:	d1cd      	bne.n	10000574 <__aeabi_fdiv+0xf4>
100005d8:	026d      	lsls	r5, r5, #9
100005da:	0a6d      	lsrs	r5, r5, #9
100005dc:	05c0      	lsls	r0, r0, #23
100005de:	4328      	orrs	r0, r5
100005e0:	07c9      	lsls	r1, r1, #31
100005e2:	4308      	orrs	r0, r1
100005e4:	b005      	add	sp, #20
100005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100005e8:	002c      	movs	r4, r5
100005ea:	0039      	movs	r1, r7
100005ec:	e7ec      	b.n	100005c8 <__aeabi_fdiv+0x148>
100005ee:	2201      	movs	r2, #1
100005f0:	2500      	movs	r5, #0
100005f2:	1a12      	subs	r2, r2, r0
100005f4:	0028      	movs	r0, r5
100005f6:	2a1b      	cmp	r2, #27
100005f8:	dcee      	bgt.n	100005d8 <__aeabi_fdiv+0x158>
100005fa:	339e      	adds	r3, #158	; 0x9e
100005fc:	0025      	movs	r5, r4
100005fe:	409c      	lsls	r4, r3
10000600:	40d5      	lsrs	r5, r2
10000602:	1e63      	subs	r3, r4, #1
10000604:	419c      	sbcs	r4, r3
10000606:	4325      	orrs	r5, r4
10000608:	076b      	lsls	r3, r5, #29
1000060a:	d004      	beq.n	10000616 <__aeabi_fdiv+0x196>
1000060c:	230f      	movs	r3, #15
1000060e:	402b      	ands	r3, r5
10000610:	2b04      	cmp	r3, #4
10000612:	d000      	beq.n	10000616 <__aeabi_fdiv+0x196>
10000614:	3504      	adds	r5, #4
10000616:	2380      	movs	r3, #128	; 0x80
10000618:	0028      	movs	r0, r5
1000061a:	04db      	lsls	r3, r3, #19
1000061c:	4018      	ands	r0, r3
1000061e:	421d      	tst	r5, r3
10000620:	d10b      	bne.n	1000063a <__aeabi_fdiv+0x1ba>
10000622:	08ed      	lsrs	r5, r5, #3
10000624:	e7d8      	b.n	100005d8 <__aeabi_fdiv+0x158>
10000626:	2480      	movs	r4, #128	; 0x80
10000628:	2300      	movs	r3, #0
1000062a:	03e4      	lsls	r4, r4, #15
1000062c:	9302      	str	r3, [sp, #8]
1000062e:	e7c3      	b.n	100005b8 <__aeabi_fdiv+0x138>
10000630:	9102      	str	r1, [sp, #8]
10000632:	e7c1      	b.n	100005b8 <__aeabi_fdiv+0x138>
10000634:	2500      	movs	r5, #0
10000636:	0028      	movs	r0, r5
10000638:	e7ce      	b.n	100005d8 <__aeabi_fdiv+0x158>
1000063a:	2500      	movs	r5, #0
1000063c:	2001      	movs	r0, #1
1000063e:	e7cb      	b.n	100005d8 <__aeabi_fdiv+0x158>
10000640:	f7ffffff 	.word	0xf7ffffff

10000644 <__aeabi_ui2f>:
10000644:	2300      	movs	r3, #0
10000646:	b570      	push	{r4, r5, r6, lr}
10000648:	0004      	movs	r4, r0
1000064a:	4298      	cmp	r0, r3
1000064c:	d009      	beq.n	10000662 <__aeabi_ui2f+0x1e>
1000064e:	f7ff fe99 	bl	10000384 <__clzsi2>
10000652:	239e      	movs	r3, #158	; 0x9e
10000654:	1a1b      	subs	r3, r3, r0
10000656:	2b96      	cmp	r3, #150	; 0x96
10000658:	dc08      	bgt.n	1000066c <__aeabi_ui2f+0x28>
1000065a:	2808      	cmp	r0, #8
1000065c:	d029      	beq.n	100006b2 <__aeabi_ui2f+0x6e>
1000065e:	3808      	subs	r0, #8
10000660:	4084      	lsls	r4, r0
10000662:	0264      	lsls	r4, r4, #9
10000664:	05d8      	lsls	r0, r3, #23
10000666:	0a64      	lsrs	r4, r4, #9
10000668:	4320      	orrs	r0, r4
1000066a:	bd70      	pop	{r4, r5, r6, pc}
1000066c:	2b99      	cmp	r3, #153	; 0x99
1000066e:	dd1b      	ble.n	100006a8 <__aeabi_ui2f+0x64>
10000670:	0002      	movs	r2, r0
10000672:	0021      	movs	r1, r4
10000674:	321b      	adds	r2, #27
10000676:	4091      	lsls	r1, r2
10000678:	000a      	movs	r2, r1
1000067a:	1e51      	subs	r1, r2, #1
1000067c:	418a      	sbcs	r2, r1
1000067e:	2105      	movs	r1, #5
10000680:	1a09      	subs	r1, r1, r0
10000682:	40cc      	lsrs	r4, r1
10000684:	4314      	orrs	r4, r2
10000686:	0022      	movs	r2, r4
10000688:	4d0b      	ldr	r5, [pc, #44]	; (100006b8 <__aeabi_ui2f+0x74>)
1000068a:	402a      	ands	r2, r5
1000068c:	0761      	lsls	r1, r4, #29
1000068e:	d004      	beq.n	1000069a <__aeabi_ui2f+0x56>
10000690:	210f      	movs	r1, #15
10000692:	4021      	ands	r1, r4
10000694:	2904      	cmp	r1, #4
10000696:	d000      	beq.n	1000069a <__aeabi_ui2f+0x56>
10000698:	3204      	adds	r2, #4
1000069a:	0151      	lsls	r1, r2, #5
1000069c:	d502      	bpl.n	100006a4 <__aeabi_ui2f+0x60>
1000069e:	239f      	movs	r3, #159	; 0x9f
100006a0:	402a      	ands	r2, r5
100006a2:	1a1b      	subs	r3, r3, r0
100006a4:	08d4      	lsrs	r4, r2, #3
100006a6:	e7dc      	b.n	10000662 <__aeabi_ui2f+0x1e>
100006a8:	1f42      	subs	r2, r0, #5
100006aa:	2805      	cmp	r0, #5
100006ac:	d0eb      	beq.n	10000686 <__aeabi_ui2f+0x42>
100006ae:	4094      	lsls	r4, r2
100006b0:	e7e9      	b.n	10000686 <__aeabi_ui2f+0x42>
100006b2:	2396      	movs	r3, #150	; 0x96
100006b4:	e7d5      	b.n	10000662 <__aeabi_ui2f+0x1e>
100006b6:	46c0      	nop			; (mov r8, r8)
100006b8:	fbffffff 	.word	0xfbffffff

100006bc <__aeabi_dadd>:
100006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100006be:	b087      	sub	sp, #28
100006c0:	9204      	str	r2, [sp, #16]
100006c2:	9305      	str	r3, [sp, #20]
100006c4:	0fcb      	lsrs	r3, r1, #31
100006c6:	9301      	str	r3, [sp, #4]
100006c8:	9b05      	ldr	r3, [sp, #20]
100006ca:	030d      	lsls	r5, r1, #12
100006cc:	004c      	lsls	r4, r1, #1
100006ce:	0a6d      	lsrs	r5, r5, #9
100006d0:	0f41      	lsrs	r1, r0, #29
100006d2:	005f      	lsls	r7, r3, #1
100006d4:	4329      	orrs	r1, r5
100006d6:	031d      	lsls	r5, r3, #12
100006d8:	0d7b      	lsrs	r3, r7, #21
100006da:	9302      	str	r3, [sp, #8]
100006dc:	9b05      	ldr	r3, [sp, #20]
100006de:	0a6d      	lsrs	r5, r5, #9
100006e0:	0fdb      	lsrs	r3, r3, #31
100006e2:	9303      	str	r3, [sp, #12]
100006e4:	9b04      	ldr	r3, [sp, #16]
100006e6:	9a04      	ldr	r2, [sp, #16]
100006e8:	0f5b      	lsrs	r3, r3, #29
100006ea:	432b      	orrs	r3, r5
100006ec:	9e01      	ldr	r6, [sp, #4]
100006ee:	9d02      	ldr	r5, [sp, #8]
100006f0:	9f03      	ldr	r7, [sp, #12]
100006f2:	0d64      	lsrs	r4, r4, #21
100006f4:	00c0      	lsls	r0, r0, #3
100006f6:	00d2      	lsls	r2, r2, #3
100006f8:	1b65      	subs	r5, r4, r5
100006fa:	42be      	cmp	r6, r7
100006fc:	d000      	beq.n	10000700 <__aeabi_dadd+0x44>
100006fe:	e12c      	b.n	1000095a <__aeabi_dadd+0x29e>
10000700:	4ebb      	ldr	r6, [pc, #748]	; (100009f0 <__aeabi_dadd+0x334>)
10000702:	46b4      	mov	ip, r6
10000704:	2d00      	cmp	r5, #0
10000706:	dc00      	bgt.n	1000070a <__aeabi_dadd+0x4e>
10000708:	e070      	b.n	100007ec <__aeabi_dadd+0x130>
1000070a:	9e02      	ldr	r6, [sp, #8]
1000070c:	2e00      	cmp	r6, #0
1000070e:	d11e      	bne.n	1000074e <__aeabi_dadd+0x92>
10000710:	001e      	movs	r6, r3
10000712:	4316      	orrs	r6, r2
10000714:	d100      	bne.n	10000718 <__aeabi_dadd+0x5c>
10000716:	e29b      	b.n	10000c50 <__aeabi_dadd+0x594>
10000718:	1e6e      	subs	r6, r5, #1
1000071a:	2d01      	cmp	r5, #1
1000071c:	d113      	bne.n	10000746 <__aeabi_dadd+0x8a>
1000071e:	1882      	adds	r2, r0, r2
10000720:	4282      	cmp	r2, r0
10000722:	4180      	sbcs	r0, r0
10000724:	18c9      	adds	r1, r1, r3
10000726:	4240      	negs	r0, r0
10000728:	1809      	adds	r1, r1, r0
1000072a:	2401      	movs	r4, #1
1000072c:	0010      	movs	r0, r2
1000072e:	020b      	lsls	r3, r1, #8
10000730:	d400      	bmi.n	10000734 <__aeabi_dadd+0x78>
10000732:	e072      	b.n	1000081a <__aeabi_dadd+0x15e>
10000734:	2402      	movs	r4, #2
10000736:	4baf      	ldr	r3, [pc, #700]	; (100009f4 <__aeabi_dadd+0x338>)
10000738:	0842      	lsrs	r2, r0, #1
1000073a:	400b      	ands	r3, r1
1000073c:	2101      	movs	r1, #1
1000073e:	4001      	ands	r1, r0
10000740:	430a      	orrs	r2, r1
10000742:	07d8      	lsls	r0, r3, #31
10000744:	e106      	b.n	10000954 <__aeabi_dadd+0x298>
10000746:	4565      	cmp	r5, ip
10000748:	d11c      	bne.n	10000784 <__aeabi_dadd+0xc8>
1000074a:	4ca9      	ldr	r4, [pc, #676]	; (100009f0 <__aeabi_dadd+0x334>)
1000074c:	e065      	b.n	1000081a <__aeabi_dadd+0x15e>
1000074e:	4564      	cmp	r4, ip
10000750:	d063      	beq.n	1000081a <__aeabi_dadd+0x15e>
10000752:	2d38      	cmp	r5, #56	; 0x38
10000754:	dc47      	bgt.n	100007e6 <__aeabi_dadd+0x12a>
10000756:	2680      	movs	r6, #128	; 0x80
10000758:	0436      	lsls	r6, r6, #16
1000075a:	4333      	orrs	r3, r6
1000075c:	002e      	movs	r6, r5
1000075e:	2e1f      	cmp	r6, #31
10000760:	dc2f      	bgt.n	100007c2 <__aeabi_dadd+0x106>
10000762:	2520      	movs	r5, #32
10000764:	001f      	movs	r7, r3
10000766:	1bad      	subs	r5, r5, r6
10000768:	40af      	lsls	r7, r5
1000076a:	9502      	str	r5, [sp, #8]
1000076c:	003d      	movs	r5, r7
1000076e:	0017      	movs	r7, r2
10000770:	40f7      	lsrs	r7, r6
10000772:	432f      	orrs	r7, r5
10000774:	9d02      	ldr	r5, [sp, #8]
10000776:	40f3      	lsrs	r3, r6
10000778:	40aa      	lsls	r2, r5
1000077a:	1e55      	subs	r5, r2, #1
1000077c:	41aa      	sbcs	r2, r5
1000077e:	001d      	movs	r5, r3
10000780:	4317      	orrs	r7, r2
10000782:	e003      	b.n	1000078c <__aeabi_dadd+0xd0>
10000784:	2701      	movs	r7, #1
10000786:	9d02      	ldr	r5, [sp, #8]
10000788:	2e38      	cmp	r6, #56	; 0x38
1000078a:	dde8      	ble.n	1000075e <__aeabi_dadd+0xa2>
1000078c:	183f      	adds	r7, r7, r0
1000078e:	4287      	cmp	r7, r0
10000790:	4180      	sbcs	r0, r0
10000792:	1869      	adds	r1, r5, r1
10000794:	4240      	negs	r0, r0
10000796:	1809      	adds	r1, r1, r0
10000798:	0038      	movs	r0, r7
1000079a:	020b      	lsls	r3, r1, #8
1000079c:	d53d      	bpl.n	1000081a <__aeabi_dadd+0x15e>
1000079e:	2500      	movs	r5, #0
100007a0:	3401      	adds	r4, #1
100007a2:	002f      	movs	r7, r5
100007a4:	4564      	cmp	r4, ip
100007a6:	d1c6      	bne.n	10000736 <__aeabi_dadd+0x7a>
100007a8:	4b93      	ldr	r3, [pc, #588]	; (100009f8 <__aeabi_dadd+0x33c>)
100007aa:	0524      	lsls	r4, r4, #20
100007ac:	401c      	ands	r4, r3
100007ae:	033b      	lsls	r3, r7, #12
100007b0:	0b1b      	lsrs	r3, r3, #12
100007b2:	431c      	orrs	r4, r3
100007b4:	9b01      	ldr	r3, [sp, #4]
100007b6:	0028      	movs	r0, r5
100007b8:	07db      	lsls	r3, r3, #31
100007ba:	431c      	orrs	r4, r3
100007bc:	0021      	movs	r1, r4
100007be:	b007      	add	sp, #28
100007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007c2:	0035      	movs	r5, r6
100007c4:	001f      	movs	r7, r3
100007c6:	3d20      	subs	r5, #32
100007c8:	40ef      	lsrs	r7, r5
100007ca:	003d      	movs	r5, r7
100007cc:	2700      	movs	r7, #0
100007ce:	2e20      	cmp	r6, #32
100007d0:	d003      	beq.n	100007da <__aeabi_dadd+0x11e>
100007d2:	3740      	adds	r7, #64	; 0x40
100007d4:	1bbf      	subs	r7, r7, r6
100007d6:	40bb      	lsls	r3, r7
100007d8:	001f      	movs	r7, r3
100007da:	4317      	orrs	r7, r2
100007dc:	1e7b      	subs	r3, r7, #1
100007de:	419f      	sbcs	r7, r3
100007e0:	432f      	orrs	r7, r5
100007e2:	2500      	movs	r5, #0
100007e4:	e7d2      	b.n	1000078c <__aeabi_dadd+0xd0>
100007e6:	2500      	movs	r5, #0
100007e8:	2701      	movs	r7, #1
100007ea:	e7cf      	b.n	1000078c <__aeabi_dadd+0xd0>
100007ec:	2d00      	cmp	r5, #0
100007ee:	d06f      	beq.n	100008d0 <__aeabi_dadd+0x214>
100007f0:	9d02      	ldr	r5, [sp, #8]
100007f2:	1b2e      	subs	r6, r5, r4
100007f4:	2c00      	cmp	r4, #0
100007f6:	d130      	bne.n	1000085a <__aeabi_dadd+0x19e>
100007f8:	000d      	movs	r5, r1
100007fa:	4305      	orrs	r5, r0
100007fc:	d100      	bne.n	10000800 <__aeabi_dadd+0x144>
100007fe:	e221      	b.n	10000c44 <__aeabi_dadd+0x588>
10000800:	1e75      	subs	r5, r6, #1
10000802:	2e01      	cmp	r6, #1
10000804:	d124      	bne.n	10000850 <__aeabi_dadd+0x194>
10000806:	1880      	adds	r0, r0, r2
10000808:	4290      	cmp	r0, r2
1000080a:	4192      	sbcs	r2, r2
1000080c:	18c9      	adds	r1, r1, r3
1000080e:	4252      	negs	r2, r2
10000810:	1889      	adds	r1, r1, r2
10000812:	3401      	adds	r4, #1
10000814:	020b      	lsls	r3, r1, #8
10000816:	d500      	bpl.n	1000081a <__aeabi_dadd+0x15e>
10000818:	e78c      	b.n	10000734 <__aeabi_dadd+0x78>
1000081a:	0743      	lsls	r3, r0, #29
1000081c:	d009      	beq.n	10000832 <__aeabi_dadd+0x176>
1000081e:	230f      	movs	r3, #15
10000820:	4003      	ands	r3, r0
10000822:	2b04      	cmp	r3, #4
10000824:	d005      	beq.n	10000832 <__aeabi_dadd+0x176>
10000826:	1d03      	adds	r3, r0, #4
10000828:	4283      	cmp	r3, r0
1000082a:	4180      	sbcs	r0, r0
1000082c:	4240      	negs	r0, r0
1000082e:	1809      	adds	r1, r1, r0
10000830:	0018      	movs	r0, r3
10000832:	4b6f      	ldr	r3, [pc, #444]	; (100009f0 <__aeabi_dadd+0x334>)
10000834:	020a      	lsls	r2, r1, #8
10000836:	d400      	bmi.n	1000083a <__aeabi_dadd+0x17e>
10000838:	e210      	b.n	10000c5c <__aeabi_dadd+0x5a0>
1000083a:	2500      	movs	r5, #0
1000083c:	3401      	adds	r4, #1
1000083e:	002f      	movs	r7, r5
10000840:	429c      	cmp	r4, r3
10000842:	d0b1      	beq.n	100007a8 <__aeabi_dadd+0xec>
10000844:	4b6b      	ldr	r3, [pc, #428]	; (100009f4 <__aeabi_dadd+0x338>)
10000846:	08c0      	lsrs	r0, r0, #3
10000848:	400b      	ands	r3, r1
1000084a:	075d      	lsls	r5, r3, #29
1000084c:	4305      	orrs	r5, r0
1000084e:	e1f2      	b.n	10000c36 <__aeabi_dadd+0x57a>
10000850:	4566      	cmp	r6, ip
10000852:	d11d      	bne.n	10000890 <__aeabi_dadd+0x1d4>
10000854:	0019      	movs	r1, r3
10000856:	0010      	movs	r0, r2
10000858:	e777      	b.n	1000074a <__aeabi_dadd+0x8e>
1000085a:	9c02      	ldr	r4, [sp, #8]
1000085c:	4564      	cmp	r4, ip
1000085e:	d0f9      	beq.n	10000854 <__aeabi_dadd+0x198>
10000860:	2e38      	cmp	r6, #56	; 0x38
10000862:	dc32      	bgt.n	100008ca <__aeabi_dadd+0x20e>
10000864:	2480      	movs	r4, #128	; 0x80
10000866:	0035      	movs	r5, r6
10000868:	0424      	lsls	r4, r4, #16
1000086a:	4321      	orrs	r1, r4
1000086c:	2d1f      	cmp	r5, #31
1000086e:	dc1a      	bgt.n	100008a6 <__aeabi_dadd+0x1ea>
10000870:	2420      	movs	r4, #32
10000872:	000e      	movs	r6, r1
10000874:	1b67      	subs	r7, r4, r5
10000876:	40be      	lsls	r6, r7
10000878:	0034      	movs	r4, r6
1000087a:	0006      	movs	r6, r0
1000087c:	40b8      	lsls	r0, r7
1000087e:	40ee      	lsrs	r6, r5
10000880:	4334      	orrs	r4, r6
10000882:	0006      	movs	r6, r0
10000884:	40e9      	lsrs	r1, r5
10000886:	1e70      	subs	r0, r6, #1
10000888:	4186      	sbcs	r6, r0
1000088a:	4326      	orrs	r6, r4
1000088c:	000c      	movs	r4, r1
1000088e:	e002      	b.n	10000896 <__aeabi_dadd+0x1da>
10000890:	2601      	movs	r6, #1
10000892:	2d38      	cmp	r5, #56	; 0x38
10000894:	ddea      	ble.n	1000086c <__aeabi_dadd+0x1b0>
10000896:	18b0      	adds	r0, r6, r2
10000898:	4290      	cmp	r0, r2
1000089a:	4192      	sbcs	r2, r2
1000089c:	18e4      	adds	r4, r4, r3
1000089e:	4252      	negs	r2, r2
100008a0:	18a1      	adds	r1, r4, r2
100008a2:	9c02      	ldr	r4, [sp, #8]
100008a4:	e779      	b.n	1000079a <__aeabi_dadd+0xde>
100008a6:	002c      	movs	r4, r5
100008a8:	000e      	movs	r6, r1
100008aa:	3c20      	subs	r4, #32
100008ac:	40e6      	lsrs	r6, r4
100008ae:	0034      	movs	r4, r6
100008b0:	2600      	movs	r6, #0
100008b2:	2d20      	cmp	r5, #32
100008b4:	d003      	beq.n	100008be <__aeabi_dadd+0x202>
100008b6:	3640      	adds	r6, #64	; 0x40
100008b8:	1b76      	subs	r6, r6, r5
100008ba:	40b1      	lsls	r1, r6
100008bc:	000e      	movs	r6, r1
100008be:	4306      	orrs	r6, r0
100008c0:	1e71      	subs	r1, r6, #1
100008c2:	418e      	sbcs	r6, r1
100008c4:	4326      	orrs	r6, r4
100008c6:	2400      	movs	r4, #0
100008c8:	e7e5      	b.n	10000896 <__aeabi_dadd+0x1da>
100008ca:	2400      	movs	r4, #0
100008cc:	2601      	movs	r6, #1
100008ce:	e7e2      	b.n	10000896 <__aeabi_dadd+0x1da>
100008d0:	4f4a      	ldr	r7, [pc, #296]	; (100009fc <__aeabi_dadd+0x340>)
100008d2:	1c66      	adds	r6, r4, #1
100008d4:	423e      	tst	r6, r7
100008d6:	d130      	bne.n	1000093a <__aeabi_dadd+0x27e>
100008d8:	000d      	movs	r5, r1
100008da:	4305      	orrs	r5, r0
100008dc:	2c00      	cmp	r4, #0
100008de:	d112      	bne.n	10000906 <__aeabi_dadd+0x24a>
100008e0:	2d00      	cmp	r5, #0
100008e2:	d100      	bne.n	100008e6 <__aeabi_dadd+0x22a>
100008e4:	e1b1      	b.n	10000c4a <__aeabi_dadd+0x58e>
100008e6:	001d      	movs	r5, r3
100008e8:	4315      	orrs	r5, r2
100008ea:	d096      	beq.n	1000081a <__aeabi_dadd+0x15e>
100008ec:	1882      	adds	r2, r0, r2
100008ee:	4282      	cmp	r2, r0
100008f0:	4180      	sbcs	r0, r0
100008f2:	18c9      	adds	r1, r1, r3
100008f4:	4240      	negs	r0, r0
100008f6:	1809      	adds	r1, r1, r0
100008f8:	0010      	movs	r0, r2
100008fa:	020b      	lsls	r3, r1, #8
100008fc:	d58d      	bpl.n	1000081a <__aeabi_dadd+0x15e>
100008fe:	4b3d      	ldr	r3, [pc, #244]	; (100009f4 <__aeabi_dadd+0x338>)
10000900:	4019      	ands	r1, r3
10000902:	0034      	movs	r4, r6
10000904:	e789      	b.n	1000081a <__aeabi_dadd+0x15e>
10000906:	2d00      	cmp	r5, #0
10000908:	d0a4      	beq.n	10000854 <__aeabi_dadd+0x198>
1000090a:	001d      	movs	r5, r3
1000090c:	4664      	mov	r4, ip
1000090e:	4315      	orrs	r5, r2
10000910:	d083      	beq.n	1000081a <__aeabi_dadd+0x15e>
10000912:	2580      	movs	r5, #128	; 0x80
10000914:	074c      	lsls	r4, r1, #29
10000916:	08c0      	lsrs	r0, r0, #3
10000918:	08c9      	lsrs	r1, r1, #3
1000091a:	032d      	lsls	r5, r5, #12
1000091c:	4320      	orrs	r0, r4
1000091e:	4229      	tst	r1, r5
10000920:	d006      	beq.n	10000930 <__aeabi_dadd+0x274>
10000922:	08dc      	lsrs	r4, r3, #3
10000924:	422c      	tst	r4, r5
10000926:	d103      	bne.n	10000930 <__aeabi_dadd+0x274>
10000928:	0021      	movs	r1, r4
1000092a:	08d0      	lsrs	r0, r2, #3
1000092c:	075b      	lsls	r3, r3, #29
1000092e:	4318      	orrs	r0, r3
10000930:	00cb      	lsls	r3, r1, #3
10000932:	0f41      	lsrs	r1, r0, #29
10000934:	4319      	orrs	r1, r3
10000936:	00c0      	lsls	r0, r0, #3
10000938:	e707      	b.n	1000074a <__aeabi_dadd+0x8e>
1000093a:	0034      	movs	r4, r6
1000093c:	002f      	movs	r7, r5
1000093e:	4566      	cmp	r6, ip
10000940:	d100      	bne.n	10000944 <__aeabi_dadd+0x288>
10000942:	e731      	b.n	100007a8 <__aeabi_dadd+0xec>
10000944:	1882      	adds	r2, r0, r2
10000946:	4282      	cmp	r2, r0
10000948:	4180      	sbcs	r0, r0
1000094a:	18cb      	adds	r3, r1, r3
1000094c:	4240      	negs	r0, r0
1000094e:	181b      	adds	r3, r3, r0
10000950:	07d8      	lsls	r0, r3, #31
10000952:	0852      	lsrs	r2, r2, #1
10000954:	4310      	orrs	r0, r2
10000956:	0859      	lsrs	r1, r3, #1
10000958:	e75f      	b.n	1000081a <__aeabi_dadd+0x15e>
1000095a:	2d00      	cmp	r5, #0
1000095c:	dd65      	ble.n	10000a2a <__aeabi_dadd+0x36e>
1000095e:	9e02      	ldr	r6, [sp, #8]
10000960:	2e00      	cmp	r6, #0
10000962:	d125      	bne.n	100009b0 <__aeabi_dadd+0x2f4>
10000964:	001e      	movs	r6, r3
10000966:	4316      	orrs	r6, r2
10000968:	d100      	bne.n	1000096c <__aeabi_dadd+0x2b0>
1000096a:	e171      	b.n	10000c50 <__aeabi_dadd+0x594>
1000096c:	1e6e      	subs	r6, r5, #1
1000096e:	2d01      	cmp	r5, #1
10000970:	d10e      	bne.n	10000990 <__aeabi_dadd+0x2d4>
10000972:	1a82      	subs	r2, r0, r2
10000974:	4290      	cmp	r0, r2
10000976:	4180      	sbcs	r0, r0
10000978:	1ac9      	subs	r1, r1, r3
1000097a:	4240      	negs	r0, r0
1000097c:	1a09      	subs	r1, r1, r0
1000097e:	2401      	movs	r4, #1
10000980:	0010      	movs	r0, r2
10000982:	020b      	lsls	r3, r1, #8
10000984:	d400      	bmi.n	10000988 <__aeabi_dadd+0x2cc>
10000986:	e748      	b.n	1000081a <__aeabi_dadd+0x15e>
10000988:	0249      	lsls	r1, r1, #9
1000098a:	0006      	movs	r6, r0
1000098c:	0a4d      	lsrs	r5, r1, #9
1000098e:	e107      	b.n	10000ba0 <__aeabi_dadd+0x4e4>
10000990:	4f17      	ldr	r7, [pc, #92]	; (100009f0 <__aeabi_dadd+0x334>)
10000992:	42bd      	cmp	r5, r7
10000994:	d100      	bne.n	10000998 <__aeabi_dadd+0x2dc>
10000996:	e6d8      	b.n	1000074a <__aeabi_dadd+0x8e>
10000998:	2501      	movs	r5, #1
1000099a:	9f02      	ldr	r7, [sp, #8]
1000099c:	2e38      	cmp	r6, #56	; 0x38
1000099e:	dd11      	ble.n	100009c4 <__aeabi_dadd+0x308>
100009a0:	1b45      	subs	r5, r0, r5
100009a2:	42a8      	cmp	r0, r5
100009a4:	4180      	sbcs	r0, r0
100009a6:	1bc9      	subs	r1, r1, r7
100009a8:	4240      	negs	r0, r0
100009aa:	1a09      	subs	r1, r1, r0
100009ac:	0028      	movs	r0, r5
100009ae:	e7e8      	b.n	10000982 <__aeabi_dadd+0x2c6>
100009b0:	4e0f      	ldr	r6, [pc, #60]	; (100009f0 <__aeabi_dadd+0x334>)
100009b2:	42b4      	cmp	r4, r6
100009b4:	d100      	bne.n	100009b8 <__aeabi_dadd+0x2fc>
100009b6:	e730      	b.n	1000081a <__aeabi_dadd+0x15e>
100009b8:	2d38      	cmp	r5, #56	; 0x38
100009ba:	dc33      	bgt.n	10000a24 <__aeabi_dadd+0x368>
100009bc:	2680      	movs	r6, #128	; 0x80
100009be:	0436      	lsls	r6, r6, #16
100009c0:	4333      	orrs	r3, r6
100009c2:	002e      	movs	r6, r5
100009c4:	2e1f      	cmp	r6, #31
100009c6:	dc1b      	bgt.n	10000a00 <__aeabi_dadd+0x344>
100009c8:	2720      	movs	r7, #32
100009ca:	1bbd      	subs	r5, r7, r6
100009cc:	9502      	str	r5, [sp, #8]
100009ce:	001d      	movs	r5, r3
100009d0:	9f02      	ldr	r7, [sp, #8]
100009d2:	40f3      	lsrs	r3, r6
100009d4:	40bd      	lsls	r5, r7
100009d6:	46ac      	mov	ip, r5
100009d8:	0015      	movs	r5, r2
100009da:	4667      	mov	r7, ip
100009dc:	40f5      	lsrs	r5, r6
100009de:	433d      	orrs	r5, r7
100009e0:	9f02      	ldr	r7, [sp, #8]
100009e2:	40ba      	lsls	r2, r7
100009e4:	1e57      	subs	r7, r2, #1
100009e6:	41ba      	sbcs	r2, r7
100009e8:	001f      	movs	r7, r3
100009ea:	4315      	orrs	r5, r2
100009ec:	e7d8      	b.n	100009a0 <__aeabi_dadd+0x2e4>
100009ee:	46c0      	nop			; (mov r8, r8)
100009f0:	000007ff 	.word	0x000007ff
100009f4:	ff7fffff 	.word	0xff7fffff
100009f8:	7ff00000 	.word	0x7ff00000
100009fc:	000007fe 	.word	0x000007fe
10000a00:	0035      	movs	r5, r6
10000a02:	001f      	movs	r7, r3
10000a04:	3d20      	subs	r5, #32
10000a06:	40ef      	lsrs	r7, r5
10000a08:	003d      	movs	r5, r7
10000a0a:	2700      	movs	r7, #0
10000a0c:	2e20      	cmp	r6, #32
10000a0e:	d003      	beq.n	10000a18 <__aeabi_dadd+0x35c>
10000a10:	3740      	adds	r7, #64	; 0x40
10000a12:	1bbe      	subs	r6, r7, r6
10000a14:	40b3      	lsls	r3, r6
10000a16:	001f      	movs	r7, r3
10000a18:	4317      	orrs	r7, r2
10000a1a:	1e7b      	subs	r3, r7, #1
10000a1c:	419f      	sbcs	r7, r3
10000a1e:	433d      	orrs	r5, r7
10000a20:	2700      	movs	r7, #0
10000a22:	e7bd      	b.n	100009a0 <__aeabi_dadd+0x2e4>
10000a24:	2700      	movs	r7, #0
10000a26:	2501      	movs	r5, #1
10000a28:	e7ba      	b.n	100009a0 <__aeabi_dadd+0x2e4>
10000a2a:	2d00      	cmp	r5, #0
10000a2c:	d059      	beq.n	10000ae2 <__aeabi_dadd+0x426>
10000a2e:	9d02      	ldr	r5, [sp, #8]
10000a30:	1b2e      	subs	r6, r5, r4
10000a32:	2c00      	cmp	r4, #0
10000a34:	d116      	bne.n	10000a64 <__aeabi_dadd+0x3a8>
10000a36:	000d      	movs	r5, r1
10000a38:	4305      	orrs	r5, r0
10000a3a:	d00f      	beq.n	10000a5c <__aeabi_dadd+0x3a0>
10000a3c:	1e75      	subs	r5, r6, #1
10000a3e:	2e01      	cmp	r6, #1
10000a40:	d109      	bne.n	10000a56 <__aeabi_dadd+0x39a>
10000a42:	1a10      	subs	r0, r2, r0
10000a44:	4282      	cmp	r2, r0
10000a46:	4192      	sbcs	r2, r2
10000a48:	1a59      	subs	r1, r3, r1
10000a4a:	9b03      	ldr	r3, [sp, #12]
10000a4c:	4252      	negs	r2, r2
10000a4e:	1a89      	subs	r1, r1, r2
10000a50:	9301      	str	r3, [sp, #4]
10000a52:	3401      	adds	r4, #1
10000a54:	e795      	b.n	10000982 <__aeabi_dadd+0x2c6>
10000a56:	4f8e      	ldr	r7, [pc, #568]	; (10000c90 <__aeabi_dadd+0x5d4>)
10000a58:	42be      	cmp	r6, r7
10000a5a:	d121      	bne.n	10000aa0 <__aeabi_dadd+0x3e4>
10000a5c:	0019      	movs	r1, r3
10000a5e:	0010      	movs	r0, r2
10000a60:	0034      	movs	r4, r6
10000a62:	e050      	b.n	10000b06 <__aeabi_dadd+0x44a>
10000a64:	4c8a      	ldr	r4, [pc, #552]	; (10000c90 <__aeabi_dadd+0x5d4>)
10000a66:	9d02      	ldr	r5, [sp, #8]
10000a68:	42a5      	cmp	r5, r4
10000a6a:	d100      	bne.n	10000a6e <__aeabi_dadd+0x3b2>
10000a6c:	e0f2      	b.n	10000c54 <__aeabi_dadd+0x598>
10000a6e:	2e38      	cmp	r6, #56	; 0x38
10000a70:	dc34      	bgt.n	10000adc <__aeabi_dadd+0x420>
10000a72:	2480      	movs	r4, #128	; 0x80
10000a74:	0035      	movs	r5, r6
10000a76:	0424      	lsls	r4, r4, #16
10000a78:	4321      	orrs	r1, r4
10000a7a:	2d1f      	cmp	r5, #31
10000a7c:	dc1d      	bgt.n	10000aba <__aeabi_dadd+0x3fe>
10000a7e:	2620      	movs	r6, #32
10000a80:	000c      	movs	r4, r1
10000a82:	1b76      	subs	r6, r6, r5
10000a84:	40b4      	lsls	r4, r6
10000a86:	46a4      	mov	ip, r4
10000a88:	0004      	movs	r4, r0
10000a8a:	40b0      	lsls	r0, r6
10000a8c:	40ec      	lsrs	r4, r5
10000a8e:	4667      	mov	r7, ip
10000a90:	1e46      	subs	r6, r0, #1
10000a92:	41b0      	sbcs	r0, r6
10000a94:	40e9      	lsrs	r1, r5
10000a96:	433c      	orrs	r4, r7
10000a98:	4304      	orrs	r4, r0
10000a9a:	0026      	movs	r6, r4
10000a9c:	000c      	movs	r4, r1
10000a9e:	e002      	b.n	10000aa6 <__aeabi_dadd+0x3ea>
10000aa0:	2601      	movs	r6, #1
10000aa2:	2d38      	cmp	r5, #56	; 0x38
10000aa4:	dde9      	ble.n	10000a7a <__aeabi_dadd+0x3be>
10000aa6:	1b90      	subs	r0, r2, r6
10000aa8:	4282      	cmp	r2, r0
10000aaa:	4192      	sbcs	r2, r2
10000aac:	1b1c      	subs	r4, r3, r4
10000aae:	9b03      	ldr	r3, [sp, #12]
10000ab0:	4252      	negs	r2, r2
10000ab2:	1aa1      	subs	r1, r4, r2
10000ab4:	9301      	str	r3, [sp, #4]
10000ab6:	9c02      	ldr	r4, [sp, #8]
10000ab8:	e763      	b.n	10000982 <__aeabi_dadd+0x2c6>
10000aba:	002c      	movs	r4, r5
10000abc:	000e      	movs	r6, r1
10000abe:	3c20      	subs	r4, #32
10000ac0:	40e6      	lsrs	r6, r4
10000ac2:	2400      	movs	r4, #0
10000ac4:	2d20      	cmp	r5, #32
10000ac6:	d003      	beq.n	10000ad0 <__aeabi_dadd+0x414>
10000ac8:	3440      	adds	r4, #64	; 0x40
10000aca:	1b64      	subs	r4, r4, r5
10000acc:	40a1      	lsls	r1, r4
10000ace:	000c      	movs	r4, r1
10000ad0:	4304      	orrs	r4, r0
10000ad2:	1e61      	subs	r1, r4, #1
10000ad4:	418c      	sbcs	r4, r1
10000ad6:	4326      	orrs	r6, r4
10000ad8:	2400      	movs	r4, #0
10000ada:	e7e4      	b.n	10000aa6 <__aeabi_dadd+0x3ea>
10000adc:	2400      	movs	r4, #0
10000ade:	2601      	movs	r6, #1
10000ae0:	e7e1      	b.n	10000aa6 <__aeabi_dadd+0x3ea>
10000ae2:	4e6c      	ldr	r6, [pc, #432]	; (10000c94 <__aeabi_dadd+0x5d8>)
10000ae4:	1c65      	adds	r5, r4, #1
10000ae6:	4235      	tst	r5, r6
10000ae8:	d14a      	bne.n	10000b80 <__aeabi_dadd+0x4c4>
10000aea:	000d      	movs	r5, r1
10000aec:	001f      	movs	r7, r3
10000aee:	4305      	orrs	r5, r0
10000af0:	4317      	orrs	r7, r2
10000af2:	2c00      	cmp	r4, #0
10000af4:	d123      	bne.n	10000b3e <__aeabi_dadd+0x482>
10000af6:	2d00      	cmp	r5, #0
10000af8:	d108      	bne.n	10000b0c <__aeabi_dadd+0x450>
10000afa:	1e3d      	subs	r5, r7, #0
10000afc:	9701      	str	r7, [sp, #4]
10000afe:	d100      	bne.n	10000b02 <__aeabi_dadd+0x446>
10000b00:	e652      	b.n	100007a8 <__aeabi_dadd+0xec>
10000b02:	0019      	movs	r1, r3
10000b04:	0010      	movs	r0, r2
10000b06:	9b03      	ldr	r3, [sp, #12]
10000b08:	9301      	str	r3, [sp, #4]
10000b0a:	e686      	b.n	1000081a <__aeabi_dadd+0x15e>
10000b0c:	2f00      	cmp	r7, #0
10000b0e:	d100      	bne.n	10000b12 <__aeabi_dadd+0x456>
10000b10:	e683      	b.n	1000081a <__aeabi_dadd+0x15e>
10000b12:	1a86      	subs	r6, r0, r2
10000b14:	42b0      	cmp	r0, r6
10000b16:	41bf      	sbcs	r7, r7
10000b18:	1acd      	subs	r5, r1, r3
10000b1a:	427f      	negs	r7, r7
10000b1c:	1bed      	subs	r5, r5, r7
10000b1e:	022f      	lsls	r7, r5, #8
10000b20:	d506      	bpl.n	10000b30 <__aeabi_dadd+0x474>
10000b22:	1a10      	subs	r0, r2, r0
10000b24:	4282      	cmp	r2, r0
10000b26:	4192      	sbcs	r2, r2
10000b28:	1a59      	subs	r1, r3, r1
10000b2a:	4252      	negs	r2, r2
10000b2c:	1a89      	subs	r1, r1, r2
10000b2e:	e7ea      	b.n	10000b06 <__aeabi_dadd+0x44a>
10000b30:	0037      	movs	r7, r6
10000b32:	432f      	orrs	r7, r5
10000b34:	d100      	bne.n	10000b38 <__aeabi_dadd+0x47c>
10000b36:	e0a5      	b.n	10000c84 <__aeabi_dadd+0x5c8>
10000b38:	0029      	movs	r1, r5
10000b3a:	0030      	movs	r0, r6
10000b3c:	e66d      	b.n	1000081a <__aeabi_dadd+0x15e>
10000b3e:	2d00      	cmp	r5, #0
10000b40:	d107      	bne.n	10000b52 <__aeabi_dadd+0x496>
10000b42:	2f00      	cmp	r7, #0
10000b44:	d100      	bne.n	10000b48 <__aeabi_dadd+0x48c>
10000b46:	e094      	b.n	10000c72 <__aeabi_dadd+0x5b6>
10000b48:	0019      	movs	r1, r3
10000b4a:	9b03      	ldr	r3, [sp, #12]
10000b4c:	0010      	movs	r0, r2
10000b4e:	9301      	str	r3, [sp, #4]
10000b50:	e5fb      	b.n	1000074a <__aeabi_dadd+0x8e>
10000b52:	2f00      	cmp	r7, #0
10000b54:	d100      	bne.n	10000b58 <__aeabi_dadd+0x49c>
10000b56:	e5f8      	b.n	1000074a <__aeabi_dadd+0x8e>
10000b58:	2580      	movs	r5, #128	; 0x80
10000b5a:	074c      	lsls	r4, r1, #29
10000b5c:	08c0      	lsrs	r0, r0, #3
10000b5e:	08c9      	lsrs	r1, r1, #3
10000b60:	032d      	lsls	r5, r5, #12
10000b62:	4320      	orrs	r0, r4
10000b64:	4229      	tst	r1, r5
10000b66:	d100      	bne.n	10000b6a <__aeabi_dadd+0x4ae>
10000b68:	e6e2      	b.n	10000930 <__aeabi_dadd+0x274>
10000b6a:	08dc      	lsrs	r4, r3, #3
10000b6c:	422c      	tst	r4, r5
10000b6e:	d000      	beq.n	10000b72 <__aeabi_dadd+0x4b6>
10000b70:	e6de      	b.n	10000930 <__aeabi_dadd+0x274>
10000b72:	075b      	lsls	r3, r3, #29
10000b74:	08d0      	lsrs	r0, r2, #3
10000b76:	4318      	orrs	r0, r3
10000b78:	9b03      	ldr	r3, [sp, #12]
10000b7a:	0021      	movs	r1, r4
10000b7c:	9301      	str	r3, [sp, #4]
10000b7e:	e6d7      	b.n	10000930 <__aeabi_dadd+0x274>
10000b80:	1a86      	subs	r6, r0, r2
10000b82:	42b0      	cmp	r0, r6
10000b84:	41bf      	sbcs	r7, r7
10000b86:	1acd      	subs	r5, r1, r3
10000b88:	427f      	negs	r7, r7
10000b8a:	1bed      	subs	r5, r5, r7
10000b8c:	022f      	lsls	r7, r5, #8
10000b8e:	d528      	bpl.n	10000be2 <__aeabi_dadd+0x526>
10000b90:	1a16      	subs	r6, r2, r0
10000b92:	42b2      	cmp	r2, r6
10000b94:	4192      	sbcs	r2, r2
10000b96:	1a5b      	subs	r3, r3, r1
10000b98:	4252      	negs	r2, r2
10000b9a:	1a9d      	subs	r5, r3, r2
10000b9c:	9b03      	ldr	r3, [sp, #12]
10000b9e:	9301      	str	r3, [sp, #4]
10000ba0:	2d00      	cmp	r5, #0
10000ba2:	d025      	beq.n	10000bf0 <__aeabi_dadd+0x534>
10000ba4:	0028      	movs	r0, r5
10000ba6:	f7ff fbed 	bl	10000384 <__clzsi2>
10000baa:	0003      	movs	r3, r0
10000bac:	3b08      	subs	r3, #8
10000bae:	2220      	movs	r2, #32
10000bb0:	0031      	movs	r1, r6
10000bb2:	1ad2      	subs	r2, r2, r3
10000bb4:	409d      	lsls	r5, r3
10000bb6:	40d1      	lsrs	r1, r2
10000bb8:	4329      	orrs	r1, r5
10000bba:	0035      	movs	r5, r6
10000bbc:	409d      	lsls	r5, r3
10000bbe:	429c      	cmp	r4, r3
10000bc0:	dc3b      	bgt.n	10000c3a <__aeabi_dadd+0x57e>
10000bc2:	1b1a      	subs	r2, r3, r4
10000bc4:	3201      	adds	r2, #1
10000bc6:	2320      	movs	r3, #32
10000bc8:	0008      	movs	r0, r1
10000bca:	1a9b      	subs	r3, r3, r2
10000bcc:	002c      	movs	r4, r5
10000bce:	409d      	lsls	r5, r3
10000bd0:	4098      	lsls	r0, r3
10000bd2:	40d4      	lsrs	r4, r2
10000bd4:	1e6b      	subs	r3, r5, #1
10000bd6:	419d      	sbcs	r5, r3
10000bd8:	40d1      	lsrs	r1, r2
10000bda:	4320      	orrs	r0, r4
10000bdc:	4328      	orrs	r0, r5
10000bde:	2400      	movs	r4, #0
10000be0:	e61b      	b.n	1000081a <__aeabi_dadd+0x15e>
10000be2:	0037      	movs	r7, r6
10000be4:	432f      	orrs	r7, r5
10000be6:	d1db      	bne.n	10000ba0 <__aeabi_dadd+0x4e4>
10000be8:	003d      	movs	r5, r7
10000bea:	003c      	movs	r4, r7
10000bec:	9701      	str	r7, [sp, #4]
10000bee:	e5db      	b.n	100007a8 <__aeabi_dadd+0xec>
10000bf0:	0030      	movs	r0, r6
10000bf2:	f7ff fbc7 	bl	10000384 <__clzsi2>
10000bf6:	0003      	movs	r3, r0
10000bf8:	3318      	adds	r3, #24
10000bfa:	2b1f      	cmp	r3, #31
10000bfc:	ddd7      	ble.n	10000bae <__aeabi_dadd+0x4f2>
10000bfe:	0031      	movs	r1, r6
10000c00:	3808      	subs	r0, #8
10000c02:	4081      	lsls	r1, r0
10000c04:	429c      	cmp	r4, r3
10000c06:	dc12      	bgt.n	10000c2e <__aeabi_dadd+0x572>
10000c08:	1b1b      	subs	r3, r3, r4
10000c0a:	1c5a      	adds	r2, r3, #1
10000c0c:	2a1f      	cmp	r2, #31
10000c0e:	ddda      	ble.n	10000bc6 <__aeabi_dadd+0x50a>
10000c10:	000c      	movs	r4, r1
10000c12:	3b1f      	subs	r3, #31
10000c14:	40dc      	lsrs	r4, r3
10000c16:	0028      	movs	r0, r5
10000c18:	2a20      	cmp	r2, #32
10000c1a:	d003      	beq.n	10000c24 <__aeabi_dadd+0x568>
10000c1c:	2340      	movs	r3, #64	; 0x40
10000c1e:	1a9b      	subs	r3, r3, r2
10000c20:	4099      	lsls	r1, r3
10000c22:	0008      	movs	r0, r1
10000c24:	1e43      	subs	r3, r0, #1
10000c26:	4198      	sbcs	r0, r3
10000c28:	2100      	movs	r1, #0
10000c2a:	4320      	orrs	r0, r4
10000c2c:	e7d7      	b.n	10000bde <__aeabi_dadd+0x522>
10000c2e:	1ae4      	subs	r4, r4, r3
10000c30:	4b19      	ldr	r3, [pc, #100]	; (10000c98 <__aeabi_dadd+0x5dc>)
10000c32:	400b      	ands	r3, r1
10000c34:	075d      	lsls	r5, r3, #29
10000c36:	08df      	lsrs	r7, r3, #3
10000c38:	e5b6      	b.n	100007a8 <__aeabi_dadd+0xec>
10000c3a:	1ae4      	subs	r4, r4, r3
10000c3c:	4b16      	ldr	r3, [pc, #88]	; (10000c98 <__aeabi_dadd+0x5dc>)
10000c3e:	0028      	movs	r0, r5
10000c40:	4019      	ands	r1, r3
10000c42:	e5ea      	b.n	1000081a <__aeabi_dadd+0x15e>
10000c44:	0019      	movs	r1, r3
10000c46:	0010      	movs	r0, r2
10000c48:	e65b      	b.n	10000902 <__aeabi_dadd+0x246>
10000c4a:	0019      	movs	r1, r3
10000c4c:	0010      	movs	r0, r2
10000c4e:	e5e4      	b.n	1000081a <__aeabi_dadd+0x15e>
10000c50:	002c      	movs	r4, r5
10000c52:	e5e2      	b.n	1000081a <__aeabi_dadd+0x15e>
10000c54:	0019      	movs	r1, r3
10000c56:	0010      	movs	r0, r2
10000c58:	9c02      	ldr	r4, [sp, #8]
10000c5a:	e754      	b.n	10000b06 <__aeabi_dadd+0x44a>
10000c5c:	074a      	lsls	r2, r1, #29
10000c5e:	08c7      	lsrs	r7, r0, #3
10000c60:	4317      	orrs	r7, r2
10000c62:	003d      	movs	r5, r7
10000c64:	08c9      	lsrs	r1, r1, #3
10000c66:	429c      	cmp	r4, r3
10000c68:	d10f      	bne.n	10000c8a <__aeabi_dadd+0x5ce>
10000c6a:	430d      	orrs	r5, r1
10000c6c:	d104      	bne.n	10000c78 <__aeabi_dadd+0x5bc>
10000c6e:	002f      	movs	r7, r5
10000c70:	e59a      	b.n	100007a8 <__aeabi_dadd+0xec>
10000c72:	2180      	movs	r1, #128	; 0x80
10000c74:	9701      	str	r7, [sp, #4]
10000c76:	0309      	lsls	r1, r1, #12
10000c78:	003d      	movs	r5, r7
10000c7a:	2780      	movs	r7, #128	; 0x80
10000c7c:	033f      	lsls	r7, r7, #12
10000c7e:	4c04      	ldr	r4, [pc, #16]	; (10000c90 <__aeabi_dadd+0x5d4>)
10000c80:	430f      	orrs	r7, r1
10000c82:	e591      	b.n	100007a8 <__aeabi_dadd+0xec>
10000c84:	003d      	movs	r5, r7
10000c86:	9701      	str	r7, [sp, #4]
10000c88:	e58e      	b.n	100007a8 <__aeabi_dadd+0xec>
10000c8a:	000f      	movs	r7, r1
10000c8c:	e58c      	b.n	100007a8 <__aeabi_dadd+0xec>
10000c8e:	46c0      	nop			; (mov r8, r8)
10000c90:	000007ff 	.word	0x000007ff
10000c94:	000007fe 	.word	0x000007fe
10000c98:	ff7fffff 	.word	0xff7fffff

10000c9c <__eqdf2>:
10000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c9e:	000d      	movs	r5, r1
10000ca0:	b087      	sub	sp, #28
10000ca2:	9200      	str	r2, [sp, #0]
10000ca4:	9301      	str	r3, [sp, #4]
10000ca6:	0004      	movs	r4, r0
10000ca8:	9004      	str	r0, [sp, #16]
10000caa:	9801      	ldr	r0, [sp, #4]
10000cac:	0feb      	lsrs	r3, r5, #31
10000cae:	0046      	lsls	r6, r0, #1
10000cb0:	0fc7      	lsrs	r7, r0, #31
10000cb2:	481a      	ldr	r0, [pc, #104]	; (10000d1c <__eqdf2+0x80>)
10000cb4:	9303      	str	r3, [sp, #12]
10000cb6:	4684      	mov	ip, r0
10000cb8:	9b00      	ldr	r3, [sp, #0]
10000cba:	0309      	lsls	r1, r1, #12
10000cbc:	9305      	str	r3, [sp, #20]
10000cbe:	9b01      	ldr	r3, [sp, #4]
10000cc0:	006a      	lsls	r2, r5, #1
10000cc2:	031b      	lsls	r3, r3, #12
10000cc4:	2001      	movs	r0, #1
10000cc6:	0b09      	lsrs	r1, r1, #12
10000cc8:	0d52      	lsrs	r2, r2, #21
10000cca:	0b1b      	lsrs	r3, r3, #12
10000ccc:	0d76      	lsrs	r6, r6, #21
10000cce:	4562      	cmp	r2, ip
10000cd0:	d003      	beq.n	10000cda <__eqdf2+0x3e>
10000cd2:	4566      	cmp	r6, ip
10000cd4:	d10d      	bne.n	10000cf2 <__eqdf2+0x56>
10000cd6:	b007      	add	sp, #28
10000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000cda:	4296      	cmp	r6, r2
10000cdc:	d1fb      	bne.n	10000cd6 <__eqdf2+0x3a>
10000cde:	9a00      	ldr	r2, [sp, #0]
10000ce0:	430b      	orrs	r3, r1
10000ce2:	4313      	orrs	r3, r2
10000ce4:	4323      	orrs	r3, r4
10000ce6:	d1f6      	bne.n	10000cd6 <__eqdf2+0x3a>
10000ce8:	9b03      	ldr	r3, [sp, #12]
10000cea:	1bd8      	subs	r0, r3, r7
10000cec:	1e43      	subs	r3, r0, #1
10000cee:	4198      	sbcs	r0, r3
10000cf0:	e7f1      	b.n	10000cd6 <__eqdf2+0x3a>
10000cf2:	2001      	movs	r0, #1
10000cf4:	42b2      	cmp	r2, r6
10000cf6:	d1ee      	bne.n	10000cd6 <__eqdf2+0x3a>
10000cf8:	4299      	cmp	r1, r3
10000cfa:	d1ec      	bne.n	10000cd6 <__eqdf2+0x3a>
10000cfc:	9b04      	ldr	r3, [sp, #16]
10000cfe:	9e05      	ldr	r6, [sp, #20]
10000d00:	42b3      	cmp	r3, r6
10000d02:	d1e8      	bne.n	10000cd6 <__eqdf2+0x3a>
10000d04:	9b03      	ldr	r3, [sp, #12]
10000d06:	42bb      	cmp	r3, r7
10000d08:	d006      	beq.n	10000d18 <__eqdf2+0x7c>
10000d0a:	2a00      	cmp	r2, #0
10000d0c:	d1e3      	bne.n	10000cd6 <__eqdf2+0x3a>
10000d0e:	4321      	orrs	r1, r4
10000d10:	1e4b      	subs	r3, r1, #1
10000d12:	4199      	sbcs	r1, r3
10000d14:	0008      	movs	r0, r1
10000d16:	e7de      	b.n	10000cd6 <__eqdf2+0x3a>
10000d18:	2000      	movs	r0, #0
10000d1a:	e7dc      	b.n	10000cd6 <__eqdf2+0x3a>
10000d1c:	000007ff 	.word	0x000007ff

10000d20 <__gedf2>:
10000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d22:	b087      	sub	sp, #28
10000d24:	9000      	str	r0, [sp, #0]
10000d26:	9101      	str	r1, [sp, #4]
10000d28:	001d      	movs	r5, r3
10000d2a:	9b00      	ldr	r3, [sp, #0]
10000d2c:	0014      	movs	r4, r2
10000d2e:	9304      	str	r3, [sp, #16]
10000d30:	9b01      	ldr	r3, [sp, #4]
10000d32:	0329      	lsls	r1, r5, #12
10000d34:	031a      	lsls	r2, r3, #12
10000d36:	0b13      	lsrs	r3, r2, #12
10000d38:	4a33      	ldr	r2, [pc, #204]	; (10000e08 <__gedf2+0xe8>)
10000d3a:	9303      	str	r3, [sp, #12]
10000d3c:	4694      	mov	ip, r2
10000d3e:	9b01      	ldr	r3, [sp, #4]
10000d40:	0068      	lsls	r0, r5, #1
10000d42:	005f      	lsls	r7, r3, #1
10000d44:	0d7b      	lsrs	r3, r7, #21
10000d46:	9302      	str	r3, [sp, #8]
10000d48:	9a02      	ldr	r2, [sp, #8]
10000d4a:	9b01      	ldr	r3, [sp, #4]
10000d4c:	9405      	str	r4, [sp, #20]
10000d4e:	0fdb      	lsrs	r3, r3, #31
10000d50:	0b09      	lsrs	r1, r1, #12
10000d52:	0d40      	lsrs	r0, r0, #21
10000d54:	0fee      	lsrs	r6, r5, #31
10000d56:	4562      	cmp	r2, ip
10000d58:	d112      	bne.n	10000d80 <__gedf2+0x60>
10000d5a:	9a00      	ldr	r2, [sp, #0]
10000d5c:	9f03      	ldr	r7, [sp, #12]
10000d5e:	4317      	orrs	r7, r2
10000d60:	d14f      	bne.n	10000e02 <__gedf2+0xe2>
10000d62:	9a02      	ldr	r2, [sp, #8]
10000d64:	4290      	cmp	r0, r2
10000d66:	d004      	beq.n	10000d72 <__gedf2+0x52>
10000d68:	2001      	movs	r0, #1
10000d6a:	2b00      	cmp	r3, #0
10000d6c:	d006      	beq.n	10000d7c <__gedf2+0x5c>
10000d6e:	3802      	subs	r0, #2
10000d70:	e004      	b.n	10000d7c <__gedf2+0x5c>
10000d72:	4321      	orrs	r1, r4
10000d74:	1e08      	subs	r0, r1, #0
10000d76:	d144      	bne.n	10000e02 <__gedf2+0xe2>
10000d78:	42b3      	cmp	r3, r6
10000d7a:	d1f5      	bne.n	10000d68 <__gedf2+0x48>
10000d7c:	b007      	add	sp, #28
10000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000d80:	4560      	cmp	r0, ip
10000d82:	d111      	bne.n	10000da8 <__gedf2+0x88>
10000d84:	4321      	orrs	r1, r4
10000d86:	d13c      	bne.n	10000e02 <__gedf2+0xe2>
10000d88:	9a02      	ldr	r2, [sp, #8]
10000d8a:	2a00      	cmp	r2, #0
10000d8c:	d004      	beq.n	10000d98 <__gedf2+0x78>
10000d8e:	42b3      	cmp	r3, r6
10000d90:	d1ea      	bne.n	10000d68 <__gedf2+0x48>
10000d92:	1e18      	subs	r0, r3, #0
10000d94:	d1f2      	bne.n	10000d7c <__gedf2+0x5c>
10000d96:	e005      	b.n	10000da4 <__gedf2+0x84>
10000d98:	9a00      	ldr	r2, [sp, #0]
10000d9a:	9903      	ldr	r1, [sp, #12]
10000d9c:	4311      	orrs	r1, r2
10000d9e:	d1f6      	bne.n	10000d8e <__gedf2+0x6e>
10000da0:	1e30      	subs	r0, r6, #0
10000da2:	d1eb      	bne.n	10000d7c <__gedf2+0x5c>
10000da4:	2001      	movs	r0, #1
10000da6:	e02d      	b.n	10000e04 <__gedf2+0xe4>
10000da8:	9a02      	ldr	r2, [sp, #8]
10000daa:	2a00      	cmp	r2, #0
10000dac:	d017      	beq.n	10000dde <__gedf2+0xbe>
10000dae:	2800      	cmp	r0, #0
10000db0:	d0da      	beq.n	10000d68 <__gedf2+0x48>
10000db2:	42b3      	cmp	r3, r6
10000db4:	d1d8      	bne.n	10000d68 <__gedf2+0x48>
10000db6:	9a02      	ldr	r2, [sp, #8]
10000db8:	4282      	cmp	r2, r0
10000dba:	dcd5      	bgt.n	10000d68 <__gedf2+0x48>
10000dbc:	9a02      	ldr	r2, [sp, #8]
10000dbe:	4282      	cmp	r2, r0
10000dc0:	dbe7      	blt.n	10000d92 <__gedf2+0x72>
10000dc2:	9a03      	ldr	r2, [sp, #12]
10000dc4:	428a      	cmp	r2, r1
10000dc6:	d8cf      	bhi.n	10000d68 <__gedf2+0x48>
10000dc8:	d1e3      	bne.n	10000d92 <__gedf2+0x72>
10000dca:	9a04      	ldr	r2, [sp, #16]
10000dcc:	9905      	ldr	r1, [sp, #20]
10000dce:	428a      	cmp	r2, r1
10000dd0:	d8ca      	bhi.n	10000d68 <__gedf2+0x48>
10000dd2:	9a04      	ldr	r2, [sp, #16]
10000dd4:	9905      	ldr	r1, [sp, #20]
10000dd6:	2000      	movs	r0, #0
10000dd8:	428a      	cmp	r2, r1
10000dda:	d2cf      	bcs.n	10000d7c <__gedf2+0x5c>
10000ddc:	e7d9      	b.n	10000d92 <__gedf2+0x72>
10000dde:	9f00      	ldr	r7, [sp, #0]
10000de0:	9a03      	ldr	r2, [sp, #12]
10000de2:	4317      	orrs	r7, r2
10000de4:	2800      	cmp	r0, #0
10000de6:	d002      	beq.n	10000dee <__gedf2+0xce>
10000de8:	2f00      	cmp	r7, #0
10000dea:	d0d9      	beq.n	10000da0 <__gedf2+0x80>
10000dec:	e7cf      	b.n	10000d8e <__gedf2+0x6e>
10000dee:	430c      	orrs	r4, r1
10000df0:	d004      	beq.n	10000dfc <__gedf2+0xdc>
10000df2:	2f00      	cmp	r7, #0
10000df4:	d0d4      	beq.n	10000da0 <__gedf2+0x80>
10000df6:	42b3      	cmp	r3, r6
10000df8:	d0e3      	beq.n	10000dc2 <__gedf2+0xa2>
10000dfa:	e7b5      	b.n	10000d68 <__gedf2+0x48>
10000dfc:	2f00      	cmp	r7, #0
10000dfe:	d0bd      	beq.n	10000d7c <__gedf2+0x5c>
10000e00:	e7b2      	b.n	10000d68 <__gedf2+0x48>
10000e02:	2002      	movs	r0, #2
10000e04:	4240      	negs	r0, r0
10000e06:	e7b9      	b.n	10000d7c <__gedf2+0x5c>
10000e08:	000007ff 	.word	0x000007ff

10000e0c <__ledf2>:
10000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e0e:	b087      	sub	sp, #28
10000e10:	9000      	str	r0, [sp, #0]
10000e12:	9101      	str	r1, [sp, #4]
10000e14:	001d      	movs	r5, r3
10000e16:	9b00      	ldr	r3, [sp, #0]
10000e18:	0014      	movs	r4, r2
10000e1a:	9304      	str	r3, [sp, #16]
10000e1c:	9b01      	ldr	r3, [sp, #4]
10000e1e:	0068      	lsls	r0, r5, #1
10000e20:	031a      	lsls	r2, r3, #12
10000e22:	0b13      	lsrs	r3, r2, #12
10000e24:	4a34      	ldr	r2, [pc, #208]	; (10000ef8 <__ledf2+0xec>)
10000e26:	9303      	str	r3, [sp, #12]
10000e28:	4694      	mov	ip, r2
10000e2a:	9b01      	ldr	r3, [sp, #4]
10000e2c:	9405      	str	r4, [sp, #20]
10000e2e:	005f      	lsls	r7, r3, #1
10000e30:	0d7b      	lsrs	r3, r7, #21
10000e32:	9302      	str	r3, [sp, #8]
10000e34:	9b01      	ldr	r3, [sp, #4]
10000e36:	9a02      	ldr	r2, [sp, #8]
10000e38:	0fd9      	lsrs	r1, r3, #31
10000e3a:	032b      	lsls	r3, r5, #12
10000e3c:	0b1b      	lsrs	r3, r3, #12
10000e3e:	0d40      	lsrs	r0, r0, #21
10000e40:	0fee      	lsrs	r6, r5, #31
10000e42:	4562      	cmp	r2, ip
10000e44:	d113      	bne.n	10000e6e <__ledf2+0x62>
10000e46:	9a00      	ldr	r2, [sp, #0]
10000e48:	9f03      	ldr	r7, [sp, #12]
10000e4a:	4317      	orrs	r7, r2
10000e4c:	d152      	bne.n	10000ef4 <__ledf2+0xe8>
10000e4e:	9a02      	ldr	r2, [sp, #8]
10000e50:	4290      	cmp	r0, r2
10000e52:	d004      	beq.n	10000e5e <__ledf2+0x52>
10000e54:	2001      	movs	r0, #1
10000e56:	2900      	cmp	r1, #0
10000e58:	d007      	beq.n	10000e6a <__ledf2+0x5e>
10000e5a:	3802      	subs	r0, #2
10000e5c:	e005      	b.n	10000e6a <__ledf2+0x5e>
10000e5e:	2002      	movs	r0, #2
10000e60:	4323      	orrs	r3, r4
10000e62:	d102      	bne.n	10000e6a <__ledf2+0x5e>
10000e64:	0018      	movs	r0, r3
10000e66:	42b1      	cmp	r1, r6
10000e68:	d1f4      	bne.n	10000e54 <__ledf2+0x48>
10000e6a:	b007      	add	sp, #28
10000e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000e6e:	4560      	cmp	r0, ip
10000e70:	d113      	bne.n	10000e9a <__ledf2+0x8e>
10000e72:	2002      	movs	r0, #2
10000e74:	4323      	orrs	r3, r4
10000e76:	d1f8      	bne.n	10000e6a <__ledf2+0x5e>
10000e78:	9b02      	ldr	r3, [sp, #8]
10000e7a:	2b00      	cmp	r3, #0
10000e7c:	d004      	beq.n	10000e88 <__ledf2+0x7c>
10000e7e:	42b1      	cmp	r1, r6
10000e80:	d1e8      	bne.n	10000e54 <__ledf2+0x48>
10000e82:	1e08      	subs	r0, r1, #0
10000e84:	d1f1      	bne.n	10000e6a <__ledf2+0x5e>
10000e86:	e005      	b.n	10000e94 <__ledf2+0x88>
10000e88:	9b00      	ldr	r3, [sp, #0]
10000e8a:	9a03      	ldr	r2, [sp, #12]
10000e8c:	431a      	orrs	r2, r3
10000e8e:	d1f6      	bne.n	10000e7e <__ledf2+0x72>
10000e90:	1e30      	subs	r0, r6, #0
10000e92:	d1ea      	bne.n	10000e6a <__ledf2+0x5e>
10000e94:	2001      	movs	r0, #1
10000e96:	4240      	negs	r0, r0
10000e98:	e7e7      	b.n	10000e6a <__ledf2+0x5e>
10000e9a:	9a02      	ldr	r2, [sp, #8]
10000e9c:	2a00      	cmp	r2, #0
10000e9e:	d017      	beq.n	10000ed0 <__ledf2+0xc4>
10000ea0:	2800      	cmp	r0, #0
10000ea2:	d0d7      	beq.n	10000e54 <__ledf2+0x48>
10000ea4:	42b1      	cmp	r1, r6
10000ea6:	d1d5      	bne.n	10000e54 <__ledf2+0x48>
10000ea8:	9a02      	ldr	r2, [sp, #8]
10000eaa:	4282      	cmp	r2, r0
10000eac:	dcd2      	bgt.n	10000e54 <__ledf2+0x48>
10000eae:	9a02      	ldr	r2, [sp, #8]
10000eb0:	4282      	cmp	r2, r0
10000eb2:	dbe6      	blt.n	10000e82 <__ledf2+0x76>
10000eb4:	9a03      	ldr	r2, [sp, #12]
10000eb6:	429a      	cmp	r2, r3
10000eb8:	d8cc      	bhi.n	10000e54 <__ledf2+0x48>
10000eba:	d1e2      	bne.n	10000e82 <__ledf2+0x76>
10000ebc:	9b04      	ldr	r3, [sp, #16]
10000ebe:	9a05      	ldr	r2, [sp, #20]
10000ec0:	4293      	cmp	r3, r2
10000ec2:	d8c7      	bhi.n	10000e54 <__ledf2+0x48>
10000ec4:	9b04      	ldr	r3, [sp, #16]
10000ec6:	9a05      	ldr	r2, [sp, #20]
10000ec8:	2000      	movs	r0, #0
10000eca:	4293      	cmp	r3, r2
10000ecc:	d2cd      	bcs.n	10000e6a <__ledf2+0x5e>
10000ece:	e7d8      	b.n	10000e82 <__ledf2+0x76>
10000ed0:	9f00      	ldr	r7, [sp, #0]
10000ed2:	9a03      	ldr	r2, [sp, #12]
10000ed4:	4317      	orrs	r7, r2
10000ed6:	2800      	cmp	r0, #0
10000ed8:	d002      	beq.n	10000ee0 <__ledf2+0xd4>
10000eda:	2f00      	cmp	r7, #0
10000edc:	d0d8      	beq.n	10000e90 <__ledf2+0x84>
10000ede:	e7ce      	b.n	10000e7e <__ledf2+0x72>
10000ee0:	431c      	orrs	r4, r3
10000ee2:	d004      	beq.n	10000eee <__ledf2+0xe2>
10000ee4:	2f00      	cmp	r7, #0
10000ee6:	d0d3      	beq.n	10000e90 <__ledf2+0x84>
10000ee8:	42b1      	cmp	r1, r6
10000eea:	d0e3      	beq.n	10000eb4 <__ledf2+0xa8>
10000eec:	e7b2      	b.n	10000e54 <__ledf2+0x48>
10000eee:	2f00      	cmp	r7, #0
10000ef0:	d0bb      	beq.n	10000e6a <__ledf2+0x5e>
10000ef2:	e7af      	b.n	10000e54 <__ledf2+0x48>
10000ef4:	2002      	movs	r0, #2
10000ef6:	e7b8      	b.n	10000e6a <__ledf2+0x5e>
10000ef8:	000007ff 	.word	0x000007ff

10000efc <__aeabi_dmul>:
10000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10000efe:	b08b      	sub	sp, #44	; 0x2c
10000f00:	9200      	str	r2, [sp, #0]
10000f02:	9301      	str	r3, [sp, #4]
10000f04:	030d      	lsls	r5, r1, #12
10000f06:	004b      	lsls	r3, r1, #1
10000f08:	0fca      	lsrs	r2, r1, #31
10000f0a:	0006      	movs	r6, r0
10000f0c:	0b2d      	lsrs	r5, r5, #12
10000f0e:	0d5b      	lsrs	r3, r3, #21
10000f10:	9205      	str	r2, [sp, #20]
10000f12:	d100      	bne.n	10000f16 <__aeabi_dmul+0x1a>
10000f14:	e114      	b.n	10001140 <__aeabi_dmul+0x244>
10000f16:	4acf      	ldr	r2, [pc, #828]	; (10001254 <__aeabi_dmul+0x358>)
10000f18:	4293      	cmp	r3, r2
10000f1a:	d100      	bne.n	10000f1e <__aeabi_dmul+0x22>
10000f1c:	e138      	b.n	10001190 <__aeabi_dmul+0x294>
10000f1e:	00ed      	lsls	r5, r5, #3
10000f20:	0f42      	lsrs	r2, r0, #29
10000f22:	432a      	orrs	r2, r5
10000f24:	2580      	movs	r5, #128	; 0x80
10000f26:	042d      	lsls	r5, r5, #16
10000f28:	4315      	orrs	r5, r2
10000f2a:	4acb      	ldr	r2, [pc, #812]	; (10001258 <__aeabi_dmul+0x35c>)
10000f2c:	00c4      	lsls	r4, r0, #3
10000f2e:	189b      	adds	r3, r3, r2
10000f30:	9303      	str	r3, [sp, #12]
10000f32:	2300      	movs	r3, #0
10000f34:	9302      	str	r3, [sp, #8]
10000f36:	9b01      	ldr	r3, [sp, #4]
10000f38:	9800      	ldr	r0, [sp, #0]
10000f3a:	031e      	lsls	r6, r3, #12
10000f3c:	005a      	lsls	r2, r3, #1
10000f3e:	0fdb      	lsrs	r3, r3, #31
10000f40:	0b36      	lsrs	r6, r6, #12
10000f42:	0d52      	lsrs	r2, r2, #21
10000f44:	9304      	str	r3, [sp, #16]
10000f46:	d100      	bne.n	10000f4a <__aeabi_dmul+0x4e>
10000f48:	e131      	b.n	100011ae <__aeabi_dmul+0x2b2>
10000f4a:	4bc2      	ldr	r3, [pc, #776]	; (10001254 <__aeabi_dmul+0x358>)
10000f4c:	429a      	cmp	r2, r3
10000f4e:	d100      	bne.n	10000f52 <__aeabi_dmul+0x56>
10000f50:	e153      	b.n	100011fa <__aeabi_dmul+0x2fe>
10000f52:	0f43      	lsrs	r3, r0, #29
10000f54:	00f6      	lsls	r6, r6, #3
10000f56:	4333      	orrs	r3, r6
10000f58:	2680      	movs	r6, #128	; 0x80
10000f5a:	49bf      	ldr	r1, [pc, #764]	; (10001258 <__aeabi_dmul+0x35c>)
10000f5c:	0436      	lsls	r6, r6, #16
10000f5e:	431e      	orrs	r6, r3
10000f60:	00c3      	lsls	r3, r0, #3
10000f62:	1850      	adds	r0, r2, r1
10000f64:	2200      	movs	r2, #0
10000f66:	9905      	ldr	r1, [sp, #20]
10000f68:	9f04      	ldr	r7, [sp, #16]
10000f6a:	4079      	eors	r1, r7
10000f6c:	9100      	str	r1, [sp, #0]
10000f6e:	9903      	ldr	r1, [sp, #12]
10000f70:	1841      	adds	r1, r0, r1
10000f72:	9106      	str	r1, [sp, #24]
10000f74:	3101      	adds	r1, #1
10000f76:	9103      	str	r1, [sp, #12]
10000f78:	9902      	ldr	r1, [sp, #8]
10000f7a:	0088      	lsls	r0, r1, #2
10000f7c:	4310      	orrs	r0, r2
10000f7e:	280a      	cmp	r0, #10
10000f80:	dd00      	ble.n	10000f84 <__aeabi_dmul+0x88>
10000f82:	e173      	b.n	1000126c <__aeabi_dmul+0x370>
10000f84:	2802      	cmp	r0, #2
10000f86:	dd00      	ble.n	10000f8a <__aeabi_dmul+0x8e>
10000f88:	e146      	b.n	10001218 <__aeabi_dmul+0x31c>
10000f8a:	3801      	subs	r0, #1
10000f8c:	2801      	cmp	r0, #1
10000f8e:	d800      	bhi.n	10000f92 <__aeabi_dmul+0x96>
10000f90:	e155      	b.n	1000123e <__aeabi_dmul+0x342>
10000f92:	0c19      	lsrs	r1, r3, #16
10000f94:	b29b      	uxth	r3, r3
10000f96:	9102      	str	r1, [sp, #8]
10000f98:	0019      	movs	r1, r3
10000f9a:	0c22      	lsrs	r2, r4, #16
10000f9c:	b2a4      	uxth	r4, r4
10000f9e:	4351      	muls	r1, r2
10000fa0:	0020      	movs	r0, r4
10000fa2:	468c      	mov	ip, r1
10000fa4:	9f02      	ldr	r7, [sp, #8]
10000fa6:	9902      	ldr	r1, [sp, #8]
10000fa8:	4358      	muls	r0, r3
10000faa:	4351      	muls	r1, r2
10000fac:	4367      	muls	r7, r4
10000fae:	9105      	str	r1, [sp, #20]
10000fb0:	4467      	add	r7, ip
10000fb2:	0c01      	lsrs	r1, r0, #16
10000fb4:	19c9      	adds	r1, r1, r7
10000fb6:	9004      	str	r0, [sp, #16]
10000fb8:	458c      	cmp	ip, r1
10000fba:	d905      	bls.n	10000fc8 <__aeabi_dmul+0xcc>
10000fbc:	2080      	movs	r0, #128	; 0x80
10000fbe:	0240      	lsls	r0, r0, #9
10000fc0:	4684      	mov	ip, r0
10000fc2:	9f05      	ldr	r7, [sp, #20]
10000fc4:	4467      	add	r7, ip
10000fc6:	9705      	str	r7, [sp, #20]
10000fc8:	0c08      	lsrs	r0, r1, #16
10000fca:	4684      	mov	ip, r0
10000fcc:	4668      	mov	r0, sp
10000fce:	8a00      	ldrh	r0, [r0, #16]
10000fd0:	0409      	lsls	r1, r1, #16
10000fd2:	1809      	adds	r1, r1, r0
10000fd4:	9109      	str	r1, [sp, #36]	; 0x24
10000fd6:	0c31      	lsrs	r1, r6, #16
10000fd8:	b2b6      	uxth	r6, r6
10000fda:	9104      	str	r1, [sp, #16]
10000fdc:	0030      	movs	r0, r6
10000fde:	0021      	movs	r1, r4
10000fe0:	9f04      	ldr	r7, [sp, #16]
10000fe2:	4350      	muls	r0, r2
10000fe4:	437c      	muls	r4, r7
10000fe6:	4371      	muls	r1, r6
10000fe8:	437a      	muls	r2, r7
10000fea:	1824      	adds	r4, r4, r0
10000fec:	0c0f      	lsrs	r7, r1, #16
10000fee:	193c      	adds	r4, r7, r4
10000ff0:	42a0      	cmp	r0, r4
10000ff2:	d902      	bls.n	10000ffa <__aeabi_dmul+0xfe>
10000ff4:	2080      	movs	r0, #128	; 0x80
10000ff6:	0240      	lsls	r0, r0, #9
10000ff8:	1812      	adds	r2, r2, r0
10000ffa:	0c20      	lsrs	r0, r4, #16
10000ffc:	1882      	adds	r2, r0, r2
10000ffe:	0424      	lsls	r4, r4, #16
10001000:	b289      	uxth	r1, r1
10001002:	9207      	str	r2, [sp, #28]
10001004:	1862      	adds	r2, r4, r1
10001006:	9208      	str	r2, [sp, #32]
10001008:	9908      	ldr	r1, [sp, #32]
1000100a:	4662      	mov	r2, ip
1000100c:	468c      	mov	ip, r1
1000100e:	0c29      	lsrs	r1, r5, #16
10001010:	b2ad      	uxth	r5, r5
10001012:	0028      	movs	r0, r5
10001014:	9f02      	ldr	r7, [sp, #8]
10001016:	4358      	muls	r0, r3
10001018:	436f      	muls	r7, r5
1000101a:	434b      	muls	r3, r1
1000101c:	4462      	add	r2, ip
1000101e:	4694      	mov	ip, r2
10001020:	9c02      	ldr	r4, [sp, #8]
10001022:	18ff      	adds	r7, r7, r3
10001024:	0c02      	lsrs	r2, r0, #16
10001026:	19d2      	adds	r2, r2, r7
10001028:	434c      	muls	r4, r1
1000102a:	4293      	cmp	r3, r2
1000102c:	d902      	bls.n	10001034 <__aeabi_dmul+0x138>
1000102e:	2380      	movs	r3, #128	; 0x80
10001030:	025b      	lsls	r3, r3, #9
10001032:	18e4      	adds	r4, r4, r3
10001034:	0c13      	lsrs	r3, r2, #16
10001036:	191b      	adds	r3, r3, r4
10001038:	9302      	str	r3, [sp, #8]
1000103a:	002b      	movs	r3, r5
1000103c:	b280      	uxth	r0, r0
1000103e:	0412      	lsls	r2, r2, #16
10001040:	1812      	adds	r2, r2, r0
10001042:	9804      	ldr	r0, [sp, #16]
10001044:	4373      	muls	r3, r6
10001046:	4345      	muls	r5, r0
10001048:	434e      	muls	r6, r1
1000104a:	4341      	muls	r1, r0
1000104c:	19a8      	adds	r0, r5, r6
1000104e:	0c1d      	lsrs	r5, r3, #16
10001050:	182d      	adds	r5, r5, r0
10001052:	42ae      	cmp	r6, r5
10001054:	d902      	bls.n	1000105c <__aeabi_dmul+0x160>
10001056:	2080      	movs	r0, #128	; 0x80
10001058:	0240      	lsls	r0, r0, #9
1000105a:	1809      	adds	r1, r1, r0
1000105c:	9c05      	ldr	r4, [sp, #20]
1000105e:	4660      	mov	r0, ip
10001060:	46a4      	mov	ip, r4
10001062:	9c08      	ldr	r4, [sp, #32]
10001064:	4460      	add	r0, ip
10001066:	42a0      	cmp	r0, r4
10001068:	41bf      	sbcs	r7, r7
1000106a:	1880      	adds	r0, r0, r2
1000106c:	4290      	cmp	r0, r2
1000106e:	4192      	sbcs	r2, r2
10001070:	042e      	lsls	r6, r5, #16
10001072:	b29b      	uxth	r3, r3
10001074:	18f6      	adds	r6, r6, r3
10001076:	9b07      	ldr	r3, [sp, #28]
10001078:	427f      	negs	r7, r7
1000107a:	18f6      	adds	r6, r6, r3
1000107c:	4253      	negs	r3, r2
1000107e:	9304      	str	r3, [sp, #16]
10001080:	9b02      	ldr	r3, [sp, #8]
10001082:	19f4      	adds	r4, r6, r7
10001084:	469c      	mov	ip, r3
10001086:	44a4      	add	ip, r4
10001088:	4663      	mov	r3, ip
1000108a:	9a04      	ldr	r2, [sp, #16]
1000108c:	42bc      	cmp	r4, r7
1000108e:	41a4      	sbcs	r4, r4
10001090:	189b      	adds	r3, r3, r2
10001092:	9a07      	ldr	r2, [sp, #28]
10001094:	4264      	negs	r4, r4
10001096:	4296      	cmp	r6, r2
10001098:	41b6      	sbcs	r6, r6
1000109a:	9a02      	ldr	r2, [sp, #8]
1000109c:	4276      	negs	r6, r6
1000109e:	4334      	orrs	r4, r6
100010a0:	0c2d      	lsrs	r5, r5, #16
100010a2:	1964      	adds	r4, r4, r5
100010a4:	4594      	cmp	ip, r2
100010a6:	41ad      	sbcs	r5, r5
100010a8:	9a04      	ldr	r2, [sp, #16]
100010aa:	426d      	negs	r5, r5
100010ac:	4293      	cmp	r3, r2
100010ae:	4192      	sbcs	r2, r2
100010b0:	4252      	negs	r2, r2
100010b2:	4315      	orrs	r5, r2
100010b4:	1964      	adds	r4, r4, r5
100010b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100010b8:	1864      	adds	r4, r4, r1
100010ba:	0241      	lsls	r1, r0, #9
100010bc:	4311      	orrs	r1, r2
100010be:	1e4a      	subs	r2, r1, #1
100010c0:	4191      	sbcs	r1, r2
100010c2:	0dc0      	lsrs	r0, r0, #23
100010c4:	0dde      	lsrs	r6, r3, #23
100010c6:	0264      	lsls	r4, r4, #9
100010c8:	4301      	orrs	r1, r0
100010ca:	025b      	lsls	r3, r3, #9
100010cc:	4326      	orrs	r6, r4
100010ce:	430b      	orrs	r3, r1
100010d0:	01e4      	lsls	r4, r4, #7
100010d2:	d400      	bmi.n	100010d6 <__aeabi_dmul+0x1da>
100010d4:	e0df      	b.n	10001296 <__aeabi_dmul+0x39a>
100010d6:	2101      	movs	r1, #1
100010d8:	085a      	lsrs	r2, r3, #1
100010da:	400b      	ands	r3, r1
100010dc:	431a      	orrs	r2, r3
100010de:	07f3      	lsls	r3, r6, #31
100010e0:	40ce      	lsrs	r6, r1
100010e2:	4313      	orrs	r3, r2
100010e4:	9a03      	ldr	r2, [sp, #12]
100010e6:	495d      	ldr	r1, [pc, #372]	; (1000125c <__aeabi_dmul+0x360>)
100010e8:	1852      	adds	r2, r2, r1
100010ea:	2a00      	cmp	r2, #0
100010ec:	dc00      	bgt.n	100010f0 <__aeabi_dmul+0x1f4>
100010ee:	e0d5      	b.n	1000129c <__aeabi_dmul+0x3a0>
100010f0:	0759      	lsls	r1, r3, #29
100010f2:	d009      	beq.n	10001108 <__aeabi_dmul+0x20c>
100010f4:	210f      	movs	r1, #15
100010f6:	4019      	ands	r1, r3
100010f8:	2904      	cmp	r1, #4
100010fa:	d005      	beq.n	10001108 <__aeabi_dmul+0x20c>
100010fc:	1d19      	adds	r1, r3, #4
100010fe:	4299      	cmp	r1, r3
10001100:	419b      	sbcs	r3, r3
10001102:	425b      	negs	r3, r3
10001104:	18f6      	adds	r6, r6, r3
10001106:	000b      	movs	r3, r1
10001108:	01f1      	lsls	r1, r6, #7
1000110a:	d506      	bpl.n	1000111a <__aeabi_dmul+0x21e>
1000110c:	2180      	movs	r1, #128	; 0x80
1000110e:	00c9      	lsls	r1, r1, #3
10001110:	468c      	mov	ip, r1
10001112:	4a53      	ldr	r2, [pc, #332]	; (10001260 <__aeabi_dmul+0x364>)
10001114:	4016      	ands	r6, r2
10001116:	9a03      	ldr	r2, [sp, #12]
10001118:	4462      	add	r2, ip
1000111a:	4952      	ldr	r1, [pc, #328]	; (10001264 <__aeabi_dmul+0x368>)
1000111c:	428a      	cmp	r2, r1
1000111e:	dd00      	ble.n	10001122 <__aeabi_dmul+0x226>
10001120:	e109      	b.n	10001336 <__aeabi_dmul+0x43a>
10001122:	0774      	lsls	r4, r6, #29
10001124:	08db      	lsrs	r3, r3, #3
10001126:	431c      	orrs	r4, r3
10001128:	08f6      	lsrs	r6, r6, #3
1000112a:	0513      	lsls	r3, r2, #20
1000112c:	0336      	lsls	r6, r6, #12
1000112e:	9a00      	ldr	r2, [sp, #0]
10001130:	0b36      	lsrs	r6, r6, #12
10001132:	4333      	orrs	r3, r6
10001134:	07d2      	lsls	r2, r2, #31
10001136:	4313      	orrs	r3, r2
10001138:	0020      	movs	r0, r4
1000113a:	0019      	movs	r1, r3
1000113c:	b00b      	add	sp, #44	; 0x2c
1000113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001140:	002c      	movs	r4, r5
10001142:	4304      	orrs	r4, r0
10001144:	d02b      	beq.n	1000119e <__aeabi_dmul+0x2a2>
10001146:	2d00      	cmp	r5, #0
10001148:	d016      	beq.n	10001178 <__aeabi_dmul+0x27c>
1000114a:	0028      	movs	r0, r5
1000114c:	f7ff f91a 	bl	10000384 <__clzsi2>
10001150:	0004      	movs	r4, r0
10001152:	0002      	movs	r2, r0
10001154:	3c0b      	subs	r4, #11
10001156:	231d      	movs	r3, #29
10001158:	0030      	movs	r0, r6
1000115a:	1b1b      	subs	r3, r3, r4
1000115c:	0011      	movs	r1, r2
1000115e:	40d8      	lsrs	r0, r3
10001160:	3908      	subs	r1, #8
10001162:	408d      	lsls	r5, r1
10001164:	0003      	movs	r3, r0
10001166:	432b      	orrs	r3, r5
10001168:	0035      	movs	r5, r6
1000116a:	408d      	lsls	r5, r1
1000116c:	493e      	ldr	r1, [pc, #248]	; (10001268 <__aeabi_dmul+0x36c>)
1000116e:	002c      	movs	r4, r5
10001170:	1a8a      	subs	r2, r1, r2
10001172:	001d      	movs	r5, r3
10001174:	9203      	str	r2, [sp, #12]
10001176:	e6dc      	b.n	10000f32 <__aeabi_dmul+0x36>
10001178:	f7ff f904 	bl	10000384 <__clzsi2>
1000117c:	0004      	movs	r4, r0
1000117e:	0002      	movs	r2, r0
10001180:	3415      	adds	r4, #21
10001182:	3220      	adds	r2, #32
10001184:	2c1c      	cmp	r4, #28
10001186:	dde6      	ble.n	10001156 <__aeabi_dmul+0x25a>
10001188:	0033      	movs	r3, r6
1000118a:	3808      	subs	r0, #8
1000118c:	4083      	lsls	r3, r0
1000118e:	e7ed      	b.n	1000116c <__aeabi_dmul+0x270>
10001190:	0004      	movs	r4, r0
10001192:	432c      	orrs	r4, r5
10001194:	d007      	beq.n	100011a6 <__aeabi_dmul+0x2aa>
10001196:	9303      	str	r3, [sp, #12]
10001198:	0004      	movs	r4, r0
1000119a:	2303      	movs	r3, #3
1000119c:	e6ca      	b.n	10000f34 <__aeabi_dmul+0x38>
1000119e:	0025      	movs	r5, r4
100011a0:	2301      	movs	r3, #1
100011a2:	9403      	str	r4, [sp, #12]
100011a4:	e6c6      	b.n	10000f34 <__aeabi_dmul+0x38>
100011a6:	9303      	str	r3, [sp, #12]
100011a8:	0025      	movs	r5, r4
100011aa:	2302      	movs	r3, #2
100011ac:	e6c2      	b.n	10000f34 <__aeabi_dmul+0x38>
100011ae:	9b00      	ldr	r3, [sp, #0]
100011b0:	4333      	orrs	r3, r6
100011b2:	d029      	beq.n	10001208 <__aeabi_dmul+0x30c>
100011b4:	2e00      	cmp	r6, #0
100011b6:	d014      	beq.n	100011e2 <__aeabi_dmul+0x2e6>
100011b8:	0030      	movs	r0, r6
100011ba:	f7ff f8e3 	bl	10000384 <__clzsi2>
100011be:	0001      	movs	r1, r0
100011c0:	0003      	movs	r3, r0
100011c2:	390b      	subs	r1, #11
100011c4:	221d      	movs	r2, #29
100011c6:	0018      	movs	r0, r3
100011c8:	1a52      	subs	r2, r2, r1
100011ca:	9900      	ldr	r1, [sp, #0]
100011cc:	3808      	subs	r0, #8
100011ce:	4086      	lsls	r6, r0
100011d0:	40d1      	lsrs	r1, r2
100011d2:	4331      	orrs	r1, r6
100011d4:	9e00      	ldr	r6, [sp, #0]
100011d6:	4086      	lsls	r6, r0
100011d8:	4823      	ldr	r0, [pc, #140]	; (10001268 <__aeabi_dmul+0x36c>)
100011da:	1ac0      	subs	r0, r0, r3
100011dc:	0033      	movs	r3, r6
100011de:	000e      	movs	r6, r1
100011e0:	e6c0      	b.n	10000f64 <__aeabi_dmul+0x68>
100011e2:	f7ff f8cf 	bl	10000384 <__clzsi2>
100011e6:	0001      	movs	r1, r0
100011e8:	0003      	movs	r3, r0
100011ea:	3115      	adds	r1, #21
100011ec:	3320      	adds	r3, #32
100011ee:	291c      	cmp	r1, #28
100011f0:	dde8      	ble.n	100011c4 <__aeabi_dmul+0x2c8>
100011f2:	9900      	ldr	r1, [sp, #0]
100011f4:	3808      	subs	r0, #8
100011f6:	4081      	lsls	r1, r0
100011f8:	e7ee      	b.n	100011d8 <__aeabi_dmul+0x2dc>
100011fa:	9b00      	ldr	r3, [sp, #0]
100011fc:	4333      	orrs	r3, r6
100011fe:	d007      	beq.n	10001210 <__aeabi_dmul+0x314>
10001200:	0003      	movs	r3, r0
10001202:	0010      	movs	r0, r2
10001204:	2203      	movs	r2, #3
10001206:	e6ae      	b.n	10000f66 <__aeabi_dmul+0x6a>
10001208:	001e      	movs	r6, r3
1000120a:	0018      	movs	r0, r3
1000120c:	2201      	movs	r2, #1
1000120e:	e6aa      	b.n	10000f66 <__aeabi_dmul+0x6a>
10001210:	0010      	movs	r0, r2
10001212:	001e      	movs	r6, r3
10001214:	2202      	movs	r2, #2
10001216:	e6a6      	b.n	10000f66 <__aeabi_dmul+0x6a>
10001218:	2101      	movs	r1, #1
1000121a:	4081      	lsls	r1, r0
1000121c:	20a6      	movs	r0, #166	; 0xa6
1000121e:	000f      	movs	r7, r1
10001220:	00c0      	lsls	r0, r0, #3
10001222:	4007      	ands	r7, r0
10001224:	4201      	tst	r1, r0
10001226:	d127      	bne.n	10001278 <__aeabi_dmul+0x37c>
10001228:	2090      	movs	r0, #144	; 0x90
1000122a:	0080      	lsls	r0, r0, #2
1000122c:	4201      	tst	r1, r0
1000122e:	d177      	bne.n	10001320 <__aeabi_dmul+0x424>
10001230:	38b9      	subs	r0, #185	; 0xb9
10001232:	38ff      	subs	r0, #255	; 0xff
10001234:	4201      	tst	r1, r0
10001236:	d100      	bne.n	1000123a <__aeabi_dmul+0x33e>
10001238:	e6ab      	b.n	10000f92 <__aeabi_dmul+0x96>
1000123a:	9904      	ldr	r1, [sp, #16]
1000123c:	9100      	str	r1, [sp, #0]
1000123e:	2a02      	cmp	r2, #2
10001240:	d079      	beq.n	10001336 <__aeabi_dmul+0x43a>
10001242:	2a03      	cmp	r2, #3
10001244:	d075      	beq.n	10001332 <__aeabi_dmul+0x436>
10001246:	2a01      	cmp	r2, #1
10001248:	d000      	beq.n	1000124c <__aeabi_dmul+0x350>
1000124a:	e74b      	b.n	100010e4 <__aeabi_dmul+0x1e8>
1000124c:	2600      	movs	r6, #0
1000124e:	0034      	movs	r4, r6
10001250:	0032      	movs	r2, r6
10001252:	e76a      	b.n	1000112a <__aeabi_dmul+0x22e>
10001254:	000007ff 	.word	0x000007ff
10001258:	fffffc01 	.word	0xfffffc01
1000125c:	000003ff 	.word	0x000003ff
10001260:	feffffff 	.word	0xfeffffff
10001264:	000007fe 	.word	0x000007fe
10001268:	fffffc0d 	.word	0xfffffc0d
1000126c:	9905      	ldr	r1, [sp, #20]
1000126e:	9100      	str	r1, [sp, #0]
10001270:	280f      	cmp	r0, #15
10001272:	d005      	beq.n	10001280 <__aeabi_dmul+0x384>
10001274:	280b      	cmp	r0, #11
10001276:	d0e0      	beq.n	1000123a <__aeabi_dmul+0x33e>
10001278:	002e      	movs	r6, r5
1000127a:	0023      	movs	r3, r4
1000127c:	9a02      	ldr	r2, [sp, #8]
1000127e:	e7de      	b.n	1000123e <__aeabi_dmul+0x342>
10001280:	2280      	movs	r2, #128	; 0x80
10001282:	0312      	lsls	r2, r2, #12
10001284:	4215      	tst	r5, r2
10001286:	d04f      	beq.n	10001328 <__aeabi_dmul+0x42c>
10001288:	4216      	tst	r6, r2
1000128a:	d14d      	bne.n	10001328 <__aeabi_dmul+0x42c>
1000128c:	0035      	movs	r5, r6
1000128e:	9a04      	ldr	r2, [sp, #16]
10001290:	9200      	str	r2, [sp, #0]
10001292:	001c      	movs	r4, r3
10001294:	e048      	b.n	10001328 <__aeabi_dmul+0x42c>
10001296:	9a06      	ldr	r2, [sp, #24]
10001298:	9203      	str	r2, [sp, #12]
1000129a:	e723      	b.n	100010e4 <__aeabi_dmul+0x1e8>
1000129c:	2001      	movs	r0, #1
1000129e:	1a80      	subs	r0, r0, r2
100012a0:	2838      	cmp	r0, #56	; 0x38
100012a2:	dcd3      	bgt.n	1000124c <__aeabi_dmul+0x350>
100012a4:	281f      	cmp	r0, #31
100012a6:	dc27      	bgt.n	100012f8 <__aeabi_dmul+0x3fc>
100012a8:	4926      	ldr	r1, [pc, #152]	; (10001344 <__aeabi_dmul+0x448>)
100012aa:	9a03      	ldr	r2, [sp, #12]
100012ac:	468c      	mov	ip, r1
100012ae:	001c      	movs	r4, r3
100012b0:	4462      	add	r2, ip
100012b2:	0031      	movs	r1, r6
100012b4:	4093      	lsls	r3, r2
100012b6:	4091      	lsls	r1, r2
100012b8:	40c4      	lsrs	r4, r0
100012ba:	001a      	movs	r2, r3
100012bc:	4321      	orrs	r1, r4
100012be:	1e53      	subs	r3, r2, #1
100012c0:	419a      	sbcs	r2, r3
100012c2:	000b      	movs	r3, r1
100012c4:	40c6      	lsrs	r6, r0
100012c6:	4313      	orrs	r3, r2
100012c8:	075a      	lsls	r2, r3, #29
100012ca:	d009      	beq.n	100012e0 <__aeabi_dmul+0x3e4>
100012cc:	220f      	movs	r2, #15
100012ce:	401a      	ands	r2, r3
100012d0:	2a04      	cmp	r2, #4
100012d2:	d005      	beq.n	100012e0 <__aeabi_dmul+0x3e4>
100012d4:	1d1a      	adds	r2, r3, #4
100012d6:	429a      	cmp	r2, r3
100012d8:	419b      	sbcs	r3, r3
100012da:	425b      	negs	r3, r3
100012dc:	18f6      	adds	r6, r6, r3
100012de:	0013      	movs	r3, r2
100012e0:	2180      	movs	r1, #128	; 0x80
100012e2:	0030      	movs	r0, r6
100012e4:	0409      	lsls	r1, r1, #16
100012e6:	4008      	ands	r0, r1
100012e8:	420e      	tst	r6, r1
100012ea:	d127      	bne.n	1000133c <__aeabi_dmul+0x440>
100012ec:	0774      	lsls	r4, r6, #29
100012ee:	08db      	lsrs	r3, r3, #3
100012f0:	0002      	movs	r2, r0
100012f2:	431c      	orrs	r4, r3
100012f4:	08f6      	lsrs	r6, r6, #3
100012f6:	e718      	b.n	1000112a <__aeabi_dmul+0x22e>
100012f8:	211f      	movs	r1, #31
100012fa:	4249      	negs	r1, r1
100012fc:	1a8a      	subs	r2, r1, r2
100012fe:	0031      	movs	r1, r6
10001300:	40d1      	lsrs	r1, r2
10001302:	2200      	movs	r2, #0
10001304:	2820      	cmp	r0, #32
10001306:	d005      	beq.n	10001314 <__aeabi_dmul+0x418>
10001308:	480f      	ldr	r0, [pc, #60]	; (10001348 <__aeabi_dmul+0x44c>)
1000130a:	9a03      	ldr	r2, [sp, #12]
1000130c:	4684      	mov	ip, r0
1000130e:	4462      	add	r2, ip
10001310:	4096      	lsls	r6, r2
10001312:	0032      	movs	r2, r6
10001314:	4313      	orrs	r3, r2
10001316:	1e5a      	subs	r2, r3, #1
10001318:	4193      	sbcs	r3, r2
1000131a:	2600      	movs	r6, #0
1000131c:	430b      	orrs	r3, r1
1000131e:	e7d3      	b.n	100012c8 <__aeabi_dmul+0x3cc>
10001320:	2580      	movs	r5, #128	; 0x80
10001322:	003c      	movs	r4, r7
10001324:	032d      	lsls	r5, r5, #12
10001326:	9700      	str	r7, [sp, #0]
10001328:	2680      	movs	r6, #128	; 0x80
1000132a:	0336      	lsls	r6, r6, #12
1000132c:	432e      	orrs	r6, r5
1000132e:	4a07      	ldr	r2, [pc, #28]	; (1000134c <__aeabi_dmul+0x450>)
10001330:	e6fb      	b.n	1000112a <__aeabi_dmul+0x22e>
10001332:	0035      	movs	r5, r6
10001334:	e7ad      	b.n	10001292 <__aeabi_dmul+0x396>
10001336:	2600      	movs	r6, #0
10001338:	0034      	movs	r4, r6
1000133a:	e7f8      	b.n	1000132e <__aeabi_dmul+0x432>
1000133c:	2600      	movs	r6, #0
1000133e:	2201      	movs	r2, #1
10001340:	0034      	movs	r4, r6
10001342:	e6f2      	b.n	1000112a <__aeabi_dmul+0x22e>
10001344:	0000041e 	.word	0x0000041e
10001348:	0000043e 	.word	0x0000043e
1000134c:	000007ff 	.word	0x000007ff

10001350 <__aeabi_dsub>:
10001350:	b5f0      	push	{r4, r5, r6, r7, lr}
10001352:	b085      	sub	sp, #20
10001354:	9200      	str	r2, [sp, #0]
10001356:	9301      	str	r3, [sp, #4]
10001358:	0fcb      	lsrs	r3, r1, #31
1000135a:	030d      	lsls	r5, r1, #12
1000135c:	9302      	str	r3, [sp, #8]
1000135e:	9b01      	ldr	r3, [sp, #4]
10001360:	004c      	lsls	r4, r1, #1
10001362:	0a6d      	lsrs	r5, r5, #9
10001364:	0f41      	lsrs	r1, r0, #29
10001366:	4329      	orrs	r1, r5
10001368:	005d      	lsls	r5, r3, #1
1000136a:	031e      	lsls	r6, r3, #12
1000136c:	0d6b      	lsrs	r3, r5, #21
1000136e:	469c      	mov	ip, r3
10001370:	9b01      	ldr	r3, [sp, #4]
10001372:	0a76      	lsrs	r6, r6, #9
10001374:	0fdd      	lsrs	r5, r3, #31
10001376:	9b00      	ldr	r3, [sp, #0]
10001378:	9a00      	ldr	r2, [sp, #0]
1000137a:	0f5b      	lsrs	r3, r3, #29
1000137c:	4333      	orrs	r3, r6
1000137e:	4ebe      	ldr	r6, [pc, #760]	; (10001678 <__aeabi_dsub+0x328>)
10001380:	0d64      	lsrs	r4, r4, #21
10001382:	00c0      	lsls	r0, r0, #3
10001384:	00d2      	lsls	r2, r2, #3
10001386:	45b4      	cmp	ip, r6
10001388:	d123      	bne.n	100013d2 <__aeabi_dsub+0x82>
1000138a:	001e      	movs	r6, r3
1000138c:	4316      	orrs	r6, r2
1000138e:	9603      	str	r6, [sp, #12]
10001390:	9f03      	ldr	r7, [sp, #12]
10001392:	4eba      	ldr	r6, [pc, #744]	; (1000167c <__aeabi_dsub+0x32c>)
10001394:	19a6      	adds	r6, r4, r6
10001396:	2f00      	cmp	r7, #0
10001398:	d00c      	beq.n	100013b4 <__aeabi_dsub+0x64>
1000139a:	9f02      	ldr	r7, [sp, #8]
1000139c:	9500      	str	r5, [sp, #0]
1000139e:	42af      	cmp	r7, r5
100013a0:	d000      	beq.n	100013a4 <__aeabi_dsub+0x54>
100013a2:	e1b5      	b.n	10001710 <__aeabi_dsub+0x3c0>
100013a4:	2e00      	cmp	r6, #0
100013a6:	d100      	bne.n	100013aa <__aeabi_dsub+0x5a>
100013a8:	e104      	b.n	100015b4 <__aeabi_dsub+0x264>
100013aa:	2c00      	cmp	r4, #0
100013ac:	d000      	beq.n	100013b0 <__aeabi_dsub+0x60>
100013ae:	e2ba      	b.n	10001926 <__aeabi_dsub+0x5d6>
100013b0:	4664      	mov	r4, ip
100013b2:	e0b8      	b.n	10001526 <__aeabi_dsub+0x1d6>
100013b4:	2701      	movs	r7, #1
100013b6:	406f      	eors	r7, r5
100013b8:	9d02      	ldr	r5, [sp, #8]
100013ba:	9700      	str	r7, [sp, #0]
100013bc:	42bd      	cmp	r5, r7
100013be:	d000      	beq.n	100013c2 <__aeabi_dsub+0x72>
100013c0:	e1af      	b.n	10001722 <__aeabi_dsub+0x3d2>
100013c2:	2e00      	cmp	r6, #0
100013c4:	d100      	bne.n	100013c8 <__aeabi_dsub+0x78>
100013c6:	e0f5      	b.n	100015b4 <__aeabi_dsub+0x264>
100013c8:	2c00      	cmp	r4, #0
100013ca:	d0f1      	beq.n	100013b0 <__aeabi_dsub+0x60>
100013cc:	9903      	ldr	r1, [sp, #12]
100013ce:	0008      	movs	r0, r1
100013d0:	e02f      	b.n	10001432 <__aeabi_dsub+0xe2>
100013d2:	2601      	movs	r6, #1
100013d4:	4075      	eors	r5, r6
100013d6:	9500      	str	r5, [sp, #0]
100013d8:	4665      	mov	r5, ip
100013da:	9f02      	ldr	r7, [sp, #8]
100013dc:	9e00      	ldr	r6, [sp, #0]
100013de:	1b65      	subs	r5, r4, r5
100013e0:	42b7      	cmp	r7, r6
100013e2:	d000      	beq.n	100013e6 <__aeabi_dsub+0x96>
100013e4:	e12e      	b.n	10001644 <__aeabi_dsub+0x2f4>
100013e6:	2d00      	cmp	r5, #0
100013e8:	dc00      	bgt.n	100013ec <__aeabi_dsub+0x9c>
100013ea:	e076      	b.n	100014da <__aeabi_dsub+0x18a>
100013ec:	4667      	mov	r7, ip
100013ee:	2f00      	cmp	r7, #0
100013f0:	d121      	bne.n	10001436 <__aeabi_dsub+0xe6>
100013f2:	001f      	movs	r7, r3
100013f4:	4317      	orrs	r7, r2
100013f6:	d100      	bne.n	100013fa <__aeabi_dsub+0xaa>
100013f8:	e122      	b.n	10001640 <__aeabi_dsub+0x2f0>
100013fa:	1e6f      	subs	r7, r5, #1
100013fc:	2d01      	cmp	r5, #1
100013fe:	d115      	bne.n	1000142c <__aeabi_dsub+0xdc>
10001400:	1882      	adds	r2, r0, r2
10001402:	4282      	cmp	r2, r0
10001404:	4180      	sbcs	r0, r0
10001406:	18c9      	adds	r1, r1, r3
10001408:	4240      	negs	r0, r0
1000140a:	1809      	adds	r1, r1, r0
1000140c:	2401      	movs	r4, #1
1000140e:	0010      	movs	r0, r2
10001410:	020b      	lsls	r3, r1, #8
10001412:	d400      	bmi.n	10001416 <__aeabi_dsub+0xc6>
10001414:	e096      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001416:	2402      	movs	r4, #2
10001418:	4b99      	ldr	r3, [pc, #612]	; (10001680 <__aeabi_dsub+0x330>)
1000141a:	0842      	lsrs	r2, r0, #1
1000141c:	400b      	ands	r3, r1
1000141e:	2101      	movs	r1, #1
10001420:	4001      	ands	r1, r0
10001422:	430a      	orrs	r2, r1
10001424:	07d8      	lsls	r0, r3, #31
10001426:	4310      	orrs	r0, r2
10001428:	0859      	lsrs	r1, r3, #1
1000142a:	e08b      	b.n	10001544 <__aeabi_dsub+0x1f4>
1000142c:	4e92      	ldr	r6, [pc, #584]	; (10001678 <__aeabi_dsub+0x328>)
1000142e:	42b5      	cmp	r5, r6
10001430:	d122      	bne.n	10001478 <__aeabi_dsub+0x128>
10001432:	4c91      	ldr	r4, [pc, #580]	; (10001678 <__aeabi_dsub+0x328>)
10001434:	e086      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001436:	4e90      	ldr	r6, [pc, #576]	; (10001678 <__aeabi_dsub+0x328>)
10001438:	42b4      	cmp	r4, r6
1000143a:	d100      	bne.n	1000143e <__aeabi_dsub+0xee>
1000143c:	e082      	b.n	10001544 <__aeabi_dsub+0x1f4>
1000143e:	2600      	movs	r6, #0
10001440:	46b4      	mov	ip, r6
10001442:	3601      	adds	r6, #1
10001444:	2d38      	cmp	r5, #56	; 0x38
10001446:	dc1a      	bgt.n	1000147e <__aeabi_dsub+0x12e>
10001448:	2680      	movs	r6, #128	; 0x80
1000144a:	002f      	movs	r7, r5
1000144c:	0436      	lsls	r6, r6, #16
1000144e:	4333      	orrs	r3, r6
10001450:	2f1f      	cmp	r7, #31
10001452:	dc31      	bgt.n	100014b8 <__aeabi_dsub+0x168>
10001454:	2520      	movs	r5, #32
10001456:	001e      	movs	r6, r3
10001458:	1bed      	subs	r5, r5, r7
1000145a:	40ae      	lsls	r6, r5
1000145c:	46b4      	mov	ip, r6
1000145e:	0016      	movs	r6, r2
10001460:	9500      	str	r5, [sp, #0]
10001462:	40fe      	lsrs	r6, r7
10001464:	4665      	mov	r5, ip
10001466:	432e      	orrs	r6, r5
10001468:	9d00      	ldr	r5, [sp, #0]
1000146a:	40fb      	lsrs	r3, r7
1000146c:	40aa      	lsls	r2, r5
1000146e:	1e55      	subs	r5, r2, #1
10001470:	41aa      	sbcs	r2, r5
10001472:	4316      	orrs	r6, r2
10001474:	469c      	mov	ip, r3
10001476:	e002      	b.n	1000147e <__aeabi_dsub+0x12e>
10001478:	2601      	movs	r6, #1
1000147a:	2f38      	cmp	r7, #56	; 0x38
1000147c:	dde8      	ble.n	10001450 <__aeabi_dsub+0x100>
1000147e:	1836      	adds	r6, r6, r0
10001480:	4286      	cmp	r6, r0
10001482:	4180      	sbcs	r0, r0
10001484:	4461      	add	r1, ip
10001486:	4240      	negs	r0, r0
10001488:	1809      	adds	r1, r1, r0
1000148a:	0030      	movs	r0, r6
1000148c:	020b      	lsls	r3, r1, #8
1000148e:	d559      	bpl.n	10001544 <__aeabi_dsub+0x1f4>
10001490:	2600      	movs	r6, #0
10001492:	4b79      	ldr	r3, [pc, #484]	; (10001678 <__aeabi_dsub+0x328>)
10001494:	3401      	adds	r4, #1
10001496:	46b4      	mov	ip, r6
10001498:	429c      	cmp	r4, r3
1000149a:	d1bd      	bne.n	10001418 <__aeabi_dsub+0xc8>
1000149c:	4b79      	ldr	r3, [pc, #484]	; (10001684 <__aeabi_dsub+0x334>)
1000149e:	0524      	lsls	r4, r4, #20
100014a0:	401c      	ands	r4, r3
100014a2:	4663      	mov	r3, ip
100014a4:	031b      	lsls	r3, r3, #12
100014a6:	0b1b      	lsrs	r3, r3, #12
100014a8:	431c      	orrs	r4, r3
100014aa:	9b02      	ldr	r3, [sp, #8]
100014ac:	0030      	movs	r0, r6
100014ae:	07db      	lsls	r3, r3, #31
100014b0:	431c      	orrs	r4, r3
100014b2:	0021      	movs	r1, r4
100014b4:	b005      	add	sp, #20
100014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014b8:	003d      	movs	r5, r7
100014ba:	001e      	movs	r6, r3
100014bc:	3d20      	subs	r5, #32
100014be:	40ee      	lsrs	r6, r5
100014c0:	2500      	movs	r5, #0
100014c2:	2f20      	cmp	r7, #32
100014c4:	d003      	beq.n	100014ce <__aeabi_dsub+0x17e>
100014c6:	3540      	adds	r5, #64	; 0x40
100014c8:	1bed      	subs	r5, r5, r7
100014ca:	40ab      	lsls	r3, r5
100014cc:	001d      	movs	r5, r3
100014ce:	4315      	orrs	r5, r2
100014d0:	1e6b      	subs	r3, r5, #1
100014d2:	419d      	sbcs	r5, r3
100014d4:	2300      	movs	r3, #0
100014d6:	432e      	orrs	r6, r5
100014d8:	e7cc      	b.n	10001474 <__aeabi_dsub+0x124>
100014da:	2d00      	cmp	r5, #0
100014dc:	d06a      	beq.n	100015b4 <__aeabi_dsub+0x264>
100014de:	4665      	mov	r5, ip
100014e0:	1b2d      	subs	r5, r5, r4
100014e2:	2c00      	cmp	r4, #0
100014e4:	d01e      	beq.n	10001524 <__aeabi_dsub+0x1d4>
100014e6:	2400      	movs	r4, #0
100014e8:	2601      	movs	r6, #1
100014ea:	2d38      	cmp	r5, #56	; 0x38
100014ec:	dc12      	bgt.n	10001514 <__aeabi_dsub+0x1c4>
100014ee:	2480      	movs	r4, #128	; 0x80
100014f0:	0424      	lsls	r4, r4, #16
100014f2:	4321      	orrs	r1, r4
100014f4:	2d1f      	cmp	r5, #31
100014f6:	dc4b      	bgt.n	10001590 <__aeabi_dsub+0x240>
100014f8:	2420      	movs	r4, #32
100014fa:	000f      	movs	r7, r1
100014fc:	0006      	movs	r6, r0
100014fe:	1b64      	subs	r4, r4, r5
10001500:	40a0      	lsls	r0, r4
10001502:	40a7      	lsls	r7, r4
10001504:	40ee      	lsrs	r6, r5
10001506:	4337      	orrs	r7, r6
10001508:	0006      	movs	r6, r0
1000150a:	40e9      	lsrs	r1, r5
1000150c:	1e70      	subs	r0, r6, #1
1000150e:	4186      	sbcs	r6, r0
10001510:	000c      	movs	r4, r1
10001512:	433e      	orrs	r6, r7
10001514:	18b0      	adds	r0, r6, r2
10001516:	4290      	cmp	r0, r2
10001518:	4192      	sbcs	r2, r2
1000151a:	18e4      	adds	r4, r4, r3
1000151c:	4252      	negs	r2, r2
1000151e:	18a1      	adds	r1, r4, r2
10001520:	4664      	mov	r4, ip
10001522:	e7b3      	b.n	1000148c <__aeabi_dsub+0x13c>
10001524:	002c      	movs	r4, r5
10001526:	000d      	movs	r5, r1
10001528:	4305      	orrs	r5, r0
1000152a:	d029      	beq.n	10001580 <__aeabi_dsub+0x230>
1000152c:	1e65      	subs	r5, r4, #1
1000152e:	2c01      	cmp	r4, #1
10001530:	d123      	bne.n	1000157a <__aeabi_dsub+0x22a>
10001532:	1880      	adds	r0, r0, r2
10001534:	4290      	cmp	r0, r2
10001536:	4192      	sbcs	r2, r2
10001538:	18c9      	adds	r1, r1, r3
1000153a:	4252      	negs	r2, r2
1000153c:	1889      	adds	r1, r1, r2
1000153e:	020b      	lsls	r3, r1, #8
10001540:	d500      	bpl.n	10001544 <__aeabi_dsub+0x1f4>
10001542:	e768      	b.n	10001416 <__aeabi_dsub+0xc6>
10001544:	0743      	lsls	r3, r0, #29
10001546:	d009      	beq.n	1000155c <__aeabi_dsub+0x20c>
10001548:	230f      	movs	r3, #15
1000154a:	4003      	ands	r3, r0
1000154c:	2b04      	cmp	r3, #4
1000154e:	d005      	beq.n	1000155c <__aeabi_dsub+0x20c>
10001550:	1d03      	adds	r3, r0, #4
10001552:	4283      	cmp	r3, r0
10001554:	4180      	sbcs	r0, r0
10001556:	4240      	negs	r0, r0
10001558:	1809      	adds	r1, r1, r0
1000155a:	0018      	movs	r0, r3
1000155c:	020b      	lsls	r3, r1, #8
1000155e:	d400      	bmi.n	10001562 <__aeabi_dsub+0x212>
10001560:	e1e4      	b.n	1000192c <__aeabi_dsub+0x5dc>
10001562:	2600      	movs	r6, #0
10001564:	4b44      	ldr	r3, [pc, #272]	; (10001678 <__aeabi_dsub+0x328>)
10001566:	3401      	adds	r4, #1
10001568:	46b4      	mov	ip, r6
1000156a:	429c      	cmp	r4, r3
1000156c:	d096      	beq.n	1000149c <__aeabi_dsub+0x14c>
1000156e:	4b44      	ldr	r3, [pc, #272]	; (10001680 <__aeabi_dsub+0x330>)
10001570:	08c0      	lsrs	r0, r0, #3
10001572:	400b      	ands	r3, r1
10001574:	075e      	lsls	r6, r3, #29
10001576:	4306      	orrs	r6, r0
10001578:	e1cd      	b.n	10001916 <__aeabi_dsub+0x5c6>
1000157a:	4e3f      	ldr	r6, [pc, #252]	; (10001678 <__aeabi_dsub+0x328>)
1000157c:	42b4      	cmp	r4, r6
1000157e:	d102      	bne.n	10001586 <__aeabi_dsub+0x236>
10001580:	0019      	movs	r1, r3
10001582:	0010      	movs	r0, r2
10001584:	e7de      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001586:	2d38      	cmp	r5, #56	; 0x38
10001588:	ddb4      	ble.n	100014f4 <__aeabi_dsub+0x1a4>
1000158a:	2400      	movs	r4, #0
1000158c:	2601      	movs	r6, #1
1000158e:	e7c1      	b.n	10001514 <__aeabi_dsub+0x1c4>
10001590:	002c      	movs	r4, r5
10001592:	000e      	movs	r6, r1
10001594:	3c20      	subs	r4, #32
10001596:	40e6      	lsrs	r6, r4
10001598:	0034      	movs	r4, r6
1000159a:	2600      	movs	r6, #0
1000159c:	2d20      	cmp	r5, #32
1000159e:	d003      	beq.n	100015a8 <__aeabi_dsub+0x258>
100015a0:	3640      	adds	r6, #64	; 0x40
100015a2:	1b76      	subs	r6, r6, r5
100015a4:	40b1      	lsls	r1, r6
100015a6:	000e      	movs	r6, r1
100015a8:	4306      	orrs	r6, r0
100015aa:	1e71      	subs	r1, r6, #1
100015ac:	418e      	sbcs	r6, r1
100015ae:	4326      	orrs	r6, r4
100015b0:	2400      	movs	r4, #0
100015b2:	e7af      	b.n	10001514 <__aeabi_dsub+0x1c4>
100015b4:	4e34      	ldr	r6, [pc, #208]	; (10001688 <__aeabi_dsub+0x338>)
100015b6:	1c65      	adds	r5, r4, #1
100015b8:	4235      	tst	r5, r6
100015ba:	d133      	bne.n	10001624 <__aeabi_dsub+0x2d4>
100015bc:	000d      	movs	r5, r1
100015be:	4305      	orrs	r5, r0
100015c0:	2c00      	cmp	r4, #0
100015c2:	d111      	bne.n	100015e8 <__aeabi_dsub+0x298>
100015c4:	2d00      	cmp	r5, #0
100015c6:	d0db      	beq.n	10001580 <__aeabi_dsub+0x230>
100015c8:	001d      	movs	r5, r3
100015ca:	4315      	orrs	r5, r2
100015cc:	d0ba      	beq.n	10001544 <__aeabi_dsub+0x1f4>
100015ce:	1882      	adds	r2, r0, r2
100015d0:	4282      	cmp	r2, r0
100015d2:	4180      	sbcs	r0, r0
100015d4:	18c9      	adds	r1, r1, r3
100015d6:	4240      	negs	r0, r0
100015d8:	1809      	adds	r1, r1, r0
100015da:	0010      	movs	r0, r2
100015dc:	020b      	lsls	r3, r1, #8
100015de:	d5b1      	bpl.n	10001544 <__aeabi_dsub+0x1f4>
100015e0:	4b27      	ldr	r3, [pc, #156]	; (10001680 <__aeabi_dsub+0x330>)
100015e2:	3401      	adds	r4, #1
100015e4:	4019      	ands	r1, r3
100015e6:	e7ad      	b.n	10001544 <__aeabi_dsub+0x1f4>
100015e8:	2d00      	cmp	r5, #0
100015ea:	d100      	bne.n	100015ee <__aeabi_dsub+0x29e>
100015ec:	e19b      	b.n	10001926 <__aeabi_dsub+0x5d6>
100015ee:	001c      	movs	r4, r3
100015f0:	4314      	orrs	r4, r2
100015f2:	2c00      	cmp	r4, #0
100015f4:	d100      	bne.n	100015f8 <__aeabi_dsub+0x2a8>
100015f6:	e71c      	b.n	10001432 <__aeabi_dsub+0xe2>
100015f8:	074c      	lsls	r4, r1, #29
100015fa:	08c0      	lsrs	r0, r0, #3
100015fc:	4320      	orrs	r0, r4
100015fe:	2480      	movs	r4, #128	; 0x80
10001600:	08c9      	lsrs	r1, r1, #3
10001602:	0324      	lsls	r4, r4, #12
10001604:	4221      	tst	r1, r4
10001606:	d008      	beq.n	1000161a <__aeabi_dsub+0x2ca>
10001608:	08dd      	lsrs	r5, r3, #3
1000160a:	4225      	tst	r5, r4
1000160c:	d105      	bne.n	1000161a <__aeabi_dsub+0x2ca>
1000160e:	0029      	movs	r1, r5
10001610:	075b      	lsls	r3, r3, #29
10001612:	08d0      	lsrs	r0, r2, #3
10001614:	4318      	orrs	r0, r3
10001616:	9b00      	ldr	r3, [sp, #0]
10001618:	9302      	str	r3, [sp, #8]
1000161a:	00cb      	lsls	r3, r1, #3
1000161c:	0f41      	lsrs	r1, r0, #29
1000161e:	4319      	orrs	r1, r3
10001620:	00c0      	lsls	r0, r0, #3
10001622:	e706      	b.n	10001432 <__aeabi_dsub+0xe2>
10001624:	4c14      	ldr	r4, [pc, #80]	; (10001678 <__aeabi_dsub+0x328>)
10001626:	42a5      	cmp	r5, r4
10001628:	d100      	bne.n	1000162c <__aeabi_dsub+0x2dc>
1000162a:	e196      	b.n	1000195a <__aeabi_dsub+0x60a>
1000162c:	1882      	adds	r2, r0, r2
1000162e:	4282      	cmp	r2, r0
10001630:	4180      	sbcs	r0, r0
10001632:	18cb      	adds	r3, r1, r3
10001634:	4240      	negs	r0, r0
10001636:	181b      	adds	r3, r3, r0
10001638:	07d8      	lsls	r0, r3, #31
1000163a:	0852      	lsrs	r2, r2, #1
1000163c:	4310      	orrs	r0, r2
1000163e:	0859      	lsrs	r1, r3, #1
10001640:	002c      	movs	r4, r5
10001642:	e77f      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001644:	2d00      	cmp	r5, #0
10001646:	dd76      	ble.n	10001736 <__aeabi_dsub+0x3e6>
10001648:	4666      	mov	r6, ip
1000164a:	2e00      	cmp	r6, #0
1000164c:	d12e      	bne.n	100016ac <__aeabi_dsub+0x35c>
1000164e:	001f      	movs	r7, r3
10001650:	4317      	orrs	r7, r2
10001652:	d0f5      	beq.n	10001640 <__aeabi_dsub+0x2f0>
10001654:	1e6f      	subs	r7, r5, #1
10001656:	2d01      	cmp	r5, #1
10001658:	d118      	bne.n	1000168c <__aeabi_dsub+0x33c>
1000165a:	1a82      	subs	r2, r0, r2
1000165c:	4290      	cmp	r0, r2
1000165e:	4180      	sbcs	r0, r0
10001660:	1ac9      	subs	r1, r1, r3
10001662:	4240      	negs	r0, r0
10001664:	1a09      	subs	r1, r1, r0
10001666:	2401      	movs	r4, #1
10001668:	0010      	movs	r0, r2
1000166a:	020b      	lsls	r3, r1, #8
1000166c:	d400      	bmi.n	10001670 <__aeabi_dsub+0x320>
1000166e:	e769      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001670:	0249      	lsls	r1, r1, #9
10001672:	0006      	movs	r6, r0
10001674:	0a4d      	lsrs	r5, r1, #9
10001676:	e102      	b.n	1000187e <__aeabi_dsub+0x52e>
10001678:	000007ff 	.word	0x000007ff
1000167c:	fffff801 	.word	0xfffff801
10001680:	ff7fffff 	.word	0xff7fffff
10001684:	7ff00000 	.word	0x7ff00000
10001688:	000007fe 	.word	0x000007fe
1000168c:	4eb7      	ldr	r6, [pc, #732]	; (1000196c <__aeabi_dsub+0x61c>)
1000168e:	42b5      	cmp	r5, r6
10001690:	d100      	bne.n	10001694 <__aeabi_dsub+0x344>
10001692:	e6ce      	b.n	10001432 <__aeabi_dsub+0xe2>
10001694:	2601      	movs	r6, #1
10001696:	2f38      	cmp	r7, #56	; 0x38
10001698:	dd15      	ble.n	100016c6 <__aeabi_dsub+0x376>
1000169a:	1b86      	subs	r6, r0, r6
1000169c:	4663      	mov	r3, ip
1000169e:	42b0      	cmp	r0, r6
100016a0:	4180      	sbcs	r0, r0
100016a2:	1ac9      	subs	r1, r1, r3
100016a4:	4240      	negs	r0, r0
100016a6:	1a09      	subs	r1, r1, r0
100016a8:	0030      	movs	r0, r6
100016aa:	e7de      	b.n	1000166a <__aeabi_dsub+0x31a>
100016ac:	4eaf      	ldr	r6, [pc, #700]	; (1000196c <__aeabi_dsub+0x61c>)
100016ae:	42b4      	cmp	r4, r6
100016b0:	d100      	bne.n	100016b4 <__aeabi_dsub+0x364>
100016b2:	e747      	b.n	10001544 <__aeabi_dsub+0x1f4>
100016b4:	2600      	movs	r6, #0
100016b6:	46b4      	mov	ip, r6
100016b8:	3601      	adds	r6, #1
100016ba:	2d38      	cmp	r5, #56	; 0x38
100016bc:	dced      	bgt.n	1000169a <__aeabi_dsub+0x34a>
100016be:	2680      	movs	r6, #128	; 0x80
100016c0:	002f      	movs	r7, r5
100016c2:	0436      	lsls	r6, r6, #16
100016c4:	4333      	orrs	r3, r6
100016c6:	2f1f      	cmp	r7, #31
100016c8:	dc11      	bgt.n	100016ee <__aeabi_dsub+0x39e>
100016ca:	2520      	movs	r5, #32
100016cc:	001e      	movs	r6, r3
100016ce:	1bed      	subs	r5, r5, r7
100016d0:	40ae      	lsls	r6, r5
100016d2:	46b4      	mov	ip, r6
100016d4:	0016      	movs	r6, r2
100016d6:	9500      	str	r5, [sp, #0]
100016d8:	40fe      	lsrs	r6, r7
100016da:	4665      	mov	r5, ip
100016dc:	432e      	orrs	r6, r5
100016de:	9d00      	ldr	r5, [sp, #0]
100016e0:	40fb      	lsrs	r3, r7
100016e2:	40aa      	lsls	r2, r5
100016e4:	1e55      	subs	r5, r2, #1
100016e6:	41aa      	sbcs	r2, r5
100016e8:	4316      	orrs	r6, r2
100016ea:	469c      	mov	ip, r3
100016ec:	e7d5      	b.n	1000169a <__aeabi_dsub+0x34a>
100016ee:	003d      	movs	r5, r7
100016f0:	001e      	movs	r6, r3
100016f2:	3d20      	subs	r5, #32
100016f4:	40ee      	lsrs	r6, r5
100016f6:	2500      	movs	r5, #0
100016f8:	2f20      	cmp	r7, #32
100016fa:	d003      	beq.n	10001704 <__aeabi_dsub+0x3b4>
100016fc:	3540      	adds	r5, #64	; 0x40
100016fe:	1bed      	subs	r5, r5, r7
10001700:	40ab      	lsls	r3, r5
10001702:	001d      	movs	r5, r3
10001704:	4315      	orrs	r5, r2
10001706:	1e6b      	subs	r3, r5, #1
10001708:	419d      	sbcs	r5, r3
1000170a:	2300      	movs	r3, #0
1000170c:	432e      	orrs	r6, r5
1000170e:	e7ec      	b.n	100016ea <__aeabi_dsub+0x39a>
10001710:	2e00      	cmp	r6, #0
10001712:	d067      	beq.n	100017e4 <__aeabi_dsub+0x494>
10001714:	2c00      	cmp	r4, #0
10001716:	d025      	beq.n	10001764 <__aeabi_dsub+0x414>
10001718:	0019      	movs	r1, r3
1000171a:	0010      	movs	r0, r2
1000171c:	4c93      	ldr	r4, [pc, #588]	; (1000196c <__aeabi_dsub+0x61c>)
1000171e:	9502      	str	r5, [sp, #8]
10001720:	e710      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001722:	2e00      	cmp	r6, #0
10001724:	d05e      	beq.n	100017e4 <__aeabi_dsub+0x494>
10001726:	2c00      	cmp	r4, #0
10001728:	d01f      	beq.n	1000176a <__aeabi_dsub+0x41a>
1000172a:	9903      	ldr	r1, [sp, #12]
1000172c:	4c8f      	ldr	r4, [pc, #572]	; (1000196c <__aeabi_dsub+0x61c>)
1000172e:	0008      	movs	r0, r1
10001730:	9b00      	ldr	r3, [sp, #0]
10001732:	9302      	str	r3, [sp, #8]
10001734:	e706      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001736:	2d00      	cmp	r5, #0
10001738:	d054      	beq.n	100017e4 <__aeabi_dsub+0x494>
1000173a:	4665      	mov	r5, ip
1000173c:	1b2d      	subs	r5, r5, r4
1000173e:	2c00      	cmp	r4, #0
10001740:	d11f      	bne.n	10001782 <__aeabi_dsub+0x432>
10001742:	9c00      	ldr	r4, [sp, #0]
10001744:	9402      	str	r4, [sp, #8]
10001746:	002c      	movs	r4, r5
10001748:	000d      	movs	r5, r1
1000174a:	4305      	orrs	r5, r0
1000174c:	d100      	bne.n	10001750 <__aeabi_dsub+0x400>
1000174e:	e717      	b.n	10001580 <__aeabi_dsub+0x230>
10001750:	1e65      	subs	r5, r4, #1
10001752:	2c01      	cmp	r4, #1
10001754:	d10c      	bne.n	10001770 <__aeabi_dsub+0x420>
10001756:	1a10      	subs	r0, r2, r0
10001758:	4282      	cmp	r2, r0
1000175a:	4192      	sbcs	r2, r2
1000175c:	1a59      	subs	r1, r3, r1
1000175e:	4252      	negs	r2, r2
10001760:	1a89      	subs	r1, r1, r2
10001762:	e782      	b.n	1000166a <__aeabi_dsub+0x31a>
10001764:	9502      	str	r5, [sp, #8]
10001766:	4664      	mov	r4, ip
10001768:	e7ee      	b.n	10001748 <__aeabi_dsub+0x3f8>
1000176a:	9c00      	ldr	r4, [sp, #0]
1000176c:	9402      	str	r4, [sp, #8]
1000176e:	e7fa      	b.n	10001766 <__aeabi_dsub+0x416>
10001770:	4e7e      	ldr	r6, [pc, #504]	; (1000196c <__aeabi_dsub+0x61c>)
10001772:	42b4      	cmp	r4, r6
10001774:	d100      	bne.n	10001778 <__aeabi_dsub+0x428>
10001776:	e703      	b.n	10001580 <__aeabi_dsub+0x230>
10001778:	2d38      	cmp	r5, #56	; 0x38
1000177a:	dd09      	ble.n	10001790 <__aeabi_dsub+0x440>
1000177c:	2100      	movs	r1, #0
1000177e:	2601      	movs	r6, #1
10001780:	e014      	b.n	100017ac <__aeabi_dsub+0x45c>
10001782:	2d38      	cmp	r5, #56	; 0x38
10001784:	dc2b      	bgt.n	100017de <__aeabi_dsub+0x48e>
10001786:	2480      	movs	r4, #128	; 0x80
10001788:	0424      	lsls	r4, r4, #16
1000178a:	4321      	orrs	r1, r4
1000178c:	9c00      	ldr	r4, [sp, #0]
1000178e:	9402      	str	r4, [sp, #8]
10001790:	2d1f      	cmp	r5, #31
10001792:	dc13      	bgt.n	100017bc <__aeabi_dsub+0x46c>
10001794:	2420      	movs	r4, #32
10001796:	000f      	movs	r7, r1
10001798:	1b64      	subs	r4, r4, r5
1000179a:	0006      	movs	r6, r0
1000179c:	40a0      	lsls	r0, r4
1000179e:	40a7      	lsls	r7, r4
100017a0:	40ee      	lsrs	r6, r5
100017a2:	1e44      	subs	r4, r0, #1
100017a4:	41a0      	sbcs	r0, r4
100017a6:	40e9      	lsrs	r1, r5
100017a8:	433e      	orrs	r6, r7
100017aa:	4306      	orrs	r6, r0
100017ac:	1b90      	subs	r0, r2, r6
100017ae:	4282      	cmp	r2, r0
100017b0:	4192      	sbcs	r2, r2
100017b2:	1a59      	subs	r1, r3, r1
100017b4:	4252      	negs	r2, r2
100017b6:	4664      	mov	r4, ip
100017b8:	1a89      	subs	r1, r1, r2
100017ba:	e756      	b.n	1000166a <__aeabi_dsub+0x31a>
100017bc:	002c      	movs	r4, r5
100017be:	000e      	movs	r6, r1
100017c0:	3c20      	subs	r4, #32
100017c2:	40e6      	lsrs	r6, r4
100017c4:	2400      	movs	r4, #0
100017c6:	2d20      	cmp	r5, #32
100017c8:	d003      	beq.n	100017d2 <__aeabi_dsub+0x482>
100017ca:	3440      	adds	r4, #64	; 0x40
100017cc:	1b64      	subs	r4, r4, r5
100017ce:	40a1      	lsls	r1, r4
100017d0:	000c      	movs	r4, r1
100017d2:	4304      	orrs	r4, r0
100017d4:	1e61      	subs	r1, r4, #1
100017d6:	418c      	sbcs	r4, r1
100017d8:	2100      	movs	r1, #0
100017da:	4326      	orrs	r6, r4
100017dc:	e7e6      	b.n	100017ac <__aeabi_dsub+0x45c>
100017de:	9900      	ldr	r1, [sp, #0]
100017e0:	9102      	str	r1, [sp, #8]
100017e2:	e7cb      	b.n	1000177c <__aeabi_dsub+0x42c>
100017e4:	4e62      	ldr	r6, [pc, #392]	; (10001970 <__aeabi_dsub+0x620>)
100017e6:	1c65      	adds	r5, r4, #1
100017e8:	4235      	tst	r5, r6
100017ea:	d138      	bne.n	1000185e <__aeabi_dsub+0x50e>
100017ec:	001d      	movs	r5, r3
100017ee:	4315      	orrs	r5, r2
100017f0:	46ac      	mov	ip, r5
100017f2:	000d      	movs	r5, r1
100017f4:	4305      	orrs	r5, r0
100017f6:	2c00      	cmp	r4, #0
100017f8:	d125      	bne.n	10001846 <__aeabi_dsub+0x4f6>
100017fa:	2d00      	cmp	r5, #0
100017fc:	d108      	bne.n	10001810 <__aeabi_dsub+0x4c0>
100017fe:	4661      	mov	r1, ip
10001800:	0026      	movs	r6, r4
10001802:	9402      	str	r4, [sp, #8]
10001804:	2900      	cmp	r1, #0
10001806:	d100      	bne.n	1000180a <__aeabi_dsub+0x4ba>
10001808:	e648      	b.n	1000149c <__aeabi_dsub+0x14c>
1000180a:	0019      	movs	r1, r3
1000180c:	0010      	movs	r0, r2
1000180e:	e78f      	b.n	10001730 <__aeabi_dsub+0x3e0>
10001810:	4665      	mov	r5, ip
10001812:	2d00      	cmp	r5, #0
10001814:	d100      	bne.n	10001818 <__aeabi_dsub+0x4c8>
10001816:	e695      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001818:	1a86      	subs	r6, r0, r2
1000181a:	42b0      	cmp	r0, r6
1000181c:	41bf      	sbcs	r7, r7
1000181e:	1acd      	subs	r5, r1, r3
10001820:	427f      	negs	r7, r7
10001822:	1bed      	subs	r5, r5, r7
10001824:	022f      	lsls	r7, r5, #8
10001826:	d506      	bpl.n	10001836 <__aeabi_dsub+0x4e6>
10001828:	1a10      	subs	r0, r2, r0
1000182a:	4282      	cmp	r2, r0
1000182c:	4192      	sbcs	r2, r2
1000182e:	1a59      	subs	r1, r3, r1
10001830:	4252      	negs	r2, r2
10001832:	1a89      	subs	r1, r1, r2
10001834:	e77c      	b.n	10001730 <__aeabi_dsub+0x3e0>
10001836:	0033      	movs	r3, r6
10001838:	432b      	orrs	r3, r5
1000183a:	469c      	mov	ip, r3
1000183c:	d100      	bne.n	10001840 <__aeabi_dsub+0x4f0>
1000183e:	e08f      	b.n	10001960 <__aeabi_dsub+0x610>
10001840:	0029      	movs	r1, r5
10001842:	0030      	movs	r0, r6
10001844:	e67e      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001846:	2d00      	cmp	r5, #0
10001848:	d107      	bne.n	1000185a <__aeabi_dsub+0x50a>
1000184a:	4661      	mov	r1, ip
1000184c:	2900      	cmp	r1, #0
1000184e:	d07a      	beq.n	10001946 <__aeabi_dsub+0x5f6>
10001850:	0019      	movs	r1, r3
10001852:	9b00      	ldr	r3, [sp, #0]
10001854:	0010      	movs	r0, r2
10001856:	9302      	str	r3, [sp, #8]
10001858:	e5eb      	b.n	10001432 <__aeabi_dsub+0xe2>
1000185a:	4664      	mov	r4, ip
1000185c:	e6c9      	b.n	100015f2 <__aeabi_dsub+0x2a2>
1000185e:	1a86      	subs	r6, r0, r2
10001860:	42b0      	cmp	r0, r6
10001862:	41bf      	sbcs	r7, r7
10001864:	1acd      	subs	r5, r1, r3
10001866:	427f      	negs	r7, r7
10001868:	1bed      	subs	r5, r5, r7
1000186a:	022f      	lsls	r7, r5, #8
1000186c:	d528      	bpl.n	100018c0 <__aeabi_dsub+0x570>
1000186e:	1a16      	subs	r6, r2, r0
10001870:	42b2      	cmp	r2, r6
10001872:	4192      	sbcs	r2, r2
10001874:	1a5b      	subs	r3, r3, r1
10001876:	4252      	negs	r2, r2
10001878:	1a9d      	subs	r5, r3, r2
1000187a:	9b00      	ldr	r3, [sp, #0]
1000187c:	9302      	str	r3, [sp, #8]
1000187e:	2d00      	cmp	r5, #0
10001880:	d026      	beq.n	100018d0 <__aeabi_dsub+0x580>
10001882:	0028      	movs	r0, r5
10001884:	f7fe fd7e 	bl	10000384 <__clzsi2>
10001888:	0003      	movs	r3, r0
1000188a:	3b08      	subs	r3, #8
1000188c:	2220      	movs	r2, #32
1000188e:	0031      	movs	r1, r6
10001890:	1ad2      	subs	r2, r2, r3
10001892:	409d      	lsls	r5, r3
10001894:	40d1      	lsrs	r1, r2
10001896:	4329      	orrs	r1, r5
10001898:	0035      	movs	r5, r6
1000189a:	409d      	lsls	r5, r3
1000189c:	429c      	cmp	r4, r3
1000189e:	dc3d      	bgt.n	1000191c <__aeabi_dsub+0x5cc>
100018a0:	1b1a      	subs	r2, r3, r4
100018a2:	3201      	adds	r2, #1
100018a4:	2320      	movs	r3, #32
100018a6:	0008      	movs	r0, r1
100018a8:	1a9b      	subs	r3, r3, r2
100018aa:	002c      	movs	r4, r5
100018ac:	409d      	lsls	r5, r3
100018ae:	4098      	lsls	r0, r3
100018b0:	40d4      	lsrs	r4, r2
100018b2:	1e6b      	subs	r3, r5, #1
100018b4:	419d      	sbcs	r5, r3
100018b6:	40d1      	lsrs	r1, r2
100018b8:	4320      	orrs	r0, r4
100018ba:	4328      	orrs	r0, r5
100018bc:	2400      	movs	r4, #0
100018be:	e641      	b.n	10001544 <__aeabi_dsub+0x1f4>
100018c0:	0033      	movs	r3, r6
100018c2:	432b      	orrs	r3, r5
100018c4:	469c      	mov	ip, r3
100018c6:	d1da      	bne.n	1000187e <__aeabi_dsub+0x52e>
100018c8:	001e      	movs	r6, r3
100018ca:	001c      	movs	r4, r3
100018cc:	9302      	str	r3, [sp, #8]
100018ce:	e5e5      	b.n	1000149c <__aeabi_dsub+0x14c>
100018d0:	0030      	movs	r0, r6
100018d2:	f7fe fd57 	bl	10000384 <__clzsi2>
100018d6:	0003      	movs	r3, r0
100018d8:	3318      	adds	r3, #24
100018da:	2b1f      	cmp	r3, #31
100018dc:	ddd6      	ble.n	1000188c <__aeabi_dsub+0x53c>
100018de:	0031      	movs	r1, r6
100018e0:	3808      	subs	r0, #8
100018e2:	4081      	lsls	r1, r0
100018e4:	429c      	cmp	r4, r3
100018e6:	dc12      	bgt.n	1000190e <__aeabi_dsub+0x5be>
100018e8:	1b1b      	subs	r3, r3, r4
100018ea:	1c5a      	adds	r2, r3, #1
100018ec:	2a1f      	cmp	r2, #31
100018ee:	ddd9      	ble.n	100018a4 <__aeabi_dsub+0x554>
100018f0:	000c      	movs	r4, r1
100018f2:	3b1f      	subs	r3, #31
100018f4:	40dc      	lsrs	r4, r3
100018f6:	0028      	movs	r0, r5
100018f8:	2a20      	cmp	r2, #32
100018fa:	d003      	beq.n	10001904 <__aeabi_dsub+0x5b4>
100018fc:	2340      	movs	r3, #64	; 0x40
100018fe:	1a9b      	subs	r3, r3, r2
10001900:	4099      	lsls	r1, r3
10001902:	0008      	movs	r0, r1
10001904:	1e43      	subs	r3, r0, #1
10001906:	4198      	sbcs	r0, r3
10001908:	2100      	movs	r1, #0
1000190a:	4320      	orrs	r0, r4
1000190c:	e7d6      	b.n	100018bc <__aeabi_dsub+0x56c>
1000190e:	1ae4      	subs	r4, r4, r3
10001910:	4b18      	ldr	r3, [pc, #96]	; (10001974 <__aeabi_dsub+0x624>)
10001912:	400b      	ands	r3, r1
10001914:	075e      	lsls	r6, r3, #29
10001916:	08db      	lsrs	r3, r3, #3
10001918:	469c      	mov	ip, r3
1000191a:	e5bf      	b.n	1000149c <__aeabi_dsub+0x14c>
1000191c:	1ae4      	subs	r4, r4, r3
1000191e:	4b15      	ldr	r3, [pc, #84]	; (10001974 <__aeabi_dsub+0x624>)
10001920:	0028      	movs	r0, r5
10001922:	4019      	ands	r1, r3
10001924:	e60e      	b.n	10001544 <__aeabi_dsub+0x1f4>
10001926:	0019      	movs	r1, r3
10001928:	0010      	movs	r0, r2
1000192a:	e582      	b.n	10001432 <__aeabi_dsub+0xe2>
1000192c:	074b      	lsls	r3, r1, #29
1000192e:	08c0      	lsrs	r0, r0, #3
10001930:	4303      	orrs	r3, r0
10001932:	469c      	mov	ip, r3
10001934:	4b0d      	ldr	r3, [pc, #52]	; (1000196c <__aeabi_dsub+0x61c>)
10001936:	4666      	mov	r6, ip
10001938:	08c9      	lsrs	r1, r1, #3
1000193a:	429c      	cmp	r4, r3
1000193c:	d113      	bne.n	10001966 <__aeabi_dsub+0x616>
1000193e:	430e      	orrs	r6, r1
10001940:	d104      	bne.n	1000194c <__aeabi_dsub+0x5fc>
10001942:	46b4      	mov	ip, r6
10001944:	e5aa      	b.n	1000149c <__aeabi_dsub+0x14c>
10001946:	9102      	str	r1, [sp, #8]
10001948:	2180      	movs	r1, #128	; 0x80
1000194a:	0309      	lsls	r1, r1, #12
1000194c:	2380      	movs	r3, #128	; 0x80
1000194e:	031b      	lsls	r3, r3, #12
10001950:	430b      	orrs	r3, r1
10001952:	4666      	mov	r6, ip
10001954:	4c05      	ldr	r4, [pc, #20]	; (1000196c <__aeabi_dsub+0x61c>)
10001956:	469c      	mov	ip, r3
10001958:	e5a0      	b.n	1000149c <__aeabi_dsub+0x14c>
1000195a:	2600      	movs	r6, #0
1000195c:	4c03      	ldr	r4, [pc, #12]	; (1000196c <__aeabi_dsub+0x61c>)
1000195e:	e7f0      	b.n	10001942 <__aeabi_dsub+0x5f2>
10001960:	0026      	movs	r6, r4
10001962:	9402      	str	r4, [sp, #8]
10001964:	e59a      	b.n	1000149c <__aeabi_dsub+0x14c>
10001966:	468c      	mov	ip, r1
10001968:	e598      	b.n	1000149c <__aeabi_dsub+0x14c>
1000196a:	46c0      	nop			; (mov r8, r8)
1000196c:	000007ff 	.word	0x000007ff
10001970:	000007fe 	.word	0x000007fe
10001974:	ff7fffff 	.word	0xff7fffff

10001978 <__aeabi_ui2d>:
10001978:	b510      	push	{r4, lr}
1000197a:	0003      	movs	r3, r0
1000197c:	0004      	movs	r4, r0
1000197e:	1e02      	subs	r2, r0, #0
10001980:	d00c      	beq.n	1000199c <__aeabi_ui2d+0x24>
10001982:	f7fe fcff 	bl	10000384 <__clzsi2>
10001986:	4a0b      	ldr	r2, [pc, #44]	; (100019b4 <__aeabi_ui2d+0x3c>)
10001988:	1a12      	subs	r2, r2, r0
1000198a:	280a      	cmp	r0, #10
1000198c:	dc0d      	bgt.n	100019aa <__aeabi_ui2d+0x32>
1000198e:	230b      	movs	r3, #11
10001990:	0021      	movs	r1, r4
10001992:	1a1b      	subs	r3, r3, r0
10001994:	40d9      	lsrs	r1, r3
10001996:	3015      	adds	r0, #21
10001998:	000b      	movs	r3, r1
1000199a:	4084      	lsls	r4, r0
1000199c:	031b      	lsls	r3, r3, #12
1000199e:	0b1b      	lsrs	r3, r3, #12
100019a0:	0512      	lsls	r2, r2, #20
100019a2:	431a      	orrs	r2, r3
100019a4:	0020      	movs	r0, r4
100019a6:	0011      	movs	r1, r2
100019a8:	bd10      	pop	{r4, pc}
100019aa:	0023      	movs	r3, r4
100019ac:	380b      	subs	r0, #11
100019ae:	4083      	lsls	r3, r0
100019b0:	2400      	movs	r4, #0
100019b2:	e7f3      	b.n	1000199c <__aeabi_ui2d+0x24>
100019b4:	0000041e 	.word	0x0000041e

100019b8 <__aeabi_f2d>:
100019b8:	22fe      	movs	r2, #254	; 0xfe
100019ba:	b570      	push	{r4, r5, r6, lr}
100019bc:	0044      	lsls	r4, r0, #1
100019be:	0e24      	lsrs	r4, r4, #24
100019c0:	0243      	lsls	r3, r0, #9
100019c2:	1c61      	adds	r1, r4, #1
100019c4:	0a5d      	lsrs	r5, r3, #9
100019c6:	0fc6      	lsrs	r6, r0, #31
100019c8:	4211      	tst	r1, r2
100019ca:	d00d      	beq.n	100019e8 <__aeabi_f2d+0x30>
100019cc:	22e0      	movs	r2, #224	; 0xe0
100019ce:	0092      	lsls	r2, r2, #2
100019d0:	18a4      	adds	r4, r4, r2
100019d2:	0b1b      	lsrs	r3, r3, #12
100019d4:	076d      	lsls	r5, r5, #29
100019d6:	031b      	lsls	r3, r3, #12
100019d8:	0b1b      	lsrs	r3, r3, #12
100019da:	0524      	lsls	r4, r4, #20
100019dc:	07f6      	lsls	r6, r6, #31
100019de:	431c      	orrs	r4, r3
100019e0:	4334      	orrs	r4, r6
100019e2:	0028      	movs	r0, r5
100019e4:	0021      	movs	r1, r4
100019e6:	bd70      	pop	{r4, r5, r6, pc}
100019e8:	2c00      	cmp	r4, #0
100019ea:	d118      	bne.n	10001a1e <__aeabi_f2d+0x66>
100019ec:	0023      	movs	r3, r4
100019ee:	2d00      	cmp	r5, #0
100019f0:	d0f1      	beq.n	100019d6 <__aeabi_f2d+0x1e>
100019f2:	0028      	movs	r0, r5
100019f4:	f7fe fcc6 	bl	10000384 <__clzsi2>
100019f8:	280a      	cmp	r0, #10
100019fa:	dc0a      	bgt.n	10001a12 <__aeabi_f2d+0x5a>
100019fc:	230b      	movs	r3, #11
100019fe:	002a      	movs	r2, r5
10001a00:	1a1b      	subs	r3, r3, r0
10001a02:	40da      	lsrs	r2, r3
10001a04:	0013      	movs	r3, r2
10001a06:	0002      	movs	r2, r0
10001a08:	3215      	adds	r2, #21
10001a0a:	4095      	lsls	r5, r2
10001a0c:	4c09      	ldr	r4, [pc, #36]	; (10001a34 <__aeabi_f2d+0x7c>)
10001a0e:	1a24      	subs	r4, r4, r0
10001a10:	e7e1      	b.n	100019d6 <__aeabi_f2d+0x1e>
10001a12:	0003      	movs	r3, r0
10001a14:	3b0b      	subs	r3, #11
10001a16:	409d      	lsls	r5, r3
10001a18:	002b      	movs	r3, r5
10001a1a:	0025      	movs	r5, r4
10001a1c:	e7f6      	b.n	10001a0c <__aeabi_f2d+0x54>
10001a1e:	2d00      	cmp	r5, #0
10001a20:	d006      	beq.n	10001a30 <__aeabi_f2d+0x78>
10001a22:	0b1a      	lsrs	r2, r3, #12
10001a24:	2380      	movs	r3, #128	; 0x80
10001a26:	031b      	lsls	r3, r3, #12
10001a28:	076d      	lsls	r5, r5, #29
10001a2a:	4313      	orrs	r3, r2
10001a2c:	4c02      	ldr	r4, [pc, #8]	; (10001a38 <__aeabi_f2d+0x80>)
10001a2e:	e7d2      	b.n	100019d6 <__aeabi_f2d+0x1e>
10001a30:	002b      	movs	r3, r5
10001a32:	e7fb      	b.n	10001a2c <__aeabi_f2d+0x74>
10001a34:	00000389 	.word	0x00000389
10001a38:	000007ff 	.word	0x000007ff

10001a3c <__aeabi_d2f>:
10001a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001a3e:	030b      	lsls	r3, r1, #12
10001a40:	004a      	lsls	r2, r1, #1
10001a42:	0a5b      	lsrs	r3, r3, #9
10001a44:	0f46      	lsrs	r6, r0, #29
10001a46:	0d52      	lsrs	r2, r2, #21
10001a48:	431e      	orrs	r6, r3
10001a4a:	1c53      	adds	r3, r2, #1
10001a4c:	469c      	mov	ip, r3
10001a4e:	0004      	movs	r4, r0
10001a50:	00c7      	lsls	r7, r0, #3
10001a52:	483c      	ldr	r0, [pc, #240]	; (10001b44 <__aeabi_d2f+0x108>)
10001a54:	0fc9      	lsrs	r1, r1, #31
10001a56:	4003      	ands	r3, r0
10001a58:	9301      	str	r3, [sp, #4]
10001a5a:	4663      	mov	r3, ip
10001a5c:	4203      	tst	r3, r0
10001a5e:	d049      	beq.n	10001af4 <__aeabi_d2f+0xb8>
10001a60:	4b39      	ldr	r3, [pc, #228]	; (10001b48 <__aeabi_d2f+0x10c>)
10001a62:	18d0      	adds	r0, r2, r3
10001a64:	28fe      	cmp	r0, #254	; 0xfe
10001a66:	dc68      	bgt.n	10001b3a <__aeabi_d2f+0xfe>
10001a68:	2800      	cmp	r0, #0
10001a6a:	dc37      	bgt.n	10001adc <__aeabi_d2f+0xa0>
10001a6c:	0003      	movs	r3, r0
10001a6e:	3317      	adds	r3, #23
10001a70:	db65      	blt.n	10001b3e <__aeabi_d2f+0x102>
10001a72:	2480      	movs	r4, #128	; 0x80
10001a74:	251e      	movs	r5, #30
10001a76:	0424      	lsls	r4, r4, #16
10001a78:	4334      	orrs	r4, r6
10001a7a:	1a2d      	subs	r5, r5, r0
10001a7c:	2d1f      	cmp	r5, #31
10001a7e:	dc10      	bgt.n	10001aa2 <__aeabi_d2f+0x66>
10001a80:	4b32      	ldr	r3, [pc, #200]	; (10001b4c <__aeabi_d2f+0x110>)
10001a82:	18d2      	adds	r2, r2, r3
10001a84:	003b      	movs	r3, r7
10001a86:	4097      	lsls	r7, r2
10001a88:	4094      	lsls	r4, r2
10001a8a:	1e78      	subs	r0, r7, #1
10001a8c:	4187      	sbcs	r7, r0
10001a8e:	40eb      	lsrs	r3, r5
10001a90:	4327      	orrs	r7, r4
10001a92:	433b      	orrs	r3, r7
10001a94:	2407      	movs	r4, #7
10001a96:	001a      	movs	r2, r3
10001a98:	4022      	ands	r2, r4
10001a9a:	4223      	tst	r3, r4
10001a9c:	d13b      	bne.n	10001b16 <__aeabi_d2f+0xda>
10001a9e:	08db      	lsrs	r3, r3, #3
10001aa0:	e032      	b.n	10001b08 <__aeabi_d2f+0xcc>
10001aa2:	2302      	movs	r3, #2
10001aa4:	425b      	negs	r3, r3
10001aa6:	1a1b      	subs	r3, r3, r0
10001aa8:	0020      	movs	r0, r4
10001aaa:	40d8      	lsrs	r0, r3
10001aac:	0003      	movs	r3, r0
10001aae:	2000      	movs	r0, #0
10001ab0:	2d20      	cmp	r5, #32
10001ab2:	d003      	beq.n	10001abc <__aeabi_d2f+0x80>
10001ab4:	4826      	ldr	r0, [pc, #152]	; (10001b50 <__aeabi_d2f+0x114>)
10001ab6:	1812      	adds	r2, r2, r0
10001ab8:	0020      	movs	r0, r4
10001aba:	4090      	lsls	r0, r2
10001abc:	4338      	orrs	r0, r7
10001abe:	1e42      	subs	r2, r0, #1
10001ac0:	4190      	sbcs	r0, r2
10001ac2:	4303      	orrs	r3, r0
10001ac4:	2407      	movs	r4, #7
10001ac6:	001a      	movs	r2, r3
10001ac8:	4022      	ands	r2, r4
10001aca:	4223      	tst	r3, r4
10001acc:	d0e7      	beq.n	10001a9e <__aeabi_d2f+0x62>
10001ace:	220f      	movs	r2, #15
10001ad0:	401a      	ands	r2, r3
10001ad2:	2a04      	cmp	r2, #4
10001ad4:	d024      	beq.n	10001b20 <__aeabi_d2f+0xe4>
10001ad6:	2000      	movs	r0, #0
10001ad8:	3304      	adds	r3, #4
10001ada:	e008      	b.n	10001aee <__aeabi_d2f+0xb2>
10001adc:	01a4      	lsls	r4, r4, #6
10001ade:	1e62      	subs	r2, r4, #1
10001ae0:	4194      	sbcs	r4, r2
10001ae2:	00f6      	lsls	r6, r6, #3
10001ae4:	0f7b      	lsrs	r3, r7, #29
10001ae6:	4334      	orrs	r4, r6
10001ae8:	4323      	orrs	r3, r4
10001aea:	075a      	lsls	r2, r3, #29
10001aec:	d11b      	bne.n	10001b26 <__aeabi_d2f+0xea>
10001aee:	0002      	movs	r2, r0
10001af0:	08db      	lsrs	r3, r3, #3
10001af2:	e009      	b.n	10001b08 <__aeabi_d2f+0xcc>
10001af4:	9b01      	ldr	r3, [sp, #4]
10001af6:	2a00      	cmp	r2, #0
10001af8:	d006      	beq.n	10001b08 <__aeabi_d2f+0xcc>
10001afa:	003b      	movs	r3, r7
10001afc:	22ff      	movs	r2, #255	; 0xff
10001afe:	4333      	orrs	r3, r6
10001b00:	d002      	beq.n	10001b08 <__aeabi_d2f+0xcc>
10001b02:	2380      	movs	r3, #128	; 0x80
10001b04:	03db      	lsls	r3, r3, #15
10001b06:	4333      	orrs	r3, r6
10001b08:	025b      	lsls	r3, r3, #9
10001b0a:	05d0      	lsls	r0, r2, #23
10001b0c:	0a5b      	lsrs	r3, r3, #9
10001b0e:	4318      	orrs	r0, r3
10001b10:	07c9      	lsls	r1, r1, #31
10001b12:	4308      	orrs	r0, r1
10001b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001b16:	220f      	movs	r2, #15
10001b18:	2000      	movs	r0, #0
10001b1a:	401a      	ands	r2, r3
10001b1c:	2a04      	cmp	r2, #4
10001b1e:	d106      	bne.n	10001b2e <__aeabi_d2f+0xf2>
10001b20:	2200      	movs	r2, #0
10001b22:	08db      	lsrs	r3, r3, #3
10001b24:	e7f0      	b.n	10001b08 <__aeabi_d2f+0xcc>
10001b26:	220f      	movs	r2, #15
10001b28:	401a      	ands	r2, r3
10001b2a:	2a04      	cmp	r2, #4
10001b2c:	d0df      	beq.n	10001aee <__aeabi_d2f+0xb2>
10001b2e:	3304      	adds	r3, #4
10001b30:	015a      	lsls	r2, r3, #5
10001b32:	d5dc      	bpl.n	10001aee <__aeabi_d2f+0xb2>
10001b34:	1c42      	adds	r2, r0, #1
10001b36:	2300      	movs	r3, #0
10001b38:	e7e6      	b.n	10001b08 <__aeabi_d2f+0xcc>
10001b3a:	22ff      	movs	r2, #255	; 0xff
10001b3c:	e7fb      	b.n	10001b36 <__aeabi_d2f+0xfa>
10001b3e:	2200      	movs	r2, #0
10001b40:	0013      	movs	r3, r2
10001b42:	e7e1      	b.n	10001b08 <__aeabi_d2f+0xcc>
10001b44:	000007fe 	.word	0x000007fe
10001b48:	fffffc80 	.word	0xfffffc80
10001b4c:	fffffc82 	.word	0xfffffc82
10001b50:	fffffca2 	.word	0xfffffca2

10001b54 <__aeabi_llsr>:
10001b54:	40d0      	lsrs	r0, r2
10001b56:	000b      	movs	r3, r1
10001b58:	40d1      	lsrs	r1, r2
10001b5a:	469c      	mov	ip, r3
10001b5c:	3a20      	subs	r2, #32
10001b5e:	40d3      	lsrs	r3, r2
10001b60:	4318      	orrs	r0, r3
10001b62:	4252      	negs	r2, r2
10001b64:	4663      	mov	r3, ip
10001b66:	4093      	lsls	r3, r2
10001b68:	4318      	orrs	r0, r3
10001b6a:	4770      	bx	lr

10001b6c <__aeabi_llsl>:
10001b6c:	4091      	lsls	r1, r2
10001b6e:	0003      	movs	r3, r0
10001b70:	4090      	lsls	r0, r2
10001b72:	469c      	mov	ip, r3
10001b74:	3a20      	subs	r2, #32
10001b76:	4093      	lsls	r3, r2
10001b78:	4319      	orrs	r1, r3
10001b7a:	4252      	negs	r2, r2
10001b7c:	4663      	mov	r3, ip
10001b7e:	40d3      	lsrs	r3, r2
10001b80:	4319      	orrs	r1, r3
10001b82:	4770      	bx	lr

10001b84 <__clzdi2>:
10001b84:	b510      	push	{r4, lr}
10001b86:	2900      	cmp	r1, #0
10001b88:	d103      	bne.n	10001b92 <__clzdi2+0xe>
10001b8a:	f7fe fbfb 	bl	10000384 <__clzsi2>
10001b8e:	3020      	adds	r0, #32
10001b90:	e002      	b.n	10001b98 <__clzdi2+0x14>
10001b92:	0008      	movs	r0, r1
10001b94:	f7fe fbf6 	bl	10000384 <__clzsi2>
10001b98:	bd10      	pop	{r4, pc}
10001b9a:	46c0      	nop			; (mov r8, r8)

10001b9c <__aeabi_d2uiz>:
10001b9c:	b570      	push	{r4, r5, r6, lr}
10001b9e:	2200      	movs	r2, #0
10001ba0:	4b0b      	ldr	r3, [pc, #44]	; (10001bd0 <__aeabi_d2uiz+0x34>)
10001ba2:	0004      	movs	r4, r0
10001ba4:	000d      	movs	r5, r1
10001ba6:	f7fe fbe3 	bl	10000370 <__aeabi_dcmpge>
10001baa:	2800      	cmp	r0, #0
10001bac:	d00b      	beq.n	10001bc6 <__aeabi_d2uiz+0x2a>
10001bae:	4b08      	ldr	r3, [pc, #32]	; (10001bd0 <__aeabi_d2uiz+0x34>)
10001bb0:	2200      	movs	r2, #0
10001bb2:	0020      	movs	r0, r4
10001bb4:	0029      	movs	r1, r5
10001bb6:	f7ff fbcb 	bl	10001350 <__aeabi_dsub>
10001bba:	f000 f80b 	bl	10001bd4 <__aeabi_d2iz>
10001bbe:	2380      	movs	r3, #128	; 0x80
10001bc0:	061b      	lsls	r3, r3, #24
10001bc2:	18c0      	adds	r0, r0, r3
10001bc4:	bd70      	pop	{r4, r5, r6, pc}
10001bc6:	0020      	movs	r0, r4
10001bc8:	0029      	movs	r1, r5
10001bca:	f000 f803 	bl	10001bd4 <__aeabi_d2iz>
10001bce:	e7f9      	b.n	10001bc4 <__aeabi_d2uiz+0x28>
10001bd0:	41e00000 	.word	0x41e00000

10001bd4 <__aeabi_d2iz>:
10001bd4:	000b      	movs	r3, r1
10001bd6:	b570      	push	{r4, r5, r6, lr}
10001bd8:	4e11      	ldr	r6, [pc, #68]	; (10001c20 <__aeabi_d2iz+0x4c>)
10001bda:	030c      	lsls	r4, r1, #12
10001bdc:	0049      	lsls	r1, r1, #1
10001bde:	0002      	movs	r2, r0
10001be0:	0b24      	lsrs	r4, r4, #12
10001be2:	2000      	movs	r0, #0
10001be4:	0d49      	lsrs	r1, r1, #21
10001be6:	0fdd      	lsrs	r5, r3, #31
10001be8:	42b1      	cmp	r1, r6
10001bea:	dd04      	ble.n	10001bf6 <__aeabi_d2iz+0x22>
10001bec:	480d      	ldr	r0, [pc, #52]	; (10001c24 <__aeabi_d2iz+0x50>)
10001bee:	4281      	cmp	r1, r0
10001bf0:	dd02      	ble.n	10001bf8 <__aeabi_d2iz+0x24>
10001bf2:	4b0d      	ldr	r3, [pc, #52]	; (10001c28 <__aeabi_d2iz+0x54>)
10001bf4:	18e8      	adds	r0, r5, r3
10001bf6:	bd70      	pop	{r4, r5, r6, pc}
10001bf8:	2080      	movs	r0, #128	; 0x80
10001bfa:	0340      	lsls	r0, r0, #13
10001bfc:	4320      	orrs	r0, r4
10001bfe:	4c0b      	ldr	r4, [pc, #44]	; (10001c2c <__aeabi_d2iz+0x58>)
10001c00:	1a64      	subs	r4, r4, r1
10001c02:	2c1f      	cmp	r4, #31
10001c04:	dc08      	bgt.n	10001c18 <__aeabi_d2iz+0x44>
10001c06:	4e0a      	ldr	r6, [pc, #40]	; (10001c30 <__aeabi_d2iz+0x5c>)
10001c08:	40e2      	lsrs	r2, r4
10001c0a:	1989      	adds	r1, r1, r6
10001c0c:	4088      	lsls	r0, r1
10001c0e:	4310      	orrs	r0, r2
10001c10:	2d00      	cmp	r5, #0
10001c12:	d0f0      	beq.n	10001bf6 <__aeabi_d2iz+0x22>
10001c14:	4240      	negs	r0, r0
10001c16:	e7ee      	b.n	10001bf6 <__aeabi_d2iz+0x22>
10001c18:	4b06      	ldr	r3, [pc, #24]	; (10001c34 <__aeabi_d2iz+0x60>)
10001c1a:	1a5b      	subs	r3, r3, r1
10001c1c:	40d8      	lsrs	r0, r3
10001c1e:	e7f7      	b.n	10001c10 <__aeabi_d2iz+0x3c>
10001c20:	000003fe 	.word	0x000003fe
10001c24:	0000041d 	.word	0x0000041d
10001c28:	7fffffff 	.word	0x7fffffff
10001c2c:	00000433 	.word	0x00000433
10001c30:	fffffbed 	.word	0xfffffbed
10001c34:	00000413 	.word	0x00000413

10001c38 <__aeabi_lmul>:
10001c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001c3a:	0c04      	lsrs	r4, r0, #16
10001c3c:	000d      	movs	r5, r1
10001c3e:	b291      	uxth	r1, r2
10001c40:	000f      	movs	r7, r1
10001c42:	4361      	muls	r1, r4
10001c44:	468c      	mov	ip, r1
10001c46:	0006      	movs	r6, r0
10001c48:	9301      	str	r3, [sp, #4]
10001c4a:	b283      	uxth	r3, r0
10001c4c:	0c10      	lsrs	r0, r2, #16
10001c4e:	435f      	muls	r7, r3
10001c50:	4344      	muls	r4, r0
10001c52:	4358      	muls	r0, r3
10001c54:	0c3b      	lsrs	r3, r7, #16
10001c56:	4460      	add	r0, ip
10001c58:	181b      	adds	r3, r3, r0
10001c5a:	4299      	cmp	r1, r3
10001c5c:	d902      	bls.n	10001c64 <__aeabi_lmul+0x2c>
10001c5e:	2180      	movs	r1, #128	; 0x80
10001c60:	0249      	lsls	r1, r1, #9
10001c62:	1864      	adds	r4, r4, r1
10001c64:	9901      	ldr	r1, [sp, #4]
10001c66:	4355      	muls	r5, r2
10001c68:	4371      	muls	r1, r6
10001c6a:	0c18      	lsrs	r0, r3, #16
10001c6c:	1904      	adds	r4, r0, r4
10001c6e:	041b      	lsls	r3, r3, #16
10001c70:	b2bf      	uxth	r7, r7
10001c72:	1949      	adds	r1, r1, r5
10001c74:	19d8      	adds	r0, r3, r7
10001c76:	1909      	adds	r1, r1, r4
10001c78:	b003      	add	sp, #12
10001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001c7c <__ffssi2>:
10001c7c:	b510      	push	{r4, lr}
10001c7e:	2800      	cmp	r0, #0
10001c80:	d002      	beq.n	10001c88 <__ffssi2+0xc>
10001c82:	f7fe fb9d 	bl	100003c0 <__ctzsi2>
10001c86:	3001      	adds	r0, #1
10001c88:	bd10      	pop	{r4, pc}

10001c8a <__udivmoddi4>:
10001c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c8c:	0006      	movs	r6, r0
10001c8e:	000f      	movs	r7, r1
10001c90:	0015      	movs	r5, r2
10001c92:	001c      	movs	r4, r3
10001c94:	b085      	sub	sp, #20
10001c96:	428b      	cmp	r3, r1
10001c98:	d863      	bhi.n	10001d62 <__udivmoddi4+0xd8>
10001c9a:	d101      	bne.n	10001ca0 <__udivmoddi4+0x16>
10001c9c:	4282      	cmp	r2, r0
10001c9e:	d860      	bhi.n	10001d62 <__udivmoddi4+0xd8>
10001ca0:	0021      	movs	r1, r4
10001ca2:	0028      	movs	r0, r5
10001ca4:	f7ff ff6e 	bl	10001b84 <__clzdi2>
10001ca8:	0039      	movs	r1, r7
10001caa:	9000      	str	r0, [sp, #0]
10001cac:	0030      	movs	r0, r6
10001cae:	f7ff ff69 	bl	10001b84 <__clzdi2>
10001cb2:	9b00      	ldr	r3, [sp, #0]
10001cb4:	0021      	movs	r1, r4
10001cb6:	1a1b      	subs	r3, r3, r0
10001cb8:	001a      	movs	r2, r3
10001cba:	0028      	movs	r0, r5
10001cbc:	9303      	str	r3, [sp, #12]
10001cbe:	f7ff ff55 	bl	10001b6c <__aeabi_llsl>
10001cc2:	9000      	str	r0, [sp, #0]
10001cc4:	9101      	str	r1, [sp, #4]
10001cc6:	42b9      	cmp	r1, r7
10001cc8:	d845      	bhi.n	10001d56 <__udivmoddi4+0xcc>
10001cca:	d101      	bne.n	10001cd0 <__udivmoddi4+0x46>
10001ccc:	42b0      	cmp	r0, r6
10001cce:	d842      	bhi.n	10001d56 <__udivmoddi4+0xcc>
10001cd0:	9b00      	ldr	r3, [sp, #0]
10001cd2:	9c01      	ldr	r4, [sp, #4]
10001cd4:	2001      	movs	r0, #1
10001cd6:	2100      	movs	r1, #0
10001cd8:	9a03      	ldr	r2, [sp, #12]
10001cda:	1af6      	subs	r6, r6, r3
10001cdc:	41a7      	sbcs	r7, r4
10001cde:	f7ff ff45 	bl	10001b6c <__aeabi_llsl>
10001ce2:	0004      	movs	r4, r0
10001ce4:	000d      	movs	r5, r1
10001ce6:	9b03      	ldr	r3, [sp, #12]
10001ce8:	2b00      	cmp	r3, #0
10001cea:	d02b      	beq.n	10001d44 <__udivmoddi4+0xba>
10001cec:	9b01      	ldr	r3, [sp, #4]
10001cee:	9a00      	ldr	r2, [sp, #0]
10001cf0:	07db      	lsls	r3, r3, #31
10001cf2:	0850      	lsrs	r0, r2, #1
10001cf4:	4318      	orrs	r0, r3
10001cf6:	9b01      	ldr	r3, [sp, #4]
10001cf8:	0859      	lsrs	r1, r3, #1
10001cfa:	9b03      	ldr	r3, [sp, #12]
10001cfc:	469c      	mov	ip, r3
10001cfe:	42b9      	cmp	r1, r7
10001d00:	d82c      	bhi.n	10001d5c <__udivmoddi4+0xd2>
10001d02:	d101      	bne.n	10001d08 <__udivmoddi4+0x7e>
10001d04:	42b0      	cmp	r0, r6
10001d06:	d829      	bhi.n	10001d5c <__udivmoddi4+0xd2>
10001d08:	0032      	movs	r2, r6
10001d0a:	003b      	movs	r3, r7
10001d0c:	1a12      	subs	r2, r2, r0
10001d0e:	418b      	sbcs	r3, r1
10001d10:	2601      	movs	r6, #1
10001d12:	1892      	adds	r2, r2, r2
10001d14:	415b      	adcs	r3, r3
10001d16:	2700      	movs	r7, #0
10001d18:	18b6      	adds	r6, r6, r2
10001d1a:	415f      	adcs	r7, r3
10001d1c:	2301      	movs	r3, #1
10001d1e:	425b      	negs	r3, r3
10001d20:	449c      	add	ip, r3
10001d22:	4663      	mov	r3, ip
10001d24:	2b00      	cmp	r3, #0
10001d26:	d1ea      	bne.n	10001cfe <__udivmoddi4+0x74>
10001d28:	0030      	movs	r0, r6
10001d2a:	0039      	movs	r1, r7
10001d2c:	9a03      	ldr	r2, [sp, #12]
10001d2e:	f7ff ff11 	bl	10001b54 <__aeabi_llsr>
10001d32:	9a03      	ldr	r2, [sp, #12]
10001d34:	19a4      	adds	r4, r4, r6
10001d36:	417d      	adcs	r5, r7
10001d38:	0006      	movs	r6, r0
10001d3a:	000f      	movs	r7, r1
10001d3c:	f7ff ff16 	bl	10001b6c <__aeabi_llsl>
10001d40:	1a24      	subs	r4, r4, r0
10001d42:	418d      	sbcs	r5, r1
10001d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001d46:	2b00      	cmp	r3, #0
10001d48:	d001      	beq.n	10001d4e <__udivmoddi4+0xc4>
10001d4a:	601e      	str	r6, [r3, #0]
10001d4c:	605f      	str	r7, [r3, #4]
10001d4e:	0020      	movs	r0, r4
10001d50:	0029      	movs	r1, r5
10001d52:	b005      	add	sp, #20
10001d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001d56:	2400      	movs	r4, #0
10001d58:	2500      	movs	r5, #0
10001d5a:	e7c4      	b.n	10001ce6 <__udivmoddi4+0x5c>
10001d5c:	19b6      	adds	r6, r6, r6
10001d5e:	417f      	adcs	r7, r7
10001d60:	e7dc      	b.n	10001d1c <__udivmoddi4+0x92>
10001d62:	2400      	movs	r4, #0
10001d64:	2500      	movs	r5, #0
10001d66:	e7ed      	b.n	10001d44 <__udivmoddi4+0xba>

10001d68 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
10001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d6a:	b08b      	sub	sp, #44	; 0x2c
10001d6c:	9304      	str	r3, [sp, #16]
10001d6e:	ab10      	add	r3, sp, #64	; 0x40
10001d70:	881b      	ldrh	r3, [r3, #0]
10001d72:	0004      	movs	r4, r0
10001d74:	0015      	movs	r5, r2
10001d76:	9103      	str	r1, [sp, #12]
10001d78:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
10001d7a:	6883      	ldr	r3, [r0, #8]
10001d7c:	9903      	ldr	r1, [sp, #12]
10001d7e:	685b      	ldr	r3, [r3, #4]
10001d80:	aa08      	add	r2, sp, #32
10001d82:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
10001d84:	2800      	cmp	r0, #0
10001d86:	db2b      	blt.n	10001de0 <pwm_set+0x78>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001d88:	9e08      	ldr	r6, [sp, #32]
10001d8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
10001d8c:	0028      	movs	r0, r5
10001d8e:	0032      	movs	r2, r6
10001d90:	003b      	movs	r3, r7
10001d92:	2100      	movs	r1, #0
10001d94:	f7ff ff50 	bl	10001c38 <__aeabi_lmul>
10001d98:	2300      	movs	r3, #0
10001d9a:	4a15      	ldr	r2, [pc, #84]	; (10001df0 <pwm_set+0x88>)
10001d9c:	9106      	str	r1, [sp, #24]
10001d9e:	f7fe fb2f 	bl	10000400 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10001da2:	9906      	ldr	r1, [sp, #24]
10001da4:	4b13      	ldr	r3, [pc, #76]	; (10001df4 <pwm_set+0x8c>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10001da6:	0005      	movs	r5, r0
10001da8:	9007      	str	r0, [sp, #28]
	if (period_cycles > UINT32_MAX) {
10001daa:	4299      	cmp	r1, r3
10001dac:	d81a      	bhi.n	10001de4 <pwm_set+0x7c>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001dae:	0032      	movs	r2, r6
10001db0:	003b      	movs	r3, r7
10001db2:	2100      	movs	r1, #0
10001db4:	9804      	ldr	r0, [sp, #16]
10001db6:	f7ff ff3f 	bl	10001c38 <__aeabi_lmul>
10001dba:	2300      	movs	r3, #0
10001dbc:	4a0c      	ldr	r2, [pc, #48]	; (10001df0 <pwm_set+0x88>)
10001dbe:	000e      	movs	r6, r1
10001dc0:	f7fe fb1e 	bl	10000400 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10001dc4:	4a0b      	ldr	r2, [pc, #44]	; (10001df4 <pwm_set+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10001dc6:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
10001dc8:	4296      	cmp	r6, r2
10001dca:	d80b      	bhi.n	10001de4 <pwm_set+0x7c>
	const struct pwm_driver_api *api =
10001dcc:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10001dce:	4285      	cmp	r5, r0
10001dd0:	d30b      	bcc.n	10001dea <pwm_set+0x82>
	return api->set_cycles(dev, channel, period, pulse, flags);
10001dd2:	9905      	ldr	r1, [sp, #20]
10001dd4:	0020      	movs	r0, r4
10001dd6:	9100      	str	r1, [sp, #0]
10001dd8:	6816      	ldr	r6, [r2, #0]
10001dda:	9903      	ldr	r1, [sp, #12]
10001ddc:	002a      	movs	r2, r5
10001dde:	47b0      	blx	r6
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
10001de0:	b00b      	add	sp, #44	; 0x2c
10001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10001de4:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10001de6:	4240      	negs	r0, r0
10001de8:	e7fa      	b.n	10001de0 <pwm_set+0x78>
10001dea:	2016      	movs	r0, #22
10001dec:	e7fb      	b.n	10001de6 <pwm_set+0x7e>
10001dee:	46c0      	nop			; (mov r8, r8)
10001df0:	3b9aca00 	.word	0x3b9aca00
10001df4:	3b9ac9ff 	.word	0x3b9ac9ff

10001df8 <main>:


 //!!!!!!!!!!############## MAIN #######################!!!!!!!!

void main(void)
{
10001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001dfa:	b08d      	sub	sp, #52	; 0x34
	 //############## MAIN ADC #######################
	int err;
	uint16_t buf;
	struct adc_sequence sequence = {
10001dfc:	ac07      	add	r4, sp, #28
10001dfe:	2214      	movs	r2, #20
10001e00:	2100      	movs	r1, #0
10001e02:	0020      	movs	r0, r4
10001e04:	f003 fd9c 	bl	10005940 <memset>
10001e08:	230e      	movs	r3, #14
10001e0a:	aa02      	add	r2, sp, #8
10001e0c:	189b      	adds	r3, r3, r2
10001e0e:	60a3      	str	r3, [r4, #8]
10001e10:	2302      	movs	r3, #2
10001e12:	60e3      	str	r3, [r4, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10001e14:	4d4a      	ldr	r5, [pc, #296]	; (10001f40 <main+0x148>)
10001e16:	0028      	movs	r0, r5
10001e18:	f004 f895 	bl	10005f46 <z_device_is_ready>
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
10001e1c:	2800      	cmp	r0, #0
10001e1e:	d016      	beq.n	10001e4e <main+0x56>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
10001e20:	68ab      	ldr	r3, [r5, #8]
10001e22:	0028      	movs	r0, r5
10001e24:	4947      	ldr	r1, [pc, #284]	; (10001f44 <main+0x14c>)
10001e26:	681b      	ldr	r3, [r3, #0]
10001e28:	4798      	blx	r3
10001e2a:	1e02      	subs	r2, r0, #0
			printk("ADC controller device not ready\n");
			return;
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
		if (err < 0) {
10001e2c:	db14      	blt.n	10001e58 <main+0x60>
	uint32_t max_period;
	uint32_t period;
	int ret;
	uint32_t duty_cycle;

	printk("PWM-based blinky\n");
10001e2e:	4846      	ldr	r0, [pc, #280]	; (10001f48 <main+0x150>)
10001e30:	f003 fc47 	bl	100056c2 <printk>
10001e34:	4b45      	ldr	r3, [pc, #276]	; (10001f4c <main+0x154>)
10001e36:	0018      	movs	r0, r3
10001e38:	9303      	str	r3, [sp, #12]
10001e3a:	f004 f884 	bl	10005f46 <z_device_is_ready>

	if (!device_is_ready(pwm_led0.dev)) {
10001e3e:	2800      	cmp	r0, #0
10001e40:	d10f      	bne.n	10001e62 <main+0x6a>
		       pwm_led0.dev->name);
		return;
	}

	if (!device_is_ready(pwm_led1.dev)) {
		printk("Error: PWM device %s is not ready\n",
10001e42:	9b03      	ldr	r3, [sp, #12]
10001e44:	4842      	ldr	r0, [pc, #264]	; (10001f50 <main+0x158>)
10001e46:	6819      	ldr	r1, [r3, #0]
			if(i==0){
			duty_cycle = buf/sizeof(buf)*period;
			//period = (adc_read(adc_channels[0].dev, &sequence)/sizeof(buf))*PWM_MSEC(1000U);
			ret = pwm_set_dt(&pwm_led0, period, duty_cycle);
			if (ret) {
				printk("Error %d: failed to set pulse width\n", ret);
10001e48:	f003 fc3b 	bl	100056c2 <printk>
				return;
10001e4c:	e002      	b.n	10001e54 <main+0x5c>
			printk("ADC controller device not ready\n");
10001e4e:	4841      	ldr	r0, [pc, #260]	; (10001f54 <main+0x15c>)
10001e50:	f003 fc37 	bl	100056c2 <printk>

		}

		k_sleep(K_MSEC(1000));
	}
}
10001e54:	b00d      	add	sp, #52	; 0x34
10001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printk("Could not setup channel #%d (%d)\n", i, err);
10001e58:	2100      	movs	r1, #0
10001e5a:	483f      	ldr	r0, [pc, #252]	; (10001f58 <main+0x160>)
10001e5c:	f003 fc31 	bl	100056c2 <printk>
			return;
10001e60:	e7f8      	b.n	10001e54 <main+0x5c>
10001e62:	9803      	ldr	r0, [sp, #12]
10001e64:	f004 f86f 	bl	10005f46 <z_device_is_ready>
	if (!device_is_ready(pwm_led1.dev)) {
10001e68:	2800      	cmp	r0, #0
10001e6a:	d0ea      	beq.n	10001e42 <main+0x4a>
	printk("Calibrating for channel %d...\n", pwm_led0.channel);
10001e6c:	2109      	movs	r1, #9
10001e6e:	483b      	ldr	r0, [pc, #236]	; (10001f5c <main+0x164>)
10001e70:	f003 fc27 	bl	100056c2 <printk>
	while (pwm_set_dt(&pwm_led0, max_period, max_period / 2U)) {
10001e74:	2606      	movs	r6, #6
	max_period = MAX_PERIOD;
10001e76:	4f3a      	ldr	r7, [pc, #232]	; (10001f60 <main+0x168>)
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10001e78:	2300      	movs	r3, #0
10001e7a:	9702      	str	r7, [sp, #8]
	while (pwm_set_dt(&pwm_led0, max_period, max_period / 2U)) {
10001e7c:	087f      	lsrs	r7, r7, #1
10001e7e:	9300      	str	r3, [sp, #0]
10001e80:	2109      	movs	r1, #9
10001e82:	003b      	movs	r3, r7
10001e84:	4831      	ldr	r0, [pc, #196]	; (10001f4c <main+0x154>)
10001e86:	9a02      	ldr	r2, [sp, #8]
10001e88:	f7ff ff6e 	bl	10001d68 <pwm_set>
10001e8c:	2800      	cmp	r0, #0
10001e8e:	d11f      	bne.n	10001ed0 <main+0xd8>
	printk("Done calibrating; maximum/minimum periods %u/%lu nsec\n",
10001e90:	4834      	ldr	r0, [pc, #208]	; (10001f64 <main+0x16c>)
10001e92:	4a35      	ldr	r2, [pc, #212]	; (10001f68 <main+0x170>)
10001e94:	9902      	ldr	r1, [sp, #8]
10001e96:	f003 fc14 	bl	100056c2 <printk>
		printk("ADC reading:\n");
10001e9a:	4834      	ldr	r0, [pc, #208]	; (10001f6c <main+0x174>)
10001e9c:	f003 fc11 	bl	100056c2 <printk>
			printk("- %s, channel %d: ",
10001ea0:	2200      	movs	r2, #0
10001ea2:	4833      	ldr	r0, [pc, #204]	; (10001f70 <main+0x178>)
10001ea4:	6829      	ldr	r1, [r5, #0]
10001ea6:	f003 fc0c 	bl	100056c2 <printk>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
10001eaa:	2301      	movs	r3, #1
10001eac:	6063      	str	r3, [r4, #4]
	seq->resolution = spec->resolution;
10001eae:	330b      	adds	r3, #11
10001eb0:	8223      	strh	r3, [r4, #16]
	const struct adc_driver_api *api =
10001eb2:	68af      	ldr	r7, [r5, #8]
	return api->read(dev, sequence);
10001eb4:	0021      	movs	r1, r4
10001eb6:	0028      	movs	r0, r5
10001eb8:	687b      	ldr	r3, [r7, #4]
10001eba:	4798      	blx	r3
10001ebc:	1e01      	subs	r1, r0, #0
			if (err < 0) {
10001ebe:	da0d      	bge.n	10001edc <main+0xe4>
				printk("Could not read (%d)\n", err);
10001ec0:	482c      	ldr	r0, [pc, #176]	; (10001f74 <main+0x17c>)
10001ec2:	f003 fbfe 	bl	100056c2 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10001ec6:	2100      	movs	r1, #0
10001ec8:	482b      	ldr	r0, [pc, #172]	; (10001f78 <main+0x180>)
10001eca:	f002 ff5d 	bl	10004d88 <z_impl_k_sleep>
	while (1) {
10001ece:	e7e4      	b.n	10001e9a <main+0xa2>
		if (max_period < (4U * MIN_PERIOD)) {
10001ed0:	3e01      	subs	r6, #1
10001ed2:	2e00      	cmp	r6, #0
10001ed4:	d1d0      	bne.n	10001e78 <main+0x80>
			printk("Error: PWM device "
10001ed6:	4829      	ldr	r0, [pc, #164]	; (10001f7c <main+0x184>)
10001ed8:	4929      	ldr	r1, [pc, #164]	; (10001f80 <main+0x188>)
10001eda:	e7b5      	b.n	10001e48 <main+0x50>
				printk("%"PRIu16, buf);
10001edc:	ab02      	add	r3, sp, #8
10001ede:	89d9      	ldrh	r1, [r3, #14]
10001ee0:	4828      	ldr	r0, [pc, #160]	; (10001f84 <main+0x18c>)
10001ee2:	f003 fbee 	bl	100056c2 <printk>
			val_mv = buf;
10001ee6:	ab02      	add	r3, sp, #8
10001ee8:	89de      	ldrh	r6, [r3, #14]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
10001eea:	89bb      	ldrh	r3, [r7, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
10001eec:	2008      	movs	r0, #8
	int32_t adc_mv = *valp * ref_mv;
10001eee:	4373      	muls	r3, r6
	int ret = adc_gain_invert(gain, &adc_mv);
10001ef0:	a906      	add	r1, sp, #24
	int32_t adc_mv = *valp * ref_mv;
10001ef2:	9306      	str	r3, [sp, #24]
	int ret = adc_gain_invert(gain, &adc_mv);
10001ef4:	f001 fb64 	bl	100035c0 <adc_gain_invert>
	if (ret == 0) {
10001ef8:	2800      	cmp	r0, #0
10001efa:	d106      	bne.n	10001f0a <main+0x112>
		*valp = (adc_mv >> resolution);
10001efc:	9e06      	ldr	r6, [sp, #24]
10001efe:	1336      	asrs	r6, r6, #12
				printk(" = %"PRId32" mV\n", val_mv);
10001f00:	0031      	movs	r1, r6
10001f02:	4821      	ldr	r0, [pc, #132]	; (10001f88 <main+0x190>)
10001f04:	f003 fbdd 	bl	100056c2 <printk>
10001f08:	e004      	b.n	10001f14 <main+0x11c>
			if (err < 0) {
10001f0a:	2800      	cmp	r0, #0
10001f0c:	daf8      	bge.n	10001f00 <main+0x108>
				printk(" (value in mV not available)\n");
10001f0e:	481f      	ldr	r0, [pc, #124]	; (10001f8c <main+0x194>)
10001f10:	f003 fbd7 	bl	100056c2 <printk>
			duty_cycle = buf/sizeof(buf)*period;
10001f14:	ab02      	add	r3, sp, #8
10001f16:	89db      	ldrh	r3, [r3, #14]
10001f18:	9a02      	ldr	r2, [sp, #8]
10001f1a:	085b      	lsrs	r3, r3, #1
10001f1c:	4353      	muls	r3, r2
10001f1e:	2200      	movs	r2, #0
10001f20:	2109      	movs	r1, #9
10001f22:	9200      	str	r2, [sp, #0]
10001f24:	9803      	ldr	r0, [sp, #12]
10001f26:	9a02      	ldr	r2, [sp, #8]
10001f28:	f7ff ff1e 	bl	10001d68 <pwm_set>
10001f2c:	1e01      	subs	r1, r0, #0
			if (ret) {
10001f2e:	d001      	beq.n	10001f34 <main+0x13c>
				printk("Error %d: failed to set pulse width\n", ret);
10001f30:	4817      	ldr	r0, [pc, #92]	; (10001f90 <main+0x198>)
10001f32:	e789      	b.n	10001e48 <main+0x50>
10001f34:	2100      	movs	r1, #0
10001f36:	4817      	ldr	r0, [pc, #92]	; (10001f94 <main+0x19c>)
10001f38:	f002 ff26 	bl	10004d88 <z_impl_k_sleep>
10001f3c:	e7c3      	b.n	10001ec6 <main+0xce>
10001f3e:	46c0      	nop			; (mov r8, r8)
10001f40:	10006360 	.word	0x10006360
10001f44:	100064e2 	.word	0x100064e2
10001f48:	100066cb 	.word	0x100066cb
10001f4c:	10006378 	.word	0x10006378
10001f50:	100066dd 	.word	0x100066dd
10001f54:	10006688 	.word	0x10006688
10001f58:	100066a9 	.word	0x100066a9
10001f5c:	10006700 	.word	0x10006700
10001f60:	3b9aca00 	.word	0x3b9aca00
10001f64:	10006759 	.word	0x10006759
10001f68:	00773594 	.word	0x00773594
10001f6c:	10006790 	.word	0x10006790
10001f70:	1000679e 	.word	0x1000679e
10001f74:	100067b1 	.word	0x100067b1
10001f78:	00002710 	.word	0x00002710
10001f7c:	1000671f 	.word	0x1000671f
10001f80:	01dcd650 	.word	0x01dcd650
10001f84:	100067c6 	.word	0x100067c6
10001f88:	100067e7 	.word	0x100067e7
10001f8c:	100067c9 	.word	0x100067c9
10001f90:	100067f1 	.word	0x100067f1
10001f94:	00009c40 	.word	0x00009c40

10001f98 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f9a:	b095      	sub	sp, #84	; 0x54
10001f9c:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001f9e:	2304      	movs	r3, #4
{
10001fa0:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001fa2:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10001fa6:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fa8:	08da      	lsrs	r2, r3, #3
10001faa:	2307      	movs	r3, #7
10001fac:	401a      	ands	r2, r3
10001fae:	3201      	adds	r2, #1
{
10001fb0:	0007      	movs	r7, r0
10001fb2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
10001fb4:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10001fb6:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10001fb8:	0782      	lsls	r2, r0, #30
10001fba:	d000      	beq.n	10001fbe <cbvprintf_package+0x26>
10001fbc:	e1d2      	b.n	10002364 <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10001fbe:	1d02      	adds	r2, r0, #4
10001fc0:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
10001fc2:	2800      	cmp	r0, #0
10001fc4:	d004      	beq.n	10001fd0 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
10001fc6:	2907      	cmp	r1, #7
10001fc8:	d80a      	bhi.n	10001fe0 <cbvprintf_package+0x48>
		return -ENOSPC;
10001fca:	201c      	movs	r0, #28
		return -EFAULT;
10001fcc:	4240      	negs	r0, r0
10001fce:	e154      	b.n	1000227a <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10001fd0:	9a02      	ldr	r2, [sp, #8]
10001fd2:	401a      	ands	r2, r3
10001fd4:	0013      	movs	r3, r2
10001fd6:	3204      	adds	r2, #4
10001fd8:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
10001fda:	2208      	movs	r2, #8
10001fdc:	1ad3      	subs	r3, r2, r3
10001fde:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10001fe0:	2504      	movs	r5, #4
	s = fmt--;
10001fe2:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
10001fe4:	002e      	movs	r6, r5
	s = fmt--;
10001fe6:	3b01      	subs	r3, #1
10001fe8:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
10001fea:	2300      	movs	r3, #0
10001fec:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
10001fee:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
10001ff0:	9303      	str	r3, [sp, #12]
	bool parsing = false;
10001ff2:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
10001ff4:	3b01      	subs	r3, #1
10001ff6:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
10001ff8:	2f00      	cmp	r7, #0
10001ffa:	d002      	beq.n	10002002 <cbvprintf_package+0x6a>
				*(const char **)buf = s;
10001ffc:	9b00      	ldr	r3, [sp, #0]
10001ffe:	9a04      	ldr	r2, [sp, #16]
10002000:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002004:	2b00      	cmp	r3, #0
10002006:	dd00      	ble.n	1000200a <cbvprintf_package+0x72>
10002008:	e0eb      	b.n	100021e2 <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
1000200a:	4b9d      	ldr	r3, [pc, #628]	; (10002280 <cbvprintf_package+0x2e8>)
1000200c:	9a04      	ldr	r2, [sp, #16]
1000200e:	429a      	cmp	r2, r3
10002010:	d303      	bcc.n	1000201a <cbvprintf_package+0x82>
10002012:	4b9c      	ldr	r3, [pc, #624]	; (10002284 <cbvprintf_package+0x2ec>)
10002014:	429a      	cmp	r2, r3
10002016:	d200      	bcs.n	1000201a <cbvprintf_package+0x82>
10002018:	e0e3      	b.n	100021e2 <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000201a:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
1000201c:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
1000201e:	1bda      	subs	r2, r3, r7
10002020:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002022:	0789      	lsls	r1, r1, #30
10002024:	d500      	bpl.n	10002028 <cbvprintf_package+0x90>
10002026:	e109      	b.n	1000223c <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
10002028:	9a03      	ldr	r2, [sp, #12]
1000202a:	2a0f      	cmp	r2, #15
1000202c:	d900      	bls.n	10002030 <cbvprintf_package+0x98>
1000202e:	e0b4      	b.n	1000219a <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
10002030:	2f00      	cmp	r7, #0
10002032:	d100      	bne.n	10002036 <cbvprintf_package+0x9e>
10002034:	e10a      	b.n	1000224c <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
10002036:	9903      	ldr	r1, [sp, #12]
10002038:	aa0c      	add	r2, sp, #48	; 0x30
1000203a:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
1000203c:	000a      	movs	r2, r1
1000203e:	9906      	ldr	r1, [sp, #24]
10002040:	ab10      	add	r3, sp, #64	; 0x40
10002042:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
10002044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002046:	3301      	adds	r3, #1
10002048:	930a      	str	r3, [sp, #40]	; 0x28
1000204a:	e0ee      	b.n	1000222a <cbvprintf_package+0x292>
			switch (*fmt) {
1000204c:	287a      	cmp	r0, #122	; 0x7a
1000204e:	d861      	bhi.n	10002114 <cbvprintf_package+0x17c>
10002050:	284b      	cmp	r0, #75	; 0x4b
10002052:	d80e      	bhi.n	10002072 <cbvprintf_package+0xda>
10002054:	2847      	cmp	r0, #71	; 0x47
10002056:	d85d      	bhi.n	10002114 <cbvprintf_package+0x17c>
10002058:	2829      	cmp	r0, #41	; 0x29
1000205a:	d82b      	bhi.n	100020b4 <cbvprintf_package+0x11c>
1000205c:	2825      	cmp	r0, #37	; 0x25
1000205e:	d056      	beq.n	1000210e <cbvprintf_package+0x176>
10002060:	d858      	bhi.n	10002114 <cbvprintf_package+0x17c>
10002062:	2820      	cmp	r0, #32
10002064:	d07f      	beq.n	10002166 <cbvprintf_package+0x1ce>
10002066:	3823      	subs	r0, #35	; 0x23
10002068:	4243      	negs	r3, r0
1000206a:	4158      	adcs	r0, r3
1000206c:	b2c3      	uxtb	r3, r0
				parsing = false;
1000206e:	9301      	str	r3, [sp, #4]
				continue;
10002070:	e079      	b.n	10002166 <cbvprintf_package+0x1ce>
			switch (*fmt) {
10002072:	384c      	subs	r0, #76	; 0x4c
10002074:	282e      	cmp	r0, #46	; 0x2e
10002076:	d84d      	bhi.n	10002114 <cbvprintf_package+0x17c>
10002078:	f7fe f896 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000207c:	4c4c4c75 	.word	0x4c4c4c75
10002080:	4c4c4c4c 	.word	0x4c4c4c4c
10002084:	4c4c4c4c 	.word	0x4c4c4c4c
10002088:	4c4c4c4e 	.word	0x4c4c4c4e
1000208c:	4c4c4c4c 	.word	0x4c4c4c4c
10002090:	4e4c5d4c 	.word	0x4e4c5d4c
10002094:	5d5d5d4e 	.word	0x5d5d5d4e
10002098:	4c734e75 	.word	0x4c734e75
1000209c:	4e184c75 	.word	0x4e184c75
100020a0:	894c4c18 	.word	0x894c4c18
100020a4:	4c4c4e87 	.word	0x4c4c4e87
100020a8:	4c4e      	.short	0x4c4e
100020aa:	87          	.byte	0x87
100020ab:	00          	.byte	0x00
100020ac:	2300      	movs	r3, #0
				parsing = false;
100020ae:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
100020b0:	2504      	movs	r5, #4
100020b2:	e03e      	b.n	10002132 <cbvprintf_package+0x19a>
100020b4:	2101      	movs	r1, #1
100020b6:	000a      	movs	r2, r1
100020b8:	382a      	subs	r0, #42	; 0x2a
100020ba:	b2c0      	uxtb	r0, r0
100020bc:	4082      	lsls	r2, r0
100020be:	4b72      	ldr	r3, [pc, #456]	; (10002288 <cbvprintf_package+0x2f0>)
100020c0:	421a      	tst	r2, r3
100020c2:	d150      	bne.n	10002166 <cbvprintf_package+0x1ce>
100020c4:	20e2      	movs	r0, #226	; 0xe2
100020c6:	0013      	movs	r3, r2
100020c8:	0580      	lsls	r0, r0, #22
100020ca:	4003      	ands	r3, r0
100020cc:	4202      	tst	r2, r0
100020ce:	d132      	bne.n	10002136 <cbvprintf_package+0x19e>
100020d0:	0010      	movs	r0, r2
100020d2:	4008      	ands	r0, r1
100020d4:	9001      	str	r0, [sp, #4]
100020d6:	420a      	tst	r2, r1
100020d8:	d045      	beq.n	10002166 <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
100020da:	9a00      	ldr	r2, [sp, #0]
100020dc:	4269      	negs	r1, r5
100020de:	3a01      	subs	r2, #1
100020e0:	1952      	adds	r2, r2, r5
100020e2:	4011      	ands	r1, r2
100020e4:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
100020e6:	2f00      	cmp	r7, #0
100020e8:	d065      	beq.n	100021b6 <cbvprintf_package+0x21e>
100020ea:	1bf2      	subs	r2, r6, r7
100020ec:	1852      	adds	r2, r2, r1
100020ee:	9902      	ldr	r1, [sp, #8]
100020f0:	428a      	cmp	r2, r1
100020f2:	d900      	bls.n	100020f6 <cbvprintf_package+0x15e>
100020f4:	e769      	b.n	10001fca <cbvprintf_package+0x32>
		if (is_str_arg) {
100020f6:	2b00      	cmp	r3, #0
100020f8:	d16a      	bne.n	100021d0 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
100020fa:	2e04      	cmp	r6, #4
100020fc:	d14b      	bne.n	10002196 <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
100020fe:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
10002100:	9a00      	ldr	r2, [sp, #0]
10002102:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
10002104:	9b00      	ldr	r3, [sp, #0]
10002106:	2604      	movs	r6, #4
10002108:	3304      	adds	r3, #4
1000210a:	9300      	str	r3, [sp, #0]
1000210c:	e02b      	b.n	10002166 <cbvprintf_package+0x1ce>
				arg_idx--;
1000210e:	9b06      	ldr	r3, [sp, #24]
10002110:	3b01      	subs	r3, #1
10002112:	9306      	str	r3, [sp, #24]
				parsing = false;
10002114:	2300      	movs	r3, #0
10002116:	e7aa      	b.n	1000206e <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
10002118:	9b05      	ldr	r3, [sp, #20]
1000211a:	785a      	ldrb	r2, [r3, #1]
1000211c:	2300      	movs	r3, #0
				parsing = false;
1000211e:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
10002120:	2a6c      	cmp	r2, #108	; 0x6c
10002122:	d1da      	bne.n	100020da <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
10002124:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
10002126:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
10002128:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
1000212a:	7812      	ldrb	r2, [r2, #0]
1000212c:	2a6c      	cmp	r2, #108	; 0x6c
1000212e:	d1d4      	bne.n	100020da <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
10002130:	196d      	adds	r5, r5, r5
			switch (*fmt) {
10002132:	002e      	movs	r6, r5
10002134:	e7d1      	b.n	100020da <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
10002136:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
10002138:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
1000213a:	3407      	adds	r4, #7
1000213c:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
1000213e:	1949      	adds	r1, r1, r5
10002140:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
10002142:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
10002144:	2f00      	cmp	r7, #0
10002146:	d008      	beq.n	1000215a <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
10002148:	3501      	adds	r5, #1
1000214a:	1bed      	subs	r5, r5, r7
1000214c:	9e02      	ldr	r6, [sp, #8]
1000214e:	186d      	adds	r5, r5, r1
10002150:	42b5      	cmp	r5, r6
10002152:	d900      	bls.n	10002156 <cbvprintf_package+0x1be>
10002154:	e739      	b.n	10001fca <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
10002156:	600a      	str	r2, [r1, #0]
10002158:	604b      	str	r3, [r1, #4]
				parsing = false;
1000215a:	2300      	movs	r3, #0
				buf += size;
1000215c:	3108      	adds	r1, #8
1000215e:	9100      	str	r1, [sp, #0]
				parsing = false;
10002160:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10002162:	2508      	movs	r5, #8
10002164:	002e      	movs	r6, r5
10002166:	9b05      	ldr	r3, [sp, #20]
10002168:	3301      	adds	r3, #1
1000216a:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
1000216c:	9b05      	ldr	r3, [sp, #20]
1000216e:	7898      	ldrb	r0, [r3, #2]
10002170:	2800      	cmp	r0, #0
10002172:	d077      	beq.n	10002264 <cbvprintf_package+0x2cc>
			if (!parsing) {
10002174:	9b01      	ldr	r3, [sp, #4]
10002176:	2b00      	cmp	r3, #0
10002178:	d000      	beq.n	1000217c <cbvprintf_package+0x1e4>
1000217a:	e767      	b.n	1000204c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
1000217c:	2825      	cmp	r0, #37	; 0x25
1000217e:	d1f2      	bne.n	10002166 <cbvprintf_package+0x1ce>
					arg_idx++;
10002180:	9b06      	ldr	r3, [sp, #24]
10002182:	3301      	adds	r3, #1
10002184:	9306      	str	r3, [sp, #24]
					parsing = true;
10002186:	2301      	movs	r3, #1
10002188:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
1000218a:	2504      	movs	r5, #4
1000218c:	e7ea      	b.n	10002164 <cbvprintf_package+0x1cc>
			switch (*fmt) {
1000218e:	2200      	movs	r2, #0
10002190:	9b01      	ldr	r3, [sp, #4]
10002192:	9201      	str	r2, [sp, #4]
10002194:	e78c      	b.n	100020b0 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
10002196:	2e08      	cmp	r6, #8
10002198:	d001      	beq.n	1000219e <cbvprintf_package+0x206>
					return -EINVAL;
1000219a:	2016      	movs	r0, #22
1000219c:	e716      	b.n	10001fcc <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
1000219e:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
100021a0:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
100021a2:	3407      	adds	r4, #7
100021a4:	439c      	bics	r4, r3
100021a6:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
100021a8:	600a      	str	r2, [r1, #0]
100021aa:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
100021ac:	9b00      	ldr	r3, [sp, #0]
100021ae:	2608      	movs	r6, #8
100021b0:	3308      	adds	r3, #8
100021b2:	9300      	str	r3, [sp, #0]
100021b4:	e7d7      	b.n	10002166 <cbvprintf_package+0x1ce>
		if (is_str_arg) {
100021b6:	2b00      	cmp	r3, #0
100021b8:	d10a      	bne.n	100021d0 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
100021ba:	2e04      	cmp	r6, #4
100021bc:	d101      	bne.n	100021c2 <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
100021be:	3404      	adds	r4, #4
			if (buf0 != NULL) {
100021c0:	e7a0      	b.n	10002104 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
100021c2:	2e08      	cmp	r6, #8
100021c4:	d1e9      	bne.n	1000219a <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
100021c6:	2307      	movs	r3, #7
100021c8:	3407      	adds	r4, #7
100021ca:	439c      	bics	r4, r3
100021cc:	3408      	adds	r4, #8
			if (buf0 != NULL) {
100021ce:	e7ed      	b.n	100021ac <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
100021d0:	9b05      	ldr	r3, [sp, #20]
100021d2:	3302      	adds	r3, #2
100021d4:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100021d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100021d8:	3b01      	subs	r3, #1
100021da:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
100021dc:	cc08      	ldmia	r4!, {r3}
100021de:	9304      	str	r3, [sp, #16]
100021e0:	e70a      	b.n	10001ff8 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
100021e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100021e4:	079b      	lsls	r3, r3, #30
100021e6:	d523      	bpl.n	10002230 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100021e8:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100021ea:	9b00      	ldr	r3, [sp, #0]
100021ec:	1bda      	subs	r2, r3, r7
100021ee:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100021f0:	2080      	movs	r0, #128	; 0x80
100021f2:	0080      	lsls	r0, r0, #2
100021f4:	4282      	cmp	r2, r0
100021f6:	d2d0      	bcs.n	1000219a <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100021f8:	9a03      	ldr	r2, [sp, #12]
100021fa:	2a0f      	cmp	r2, #15
100021fc:	d8cd      	bhi.n	1000219a <cbvprintf_package+0x202>
				if (buf0 != NULL) {
100021fe:	2f00      	cmp	r7, #0
10002200:	d01e      	beq.n	10002240 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
10002202:	9803      	ldr	r0, [sp, #12]
10002204:	b2db      	uxtb	r3, r3
10002206:	aa0c      	add	r2, sp, #48	; 0x30
10002208:	5413      	strb	r3, [r2, r0]
1000220a:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
1000220c:	9b06      	ldr	r3, [sp, #24]
1000220e:	aa10      	add	r2, sp, #64	; 0x40
10002210:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
10002212:	2900      	cmp	r1, #0
10002214:	d100      	bne.n	10002218 <cbvprintf_package+0x280>
10002216:	e715      	b.n	10002044 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
10002218:	2280      	movs	r2, #128	; 0x80
1000221a:	4663      	mov	r3, ip
1000221c:	4252      	negs	r2, r2
1000221e:	4313      	orrs	r3, r2
10002220:	aa0c      	add	r2, sp, #48	; 0x30
10002222:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
10002224:	9b07      	ldr	r3, [sp, #28]
10002226:	3301      	adds	r3, #1
10002228:	9307      	str	r3, [sp, #28]
				s_idx++;
1000222a:	9b03      	ldr	r3, [sp, #12]
1000222c:	3301      	adds	r3, #1
1000222e:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
10002230:	9b00      	ldr	r3, [sp, #0]
10002232:	3304      	adds	r3, #4
10002234:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
10002236:	9b05      	ldr	r3, [sp, #20]
10002238:	3b01      	subs	r3, #1
1000223a:	e796      	b.n	1000216a <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000223c:	2100      	movs	r1, #0
1000223e:	e7d7      	b.n	100021f0 <cbvprintf_package+0x258>
				} else if (is_ro) {
10002240:	2900      	cmp	r1, #0
10002242:	d003      	beq.n	1000224c <cbvprintf_package+0x2b4>
					len += 1;
10002244:	9b02      	ldr	r3, [sp, #8]
10002246:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
10002248:	9302      	str	r3, [sp, #8]
1000224a:	e7ee      	b.n	1000222a <cbvprintf_package+0x292>
					len += 2;
1000224c:	9b02      	ldr	r3, [sp, #8]
1000224e:	3302      	adds	r3, #2
10002250:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
10002252:	9b08      	ldr	r3, [sp, #32]
10002254:	2b00      	cmp	r3, #0
10002256:	d1e8      	bne.n	1000222a <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
10002258:	9804      	ldr	r0, [sp, #16]
1000225a:	f003 fb56 	bl	1000590a <strlen>
1000225e:	9b02      	ldr	r3, [sp, #8]
10002260:	181b      	adds	r3, r3, r0
10002262:	e7f1      	b.n	10002248 <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
10002264:	2280      	movs	r2, #128	; 0x80
10002266:	9b00      	ldr	r3, [sp, #0]
10002268:	00d2      	lsls	r2, r2, #3
1000226a:	1bdb      	subs	r3, r3, r7
1000226c:	4293      	cmp	r3, r2
1000226e:	d294      	bcs.n	1000219a <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
10002270:	2f00      	cmp	r7, #0
10002272:	d10b      	bne.n	1000228c <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
10002274:	9802      	ldr	r0, [sp, #8]
10002276:	3808      	subs	r0, #8
10002278:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
1000227a:	b015      	add	sp, #84	; 0x54
1000227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000227e:	46c0      	nop			; (mov r8, r8)
10002280:	100062c8 	.word	0x100062c8
10002284:	10006ca0 	.word	0x10006ca0
10002288:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
1000228c:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
1000228e:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
10002290:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10002292:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002294:	466b      	mov	r3, sp
10002296:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
10002298:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
1000229a:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
1000229c:	2a00      	cmp	r2, #0
1000229e:	d00c      	beq.n	100022ba <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
100022a0:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
100022a2:	9b07      	ldr	r3, [sp, #28]
100022a4:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
100022a6:	2b00      	cmp	r3, #0
100022a8:	d120      	bne.n	100022ec <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
100022aa:	2600      	movs	r6, #0
100022ac:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
100022ae:	9b03      	ldr	r3, [sp, #12]
100022b0:	42b3      	cmp	r3, r6
100022b2:	d120      	bne.n	100022f6 <cbvprintf_package+0x35e>
	return BUF_OFFSET;
100022b4:	9b00      	ldr	r3, [sp, #0]
100022b6:	1bd8      	subs	r0, r3, r7
100022b8:	e7df      	b.n	1000227a <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
100022ba:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
100022bc:	e7f1      	b.n	100022a2 <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
100022be:	ac0c      	add	r4, sp, #48	; 0x30
100022c0:	56e4      	ldrsb	r4, [r4, r3]
100022c2:	a90c      	add	r1, sp, #48	; 0x30
100022c4:	5c59      	ldrb	r1, [r3, r1]
100022c6:	2c00      	cmp	r4, #0
100022c8:	da0b      	bge.n	100022e2 <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
100022ca:	9c00      	ldr	r4, [sp, #0]
100022cc:	9d02      	ldr	r5, [sp, #8]
100022ce:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
100022d0:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
100022d2:	42ac      	cmp	r4, r5
100022d4:	d900      	bls.n	100022d8 <cbvprintf_package+0x340>
100022d6:	e678      	b.n	10001fca <cbvprintf_package+0x32>
			*buf++ = pos;
100022d8:	9c00      	ldr	r4, [sp, #0]
100022da:	7021      	strb	r1, [r4, #0]
100022dc:	0021      	movs	r1, r4
100022de:	3101      	adds	r1, #1
100022e0:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
100022e2:	3301      	adds	r3, #1
100022e4:	9903      	ldr	r1, [sp, #12]
100022e6:	4299      	cmp	r1, r3
100022e8:	d1e9      	bne.n	100022be <cbvprintf_package+0x326>
100022ea:	e7de      	b.n	100022aa <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
100022ec:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
100022ee:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
100022f0:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
100022f2:	1bd2      	subs	r2, r2, r7
100022f4:	e7f6      	b.n	100022e4 <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
100022f6:	9b07      	ldr	r3, [sp, #28]
100022f8:	2b00      	cmp	r3, #0
100022fa:	d002      	beq.n	10002302 <cbvprintf_package+0x36a>
100022fc:	782b      	ldrb	r3, [r5, #0]
100022fe:	2b7f      	cmp	r3, #127	; 0x7f
10002300:	d821      	bhi.n	10002346 <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
10002302:	9b08      	ldr	r3, [sp, #32]
10002304:	2b00      	cmp	r3, #0
10002306:	d021      	beq.n	1000234c <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
10002308:	ab10      	add	r3, sp, #64	; 0x40
1000230a:	9a00      	ldr	r2, [sp, #0]
1000230c:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
1000230e:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10002310:	7013      	strb	r3, [r2, #0]
10002312:	0013      	movs	r3, r2
10002314:	3301      	adds	r3, #1
10002316:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
10002318:	2301      	movs	r3, #1
1000231a:	9a00      	ldr	r2, [sp, #0]
1000231c:	1bdb      	subs	r3, r3, r7
1000231e:	191b      	adds	r3, r3, r4
10002320:	18d3      	adds	r3, r2, r3
10002322:	9a02      	ldr	r2, [sp, #8]
10002324:	4293      	cmp	r3, r2
10002326:	d900      	bls.n	1000232a <cbvprintf_package+0x392>
10002328:	e64f      	b.n	10001fca <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
1000232a:	9b00      	ldr	r3, [sp, #0]
1000232c:	9a00      	ldr	r2, [sp, #0]
1000232e:	3301      	adds	r3, #1
10002330:	9301      	str	r3, [sp, #4]
10002332:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
10002334:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
10002336:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
10002338:	9801      	ldr	r0, [sp, #4]
1000233a:	0022      	movs	r2, r4
1000233c:	f003 faf7 	bl	1000592e <memcpy>
		buf += size;
10002340:	9b01      	ldr	r3, [sp, #4]
10002342:	191b      	adds	r3, r3, r4
10002344:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
10002346:	3601      	adds	r6, #1
10002348:	3501      	adds	r5, #1
1000234a:	e7b0      	b.n	100022ae <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
1000234c:	782b      	ldrb	r3, [r5, #0]
1000234e:	009b      	lsls	r3, r3, #2
10002350:	18fb      	adds	r3, r7, r3
10002352:	681a      	ldr	r2, [r3, #0]
10002354:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10002356:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
10002358:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
1000235a:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
1000235c:	f003 fad5 	bl	1000590a <strlen>
10002360:	1c44      	adds	r4, r0, #1
10002362:	e7d9      	b.n	10002318 <cbvprintf_package+0x380>
		return -EFAULT;
10002364:	200e      	movs	r0, #14
10002366:	e631      	b.n	10001fcc <cbvprintf_package+0x34>

10002368 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
10002368:	4b01      	ldr	r3, [pc, #4]	; (10002370 <__printk_hook_install+0x8>)
1000236a:	6018      	str	r0, [r3, #0]
}
1000236c:	4770      	bx	lr
1000236e:	46c0      	nop			; (mov r8, r8)
10002370:	200000b8 	.word	0x200000b8

10002374 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10002374:	b5f0      	push	{r4, r5, r6, r7, lr}
10002376:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10002378:	2700      	movs	r7, #0
{
1000237a:	b099      	sub	sp, #100	; 0x64
1000237c:	9004      	str	r0, [sp, #16]
1000237e:	9105      	str	r1, [sp, #20]
10002380:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10002382:	9b08      	ldr	r3, [sp, #32]
10002384:	7818      	ldrb	r0, [r3, #0]
10002386:	2800      	cmp	r0, #0
10002388:	d101      	bne.n	1000238e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
1000238a:	0038      	movs	r0, r7
1000238c:	e327      	b.n	100029de <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
1000238e:	9b08      	ldr	r3, [sp, #32]
10002390:	3301      	adds	r3, #1
10002392:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10002394:	2825      	cmp	r0, #37	; 0x25
10002396:	d007      	beq.n	100023a8 <z_cbvprintf_impl+0x34>
			OUTC('%');
10002398:	9905      	ldr	r1, [sp, #20]
1000239a:	9b04      	ldr	r3, [sp, #16]
1000239c:	4798      	blx	r3
1000239e:	2800      	cmp	r0, #0
100023a0:	da00      	bge.n	100023a4 <z_cbvprintf_impl+0x30>
100023a2:	e31c      	b.n	100029de <z_cbvprintf_impl+0x66a>
100023a4:	3701      	adds	r7, #1
		if (bps == NULL) {
100023a6:	e1e3      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		} state = {
100023a8:	ad12      	add	r5, sp, #72	; 0x48
100023aa:	2218      	movs	r2, #24
100023ac:	2100      	movs	r1, #0
100023ae:	0028      	movs	r0, r5
100023b0:	f003 fac6 	bl	10005940 <memset>
	if (*sp == '%') {
100023b4:	9b08      	ldr	r3, [sp, #32]
100023b6:	785b      	ldrb	r3, [r3, #1]
100023b8:	2b25      	cmp	r3, #37	; 0x25
100023ba:	d114      	bne.n	100023e6 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
100023bc:	9a08      	ldr	r2, [sp, #32]
100023be:	72eb      	strb	r3, [r5, #11]
100023c0:	3202      	adds	r2, #2
100023c2:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
100023c4:	ab12      	add	r3, sp, #72	; 0x48
100023c6:	7a5a      	ldrb	r2, [r3, #9]
100023c8:	07d1      	lsls	r1, r2, #31
100023ca:	d400      	bmi.n	100023ce <z_cbvprintf_impl+0x5a>
100023cc:	e17f      	b.n	100026ce <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
100023ce:	cc02      	ldmia	r4!, {r1}
100023d0:	9103      	str	r1, [sp, #12]
			if (width < 0) {
100023d2:	2900      	cmp	r1, #0
100023d4:	db00      	blt.n	100023d8 <z_cbvprintf_impl+0x64>
100023d6:	e17f      	b.n	100026d8 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
100023d8:	2104      	movs	r1, #4
100023da:	7a18      	ldrb	r0, [r3, #8]
100023dc:	4301      	orrs	r1, r0
100023de:	7219      	strb	r1, [r3, #8]
				width = -width;
100023e0:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
100023e2:	425b      	negs	r3, r3
100023e4:	e177      	b.n	100026d6 <z_cbvprintf_impl+0x362>
100023e6:	2200      	movs	r2, #0
		switch (*sp) {
100023e8:	2601      	movs	r6, #1
100023ea:	0015      	movs	r5, r2
100023ec:	0010      	movs	r0, r2
100023ee:	4694      	mov	ip, r2
100023f0:	9203      	str	r2, [sp, #12]
100023f2:	9b07      	ldr	r3, [sp, #28]
100023f4:	781b      	ldrb	r3, [r3, #0]
100023f6:	2b2b      	cmp	r3, #43	; 0x2b
100023f8:	d06f      	beq.n	100024da <z_cbvprintf_impl+0x166>
100023fa:	d868      	bhi.n	100024ce <z_cbvprintf_impl+0x15a>
100023fc:	2b20      	cmp	r3, #32
100023fe:	d071      	beq.n	100024e4 <z_cbvprintf_impl+0x170>
10002400:	2b23      	cmp	r3, #35	; 0x23
10002402:	d071      	beq.n	100024e8 <z_cbvprintf_impl+0x174>
10002404:	2a00      	cmp	r2, #0
10002406:	d005      	beq.n	10002414 <z_cbvprintf_impl+0xa0>
10002408:	ae12      	add	r6, sp, #72	; 0x48
1000240a:	7a32      	ldrb	r2, [r6, #8]
1000240c:	0011      	movs	r1, r2
1000240e:	2240      	movs	r2, #64	; 0x40
10002410:	430a      	orrs	r2, r1
10002412:	7232      	strb	r2, [r6, #8]
10002414:	2d00      	cmp	r5, #0
10002416:	d004      	beq.n	10002422 <z_cbvprintf_impl+0xae>
10002418:	2220      	movs	r2, #32
1000241a:	ad12      	add	r5, sp, #72	; 0x48
1000241c:	7a2e      	ldrb	r6, [r5, #8]
1000241e:	4332      	orrs	r2, r6
10002420:	722a      	strb	r2, [r5, #8]
10002422:	2800      	cmp	r0, #0
10002424:	d004      	beq.n	10002430 <z_cbvprintf_impl+0xbc>
10002426:	2210      	movs	r2, #16
10002428:	a812      	add	r0, sp, #72	; 0x48
1000242a:	7a05      	ldrb	r5, [r0, #8]
1000242c:	432a      	orrs	r2, r5
1000242e:	7202      	strb	r2, [r0, #8]
10002430:	9a03      	ldr	r2, [sp, #12]
10002432:	2a00      	cmp	r2, #0
10002434:	d004      	beq.n	10002440 <z_cbvprintf_impl+0xcc>
10002436:	2208      	movs	r2, #8
10002438:	a912      	add	r1, sp, #72	; 0x48
1000243a:	7a08      	ldrb	r0, [r1, #8]
1000243c:	4302      	orrs	r2, r0
1000243e:	720a      	strb	r2, [r1, #8]
10002440:	4662      	mov	r2, ip
10002442:	2a00      	cmp	r2, #0
10002444:	d004      	beq.n	10002450 <z_cbvprintf_impl+0xdc>
10002446:	2204      	movs	r2, #4
10002448:	a912      	add	r1, sp, #72	; 0x48
1000244a:	7a08      	ldrb	r0, [r1, #8]
1000244c:	4302      	orrs	r2, r0
1000244e:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10002450:	2144      	movs	r1, #68	; 0x44
10002452:	a812      	add	r0, sp, #72	; 0x48
10002454:	7a02      	ldrb	r2, [r0, #8]
10002456:	4011      	ands	r1, r2
10002458:	2944      	cmp	r1, #68	; 0x44
1000245a:	d102      	bne.n	10002462 <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
1000245c:	2140      	movs	r1, #64	; 0x40
1000245e:	438a      	bics	r2, r1
10002460:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10002462:	2280      	movs	r2, #128	; 0x80
10002464:	7a01      	ldrb	r1, [r0, #8]
10002466:	4252      	negs	r2, r2
10002468:	430a      	orrs	r2, r1
1000246a:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
1000246c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
1000246e:	250a      	movs	r5, #10
10002470:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10002472:	2b2a      	cmp	r3, #42	; 0x2a
10002474:	d140      	bne.n	100024f8 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10002476:	7a41      	ldrb	r1, [r0, #9]
10002478:	3b29      	subs	r3, #41	; 0x29
1000247a:	430b      	orrs	r3, r1
		return ++sp;
1000247c:	3201      	adds	r2, #1
		conv->width_star = true;
1000247e:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10002480:	7815      	ldrb	r5, [r2, #0]
10002482:	2602      	movs	r6, #2
10002484:	0029      	movs	r1, r5
10002486:	392e      	subs	r1, #46	; 0x2e
10002488:	424b      	negs	r3, r1
1000248a:	4159      	adcs	r1, r3
1000248c:	a812      	add	r0, sp, #72	; 0x48
1000248e:	7a43      	ldrb	r3, [r0, #9]
10002490:	0049      	lsls	r1, r1, #1
10002492:	43b3      	bics	r3, r6
10002494:	430b      	orrs	r3, r1
10002496:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10002498:	2d2e      	cmp	r5, #46	; 0x2e
1000249a:	d145      	bne.n	10002528 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
1000249c:	7853      	ldrb	r3, [r2, #1]
1000249e:	2b2a      	cmp	r3, #42	; 0x2a
100024a0:	d03d      	beq.n	1000251e <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
100024a2:	2300      	movs	r3, #0
	++sp;
100024a4:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
100024a6:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
100024a8:	7811      	ldrb	r1, [r2, #0]
100024aa:	1c55      	adds	r5, r2, #1
100024ac:	0008      	movs	r0, r1
100024ae:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100024b0:	2809      	cmp	r0, #9
100024b2:	d963      	bls.n	1000257c <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
100024b4:	a912      	add	r1, sp, #72	; 0x48
100024b6:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
100024b8:	7a0d      	ldrb	r5, [r1, #8]
100024ba:	07a8      	lsls	r0, r5, #30
100024bc:	4318      	orrs	r0, r3
100024be:	2302      	movs	r3, #2
100024c0:	439d      	bics	r5, r3
100024c2:	002b      	movs	r3, r5
100024c4:	0fc0      	lsrs	r0, r0, #31
100024c6:	0040      	lsls	r0, r0, #1
100024c8:	4303      	orrs	r3, r0
100024ca:	720b      	strb	r3, [r1, #8]
	return sp;
100024cc:	e02c      	b.n	10002528 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
100024ce:	2b2d      	cmp	r3, #45	; 0x2d
100024d0:	d00c      	beq.n	100024ec <z_cbvprintf_impl+0x178>
100024d2:	2b30      	cmp	r3, #48	; 0x30
100024d4:	d196      	bne.n	10002404 <z_cbvprintf_impl+0x90>
100024d6:	0032      	movs	r2, r6
100024d8:	e000      	b.n	100024dc <z_cbvprintf_impl+0x168>
100024da:	9603      	str	r6, [sp, #12]
			++sp;
100024dc:	9b07      	ldr	r3, [sp, #28]
100024de:	3301      	adds	r3, #1
100024e0:	9307      	str	r3, [sp, #28]
	} while (loop);
100024e2:	e786      	b.n	100023f2 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
100024e4:	0030      	movs	r0, r6
100024e6:	e7f9      	b.n	100024dc <z_cbvprintf_impl+0x168>
100024e8:	0035      	movs	r5, r6
100024ea:	e7f7      	b.n	100024dc <z_cbvprintf_impl+0x168>
100024ec:	46b4      	mov	ip, r6
100024ee:	e7f5      	b.n	100024dc <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
100024f0:	0032      	movs	r2, r6
100024f2:	4369      	muls	r1, r5
100024f4:	3930      	subs	r1, #48	; 0x30
100024f6:	1859      	adds	r1, r3, r1
100024f8:	7813      	ldrb	r3, [r2, #0]
100024fa:	1c56      	adds	r6, r2, #1
100024fc:	0018      	movs	r0, r3
100024fe:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10002500:	2809      	cmp	r0, #9
10002502:	d9f5      	bls.n	100024f0 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10002504:	9b07      	ldr	r3, [sp, #28]
10002506:	4293      	cmp	r3, r2
10002508:	d0ba      	beq.n	10002480 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
1000250a:	2502      	movs	r5, #2
		conv->width_value = width;
1000250c:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
1000250e:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10002510:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10002512:	0fc9      	lsrs	r1, r1, #31
10002514:	0049      	lsls	r1, r1, #1
10002516:	43a8      	bics	r0, r5
10002518:	4301      	orrs	r1, r0
1000251a:	7219      	strb	r1, [r3, #8]
1000251c:	e7b0      	b.n	10002480 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
1000251e:	2304      	movs	r3, #4
10002520:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10002522:	3202      	adds	r2, #2
		conv->prec_star = true;
10002524:	430b      	orrs	r3, r1
10002526:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10002528:	7811      	ldrb	r1, [r2, #0]
1000252a:	ab12      	add	r3, sp, #72	; 0x48
1000252c:	296c      	cmp	r1, #108	; 0x6c
1000252e:	d045      	beq.n	100025bc <z_cbvprintf_impl+0x248>
10002530:	d829      	bhi.n	10002586 <z_cbvprintf_impl+0x212>
10002532:	2968      	cmp	r1, #104	; 0x68
10002534:	d030      	beq.n	10002598 <z_cbvprintf_impl+0x224>
10002536:	296a      	cmp	r1, #106	; 0x6a
10002538:	d04c      	beq.n	100025d4 <z_cbvprintf_impl+0x260>
1000253a:	294c      	cmp	r1, #76	; 0x4c
1000253c:	d054      	beq.n	100025e8 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
1000253e:	7811      	ldrb	r1, [r2, #0]
10002540:	1c53      	adds	r3, r2, #1
10002542:	aa12      	add	r2, sp, #72	; 0x48
10002544:	9307      	str	r3, [sp, #28]
10002546:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10002548:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
1000254a:	2978      	cmp	r1, #120	; 0x78
1000254c:	d900      	bls.n	10002550 <z_cbvprintf_impl+0x1dc>
1000254e:	e0b9      	b.n	100026c4 <z_cbvprintf_impl+0x350>
10002550:	296d      	cmp	r1, #109	; 0x6d
10002552:	d850      	bhi.n	100025f6 <z_cbvprintf_impl+0x282>
10002554:	2969      	cmp	r1, #105	; 0x69
10002556:	d900      	bls.n	1000255a <z_cbvprintf_impl+0x1e6>
10002558:	e0b4      	b.n	100026c4 <z_cbvprintf_impl+0x350>
1000255a:	2957      	cmp	r1, #87	; 0x57
1000255c:	d866      	bhi.n	1000262c <z_cbvprintf_impl+0x2b8>
1000255e:	2941      	cmp	r1, #65	; 0x41
10002560:	d003      	beq.n	1000256a <z_cbvprintf_impl+0x1f6>
10002562:	3945      	subs	r1, #69	; 0x45
10002564:	2902      	cmp	r1, #2
10002566:	d900      	bls.n	1000256a <z_cbvprintf_impl+0x1f6>
10002568:	e0ac      	b.n	100026c4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
1000256a:	2307      	movs	r3, #7
1000256c:	a912      	add	r1, sp, #72	; 0x48
1000256e:	7a8a      	ldrb	r2, [r1, #10]
10002570:	439a      	bics	r2, r3
10002572:	3b03      	subs	r3, #3
10002574:	4313      	orrs	r3, r2
10002576:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10002578:	2301      	movs	r3, #1
			break;
1000257a:	e073      	b.n	10002664 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
1000257c:	4373      	muls	r3, r6
1000257e:	3b30      	subs	r3, #48	; 0x30
10002580:	002a      	movs	r2, r5
10002582:	185b      	adds	r3, r3, r1
10002584:	e790      	b.n	100024a8 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10002586:	2974      	cmp	r1, #116	; 0x74
10002588:	d029      	beq.n	100025de <z_cbvprintf_impl+0x26a>
1000258a:	297a      	cmp	r1, #122	; 0x7a
1000258c:	d1d7      	bne.n	1000253e <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
1000258e:	2178      	movs	r1, #120	; 0x78
10002590:	7a58      	ldrb	r0, [r3, #9]
10002592:	4388      	bics	r0, r1
10002594:	3948      	subs	r1, #72	; 0x48
10002596:	e00d      	b.n	100025b4 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10002598:	7850      	ldrb	r0, [r2, #1]
1000259a:	2178      	movs	r1, #120	; 0x78
1000259c:	2868      	cmp	r0, #104	; 0x68
1000259e:	d106      	bne.n	100025ae <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
100025a0:	7a58      	ldrb	r0, [r3, #9]
100025a2:	4388      	bics	r0, r1
100025a4:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
100025a6:	4301      	orrs	r1, r0
100025a8:	7259      	strb	r1, [r3, #9]
			++sp;
100025aa:	3202      	adds	r2, #2
100025ac:	e7c7      	b.n	1000253e <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
100025ae:	7a58      	ldrb	r0, [r3, #9]
100025b0:	4388      	bics	r0, r1
100025b2:	2110      	movs	r1, #16
100025b4:	4301      	orrs	r1, r0
100025b6:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
100025b8:	3201      	adds	r2, #1
100025ba:	e7c0      	b.n	1000253e <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
100025bc:	7850      	ldrb	r0, [r2, #1]
100025be:	2178      	movs	r1, #120	; 0x78
100025c0:	286c      	cmp	r0, #108	; 0x6c
100025c2:	d103      	bne.n	100025cc <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
100025c4:	7a58      	ldrb	r0, [r3, #9]
100025c6:	4388      	bics	r0, r1
100025c8:	3958      	subs	r1, #88	; 0x58
100025ca:	e7ec      	b.n	100025a6 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
100025cc:	7a58      	ldrb	r0, [r3, #9]
100025ce:	4388      	bics	r0, r1
100025d0:	2118      	movs	r1, #24
100025d2:	e7ef      	b.n	100025b4 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
100025d4:	2178      	movs	r1, #120	; 0x78
100025d6:	7a58      	ldrb	r0, [r3, #9]
100025d8:	4388      	bics	r0, r1
100025da:	3950      	subs	r1, #80	; 0x50
100025dc:	e7ea      	b.n	100025b4 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
100025de:	2178      	movs	r1, #120	; 0x78
100025e0:	7a58      	ldrb	r0, [r3, #9]
100025e2:	4388      	bics	r0, r1
100025e4:	3940      	subs	r1, #64	; 0x40
100025e6:	e7e5      	b.n	100025b4 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
100025e8:	8918      	ldrh	r0, [r3, #8]
100025ea:	49a5      	ldr	r1, [pc, #660]	; (10002880 <z_cbvprintf_impl+0x50c>)
100025ec:	4008      	ands	r0, r1
100025ee:	49a5      	ldr	r1, [pc, #660]	; (10002884 <z_cbvprintf_impl+0x510>)
100025f0:	4301      	orrs	r1, r0
100025f2:	8119      	strh	r1, [r3, #8]
		break;
100025f4:	e7e0      	b.n	100025b8 <z_cbvprintf_impl+0x244>
100025f6:	2001      	movs	r0, #1
100025f8:	0005      	movs	r5, r0
	switch (conv->specifier) {
100025fa:	396e      	subs	r1, #110	; 0x6e
100025fc:	b2c9      	uxtb	r1, r1
100025fe:	408d      	lsls	r5, r1
10002600:	0029      	movs	r1, r5
10002602:	4da1      	ldr	r5, [pc, #644]	; (10002888 <z_cbvprintf_impl+0x514>)
10002604:	4229      	tst	r1, r5
10002606:	d138      	bne.n	1000267a <z_cbvprintf_impl+0x306>
10002608:	2524      	movs	r5, #36	; 0x24
1000260a:	4229      	tst	r1, r5
1000260c:	d151      	bne.n	100026b2 <z_cbvprintf_impl+0x33e>
1000260e:	4201      	tst	r1, r0
10002610:	d058      	beq.n	100026c4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10002612:	2107      	movs	r1, #7
10002614:	7a90      	ldrb	r0, [r2, #10]
10002616:	4388      	bics	r0, r1
10002618:	3904      	subs	r1, #4
1000261a:	4301      	orrs	r1, r0
1000261c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000261e:	2278      	movs	r2, #120	; 0x78
10002620:	4013      	ands	r3, r2
10002622:	3b40      	subs	r3, #64	; 0x40
10002624:	425a      	negs	r2, r3
10002626:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10002628:	b2db      	uxtb	r3, r3
1000262a:	e01b      	b.n	10002664 <z_cbvprintf_impl+0x2f0>
1000262c:	2001      	movs	r0, #1
	switch (conv->specifier) {
1000262e:	000d      	movs	r5, r1
10002630:	0006      	movs	r6, r0
10002632:	3d58      	subs	r5, #88	; 0x58
10002634:	b2ed      	uxtb	r5, r5
10002636:	40ae      	lsls	r6, r5
10002638:	0035      	movs	r5, r6
1000263a:	26e2      	movs	r6, #226	; 0xe2
1000263c:	0236      	lsls	r6, r6, #8
1000263e:	4235      	tst	r5, r6
10002640:	d193      	bne.n	1000256a <z_cbvprintf_impl+0x1f6>
10002642:	4e92      	ldr	r6, [pc, #584]	; (1000288c <z_cbvprintf_impl+0x518>)
10002644:	4235      	tst	r5, r6
10002646:	d122      	bne.n	1000268e <z_cbvprintf_impl+0x31a>
10002648:	2184      	movs	r1, #132	; 0x84
1000264a:	0289      	lsls	r1, r1, #10
1000264c:	420d      	tst	r5, r1
1000264e:	d039      	beq.n	100026c4 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10002650:	2507      	movs	r5, #7
10002652:	7a91      	ldrb	r1, [r2, #10]
10002654:	43a9      	bics	r1, r5
10002656:	4301      	orrs	r1, r0
10002658:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000265a:	2178      	movs	r1, #120	; 0x78
1000265c:	400b      	ands	r3, r1
1000265e:	2b40      	cmp	r3, #64	; 0x40
10002660:	d011      	beq.n	10002686 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10002662:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10002664:	aa12      	add	r2, sp, #72	; 0x48
10002666:	7a11      	ldrb	r1, [r2, #8]
10002668:	0788      	lsls	r0, r1, #30
1000266a:	0fc0      	lsrs	r0, r0, #31
1000266c:	4303      	orrs	r3, r0
1000266e:	2002      	movs	r0, #2
10002670:	005b      	lsls	r3, r3, #1
10002672:	4381      	bics	r1, r0
10002674:	4319      	orrs	r1, r3
10002676:	7211      	strb	r1, [r2, #8]
	return sp;
10002678:	e6a4      	b.n	100023c4 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
1000267a:	2107      	movs	r1, #7
1000267c:	7a95      	ldrb	r5, [r2, #10]
1000267e:	438d      	bics	r5, r1
10002680:	3905      	subs	r1, #5
10002682:	4329      	orrs	r1, r5
10002684:	e7e8      	b.n	10002658 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10002686:	7a13      	ldrb	r3, [r2, #8]
10002688:	4303      	orrs	r3, r0
		conv->invalid = true;
1000268a:	7213      	strb	r3, [r2, #8]
		break;
1000268c:	e7e9      	b.n	10002662 <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
1000268e:	2507      	movs	r5, #7
10002690:	7a96      	ldrb	r6, [r2, #10]
10002692:	43ae      	bics	r6, r5
10002694:	3d05      	subs	r5, #5
10002696:	4335      	orrs	r5, r6
10002698:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000269a:	2578      	movs	r5, #120	; 0x78
1000269c:	402b      	ands	r3, r5
1000269e:	2b40      	cmp	r3, #64	; 0x40
100026a0:	d102      	bne.n	100026a8 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
100026a2:	7a15      	ldrb	r5, [r2, #8]
100026a4:	4328      	orrs	r0, r5
100026a6:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
100026a8:	2963      	cmp	r1, #99	; 0x63
100026aa:	d1da      	bne.n	10002662 <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
100026ac:	1e5a      	subs	r2, r3, #1
100026ae:	4193      	sbcs	r3, r2
100026b0:	e7ba      	b.n	10002628 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
100026b2:	2107      	movs	r1, #7
100026b4:	7a90      	ldrb	r0, [r2, #10]
100026b6:	4388      	bics	r0, r1
100026b8:	3904      	subs	r1, #4
100026ba:	4301      	orrs	r1, r0
100026bc:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
100026be:	2278      	movs	r2, #120	; 0x78
100026c0:	4013      	ands	r3, r2
100026c2:	e7f3      	b.n	100026ac <z_cbvprintf_impl+0x338>
		conv->invalid = true;
100026c4:	2301      	movs	r3, #1
100026c6:	aa12      	add	r2, sp, #72	; 0x48
100026c8:	7a11      	ldrb	r1, [r2, #8]
100026ca:	430b      	orrs	r3, r1
100026cc:	e7dd      	b.n	1000268a <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
100026ce:	7a19      	ldrb	r1, [r3, #8]
100026d0:	297f      	cmp	r1, #127	; 0x7f
100026d2:	d90f      	bls.n	100026f4 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
100026d4:	68db      	ldr	r3, [r3, #12]
		int width = -1;
100026d6:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
100026d8:	ab12      	add	r3, sp, #72	; 0x48
100026da:	0751      	lsls	r1, r2, #29
100026dc:	d50c      	bpl.n	100026f8 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
100026de:	cc04      	ldmia	r4!, {r2}
100026e0:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
100026e2:	2a00      	cmp	r2, #0
100026e4:	da0c      	bge.n	10002700 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
100026e6:	2102      	movs	r1, #2
100026e8:	7a5a      	ldrb	r2, [r3, #9]
100026ea:	438a      	bics	r2, r1
100026ec:	725a      	strb	r2, [r3, #9]
		int precision = -1;
100026ee:	2301      	movs	r3, #1
100026f0:	425b      	negs	r3, r3
100026f2:	e004      	b.n	100026fe <z_cbvprintf_impl+0x38a>
		int width = -1;
100026f4:	2301      	movs	r3, #1
100026f6:	e674      	b.n	100023e2 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
100026f8:	0792      	lsls	r2, r2, #30
100026fa:	d5f8      	bpl.n	100026ee <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
100026fc:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
100026fe:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10002700:	2500      	movs	r5, #0
10002702:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10002704:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
10002706:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10002708:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000270a:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
1000270c:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000270e:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10002710:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10002712:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10002714:	2b01      	cmp	r3, #1
10002716:	d130      	bne.n	1000277a <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10002718:	1ed0      	subs	r0, r2, #3
1000271a:	2804      	cmp	r0, #4
1000271c:	d804      	bhi.n	10002728 <z_cbvprintf_impl+0x3b4>
1000271e:	f7fd fd43 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002722:	450e      	.short	0x450e
10002724:	0e45      	.short	0x0e45
10002726:	0e          	.byte	0x0e
10002727:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10002728:	6823      	ldr	r3, [r4, #0]
1000272a:	17d8      	asrs	r0, r3, #31
1000272c:	9312      	str	r3, [sp, #72]	; 0x48
1000272e:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10002730:	2a01      	cmp	r2, #1
10002732:	d109      	bne.n	10002748 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10002734:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
10002736:	9312      	str	r3, [sp, #72]	; 0x48
10002738:	17db      	asrs	r3, r3, #31
1000273a:	604b      	str	r3, [r1, #4]
1000273c:	e006      	b.n	1000274c <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
1000273e:	cc08      	ldmia	r4!, {r3}
10002740:	9312      	str	r3, [sp, #72]	; 0x48
10002742:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
10002744:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
10002746:	e002      	b.n	1000274e <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
10002748:	2a02      	cmp	r2, #2
1000274a:	d014      	beq.n	10002776 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
1000274c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
1000274e:	a912      	add	r1, sp, #72	; 0x48
10002750:	7a0b      	ldrb	r3, [r1, #8]
10002752:	2003      	movs	r0, #3
10002754:	001d      	movs	r5, r3
10002756:	4005      	ands	r5, r0
10002758:	4203      	tst	r3, r0
1000275a:	d045      	beq.n	100027e8 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
1000275c:	9b07      	ldr	r3, [sp, #28]
1000275e:	9a08      	ldr	r2, [sp, #32]
10002760:	9905      	ldr	r1, [sp, #20]
10002762:	9804      	ldr	r0, [sp, #16]
10002764:	f003 f80f 	bl	10005786 <outs>
10002768:	2800      	cmp	r0, #0
1000276a:	da00      	bge.n	1000276e <z_cbvprintf_impl+0x3fa>
1000276c:	e137      	b.n	100029de <z_cbvprintf_impl+0x66a>
1000276e:	183f      	adds	r7, r7, r0
			continue;
10002770:	9b07      	ldr	r3, [sp, #28]
10002772:	9308      	str	r3, [sp, #32]
10002774:	e605      	b.n	10002382 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10002776:	b21b      	sxth	r3, r3
10002778:	e7dd      	b.n	10002736 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
1000277a:	2b02      	cmp	r3, #2
1000277c:	d125      	bne.n	100027ca <z_cbvprintf_impl+0x456>
			switch (length_mod) {
1000277e:	1ed0      	subs	r0, r2, #3
10002780:	2804      	cmp	r0, #4
10002782:	d804      	bhi.n	1000278e <z_cbvprintf_impl+0x41a>
10002784:	f7fd fd10 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002788:	1912120d 	.word	0x1912120d
1000278c:	19          	.byte	0x19
1000278d:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000278e:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10002790:	2a01      	cmp	r2, #1
10002792:	d016      	beq.n	100027c2 <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10002794:	9312      	str	r3, [sp, #72]	; 0x48
10002796:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10002798:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
1000279a:	2a02      	cmp	r2, #2
1000279c:	d1d7      	bne.n	1000274e <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000279e:	9312      	str	r3, [sp, #72]	; 0x48
100027a0:	e7d5      	b.n	1000274e <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
100027a2:	cc08      	ldmia	r4!, {r3}
100027a4:	9312      	str	r3, [sp, #72]	; 0x48
100027a6:	2300      	movs	r3, #0
100027a8:	9313      	str	r3, [sp, #76]	; 0x4c
100027aa:	e7d0      	b.n	1000274e <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
100027ac:	2307      	movs	r3, #7
100027ae:	3407      	adds	r4, #7
100027b0:	439c      	bics	r4, r3
				value->uint =
100027b2:	cc03      	ldmia	r4!, {r0, r1}
100027b4:	9012      	str	r0, [sp, #72]	; 0x48
100027b6:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
100027b8:	e7c9      	b.n	1000274e <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
100027ba:	cc08      	ldmia	r4!, {r3}
100027bc:	9312      	str	r3, [sp, #72]	; 0x48
100027be:	2300      	movs	r3, #0
100027c0:	e7c0      	b.n	10002744 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
100027c2:	b2db      	uxtb	r3, r3
100027c4:	9312      	str	r3, [sp, #72]	; 0x48
100027c6:	604d      	str	r5, [r1, #4]
100027c8:	e7c1      	b.n	1000274e <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
100027ca:	2b04      	cmp	r3, #4
100027cc:	d108      	bne.n	100027e0 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
100027ce:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
100027d0:	3303      	adds	r3, #3
100027d2:	439c      	bics	r4, r3
100027d4:	6820      	ldr	r0, [r4, #0]
100027d6:	6861      	ldr	r1, [r4, #4]
100027d8:	3408      	adds	r4, #8
100027da:	9012      	str	r0, [sp, #72]	; 0x48
100027dc:	9113      	str	r1, [sp, #76]	; 0x4c
100027de:	e7b6      	b.n	1000274e <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
100027e0:	2b03      	cmp	r3, #3
100027e2:	d1b4      	bne.n	1000274e <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100027e4:	cc08      	ldmia	r4!, {r3}
100027e6:	e7da      	b.n	1000279e <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
100027e8:	7ac8      	ldrb	r0, [r1, #11]
100027ea:	2878      	cmp	r0, #120	; 0x78
100027ec:	d8c0      	bhi.n	10002770 <z_cbvprintf_impl+0x3fc>
100027ee:	2862      	cmp	r0, #98	; 0x62
100027f0:	d82b      	bhi.n	1000284a <z_cbvprintf_impl+0x4d6>
100027f2:	2825      	cmp	r0, #37	; 0x25
100027f4:	d100      	bne.n	100027f8 <z_cbvprintf_impl+0x484>
100027f6:	e5cf      	b.n	10002398 <z_cbvprintf_impl+0x24>
100027f8:	2858      	cmp	r0, #88	; 0x58
100027fa:	d1b9      	bne.n	10002770 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
100027fc:	9812      	ldr	r0, [sp, #72]	; 0x48
100027fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
10002800:	231e      	movs	r3, #30
10002802:	aa0a      	add	r2, sp, #40	; 0x28
10002804:	189b      	adds	r3, r3, r2
10002806:	9300      	str	r3, [sp, #0]
10002808:	aa14      	add	r2, sp, #80	; 0x50
1000280a:	ab0c      	add	r3, sp, #48	; 0x30
1000280c:	f002 ff6e 	bl	100056ec <encode_uint>
			if (precision >= 0) {
10002810:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10002812:	0006      	movs	r6, r0
			if (precision >= 0) {
10002814:	2b00      	cmp	r3, #0
10002816:	db0d      	blt.n	10002834 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10002818:	231e      	movs	r3, #30
				conv->flag_zero = false;
1000281a:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
1000281c:	aa0a      	add	r2, sp, #40	; 0x28
1000281e:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10002820:	aa12      	add	r2, sp, #72	; 0x48
10002822:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10002824:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10002826:	4381      	bics	r1, r0
10002828:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000282a:	9906      	ldr	r1, [sp, #24]
1000282c:	4299      	cmp	r1, r3
1000282e:	d901      	bls.n	10002834 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10002830:	1acb      	subs	r3, r1, r3
10002832:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10002834:	2e00      	cmp	r6, #0
10002836:	d09b      	beq.n	10002770 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10002838:	231e      	movs	r3, #30
1000283a:	aa0a      	add	r2, sp, #40	; 0x28
1000283c:	189b      	adds	r3, r3, r2
1000283e:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10002840:	9306      	str	r3, [sp, #24]
10002842:	2d00      	cmp	r5, #0
10002844:	d032      	beq.n	100028ac <z_cbvprintf_impl+0x538>
			nj_len += 1U;
10002846:	3001      	adds	r0, #1
10002848:	e030      	b.n	100028ac <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
1000284a:	3863      	subs	r0, #99	; 0x63
1000284c:	2815      	cmp	r0, #21
1000284e:	d88f      	bhi.n	10002770 <z_cbvprintf_impl+0x3fc>
10002850:	f7fd fcb4 	bl	100001bc <__gnu_thumb1_case_shi>
10002854:	0068005e 	.word	0x0068005e
10002858:	ff8eff8e 	.word	0xff8eff8e
1000285c:	ff8eff8e 	.word	0xff8eff8e
10002860:	ff8e0068 	.word	0xff8e0068
10002864:	ff8eff8e 	.word	0xff8eff8e
10002868:	00a0ff8e 	.word	0x00a0ff8e
1000286c:	007c007a 	.word	0x007c007a
10002870:	ff8eff8e 	.word	0xff8eff8e
10002874:	ff8e001e 	.word	0xff8e001e
10002878:	ff8e007a 	.word	0xff8e007a
1000287c:	007aff8e 	.word	0x007aff8e
10002880:	ffff87fd 	.word	0xffff87fd
10002884:	00004002 	.word	0x00004002
10002888:	00000482 	.word	0x00000482
1000288c:	00000801 	.word	0x00000801
			if (precision >= 0) {
10002890:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10002892:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10002894:	2b00      	cmp	r3, #0
10002896:	db37      	blt.n	10002908 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10002898:	0019      	movs	r1, r3
1000289a:	0030      	movs	r0, r6
1000289c:	f003 f83d 	bl	1000591a <strnlen>
			bpe = bps + len;
100028a0:	1833      	adds	r3, r6, r0
		char sign = 0;
100028a2:	2500      	movs	r5, #0
			bpe = bps + len;
100028a4:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
100028a6:	2e00      	cmp	r6, #0
100028a8:	d100      	bne.n	100028ac <z_cbvprintf_impl+0x538>
100028aa:	e761      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
100028ac:	ab12      	add	r3, sp, #72	; 0x48
100028ae:	7a9b      	ldrb	r3, [r3, #10]
100028b0:	2210      	movs	r2, #16
100028b2:	0019      	movs	r1, r3
100028b4:	4011      	ands	r1, r2
100028b6:	910b      	str	r1, [sp, #44]	; 0x2c
100028b8:	4213      	tst	r3, r2
100028ba:	d100      	bne.n	100028be <z_cbvprintf_impl+0x54a>
100028bc:	e085      	b.n	100029ca <z_cbvprintf_impl+0x656>
			nj_len += 2U;
100028be:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
100028c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
100028c2:	920a      	str	r2, [sp, #40]	; 0x28
100028c4:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
100028c6:	065b      	lsls	r3, r3, #25
100028c8:	d501      	bpl.n	100028ce <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
100028ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
100028cc:	18c0      	adds	r0, r0, r3
		if (width > 0) {
100028ce:	9b03      	ldr	r3, [sp, #12]
100028d0:	2b00      	cmp	r3, #0
100028d2:	dc00      	bgt.n	100028d6 <z_cbvprintf_impl+0x562>
100028d4:	e094      	b.n	10002a00 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
100028d6:	1a1b      	subs	r3, r3, r0
100028d8:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
100028da:	ab12      	add	r3, sp, #72	; 0x48
100028dc:	7a1b      	ldrb	r3, [r3, #8]
100028de:	075a      	lsls	r2, r3, #29
100028e0:	0fd1      	lsrs	r1, r2, #31
100028e2:	9108      	str	r1, [sp, #32]
100028e4:	2a00      	cmp	r2, #0
100028e6:	da00      	bge.n	100028ea <z_cbvprintf_impl+0x576>
100028e8:	e08a      	b.n	10002a00 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
100028ea:	065b      	lsls	r3, r3, #25
100028ec:	d400      	bmi.n	100028f0 <z_cbvprintf_impl+0x57c>
100028ee:	e078      	b.n	100029e2 <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
100028f0:	2d00      	cmp	r5, #0
100028f2:	d007      	beq.n	10002904 <z_cbvprintf_impl+0x590>
						OUTC(sign);
100028f4:	0028      	movs	r0, r5
100028f6:	9905      	ldr	r1, [sp, #20]
100028f8:	9b04      	ldr	r3, [sp, #16]
100028fa:	4798      	blx	r3
100028fc:	2800      	cmp	r0, #0
100028fe:	db6e      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002900:	9d08      	ldr	r5, [sp, #32]
10002902:	3701      	adds	r7, #1
					pad = '0';
10002904:	2330      	movs	r3, #48	; 0x30
10002906:	e06d      	b.n	100029e4 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10002908:	0030      	movs	r0, r6
1000290a:	f002 fffe 	bl	1000590a <strlen>
1000290e:	e7c7      	b.n	100028a0 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10002910:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10002912:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002914:	ae0c      	add	r6, sp, #48	; 0x30
10002916:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10002918:	aa0a      	add	r2, sp, #40	; 0x28
1000291a:	189b      	adds	r3, r3, r2
		char sign = 0;
1000291c:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
1000291e:	2001      	movs	r0, #1
			bpe = buf + 1;
10002920:	9306      	str	r3, [sp, #24]
10002922:	e7c3      	b.n	100028ac <z_cbvprintf_impl+0x538>
				sign = '+';
10002924:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10002926:	071a      	lsls	r2, r3, #28
10002928:	d402      	bmi.n	10002930 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
1000292a:	06db      	lsls	r3, r3, #27
1000292c:	0fdb      	lsrs	r3, r3, #31
1000292e:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10002930:	9a12      	ldr	r2, [sp, #72]	; 0x48
10002932:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10002934:	2b00      	cmp	r3, #0
10002936:	db00      	blt.n	1000293a <z_cbvprintf_impl+0x5c6>
10002938:	e760      	b.n	100027fc <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
1000293a:	2100      	movs	r1, #0
1000293c:	4250      	negs	r0, r2
1000293e:	4199      	sbcs	r1, r3
				sign = '-';
10002940:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10002942:	9012      	str	r0, [sp, #72]	; 0x48
10002944:	9113      	str	r1, [sp, #76]	; 0x4c
10002946:	e759      	b.n	100027fc <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10002948:	2500      	movs	r5, #0
1000294a:	e757      	b.n	100027fc <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
1000294c:	9812      	ldr	r0, [sp, #72]	; 0x48
1000294e:	ad12      	add	r5, sp, #72	; 0x48
10002950:	2800      	cmp	r0, #0
10002952:	d034      	beq.n	100029be <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10002954:	231e      	movs	r3, #30
10002956:	aa0a      	add	r2, sp, #40	; 0x28
10002958:	189b      	adds	r3, r3, r2
1000295a:	9300      	str	r3, [sp, #0]
1000295c:	aa14      	add	r2, sp, #80	; 0x50
1000295e:	ab0c      	add	r3, sp, #48	; 0x30
10002960:	2100      	movs	r1, #0
10002962:	f002 fec3 	bl	100056ec <encode_uint>
				conv->altform_0c = true;
10002966:	23ef      	movs	r3, #239	; 0xef
10002968:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000296a:	0006      	movs	r6, r0
				conv->altform_0c = true;
1000296c:	401a      	ands	r2, r3
1000296e:	4b48      	ldr	r3, [pc, #288]	; (10002a90 <z_cbvprintf_impl+0x71c>)
10002970:	4313      	orrs	r3, r2
10002972:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10002974:	2500      	movs	r5, #0
			if (precision >= 0) {
10002976:	9b06      	ldr	r3, [sp, #24]
10002978:	42ab      	cmp	r3, r5
1000297a:	db00      	blt.n	1000297e <z_cbvprintf_impl+0x60a>
1000297c:	e74c      	b.n	10002818 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
1000297e:	42a8      	cmp	r0, r5
10002980:	d100      	bne.n	10002984 <z_cbvprintf_impl+0x610>
10002982:	e6f5      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10002984:	231e      	movs	r3, #30
10002986:	aa0a      	add	r2, sp, #40	; 0x28
10002988:	189b      	adds	r3, r3, r2
1000298a:	1a18      	subs	r0, r3, r0
1000298c:	231e      	movs	r3, #30
1000298e:	189b      	adds	r3, r3, r2
10002990:	9306      	str	r3, [sp, #24]
10002992:	e78b      	b.n	100028ac <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10002994:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10002996:	2a07      	cmp	r2, #7
10002998:	d900      	bls.n	1000299c <z_cbvprintf_impl+0x628>
1000299a:	e6e9      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
1000299c:	0010      	movs	r0, r2
1000299e:	f7fd fc03 	bl	100001a8 <__gnu_thumb1_case_uqi>
100029a2:	040c      	.short	0x040c
100029a4:	08080c06 	.word	0x08080c06
100029a8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
100029aa:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
100029ac:	e6e0      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
100029ae:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
100029b0:	e6de      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
100029b2:	17fa      	asrs	r2, r7, #31
100029b4:	601f      	str	r7, [r3, #0]
100029b6:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
100029b8:	e6da      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
100029ba:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
100029bc:	e6d8      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
100029be:	4b35      	ldr	r3, [pc, #212]	; (10002a94 <z_cbvprintf_impl+0x720>)
		char sign = 0;
100029c0:	0005      	movs	r5, r0
100029c2:	4e35      	ldr	r6, [pc, #212]	; (10002a98 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
100029c4:	2005      	movs	r0, #5
			bpe = bps + 5;
100029c6:	9306      	str	r3, [sp, #24]
100029c8:	e770      	b.n	100028ac <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
100029ca:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
100029cc:	0fd2      	lsrs	r2, r2, #31
100029ce:	1880      	adds	r0, r0, r2
100029d0:	e776      	b.n	100028c0 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
100029d2:	9905      	ldr	r1, [sp, #20]
100029d4:	9809      	ldr	r0, [sp, #36]	; 0x24
100029d6:	9b04      	ldr	r3, [sp, #16]
100029d8:	4798      	blx	r3
100029da:	2800      	cmp	r0, #0
100029dc:	da05      	bge.n	100029ea <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
100029de:	b019      	add	sp, #100	; 0x64
100029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
100029e2:	2320      	movs	r3, #32
					pad = '0';
100029e4:	9309      	str	r3, [sp, #36]	; 0x24
100029e6:	9b03      	ldr	r3, [sp, #12]
100029e8:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
100029ea:	9b08      	ldr	r3, [sp, #32]
100029ec:	001a      	movs	r2, r3
100029ee:	3a01      	subs	r2, #1
100029f0:	9208      	str	r2, [sp, #32]
100029f2:	2b00      	cmp	r3, #0
100029f4:	dced      	bgt.n	100029d2 <z_cbvprintf_impl+0x65e>
100029f6:	9a03      	ldr	r2, [sp, #12]
100029f8:	19d7      	adds	r7, r2, r7
100029fa:	1aff      	subs	r7, r7, r3
100029fc:	9b08      	ldr	r3, [sp, #32]
100029fe:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10002a00:	2d00      	cmp	r5, #0
10002a02:	d006      	beq.n	10002a12 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10002a04:	0028      	movs	r0, r5
10002a06:	9905      	ldr	r1, [sp, #20]
10002a08:	9b04      	ldr	r3, [sp, #16]
10002a0a:	4798      	blx	r3
10002a0c:	2800      	cmp	r0, #0
10002a0e:	dbe6      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a10:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10002a12:	ab12      	add	r3, sp, #72	; 0x48
10002a14:	7a9b      	ldrb	r3, [r3, #10]
10002a16:	06da      	lsls	r2, r3, #27
10002a18:	d401      	bmi.n	10002a1e <z_cbvprintf_impl+0x6aa>
10002a1a:	071b      	lsls	r3, r3, #28
10002a1c:	d506      	bpl.n	10002a2c <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10002a1e:	2030      	movs	r0, #48	; 0x30
10002a20:	9905      	ldr	r1, [sp, #20]
10002a22:	9b04      	ldr	r3, [sp, #16]
10002a24:	4798      	blx	r3
10002a26:	2800      	cmp	r0, #0
10002a28:	dbd9      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a2a:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10002a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002a2e:	2b00      	cmp	r3, #0
10002a30:	d007      	beq.n	10002a42 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10002a32:	ab12      	add	r3, sp, #72	; 0x48
10002a34:	7ad8      	ldrb	r0, [r3, #11]
10002a36:	9905      	ldr	r1, [sp, #20]
10002a38:	9b04      	ldr	r3, [sp, #16]
10002a3a:	4798      	blx	r3
10002a3c:	2800      	cmp	r0, #0
10002a3e:	dbce      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a40:	3701      	adds	r7, #1
				while (width-- > 0) {
10002a42:	003d      	movs	r5, r7
10002a44:	e006      	b.n	10002a54 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10002a46:	2030      	movs	r0, #48	; 0x30
10002a48:	9905      	ldr	r1, [sp, #20]
10002a4a:	9b04      	ldr	r3, [sp, #16]
10002a4c:	4798      	blx	r3
10002a4e:	2800      	cmp	r0, #0
10002a50:	dbc5      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a52:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10002a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002a56:	19db      	adds	r3, r3, r7
10002a58:	1b5b      	subs	r3, r3, r5
10002a5a:	2b00      	cmp	r3, #0
10002a5c:	dcf3      	bgt.n	10002a46 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10002a5e:	0032      	movs	r2, r6
10002a60:	9b06      	ldr	r3, [sp, #24]
10002a62:	9905      	ldr	r1, [sp, #20]
10002a64:	9804      	ldr	r0, [sp, #16]
10002a66:	f002 fe8e 	bl	10005786 <outs>
10002a6a:	2800      	cmp	r0, #0
10002a6c:	dbb7      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a6e:	1947      	adds	r7, r0, r5
10002a70:	003d      	movs	r5, r7
		while (width > 0) {
10002a72:	9b03      	ldr	r3, [sp, #12]
10002a74:	195b      	adds	r3, r3, r5
10002a76:	1bdb      	subs	r3, r3, r7
10002a78:	2b00      	cmp	r3, #0
10002a7a:	dc00      	bgt.n	10002a7e <z_cbvprintf_impl+0x70a>
10002a7c:	e678      	b.n	10002770 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10002a7e:	2020      	movs	r0, #32
10002a80:	9905      	ldr	r1, [sp, #20]
10002a82:	9b04      	ldr	r3, [sp, #16]
10002a84:	4798      	blx	r3
10002a86:	2800      	cmp	r0, #0
10002a88:	dba9      	blt.n	100029de <z_cbvprintf_impl+0x66a>
10002a8a:	3701      	adds	r7, #1
			--width;
10002a8c:	e7f1      	b.n	10002a72 <z_cbvprintf_impl+0x6fe>
10002a8e:	46c0      	nop			; (mov r8, r8)
10002a90:	00007810 	.word	0x00007810
10002a94:	1000682c 	.word	0x1000682c
10002a98:	10006827 	.word	0x10006827

10002a9c <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
10002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a9e:	b085      	sub	sp, #20
10002aa0:	9001      	str	r0, [sp, #4]
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
10002aa2:	482f      	ldr	r0, [pc, #188]	; (10002b60 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
10002aa4:	9103      	str	r1, [sp, #12]
	if (atomic_inc(&initialized) != 0) {
10002aa6:	f002 fe8f 	bl	100057c8 <atomic_inc>
10002aaa:	1e06      	subs	r6, r0, #0
10002aac:	d10a      	bne.n	10002ac4 <z_log_init.isra.0+0x28>
	uint32_t mask = 0;
10002aae:	0004      	movs	r4, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
10002ab0:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002ab2:	4d2c      	ldr	r5, [pc, #176]	; (10002b64 <z_log_init.isra.0+0xc8>)
10002ab4:	4b2c      	ldr	r3, [pc, #176]	; (10002b68 <z_log_init.isra.0+0xcc>)
10002ab6:	429d      	cmp	r5, r3
10002ab8:	d306      	bcc.n	10002ac8 <z_log_init.isra.0+0x2c>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
10002aba:	9b01      	ldr	r3, [sp, #4]
10002abc:	2b00      	cmp	r3, #0
10002abe:	d001      	beq.n	10002ac4 <z_log_init.isra.0+0x28>
		while (mask) {
10002ac0:	2c00      	cmp	r4, #0
10002ac2:	d11f      	bne.n	10002b04 <z_log_init.isra.0+0x68>
			}
		}
	}

	return mask;
}
10002ac4:	b005      	add	sp, #20
10002ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (backend->autostart) {
10002ac8:	7b2b      	ldrb	r3, [r5, #12]
10002aca:	2b00      	cmp	r3, #0
10002acc:	d010      	beq.n	10002af0 <z_log_init.isra.0+0x54>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
10002ace:	682b      	ldr	r3, [r5, #0]
10002ad0:	68db      	ldr	r3, [r3, #12]
10002ad2:	2b00      	cmp	r3, #0
10002ad4:	d001      	beq.n	10002ada <z_log_init.isra.0+0x3e>
		backend->api->init(backend);
10002ad6:	0028      	movs	r0, r5
10002ad8:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
10002ada:	682b      	ldr	r3, [r5, #0]
10002adc:	691b      	ldr	r3, [r3, #16]
10002ade:	2b00      	cmp	r3, #0
10002ae0:	d108      	bne.n	10002af4 <z_log_init.isra.0+0x58>
				log_backend_enable(backend,
10002ae2:	686b      	ldr	r3, [r5, #4]
10002ae4:	2204      	movs	r2, #4
10002ae6:	0028      	movs	r0, r5
10002ae8:	6819      	ldr	r1, [r3, #0]
10002aea:	f000 f8c5 	bl	10002c78 <log_backend_enable>
			i++;
10002aee:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002af0:	3510      	adds	r5, #16
10002af2:	e7df      	b.n	10002ab4 <z_log_init.isra.0+0x18>
		return backend->api->is_ready(backend);
10002af4:	0028      	movs	r0, r5
10002af6:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
10002af8:	2800      	cmp	r0, #0
10002afa:	d0f2      	beq.n	10002ae2 <z_log_init.isra.0+0x46>
				mask |= BIT(i);
10002afc:	003b      	movs	r3, r7
10002afe:	40b3      	lsls	r3, r6
10002b00:	431c      	orrs	r4, r3
10002b02:	e7f4      	b.n	10002aee <z_log_init.isra.0+0x52>
10002b04:	0027      	movs	r7, r4
		uint32_t i = __builtin_ctz(mask_cpy);
10002b06:	0020      	movs	r0, r4
10002b08:	f7fd fc5a 	bl	100003c0 <__ctzsi2>
		mask_cpy &= ~BIT(i);
10002b0c:	2301      	movs	r3, #1
10002b0e:	4083      	lsls	r3, r0
10002b10:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b12:	4e14      	ldr	r6, [pc, #80]	; (10002b64 <z_log_init.isra.0+0xc8>)
10002b14:	0105      	lsls	r5, r0, #4
		mask_cpy &= ~BIT(i);
10002b16:	439c      	bics	r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b18:	1973      	adds	r3, r6, r5
10002b1a:	9301      	str	r3, [sp, #4]
10002b1c:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
10002b1e:	9202      	str	r2, [sp, #8]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b20:	2b00      	cmp	r3, #0
10002b22:	d00c      	beq.n	10002b3e <z_log_init.isra.0+0xa2>
	if (backend->api->is_ready != NULL) {
10002b24:	59ab      	ldr	r3, [r5, r6]
10002b26:	691b      	ldr	r3, [r3, #16]
10002b28:	2b00      	cmp	r3, #0
10002b2a:	d113      	bne.n	10002b54 <z_log_init.isra.0+0xb8>
			mask &= ~BIT(i);
10002b2c:	9b02      	ldr	r3, [sp, #8]
					   backend->cb->ctx,
10002b2e:	1976      	adds	r6, r6, r5
			mask &= ~BIT(i);
10002b30:	401f      	ands	r7, r3
			log_backend_enable(backend,
10002b32:	6873      	ldr	r3, [r6, #4]
10002b34:	2204      	movs	r2, #4
10002b36:	6819      	ldr	r1, [r3, #0]
10002b38:	9801      	ldr	r0, [sp, #4]
10002b3a:	f000 f89d 	bl	10002c78 <log_backend_enable>
	while (mask_cpy) {
10002b3e:	2c00      	cmp	r4, #0
10002b40:	d1e1      	bne.n	10002b06 <z_log_init.isra.0+0x6a>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
10002b42:	9b03      	ldr	r3, [sp, #12]
10002b44:	2b00      	cmp	r3, #0
10002b46:	d003      	beq.n	10002b50 <z_log_init.isra.0+0xb4>
10002b48:	2064      	movs	r0, #100	; 0x64
10002b4a:	2100      	movs	r1, #0
10002b4c:	f002 f91c 	bl	10004d88 <z_impl_k_sleep>
10002b50:	003c      	movs	r4, r7
10002b52:	e7b5      	b.n	10002ac0 <z_log_init.isra.0+0x24>
		return backend->api->is_ready(backend);
10002b54:	9801      	ldr	r0, [sp, #4]
10002b56:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10002b58:	2800      	cmp	r0, #0
10002b5a:	d1f0      	bne.n	10002b3e <z_log_init.isra.0+0xa2>
10002b5c:	e7e6      	b.n	10002b2c <z_log_init.isra.0+0x90>
10002b5e:	46c0      	nop			; (mov r8, r8)
10002b60:	200002b8 	.word	0x200002b8
10002b64:	100064cc 	.word	0x100064cc
10002b68:	100064dc 	.word	0x100064dc

10002b6c <log_format_func_t_get>:
	return format_table[log_type];
10002b6c:	4b01      	ldr	r3, [pc, #4]	; (10002b74 <log_format_func_t_get+0x8>)
10002b6e:	0080      	lsls	r0, r0, #2
10002b70:	58c0      	ldr	r0, [r0, r3]
}
10002b72:	4770      	bx	lr
10002b74:	100064ec 	.word	0x100064ec

10002b78 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
10002b78:	0003      	movs	r3, r0
10002b7a:	b510      	push	{r4, lr}
10002b7c:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
10002b7e:	2b00      	cmp	r3, #0
10002b80:	d005      	beq.n	10002b8e <log_set_timestamp_func+0x16>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
10002b82:	4a04      	ldr	r2, [pc, #16]	; (10002b94 <log_set_timestamp_func+0x1c>)
10002b84:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
10002b86:	f000 fa75 	bl	10003074 <log_output_timestamp_freq_set>
	}

	return 0;
10002b8a:	2000      	movs	r0, #0
}
10002b8c:	bd10      	pop	{r4, pc}
		return -EINVAL;
10002b8e:	2016      	movs	r0, #22
10002b90:	4240      	negs	r0, r0
10002b92:	e7fb      	b.n	10002b8c <log_set_timestamp_func+0x14>
10002b94:	200000bc 	.word	0x200000bc

10002b98 <log_core_init>:
	panic_mode = false;
10002b98:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002b9a:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
10002b9c:	4a05      	ldr	r2, [pc, #20]	; (10002bb4 <log_core_init+0x1c>)
{
10002b9e:	b510      	push	{r4, lr}
	panic_mode = false;
10002ba0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
10002ba2:	4a05      	ldr	r2, [pc, #20]	; (10002bb8 <log_core_init+0x20>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002ba4:	4805      	ldr	r0, [pc, #20]	; (10002bbc <log_core_init+0x24>)
	dropped_cnt = 0;
10002ba6:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
10002ba8:	4a05      	ldr	r2, [pc, #20]	; (10002bc0 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002baa:	0089      	lsls	r1, r1, #2
	buffered_cnt = 0;
10002bac:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10002bae:	f7ff ffe3 	bl	10002b78 <log_set_timestamp_func>
}
10002bb2:	bd10      	pop	{r4, pc}
10002bb4:	20000368 	.word	0x20000368
10002bb8:	200002b0 	.word	0x200002b0
10002bbc:	100057b9 	.word	0x100057b9
10002bc0:	200002b4 	.word	0x200002b4

10002bc4 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
10002bc4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
10002bc6:	4d0c      	ldr	r5, [pc, #48]	; (10002bf8 <z_impl_log_panic+0x34>)
10002bc8:	7829      	ldrb	r1, [r5, #0]
10002bca:	2900      	cmp	r1, #0
10002bcc:	d108      	bne.n	10002be0 <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
10002bce:	2001      	movs	r0, #1
10002bd0:	f7ff ff64 	bl	10002a9c <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002bd4:	4c09      	ldr	r4, [pc, #36]	; (10002bfc <z_impl_log_panic+0x38>)
10002bd6:	4b0a      	ldr	r3, [pc, #40]	; (10002c00 <z_impl_log_panic+0x3c>)
10002bd8:	429c      	cmp	r4, r3
10002bda:	d302      	bcc.n	10002be2 <z_impl_log_panic+0x1e>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
10002bdc:	2301      	movs	r3, #1
10002bde:	702b      	strb	r3, [r5, #0]
}
10002be0:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
10002be2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
10002be4:	795b      	ldrb	r3, [r3, #5]
10002be6:	2b00      	cmp	r3, #0
10002be8:	d003      	beq.n	10002bf2 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
10002bea:	6823      	ldr	r3, [r4, #0]
10002bec:	0020      	movs	r0, r4
10002bee:	689b      	ldr	r3, [r3, #8]
10002bf0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002bf2:	3410      	adds	r4, #16
10002bf4:	e7ef      	b.n	10002bd6 <z_impl_log_panic+0x12>
10002bf6:	46c0      	nop			; (mov r8, r8)
10002bf8:	20000368 	.word	0x20000368
10002bfc:	100064cc 	.word	0x100064cc
10002c00:	100064dc 	.word	0x100064dc

10002c04 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
10002c04:	b510      	push	{r4, lr}
10002c06:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
10002c08:	4804      	ldr	r0, [pc, #16]	; (10002c1c <z_log_dropped+0x18>)
10002c0a:	f002 fddd 	bl	100057c8 <atomic_inc>
	if (buffered) {
10002c0e:	2c00      	cmp	r4, #0
10002c10:	d003      	beq.n	10002c1a <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
10002c12:	2101      	movs	r1, #1
10002c14:	4802      	ldr	r0, [pc, #8]	; (10002c20 <z_log_dropped+0x1c>)
10002c16:	f003 fb06 	bl	10006226 <z_impl_atomic_sub>
		atomic_dec(&buffered_cnt);
	}
}
10002c1a:	bd10      	pop	{r4, pc}
10002c1c:	200002b0 	.word	0x200002b0
10002c20:	200002b4 	.word	0x200002b4

10002c24 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
10002c24:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
10002c26:	4b0a      	ldr	r3, [pc, #40]	; (10002c50 <z_log_msg_commit+0x2c>)
{
10002c28:	0005      	movs	r5, r0
	msg->hdr.timestamp = timestamp_func();
10002c2a:	681b      	ldr	r3, [r3, #0]
10002c2c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c2e:	4c09      	ldr	r4, [pc, #36]	; (10002c54 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
10002c30:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c32:	4b09      	ldr	r3, [pc, #36]	; (10002c58 <z_log_msg_commit+0x34>)
10002c34:	429c      	cmp	r4, r3
10002c36:	d300      	bcc.n	10002c3a <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
10002c38:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
10002c3a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
10002c3c:	795b      	ldrb	r3, [r3, #5]
10002c3e:	2b00      	cmp	r3, #0
10002c40:	d004      	beq.n	10002c4c <z_log_msg_commit+0x28>
	backend->api->process(backend, msg);
10002c42:	6823      	ldr	r3, [r4, #0]
10002c44:	0029      	movs	r1, r5
10002c46:	0020      	movs	r0, r4
10002c48:	681b      	ldr	r3, [r3, #0]
10002c4a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10002c4c:	3410      	adds	r4, #16
10002c4e:	e7f0      	b.n	10002c32 <z_log_msg_commit+0xe>
10002c50:	200000bc 	.word	0x200000bc
10002c54:	100064cc 	.word	0x100064cc
10002c58:	100064dc 	.word	0x100064dc

10002c5c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10002c5c:	4b04      	ldr	r3, [pc, #16]	; (10002c70 <log_source_name_get+0x14>)
10002c5e:	4a05      	ldr	r2, [pc, #20]	; (10002c74 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10002c60:	2000      	movs	r0, #0
10002c62:	1a9b      	subs	r3, r3, r2
10002c64:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10002c66:	4299      	cmp	r1, r3
10002c68:	d201      	bcs.n	10002c6e <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10002c6a:	00c9      	lsls	r1, r1, #3
10002c6c:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10002c6e:	4770      	bx	lr
10002c70:	100064cc 	.word	0x100064cc
10002c74:	1000648c 	.word	0x1000648c

10002c78 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10002c78:	4b08      	ldr	r3, [pc, #32]	; (10002c9c <log_backend_enable+0x24>)
{
10002c7a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10002c7c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10002c7e:	6844      	ldr	r4, [r0, #4]
10002c80:	111b      	asrs	r3, r3, #4
10002c82:	3301      	adds	r3, #1
10002c84:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10002c86:	6843      	ldr	r3, [r0, #4]
10002c88:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10002c8a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10002c8c:	6843      	ldr	r3, [r0, #4]
10002c8e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10002c90:	6843      	ldr	r3, [r0, #4]
10002c92:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10002c94:	f002 fdb1 	bl	100057fa <z_log_notify_backend_enabled>
}
10002c98:	bd10      	pop	{r4, pc}
10002c9a:	46c0      	nop			; (mov r8, r8)
10002c9c:	100064cc 	.word	0x100064cc

10002ca0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ca2:	0004      	movs	r4, r0
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10002ca4:	2000      	movs	r0, #0
{
10002ca6:	b087      	sub	sp, #28
10002ca8:	af02      	add	r7, sp, #8
10002caa:	607b      	str	r3, [r7, #4]
	if (fmt) {
10002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
{
10002cae:	000e      	movs	r6, r1
10002cb0:	0015      	movs	r5, r2
	if (fmt) {
10002cb2:	4283      	cmp	r3, r0
10002cb4:	d007      	beq.n	10002cc6 <z_impl_z_log_msg_runtime_vcreate+0x26>
		va_copy(ap2, ap);
10002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10002cb8:	2110      	movs	r1, #16
		va_copy(ap2, ap);
10002cba:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10002cbc:	9300      	str	r3, [sp, #0]
10002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002cc2:	f7ff f969 	bl	10001f98 <cbvprintf_package>
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10002cc6:	2207      	movs	r2, #7
10002cc8:	0023      	movs	r3, r4
10002cca:	4015      	ands	r5, r2
10002ccc:	4013      	ands	r3, r2
10002cce:	00db      	lsls	r3, r3, #3
10002cd0:	4915      	ldr	r1, [pc, #84]	; (10002d28 <z_impl_z_log_msg_runtime_vcreate+0x88>)
10002cd2:	01ad      	lsls	r5, r5, #6
10002cd4:	431d      	orrs	r5, r3
10002cd6:	0243      	lsls	r3, r0, #9
10002cd8:	400b      	ands	r3, r1
10002cda:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002cdc:	6abc      	ldr	r4, [r7, #40]	; 0x28
	struct log_msg_desc desc =
10002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002ce0:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10002ce2:	051b      	lsls	r3, r3, #20
10002ce4:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10002ce6:	1823      	adds	r3, r4, r0
10002ce8:	4393      	bics	r3, r2
10002cea:	3303      	adds	r3, #3
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
10002cec:	3a04      	subs	r2, #4
10002cee:	4393      	bics	r3, r2
10002cf0:	3307      	adds	r3, #7
10002cf2:	40d3      	lsrs	r3, r2
10002cf4:	4093      	lsls	r3, r2
10002cf6:	466a      	mov	r2, sp
10002cf8:	1ad3      	subs	r3, r2, r3
10002cfa:	469d      	mov	sp, r3
		pkg = msg->data;
	}

	if (pkg && fmt) {
10002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		msg = alloca(msg_wlen * sizeof(int));
10002cfe:	ac02      	add	r4, sp, #8
	if (pkg && fmt) {
10002d00:	2b00      	cmp	r3, #0
10002d02:	d008      	beq.n	10002d16 <z_impl_z_log_msg_runtime_vcreate+0x76>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
10002d04:	0001      	movs	r1, r0
10002d06:	0020      	movs	r0, r4
10002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002d0a:	3010      	adds	r0, #16
10002d0c:	9300      	str	r3, [sp, #0]
10002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002d12:	f7ff f941 	bl	10001f98 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
10002d16:	002a      	movs	r2, r5
10002d18:	0031      	movs	r1, r6
10002d1a:	0020      	movs	r0, r4
10002d1c:	687b      	ldr	r3, [r7, #4]
10002d1e:	f002 fd6f 	bl	10005800 <z_log_msg_finalize>
	}
}
10002d22:	46bd      	mov	sp, r7
10002d24:	b005      	add	sp, #20
10002d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002d28:	000ffe00 	.word	0x000ffe00

10002d2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
10002d2c:	b40e      	push	{r1, r2, r3}
10002d2e:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d30:	4c05      	ldr	r4, [pc, #20]	; (10002d48 <print_formatted+0x1c>)
{
10002d32:	ab05      	add	r3, sp, #20
10002d34:	cb04      	ldmia	r3!, {r2}
10002d36:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d38:	0020      	movs	r0, r4
	va_start(args, fmt);
10002d3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
10002d3c:	f002 fda1 	bl	10005882 <cbvprintf>
	va_end(args);

	return length;
}
10002d40:	bc1e      	pop	{r1, r2, r3, r4}
10002d42:	bc08      	pop	{r3}
10002d44:	b003      	add	sp, #12
10002d46:	4718      	bx	r3
10002d48:	10005833 	.word	0x10005833

10002d4c <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10002d4c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10002d4e:	06cb      	lsls	r3, r1, #27
10002d50:	d404      	bmi.n	10002d5c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
10002d52:	0689      	lsls	r1, r1, #26
10002d54:	d503      	bpl.n	10002d5e <newline_print+0x12>
		print_formatted(ctx, "\n");
10002d56:	4903      	ldr	r1, [pc, #12]	; (10002d64 <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10002d58:	f7ff ffe8 	bl	10002d2c <print_formatted>
	}
}
10002d5c:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10002d5e:	4902      	ldr	r1, [pc, #8]	; (10002d68 <newline_print+0x1c>)
10002d60:	e7fa      	b.n	10002d58 <newline_print+0xc>
10002d62:	46c0      	nop			; (mov r8, r8)
10002d64:	1000683b 	.word	0x1000683b
10002d68:	1000683a 	.word	0x1000683a

10002d6c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d6e:	b08f      	sub	sp, #60	; 0x3c
10002d70:	9306      	str	r3, [sp, #24]
10002d72:	ab14      	add	r3, sp, #80	; 0x50
10002d74:	781b      	ldrb	r3, [r3, #0]
10002d76:	0007      	movs	r7, r0
10002d78:	000c      	movs	r4, r1
10002d7a:	9208      	str	r2, [sp, #32]
10002d7c:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10002d7e:	2b00      	cmp	r3, #0
10002d80:	d100      	bne.n	10002d84 <log_output_process+0x18>
10002d82:	e09c      	b.n	10002ebe <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002d84:	2502      	movs	r5, #2
10002d86:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002d88:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10002d8a:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10002d8c:	2301      	movs	r3, #1
10002d8e:	401a      	ands	r2, r3
10002d90:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10002d92:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002d94:	3307      	adds	r3, #7
10002d96:	401a      	ands	r2, r3
10002d98:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10002d9a:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10002d9c:	f002 fd2e 	bl	100057fc <z_log_get_tag>
10002da0:	0002      	movs	r2, r0
	if (tag) {
10002da2:	42b0      	cmp	r0, r6
10002da4:	d004      	beq.n	10002db0 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10002da6:	0038      	movs	r0, r7
10002da8:	4983      	ldr	r1, [pc, #524]	; (10002fb8 <log_output_process+0x24c>)
10002daa:	f7ff ffbf 	bl	10002d2c <print_formatted>
10002dae:	0006      	movs	r6, r0
	if (stamp) {
10002db0:	2d00      	cmp	r5, #0
10002db2:	d009      	beq.n	10002dc8 <log_output_process+0x5c>
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
10002db4:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10002db6:	9a18      	ldr	r2, [sp, #96]	; 0x60
10002db8:	421a      	tst	r2, r3
10002dba:	d144      	bne.n	10002e46 <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10002dbc:	0022      	movs	r2, r4
10002dbe:	0038      	movs	r0, r7
10002dc0:	497e      	ldr	r1, [pc, #504]	; (10002fbc <log_output_process+0x250>)
10002dc2:	f7ff ffb3 	bl	10002d2c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10002dc6:	1836      	adds	r6, r6, r0
	if (color) {
10002dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002dca:	2b00      	cmp	r3, #0
10002dcc:	d00a      	beq.n	10002de4 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10002dce:	9a05      	ldr	r2, [sp, #20]
10002dd0:	4b7b      	ldr	r3, [pc, #492]	; (10002fc0 <log_output_process+0x254>)
10002dd2:	0092      	lsls	r2, r2, #2
10002dd4:	58d2      	ldr	r2, [r2, r3]
10002dd6:	2a00      	cmp	r2, #0
10002dd8:	d100      	bne.n	10002ddc <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10002dda:	4a7a      	ldr	r2, [pc, #488]	; (10002fc4 <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10002ddc:	0038      	movs	r0, r7
10002dde:	497a      	ldr	r1, [pc, #488]	; (10002fc8 <log_output_process+0x25c>)
10002de0:	f7ff ffa4 	bl	10002d2c <print_formatted>
	int total = 0;
10002de4:	2400      	movs	r4, #0
	if (level_on) {
10002de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002de8:	42a3      	cmp	r3, r4
10002dea:	d008      	beq.n	10002dfe <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10002dec:	9a05      	ldr	r2, [sp, #20]
10002dee:	4b77      	ldr	r3, [pc, #476]	; (10002fcc <log_output_process+0x260>)
10002df0:	0092      	lsls	r2, r2, #2
10002df2:	0038      	movs	r0, r7
10002df4:	4976      	ldr	r1, [pc, #472]	; (10002fd0 <log_output_process+0x264>)
10002df6:	58d2      	ldr	r2, [r2, r3]
10002df8:	f7ff ff98 	bl	10002d2c <print_formatted>
10002dfc:	0004      	movs	r4, r0
	if (domain) {
10002dfe:	9b08      	ldr	r3, [sp, #32]
10002e00:	2b00      	cmp	r3, #0
10002e02:	d005      	beq.n	10002e10 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10002e04:	001a      	movs	r2, r3
10002e06:	0038      	movs	r0, r7
10002e08:	4972      	ldr	r1, [pc, #456]	; (10002fd4 <log_output_process+0x268>)
10002e0a:	f7ff ff8f 	bl	10002d2c <print_formatted>
10002e0e:	1824      	adds	r4, r4, r0
	if (source) {
10002e10:	9b06      	ldr	r3, [sp, #24]
10002e12:	2b00      	cmp	r3, #0
10002e14:	d005      	beq.n	10002e22 <log_output_process+0xb6>
		total += print_formatted(output,
10002e16:	001a      	movs	r2, r3
10002e18:	0038      	movs	r0, r7
10002e1a:	496f      	ldr	r1, [pc, #444]	; (10002fd8 <log_output_process+0x26c>)
10002e1c:	f7ff ff86 	bl	10002d2c <print_formatted>
10002e20:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10002e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10002e24:	486d      	ldr	r0, [pc, #436]	; (10002fdc <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10002e26:	19a4      	adds	r4, r4, r6
	if (package) {
10002e28:	2b00      	cmp	r3, #0
10002e2a:	d000      	beq.n	10002e2e <log_output_process+0xc2>
10002e2c:	e09b      	b.n	10002f66 <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10002e2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002e30:	2b00      	cmp	r3, #0
10002e32:	d151      	bne.n	10002ed8 <log_output_process+0x16c>
	if (color) {
10002e34:	9b18      	ldr	r3, [sp, #96]	; 0x60
10002e36:	07db      	lsls	r3, r3, #31
10002e38:	d500      	bpl.n	10002e3c <log_output_process+0xd0>
10002e3a:	e0b7      	b.n	10002fac <log_output_process+0x240>
	newline_print(output, flags);
10002e3c:	0038      	movs	r0, r7
10002e3e:	9918      	ldr	r1, [sp, #96]	; 0x60
10002e40:	f7ff ff84 	bl	10002d4c <newline_print>
}
10002e44:	e09b      	b.n	10002f7e <log_output_process+0x212>
		length = 0;
10002e46:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10002e48:	4b65      	ldr	r3, [pc, #404]	; (10002fe0 <log_output_process+0x274>)
10002e4a:	681d      	ldr	r5, [r3, #0]
10002e4c:	4285      	cmp	r5, r0
10002e4e:	d0ba      	beq.n	10002dc6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
10002e50:	4b64      	ldr	r3, [pc, #400]	; (10002fe4 <log_output_process+0x278>)
10002e52:	0020      	movs	r0, r4
10002e54:	6819      	ldr	r1, [r3, #0]
10002e56:	f7fd f9bb 	bl	100001d0 <__udivsi3>
10002e5a:	0029      	movs	r1, r5
10002e5c:	f7fd f9f4 	bl	10000248 <__aeabi_uidivmod>
10002e60:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10002e62:	21e1      	movs	r1, #225	; 0xe1
10002e64:	0109      	lsls	r1, r1, #4
10002e66:	9007      	str	r0, [sp, #28]
10002e68:	f7fd f9ee 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10002e6c:	20fa      	movs	r0, #250	; 0xfa
10002e6e:	0080      	lsls	r0, r0, #2
10002e70:	9109      	str	r1, [sp, #36]	; 0x24
10002e72:	4360      	muls	r0, r4
10002e74:	0029      	movs	r1, r5
10002e76:	f7fd f9e7 	bl	10000248 <__aeabi_uidivmod>
10002e7a:	000c      	movs	r4, r1
				length = print_formatted(output,
10002e7c:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10002e7e:	213c      	movs	r1, #60	; 0x3c
10002e80:	9809      	ldr	r0, [sp, #36]	; 0x24
10002e82:	f7fd f9a5 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10002e86:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10002e88:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10002e8a:	0109      	lsls	r1, r1, #4
10002e8c:	9807      	ldr	r0, [sp, #28]
10002e8e:	f7fd f99f 	bl	100001d0 <__udivsi3>
10002e92:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10002e94:	20fa      	movs	r0, #250	; 0xfa
10002e96:	0080      	lsls	r0, r0, #2
10002e98:	0029      	movs	r1, r5
10002e9a:	4360      	muls	r0, r4
10002e9c:	f7fd f998 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10002ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002ea2:	9002      	str	r0, [sp, #8]
10002ea4:	213c      	movs	r1, #60	; 0x3c
10002ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
10002ea8:	9301      	str	r3, [sp, #4]
10002eaa:	f7fd f9cd 	bl	10000248 <__aeabi_uidivmod>
10002eae:	0038      	movs	r0, r7
10002eb0:	9100      	str	r1, [sp, #0]
10002eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002eb4:	9a07      	ldr	r2, [sp, #28]
10002eb6:	494c      	ldr	r1, [pc, #304]	; (10002fe8 <log_output_process+0x27c>)
10002eb8:	f7ff ff38 	bl	10002d2c <print_formatted>
10002ebc:	e783      	b.n	10002dc6 <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10002ebe:	9b06      	ldr	r3, [sp, #24]
10002ec0:	484a      	ldr	r0, [pc, #296]	; (10002fec <log_output_process+0x280>)
10002ec2:	2b01      	cmp	r3, #1
10002ec4:	d100      	bne.n	10002ec8 <log_output_process+0x15c>
10002ec6:	4845      	ldr	r0, [pc, #276]	; (10002fdc <log_output_process+0x270>)
	if (package) {
10002ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10002eca:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10002ecc:	2b00      	cmp	r3, #0
10002ece:	d14a      	bne.n	10002f66 <log_output_process+0x1fa>
	if (data_len) {
10002ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002ed2:	2b00      	cmp	r3, #0
10002ed4:	d053      	beq.n	10002f7e <log_output_process+0x212>
		prefix_offset = 0;
10002ed6:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10002ed8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10002eda:	2e10      	cmp	r6, #16
10002edc:	d900      	bls.n	10002ee0 <log_output_process+0x174>
10002ede:	2610      	movs	r6, #16
	newline_print(output, flags);
10002ee0:	0038      	movs	r0, r7
10002ee2:	9918      	ldr	r1, [sp, #96]	; 0x60
10002ee4:	f7ff ff32 	bl	10002d4c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10002ee8:	2500      	movs	r5, #0
10002eea:	42ac      	cmp	r4, r5
10002eec:	dc4c      	bgt.n	10002f88 <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
10002eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002ef0:	0038      	movs	r0, r7
10002ef2:	781a      	ldrb	r2, [r3, #0]
10002ef4:	493e      	ldr	r1, [pc, #248]	; (10002ff0 <log_output_process+0x284>)
10002ef6:	f7ff ff19 	bl	10002d2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002efa:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
10002efc:	2307      	movs	r3, #7
10002efe:	421d      	tst	r5, r3
10002f00:	d103      	bne.n	10002f0a <log_output_process+0x19e>
			print_formatted(output, " ");
10002f02:	0038      	movs	r0, r7
10002f04:	493b      	ldr	r1, [pc, #236]	; (10002ff4 <log_output_process+0x288>)
10002f06:	f7ff ff11 	bl	10002d2c <print_formatted>
		if (i < length) {
10002f0a:	42ae      	cmp	r6, r5
10002f0c:	d942      	bls.n	10002f94 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
10002f0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002f10:	0038      	movs	r0, r7
10002f12:	5d5a      	ldrb	r2, [r3, r5]
10002f14:	4936      	ldr	r1, [pc, #216]	; (10002ff0 <log_output_process+0x284>)
10002f16:	f7ff ff09 	bl	10002d2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f1a:	3501      	adds	r5, #1
10002f1c:	2d10      	cmp	r5, #16
10002f1e:	d1ed      	bne.n	10002efc <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f20:	2500      	movs	r5, #0
	print_formatted(output, "|");
10002f22:	0038      	movs	r0, r7
10002f24:	4934      	ldr	r1, [pc, #208]	; (10002ff8 <log_output_process+0x28c>)
10002f26:	f7ff ff01 	bl	10002d2c <print_formatted>
		if (i < length) {
10002f2a:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
10002f2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
10002f2e:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
10002f30:	0013      	movs	r3, r2
10002f32:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
10002f34:	2b5e      	cmp	r3, #94	; 0x5e
10002f36:	d900      	bls.n	10002f3a <log_output_process+0x1ce>
10002f38:	222e      	movs	r2, #46	; 0x2e
10002f3a:	0038      	movs	r0, r7
10002f3c:	492f      	ldr	r1, [pc, #188]	; (10002ffc <log_output_process+0x290>)
10002f3e:	f7ff fef5 	bl	10002d2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10002f42:	3501      	adds	r5, #1
10002f44:	2d10      	cmp	r5, #16
10002f46:	d02a      	beq.n	10002f9e <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10002f48:	2307      	movs	r3, #7
10002f4a:	421d      	tst	r5, r3
10002f4c:	d103      	bne.n	10002f56 <log_output_process+0x1ea>
			print_formatted(output, " ");
10002f4e:	0038      	movs	r0, r7
10002f50:	4928      	ldr	r1, [pc, #160]	; (10002ff4 <log_output_process+0x288>)
10002f52:	f7ff feeb 	bl	10002d2c <print_formatted>
		if (i < length) {
10002f56:	002b      	movs	r3, r5
10002f58:	42ae      	cmp	r6, r5
10002f5a:	d8e7      	bhi.n	10002f2c <log_output_process+0x1c0>
			print_formatted(output, " ");
10002f5c:	0038      	movs	r0, r7
10002f5e:	4925      	ldr	r1, [pc, #148]	; (10002ff4 <log_output_process+0x288>)
10002f60:	f7ff fee4 	bl	10002d2c <print_formatted>
10002f64:	e7ed      	b.n	10002f42 <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10002f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
10002f68:	003a      	movs	r2, r7
10002f6a:	4925      	ldr	r1, [pc, #148]	; (10003000 <log_output_process+0x294>)
10002f6c:	f002 fb73 	bl	10005656 <cbpprintf_external>
	if (data_len) {
10002f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10002f72:	2b00      	cmp	r3, #0
10002f74:	d1b0      	bne.n	10002ed8 <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10002f76:	9b05      	ldr	r3, [sp, #20]
10002f78:	2b00      	cmp	r3, #0
10002f7a:	d000      	beq.n	10002f7e <log_output_process+0x212>
10002f7c:	e75a      	b.n	10002e34 <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10002f7e:	0038      	movs	r0, r7
10002f80:	f002 fc85 	bl	1000588e <log_output_flush>
}
10002f84:	b00f      	add	sp, #60	; 0x3c
10002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10002f88:	0038      	movs	r0, r7
10002f8a:	491a      	ldr	r1, [pc, #104]	; (10002ff4 <log_output_process+0x288>)
10002f8c:	f7ff fece 	bl	10002d2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10002f90:	3501      	adds	r5, #1
10002f92:	e7aa      	b.n	10002eea <log_output_process+0x17e>
			print_formatted(output, "   ");
10002f94:	0038      	movs	r0, r7
10002f96:	491b      	ldr	r1, [pc, #108]	; (10003004 <log_output_process+0x298>)
10002f98:	f7ff fec8 	bl	10002d2c <print_formatted>
10002f9c:	e7bd      	b.n	10002f1a <log_output_process+0x1ae>
		data += length;
10002f9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
10002fa0:	199b      	adds	r3, r3, r6
10002fa2:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10002fa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10002fa6:	1b9b      	subs	r3, r3, r6
10002fa8:	9317      	str	r3, [sp, #92]	; 0x5c
10002faa:	e7e2      	b.n	10002f72 <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10002fac:	0038      	movs	r0, r7
10002fae:	4a05      	ldr	r2, [pc, #20]	; (10002fc4 <log_output_process+0x258>)
10002fb0:	4905      	ldr	r1, [pc, #20]	; (10002fc8 <log_output_process+0x25c>)
10002fb2:	f7ff febb 	bl	10002d2c <print_formatted>
}
10002fb6:	e741      	b.n	10002e3c <log_output_process+0xd0>
10002fb8:	10006842 	.word	0x10006842
10002fbc:	10006846 	.word	0x10006846
10002fc0:	100064fc 	.word	0x100064fc
10002fc4:	1000683d 	.word	0x1000683d
10002fc8:	1000686b 	.word	0x1000686b
10002fcc:	10006510 	.word	0x10006510
10002fd0:	1000686e 	.word	0x1000686e
10002fd4:	10006874 	.word	0x10006874
10002fd8:	10006878 	.word	0x10006878
10002fdc:	10005833 	.word	0x10005833
10002fe0:	200002c0 	.word	0x200002c0
10002fe4:	200002bc 	.word	0x200002bc
10002fe8:	1000684f 	.word	0x1000684f
10002fec:	1000584b 	.word	0x1000584b
10002ff0:	1000687d 	.word	0x1000687d
10002ff4:	10006885 	.word	0x10006885
10002ff8:	10006887 	.word	0x10006887
10002ffc:	10006889 	.word	0x10006889
10003000:	10005883 	.word	0x10005883
10003004:	10006883 	.word	0x10006883

10003008 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
10003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
1000300a:	880b      	ldrh	r3, [r1, #0]
1000300c:	b089      	sub	sp, #36	; 0x24
1000300e:	05db      	lsls	r3, r3, #23
10003010:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
10003012:	684b      	ldr	r3, [r1, #4]
10003014:	000f      	movs	r7, r1
10003016:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
10003018:	688e      	ldr	r6, [r1, #8]
1000301a:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
1000301c:	2b00      	cmp	r3, #0
1000301e:	d00c      	beq.n	1000303a <log_output_msg_process+0x32>
10003020:	4a13      	ldr	r2, [pc, #76]	; (10003070 <log_output_msg_process+0x68>)
10003022:	1a9a      	subs	r2, r3, r2
10003024:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
10003026:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
10003028:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
1000302a:	0412      	lsls	r2, r2, #16
1000302c:	d405      	bmi.n	1000303a <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
1000302e:	7838      	ldrb	r0, [r7, #0]
10003030:	0680      	lsls	r0, r0, #26
10003032:	0f40      	lsrs	r0, r0, #29
10003034:	f7ff fe12 	bl	10002c5c <log_source_name_get>
10003038:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
1000303a:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
1000303c:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
1000303e:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
10003040:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
10003042:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
10003044:	0d49      	lsrs	r1, r1, #21
	return msg->data;
10003046:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
10003048:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
1000304a:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
1000304c:	1e48      	subs	r0, r1, #1
1000304e:	4181      	sbcs	r1, r0
10003050:	4249      	negs	r1, r1
10003052:	400a      	ands	r2, r1
10003054:	4661      	mov	r1, ip
10003056:	9201      	str	r2, [sp, #4]
10003058:	9103      	str	r1, [sp, #12]
1000305a:	2200      	movs	r2, #0
1000305c:	0031      	movs	r1, r6
1000305e:	9807      	ldr	r0, [sp, #28]
10003060:	9504      	str	r5, [sp, #16]
10003062:	9702      	str	r7, [sp, #8]
10003064:	9400      	str	r4, [sp, #0]
10003066:	f7ff fe81 	bl	10002d6c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
1000306a:	b009      	add	sp, #36	; 0x24
1000306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000306e:	46c0      	nop			; (mov r8, r8)
10003070:	1000648c 	.word	0x1000648c

10003074 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
10003074:	2301      	movs	r3, #1
{
10003076:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
10003078:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
1000307a:	001c      	movs	r4, r3
	while (frequency > 1000000) {
1000307c:	4a07      	ldr	r2, [pc, #28]	; (1000309c <log_output_timestamp_freq_set+0x28>)
1000307e:	4290      	cmp	r0, r2
10003080:	d807      	bhi.n	10003092 <log_output_timestamp_freq_set+0x1e>
10003082:	4a07      	ldr	r2, [pc, #28]	; (100030a0 <log_output_timestamp_freq_set+0x2c>)
10003084:	2900      	cmp	r1, #0
10003086:	d100      	bne.n	1000308a <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
10003088:	2301      	movs	r3, #1
	}

	freq = frequency;
}
1000308a:	6013      	str	r3, [r2, #0]
	freq = frequency;
1000308c:	4b05      	ldr	r3, [pc, #20]	; (100030a4 <log_output_timestamp_freq_set+0x30>)
1000308e:	6018      	str	r0, [r3, #0]
}
10003090:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
10003092:	0021      	movs	r1, r4
		frequency /= 2U;
10003094:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
10003096:	005b      	lsls	r3, r3, #1
10003098:	e7f1      	b.n	1000307e <log_output_timestamp_freq_set+0xa>
1000309a:	46c0      	nop			; (mov r8, r8)
1000309c:	000f4240 	.word	0x000f4240
100030a0:	200002bc 	.word	0x200002bc
100030a4:	200002c0 	.word	0x200002c0

100030a8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
100030a8:	4b01      	ldr	r3, [pc, #4]	; (100030b0 <format_set+0x8>)
	return 0;
}
100030aa:	2000      	movs	r0, #0
	log_format_current = log_type;
100030ac:	6019      	str	r1, [r3, #0]
}
100030ae:	4770      	bx	lr
100030b0:	200002d8 	.word	0x200002d8

100030b4 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
100030b4:	2201      	movs	r2, #1
{
100030b6:	b510      	push	{r4, lr}
	in_panic = true;
100030b8:	4b02      	ldr	r3, [pc, #8]	; (100030c4 <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
100030ba:	4803      	ldr	r0, [pc, #12]	; (100030c8 <panic+0x14>)
100030bc:	701a      	strb	r2, [r3, #0]
100030be:	f002 fbe6 	bl	1000588e <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
100030c2:	bd10      	pop	{r4, pc}
100030c4:	2000036a 	.word	0x2000036a
100030c8:	10006540 	.word	0x10006540

100030cc <process>:
{
100030cc:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030ce:	4b05      	ldr	r3, [pc, #20]	; (100030e4 <process+0x18>)
{
100030d0:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030d2:	6818      	ldr	r0, [r3, #0]
100030d4:	f7ff fd4a 	bl	10002b6c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
100030d8:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
100030da:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
100030dc:	0021      	movs	r1, r4
100030de:	4802      	ldr	r0, [pc, #8]	; (100030e8 <process+0x1c>)
100030e0:	4798      	blx	r3
}
100030e2:	bd10      	pop	{r4, pc}
100030e4:	200002d8 	.word	0x200002d8
100030e8:	10006540 	.word	0x10006540

100030ec <char_out>:
{
100030ec:	b570      	push	{r4, r5, r6, lr}
100030ee:	000d      	movs	r5, r1
100030f0:	0004      	movs	r4, r0
100030f2:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
100030f4:	42b4      	cmp	r4, r6
100030f6:	d101      	bne.n	100030fc <char_out+0x10>
}
100030f8:	0028      	movs	r0, r5
100030fa:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
100030fc:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100030fe:	4803      	ldr	r0, [pc, #12]	; (1000310c <char_out+0x20>)
10003100:	3401      	adds	r4, #1
10003102:	6883      	ldr	r3, [r0, #8]
10003104:	685b      	ldr	r3, [r3, #4]
10003106:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
10003108:	e7f4      	b.n	100030f4 <char_out+0x8>
1000310a:	46c0      	nop			; (mov r8, r8)
1000310c:	10006330 	.word	0x10006330

10003110 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10003110:	4901      	ldr	r1, [pc, #4]	; (10003118 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10003112:	2210      	movs	r2, #16
	str	r2, [r1]
10003114:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10003116:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10003118:	e000ed10 	.word	0xe000ed10

1000311c <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
1000311c:	f3bf 8f4f 	dsb	sy
10003120:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10003122:	b662      	cpsie	i
	isb
10003124:	f3bf 8f6f 	isb	sy

	bx	lr
10003128:	4770      	bx	lr
1000312a:	46c0      	nop			; (mov r8, r8)

1000312c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
1000312c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000312e:	0007      	movs	r7, r0
10003130:	000d      	movs	r5, r1
10003132:	b087      	sub	sp, #28

	if (esf != NULL) {
10003134:	2900      	cmp	r1, #0
10003136:	d039      	beq.n	100031ac <z_arm_fatal_error+0x80>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
10003138:	2400      	movs	r4, #0
1000313a:	688b      	ldr	r3, [r1, #8]
1000313c:	4e1e      	ldr	r6, [pc, #120]	; (100031b8 <z_arm_fatal_error+0x8c>)
1000313e:	9305      	str	r3, [sp, #20]
10003140:	684b      	ldr	r3, [r1, #4]
10003142:	2201      	movs	r2, #1
10003144:	9304      	str	r3, [sp, #16]
10003146:	680b      	ldr	r3, [r1, #0]
10003148:	0020      	movs	r0, r4
1000314a:	9303      	str	r3, [sp, #12]
1000314c:	4b1b      	ldr	r3, [pc, #108]	; (100031bc <z_arm_fatal_error+0x90>)
1000314e:	0031      	movs	r1, r6
10003150:	9302      	str	r3, [sp, #8]
10003152:	9401      	str	r4, [sp, #4]
10003154:	0023      	movs	r3, r4
10003156:	9400      	str	r4, [sp, #0]
10003158:	f002 fba6 	bl	100058a8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
1000315c:	696b      	ldr	r3, [r5, #20]
1000315e:	2201      	movs	r2, #1
10003160:	9305      	str	r3, [sp, #20]
10003162:	692b      	ldr	r3, [r5, #16]
10003164:	0031      	movs	r1, r6
10003166:	9304      	str	r3, [sp, #16]
10003168:	68eb      	ldr	r3, [r5, #12]
1000316a:	0020      	movs	r0, r4
1000316c:	9303      	str	r3, [sp, #12]
1000316e:	4b14      	ldr	r3, [pc, #80]	; (100031c0 <z_arm_fatal_error+0x94>)
10003170:	9401      	str	r4, [sp, #4]
10003172:	9302      	str	r3, [sp, #8]
10003174:	9400      	str	r4, [sp, #0]
10003176:	0023      	movs	r3, r4
10003178:	f002 fb96 	bl	100058a8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
1000317c:	69eb      	ldr	r3, [r5, #28]
1000317e:	2201      	movs	r2, #1
10003180:	9303      	str	r3, [sp, #12]
10003182:	4b10      	ldr	r3, [pc, #64]	; (100031c4 <z_arm_fatal_error+0x98>)
10003184:	0031      	movs	r1, r6
10003186:	0020      	movs	r0, r4
10003188:	9302      	str	r3, [sp, #8]
1000318a:	9401      	str	r4, [sp, #4]
1000318c:	0023      	movs	r3, r4
1000318e:	9400      	str	r4, [sp, #0]
10003190:	f002 fb8a 	bl	100058a8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
10003194:	69ab      	ldr	r3, [r5, #24]
10003196:	2201      	movs	r2, #1
10003198:	9303      	str	r3, [sp, #12]
1000319a:	4b0b      	ldr	r3, [pc, #44]	; (100031c8 <z_arm_fatal_error+0x9c>)
1000319c:	0031      	movs	r1, r6
1000319e:	9302      	str	r3, [sp, #8]
100031a0:	0020      	movs	r0, r4
100031a2:	0023      	movs	r3, r4
100031a4:	9401      	str	r4, [sp, #4]
100031a6:	9400      	str	r4, [sp, #0]
100031a8:	f002 fb7e 	bl	100058a8 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100031ac:	0029      	movs	r1, r5
100031ae:	0038      	movs	r0, r7
100031b0:	f001 f938 	bl	10004424 <z_fatal_error>
}
100031b4:	b007      	add	sp, #28
100031b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031b8:	100064b4 	.word	0x100064b4
100031bc:	100068c6 	.word	0x100068c6
100031c0:	100068f5 	.word	0x100068f5
100031c4:	10006924 	.word	0x10006924
100031c8:	10006933 	.word	0x10006933

100031cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
100031cc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
100031ce:	0600      	lsls	r0, r0, #24
100031d0:	d405      	bmi.n	100031de <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100031d2:	221f      	movs	r2, #31
100031d4:	401a      	ands	r2, r3
100031d6:	2301      	movs	r3, #1
100031d8:	4093      	lsls	r3, r2
100031da:	4a01      	ldr	r2, [pc, #4]	; (100031e0 <arch_irq_enable+0x14>)
100031dc:	6013      	str	r3, [r2, #0]
}
100031de:	4770      	bx	lr
100031e0:	e000e100 	.word	0xe000e100

100031e4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
100031e4:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100031e6:	25ff      	movs	r5, #255	; 0xff
100031e8:	2203      	movs	r2, #3
100031ea:	000b      	movs	r3, r1
100031ec:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
100031ee:	b240      	sxtb	r0, r0
100031f0:	4002      	ands	r2, r0
100031f2:	00d2      	lsls	r2, r2, #3
100031f4:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100031f6:	015b      	lsls	r3, r3, #5
100031f8:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100031fa:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100031fc:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
100031fe:	2800      	cmp	r0, #0
10003200:	db0a      	blt.n	10003218 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003202:	24c0      	movs	r4, #192	; 0xc0
10003204:	4a0a      	ldr	r2, [pc, #40]	; (10003230 <z_arm_irq_priority_set+0x4c>)
10003206:	0880      	lsrs	r0, r0, #2
10003208:	0080      	lsls	r0, r0, #2
1000320a:	1880      	adds	r0, r0, r2
1000320c:	00a4      	lsls	r4, r4, #2
1000320e:	5902      	ldr	r2, [r0, r4]
10003210:	400a      	ands	r2, r1
10003212:	4313      	orrs	r3, r2
10003214:	5103      	str	r3, [r0, r4]
}
10003216:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003218:	220f      	movs	r2, #15
1000321a:	4010      	ands	r0, r2
1000321c:	3808      	subs	r0, #8
1000321e:	4a05      	ldr	r2, [pc, #20]	; (10003234 <z_arm_irq_priority_set+0x50>)
10003220:	0880      	lsrs	r0, r0, #2
10003222:	0080      	lsls	r0, r0, #2
10003224:	1880      	adds	r0, r0, r2
10003226:	69c2      	ldr	r2, [r0, #28]
10003228:	4011      	ands	r1, r2
1000322a:	4319      	orrs	r1, r3
1000322c:	61c1      	str	r1, [r0, #28]
1000322e:	e7f2      	b.n	10003216 <z_arm_irq_priority_set+0x32>
10003230:	e000e100 	.word	0xe000e100
10003234:	e000ed00 	.word	0xe000ed00

10003238 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10003238:	bf30      	wfi
    b z_SysNmiOnReset
1000323a:	e7fd      	b.n	10003238 <z_SysNmiOnReset>

1000323c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
1000323c:	22ff      	movs	r2, #255	; 0xff
1000323e:	4b08      	ldr	r3, [pc, #32]	; (10003260 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10003240:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10003242:	4393      	bics	r3, r2
10003244:	4a07      	ldr	r2, [pc, #28]	; (10003264 <z_arm_prep_c+0x28>)
10003246:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10003248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1000324c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10003250:	f001 f98e 	bl	10004570 <z_bss_zero>
	z_data_copy();
10003254:	f001 fe24 	bl	10004ea0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10003258:	f000 f93a 	bl	100034d0 <z_arm_interrupt_init>
	z_cstart();
1000325c:	f001 f9c8 	bl	100045f0 <z_cstart>
10003260:	10000100 	.word	0x10000100
10003264:	e000ed00 	.word	0xe000ed00

10003268 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10003268:	4a08      	ldr	r2, [pc, #32]	; (1000328c <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
1000326a:	4909      	ldr	r1, [pc, #36]	; (10003290 <arch_swap+0x28>)
	_current->arch.basepri = key;
1000326c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
1000326e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10003270:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
10003272:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10003274:	2380      	movs	r3, #128	; 0x80
10003276:	4907      	ldr	r1, [pc, #28]	; (10003294 <arch_swap+0x2c>)
10003278:	055b      	lsls	r3, r3, #21
1000327a:	6848      	ldr	r0, [r1, #4]
1000327c:	4303      	orrs	r3, r0
1000327e:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10003280:	b662      	cpsie	i
10003282:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10003286:	6893      	ldr	r3, [r2, #8]
10003288:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000328a:	4770      	bx	lr
1000328c:	2000032c 	.word	0x2000032c
10003290:	10006658 	.word	0x10006658
10003294:	e000ed00 	.word	0xe000ed00

10003298 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10003298:	4913      	ldr	r1, [pc, #76]	; (100032e8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
1000329a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
1000329c:	4813      	ldr	r0, [pc, #76]	; (100032ec <_thread_irq_disabled+0x22>)
    add r0, r2
1000329e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
100032a0:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
100032a4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
100032a6:	4643      	mov	r3, r8
    mov r4, r9
100032a8:	464c      	mov	r4, r9
    mov r5, r10
100032aa:	4655      	mov	r5, sl
    mov r6, r11
100032ac:	465e      	mov	r6, fp
    mov r7, ip
100032ae:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
100032b0:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100032b2:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
100032b4:	4f0e      	ldr	r7, [pc, #56]	; (100032f0 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
100032b6:	4e0f      	ldr	r6, [pc, #60]	; (100032f4 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
100032b8:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
100032ba:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
100032bc:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
100032be:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
100032c0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
100032c2:	66d3      	str	r3, [r2, #108]	; 0x6c
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
100032c4:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
100032c6:	d100      	bne.n	100032ca <_thread_irq_disabled>
    cpsie i
100032c8:	b662      	cpsie	i

100032ca <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
100032ca:	4c08      	ldr	r4, [pc, #32]	; (100032ec <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
100032cc:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
100032ce:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
100032d0:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
100032d2:	4698      	mov	r8, r3
    mov r9, r4
100032d4:	46a1      	mov	r9, r4
    mov r10, r5
100032d6:	46aa      	mov	sl, r5
    mov r11, r6
100032d8:	46b3      	mov	fp, r6
    mov ip, r7
100032da:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
100032dc:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
100032de:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
100032e0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
100032e4:	4770      	bx	lr
100032e6:	0000      	.short	0x0000
    ldr r1, =_kernel
100032e8:	2000032c 	.word	0x2000032c
    ldr r0, =_thread_offset_to_callee_saved
100032ec:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
100032f0:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
100032f4:	08000000 	.word	0x08000000

100032f8 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
100032f8:	2004      	movs	r0, #4
  mov r1, lr
100032fa:	4671      	mov	r1, lr
  tst r1, r0
100032fc:	4201      	tst	r1, r0
  beq _stack_frame_msp
100032fe:	d002      	beq.n	10003306 <_stack_frame_msp>
  mrs r0, PSP
10003300:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10003304:	d101      	bne.n	1000330a <_stack_frame_endif>

10003306 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10003306:	f3ef 8008 	mrs	r0, MSP

1000330a <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
1000330a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
1000330c:	3902      	subs	r1, #2
    ldrb r1, [r1]
1000330e:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10003310:	2902      	cmp	r1, #2
    beq _oops
10003312:	d0ff      	beq.n	10003314 <_oops>

10003314 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10003314:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10003316:	f002 fad6 	bl	100058c6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
1000331a:	bd01      	pop	{r0, pc}

1000331c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
1000331c:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
1000331e:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10003320:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10003322:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10003324:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10003326:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10003328:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
1000332a:	4906      	ldr	r1, [pc, #24]	; (10003344 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
1000332c:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
1000332e:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10003330:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10003332:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10003334:	2380      	movs	r3, #128	; 0x80
10003336:	045b      	lsls	r3, r3, #17
10003338:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
1000333a:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
1000333c:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
1000333e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10003340:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10003342:	bd10      	pop	{r4, pc}
10003344:	100056d9 	.word	0x100056d9

10003348 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10003348:	4b06      	ldr	r3, [pc, #24]	; (10003364 <arch_switch_to_main_thread+0x1c>)
1000334a:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
1000334c:	1c10      	adds	r0, r2, #0
1000334e:	f381 8809 	msr	PSP, r1
10003352:	2100      	movs	r1, #0
10003354:	b662      	cpsie	i
10003356:	f3bf 8f6f 	isb	sy
1000335a:	2200      	movs	r2, #0
1000335c:	2300      	movs	r3, #0
1000335e:	f002 f9bb 	bl	100056d8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10003362:	46c0      	nop			; (mov r8, r8)
10003364:	2000032c 	.word	0x2000032c

10003368 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10003368:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000336a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
1000336e:	4905      	ldr	r1, [pc, #20]	; (10003384 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10003370:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10003372:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10003374:	4904      	ldr	r1, [pc, #16]	; (10003388 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10003376:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10003378:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000337a:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
1000337c:	bc09      	pop	{r0, r3}
	mov lr, r3
1000337e:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10003380:	4902      	ldr	r1, [pc, #8]	; (1000338c <_isr_wrapper+0x24>)
	bx r1
10003382:	4708      	bx	r1
	ldr r1, =16
10003384:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10003388:	10006390 	.word	0x10006390
	ldr r1, =z_arm_int_exit
1000338c:	10003391 	.word	0x10003391

10003390 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10003390:	4b04      	ldr	r3, [pc, #16]	; (100033a4 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10003392:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10003394:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
10003396:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10003398:	d002      	beq.n	100033a0 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000339a:	4903      	ldr	r1, [pc, #12]	; (100033a8 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
1000339c:	4a03      	ldr	r2, [pc, #12]	; (100033ac <_EXIT_EXC+0xc>)
	str r2, [r1]
1000339e:	600a      	str	r2, [r1, #0]

100033a0 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
100033a0:	4770      	bx	lr
100033a2:	0000      	.short	0x0000
	ldr r3, =_kernel
100033a4:	2000032c 	.word	0x2000032c
	ldr r1, =_SCS_ICSR
100033a8:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
100033ac:	10000000 	.word	0x10000000

100033b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
100033b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033b2:	4b38      	ldr	r3, [pc, #224]	; (10003494 <z_arm_fault+0xe4>)
{
100033b4:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033b6:	685f      	ldr	r7, [r3, #4]
{
100033b8:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100033ba:	05fb      	lsls	r3, r7, #23
100033bc:	0ddb      	lsrs	r3, r3, #23
100033be:	9307      	str	r3, [sp, #28]
100033c0:	b662      	cpsie	i
100033c2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
100033c6:	4e34      	ldr	r6, [pc, #208]	; (10003498 <z_arm_fault+0xe8>)
100033c8:	0e13      	lsrs	r3, r2, #24
100033ca:	2bff      	cmp	r3, #255	; 0xff
100033cc:	d10d      	bne.n	100033ea <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
100033ce:	3bf3      	subs	r3, #243	; 0xf3
100033d0:	4013      	ands	r3, r2
100033d2:	2b08      	cmp	r3, #8
100033d4:	d13f      	bne.n	10003456 <z_arm_fault+0xa6>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
100033d6:	2000      	movs	r0, #0
100033d8:	4b30      	ldr	r3, [pc, #192]	; (1000349c <z_arm_fault+0xec>)
100033da:	2201      	movs	r2, #1
100033dc:	9302      	str	r3, [sp, #8]
100033de:	0031      	movs	r1, r6
100033e0:	0003      	movs	r3, r0
100033e2:	9001      	str	r0, [sp, #4]
100033e4:	9000      	str	r0, [sp, #0]
100033e6:	f002 fa80 	bl	100058ea <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
100033ea:	2500      	movs	r5, #0
		return NULL;
100033ec:	002c      	movs	r4, r5
	switch (fault) {
100033ee:	9b07      	ldr	r3, [sp, #28]
100033f0:	2b03      	cmp	r3, #3
100033f2:	d136      	bne.n	10003462 <z_arm_fault+0xb2>
	PR_FAULT_INFO("***** HARD FAULT *****");
100033f4:	2700      	movs	r7, #0
100033f6:	4b2a      	ldr	r3, [pc, #168]	; (100034a0 <z_arm_fault+0xf0>)
100033f8:	2201      	movs	r2, #1
100033fa:	9302      	str	r3, [sp, #8]
100033fc:	0031      	movs	r1, r6
100033fe:	003b      	movs	r3, r7
10003400:	0038      	movs	r0, r7
10003402:	9701      	str	r7, [sp, #4]
10003404:	9700      	str	r7, [sp, #0]
10003406:	f002 fa70 	bl	100058ea <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
1000340a:	69a3      	ldr	r3, [r4, #24]
1000340c:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
1000340e:	881a      	ldrh	r2, [r3, #0]
10003410:	4b24      	ldr	r3, [pc, #144]	; (100034a4 <z_arm_fault+0xf4>)
10003412:	429a      	cmp	r2, r3
10003414:	d139      	bne.n	1000348a <z_arm_fault+0xda>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
10003416:	6823      	ldr	r3, [r4, #0]
10003418:	0031      	movs	r1, r6
1000341a:	9303      	str	r3, [sp, #12]
1000341c:	4b22      	ldr	r3, [pc, #136]	; (100034a8 <z_arm_fault+0xf8>)
1000341e:	2201      	movs	r2, #1
10003420:	9302      	str	r3, [sp, #8]
10003422:	0038      	movs	r0, r7
10003424:	003b      	movs	r3, r7
10003426:	9701      	str	r7, [sp, #4]
10003428:	9700      	str	r7, [sp, #0]
1000342a:	f002 fa5e 	bl	100058ea <z_log_msg_runtime_create.constprop.0>
		reason = esf->basic.r0;
1000342e:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10003430:	2220      	movs	r2, #32
10003432:	0021      	movs	r1, r4
10003434:	a808      	add	r0, sp, #32
10003436:	f002 fa7a 	bl	1000592e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
1000343a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000343c:	2d00      	cmp	r5, #0
1000343e:	d026      	beq.n	1000348e <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10003440:	05da      	lsls	r2, r3, #23
10003442:	d102      	bne.n	1000344a <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10003444:	4a19      	ldr	r2, [pc, #100]	; (100034ac <z_arm_fault+0xfc>)
10003446:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10003448:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
1000344a:	0030      	movs	r0, r6
1000344c:	a908      	add	r1, sp, #32
1000344e:	f7ff fe6d 	bl	1000312c <z_arm_fatal_error>
}
10003452:	b011      	add	sp, #68	; 0x44
10003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
10003456:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10003458:	0712      	lsls	r2, r2, #28
1000345a:	d5c8      	bpl.n	100033ee <z_arm_fault+0x3e>
			ptr_esf =  (z_arch_esf_t *)psp;
1000345c:	000c      	movs	r4, r1
	*nested_exc = false;
1000345e:	2500      	movs	r5, #0
10003460:	e7c5      	b.n	100033ee <z_arm_fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****",
10003462:	23f8      	movs	r3, #248	; 0xf8
10003464:	005b      	lsls	r3, r3, #1
10003466:	4a12      	ldr	r2, [pc, #72]	; (100034b0 <z_arm_fault+0x100>)
10003468:	421f      	tst	r7, r3
1000346a:	d000      	beq.n	1000346e <z_arm_fault+0xbe>
1000346c:	4a11      	ldr	r2, [pc, #68]	; (100034b4 <z_arm_fault+0x104>)
1000346e:	2000      	movs	r0, #0
10003470:	9b07      	ldr	r3, [sp, #28]
10003472:	9203      	str	r2, [sp, #12]
10003474:	3b10      	subs	r3, #16
10003476:	9304      	str	r3, [sp, #16]
10003478:	4b0f      	ldr	r3, [pc, #60]	; (100034b8 <z_arm_fault+0x108>)
1000347a:	2201      	movs	r2, #1
1000347c:	9302      	str	r3, [sp, #8]
1000347e:	0031      	movs	r1, r6
10003480:	0003      	movs	r3, r0
10003482:	9001      	str	r0, [sp, #4]
10003484:	9000      	str	r0, [sp, #0]
10003486:	f002 fa30 	bl	100058ea <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
1000348a:	2600      	movs	r6, #0
1000348c:	e7d0      	b.n	10003430 <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
1000348e:	0a5b      	lsrs	r3, r3, #9
10003490:	025b      	lsls	r3, r3, #9
10003492:	e7d9      	b.n	10003448 <z_arm_fault+0x98>
10003494:	e000ed00 	.word	0xe000ed00
10003498:	100064b4 	.word	0x100064b4
1000349c:	1000698f 	.word	0x1000698f
100034a0:	100069ba 	.word	0x100069ba
100034a4:	0000df02 	.word	0x0000df02
100034a8:	100069d1 	.word	0x100069d1
100034ac:	000001ff 	.word	0x000001ff
100034b0:	10006961 	.word	0x10006961
100034b4:	10006976 	.word	0x10006976
100034b8:	100069ed 	.word	0x100069ed

100034bc <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
100034bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
100034c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
100034c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
100034c6:	4672      	mov	r2, lr
	bl z_arm_fault
100034c8:	f7ff ff72 	bl	100033b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100034cc:	bd01      	pop	{r0, pc}
100034ce:	46c0      	nop			; (mov r8, r8)

100034d0 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
100034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100034d2:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100034d4:	2200      	movs	r2, #0
100034d6:	2603      	movs	r6, #3
100034d8:	25ff      	movs	r5, #255	; 0xff
100034da:	00a4      	lsls	r4, r4, #2
100034dc:	0010      	movs	r0, r2
100034de:	002f      	movs	r7, r5
100034e0:	4030      	ands	r0, r6
100034e2:	00c0      	lsls	r0, r0, #3
100034e4:	4087      	lsls	r7, r0
100034e6:	4905      	ldr	r1, [pc, #20]	; (100034fc <z_arm_interrupt_init+0x2c>)
100034e8:	0893      	lsrs	r3, r2, #2
100034ea:	009b      	lsls	r3, r3, #2
100034ec:	185b      	adds	r3, r3, r1
100034ee:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
100034f0:	3201      	adds	r2, #1
100034f2:	43b9      	bics	r1, r7
100034f4:	5119      	str	r1, [r3, r4]
100034f6:	2a1a      	cmp	r2, #26
100034f8:	d1f0      	bne.n	100034dc <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
100034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100034fc:	e000e100 	.word	0xe000e100

10003500 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10003500:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10003502:	4807      	ldr	r0, [pc, #28]	; (10003520 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003504:	4907      	ldr	r1, [pc, #28]	; (10003524 <__start+0x24>)
    adds r0, r0, r1
10003506:	1840      	adds	r0, r0, r1
    msr PSP, r0
10003508:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
1000350c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10003510:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10003512:	4308      	orrs	r0, r1
    msr CONTROL, r0
10003514:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10003518:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
1000351c:	f7ff fe8e 	bl	1000323c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10003520:	20000370 	.word	0x20000370
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10003524:	00000800 	.word	0x00000800

10003528 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10003528:	b510      	push	{r4, lr}
	if (_current == thread) {
1000352a:	4b0a      	ldr	r3, [pc, #40]	; (10003554 <z_impl_k_thread_abort+0x2c>)
1000352c:	689b      	ldr	r3, [r3, #8]
1000352e:	4283      	cmp	r3, r0
10003530:	d10d      	bne.n	1000354e <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003532:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10003536:	2b00      	cmp	r3, #0
10003538:	d009      	beq.n	1000354e <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000353a:	2280      	movs	r2, #128	; 0x80
1000353c:	4b06      	ldr	r3, [pc, #24]	; (10003558 <z_impl_k_thread_abort+0x30>)
1000353e:	0552      	lsls	r2, r2, #21
10003540:	6859      	ldr	r1, [r3, #4]
10003542:	430a      	orrs	r2, r1
10003544:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10003546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003548:	4904      	ldr	r1, [pc, #16]	; (1000355c <z_impl_k_thread_abort+0x34>)
1000354a:	400a      	ands	r2, r1
1000354c:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
1000354e:	f001 fc39 	bl	10004dc4 <z_thread_abort>
}
10003552:	bd10      	pop	{r4, pc}
10003554:	2000032c 	.word	0x2000032c
10003558:	e000ed00 	.word	0xe000ed00
1000355c:	ffff7fff 	.word	0xffff7fff

10003560 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10003560:	4b01      	ldr	r3, [pc, #4]	; (10003568 <__stdout_hook_install+0x8>)
10003562:	6018      	str	r0, [r3, #0]
}
10003564:	4770      	bx	lr
10003566:	46c0      	nop			; (mov r8, r8)
10003568:	200000c0 	.word	0x200000c0

1000356c <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000356c:	4b0e      	ldr	r3, [pc, #56]	; (100035a8 <rp2040_init+0x3c>)
1000356e:	4a0f      	ldr	r2, [pc, #60]	; (100035ac <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10003570:	b570      	push	{r4, r5, r6, lr}
10003572:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003574:	4d0e      	ldr	r5, [pc, #56]	; (100035b0 <rp2040_init+0x44>)
10003576:	4b0f      	ldr	r3, [pc, #60]	; (100035b4 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10003578:	4c0f      	ldr	r4, [pc, #60]	; (100035b8 <rp2040_init+0x4c>)
1000357a:	602b      	str	r3, [r5, #0]
1000357c:	0019      	movs	r1, r3
1000357e:	68a2      	ldr	r2, [r4, #8]
10003580:	4391      	bics	r1, r2
10003582:	d1fb      	bne.n	1000357c <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10003584:	f000 fd3e 	bl	10004004 <clocks_init>
10003588:	4b0c      	ldr	r3, [pc, #48]	; (100035bc <rp2040_init+0x50>)
1000358a:	602b      	str	r3, [r5, #0]
1000358c:	68a3      	ldr	r3, [r4, #8]
1000358e:	01db      	lsls	r3, r3, #7
10003590:	3380      	adds	r3, #128	; 0x80
10003592:	d1fb      	bne.n	1000358c <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10003594:	f3ef 8310 	mrs	r3, PRIMASK
10003598:	b672      	cpsid	i
	if (key != 0U) {
1000359a:	2b00      	cmp	r3, #0
1000359c:	d102      	bne.n	100035a4 <rp2040_init+0x38>
	__asm__ volatile(
1000359e:	b662      	cpsie	i
100035a0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100035a4:	2000      	movs	r0, #0
100035a6:	bd70      	pop	{r4, r5, r6, pc}
100035a8:	4000e000 	.word	0x4000e000
100035ac:	ffffcdbf 	.word	0xffffcdbf
100035b0:	4000f000 	.word	0x4000f000
100035b4:	003c3ffe 	.word	0x003c3ffe
100035b8:	4000c000 	.word	0x4000c000
100035bc:	01ffffff 	.word	0x01ffffff

100035c0 <adc_gain_invert>:

#include <zephyr/drivers/adc.h>

int adc_gain_invert(enum adc_gain gain,
		    int32_t *value)
{
100035c0:	b570      	push	{r4, r5, r6, lr}
100035c2:	000c      	movs	r4, r1
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
100035c4:	2813      	cmp	r0, #19
100035c6:	d80f      	bhi.n	100035e8 <adc_gain_invert+0x28>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
100035c8:	4a09      	ldr	r2, [pc, #36]	; (100035f0 <adc_gain_invert+0x30>)
100035ca:	0040      	lsls	r0, r0, #1
100035cc:	5c85      	ldrb	r5, [r0, r2]
100035ce:	2d00      	cmp	r5, #0
100035d0:	d00a      	beq.n	100035e8 <adc_gain_invert+0x28>
100035d2:	1812      	adds	r2, r2, r0
100035d4:	7851      	ldrb	r1, [r2, #1]
100035d6:	2900      	cmp	r1, #0
100035d8:	d006      	beq.n	100035e8 <adc_gain_invert+0x28>
			*value = (gdp->mul * *value) / gdp->div;
100035da:	6820      	ldr	r0, [r4, #0]
100035dc:	4368      	muls	r0, r5
100035de:	f7fc fe3d 	bl	1000025c <__divsi3>
100035e2:	6020      	str	r0, [r4, #0]
			rv = 0;
100035e4:	2000      	movs	r0, #0
		}
	}

	return rv;
}
100035e6:	bd70      	pop	{r4, r5, r6, pc}
	int rv = -EINVAL;
100035e8:	2016      	movs	r0, #22
100035ea:	4240      	negs	r0, r0
	return rv;
100035ec:	e7fb      	b.n	100035e6 <adc_gain_invert+0x26>
100035ee:	46c0      	nop			; (mov r8, r8)
100035f0:	10006a04 	.word	0x10006a04

100035f4 <adc_rpi_channel_setup>:
		;
}

static int adc_rpi_channel_setup(const struct device *dev,
				 const struct adc_channel_cfg *channel_cfg)
{
100035f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct adc_rpi_config *config = dev->config;

	if (channel_cfg->channel_id >= config->num_channels) {
100035f6:	6840      	ldr	r0, [r0, #4]
100035f8:	790a      	ldrb	r2, [r1, #4]
100035fa:	7800      	ldrb	r0, [r0, #0]
100035fc:	06d3      	lsls	r3, r2, #27
100035fe:	0edb      	lsrs	r3, r3, #27
10003600:	4298      	cmp	r0, r3
10003602:	d80e      	bhi.n	10003622 <adc_rpi_channel_setup+0x2e>
		LOG_ERR("unsupported channel id '%d'", channel_cfg->channel_id);
10003604:	2000      	movs	r0, #0
10003606:	9303      	str	r3, [sp, #12]
10003608:	4b1a      	ldr	r3, [pc, #104]	; (10003674 <adc_rpi_channel_setup+0x80>)
1000360a:	2201      	movs	r2, #1
1000360c:	9302      	str	r3, [sp, #8]
1000360e:	491a      	ldr	r1, [pc, #104]	; (10003678 <adc_rpi_channel_setup+0x84>)
10003610:	0003      	movs	r3, r0
10003612:	9001      	str	r0, [sp, #4]
10003614:	9000      	str	r0, [sp, #0]
10003616:	f002 f9a9 	bl	1000596c <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
1000361a:	2086      	movs	r0, #134	; 0x86
	}

	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
		LOG_ERR("Acquisition time is not valid");
		return -EINVAL;
1000361c:	4240      	negs	r0, r0
		LOG_ERR("Gain is not valid");
		return -EINVAL;
	}

	return 0;
}
1000361e:	b004      	add	sp, #16
10003620:	bd10      	pop	{r4, pc}
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
10003622:	8848      	ldrh	r0, [r1, #2]
10003624:	2800      	cmp	r0, #0
10003626:	d00b      	beq.n	10003640 <adc_rpi_channel_setup+0x4c>
		LOG_ERR("Acquisition time is not valid");
10003628:	2000      	movs	r0, #0
1000362a:	4b14      	ldr	r3, [pc, #80]	; (1000367c <adc_rpi_channel_setup+0x88>)
1000362c:	4912      	ldr	r1, [pc, #72]	; (10003678 <adc_rpi_channel_setup+0x84>)
1000362e:	9302      	str	r3, [sp, #8]
10003630:	0003      	movs	r3, r0
10003632:	9001      	str	r0, [sp, #4]
10003634:	9000      	str	r0, [sp, #0]
		LOG_ERR("Gain is not valid");
10003636:	2201      	movs	r2, #1
10003638:	f002 f998 	bl	1000596c <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
1000363c:	2016      	movs	r0, #22
1000363e:	e7ed      	b.n	1000361c <adc_rpi_channel_setup+0x28>
	if (channel_cfg->differential) {
10003640:	2420      	movs	r4, #32
10003642:	0013      	movs	r3, r2
10003644:	4023      	ands	r3, r4
10003646:	4222      	tst	r2, r4
10003648:	d009      	beq.n	1000365e <adc_rpi_channel_setup+0x6a>
		LOG_ERR("unsupported differential mode");
1000364a:	4b0d      	ldr	r3, [pc, #52]	; (10003680 <adc_rpi_channel_setup+0x8c>)
1000364c:	2201      	movs	r2, #1
1000364e:	9302      	str	r3, [sp, #8]
10003650:	4909      	ldr	r1, [pc, #36]	; (10003678 <adc_rpi_channel_setup+0x84>)
10003652:	0003      	movs	r3, r0
10003654:	9001      	str	r0, [sp, #4]
10003656:	9000      	str	r0, [sp, #0]
10003658:	f002 f988 	bl	1000596c <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
1000365c:	e7dd      	b.n	1000361a <adc_rpi_channel_setup+0x26>
	if (channel_cfg->gain != ADC_GAIN_1) {
1000365e:	780a      	ldrb	r2, [r1, #0]
	return 0;
10003660:	0018      	movs	r0, r3
	if (channel_cfg->gain != ADC_GAIN_1) {
10003662:	2a08      	cmp	r2, #8
10003664:	d0db      	beq.n	1000361e <adc_rpi_channel_setup+0x2a>
		LOG_ERR("Gain is not valid");
10003666:	4a07      	ldr	r2, [pc, #28]	; (10003684 <adc_rpi_channel_setup+0x90>)
10003668:	4903      	ldr	r1, [pc, #12]	; (10003678 <adc_rpi_channel_setup+0x84>)
1000366a:	9202      	str	r2, [sp, #8]
1000366c:	9301      	str	r3, [sp, #4]
1000366e:	9300      	str	r3, [sp, #0]
10003670:	e7e1      	b.n	10003636 <adc_rpi_channel_setup+0x42>
10003672:	46c0      	nop			; (mov r8, r8)
10003674:	10006a2c 	.word	0x10006a2c
10003678:	1000648c 	.word	0x1000648c
1000367c:	10006a48 	.word	0x10006a48
10003680:	10006a66 	.word	0x10006a66
10003684:	10006a84 	.word	0x10006a84

10003688 <adc_context_start_sampling>:
static void adc_context_start_sampling(struct adc_context *ctx)
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	data->channels = ctx->sequence.channels;
10003688:	0002      	movs	r2, r0
{
1000368a:	b570      	push	{r4, r5, r6, lr}
	data->channels = ctx->sequence.channels;
1000368c:	1d03      	adds	r3, r0, #4
1000368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10003690:	32b4      	adds	r2, #180	; 0xb4
10003692:	6013      	str	r3, [r2, #0]
	data->repeat_buf = data->buf;
10003694:	0003      	movs	r3, r0
10003696:	30ac      	adds	r0, #172	; 0xac
10003698:	6801      	ldr	r1, [r0, #0]
1000369a:	33b0      	adds	r3, #176	; 0xb0
1000369c:	6019      	str	r1, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000369e:	2180      	movs	r1, #128	; 0x80
100036a0:	4b0c      	ldr	r3, [pc, #48]	; (100036d4 <adc_context_start_sampling+0x4c>)
100036a2:	0109      	lsls	r1, r1, #4
100036a4:	6019      	str	r1, [r3, #0]
100036a6:	2180      	movs	r1, #128	; 0x80
100036a8:	2504      	movs	r5, #4
100036aa:	4c0b      	ldr	r4, [pc, #44]	; (100036d8 <adc_context_start_sampling+0x50>)
100036ac:	00c9      	lsls	r1, r1, #3
100036ae:	6019      	str	r1, [r3, #0]
100036b0:	601d      	str	r5, [r3, #0]
100036b2:	6021      	str	r1, [r4, #0]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
100036b4:	6810      	ldr	r0, [r2, #0]
100036b6:	f7fe fae1 	bl	10001c7c <__ffssi2>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100036ba:	4b08      	ldr	r3, [pc, #32]	; (100036dc <adc_context_start_sampling+0x54>)

	adc_clear_errors();

	/* Find next channel and start conversion */
	adc_select_input(find_lsb_set(data->channels) - 1);
100036bc:	3801      	subs	r0, #1
100036be:	681b      	ldr	r3, [r3, #0]
 *
 * \param input Input to select.
 */
static inline void adc_select_input(uint input) {
    valid_params_if(ADC, input < NUM_ADC_CHANNELS);
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
100036c0:	0300      	lsls	r0, r0, #12
100036c2:	4058      	eors	r0, r3
100036c4:	23e0      	movs	r3, #224	; 0xe0
100036c6:	01db      	lsls	r3, r3, #7
100036c8:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100036ca:	4b05      	ldr	r3, [pc, #20]	; (100036e0 <adc_context_start_sampling+0x58>)
100036cc:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100036ce:	6025      	str	r5, [r4, #0]
	adc_start_once();
}
100036d0:	bd70      	pop	{r4, r5, r6, pc}
100036d2:	46c0      	nop			; (mov r8, r8)
100036d4:	4004e008 	.word	0x4004e008
100036d8:	4004e000 	.word	0x4004e000
100036dc:	4004c000 	.word	0x4004c000
100036e0:	4004d000 	.word	0x4004d000

100036e4 <adc_rpi_read_async>:
{
100036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adc_rpi_data *data = dev->data;
100036e6:	6907      	ldr	r7, [r0, #16]
{
100036e8:	b087      	sub	sp, #28

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
100036ea:	003b      	movs	r3, r7
100036ec:	3340      	adds	r3, #64	; 0x40
100036ee:	0004      	movs	r4, r0
100036f0:	000d      	movs	r5, r1
100036f2:	0016      	movs	r6, r2
100036f4:	9305      	str	r3, [sp, #20]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
100036f6:	2201      	movs	r2, #1
100036f8:	4252      	negs	r2, r2
100036fa:	17d3      	asrs	r3, r2, #31
100036fc:	9805      	ldr	r0, [sp, #20]
100036fe:	f001 f891 	bl	10004824 <z_impl_k_sem_take>
	adc_context_lock(&data->ctx, async ? true : false, async);
10003702:	0033      	movs	r3, r6
10003704:	1e5a      	subs	r2, r3, #1
10003706:	4193      	sbcs	r3, r2

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
10003708:	003a      	movs	r2, r7
1000370a:	3278      	adds	r2, #120	; 0x78
1000370c:	7013      	strb	r3, [r2, #0]
1000370e:	9204      	str	r2, [sp, #16]
	ctx->signal = signal;
10003710:	677e      	str	r6, [r7, #116]	; 0x74
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10003712:	7c2b      	ldrb	r3, [r5, #16]
	const struct adc_rpi_config *config = dev->config;
10003714:	6862      	ldr	r2, [r4, #4]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10003716:	1e59      	subs	r1, r3, #1
	struct adc_rpi_data *data = dev->data;
10003718:	6924      	ldr	r4, [r4, #16]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
1000371a:	290b      	cmp	r1, #11
1000371c:	d910      	bls.n	10003740 <adc_rpi_read_async+0x5c>
		LOG_ERR("unsupported resolution %d", sequence->resolution);
1000371e:	9303      	str	r3, [sp, #12]
10003720:	4949      	ldr	r1, [pc, #292]	; (10003848 <adc_rpi_read_async+0x164>)
10003722:	4b4a      	ldr	r3, [pc, #296]	; (1000384c <adc_rpi_read_async+0x168>)
10003724:	2000      	movs	r0, #0
10003726:	9302      	str	r3, [sp, #8]
10003728:	2201      	movs	r2, #1
1000372a:	0003      	movs	r3, r0
1000372c:	9001      	str	r0, [sp, #4]
1000372e:	9000      	str	r0, [sp, #0]
10003730:	f002 f91c 	bl	1000596c <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10003734:	2486      	movs	r4, #134	; 0x86
		return -ENOMEM;
10003736:	4264      	negs	r4, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
10003738:	9805      	ldr	r0, [sp, #20]
1000373a:	f001 f851 	bl	100047e0 <z_impl_k_sem_give>
	return err;
1000373e:	e06b      	b.n	10003818 <adc_rpi_read_async+0x134>
	if (find_msb_set(sequence->channels) > config->num_channels) {
10003740:	686f      	ldr	r7, [r5, #4]
10003742:	7816      	ldrb	r6, [r2, #0]
	if (op == 0) {
10003744:	2f00      	cmp	r7, #0
10003746:	d11f      	bne.n	10003788 <adc_rpi_read_async+0xa4>
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
10003748:	2201      	movs	r2, #1
1000374a:	3e01      	subs	r6, #1
1000374c:	40b2      	lsls	r2, r6
	uint8_t channels = 0;
1000374e:	2300      	movs	r3, #0
		if (mask & sequence->channels) {
10003750:	423a      	tst	r2, r7
10003752:	d001      	beq.n	10003758 <adc_rpi_read_async+0x74>
			channels++;
10003754:	3301      	adds	r3, #1
10003756:	b2db      	uxtb	r3, r3
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
10003758:	0852      	lsrs	r2, r2, #1
1000375a:	d1f9      	bne.n	10003750 <adc_rpi_read_async+0x6c>
	if (sequence->options) {
1000375c:	682a      	ldr	r2, [r5, #0]
	needed = channels * sizeof(uint16_t);
1000375e:	005b      	lsls	r3, r3, #1
	if (sequence->options) {
10003760:	2a00      	cmp	r2, #0
10003762:	d002      	beq.n	1000376a <adc_rpi_read_async+0x86>
		needed *= (1 + sequence->options->extra_samplings);
10003764:	8992      	ldrh	r2, [r2, #12]
10003766:	3201      	adds	r2, #1
10003768:	4353      	muls	r3, r2
	if (sequence->buffer_size < needed) {
1000376a:	68ea      	ldr	r2, [r5, #12]
1000376c:	429a      	cmp	r2, r3
1000376e:	d216      	bcs.n	1000379e <adc_rpi_read_async+0xba>
		LOG_ERR("buffer size too small");
10003770:	2000      	movs	r0, #0
10003772:	4b37      	ldr	r3, [pc, #220]	; (10003850 <adc_rpi_read_async+0x16c>)
10003774:	2201      	movs	r2, #1
10003776:	9302      	str	r3, [sp, #8]
10003778:	4933      	ldr	r1, [pc, #204]	; (10003848 <adc_rpi_read_async+0x164>)
1000377a:	0003      	movs	r3, r0
1000377c:	9001      	str	r0, [sp, #4]
1000377e:	9000      	str	r0, [sp, #0]
10003780:	f002 f8f4 	bl	1000596c <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
10003784:	240c      	movs	r4, #12
10003786:	e7d6      	b.n	10003736 <adc_rpi_read_async+0x52>
	return 32 - __builtin_clz(op);
10003788:	0038      	movs	r0, r7
1000378a:	f7fc fdfb 	bl	10000384 <__clzsi2>
1000378e:	2320      	movs	r3, #32
10003790:	1a1b      	subs	r3, r3, r0
	if (find_msb_set(sequence->channels) > config->num_channels) {
10003792:	42b3      	cmp	r3, r6
10003794:	d9d8      	bls.n	10003748 <adc_rpi_read_async+0x64>
		LOG_ERR("unsupported channels in mask: 0x%08x",
10003796:	492c      	ldr	r1, [pc, #176]	; (10003848 <adc_rpi_read_async+0x164>)
10003798:	4b2e      	ldr	r3, [pc, #184]	; (10003854 <adc_rpi_read_async+0x170>)
1000379a:	9703      	str	r7, [sp, #12]
1000379c:	e7c2      	b.n	10003724 <adc_rpi_read_async+0x40>
	data->buf = sequence->buffer;
1000379e:	0023      	movs	r3, r4
100037a0:	68aa      	ldr	r2, [r5, #8]
100037a2:	33ac      	adds	r3, #172	; 0xac
100037a4:	601a      	str	r2, [r3, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
100037a6:	002a      	movs	r2, r5
100037a8:	3b30      	subs	r3, #48	; 0x30
100037aa:	ca43      	ldmia	r2!, {r0, r1, r6}
100037ac:	c343      	stmia	r3!, {r0, r1, r6}
	ctx->status = 0;
100037ae:	2600      	movs	r6, #0
	ctx->sequence = *sequence;
100037b0:	ca03      	ldmia	r2!, {r0, r1}
100037b2:	c303      	stmia	r3!, {r0, r1}
	ctx->status = 0;
100037b4:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
100037b6:	682b      	ldr	r3, [r5, #0]
100037b8:	42b3      	cmp	r3, r6
100037ba:	d030      	beq.n	1000381e <adc_rpi_read_async+0x13a>
		ctx->options = *sequence->options;
100037bc:	0025      	movs	r5, r4
100037be:	3590      	adds	r5, #144	; 0x90
100037c0:	002a      	movs	r2, r5
100037c2:	cb83      	ldmia	r3!, {r0, r1, r7}
100037c4:	c283      	stmia	r2!, {r0, r1, r7}
100037c6:	681b      	ldr	r3, [r3, #0]
100037c8:	6013      	str	r3, [r2, #0]
		ctx->sequence.options = &ctx->options;
		ctx->sampling_index = 0U;
100037ca:	0023      	movs	r3, r4
100037cc:	33a0      	adds	r3, #160	; 0xa0
		ctx->sequence.options = &ctx->options;
100037ce:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
100037d0:	801e      	strh	r6, [r3, #0]

		if (ctx->options.interval_us != 0U) {
100037d2:	682b      	ldr	r3, [r5, #0]
100037d4:	42b3      	cmp	r3, r6
100037d6:	d022      	beq.n	1000381e <adc_rpi_read_async+0x13a>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
100037d8:	0031      	movs	r1, r6
100037da:	0020      	movs	r0, r4
100037dc:	f002 fd30 	bl	10006240 <z_impl_atomic_set>
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
100037e0:	0031      	movs	r1, r6
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
100037e2:	2263      	movs	r2, #99	; 0x63
100037e4:	2300      	movs	r3, #0
100037e6:	6828      	ldr	r0, [r5, #0]
100037e8:	1880      	adds	r0, r0, r2
100037ea:	4159      	adcs	r1, r3
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
100037ec:	2264      	movs	r2, #100	; 0x64
100037ee:	2300      	movs	r3, #0
100037f0:	f7fc fe06 	bl	10000400 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
100037f4:	9000      	str	r0, [sp, #0]
100037f6:	0020      	movs	r0, r4
100037f8:	2200      	movs	r2, #0
100037fa:	2300      	movs	r3, #0
100037fc:	9101      	str	r1, [sp, #4]
100037fe:	3008      	adds	r0, #8
10003800:	f001 fd18 	bl	10005234 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
10003804:	0023      	movs	r3, r4
10003806:	3378      	adds	r3, #120	; 0x78
10003808:	781b      	ldrb	r3, [r3, #0]
1000380a:	2b00      	cmp	r3, #0
1000380c:	d00b      	beq.n	10003826 <adc_rpi_read_async+0x142>
	if (ctx->asynchronous && (status == 0)) {
1000380e:	9b04      	ldr	r3, [sp, #16]
10003810:	781c      	ldrb	r4, [r3, #0]
10003812:	2c00      	cmp	r4, #0
10003814:	d090      	beq.n	10003738 <adc_rpi_read_async+0x54>
		return 0;
10003816:	2400      	movs	r4, #0
}
10003818:	0020      	movs	r0, r4
1000381a:	b007      	add	sp, #28
1000381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
1000381e:	0020      	movs	r0, r4
10003820:	f7ff ff32 	bl	10003688 <adc_context_start_sampling>
10003824:	e7ee      	b.n	10003804 <adc_rpi_read_async+0x120>
	k_sem_take(&ctx->sync, K_FOREVER);
10003826:	0020      	movs	r0, r4
	return z_impl_k_sem_take(sem, timeout);
10003828:	2201      	movs	r2, #1
1000382a:	4252      	negs	r2, r2
1000382c:	17d3      	asrs	r3, r2, #31
1000382e:	3058      	adds	r0, #88	; 0x58
10003830:	f000 fff8 	bl	10004824 <z_impl_k_sem_take>
	if (ctx->asynchronous && (status == 0)) {
10003834:	9b04      	ldr	r3, [sp, #16]
	return ctx->status;
10003836:	6f24      	ldr	r4, [r4, #112]	; 0x70
	if (ctx->asynchronous && (status == 0)) {
10003838:	781b      	ldrb	r3, [r3, #0]
1000383a:	2b00      	cmp	r3, #0
1000383c:	d100      	bne.n	10003840 <adc_rpi_read_async+0x15c>
1000383e:	e77b      	b.n	10003738 <adc_rpi_read_async+0x54>
10003840:	2c00      	cmp	r4, #0
10003842:	d000      	beq.n	10003846 <adc_rpi_read_async+0x162>
10003844:	e778      	b.n	10003738 <adc_rpi_read_async+0x54>
10003846:	e7e6      	b.n	10003816 <adc_rpi_read_async+0x132>
10003848:	1000648c 	.word	0x1000648c
1000384c:	10006a96 	.word	0x10006a96
10003850:	10006ad5 	.word	0x10006ad5
10003854:	10006ab0 	.word	0x10006ab0

10003858 <adc_rpi_isr>:
 *  \ingroup hardware_adc
 *
 * \return Returns true if the FIFO is empty
 */
static inline bool adc_fifo_is_empty(void) {
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
10003858:	2180      	movs	r1, #128	; 0x80
{
1000385a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (uint16_t)adc_hw->result;
1000385c:	4d3e      	ldr	r5, [pc, #248]	; (10003958 <adc_rpi_isr+0x100>)
	struct adc_rpi_data *data = dev->data;
1000385e:	6904      	ldr	r4, [r0, #16]
	return (uint16_t)adc_hw->result;
10003860:	686a      	ldr	r2, [r5, #4]
    return (adc_hw->cs & ADC_CS_AINSEL_BITS) >> ADC_CS_AINSEL_LSB;
10003862:	682b      	ldr	r3, [r5, #0]
10003864:	b292      	uxth	r2, r2
10003866:	045b      	lsls	r3, r3, #17
10003868:	0f5b      	lsrs	r3, r3, #29
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
1000386a:	0049      	lsls	r1, r1, #1
1000386c:	68ae      	ldr	r6, [r5, #8]
	while (!adc_fifo_is_empty()) {
1000386e:	420e      	tst	r6, r1
10003870:	d00d      	beq.n	1000388e <adc_rpi_isr+0x36>
	return (adc_hw->cs & ADC_CS_ERR_BITS) ? true : false;
10003872:	6829      	ldr	r1, [r5, #0]
	if (adc_get_err()) {
10003874:	0589      	lsls	r1, r1, #22
10003876:	d514      	bpl.n	100038a2 <adc_rpi_isr+0x4a>
	if (ctx->asynchronous) {
10003878:	0023      	movs	r3, r4
1000387a:	3378      	adds	r3, #120	; 0x78
1000387c:	781b      	ldrb	r3, [r3, #0]
1000387e:	2b00      	cmp	r3, #0
10003880:	d007      	beq.n	10003892 <adc_rpi_isr+0x3a>
10003882:	2105      	movs	r1, #5
10003884:	4249      	negs	r1, r1
10003886:	0020      	movs	r0, r4
10003888:	f002 f895 	bl	100059b6 <adc_context_complete.part.0>
1000388c:	e044      	b.n	10003918 <adc_rpi_isr+0xc0>
 *  \ingroup hardware_adc
 *
 * Pops the latest result from the ADC FIFO.
 */
static inline uint16_t adc_fifo_get(void) {
    return (uint16_t)adc_hw->fifo;
1000388e:	68ee      	ldr	r6, [r5, #12]
10003890:	e7ec      	b.n	1000386c <adc_rpi_isr+0x14>
		ctx->status = status;
10003892:	2305      	movs	r3, #5
10003894:	425b      	negs	r3, r3
10003896:	6723      	str	r3, [r4, #112]	; 0x70
	k_sem_give(&ctx->sync);
10003898:	0020      	movs	r0, r4
1000389a:	3058      	adds	r0, #88	; 0x58
	z_impl_k_sem_give(sem);
1000389c:	f000 ffa0 	bl	100047e0 <z_impl_k_sem_give>
}
100038a0:	e03a      	b.n	10003918 <adc_rpi_isr+0xc0>
	*data->buf++ = result;
100038a2:	0026      	movs	r6, r4
100038a4:	36ac      	adds	r6, #172	; 0xac
100038a6:	6831      	ldr	r1, [r6, #0]
100038a8:	1c8f      	adds	r7, r1, #2
100038aa:	6037      	str	r7, [r6, #0]
100038ac:	800a      	strh	r2, [r1, #0]
	data->channels &= ~(BIT(ainsel));
100038ae:	2201      	movs	r2, #1
100038b0:	0021      	movs	r1, r4
100038b2:	409a      	lsls	r2, r3
100038b4:	31b4      	adds	r1, #180	; 0xb4
100038b6:	680b      	ldr	r3, [r1, #0]
100038b8:	4393      	bics	r3, r2
100038ba:	600b      	str	r3, [r1, #0]
	if (data->channels == 0) {
100038bc:	d13b      	bne.n	10003936 <adc_rpi_isr+0xde>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
100038be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
100038c0:	2b00      	cmp	r3, #0
100038c2:	d031      	beq.n	10003928 <adc_rpi_isr+0xd0>
		adc_sequence_callback callback = ctx->options.callback;
100038c4:	0023      	movs	r3, r4
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
100038c6:	0025      	movs	r5, r4
100038c8:	0027      	movs	r7, r4
		adc_sequence_callback callback = ctx->options.callback;
100038ca:	3394      	adds	r3, #148	; 0x94
100038cc:	681b      	ldr	r3, [r3, #0]
			action = callback(dev,
100038ce:	35a0      	adds	r5, #160	; 0xa0
100038d0:	882a      	ldrh	r2, [r5, #0]
100038d2:	3790      	adds	r7, #144	; 0x90
		if (callback) {
100038d4:	2b00      	cmp	r3, #0
100038d6:	d005      	beq.n	100038e4 <adc_rpi_isr+0x8c>
			action = callback(dev,
100038d8:	3938      	subs	r1, #56	; 0x38
100038da:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
100038dc:	2801      	cmp	r0, #1
100038de:	d00a      	beq.n	100038f6 <adc_rpi_isr+0x9e>
100038e0:	2802      	cmp	r0, #2
100038e2:	d01a      	beq.n	1000391a <adc_rpi_isr+0xc2>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->options.extra_samplings) {
100038e4:	0022      	movs	r2, r4
100038e6:	329c      	adds	r2, #156	; 0x9c
			if (ctx->sampling_index <
100038e8:	882b      	ldrh	r3, [r5, #0]
100038ea:	8812      	ldrh	r2, [r2, #0]
100038ec:	429a      	cmp	r2, r3
100038ee:	d914      	bls.n	1000391a <adc_rpi_isr+0xc2>
				++ctx->sampling_index;
100038f0:	3301      	adds	r3, #1
100038f2:	802b      	strh	r3, [r5, #0]
			} else {
				finish = true;
			}
		}

		if (!finish) {
100038f4:	e003      	b.n	100038fe <adc_rpi_isr+0xa6>
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	if (repeat_sampling) {
		data->buf = data->repeat_buf;
100038f6:	0023      	movs	r3, r4
100038f8:	33b0      	adds	r3, #176	; 0xb0
100038fa:	681b      	ldr	r3, [r3, #0]
100038fc:	6033      	str	r3, [r6, #0]
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
100038fe:	683b      	ldr	r3, [r7, #0]
10003900:	2b00      	cmp	r3, #0
10003902:	d103      	bne.n	1000390c <adc_rpi_isr+0xb4>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
10003904:	0020      	movs	r0, r4
10003906:	f7ff febf 	bl	10003688 <adc_context_start_sampling>
1000390a:	e005      	b.n	10003918 <adc_rpi_isr+0xc0>
	return z_impl_atomic_sub(target, value);
1000390c:	2101      	movs	r1, #1
1000390e:	0020      	movs	r0, r4
10003910:	f002 fc89 	bl	10006226 <z_impl_atomic_sub>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
10003914:	2801      	cmp	r0, #1
10003916:	dcf5      	bgt.n	10003904 <adc_rpi_isr+0xac>
}
10003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
1000391a:	683b      	ldr	r3, [r7, #0]
1000391c:	2b00      	cmp	r3, #0
1000391e:	d003      	beq.n	10003928 <adc_rpi_isr+0xd0>
	k_timer_stop(&ctx->timer);
10003920:	0020      	movs	r0, r4
10003922:	3008      	adds	r0, #8
	z_impl_k_timer_stop(timer);
10003924:	f002 fc59 	bl	100061da <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
10003928:	0023      	movs	r3, r4
1000392a:	3378      	adds	r3, #120	; 0x78
1000392c:	781b      	ldrb	r3, [r3, #0]
1000392e:	2b00      	cmp	r3, #0
10003930:	d0b2      	beq.n	10003898 <adc_rpi_isr+0x40>
10003932:	2100      	movs	r1, #0
10003934:	e7a7      	b.n	10003886 <adc_rpi_isr+0x2e>
	return __builtin_ffs(op);
10003936:	0018      	movs	r0, r3
10003938:	f7fe f9a0 	bl	10001c7c <__ffssi2>
	ainsel = (uint8_t)(find_lsb_set(data->channels) - 1);
1000393c:	3801      	subs	r0, #1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000393e:	682b      	ldr	r3, [r5, #0]
	adc_select_input(ainsel);
10003940:	b2c0      	uxtb	r0, r0
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
10003942:	0300      	lsls	r0, r0, #12
10003944:	4058      	eors	r0, r3
10003946:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003948:	2204      	movs	r2, #4
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000394a:	01db      	lsls	r3, r3, #7
1000394c:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000394e:	4b03      	ldr	r3, [pc, #12]	; (1000395c <adc_rpi_isr+0x104>)
10003950:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003952:	4b03      	ldr	r3, [pc, #12]	; (10003960 <adc_rpi_isr+0x108>)
10003954:	601a      	str	r2, [r3, #0]
}
10003956:	e7df      	b.n	10003918 <adc_rpi_isr+0xc0>
10003958:	4004c000 	.word	0x4004c000
1000395c:	4004d000 	.word	0x4004d000
10003960:	4004e000 	.word	0x4004e000

10003964 <adc_rpi_init>:
 * @param dev RaspberryPi Pico ADC device
 *
 * @return 0 on success
 */
static int adc_rpi_init(const struct device *dev)
{
10003964:	b510      	push	{r4, lr}
	const struct adc_rpi_config *config = dev->config;
	struct adc_rpi_data *data = dev->data;

	config->irq_configure();
10003966:	6843      	ldr	r3, [r0, #4]
	struct adc_rpi_data *data = dev->data;
10003968:	6904      	ldr	r4, [r0, #16]
	config->irq_configure();
1000396a:	685b      	ldr	r3, [r3, #4]
1000396c:	4798      	blx	r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000396e:	4b0e      	ldr	r3, [pc, #56]	; (100039a8 <adc_rpi_init+0x44>)
10003970:	681a      	ldr	r2, [r3, #0]
10003972:	4b0e      	ldr	r3, [pc, #56]	; (100039ac <adc_rpi_init+0x48>)
10003974:	4053      	eors	r3, r2
10003976:	4a0e      	ldr	r2, [pc, #56]	; (100039b0 <adc_rpi_init+0x4c>)
10003978:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000397a:	4a0e      	ldr	r2, [pc, #56]	; (100039b4 <adc_rpi_init+0x50>)
1000397c:	6013      	str	r3, [r2, #0]
    adc_hw->div = (uint32_t)(clkdiv * (float) (1 << ADC_DIV_INT_LSB));
1000397e:	2200      	movs	r2, #0
10003980:	4b0d      	ldr	r3, [pc, #52]	; (100039b8 <adc_rpi_init+0x54>)
10003982:	611a      	str	r2, [r3, #16]
	adc_hw->cs = ADC_CS_EN_BITS;
10003984:	3201      	adds	r2, #1
10003986:	601a      	str	r2, [r3, #0]
	while (!(adc_hw->cs & ADC_CS_READY_BITS))
10003988:	32ff      	adds	r2, #255	; 0xff
1000398a:	6819      	ldr	r1, [r3, #0]
1000398c:	4211      	tst	r1, r2
1000398e:	d0fc      	beq.n	1000398a <adc_rpi_init+0x26>
 *  \ingroup hardware_adc
 *
 * \param enabled Set to true to enable the ADC interrupts, false to disable
 */
static inline void adc_irq_set_enabled(bool enabled) {
    adc_hw->inte = !!enabled;
10003990:	2201      	movs	r2, #1
10003992:	619a      	str	r2, [r3, #24]
	if (!k_sem_count_get(&ctx->lock)) {
10003994:	6ca3      	ldr	r3, [r4, #72]	; 0x48
10003996:	2b00      	cmp	r3, #0
10003998:	d103      	bne.n	100039a2 <adc_rpi_init+0x3e>
		k_sem_give(&ctx->lock);
1000399a:	0020      	movs	r0, r4
1000399c:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
1000399e:	f000 ff1f 	bl	100047e0 <z_impl_k_sem_give>
	adc_irq_set_enabled(true);

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
100039a2:	2000      	movs	r0, #0
100039a4:	bd10      	pop	{r4, pc}
100039a6:	46c0      	nop			; (mov r8, r8)
100039a8:	4004c008 	.word	0x4004c008
100039ac:	01000007 	.word	0x01000007
100039b0:	0f00000f 	.word	0x0f00000f
100039b4:	4004d008 	.word	0x4004d008
100039b8:	4004c000 	.word	0x4004c000

100039bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
100039bc:	b510      	push	{r4, lr}
100039be:	4808      	ldr	r0, [pc, #32]	; (100039e0 <uart_console_init+0x24>)
100039c0:	f002 fac1 	bl	10005f46 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
100039c4:	2800      	cmp	r0, #0
100039c6:	d008      	beq.n	100039da <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
100039c8:	4c06      	ldr	r4, [pc, #24]	; (100039e4 <uart_console_init+0x28>)
100039ca:	0020      	movs	r0, r4
100039cc:	f7ff fdc8 	bl	10003560 <__stdout_hook_install>
	__printk_hook_install(console_out);
100039d0:	0020      	movs	r0, r4
100039d2:	f7fe fcc9 	bl	10002368 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100039d6:	2000      	movs	r0, #0
}
100039d8:	bd10      	pop	{r4, pc}
		return -ENODEV;
100039da:	2013      	movs	r0, #19
100039dc:	4240      	negs	r0, r0
100039de:	e7fb      	b.n	100039d8 <uart_console_init+0x1c>
100039e0:	10006330 	.word	0x10006330
100039e4:	100039e9 	.word	0x100039e9

100039e8 <console_out>:
{
100039e8:	b570      	push	{r4, r5, r6, lr}
100039ea:	0004      	movs	r4, r0
100039ec:	4d07      	ldr	r5, [pc, #28]	; (10003a0c <console_out+0x24>)
	if ('\n' == c) {
100039ee:	280a      	cmp	r0, #10
100039f0:	d104      	bne.n	100039fc <console_out+0x14>
100039f2:	68ab      	ldr	r3, [r5, #8]
100039f4:	210d      	movs	r1, #13
100039f6:	0028      	movs	r0, r5
100039f8:	685b      	ldr	r3, [r3, #4]
100039fa:	4798      	blx	r3
100039fc:	68ab      	ldr	r3, [r5, #8]
100039fe:	0028      	movs	r0, r5
10003a00:	685b      	ldr	r3, [r3, #4]
10003a02:	b2e1      	uxtb	r1, r4
10003a04:	4798      	blx	r3
}
10003a06:	0020      	movs	r0, r4
10003a08:	bd70      	pop	{r4, r5, r6, pc}
10003a0a:	46c0      	nop			; (mov r8, r8)
10003a0c:	10006330 	.word	0x10006330

10003a10 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10003a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003a12:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10003a14:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10003a16:	6903      	ldr	r3, [r0, #16]
10003a18:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10003a1a:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10003a1c:	4a14      	ldr	r2, [pc, #80]	; (10003a70 <gpio_rpi_isr+0x60>)
10003a1e:	3308      	adds	r3, #8
10003a20:	009b      	lsls	r3, r3, #2
10003a22:	589b      	ldr	r3, [r3, r2]
10003a24:	2207      	movs	r2, #7
10003a26:	4022      	ands	r2, r4
10003a28:	0092      	lsls	r2, r2, #2
10003a2a:	40d3      	lsrs	r3, r2
		if (events) {
10003a2c:	220f      	movs	r2, #15
10003a2e:	4213      	tst	r3, r2
10003a30:	d103      	bne.n	10003a3a <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10003a32:	3401      	adds	r4, #1
10003a34:	2c1e      	cmp	r4, #30
10003a36:	d1f0      	bne.n	10003a1a <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10003a38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10003a3a:	210f      	movs	r1, #15
10003a3c:	0020      	movs	r0, r4
10003a3e:	f000 fc27 	bl	10004290 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10003a42:	9b01      	ldr	r3, [sp, #4]
10003a44:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10003a46:	2900      	cmp	r1, #0
10003a48:	d0f3      	beq.n	10003a32 <gpio_rpi_isr+0x22>
10003a4a:	2701      	movs	r7, #1
10003a4c:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10003a4e:	680d      	ldr	r5, [r1, #0]
10003a50:	2900      	cmp	r1, #0
10003a52:	d0ee      	beq.n	10003a32 <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10003a54:	688b      	ldr	r3, [r1, #8]
10003a56:	001a      	movs	r2, r3
10003a58:	403a      	ands	r2, r7
10003a5a:	423b      	tst	r3, r7
10003a5c:	d002      	beq.n	10003a64 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10003a5e:	0030      	movs	r0, r6
10003a60:	684b      	ldr	r3, [r1, #4]
10003a62:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10003a64:	1e2b      	subs	r3, r5, #0
10003a66:	d000      	beq.n	10003a6a <gpio_rpi_isr+0x5a>
10003a68:	682b      	ldr	r3, [r5, #0]
10003a6a:	0029      	movs	r1, r5
10003a6c:	001d      	movs	r5, r3
10003a6e:	e7ef      	b.n	10003a50 <gpio_rpi_isr+0x40>
10003a70:	40014100 	.word	0x40014100

10003a74 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10003a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10003a76:	ab0b      	add	r3, sp, #44	; 0x2c
10003a78:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
10003a7a:	2000      	movs	r0, #0
10003a7c:	9303      	str	r3, [sp, #12]
10003a7e:	4b05      	ldr	r3, [pc, #20]	; (10003a94 <z_log_msg_runtime_create.constprop.0+0x20>)
10003a80:	2201      	movs	r2, #1
10003a82:	9302      	str	r3, [sp, #8]
10003a84:	9001      	str	r0, [sp, #4]
10003a86:	0003      	movs	r3, r0
10003a88:	9000      	str	r0, [sp, #0]
10003a8a:	f7ff f909 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
10003a8e:	b007      	add	sp, #28
10003a90:	bd00      	pop	{pc}
10003a92:	46c0      	nop			; (mov r8, r8)
10003a94:	10006b0e 	.word	0x10006b0e

10003a98 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10003a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10003a9a:	6845      	ldr	r5, [r0, #4]
{
10003a9c:	b087      	sub	sp, #28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10003a9e:	2100      	movs	r1, #0
10003aa0:	69e8      	ldr	r0, [r5, #28]
10003aa2:	aa05      	add	r2, sp, #20
10003aa4:	f002 f89a 	bl	10005bdc <pinctrl_lookup_state>
10003aa8:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
10003aaa:	db07      	blt.n	10003abc <pwm_rpi_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10003aac:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003aae:	2200      	movs	r2, #0
10003ab0:	7919      	ldrb	r1, [r3, #4]
10003ab2:	6818      	ldr	r0, [r3, #0]
10003ab4:	f002 f8a5 	bl	10005c02 <pinctrl_configure_pins>
10003ab8:	1e04      	subs	r4, r0, #0
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10003aba:	d00d      	beq.n	10003ad8 <pwm_rpi_init+0x40>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
10003abc:	2000      	movs	r0, #0
10003abe:	4b1c      	ldr	r3, [pc, #112]	; (10003b30 <pwm_rpi_init+0x98>)
10003ac0:	2201      	movs	r2, #1
10003ac2:	9302      	str	r3, [sp, #8]
10003ac4:	491b      	ldr	r1, [pc, #108]	; (10003b34 <pwm_rpi_init+0x9c>)
10003ac6:	0003      	movs	r3, r0
10003ac8:	9403      	str	r4, [sp, #12]
10003aca:	9001      	str	r0, [sp, #4]
10003acc:	9000      	str	r0, [sp, #0]
10003ace:	f7ff ffd1 	bl	10003a74 <z_log_msg_runtime_create.constprop.0>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
10003ad2:	0020      	movs	r0, r4
10003ad4:	b007      	add	sp, #28
10003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003ad8:	0021      	movs	r1, r4
	if (err) {
10003ada:	4817      	ldr	r0, [pc, #92]	; (10003b38 <pwm_rpi_init+0xa0>)
10003adc:	1d2b      	adds	r3, r5, #4
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10003ade:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003ae0:	4f16      	ldr	r7, [pc, #88]	; (10003b3c <pwm_rpi_init+0xa4>)
10003ae2:	434a      	muls	r2, r1
10003ae4:	46bc      	mov	ip, r7
10003ae6:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10003ae8:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003aea:	4667      	mov	r7, ip
10003aec:	4d12      	ldr	r5, [pc, #72]	; (10003b38 <pwm_rpi_init+0xa0>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10003aee:	3101      	adds	r1, #1
10003af0:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10003af2:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10003af4:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10003af6:	4f12      	ldr	r7, [pc, #72]	; (10003b40 <pwm_rpi_init+0xa8>)
10003af8:	46bc      	mov	ip, r7
10003afa:	4494      	add	ip, r2
10003afc:	4667      	mov	r7, ip
10003afe:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10003b00:	4f10      	ldr	r7, [pc, #64]	; (10003b44 <pwm_rpi_init+0xac>)
10003b02:	19d2      	adds	r2, r2, r7
10003b04:	4f10      	ldr	r7, [pc, #64]	; (10003b48 <pwm_rpi_init+0xb0>)
10003b06:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10003b08:	2210      	movs	r2, #16
10003b0a:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10003b0c:	602e      	str	r6, [r5, #0]
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, integer >= 1);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10003b0e:	781a      	ldrb	r2, [r3, #0]
10003b10:	785e      	ldrb	r6, [r3, #1]
10003b12:	0112      	lsls	r2, r2, #4
10003b14:	4332      	orrs	r2, r6
10003b16:	606a      	str	r2, [r5, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b18:	2501      	movs	r5, #1
10003b1a:	6802      	ldr	r2, [r0, #0]
10003b1c:	3303      	adds	r3, #3
10003b1e:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003b20:	2280      	movs	r2, #128	; 0x80
10003b22:	0152      	lsls	r2, r2, #5
10003b24:	4302      	orrs	r2, r0
10003b26:	6015      	str	r5, [r2, #0]
10003b28:	3014      	adds	r0, #20
10003b2a:	2908      	cmp	r1, #8
10003b2c:	d1d7      	bne.n	10003ade <pwm_rpi_init+0x46>
10003b2e:	e7d0      	b.n	10003ad2 <pwm_rpi_init+0x3a>
10003b30:	10006b0e 	.word	0x10006b0e
10003b34:	100064bc 	.word	0x100064bc
10003b38:	40050000 	.word	0x40050000
10003b3c:	40050008 	.word	0x40050008
10003b40:	4005000c 	.word	0x4005000c
10003b44:	40050010 	.word	0x40050010
10003b48:	0000ffff 	.word	0x0000ffff

10003b4c <pwm_rpi_set_cycles>:
{
10003b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003b4e:	ac08      	add	r4, sp, #32
10003b50:	8824      	ldrh	r4, [r4, #0]
10003b52:	9300      	str	r3, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10003b54:	290f      	cmp	r1, #15
10003b56:	d843      	bhi.n	10003be0 <pwm_rpi_set_cycles+0x94>
	if (period_cycles - 1 > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10003b58:	2680      	movs	r6, #128	; 0x80
10003b5a:	1e55      	subs	r5, r2, #1
10003b5c:	0276      	lsls	r6, r6, #9
10003b5e:	42b5      	cmp	r5, r6
10003b60:	d23e      	bcs.n	10003be0 <pwm_rpi_set_cycles+0x94>
10003b62:	42b3      	cmp	r3, r6
10003b64:	d23c      	bcs.n	10003be0 <pwm_rpi_set_cycles+0x94>
	return channel % 2;
10003b66:	2601      	movs	r6, #1
10003b68:	000d      	movs	r5, r1
10003b6a:	4035      	ands	r5, r6
10003b6c:	9501      	str	r5, [sp, #4]
10003b6e:	2514      	movs	r5, #20
	return channel / 2;
10003b70:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10003b72:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b74:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10003b76:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b78:	6800      	ldr	r0, [r0, #0]
10003b7a:	1940      	adds	r0, r0, r5
10003b7c:	6803      	ldr	r3, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10003b7e:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10003b80:	4231      	tst	r1, r6
10003b82:	d028      	beq.n	10003bd6 <pwm_rpi_set_cycles+0x8a>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b84:	0899      	lsrs	r1, r3, #2
10003b86:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
10003b88:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10003b8a:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10003b8c:	00c0      	lsls	r0, r0, #3
10003b8e:	00a4      	lsls	r4, r4, #2
10003b90:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003b92:	200c      	movs	r0, #12
10003b94:	4914      	ldr	r1, [pc, #80]	; (10003be8 <pwm_rpi_set_cycles+0x9c>)
	pwm_set_wrap(slice, period_cycles - 1);
10003b96:	3a01      	subs	r2, #1
10003b98:	000b      	movs	r3, r1
10003b9a:	1869      	adds	r1, r5, r1
10003b9c:	680e      	ldr	r6, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
10003b9e:	b292      	uxth	r2, r2
10003ba0:	4074      	eors	r4, r6
10003ba2:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003ba4:	2080      	movs	r0, #128	; 0x80
10003ba6:	0140      	lsls	r0, r0, #5
10003ba8:	4301      	orrs	r1, r0
10003baa:	600c      	str	r4, [r1, #0]
10003bac:	2114      	movs	r1, #20
10003bae:	4379      	muls	r1, r7
10003bb0:	18c9      	adds	r1, r1, r3
    hw_write_masked(
10003bb2:	4b0e      	ldr	r3, [pc, #56]	; (10003bec <pwm_rpi_set_cycles+0xa0>)
    pwm_hw->slice[slice_num].top = wrap;
10003bb4:	610a      	str	r2, [r1, #16]
    hw_write_masked(
10003bb6:	18ed      	adds	r5, r5, r3
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10003bb8:	9b01      	ldr	r3, [sp, #4]
10003bba:	2b00      	cmp	r3, #0
10003bbc:	d00e      	beq.n	10003bdc <pwm_rpi_set_cycles+0x90>
    hw_write_masked(
10003bbe:	9b00      	ldr	r3, [sp, #0]
10003bc0:	4a0b      	ldr	r2, [pc, #44]	; (10003bf0 <pwm_rpi_set_cycles+0xa4>)
10003bc2:	041b      	lsls	r3, r3, #16
10003bc4:	9300      	str	r3, [sp, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003bc6:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003bc8:	4305      	orrs	r5, r0
	return 0;
10003bca:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003bcc:	9b00      	ldr	r3, [sp, #0]
10003bce:	404b      	eors	r3, r1
10003bd0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003bd2:	602a      	str	r2, [r5, #0]
};
10003bd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10003bd6:	08c0      	lsrs	r0, r0, #3
10003bd8:	4030      	ands	r0, r6
10003bda:	e7d7      	b.n	10003b8c <pwm_rpi_set_cycles+0x40>
10003bdc:	4a05      	ldr	r2, [pc, #20]	; (10003bf4 <pwm_rpi_set_cycles+0xa8>)
10003bde:	e7f2      	b.n	10003bc6 <pwm_rpi_set_cycles+0x7a>
		return -EINVAL;
10003be0:	2016      	movs	r0, #22
10003be2:	4240      	negs	r0, r0
10003be4:	e7f6      	b.n	10003bd4 <pwm_rpi_set_cycles+0x88>
10003be6:	46c0      	nop			; (mov r8, r8)
10003be8:	40050000 	.word	0x40050000
10003bec:	4005000c 	.word	0x4005000c
10003bf0:	ffff0000 	.word	0xffff0000
10003bf4:	0000ffff 	.word	0x0000ffff

10003bf8 <pwm_rpi_get_cycles_per_sec>:
{
10003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003bfa:	0015      	movs	r5, r2
	return channel / 2;
10003bfc:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10003bfe:	290f      	cmp	r1, #15
10003c00:	d825      	bhi.n	10003c4e <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10003c02:	2303      	movs	r3, #3
10003c04:	4353      	muls	r3, r2
10003c06:	6844      	ldr	r4, [r0, #4]
10003c08:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10003c0a:	7960      	ldrb	r0, [r4, #5]
10003c0c:	f7fc fd1a 	bl	10000644 <__aeabi_ui2f>
10003c10:	f7fd fed2 	bl	100019b8 <__aeabi_f2d>
10003c14:	2200      	movs	r2, #0
10003c16:	4b0f      	ldr	r3, [pc, #60]	; (10003c54 <pwm_rpi_get_cycles_per_sec+0x5c>)
10003c18:	f7fd f970 	bl	10000efc <__aeabi_dmul>
10003c1c:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10003c1e:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10003c20:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10003c22:	f7fc fd0f 	bl	10000644 <__aeabi_ui2f>
10003c26:	f7fd fec7 	bl	100019b8 <__aeabi_f2d>
10003c2a:	0002      	movs	r2, r0
10003c2c:	000b      	movs	r3, r1
10003c2e:	0030      	movs	r0, r6
10003c30:	0039      	movs	r1, r7
10003c32:	f7fc fd43 	bl	100006bc <__aeabi_dadd>
10003c36:	f7fd ff01 	bl	10001a3c <__aeabi_d2f>
10003c3a:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10003c3c:	4806      	ldr	r0, [pc, #24]	; (10003c58 <pwm_rpi_get_cycles_per_sec+0x60>)
10003c3e:	f7fc fc1f 	bl	10000480 <__aeabi_fdiv>
10003c42:	f7fc fbfd 	bl	10000440 <__aeabi_f2ulz>
10003c46:	6028      	str	r0, [r5, #0]
10003c48:	6069      	str	r1, [r5, #4]
	return 0;
10003c4a:	2000      	movs	r0, #0
}
10003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10003c4e:	2016      	movs	r0, #22
10003c50:	4240      	negs	r0, r0
10003c52:	e7fb      	b.n	10003c4c <pwm_rpi_get_cycles_per_sec+0x54>
10003c54:	3fb00000 	.word	0x3fb00000
10003c58:	4cee6b28 	.word	0x4cee6b28

10003c5c <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10003c5c:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10003c5e:	4903      	ldr	r1, [pc, #12]	; (10003c6c <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10003c60:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10003c62:	6b93      	ldr	r3, [r2, #56]	; 0x38
10003c64:	400b      	ands	r3, r1
10003c66:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10003c68:	4770      	bx	lr
10003c6a:	46c0      	nop			; (mov r8, r8)
10003c6c:	fffff83f 	.word	0xfffff83f

10003c70 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10003c70:	b510      	push	{r4, lr}
10003c72:	2b03      	cmp	r3, #3
10003c74:	d823      	bhi.n	10003cbe <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10003c76:	2a01      	cmp	r2, #1
10003c78:	d002      	beq.n	10003c80 <uart_rpi_set_format.isra.0+0x10>
10003c7a:	2a03      	cmp	r2, #3
10003c7c:	d11f      	bne.n	10003cbe <uart_rpi_set_format.isra.0+0x4e>
10003c7e:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10003c80:	2902      	cmp	r1, #2
10003c82:	d81c      	bhi.n	10003cbe <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10003c84:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c86:	3a01      	subs	r2, #1
10003c88:	480e      	ldr	r0, [pc, #56]	; (10003cc4 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10003c8a:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c8c:	00d2      	lsls	r2, r2, #3
10003c8e:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10003c90:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003c92:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003c94:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003c96:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10003c98:	4299      	cmp	r1, r3
10003c9a:	d005      	beq.n	10003ca8 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003c9c:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003c9e:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003ca0:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10003ca2:	424b      	negs	r3, r1
10003ca4:	4159      	adcs	r1, r3
10003ca6:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10003ca8:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003caa:	236e      	movs	r3, #110	; 0x6e
10003cac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10003cae:	404a      	eors	r2, r1
10003cb0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003cb2:	2380      	movs	r3, #128	; 0x80
10003cb4:	015b      	lsls	r3, r3, #5
10003cb6:	4303      	orrs	r3, r0
	return 0;
10003cb8:	2000      	movs	r0, #0
10003cba:	601a      	str	r2, [r3, #0]
}
10003cbc:	bd10      	pop	{r4, pc}
		return -EINVAL;
10003cbe:	2016      	movs	r0, #22
10003cc0:	4240      	negs	r0, r0
10003cc2:	e7fb      	b.n	10003cbc <uart_rpi_set_format.isra.0+0x4c>
10003cc4:	10006b6b 	.word	0x10006b6b

10003cc8 <uart_rpi_init>:
{
10003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10003cca:	6845      	ldr	r5, [r0, #4]
{
10003ccc:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10003cce:	682b      	ldr	r3, [r5, #0]
{
10003cd0:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10003cd2:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10003cd4:	2100      	movs	r1, #0
10003cd6:	68a8      	ldr	r0, [r5, #8]
10003cd8:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10003cda:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10003cdc:	9301      	str	r3, [sp, #4]
10003cde:	f001 ff7d 	bl	10005bdc <pinctrl_lookup_state>
	if (ret < 0) {
10003ce2:	2800      	cmp	r0, #0
10003ce4:	db23      	blt.n	10003d2e <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
10003ce6:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003ce8:	2200      	movs	r2, #0
10003cea:	7919      	ldrb	r1, [r3, #4]
10003cec:	6818      	ldr	r0, [r3, #0]
10003cee:	f001 ff88 	bl	10005c02 <pinctrl_configure_pins>
	if (ret < 0) {
10003cf2:	2800      	cmp	r0, #0
10003cf4:	db1b      	blt.n	10003d2e <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10003cf6:	6831      	ldr	r1, [r6, #0]
10003cf8:	9801      	ldr	r0, [sp, #4]
10003cfa:	f000 fb33 	bl	10004364 <uart_init>
	if (baudrate == 0) {
10003cfe:	2800      	cmp	r0, #0
10003d00:	d017      	beq.n	10003d32 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10003d02:	4b0d      	ldr	r3, [pc, #52]	; (10003d38 <uart_rpi_init+0x70>)
10003d04:	6030      	str	r0, [r6, #0]
10003d06:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10003d08:	2201      	movs	r2, #1
10003d0a:	2303      	movs	r3, #3
10003d0c:	2100      	movs	r1, #0
10003d0e:	6860      	ldr	r0, [r4, #4]
10003d10:	f7ff ffae 	bl	10003c70 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10003d14:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003d16:	23c0      	movs	r3, #192	; 0xc0
10003d18:	322c      	adds	r2, #44	; 0x2c
10003d1a:	019b      	lsls	r3, r3, #6
10003d1c:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10003d1e:	2600      	movs	r6, #0
10003d20:	2210      	movs	r2, #16
10003d22:	601a      	str	r2, [r3, #0]
10003d24:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10003d26:	0020      	movs	r0, r4
10003d28:	696b      	ldr	r3, [r5, #20]
10003d2a:	4798      	blx	r3
	return 0;
10003d2c:	0030      	movs	r0, r6
}
10003d2e:	b005      	add	sp, #20
10003d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10003d32:	2016      	movs	r0, #22
10003d34:	4240      	negs	r0, r0
10003d36:	e7fa      	b.n	10003d2e <uart_rpi_init+0x66>
10003d38:	00030100 	.word	0x00030100

10003d3c <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10003d3c:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10003d3e:	4b0a      	ldr	r3, [pc, #40]	; (10003d68 <elapsed+0x2c>)
10003d40:	4a0a      	ldr	r2, [pc, #40]	; (10003d6c <elapsed+0x30>)
10003d42:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10003d44:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10003d46:	4d0a      	ldr	r5, [pc, #40]	; (10003d70 <elapsed+0x34>)
10003d48:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10003d4a:	03c9      	lsls	r1, r1, #15
10003d4c:	d401      	bmi.n	10003d52 <elapsed+0x16>
	    || (val1 < val2)) {
10003d4e:	42a0      	cmp	r0, r4
10003d50:	d204      	bcs.n	10003d5c <elapsed+0x20>
		overflow_cyc += last_load;
10003d52:	6811      	ldr	r1, [r2, #0]
10003d54:	6828      	ldr	r0, [r5, #0]
10003d56:	1809      	adds	r1, r1, r0
10003d58:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10003d5a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10003d5c:	682b      	ldr	r3, [r5, #0]
10003d5e:	6810      	ldr	r0, [r2, #0]
10003d60:	18c0      	adds	r0, r0, r3
10003d62:	1b00      	subs	r0, r0, r4
}
10003d64:	bd30      	pop	{r4, r5, pc}
10003d66:	46c0      	nop			; (mov r8, r8)
10003d68:	e000e010 	.word	0xe000e010
10003d6c:	200002f4 	.word	0x200002f4
10003d70:	20000300 	.word	0x20000300

10003d74 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10003d74:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003d76:	4a09      	ldr	r2, [pc, #36]	; (10003d9c <sys_clock_driver_init+0x28>)
10003d78:	6a13      	ldr	r3, [r2, #32]
10003d7a:	021b      	lsls	r3, r3, #8
10003d7c:	0a1b      	lsrs	r3, r3, #8
10003d7e:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10003d80:	4b07      	ldr	r3, [pc, #28]	; (10003da0 <sys_clock_driver_init+0x2c>)
10003d82:	4a08      	ldr	r2, [pc, #32]	; (10003da4 <sys_clock_driver_init+0x30>)
10003d84:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10003d86:	4b08      	ldr	r3, [pc, #32]	; (10003da8 <sys_clock_driver_init+0x34>)
10003d88:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10003d8a:	4b08      	ldr	r3, [pc, #32]	; (10003dac <sys_clock_driver_init+0x38>)
10003d8c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10003d8e:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10003d90:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10003d92:	6819      	ldr	r1, [r3, #0]
10003d94:	430a      	orrs	r2, r1
10003d96:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10003d98:	4770      	bx	lr
10003d9a:	46c0      	nop			; (mov r8, r8)
10003d9c:	e000ed00 	.word	0xe000ed00
10003da0:	20000300 	.word	0x20000300
10003da4:	000030d3 	.word	0x000030d3
10003da8:	200002f4 	.word	0x200002f4
10003dac:	e000e010 	.word	0xe000e010

10003db0 <sys_clock_isr>:
{
10003db0:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10003db2:	f7ff ffc3 	bl	10003d3c <elapsed>
	cycle_count += overflow_cyc;
10003db6:	4b0b      	ldr	r3, [pc, #44]	; (10003de4 <sys_clock_isr+0x34>)
10003db8:	4a0b      	ldr	r2, [pc, #44]	; (10003de8 <sys_clock_isr+0x38>)
10003dba:	6818      	ldr	r0, [r3, #0]
10003dbc:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003dbe:	4c0b      	ldr	r4, [pc, #44]	; (10003dec <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10003dc0:	1840      	adds	r0, r0, r1
10003dc2:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10003dc4:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003dc6:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10003dc8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10003dca:	4909      	ldr	r1, [pc, #36]	; (10003df0 <sys_clock_isr+0x40>)
10003dcc:	1b40      	subs	r0, r0, r5
10003dce:	f7fc f9ff 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10003dd2:	4b07      	ldr	r3, [pc, #28]	; (10003df0 <sys_clock_isr+0x40>)
10003dd4:	4343      	muls	r3, r0
10003dd6:	195b      	adds	r3, r3, r5
10003dd8:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10003dda:	f001 f933 	bl	10005044 <sys_clock_announce>
	z_arm_int_exit();
10003dde:	f7ff fad7 	bl	10003390 <z_arm_exc_exit>
}
10003de2:	bd70      	pop	{r4, r5, r6, pc}
10003de4:	200002f4 	.word	0x200002f4
10003de8:	200002fc 	.word	0x200002fc
10003dec:	200002f8 	.word	0x200002f8
10003df0:	000030d4 	.word	0x000030d4

10003df4 <sys_clock_set_timeout>:
{
10003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
10003df6:	4d32      	ldr	r5, [pc, #200]	; (10003ec0 <sys_clock_set_timeout+0xcc>)
10003df8:	4f32      	ldr	r7, [pc, #200]	; (10003ec4 <sys_clock_set_timeout+0xd0>)
10003dfa:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10003dfc:	2900      	cmp	r1, #0
10003dfe:	d054      	beq.n	10003eaa <sys_clock_set_timeout+0xb6>
10003e00:	1c43      	adds	r3, r0, #1
10003e02:	d108      	bne.n	10003e16 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10003e04:	2201      	movs	r2, #1
10003e06:	682b      	ldr	r3, [r5, #0]
10003e08:	4393      	bics	r3, r2
10003e0a:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10003e0c:	23ff      	movs	r3, #255	; 0xff
10003e0e:	061b      	lsls	r3, r3, #24
10003e10:	603b      	str	r3, [r7, #0]
}
10003e12:	b005      	add	sp, #20
10003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10003e16:	683b      	ldr	r3, [r7, #0]
10003e18:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10003e1a:	2600      	movs	r6, #0
10003e1c:	2801      	cmp	r0, #1
10003e1e:	dd04      	ble.n	10003e2a <sys_clock_set_timeout+0x36>
10003e20:	4b29      	ldr	r3, [pc, #164]	; (10003ec8 <sys_clock_set_timeout+0xd4>)
10003e22:	001e      	movs	r6, r3
10003e24:	4298      	cmp	r0, r3
10003e26:	dc00      	bgt.n	10003e2a <sys_clock_set_timeout+0x36>
10003e28:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10003e2a:	f3ef 8310 	mrs	r3, PRIMASK
10003e2e:	b672      	cpsid	i
10003e30:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10003e32:	f7ff ff83 	bl	10003d3c <elapsed>
	overflow_cyc = 0U;
10003e36:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10003e38:	68ab      	ldr	r3, [r5, #8]
10003e3a:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10003e3c:	4b23      	ldr	r3, [pc, #140]	; (10003ecc <sys_clock_set_timeout+0xd8>)
10003e3e:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10003e40:	4b23      	ldr	r3, [pc, #140]	; (10003ed0 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10003e42:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10003e44:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10003e46:	4b23      	ldr	r3, [pc, #140]	; (10003ed4 <sys_clock_set_timeout+0xe0>)
10003e48:	681b      	ldr	r3, [r3, #0]
10003e4a:	9300      	str	r3, [sp, #0]
10003e4c:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10003e4e:	4290      	cmp	r0, r2
10003e50:	db31      	blt.n	10003eb6 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10003e52:	4b21      	ldr	r3, [pc, #132]	; (10003ed8 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003e54:	4a21      	ldr	r2, [pc, #132]	; (10003edc <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10003e56:	435e      	muls	r6, r3
		delay += unannounced;
10003e58:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10003e5a:	0019      	movs	r1, r3
10003e5c:	1880      	adds	r0, r0, r2
10003e5e:	f7fc f9b7 	bl	100001d0 <__udivsi3>
		delay =
10003e62:	4b1d      	ldr	r3, [pc, #116]	; (10003ed8 <sys_clock_set_timeout+0xe4>)
10003e64:	4358      	muls	r0, r3
		delay -= unannounced;
10003e66:	9b00      	ldr	r3, [sp, #0]
10003e68:	1b1b      	subs	r3, r3, r4
10003e6a:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10003e6c:	2380      	movs	r3, #128	; 0x80
10003e6e:	00db      	lsls	r3, r3, #3
10003e70:	4298      	cmp	r0, r3
10003e72:	d923      	bls.n	10003ebc <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10003e74:	4b1a      	ldr	r3, [pc, #104]	; (10003ee0 <sys_clock_set_timeout+0xec>)
10003e76:	4298      	cmp	r0, r3
10003e78:	d820      	bhi.n	10003ebc <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
10003e7a:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10003e7c:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10003e7e:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10003e80:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10003e82:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10003e84:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10003e86:	9b02      	ldr	r3, [sp, #8]
10003e88:	9802      	ldr	r0, [sp, #8]
10003e8a:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10003e8c:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10003e8e:	4288      	cmp	r0, r1
10003e90:	d202      	bcs.n	10003e98 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10003e92:	9a01      	ldr	r2, [sp, #4]
10003e94:	189b      	adds	r3, r3, r2
10003e96:	191a      	adds	r2, r3, r4
10003e98:	4b0c      	ldr	r3, [pc, #48]	; (10003ecc <sys_clock_set_timeout+0xd8>)
10003e9a:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10003e9c:	9b03      	ldr	r3, [sp, #12]
10003e9e:	2b00      	cmp	r3, #0
10003ea0:	d1b7      	bne.n	10003e12 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10003ea2:	b662      	cpsie	i
10003ea4:	f3bf 8f6f 	isb	sy
10003ea8:	e7b3      	b.n	10003e12 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10003eaa:	683b      	ldr	r3, [r7, #0]
10003eac:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10003eae:	1c43      	adds	r3, r0, #1
10003eb0:	d1b3      	bne.n	10003e1a <sys_clock_set_timeout+0x26>
10003eb2:	4805      	ldr	r0, [pc, #20]	; (10003ec8 <sys_clock_set_timeout+0xd4>)
10003eb4:	e7b8      	b.n	10003e28 <sys_clock_set_timeout+0x34>
10003eb6:	2080      	movs	r0, #128	; 0x80
10003eb8:	00c0      	lsls	r0, r0, #3
10003eba:	e7de      	b.n	10003e7a <sys_clock_set_timeout+0x86>
10003ebc:	0018      	movs	r0, r3
10003ebe:	e7dc      	b.n	10003e7a <sys_clock_set_timeout+0x86>
10003ec0:	e000e010 	.word	0xe000e010
10003ec4:	20000300 	.word	0x20000300
10003ec8:	0000053d 	.word	0x0000053d
10003ecc:	200002fc 	.word	0x200002fc
10003ed0:	200002f4 	.word	0x200002f4
10003ed4:	200002f8 	.word	0x200002f8
10003ed8:	000030d4 	.word	0x000030d4
10003edc:	000030d3 	.word	0x000030d3
10003ee0:	00ffc684 	.word	0x00ffc684

10003ee4 <sys_clock_elapsed>:
{
10003ee4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003ee6:	f3ef 8410 	mrs	r4, PRIMASK
10003eea:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003eec:	f7ff ff26 	bl	10003d3c <elapsed>
10003ef0:	4b07      	ldr	r3, [pc, #28]	; (10003f10 <sys_clock_elapsed+0x2c>)
10003ef2:	4a08      	ldr	r2, [pc, #32]	; (10003f14 <sys_clock_elapsed+0x30>)
10003ef4:	681b      	ldr	r3, [r3, #0]
10003ef6:	6812      	ldr	r2, [r2, #0]
10003ef8:	1a9b      	subs	r3, r3, r2
10003efa:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10003efc:	2c00      	cmp	r4, #0
10003efe:	d102      	bne.n	10003f06 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10003f00:	b662      	cpsie	i
10003f02:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10003f06:	4904      	ldr	r1, [pc, #16]	; (10003f18 <sys_clock_elapsed+0x34>)
10003f08:	f7fc f962 	bl	100001d0 <__udivsi3>
}
10003f0c:	bd10      	pop	{r4, pc}
10003f0e:	46c0      	nop			; (mov r8, r8)
10003f10:	200002fc 	.word	0x200002fc
10003f14:	200002f8 	.word	0x200002f8
10003f18:	000030d4 	.word	0x000030d4

10003f1c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003f1e:	b085      	sub	sp, #20
10003f20:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10003f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003f24:	0005      	movs	r5, r0
10003f26:	000f      	movs	r7, r1
        return false;
10003f28:	2000      	movs	r0, #0
    if (freq > src_freq)
10003f2a:	429a      	cmp	r2, r3
10003f2c:	d863      	bhi.n	10003ff6 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003f2e:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003f30:	0e1a      	lsrs	r2, r3, #24
10003f32:	021b      	lsls	r3, r3, #8
10003f34:	9203      	str	r2, [sp, #12]
10003f36:	9302      	str	r3, [sp, #8]
10003f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003f3a:	0003      	movs	r3, r0
10003f3c:	9903      	ldr	r1, [sp, #12]
10003f3e:	9802      	ldr	r0, [sp, #8]
10003f40:	f7fc fa5e 	bl	10000400 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003f44:	436c      	muls	r4, r5
10003f46:	4b2d      	ldr	r3, [pc, #180]	; (10003ffc <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10003f48:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10003f4a:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10003f4c:	6863      	ldr	r3, [r4, #4]
10003f4e:	4283      	cmp	r3, r0
10003f50:	d200      	bcs.n	10003f54 <clock_configure+0x38>
        clock->div = div;
10003f52:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10003f54:	1f2b      	subs	r3, r5, #4
10003f56:	b2db      	uxtb	r3, r3
10003f58:	9300      	str	r3, [sp, #0]
10003f5a:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10003f5c:	9a00      	ldr	r2, [sp, #0]
10003f5e:	019b      	lsls	r3, r3, #6
10003f60:	4323      	orrs	r3, r4
10003f62:	2a01      	cmp	r2, #1
10003f64:	d81b      	bhi.n	10003f9e <clock_configure+0x82>
10003f66:	2f01      	cmp	r7, #1
10003f68:	d119      	bne.n	10003f9e <clock_configure+0x82>
10003f6a:	2203      	movs	r2, #3
10003f6c:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10003f6e:	68a3      	ldr	r3, [r4, #8]
10003f70:	423b      	tst	r3, r7
10003f72:	d0fc      	beq.n	10003f6e <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10003f74:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003f76:	6823      	ldr	r3, [r4, #0]
10003f78:	0152      	lsls	r2, r2, #5
10003f7a:	405a      	eors	r2, r3
10003f7c:	23e0      	movs	r3, #224	; 0xe0
10003f7e:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003f80:	2380      	movs	r3, #128	; 0x80
10003f82:	015b      	lsls	r3, r3, #5
10003f84:	4323      	orrs	r3, r4
10003f86:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003f88:	2103      	movs	r1, #3
10003f8a:	6822      	ldr	r2, [r4, #0]
10003f8c:	407a      	eors	r2, r7
10003f8e:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003f90:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10003f92:	2301      	movs	r3, #1
10003f94:	40bb      	lsls	r3, r7
10003f96:	68a2      	ldr	r2, [r4, #8]
10003f98:	4213      	tst	r3, r2
10003f9a:	d0fc      	beq.n	10003f96 <clock_configure+0x7a>
10003f9c:	e01a      	b.n	10003fd4 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003f9e:	2280      	movs	r2, #128	; 0x80
10003fa0:	0112      	lsls	r2, r2, #4
10003fa2:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10003fa4:	4b16      	ldr	r3, [pc, #88]	; (10004000 <clock_configure+0xe4>)
10003fa6:	00aa      	lsls	r2, r5, #2
10003fa8:	58d1      	ldr	r1, [r2, r3]
10003faa:	2900      	cmp	r1, #0
10003fac:	d005      	beq.n	10003fba <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003fae:	6958      	ldr	r0, [r3, #20]
10003fb0:	f7fc f90e 	bl	100001d0 <__udivsi3>
10003fb4:	3001      	adds	r0, #1
            asm volatile (
10003fb6:	3801      	subs	r0, #1
10003fb8:	d1fd      	bne.n	10003fb6 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
10003fba:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003fbc:	6823      	ldr	r3, [r4, #0]
10003fbe:	0152      	lsls	r2, r2, #5
10003fc0:	405a      	eors	r2, r3
10003fc2:	23e0      	movs	r3, #224	; 0xe0
10003fc4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003fc6:	2380      	movs	r3, #128	; 0x80
10003fc8:	015b      	lsls	r3, r3, #5
10003fca:	4323      	orrs	r3, r4
10003fcc:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10003fce:	9a00      	ldr	r2, [sp, #0]
10003fd0:	2a01      	cmp	r2, #1
10003fd2:	d9d9      	bls.n	10003f88 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003fd4:	2380      	movs	r3, #128	; 0x80
10003fd6:	2280      	movs	r2, #128	; 0x80
10003fd8:	019b      	lsls	r3, r3, #6
10003fda:	4323      	orrs	r3, r4
10003fdc:	0112      	lsls	r2, r2, #4
10003fde:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003fe0:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10003fe2:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003fe4:	0032      	movs	r2, r6
10003fe6:	2300      	movs	r3, #0
10003fe8:	9903      	ldr	r1, [sp, #12]
10003fea:	f7fc fa09 	bl	10000400 <__aeabi_uldivmod>
10003fee:	4c04      	ldr	r4, [pc, #16]	; (10004000 <clock_configure+0xe4>)
10003ff0:	00ad      	lsls	r5, r5, #2
10003ff2:	5160      	str	r0, [r4, r5]
10003ff4:	2001      	movs	r0, #1

    return true;
}
10003ff6:	b005      	add	sp, #20
10003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003ffa:	46c0      	nop			; (mov r8, r8)
10003ffc:	40008000 	.word	0x40008000
10004000:	20000304 	.word	0x20000304

10004004 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10004004:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10004006:	200c      	movs	r0, #12
10004008:	f000 f8de 	bl	100041c8 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
1000400c:	f000 f8e4 	bl	100041d8 <running_on_fpga>
10004010:	2800      	cmp	r0, #0
10004012:	d00a      	beq.n	1000402a <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10004014:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10004016:	4a2c      	ldr	r2, [pc, #176]	; (100040c8 <clocks_init+0xc4>)
10004018:	482c      	ldr	r0, [pc, #176]	; (100040cc <clocks_init+0xc8>)
1000401a:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
1000401c:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
1000401e:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10004020:	2b0a      	cmp	r3, #10
10004022:	d1fa      	bne.n	1000401a <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10004024:	4b2a      	ldr	r3, [pc, #168]	; (100040d0 <clocks_init+0xcc>)
10004026:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10004028:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
1000402a:	4d2a      	ldr	r5, [pc, #168]	; (100040d4 <clocks_init+0xd0>)
1000402c:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
1000402e:	f000 f8b7 	bl	100041a0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004032:	2201      	movs	r2, #1
10004034:	4b28      	ldr	r3, [pc, #160]	; (100040d8 <clocks_init+0xd4>)
10004036:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10004038:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000403a:	2b01      	cmp	r3, #1
1000403c:	d1fc      	bne.n	10004038 <clocks_init+0x34>
1000403e:	2203      	movs	r2, #3
10004040:	4b26      	ldr	r3, [pc, #152]	; (100040dc <clocks_init+0xd8>)
10004042:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10004044:	6bac      	ldr	r4, [r5, #56]	; 0x38
10004046:	2c01      	cmp	r4, #1
10004048:	d1fc      	bne.n	10004044 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000404a:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000404c:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000404e:	0021      	movs	r1, r4
10004050:	9500      	str	r5, [sp, #0]
10004052:	2306      	movs	r3, #6
10004054:	4a22      	ldr	r2, [pc, #136]	; (100040e0 <clocks_init+0xdc>)
10004056:	4823      	ldr	r0, [pc, #140]	; (100040e4 <clocks_init+0xe0>)
10004058:	f000 f854 	bl	10004104 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000405c:	0033      	movs	r3, r6
1000405e:	0021      	movs	r1, r4
10004060:	4a21      	ldr	r2, [pc, #132]	; (100040e8 <clocks_init+0xe4>)
10004062:	4822      	ldr	r0, [pc, #136]	; (100040ec <clocks_init+0xe8>)
10004064:	9600      	str	r6, [sp, #0]
10004066:	f000 f84d 	bl	10004104 <pll_init>
    clock_configure(clk_ref,
1000406a:	4b21      	ldr	r3, [pc, #132]	; (100040f0 <clocks_init+0xec>)
1000406c:	0029      	movs	r1, r5
    clock_configure(clk_sys,
1000406e:	4d21      	ldr	r5, [pc, #132]	; (100040f4 <clocks_init+0xf0>)
    clock_configure(clk_ref,
10004070:	9300      	str	r3, [sp, #0]
10004072:	2200      	movs	r2, #0
10004074:	2004      	movs	r0, #4
10004076:	f7ff ff51 	bl	10003f1c <clock_configure>
    clock_configure(clk_sys,
1000407a:	002b      	movs	r3, r5
1000407c:	0021      	movs	r1, r4
1000407e:	2200      	movs	r2, #0
10004080:	0030      	movs	r0, r6
10004082:	9500      	str	r5, [sp, #0]
10004084:	f7ff ff4a 	bl	10003f1c <clock_configure>
    clock_configure(clk_usb,
10004088:	2200      	movs	r2, #0
1000408a:	4c10      	ldr	r4, [pc, #64]	; (100040cc <clocks_init+0xc8>)
1000408c:	0011      	movs	r1, r2
1000408e:	0023      	movs	r3, r4
10004090:	9400      	str	r4, [sp, #0]
10004092:	2007      	movs	r0, #7
10004094:	f7ff ff42 	bl	10003f1c <clock_configure>
    clock_configure(clk_adc,
10004098:	2200      	movs	r2, #0
1000409a:	0023      	movs	r3, r4
1000409c:	0011      	movs	r1, r2
1000409e:	9400      	str	r4, [sp, #0]
100040a0:	2008      	movs	r0, #8
100040a2:	f7ff ff3b 	bl	10003f1c <clock_configure>
    clock_configure(clk_rtc,
100040a6:	2200      	movs	r2, #0
100040a8:	4b09      	ldr	r3, [pc, #36]	; (100040d0 <clocks_init+0xcc>)
100040aa:	0011      	movs	r1, r2
100040ac:	9300      	str	r3, [sp, #0]
100040ae:	2009      	movs	r0, #9
100040b0:	0023      	movs	r3, r4
100040b2:	f7ff ff33 	bl	10003f1c <clock_configure>
    clock_configure(clk_peri,
100040b6:	2200      	movs	r2, #0
100040b8:	002b      	movs	r3, r5
100040ba:	0011      	movs	r1, r2
100040bc:	9500      	str	r5, [sp, #0]
100040be:	2006      	movs	r0, #6
100040c0:	f7ff ff2c 	bl	10003f1c <clock_configure>
100040c4:	e7b0      	b.n	10004028 <clocks_init+0x24>
100040c6:	46c0      	nop			; (mov r8, r8)
100040c8:	20000304 	.word	0x20000304
100040cc:	02dc6c00 	.word	0x02dc6c00
100040d0:	0000b71b 	.word	0x0000b71b
100040d4:	40008000 	.word	0x40008000
100040d8:	4000b03c 	.word	0x4000b03c
100040dc:	4000b030 	.word	0x4000b030
100040e0:	59682f00 	.word	0x59682f00
100040e4:	40028000 	.word	0x40028000
100040e8:	47868c00 	.word	0x47868c00
100040ec:	4002c000 	.word	0x4002c000
100040f0:	00b71b00 	.word	0x00b71b00
100040f4:	07735940 	.word	0x07735940

100040f8 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100040f8:	4b01      	ldr	r3, [pc, #4]	; (10004100 <clock_get_hz+0x8>)
100040fa:	0080      	lsls	r0, r0, #2
100040fc:	58c0      	ldr	r0, [r0, r3]
}
100040fe:	4770      	bx	lr
10004100:	20000304 	.word	0x20000304

10004104 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004106:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10004108:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000410a:	0017      	movs	r7, r2
1000410c:	001e      	movs	r6, r3
1000410e:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10004110:	f7fc f85e 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10004114:	491d      	ldr	r1, [pc, #116]	; (1000418c <pll_init+0x88>)
10004116:	4341      	muls	r1, r0
10004118:	0038      	movs	r0, r7
1000411a:	f7fc f859 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000411e:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10004120:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10004122:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10004124:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10004126:	6822      	ldr	r2, [r4, #0]
10004128:	2a00      	cmp	r2, #0
1000412a:	da0f      	bge.n	1000414c <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000412c:	213f      	movs	r1, #63	; 0x3f
1000412e:	6822      	ldr	r2, [r4, #0]
10004130:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10004132:	42aa      	cmp	r2, r5
10004134:	d10a      	bne.n	1000414c <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10004136:	68a2      	ldr	r2, [r4, #8]
10004138:	0512      	lsls	r2, r2, #20
1000413a:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000413c:	4282      	cmp	r2, r0
1000413e:	d105      	bne.n	1000414c <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10004140:	21ee      	movs	r1, #238	; 0xee
10004142:	68e2      	ldr	r2, [r4, #12]
10004144:	02c9      	lsls	r1, r1, #11
10004146:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10004148:	429a      	cmp	r2, r3
1000414a:	d01b      	beq.n	10004184 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000414c:	4a10      	ldr	r2, [pc, #64]	; (10004190 <pll_init+0x8c>)
1000414e:	4294      	cmp	r4, r2
10004150:	d019      	beq.n	10004186 <pll_init+0x82>
10004152:	2280      	movs	r2, #128	; 0x80
10004154:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004156:	490f      	ldr	r1, [pc, #60]	; (10004194 <pll_init+0x90>)
10004158:	4e0f      	ldr	r6, [pc, #60]	; (10004198 <pll_init+0x94>)
1000415a:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000415c:	490f      	ldr	r1, [pc, #60]	; (1000419c <pll_init+0x98>)
1000415e:	600a      	str	r2, [r1, #0]
10004160:	0017      	movs	r7, r2
10004162:	68b1      	ldr	r1, [r6, #8]
10004164:	438f      	bics	r7, r1
10004166:	d1fb      	bne.n	10004160 <pll_init+0x5c>
10004168:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000416a:	1d21      	adds	r1, r4, #4
1000416c:	0192      	lsls	r2, r2, #6
1000416e:	430a      	orrs	r2, r1
10004170:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10004172:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10004174:	60a0      	str	r0, [r4, #8]
10004176:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10004178:	6821      	ldr	r1, [r4, #0]
1000417a:	2900      	cmp	r1, #0
1000417c:	dafc      	bge.n	10004178 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
1000417e:	60e3      	str	r3, [r4, #12]
10004180:	2308      	movs	r3, #8
10004182:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10004186:	2280      	movs	r2, #128	; 0x80
10004188:	0192      	lsls	r2, r2, #6
1000418a:	e7e4      	b.n	10004156 <pll_init+0x52>
1000418c:	000f4240 	.word	0x000f4240
10004190:	4002c000 	.word	0x4002c000
10004194:	4000e000 	.word	0x4000e000
10004198:	4000c000 	.word	0x4000c000
1000419c:	4000f000 	.word	0x4000f000

100041a0 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100041a0:	22aa      	movs	r2, #170	; 0xaa
100041a2:	4b06      	ldr	r3, [pc, #24]	; (100041bc <xosc_init+0x1c>)
100041a4:	0112      	lsls	r2, r2, #4
100041a6:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100041a8:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100041aa:	4905      	ldr	r1, [pc, #20]	; (100041c0 <xosc_init+0x20>)
100041ac:	60da      	str	r2, [r3, #12]
100041ae:	4a05      	ldr	r2, [pc, #20]	; (100041c4 <xosc_init+0x24>)
100041b0:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100041b2:	685a      	ldr	r2, [r3, #4]
100041b4:	2a00      	cmp	r2, #0
100041b6:	dafc      	bge.n	100041b2 <xosc_init+0x12>
}
100041b8:	4770      	bx	lr
100041ba:	46c0      	nop			; (mov r8, r8)
100041bc:	40024000 	.word	0x40024000
100041c0:	00fab000 	.word	0x00fab000
100041c4:	40026000 	.word	0x40026000

100041c8 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100041c8:	2380      	movs	r3, #128	; 0x80
100041ca:	4a02      	ldr	r2, [pc, #8]	; (100041d4 <watchdog_start_tick+0xc>)
100041cc:	009b      	lsls	r3, r3, #2
100041ce:	4303      	orrs	r3, r0
100041d0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100041d2:	4770      	bx	lr
100041d4:	40058000 	.word	0x40058000

100041d8 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100041d8:	4b02      	ldr	r3, [pc, #8]	; (100041e4 <running_on_fpga+0xc>)
100041da:	6818      	ldr	r0, [r3, #0]
100041dc:	0780      	lsls	r0, r0, #30
100041de:	0fc0      	lsrs	r0, r0, #31
}
100041e0:	4770      	bx	lr
100041e2:	46c0      	nop			; (mov r8, r8)
100041e4:	4006c000 	.word	0x4006c000

100041e8 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100041e8:	4b08      	ldr	r3, [pc, #32]	; (1000420c <gpio_set_function+0x24>)
100041ea:	0082      	lsls	r2, r0, #2
100041ec:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100041ee:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100041f0:	b510      	push	{r4, lr}
100041f2:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100041f4:	00c0      	lsls	r0, r0, #3
100041f6:	4063      	eors	r3, r4
100041f8:	24c0      	movs	r4, #192	; 0xc0
100041fa:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100041fc:	2480      	movs	r4, #128	; 0x80
100041fe:	0164      	lsls	r4, r4, #5
10004200:	4322      	orrs	r2, r4
10004202:	6013      	str	r3, [r2, #0]
10004204:	4b02      	ldr	r3, [pc, #8]	; (10004210 <gpio_set_function+0x28>)
10004206:	18c0      	adds	r0, r0, r3
10004208:	6041      	str	r1, [r0, #4]
}
1000420a:	bd10      	pop	{r4, pc}
1000420c:	4001c004 	.word	0x4001c004
10004210:	40014000 	.word	0x40014000

10004214 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
10004214:	4b07      	ldr	r3, [pc, #28]	; (10004234 <gpio_set_pulls+0x20>)
10004216:	0080      	lsls	r0, r0, #2
10004218:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000421a:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
1000421c:	00c9      	lsls	r1, r1, #3
1000421e:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10004220:	430a      	orrs	r2, r1
10004222:	405a      	eors	r2, r3
10004224:	230c      	movs	r3, #12
10004226:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004228:	2380      	movs	r3, #128	; 0x80
1000422a:	015b      	lsls	r3, r3, #5
1000422c:	4303      	orrs	r3, r0
1000422e:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10004230:	4770      	bx	lr
10004232:	46c0      	nop			; (mov r8, r8)
10004234:	4001c004 	.word	0x4001c004

10004238 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10004238:	4b05      	ldr	r3, [pc, #20]	; (10004250 <gpio_set_input_hysteresis_enabled+0x18>)
1000423a:	0080      	lsls	r0, r0, #2
1000423c:	18c0      	adds	r0, r0, r3
1000423e:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004240:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10004242:	2900      	cmp	r1, #0
10004244:	d100      	bne.n	10004248 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004246:	23c0      	movs	r3, #192	; 0xc0
10004248:	019b      	lsls	r3, r3, #6
1000424a:	4303      	orrs	r3, r0
1000424c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000424e:	4770      	bx	lr
10004250:	4001c004 	.word	0x4001c004

10004254 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10004254:	4b05      	ldr	r3, [pc, #20]	; (1000426c <gpio_set_slew_rate+0x18>)
10004256:	0080      	lsls	r0, r0, #2
10004258:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000425a:	6803      	ldr	r3, [r0, #0]
1000425c:	4059      	eors	r1, r3
1000425e:	2301      	movs	r3, #1
10004260:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004262:	2380      	movs	r3, #128	; 0x80
10004264:	015b      	lsls	r3, r3, #5
10004266:	4303      	orrs	r3, r0
10004268:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000426a:	4770      	bx	lr
1000426c:	4001c004 	.word	0x4001c004

10004270 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10004270:	4b06      	ldr	r3, [pc, #24]	; (1000428c <gpio_set_drive_strength+0x1c>)
10004272:	0080      	lsls	r0, r0, #2
10004274:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004276:	6803      	ldr	r3, [r0, #0]
10004278:	0109      	lsls	r1, r1, #4
1000427a:	4059      	eors	r1, r3
1000427c:	2330      	movs	r3, #48	; 0x30
1000427e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004280:	2380      	movs	r3, #128	; 0x80
10004282:	015b      	lsls	r3, r3, #5
10004284:	4303      	orrs	r3, r0
10004286:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10004288:	4770      	bx	lr
1000428a:	46c0      	nop			; (mov r8, r8)
1000428c:	4001c004 	.word	0x4001c004

10004290 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
10004290:	2207      	movs	r2, #7
10004292:	08c3      	lsrs	r3, r0, #3
10004294:	4010      	ands	r0, r2
10004296:	0080      	lsls	r0, r0, #2
10004298:	4081      	lsls	r1, r0
1000429a:	4a02      	ldr	r2, [pc, #8]	; (100042a4 <gpio_acknowledge_irq+0x14>)
1000429c:	333c      	adds	r3, #60	; 0x3c
1000429e:	009b      	lsls	r3, r3, #2
100042a0:	5099      	str	r1, [r3, r2]
}
100042a2:	4770      	bx	lr
100042a4:	40014000 	.word	0x40014000

100042a8 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100042aa:	23d0      	movs	r3, #208	; 0xd0
100042ac:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100042ae:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100042b0:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100042b2:	4263      	negs	r3, r4
100042b4:	415c      	adcs	r4, r3
100042b6:	232f      	movs	r3, #47	; 0x2f
100042b8:	4264      	negs	r4, r4
100042ba:	439c      	bics	r4, r3
100042bc:	4b0a      	ldr	r3, [pc, #40]	; (100042e8 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100042be:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100042c0:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100042c2:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
100042c4:	f7ff ffe4 	bl	10004290 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
100042c8:	2307      	movs	r3, #7
100042ca:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100042cc:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
100042ce:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100042d0:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
100042d2:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100042d4:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042d6:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100042d8:	2e00      	cmp	r6, #0
100042da:	d100      	bne.n	100042de <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100042dc:	23c0      	movs	r3, #192	; 0xc0
100042de:	019b      	lsls	r3, r3, #6
100042e0:	4323      	orrs	r3, r4
100042e2:	601f      	str	r7, [r3, #0]
}
100042e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100042e6:	46c0      	nop			; (mov r8, r8)
100042e8:	40014130 	.word	0x40014130

100042ec <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100042ec:	4b05      	ldr	r3, [pc, #20]	; (10004304 <gpio_set_input_enabled+0x18>)
100042ee:	0080      	lsls	r0, r0, #2
100042f0:	18c0      	adds	r0, r0, r3
100042f2:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042f4:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100042f6:	2900      	cmp	r1, #0
100042f8:	d100      	bne.n	100042fc <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100042fa:	23c0      	movs	r3, #192	; 0xc0
100042fc:	019b      	lsls	r3, r3, #6
100042fe:	4303      	orrs	r3, r0
10004300:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10004302:	4770      	bx	lr
10004304:	4001c004 	.word	0x4001c004

10004308 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10004308:	b570      	push	{r4, r5, r6, lr}
1000430a:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
1000430c:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000430e:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10004310:	f7ff fef2 	bl	100040f8 <clock_get_hz>
10004314:	0021      	movs	r1, r4
10004316:	00c0      	lsls	r0, r0, #3
10004318:	f7fb ff5a 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
1000431c:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
1000431e:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10004320:	d007      	beq.n	10004332 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10004322:	4b0e      	ldr	r3, [pc, #56]	; (1000435c <uart_set_baudrate+0x54>)
10004324:	429d      	cmp	r5, r3
10004326:	d815      	bhi.n	10004354 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10004328:	237f      	movs	r3, #127	; 0x7f
1000432a:	4018      	ands	r0, r3
1000432c:	1900      	adds	r0, r0, r4
1000432e:	002c      	movs	r4, r5
10004330:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004332:	2380      	movs	r3, #128	; 0x80
10004334:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10004336:	6274      	str	r4, [r6, #36]	; 0x24
10004338:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
1000433a:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
1000433c:	362c      	adds	r6, #44	; 0x2c
1000433e:	4333      	orrs	r3, r6
10004340:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10004342:	2006      	movs	r0, #6
10004344:	f7ff fed8 	bl	100040f8 <clock_get_hz>
10004348:	01a1      	lsls	r1, r4, #6
1000434a:	1949      	adds	r1, r1, r5
1000434c:	0080      	lsls	r0, r0, #2
1000434e:	f7fb ff3f 	bl	100001d0 <__udivsi3>
}
10004352:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10004354:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10004356:	4c02      	ldr	r4, [pc, #8]	; (10004360 <uart_set_baudrate+0x58>)
10004358:	e7eb      	b.n	10004332 <uart_set_baudrate+0x2a>
1000435a:	46c0      	nop			; (mov r8, r8)
1000435c:	0000fffe 	.word	0x0000fffe
10004360:	0000ffff 	.word	0x0000ffff

10004364 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10004364:	b570      	push	{r4, r5, r6, lr}
10004366:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10004368:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000436a:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
1000436c:	f7ff fec4 	bl	100040f8 <clock_get_hz>
10004370:	2800      	cmp	r0, #0
10004372:	d02e      	beq.n	100043d2 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10004374:	4b19      	ldr	r3, [pc, #100]	; (100043dc <uart_init+0x78>)
10004376:	429c      	cmp	r4, r3
10004378:	d02c      	beq.n	100043d4 <uart_init+0x70>
1000437a:	2380      	movs	r3, #128	; 0x80
1000437c:	03db      	lsls	r3, r3, #15
1000437e:	4a18      	ldr	r2, [pc, #96]	; (100043e0 <uart_init+0x7c>)
10004380:	4918      	ldr	r1, [pc, #96]	; (100043e4 <uart_init+0x80>)
10004382:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004384:	4a18      	ldr	r2, [pc, #96]	; (100043e8 <uart_init+0x84>)
10004386:	6013      	str	r3, [r2, #0]
10004388:	0018      	movs	r0, r3
1000438a:	688a      	ldr	r2, [r1, #8]
1000438c:	4390      	bics	r0, r2
1000438e:	d1fb      	bne.n	10004388 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10004390:	4b16      	ldr	r3, [pc, #88]	; (100043ec <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10004392:	4a17      	ldr	r2, [pc, #92]	; (100043f0 <uart_init+0x8c>)
10004394:	18e3      	adds	r3, r4, r3
10004396:	4259      	negs	r1, r3
10004398:	414b      	adcs	r3, r1
1000439a:	2180      	movs	r1, #128	; 0x80
1000439c:	005b      	lsls	r3, r3, #1
1000439e:	0049      	lsls	r1, r1, #1
100043a0:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
100043a2:	0020      	movs	r0, r4
100043a4:	0029      	movs	r1, r5
100043a6:	f7ff ffaf 	bl	10004308 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100043aa:	2360      	movs	r3, #96	; 0x60
100043ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100043ae:	0021      	movs	r1, r4
100043b0:	4053      	eors	r3, r2
100043b2:	226e      	movs	r2, #110	; 0x6e
100043b4:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100043b6:	2280      	movs	r2, #128	; 0x80
100043b8:	312c      	adds	r1, #44	; 0x2c
100043ba:	0152      	lsls	r2, r2, #5
100043bc:	430a      	orrs	r2, r1
100043be:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
100043c0:	4b0c      	ldr	r3, [pc, #48]	; (100043f4 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100043c2:	2210      	movs	r2, #16
100043c4:	6323      	str	r3, [r4, #48]	; 0x30
100043c6:	2380      	movs	r3, #128	; 0x80
100043c8:	019b      	lsls	r3, r3, #6
100043ca:	430b      	orrs	r3, r1
100043cc:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
100043ce:	2303      	movs	r3, #3
100043d0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100043d2:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100043d4:	2380      	movs	r3, #128	; 0x80
100043d6:	041b      	lsls	r3, r3, #16
100043d8:	e7d1      	b.n	1000437e <uart_init+0x1a>
100043da:	46c0      	nop			; (mov r8, r8)
100043dc:	40038000 	.word	0x40038000
100043e0:	4000e000 	.word	0x4000e000
100043e4:	4000c000 	.word	0x4000c000
100043e8:	4000f000 	.word	0x4000f000
100043ec:	bffc8000 	.word	0xbffc8000
100043f0:	20000364 	.word	0x20000364
100043f4:	00000301 	.word	0x00000301

100043f8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100043f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100043fa:	0004      	movs	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
100043fc:	f7fe fbe2 	bl	10002bc4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
10004400:	2000      	movs	r0, #0
10004402:	4b06      	ldr	r3, [pc, #24]	; (1000441c <k_sys_fatal_error_handler+0x24>)
10004404:	9001      	str	r0, [sp, #4]
10004406:	9302      	str	r3, [sp, #8]
10004408:	9000      	str	r0, [sp, #0]
1000440a:	0003      	movs	r3, r0
1000440c:	2201      	movs	r2, #1
1000440e:	4904      	ldr	r1, [pc, #16]	; (10004420 <k_sys_fatal_error_handler+0x28>)
10004410:	f001 fda6 	bl	10005f60 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
10004414:	0020      	movs	r0, r4
10004416:	f001 fdb2 	bl	10005f7e <arch_system_halt>
1000441a:	46c0      	nop			; (mov r8, r8)
1000441c:	10006b7c 	.word	0x10006b7c
10004420:	100064b4 	.word	0x100064b4

10004424 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10004424:	b5f0      	push	{r4, r5, r6, r7, lr}
10004426:	0006      	movs	r6, r0
10004428:	000f      	movs	r7, r1
1000442a:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile("mrs %0, PRIMASK;"
1000442c:	f3ef 8310 	mrs	r3, PRIMASK
10004430:	b672      	cpsid	i
10004432:	9307      	str	r3, [sp, #28]
	return z_impl_z_current_get();
10004434:	f000 fcc0 	bl	10004db8 <z_impl_z_current_get>
10004438:	4b26      	ldr	r3, [pc, #152]	; (100044d4 <z_fatal_error+0xb0>)
1000443a:	0005      	movs	r5, r0
	switch (reason) {
1000443c:	2e04      	cmp	r6, #4
1000443e:	d802      	bhi.n	10004446 <z_fatal_error+0x22>
10004440:	4b25      	ldr	r3, [pc, #148]	; (100044d8 <z_fatal_error+0xb4>)
10004442:	00b2      	lsls	r2, r6, #2
10004444:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
10004446:	2400      	movs	r4, #0
10004448:	4a24      	ldr	r2, [pc, #144]	; (100044dc <z_fatal_error+0xb8>)
1000444a:	9304      	str	r3, [sp, #16]
1000444c:	4b24      	ldr	r3, [pc, #144]	; (100044e0 <z_fatal_error+0xbc>)
1000444e:	9206      	str	r2, [sp, #24]
10004450:	9302      	str	r3, [sp, #8]
10004452:	2201      	movs	r2, #1
10004454:	0023      	movs	r3, r4
10004456:	0020      	movs	r0, r4
10004458:	9906      	ldr	r1, [sp, #24]
1000445a:	9405      	str	r4, [sp, #20]
1000445c:	9603      	str	r6, [sp, #12]
1000445e:	9401      	str	r4, [sp, #4]
10004460:	9400      	str	r4, [sp, #0]
10004462:	f001 fd7d 	bl	10005f60 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
10004466:	42a7      	cmp	r7, r4
10004468:	d00d      	beq.n	10004486 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
1000446a:	69fb      	ldr	r3, [r7, #28]
1000446c:	05db      	lsls	r3, r3, #23
1000446e:	42a3      	cmp	r3, r4
10004470:	d009      	beq.n	10004486 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
10004472:	4b1c      	ldr	r3, [pc, #112]	; (100044e4 <z_fatal_error+0xc0>)
10004474:	2201      	movs	r2, #1
10004476:	9302      	str	r3, [sp, #8]
10004478:	0020      	movs	r0, r4
1000447a:	0023      	movs	r3, r4
1000447c:	9906      	ldr	r1, [sp, #24]
1000447e:	9401      	str	r4, [sp, #4]
10004480:	9400      	str	r4, [sp, #0]
10004482:	f001 fd6d 	bl	10005f60 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
10004486:	2d00      	cmp	r5, #0
10004488:	d007      	beq.n	1000449a <z_fatal_error+0x76>
1000448a:	0028      	movs	r0, r5
1000448c:	f001 fd8c 	bl	10005fa8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
10004490:	2800      	cmp	r0, #0
10004492:	d002      	beq.n	1000449a <z_fatal_error+0x76>
10004494:	7803      	ldrb	r3, [r0, #0]
10004496:	2b00      	cmp	r3, #0
10004498:	d100      	bne.n	1000449c <z_fatal_error+0x78>
		thread_name = "unknown";
1000449a:	4813      	ldr	r0, [pc, #76]	; (100044e8 <z_fatal_error+0xc4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
1000449c:	9004      	str	r0, [sp, #16]
1000449e:	2000      	movs	r0, #0
100044a0:	4b12      	ldr	r3, [pc, #72]	; (100044ec <z_fatal_error+0xc8>)
100044a2:	2201      	movs	r2, #1
100044a4:	9906      	ldr	r1, [sp, #24]
100044a6:	9302      	str	r3, [sp, #8]
100044a8:	9001      	str	r0, [sp, #4]
100044aa:	0003      	movs	r3, r0
100044ac:	9000      	str	r0, [sp, #0]
100044ae:	9503      	str	r5, [sp, #12]
100044b0:	f001 fd56 	bl	10005f60 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100044b4:	0039      	movs	r1, r7
100044b6:	0030      	movs	r0, r6
100044b8:	f7ff ff9e 	bl	100043f8 <k_sys_fatal_error_handler>
	if (key != 0U) {
100044bc:	9b07      	ldr	r3, [sp, #28]
100044be:	2b00      	cmp	r3, #0
100044c0:	d102      	bne.n	100044c8 <z_fatal_error+0xa4>
	__asm__ volatile(
100044c2:	b662      	cpsie	i
100044c4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100044c8:	0028      	movs	r0, r5
100044ca:	f7ff f82d 	bl	10003528 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100044ce:	b009      	add	sp, #36	; 0x24
100044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100044d2:	46c0      	nop			; (mov r8, r8)
100044d4:	10006b8b 	.word	0x10006b8b
100044d8:	1000665c 	.word	0x1000665c
100044dc:	100064b4 	.word	0x100064b4
100044e0:	10006ba1 	.word	0x10006ba1
100044e4:	10006bc9 	.word	0x10006bc9
100044e8:	10006b99 	.word	0x10006b99
100044ec:	10006bea 	.word	0x10006bea

100044f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100044f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100044f2:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100044f4:	4e10      	ldr	r6, [pc, #64]	; (10004538 <z_sys_init_run_level+0x48>)
100044f6:	0083      	lsls	r3, r0, #2
100044f8:	3001      	adds	r0, #1
100044fa:	599c      	ldr	r4, [r3, r6]
100044fc:	0083      	lsls	r3, r0, #2
100044fe:	9301      	str	r3, [sp, #4]
10004500:	9b01      	ldr	r3, [sp, #4]
10004502:	58f3      	ldr	r3, [r6, r3]
10004504:	42a3      	cmp	r3, r4
10004506:	d800      	bhi.n	1000450a <z_sys_init_run_level+0x1a>
		}
	}
}
10004508:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
1000450a:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
1000450c:	6823      	ldr	r3, [r4, #0]
1000450e:	0028      	movs	r0, r5
10004510:	4798      	blx	r3
		if (dev != NULL) {
10004512:	2d00      	cmp	r5, #0
10004514:	d00d      	beq.n	10004532 <z_sys_init_run_level+0x42>
			if (rc != 0) {
10004516:	2800      	cmp	r0, #0
10004518:	d007      	beq.n	1000452a <z_sys_init_run_level+0x3a>
				if (rc < 0) {
1000451a:	17c2      	asrs	r2, r0, #31
1000451c:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
1000451e:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
10004520:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
10004522:	28ff      	cmp	r0, #255	; 0xff
10004524:	dd00      	ble.n	10004528 <z_sys_init_run_level+0x38>
10004526:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
10004528:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
1000452a:	68ea      	ldr	r2, [r5, #12]
1000452c:	7853      	ldrb	r3, [r2, #1]
1000452e:	433b      	orrs	r3, r7
10004530:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10004532:	3408      	adds	r4, #8
10004534:	e7e4      	b.n	10004500 <z_sys_init_run_level+0x10>
10004536:	46c0      	nop			; (mov r8, r8)
10004538:	10006670 	.word	0x10006670

1000453c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
1000453c:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000453e:	2401      	movs	r4, #1
10004540:	4b09      	ldr	r3, [pc, #36]	; (10004568 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10004542:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10004544:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10004546:	f7ff ffd3 	bl	100044f0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
1000454a:	f000 ff29 	bl	100053a0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
1000454e:	2004      	movs	r0, #4
10004550:	f7ff ffce 	bl	100044f0 <z_sys_init_run_level>

	z_init_static_threads();
10004554:	f000 f8fc 	bl	10004750 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10004558:	f7fd fc4e 	bl	10001df8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
1000455c:	4a03      	ldr	r2, [pc, #12]	; (1000456c <bg_thread_main+0x30>)
1000455e:	7b13      	ldrb	r3, [r2, #12]
10004560:	43a3      	bics	r3, r4
10004562:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10004564:	bd10      	pop	{r4, pc}
10004566:	46c0      	nop			; (mov r8, r8)
10004568:	2000036b 	.word	0x2000036b
1000456c:	20000180 	.word	0x20000180

10004570 <z_bss_zero>:
{
10004570:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10004572:	4a03      	ldr	r2, [pc, #12]	; (10004580 <z_bss_zero+0x10>)
10004574:	4803      	ldr	r0, [pc, #12]	; (10004584 <z_bss_zero+0x14>)
10004576:	2100      	movs	r1, #0
10004578:	1a12      	subs	r2, r2, r0
1000457a:	f001 fd04 	bl	10005f86 <z_early_memset>
}
1000457e:	bd10      	pop	{r4, pc}
10004580:	20000370 	.word	0x20000370
10004584:	20000108 	.word	0x20000108

10004588 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10004588:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
1000458a:	2678      	movs	r6, #120	; 0x78
	z_setup_new_thread(thread, stack,
1000458c:	2501      	movs	r5, #1
{
1000458e:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10004590:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10004592:	0201      	lsls	r1, r0, #8
10004594:	4811      	ldr	r0, [pc, #68]	; (100045dc <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10004596:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10004598:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
1000459a:	2000      	movs	r0, #0
{
1000459c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000459e:	9504      	str	r5, [sp, #16]
100045a0:	350e      	adds	r5, #14
100045a2:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100045a4:	3505      	adds	r5, #5
100045a6:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
100045a8:	4b0d      	ldr	r3, [pc, #52]	; (100045e0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
100045aa:	9005      	str	r0, [sp, #20]
100045ac:	9002      	str	r0, [sp, #8]
100045ae:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100045b0:	480c      	ldr	r0, [pc, #48]	; (100045e4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
100045b2:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100045b4:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
100045b6:	4b0c      	ldr	r3, [pc, #48]	; (100045e8 <z_init_cpu+0x60>)
100045b8:	0030      	movs	r0, r6
100045ba:	9500      	str	r5, [sp, #0]
100045bc:	0052      	lsls	r2, r2, #1
100045be:	f000 f871 	bl	100046a4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
100045c2:	2204      	movs	r2, #4
100045c4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
100045c6:	742c      	strb	r4, [r5, #16]
100045c8:	4393      	bics	r3, r2
100045ca:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
100045cc:	3401      	adds	r4, #1
100045ce:	4b07      	ldr	r3, [pc, #28]	; (100045ec <z_init_cpu+0x64>)
100045d0:	02e4      	lsls	r4, r4, #11
100045d2:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100045d4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100045d6:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100045d8:	b006      	add	sp, #24
100045da:	bd70      	pop	{r4, r5, r6, pc}
100045dc:	20000b70 	.word	0x20000b70
100045e0:	20000108 	.word	0x20000108
100045e4:	2000032c 	.word	0x2000032c
100045e8:	10005fb5 	.word	0x10005fb5
100045ec:	20000370 	.word	0x20000370

100045f0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
100045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100045f2:	2000      	movs	r0, #0
{
100045f4:	b0a5      	sub	sp, #148	; 0x94
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100045f6:	f7ff ff7b 	bl	100044f0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100045fa:	4b22      	ldr	r3, [pc, #136]	; (10004684 <z_cstart+0x94>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100045fc:	f383 8808 	msr	MSP, r3
10004600:	4921      	ldr	r1, [pc, #132]	; (10004688 <z_cstart+0x98>)
10004602:	4b22      	ldr	r3, [pc, #136]	; (1000468c <z_cstart+0x9c>)
10004604:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10004606:	2500      	movs	r5, #0
10004608:	401a      	ands	r2, r3
1000460a:	23e0      	movs	r3, #224	; 0xe0
1000460c:	041b      	lsls	r3, r3, #16
1000460e:	4313      	orrs	r3, r2
10004610:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10004612:	f001 f979 	bl	10005908 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10004616:	f7fe fd7b 	bl	10003110 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
1000461a:	f7fe fabd 	bl	10002b98 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
1000461e:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10004620:	4e1b      	ldr	r6, [pc, #108]	; (10004690 <z_cstart+0xa0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10004622:	ab06      	add	r3, sp, #24
10004624:	32ff      	adds	r2, #255	; 0xff
10004626:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10004628:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
1000462a:	9520      	str	r5, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
1000462c:	f001 fc8a 	bl	10005f44 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10004630:	2001      	movs	r0, #1
10004632:	f7ff ff5d 	bl	100044f0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10004636:	2002      	movs	r0, #2
10004638:	f7ff ff5a 	bl	100044f0 <z_sys_init_run_level>
	z_sched_init();
1000463c:	f000 fb14 	bl	10004c68 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10004640:	4c14      	ldr	r4, [pc, #80]	; (10004694 <z_cstart+0xa4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10004642:	4b15      	ldr	r3, [pc, #84]	; (10004698 <z_cstart+0xa8>)
	_kernel.ready_q.cache = &z_main_thread;
10004644:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10004646:	2280      	movs	r2, #128	; 0x80
10004648:	9305      	str	r3, [sp, #20]
1000464a:	2301      	movs	r3, #1
1000464c:	4e13      	ldr	r6, [pc, #76]	; (1000469c <z_cstart+0xac>)
1000464e:	4914      	ldr	r1, [pc, #80]	; (100046a0 <z_cstart+0xb0>)
10004650:	9304      	str	r3, [sp, #16]
10004652:	00d2      	lsls	r2, r2, #3
10004654:	0033      	movs	r3, r6
10004656:	0020      	movs	r0, r4
10004658:	9503      	str	r5, [sp, #12]
1000465a:	9502      	str	r5, [sp, #8]
1000465c:	9501      	str	r5, [sp, #4]
1000465e:	9500      	str	r5, [sp, #0]
10004660:	f000 f820 	bl	100046a4 <z_setup_new_thread>
10004664:	2204      	movs	r2, #4
10004666:	0007      	movs	r7, r0
10004668:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
1000466a:	0020      	movs	r0, r4
1000466c:	4393      	bics	r3, r2
1000466e:	7363      	strb	r3, [r4, #13]
10004670:	f001 fce3 	bl	1000603a <z_ready_thread>
	z_init_cpu(0);
10004674:	0028      	movs	r0, r5
10004676:	f7ff ff87 	bl	10004588 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
1000467a:	0032      	movs	r2, r6
1000467c:	0039      	movs	r1, r7
1000467e:	0020      	movs	r0, r4
10004680:	f7fe fe62 	bl	10003348 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10004684:	20000b70 	.word	0x20000b70
10004688:	e000ed00 	.word	0xe000ed00
1000468c:	ff00ffff 	.word	0xff00ffff
10004690:	2000032c 	.word	0x2000032c
10004694:	20000180 	.word	0x20000180
10004698:	10006c4c 	.word	0x10006c4c
1000469c:	1000453d 	.word	0x1000453d
100046a0:	20000c70 	.word	0x20000c70

100046a4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
100046a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
100046a6:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
100046a8:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
100046aa:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
100046ac:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
100046ae:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
100046b0:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
100046b2:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
100046b4:	2004      	movs	r0, #4
100046b6:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
100046b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
100046ba:	3207      	adds	r2, #7
	thread_base->prio = priority;
100046bc:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
100046be:	2007      	movs	r0, #7
100046c0:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
100046c2:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100046c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
100046c6:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
100046c8:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
100046ca:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
100046cc:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100046ce:	9202      	str	r2, [sp, #8]
100046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
100046d2:	0020      	movs	r0, r4
100046d4:	9201      	str	r2, [sp, #4]
100046d6:	9a08      	ldr	r2, [sp, #32]
100046d8:	9200      	str	r2, [sp, #0]
100046da:	002a      	movs	r2, r5
100046dc:	f7fe fe1e 	bl	1000331c <arch_new_thread>
	if (!_current) {
100046e0:	4b04      	ldr	r3, [pc, #16]	; (100046f4 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100046e2:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100046e4:	689b      	ldr	r3, [r3, #8]
100046e6:	42b3      	cmp	r3, r6
100046e8:	d000      	beq.n	100046ec <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
100046ec:	0028      	movs	r0, r5
100046ee:	66a3      	str	r3, [r4, #104]	; 0x68
100046f0:	b004      	add	sp, #16
100046f2:	bd70      	pop	{r4, r5, r6, pc}
100046f4:	2000032c 	.word	0x2000032c

100046f8 <z_impl_k_thread_create>:
{
100046f8:	b570      	push	{r4, r5, r6, lr}
100046fa:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
100046fc:	2000      	movs	r0, #0
{
100046fe:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10004700:	9005      	str	r0, [sp, #20]
10004702:	980e      	ldr	r0, [sp, #56]	; 0x38
{
10004704:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10004706:	9004      	str	r0, [sp, #16]
10004708:	980d      	ldr	r0, [sp, #52]	; 0x34
{
1000470a:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
1000470c:	9003      	str	r0, [sp, #12]
1000470e:	980c      	ldr	r0, [sp, #48]	; 0x30
10004710:	9002      	str	r0, [sp, #8]
10004712:	980b      	ldr	r0, [sp, #44]	; 0x2c
10004714:	9001      	str	r0, [sp, #4]
10004716:	980a      	ldr	r0, [sp, #40]	; 0x28
10004718:	9000      	str	r0, [sp, #0]
1000471a:	0020      	movs	r0, r4
1000471c:	f7ff ffc2 	bl	100046a4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10004720:	002b      	movs	r3, r5
10004722:	1c72      	adds	r2, r6, #1
10004724:	d101      	bne.n	1000472a <z_impl_k_thread_create+0x32>
10004726:	3301      	adds	r3, #1
10004728:	d005      	beq.n	10004736 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
1000472a:	002b      	movs	r3, r5
1000472c:	4333      	orrs	r3, r6
1000472e:	d105      	bne.n	1000473c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10004730:	0020      	movs	r0, r4
10004732:	f000 fa2d 	bl	10004b90 <z_sched_start>
}
10004736:	0020      	movs	r0, r4
10004738:	b006      	add	sp, #24
1000473a:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
1000473c:	0020      	movs	r0, r4
1000473e:	0032      	movs	r2, r6
10004740:	002b      	movs	r3, r5
10004742:	4902      	ldr	r1, [pc, #8]	; (1000474c <z_impl_k_thread_create+0x54>)
10004744:	3018      	adds	r0, #24
10004746:	f000 fc0f 	bl	10004f68 <z_add_timeout>
1000474a:	e7f4      	b.n	10004736 <z_impl_k_thread_create+0x3e>
1000474c:	100060af 	.word	0x100060af

10004750 <z_init_static_threads>:
{
10004750:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10004752:	4c20      	ldr	r4, [pc, #128]	; (100047d4 <z_init_static_threads+0x84>)
{
10004754:	b086      	sub	sp, #24
10004756:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10004758:	4d1f      	ldr	r5, [pc, #124]	; (100047d8 <z_init_static_threads+0x88>)
1000475a:	42ac      	cmp	r4, r5
1000475c:	d308      	bcc.n	10004770 <z_init_static_threads+0x20>
	k_sched_lock();
1000475e:	f000 fa5d 	bl	10004c1c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10004762:	0034      	movs	r4, r6
10004764:	42ac      	cmp	r4, r5
10004766:	d319      	bcc.n	1000479c <z_init_static_threads+0x4c>
	k_sched_unlock();
10004768:	f000 fa68 	bl	10004c3c <k_sched_unlock>
}
1000476c:	b006      	add	sp, #24
1000476e:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10004770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10004772:	9305      	str	r3, [sp, #20]
10004774:	6a23      	ldr	r3, [r4, #32]
10004776:	9304      	str	r3, [sp, #16]
10004778:	69e3      	ldr	r3, [r4, #28]
1000477a:	9303      	str	r3, [sp, #12]
1000477c:	69a3      	ldr	r3, [r4, #24]
1000477e:	9302      	str	r3, [sp, #8]
10004780:	6963      	ldr	r3, [r4, #20]
10004782:	9301      	str	r3, [sp, #4]
10004784:	6923      	ldr	r3, [r4, #16]
10004786:	9300      	str	r3, [sp, #0]
10004788:	68e3      	ldr	r3, [r4, #12]
1000478a:	68a2      	ldr	r2, [r4, #8]
1000478c:	6861      	ldr	r1, [r4, #4]
1000478e:	6820      	ldr	r0, [r4, #0]
10004790:	f7ff ff88 	bl	100046a4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10004794:	6823      	ldr	r3, [r4, #0]
10004796:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10004798:	342c      	adds	r4, #44	; 0x2c
1000479a:	e7dd      	b.n	10004758 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
1000479c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000479e:	1c5a      	adds	r2, r3, #1
100047a0:	d00f      	beq.n	100047c2 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
100047a2:	43d8      	mvns	r0, r3
100047a4:	17c0      	asrs	r0, r0, #31
100047a6:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
100047a8:	220a      	movs	r2, #10
100047aa:	2300      	movs	r3, #0
100047ac:	17c1      	asrs	r1, r0, #31
100047ae:	f7fd fa43 	bl	10001c38 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
100047b2:	6826      	ldr	r6, [r4, #0]
100047b4:	000b      	movs	r3, r1
100047b6:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
100047b8:	4301      	orrs	r1, r0
100047ba:	d104      	bne.n	100047c6 <z_init_static_threads+0x76>
	z_sched_start(thread);
100047bc:	0030      	movs	r0, r6
100047be:	f000 f9e7 	bl	10004b90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
100047c2:	342c      	adds	r4, #44	; 0x2c
100047c4:	e7ce      	b.n	10004764 <z_init_static_threads+0x14>
100047c6:	0030      	movs	r0, r6
100047c8:	4904      	ldr	r1, [pc, #16]	; (100047dc <z_init_static_threads+0x8c>)
100047ca:	3018      	adds	r0, #24
100047cc:	f000 fbcc 	bl	10004f68 <z_add_timeout>
100047d0:	e7f7      	b.n	100047c2 <z_init_static_threads+0x72>
100047d2:	46c0      	nop			; (mov r8, r8)
100047d4:	10006460 	.word	0x10006460
100047d8:	10006460 	.word	0x10006460
100047dc:	100060af 	.word	0x100060af

100047e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
100047e0:	b570      	push	{r4, r5, r6, lr}
100047e2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100047e4:	f3ef 8510 	mrs	r5, PRIMASK
100047e8:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
100047ea:	f001 fc7b 	bl	100060e4 <z_unpend_first_thread>

	if (thread != NULL) {
100047ee:	2800      	cmp	r0, #0
100047f0:	d008      	beq.n	10004804 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
100047f2:	2300      	movs	r3, #0
100047f4:	6703      	str	r3, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
100047f6:	f001 fc20 	bl	1000603a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
100047fa:	0029      	movs	r1, r5
100047fc:	4808      	ldr	r0, [pc, #32]	; (10004820 <z_impl_k_sem_give+0x40>)
100047fe:	f000 f9b1 	bl	10004b64 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10004802:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10004804:	68a2      	ldr	r2, [r4, #8]
10004806:	68e3      	ldr	r3, [r4, #12]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10004808:	0020      	movs	r0, r4
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
1000480a:	1a9b      	subs	r3, r3, r2
1000480c:	1e59      	subs	r1, r3, #1
1000480e:	418b      	sbcs	r3, r1
10004810:	189b      	adds	r3, r3, r2
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10004812:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10004814:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10004816:	3010      	adds	r0, #16
10004818:	f001 fd1e 	bl	10006258 <z_handle_obj_poll_events>
}
1000481c:	e7ed      	b.n	100047fa <z_impl_k_sem_give+0x1a>
1000481e:	46c0      	nop			; (mov r8, r8)
10004820:	2000036c 	.word	0x2000036c

10004824 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10004824:	b513      	push	{r0, r1, r4, lr}
10004826:	0004      	movs	r4, r0
10004828:	f3ef 8110 	mrs	r1, PRIMASK
1000482c:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
1000482e:	6880      	ldr	r0, [r0, #8]
10004830:	2800      	cmp	r0, #0
10004832:	d008      	beq.n	10004846 <z_impl_k_sem_take+0x22>
		sem->count--;
10004834:	3801      	subs	r0, #1
10004836:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10004838:	2900      	cmp	r1, #0
1000483a:	d102      	bne.n	10004842 <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
1000483c:	b662      	cpsie	i
1000483e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10004842:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10004844:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10004846:	0010      	movs	r0, r2
10004848:	4318      	orrs	r0, r3
1000484a:	d107      	bne.n	1000485c <z_impl_k_sem_take+0x38>
	if (key != 0U) {
1000484c:	2900      	cmp	r1, #0
1000484e:	d102      	bne.n	10004856 <z_impl_k_sem_take+0x32>
	__asm__ volatile(
10004850:	b662      	cpsie	i
10004852:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10004856:	2010      	movs	r0, #16
10004858:	4240      	negs	r0, r0
1000485a:	e7f3      	b.n	10004844 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
1000485c:	9200      	str	r2, [sp, #0]
1000485e:	9301      	str	r3, [sp, #4]
10004860:	0022      	movs	r2, r4
10004862:	4802      	ldr	r0, [pc, #8]	; (1000486c <z_impl_k_sem_take+0x48>)
10004864:	f000 f966 	bl	10004b34 <z_pend_curr>
	return ret;
10004868:	e7ec      	b.n	10004844 <z_impl_k_sem_take+0x20>
1000486a:	46c0      	nop			; (mov r8, r8)
1000486c:	2000036c 	.word	0x2000036c

10004870 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
10004870:	89c2      	ldrh	r2, [r0, #14]
{
10004872:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
10004874:	2000      	movs	r0, #0
10004876:	2a7f      	cmp	r2, #127	; 0x7f
10004878:	d811      	bhi.n	1000489e <sliceable+0x2e>
	int ret = slice_ticks;
1000487a:	4a0a      	ldr	r2, [pc, #40]	; (100048a4 <sliceable+0x34>)
1000487c:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
1000487e:	2800      	cmp	r0, #0
10004880:	d00d      	beq.n	1000489e <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10004882:	210e      	movs	r1, #14
10004884:	4a08      	ldr	r2, [pc, #32]	; (100048a8 <sliceable+0x38>)
10004886:	5659      	ldrsb	r1, [r3, r1]
10004888:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
1000488a:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
1000488c:	4291      	cmp	r1, r2
1000488e:	db06      	blt.n	1000489e <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
10004890:	7b5a      	ldrb	r2, [r3, #13]
10004892:	06d2      	lsls	r2, r2, #27
10004894:	d103      	bne.n	1000489e <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
10004896:	4805      	ldr	r0, [pc, #20]	; (100048ac <sliceable+0x3c>)
10004898:	1a18      	subs	r0, r3, r0
1000489a:	1e43      	subs	r3, r0, #1
1000489c:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
1000489e:	2301      	movs	r3, #1
100048a0:	4018      	ands	r0, r3
}
100048a2:	4770      	bx	lr
100048a4:	20000354 	.word	0x20000354
100048a8:	20000350 	.word	0x20000350
100048ac:	20000108 	.word	0x20000108

100048b0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
100048b0:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
100048b2:	4b04      	ldr	r3, [pc, #16]	; (100048c4 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
100048b4:	4a04      	ldr	r2, [pc, #16]	; (100048c8 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
100048b6:	1ac0      	subs	r0, r0, r3
100048b8:	4b04      	ldr	r3, [pc, #16]	; (100048cc <slice_timeout+0x1c>)
100048ba:	10c0      	asrs	r0, r0, #3
100048bc:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
100048be:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
100048c0:	4770      	bx	lr
100048c2:	46c0      	nop			; (mov r8, r8)
100048c4:	200001f8 	.word	0x200001f8
100048c8:	2000036c 	.word	0x2000036c
100048cc:	aaaaaaab 	.word	0xaaaaaaab

100048d0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
100048d0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
100048d2:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
100048d4:	4b0c      	ldr	r3, [pc, #48]	; (10004908 <z_reset_time_slice+0x38>)
{
100048d6:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
100048d8:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
100048da:	4b0c      	ldr	r3, [pc, #48]	; (1000490c <z_reset_time_slice+0x3c>)
100048dc:	4374      	muls	r4, r6
100048de:	18e4      	adds	r4, r4, r3
100048e0:	0020      	movs	r0, r4
100048e2:	f001 fc5f 	bl	100061a4 <z_abort_timeout>
	slice_expired[cpu] = false;
100048e6:	2200      	movs	r2, #0
100048e8:	4b09      	ldr	r3, [pc, #36]	; (10004910 <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
100048ea:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
100048ec:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
100048ee:	f7ff ffbf 	bl	10004870 <sliceable>
100048f2:	2800      	cmp	r0, #0
100048f4:	d007      	beq.n	10004906 <z_reset_time_slice+0x36>
	int ret = slice_ticks;
100048f6:	4b07      	ldr	r3, [pc, #28]	; (10004914 <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
100048f8:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
100048fa:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
100048fc:	4906      	ldr	r1, [pc, #24]	; (10004918 <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
100048fe:	3a01      	subs	r2, #1
10004900:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10004902:	f000 fb31 	bl	10004f68 <z_add_timeout>
	}
}
10004906:	bd70      	pop	{r4, r5, r6, pc}
10004908:	2000032c 	.word	0x2000032c
1000490c:	200001f8 	.word	0x200001f8
10004910:	2000036c 	.word	0x2000036c
10004914:	20000354 	.word	0x20000354
10004918:	100048b1 	.word	0x100048b1

1000491c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
1000491c:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
1000491e:	4d0e      	ldr	r5, [pc, #56]	; (10004958 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004920:	4b0e      	ldr	r3, [pc, #56]	; (1000495c <update_cache+0x40>)
	return list->head == list;
10004922:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004924:	429c      	cmp	r4, r3
10004926:	d001      	beq.n	1000492c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10004928:	2c00      	cmp	r4, #0
1000492a:	d100      	bne.n	1000492e <update_cache+0x12>
1000492c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
1000492e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10004930:	2800      	cmp	r0, #0
10004932:	d108      	bne.n	10004946 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10004934:	7b5a      	ldrb	r2, [r3, #13]
10004936:	06d2      	lsls	r2, r2, #27
10004938:	d105      	bne.n	10004946 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
1000493a:	69a2      	ldr	r2, [r4, #24]
1000493c:	2a00      	cmp	r2, #0
1000493e:	d102      	bne.n	10004946 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10004940:	89da      	ldrh	r2, [r3, #14]
10004942:	2a7f      	cmp	r2, #127	; 0x7f
10004944:	d805      	bhi.n	10004952 <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10004946:	429c      	cmp	r4, r3
10004948:	d002      	beq.n	10004950 <update_cache+0x34>
			z_reset_time_slice(thread);
1000494a:	0020      	movs	r0, r4
1000494c:	f7ff ffc0 	bl	100048d0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10004950:	0023      	movs	r3, r4
10004952:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10004954:	bd70      	pop	{r4, r5, r6, pc}
10004956:	46c0      	nop			; (mov r8, r8)
10004958:	2000032c 	.word	0x2000032c
1000495c:	20000344 	.word	0x20000344

10004960 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10004960:	220d      	movs	r2, #13
{
10004962:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10004964:	5682      	ldrsb	r2, [r0, r2]
{
10004966:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10004968:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
1000496a:	2a00      	cmp	r2, #0
1000496c:	da04      	bge.n	10004978 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000496e:	227f      	movs	r2, #127	; 0x7f
10004970:	4013      	ands	r3, r2
10004972:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10004974:	f001 fb25 	bl	10005fc2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004978:	2380      	movs	r3, #128	; 0x80
1000497a:	7b62      	ldrb	r2, [r4, #13]
1000497c:	425b      	negs	r3, r3
1000497e:	4313      	orrs	r3, r2
	return list->head == list;
10004980:	4a13      	ldr	r2, [pc, #76]	; (100049d0 <move_thread_to_end_of_prio_q+0x70>)
10004982:	7363      	strb	r3, [r4, #13]
10004984:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004986:	4813      	ldr	r0, [pc, #76]	; (100049d4 <move_thread_to_end_of_prio_q+0x74>)
10004988:	4283      	cmp	r3, r0
1000498a:	d100      	bne.n	1000498e <move_thread_to_end_of_prio_q+0x2e>
1000498c:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
1000498e:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004990:	2b00      	cmp	r3, #0
10004992:	d104      	bne.n	1000499e <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10004994:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10004996:	6061      	str	r1, [r4, #4]

	tail->next = node;
10004998:	600c      	str	r4, [r1, #0]
	list->tail = node;
1000499a:	61d4      	str	r4, [r2, #28]
}
1000499c:	e00c      	b.n	100049b8 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
1000499e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
100049a0:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
100049a2:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
100049a4:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
100049a6:	42b5      	cmp	r5, r6
100049a8:	d00d      	beq.n	100049c6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
100049aa:	42ae      	cmp	r6, r5
100049ac:	dd0b      	ble.n	100049c6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
100049ae:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
100049b0:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100049b2:	6061      	str	r1, [r4, #4]
	prev->next = node;
100049b4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
100049b6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
100049b8:	6890      	ldr	r0, [r2, #8]
100049ba:	1b00      	subs	r0, r0, r4
100049bc:	4243      	negs	r3, r0
100049be:	4158      	adcs	r0, r3
100049c0:	f7ff ffac 	bl	1000491c <update_cache>
}
100049c4:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100049c6:	4299      	cmp	r1, r3
100049c8:	d0e4      	beq.n	10004994 <move_thread_to_end_of_prio_q+0x34>
100049ca:	681b      	ldr	r3, [r3, #0]
100049cc:	e7e0      	b.n	10004990 <move_thread_to_end_of_prio_q+0x30>
100049ce:	46c0      	nop			; (mov r8, r8)
100049d0:	2000032c 	.word	0x2000032c
100049d4:	20000344 	.word	0x20000344

100049d8 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100049d8:	230d      	movs	r3, #13
{
100049da:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100049dc:	56c3      	ldrsb	r3, [r0, r3]
100049de:	7b41      	ldrb	r1, [r0, #13]
100049e0:	2b00      	cmp	r3, #0
100049e2:	db26      	blt.n	10004a32 <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100049e4:	06cb      	lsls	r3, r1, #27
100049e6:	d124      	bne.n	10004a32 <ready_thread+0x5a>
	return node->next != NULL;
100049e8:	6983      	ldr	r3, [r0, #24]
100049ea:	2b00      	cmp	r3, #0
100049ec:	d121      	bne.n	10004a32 <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
100049ee:	2280      	movs	r2, #128	; 0x80
100049f0:	4252      	negs	r2, r2
100049f2:	430a      	orrs	r2, r1
100049f4:	7342      	strb	r2, [r0, #13]
	return list->head == list;
100049f6:	4a11      	ldr	r2, [pc, #68]	; (10004a3c <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
100049f8:	4c11      	ldr	r4, [pc, #68]	; (10004a40 <ready_thread+0x68>)
	return list->head == list;
100049fa:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100049fc:	42a1      	cmp	r1, r4
100049fe:	d000      	beq.n	10004a02 <ready_thread+0x2a>
10004a00:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10004a02:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004a04:	2b00      	cmp	r3, #0
10004a06:	d104      	bne.n	10004a12 <ready_thread+0x3a>
	node->next = list;
10004a08:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10004a0a:	6041      	str	r1, [r0, #4]
	tail->next = node;
10004a0c:	6008      	str	r0, [r1, #0]
	list->tail = node;
10004a0e:	61d0      	str	r0, [r2, #28]
}
10004a10:	e00c      	b.n	10004a2c <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10004a12:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10004a14:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10004a16:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10004a18:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10004a1a:	42b5      	cmp	r5, r6
10004a1c:	d00a      	beq.n	10004a34 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10004a1e:	42ae      	cmp	r6, r5
10004a20:	dd08      	ble.n	10004a34 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10004a22:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10004a24:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10004a26:	6042      	str	r2, [r0, #4]
	prev->next = node;
10004a28:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10004a2a:	6058      	str	r0, [r3, #4]
		update_cache(0);
10004a2c:	2000      	movs	r0, #0
10004a2e:	f7ff ff75 	bl	1000491c <update_cache>
}
10004a32:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10004a34:	428b      	cmp	r3, r1
10004a36:	d0e7      	beq.n	10004a08 <ready_thread+0x30>
10004a38:	681b      	ldr	r3, [r3, #0]
10004a3a:	e7e3      	b.n	10004a04 <ready_thread+0x2c>
10004a3c:	2000032c 	.word	0x2000032c
10004a40:	20000344 	.word	0x20000344

10004a44 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10004a44:	220d      	movs	r2, #13
{
10004a46:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10004a48:	5682      	ldrsb	r2, [r0, r2]
{
10004a4a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10004a4c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10004a4e:	2a00      	cmp	r2, #0
10004a50:	da04      	bge.n	10004a5c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004a52:	227f      	movs	r2, #127	; 0x7f
10004a54:	4013      	ands	r3, r2
10004a56:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004a58:	f001 fab3 	bl	10005fc2 <sys_dlist_remove>
	update_cache(thread == _current);
10004a5c:	4b03      	ldr	r3, [pc, #12]	; (10004a6c <unready_thread+0x28>)
10004a5e:	6898      	ldr	r0, [r3, #8]
10004a60:	1b00      	subs	r0, r0, r4
10004a62:	4243      	negs	r3, r0
10004a64:	4158      	adcs	r0, r3
10004a66:	f7ff ff59 	bl	1000491c <update_cache>
}
10004a6a:	bd10      	pop	{r4, pc}
10004a6c:	2000032c 	.word	0x2000032c

10004a70 <pend_locked>:
{
10004a70:	b570      	push	{r4, r5, r6, lr}
10004a72:	001d      	movs	r5, r3
10004a74:	0016      	movs	r6, r2
10004a76:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10004a78:	f001 fab6 	bl	10005fe8 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
10004a7c:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004a7e:	1c72      	adds	r2, r6, #1
10004a80:	d101      	bne.n	10004a86 <pend_locked+0x16>
10004a82:	3301      	adds	r3, #1
10004a84:	d006      	beq.n	10004a94 <pend_locked+0x24>
10004a86:	0020      	movs	r0, r4
10004a88:	0032      	movs	r2, r6
10004a8a:	002b      	movs	r3, r5
10004a8c:	4902      	ldr	r1, [pc, #8]	; (10004a98 <pend_locked+0x28>)
10004a8e:	3018      	adds	r0, #24
10004a90:	f000 fa6a 	bl	10004f68 <z_add_timeout>
}
10004a94:	bd70      	pop	{r4, r5, r6, pc}
10004a96:	46c0      	nop			; (mov r8, r8)
10004a98:	100060af 	.word	0x100060af

10004a9c <k_sched_time_slice_set>:
{
10004a9c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004a9e:	f3ef 8410 	mrs	r4, PRIMASK
10004aa2:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10004aa4:	230a      	movs	r3, #10
10004aa6:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10004aa8:	2800      	cmp	r0, #0
10004aaa:	dd02      	ble.n	10004ab2 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10004aac:	2b02      	cmp	r3, #2
10004aae:	da00      	bge.n	10004ab2 <k_sched_time_slice_set+0x16>
10004ab0:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10004ab2:	4a07      	ldr	r2, [pc, #28]	; (10004ad0 <k_sched_time_slice_set+0x34>)
10004ab4:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10004ab6:	4b07      	ldr	r3, [pc, #28]	; (10004ad4 <k_sched_time_slice_set+0x38>)
10004ab8:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10004aba:	4b07      	ldr	r3, [pc, #28]	; (10004ad8 <k_sched_time_slice_set+0x3c>)
10004abc:	6898      	ldr	r0, [r3, #8]
10004abe:	f7ff ff07 	bl	100048d0 <z_reset_time_slice>
	if (key != 0U) {
10004ac2:	2c00      	cmp	r4, #0
10004ac4:	d102      	bne.n	10004acc <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10004ac6:	b662      	cpsie	i
10004ac8:	f3bf 8f6f 	isb	sy
}
10004acc:	bd10      	pop	{r4, pc}
10004ace:	46c0      	nop			; (mov r8, r8)
10004ad0:	20000354 	.word	0x20000354
10004ad4:	20000350 	.word	0x20000350
10004ad8:	2000032c 	.word	0x2000032c

10004adc <z_time_slice>:
{
10004adc:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004ade:	f3ef 8510 	mrs	r5, PRIMASK
10004ae2:	b672      	cpsid	i
	struct k_thread *curr = _current;
10004ae4:	4a10      	ldr	r2, [pc, #64]	; (10004b28 <z_time_slice+0x4c>)
	if (pending_current == curr) {
10004ae6:	4b11      	ldr	r3, [pc, #68]	; (10004b2c <z_time_slice+0x50>)
	struct k_thread *curr = _current;
10004ae8:	6894      	ldr	r4, [r2, #8]
	if (pending_current == curr) {
10004aea:	6818      	ldr	r0, [r3, #0]
10004aec:	42a0      	cmp	r0, r4
10004aee:	d107      	bne.n	10004b00 <z_time_slice+0x24>
		z_reset_time_slice(curr);
10004af0:	f7ff feee 	bl	100048d0 <z_reset_time_slice>
	if (key != 0U) {
10004af4:	2d00      	cmp	r5, #0
10004af6:	d102      	bne.n	10004afe <z_time_slice+0x22>
	__asm__ volatile(
10004af8:	b662      	cpsie	i
10004afa:	f3bf 8f6f 	isb	sy
}
10004afe:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10004b00:	2100      	movs	r1, #0
10004b02:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
10004b04:	7c12      	ldrb	r2, [r2, #16]
10004b06:	4b0a      	ldr	r3, [pc, #40]	; (10004b30 <z_time_slice+0x54>)
10004b08:	5c9b      	ldrb	r3, [r3, r2]
10004b0a:	428b      	cmp	r3, r1
10004b0c:	d0f2      	beq.n	10004af4 <z_time_slice+0x18>
10004b0e:	0020      	movs	r0, r4
10004b10:	f7ff feae 	bl	10004870 <sliceable>
10004b14:	2800      	cmp	r0, #0
10004b16:	d0ed      	beq.n	10004af4 <z_time_slice+0x18>
		if (!z_is_thread_prevented_from_running(curr)) {
10004b18:	7b63      	ldrb	r3, [r4, #13]
10004b1a:	06db      	lsls	r3, r3, #27
10004b1c:	d102      	bne.n	10004b24 <z_time_slice+0x48>
			move_thread_to_end_of_prio_q(curr);
10004b1e:	0020      	movs	r0, r4
10004b20:	f7ff ff1e 	bl	10004960 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
10004b24:	0020      	movs	r0, r4
10004b26:	e7e3      	b.n	10004af0 <z_time_slice+0x14>
10004b28:	2000032c 	.word	0x2000032c
10004b2c:	2000034c 	.word	0x2000034c
10004b30:	2000036c 	.word	0x2000036c

10004b34 <z_pend_curr>:
{
10004b34:	b510      	push	{r4, lr}
	pending_current = _current;
10004b36:	4809      	ldr	r0, [pc, #36]	; (10004b5c <z_pend_curr+0x28>)
{
10004b38:	000c      	movs	r4, r1
	pending_current = _current;
10004b3a:	4b09      	ldr	r3, [pc, #36]	; (10004b60 <z_pend_curr+0x2c>)
{
10004b3c:	0011      	movs	r1, r2
	pending_current = _current;
10004b3e:	6882      	ldr	r2, [r0, #8]
10004b40:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10004b42:	f3ef 8310 	mrs	r3, PRIMASK
10004b46:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10004b48:	9a02      	ldr	r2, [sp, #8]
10004b4a:	9b03      	ldr	r3, [sp, #12]
10004b4c:	6880      	ldr	r0, [r0, #8]
10004b4e:	f7ff ff8f 	bl	10004a70 <pend_locked>
	ret = arch_swap(key);
10004b52:	0020      	movs	r0, r4
10004b54:	f7fe fb88 	bl	10003268 <arch_swap>
}
10004b58:	bd10      	pop	{r4, pc}
10004b5a:	46c0      	nop			; (mov r8, r8)
10004b5c:	2000032c 	.word	0x2000032c
10004b60:	2000034c 	.word	0x2000034c

10004b64 <z_reschedule>:
{
10004b64:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10004b66:	2900      	cmp	r1, #0
10004b68:	d10a      	bne.n	10004b80 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10004b6a:	f3ef 8005 	mrs	r0, IPSR
10004b6e:	2800      	cmp	r0, #0
10004b70:	d107      	bne.n	10004b82 <z_reschedule+0x1e>
	return new_thread != _current;
10004b72:	4b06      	ldr	r3, [pc, #24]	; (10004b8c <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10004b74:	689a      	ldr	r2, [r3, #8]
10004b76:	695b      	ldr	r3, [r3, #20]
10004b78:	429a      	cmp	r2, r3
10004b7a:	d002      	beq.n	10004b82 <z_reschedule+0x1e>
10004b7c:	f7fe fb74 	bl	10003268 <arch_swap>
}
10004b80:	bd10      	pop	{r4, pc}
	__asm__ volatile(
10004b82:	b662      	cpsie	i
10004b84:	f3bf 8f6f 	isb	sy
10004b88:	e7fa      	b.n	10004b80 <z_reschedule+0x1c>
10004b8a:	46c0      	nop			; (mov r8, r8)
10004b8c:	2000032c 	.word	0x2000032c

10004b90 <z_sched_start>:
{
10004b90:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004b92:	f3ef 8410 	mrs	r4, PRIMASK
10004b96:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10004b98:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10004b9a:	7b43      	ldrb	r3, [r0, #13]
10004b9c:	4213      	tst	r3, r2
10004b9e:	d105      	bne.n	10004bac <z_sched_start+0x1c>
	if (key != 0U) {
10004ba0:	2c00      	cmp	r4, #0
10004ba2:	d102      	bne.n	10004baa <z_sched_start+0x1a>
	__asm__ volatile(
10004ba4:	b662      	cpsie	i
10004ba6:	f3bf 8f6f 	isb	sy
}
10004baa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10004bac:	4393      	bics	r3, r2
10004bae:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10004bb0:	f7ff ff12 	bl	100049d8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10004bb4:	0021      	movs	r1, r4
10004bb6:	4802      	ldr	r0, [pc, #8]	; (10004bc0 <z_sched_start+0x30>)
10004bb8:	f7ff ffd4 	bl	10004b64 <z_reschedule>
10004bbc:	e7f5      	b.n	10004baa <z_sched_start+0x1a>
10004bbe:	46c0      	nop			; (mov r8, r8)
10004bc0:	2000036d 	.word	0x2000036d

10004bc4 <z_impl_k_thread_suspend>:
{
10004bc4:	b570      	push	{r4, r5, r6, lr}
10004bc6:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10004bc8:	3018      	adds	r0, #24
10004bca:	f001 faeb 	bl	100061a4 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10004bce:	f3ef 8610 	mrs	r6, PRIMASK
10004bd2:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10004bd4:	220d      	movs	r2, #13
10004bd6:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10004bd8:	7b63      	ldrb	r3, [r4, #13]
10004bda:	2a00      	cmp	r2, #0
10004bdc:	da05      	bge.n	10004bea <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004bde:	227f      	movs	r2, #127	; 0x7f
10004be0:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004be2:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004be4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004be6:	f001 f9ec 	bl	10005fc2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10004bea:	2310      	movs	r3, #16
		update_cache(thread == _current);
10004bec:	4d0a      	ldr	r5, [pc, #40]	; (10004c18 <z_impl_k_thread_suspend+0x54>)
10004bee:	7b62      	ldrb	r2, [r4, #13]
10004bf0:	68a8      	ldr	r0, [r5, #8]
10004bf2:	4313      	orrs	r3, r2
10004bf4:	1b00      	subs	r0, r0, r4
10004bf6:	7363      	strb	r3, [r4, #13]
10004bf8:	4243      	negs	r3, r0
10004bfa:	4158      	adcs	r0, r3
10004bfc:	f7ff fe8e 	bl	1000491c <update_cache>
	if (key != 0U) {
10004c00:	2e00      	cmp	r6, #0
10004c02:	d102      	bne.n	10004c0a <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10004c04:	b662      	cpsie	i
10004c06:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10004c0a:	68ab      	ldr	r3, [r5, #8]
10004c0c:	42a3      	cmp	r3, r4
10004c0e:	d101      	bne.n	10004c14 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10004c10:	f001 faa3 	bl	1000615a <z_reschedule_unlocked>
}
10004c14:	bd70      	pop	{r4, r5, r6, pc}
10004c16:	46c0      	nop			; (mov r8, r8)
10004c18:	2000032c 	.word	0x2000032c

10004c1c <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10004c1c:	f3ef 8110 	mrs	r1, PRIMASK
10004c20:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10004c22:	4b05      	ldr	r3, [pc, #20]	; (10004c38 <k_sched_lock+0x1c>)
10004c24:	689a      	ldr	r2, [r3, #8]
10004c26:	7bd3      	ldrb	r3, [r2, #15]
10004c28:	3b01      	subs	r3, #1
10004c2a:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10004c2c:	2900      	cmp	r1, #0
10004c2e:	d102      	bne.n	10004c36 <k_sched_lock+0x1a>
	__asm__ volatile(
10004c30:	b662      	cpsie	i
10004c32:	f3bf 8f6f 	isb	sy
}
10004c36:	4770      	bx	lr
10004c38:	2000032c 	.word	0x2000032c

10004c3c <k_sched_unlock>:
{
10004c3c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004c3e:	f3ef 8410 	mrs	r4, PRIMASK
10004c42:	b672      	cpsid	i
		++_current->base.sched_locked;
10004c44:	4b07      	ldr	r3, [pc, #28]	; (10004c64 <k_sched_unlock+0x28>)
		update_cache(0);
10004c46:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10004c48:	689a      	ldr	r2, [r3, #8]
10004c4a:	7bd3      	ldrb	r3, [r2, #15]
10004c4c:	3301      	adds	r3, #1
10004c4e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10004c50:	f7ff fe64 	bl	1000491c <update_cache>
	if (key != 0U) {
10004c54:	2c00      	cmp	r4, #0
10004c56:	d102      	bne.n	10004c5e <k_sched_unlock+0x22>
	__asm__ volatile(
10004c58:	b662      	cpsie	i
10004c5a:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10004c5e:	f001 fa7c 	bl	1000615a <z_reschedule_unlocked>
}
10004c62:	bd10      	pop	{r4, pc}
10004c64:	2000032c 	.word	0x2000032c

10004c68 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004c68:	2100      	movs	r1, #0
{
10004c6a:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10004c6c:	4b03      	ldr	r3, [pc, #12]	; (10004c7c <z_sched_init+0x14>)
10004c6e:	4a04      	ldr	r2, [pc, #16]	; (10004c80 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004c70:	0008      	movs	r0, r1
10004c72:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10004c74:	61da      	str	r2, [r3, #28]
10004c76:	f7ff ff11 	bl	10004a9c <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10004c7a:	bd10      	pop	{r4, pc}
10004c7c:	2000032c 	.word	0x2000032c
10004c80:	20000344 	.word	0x20000344

10004c84 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004c86:	f3ef 8510 	mrs	r5, PRIMASK
10004c8a:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004c8c:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10004c8e:	4c19      	ldr	r4, [pc, #100]	; (10004cf4 <z_impl_k_yield+0x70>)
10004c90:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004c92:	7b43      	ldrb	r3, [r0, #13]
10004c94:	4013      	ands	r3, r2
10004c96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004c98:	f001 f993 	bl	10005fc2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004c9c:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10004c9e:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10004ca0:	4252      	negs	r2, r2
10004ca2:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004ca4:	4814      	ldr	r0, [pc, #80]	; (10004cf8 <z_impl_k_yield+0x74>)
10004ca6:	430a      	orrs	r2, r1
10004ca8:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10004caa:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004cac:	4282      	cmp	r2, r0
10004cae:	d100      	bne.n	10004cb2 <z_impl_k_yield+0x2e>
10004cb0:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10004cb2:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004cb4:	2a00      	cmp	r2, #0
10004cb6:	d104      	bne.n	10004cc2 <z_impl_k_yield+0x3e>
	node->next = list;
10004cb8:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10004cba:	6059      	str	r1, [r3, #4]
	tail->next = node;
10004cbc:	600b      	str	r3, [r1, #0]
	list->tail = node;
10004cbe:	61e3      	str	r3, [r4, #28]
}
10004cc0:	e00c      	b.n	10004cdc <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10004cc2:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10004cc4:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10004cc6:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10004cc8:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10004cca:	42be      	cmp	r6, r7
10004ccc:	d00d      	beq.n	10004cea <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10004cce:	42b7      	cmp	r7, r6
10004cd0:	dd0b      	ble.n	10004cea <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10004cd2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10004cd4:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10004cd6:	6059      	str	r1, [r3, #4]
	prev->next = node;
10004cd8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10004cda:	6053      	str	r3, [r2, #4]
	update_cache(1);
10004cdc:	2001      	movs	r0, #1
10004cde:	f7ff fe1d 	bl	1000491c <update_cache>
10004ce2:	0028      	movs	r0, r5
10004ce4:	f7fe fac0 	bl	10003268 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10004cea:	428a      	cmp	r2, r1
10004cec:	d0e4      	beq.n	10004cb8 <z_impl_k_yield+0x34>
10004cee:	6812      	ldr	r2, [r2, #0]
10004cf0:	e7e0      	b.n	10004cb4 <z_impl_k_yield+0x30>
10004cf2:	46c0      	nop			; (mov r8, r8)
10004cf4:	2000032c 	.word	0x2000032c
10004cf8:	20000344 	.word	0x20000344

10004cfc <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10004cfc:	0003      	movs	r3, r0
{
10004cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10004d00:	430b      	orrs	r3, r1
{
10004d02:	0004      	movs	r4, r0
10004d04:	000d      	movs	r5, r1
	if (ticks == 0) {
10004d06:	2b00      	cmp	r3, #0
10004d08:	d103      	bne.n	10004d12 <z_tick_sleep+0x16>
	z_impl_k_yield();
10004d0a:	f7ff ffbb 	bl	10004c84 <z_impl_k_yield>
		k_yield();
		return 0;
10004d0e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10004d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10004d12:	1c4b      	adds	r3, r1, #1
10004d14:	db2e      	blt.n	10004d74 <z_tick_sleep+0x78>
10004d16:	1c4b      	adds	r3, r1, #1
10004d18:	d101      	bne.n	10004d1e <z_tick_sleep+0x22>
10004d1a:	1c83      	adds	r3, r0, #2
10004d1c:	d32a      	bcc.n	10004d74 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10004d1e:	f001 fa54 	bl	100061ca <sys_clock_tick_get_32>
10004d22:	1827      	adds	r7, r4, r0
10004d24:	f3ef 8310 	mrs	r3, PRIMASK
10004d28:	b672      	cpsid	i
	pending_current = _current;
10004d2a:	4e14      	ldr	r6, [pc, #80]	; (10004d7c <z_tick_sleep+0x80>)
10004d2c:	9301      	str	r3, [sp, #4]
10004d2e:	68b0      	ldr	r0, [r6, #8]
10004d30:	4b13      	ldr	r3, [pc, #76]	; (10004d80 <z_tick_sleep+0x84>)
10004d32:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10004d34:	f7ff fe86 	bl	10004a44 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10004d38:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10004d3a:	0022      	movs	r2, r4
10004d3c:	002b      	movs	r3, r5
10004d3e:	4911      	ldr	r1, [pc, #68]	; (10004d84 <z_tick_sleep+0x88>)
10004d40:	3018      	adds	r0, #24
10004d42:	f000 f911 	bl	10004f68 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10004d46:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10004d48:	68b2      	ldr	r2, [r6, #8]
10004d4a:	9801      	ldr	r0, [sp, #4]
10004d4c:	7b51      	ldrb	r1, [r2, #13]
10004d4e:	430b      	orrs	r3, r1
10004d50:	7353      	strb	r3, [r2, #13]
10004d52:	f7fe fa89 	bl	10003268 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10004d56:	f001 fa38 	bl	100061ca <sys_clock_tick_get_32>
10004d5a:	2300      	movs	r3, #0
10004d5c:	003a      	movs	r2, r7
10004d5e:	0004      	movs	r4, r0
10004d60:	001d      	movs	r5, r3
10004d62:	1b12      	subs	r2, r2, r4
10004d64:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10004d66:	42ab      	cmp	r3, r5
10004d68:	dc02      	bgt.n	10004d70 <z_tick_sleep+0x74>
10004d6a:	d1d0      	bne.n	10004d0e <z_tick_sleep+0x12>
10004d6c:	42aa      	cmp	r2, r5
10004d6e:	d0ce      	beq.n	10004d0e <z_tick_sleep+0x12>
		return ticks;
10004d70:	0010      	movs	r0, r2
10004d72:	e7cd      	b.n	10004d10 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10004d74:	2702      	movs	r7, #2
10004d76:	427f      	negs	r7, r7
10004d78:	1b3f      	subs	r7, r7, r4
10004d7a:	e7d3      	b.n	10004d24 <z_tick_sleep+0x28>
10004d7c:	2000032c 	.word	0x2000032c
10004d80:	2000034c 	.word	0x2000034c
10004d84:	100060af 	.word	0x100060af

10004d88 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10004d88:	b510      	push	{r4, lr}
10004d8a:	000b      	movs	r3, r1
10004d8c:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004d8e:	1c42      	adds	r2, r0, #1
10004d90:	d107      	bne.n	10004da2 <z_impl_k_sleep+0x1a>
10004d92:	3301      	adds	r3, #1
10004d94:	d105      	bne.n	10004da2 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10004d96:	4b07      	ldr	r3, [pc, #28]	; (10004db4 <z_impl_k_sleep+0x2c>)
10004d98:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10004d9a:	f7ff ff13 	bl	10004bc4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10004d9e:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10004da0:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10004da2:	0021      	movs	r1, r4
10004da4:	f7ff ffaa 	bl	10004cfc <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10004da8:	220a      	movs	r2, #10
10004daa:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10004dac:	17c1      	asrs	r1, r0, #31
10004dae:	f7fb fb27 	bl	10000400 <__aeabi_uldivmod>
	return ret;
10004db2:	e7f5      	b.n	10004da0 <z_impl_k_sleep+0x18>
10004db4:	2000032c 	.word	0x2000032c

10004db8 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10004db8:	4b01      	ldr	r3, [pc, #4]	; (10004dc0 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10004dba:	6898      	ldr	r0, [r3, #8]
}
10004dbc:	4770      	bx	lr
10004dbe:	46c0      	nop			; (mov r8, r8)
10004dc0:	2000032c 	.word	0x2000032c

10004dc4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10004dc4:	b570      	push	{r4, r5, r6, lr}
10004dc6:	0004      	movs	r4, r0
10004dc8:	f3ef 8610 	mrs	r6, PRIMASK
10004dcc:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10004dce:	7b03      	ldrb	r3, [r0, #12]
10004dd0:	07db      	lsls	r3, r3, #31
10004dd2:	d508      	bpl.n	10004de6 <z_thread_abort+0x22>
	if (key != 0U) {
10004dd4:	2e00      	cmp	r6, #0
10004dd6:	d102      	bne.n	10004dde <z_thread_abort+0x1a>
	__asm__ volatile(
10004dd8:	b662      	cpsie	i
10004dda:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10004dde:	2004      	movs	r0, #4
10004de0:	b662      	cpsie	i
10004de2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10004de4:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10004de6:	2308      	movs	r3, #8
10004de8:	7b42      	ldrb	r2, [r0, #13]
10004dea:	421a      	tst	r2, r3
10004dec:	d005      	beq.n	10004dfa <z_thread_abort+0x36>
	if (key != 0U) {
10004dee:	2e00      	cmp	r6, #0
10004df0:	d1f8      	bne.n	10004de4 <z_thread_abort+0x20>
	__asm__ volatile(
10004df2:	b662      	cpsie	i
10004df4:	f3bf 8f6f 	isb	sy
10004df8:	e7f4      	b.n	10004de4 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10004dfa:	2120      	movs	r1, #32
10004dfc:	0010      	movs	r0, r2
10004dfe:	4388      	bics	r0, r1
10004e00:	0001      	movs	r1, r0
10004e02:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10004e04:	b248      	sxtb	r0, r1
10004e06:	2800      	cmp	r0, #0
10004e08:	db20      	blt.n	10004e4c <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10004e0a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10004e0c:	68a3      	ldr	r3, [r4, #8]
10004e0e:	2b00      	cmp	r3, #0
10004e10:	d002      	beq.n	10004e18 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10004e12:	0020      	movs	r0, r4
10004e14:	f001 f8dd 	bl	10005fd2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10004e18:	0020      	movs	r0, r4
10004e1a:	3018      	adds	r0, #24
10004e1c:	f001 f9c2 	bl	100061a4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10004e20:	0023      	movs	r3, r4
	return list->head == list;
10004e22:	6da5      	ldr	r5, [r4, #88]	; 0x58
10004e24:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004e26:	429d      	cmp	r5, r3
10004e28:	d001      	beq.n	10004e2e <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10004e2a:	2d00      	cmp	r5, #0
10004e2c:	d116      	bne.n	10004e5c <z_thread_abort+0x98>
		update_cache(1);
10004e2e:	2001      	movs	r0, #1
10004e30:	f7ff fd74 	bl	1000491c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10004e34:	4b10      	ldr	r3, [pc, #64]	; (10004e78 <z_thread_abort+0xb4>)
10004e36:	689b      	ldr	r3, [r3, #8]
10004e38:	42a3      	cmp	r3, r4
10004e3a:	d1d8      	bne.n	10004dee <z_thread_abort+0x2a>
10004e3c:	f3ef 8305 	mrs	r3, IPSR
10004e40:	2b00      	cmp	r3, #0
10004e42:	d1d4      	bne.n	10004dee <z_thread_abort+0x2a>
10004e44:	0030      	movs	r0, r6
10004e46:	f7fe fa0f 	bl	10003268 <arch_swap>
	return ret;
10004e4a:	e7d0      	b.n	10004dee <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004e4c:	215f      	movs	r1, #95	; 0x5f
10004e4e:	400a      	ands	r2, r1
10004e50:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10004e52:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004e54:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004e56:	f001 f8b4 	bl	10005fc2 <sys_dlist_remove>
}
10004e5a:	e7d7      	b.n	10004e0c <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10004e5c:	0028      	movs	r0, r5
10004e5e:	f001 f8b8 	bl	10005fd2 <unpend_thread_no_timeout>
10004e62:	0028      	movs	r0, r5
10004e64:	3018      	adds	r0, #24
10004e66:	f001 f99d 	bl	100061a4 <z_abort_timeout>
10004e6a:	2300      	movs	r3, #0
		ready_thread(thread);
10004e6c:	0028      	movs	r0, r5
10004e6e:	672b      	str	r3, [r5, #112]	; 0x70
10004e70:	f7ff fdb2 	bl	100049d8 <ready_thread>
10004e74:	e7d4      	b.n	10004e20 <z_thread_abort+0x5c>
10004e76:	46c0      	nop			; (mov r8, r8)
10004e78:	2000032c 	.word	0x2000032c

10004e7c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10004e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10004e7e:	9d06      	ldr	r5, [sp, #24]
10004e80:	9e07      	ldr	r6, [sp, #28]
{
10004e82:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10004e84:	9500      	str	r5, [sp, #0]
10004e86:	9601      	str	r6, [sp, #4]
10004e88:	f7ff fe54 	bl	10004b34 <z_pend_curr>

	if (data != NULL) {
10004e8c:	2c00      	cmp	r4, #0
10004e8e:	d003      	beq.n	10004e98 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
10004e90:	4b02      	ldr	r3, [pc, #8]	; (10004e9c <z_sched_wait+0x20>)
10004e92:	689b      	ldr	r3, [r3, #8]
10004e94:	695b      	ldr	r3, [r3, #20]
10004e96:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
10004e98:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10004e9a:	46c0      	nop			; (mov r8, r8)
10004e9c:	2000032c 	.word	0x2000032c

10004ea0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10004ea0:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10004ea2:	4806      	ldr	r0, [pc, #24]	; (10004ebc <z_data_copy+0x1c>)
10004ea4:	4a06      	ldr	r2, [pc, #24]	; (10004ec0 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10004ea6:	4907      	ldr	r1, [pc, #28]	; (10004ec4 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10004ea8:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10004eaa:	f001 f870 	bl	10005f8e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10004eae:	4a06      	ldr	r2, [pc, #24]	; (10004ec8 <z_data_copy+0x28>)
10004eb0:	4906      	ldr	r1, [pc, #24]	; (10004ecc <z_data_copy+0x2c>)
10004eb2:	4807      	ldr	r0, [pc, #28]	; (10004ed0 <z_data_copy+0x30>)
10004eb4:	f001 f86b 	bl	10005f8e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10004eb8:	bd10      	pop	{r4, pc}
10004eba:	46c0      	nop			; (mov r8, r8)
10004ebc:	20000000 	.word	0x20000000
10004ec0:	20000104 	.word	0x20000104
10004ec4:	10006ca0 	.word	0x10006ca0
10004ec8:	00000000 	.word	0x00000000
10004ecc:	10006ca0 	.word	0x10006ca0
10004ed0:	20000000 	.word	0x20000000

10004ed4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004ed4:	2000      	movs	r0, #0
{
10004ed6:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004ed8:	4b03      	ldr	r3, [pc, #12]	; (10004ee8 <elapsed+0x14>)
10004eda:	681b      	ldr	r3, [r3, #0]
10004edc:	4283      	cmp	r3, r0
10004ede:	d101      	bne.n	10004ee4 <elapsed+0x10>
10004ee0:	f7ff f800 	bl	10003ee4 <sys_clock_elapsed>
}
10004ee4:	bd10      	pop	{r4, pc}
10004ee6:	46c0      	nop			; (mov r8, r8)
10004ee8:	20000358 	.word	0x20000358

10004eec <next_timeout>:

static int32_t next_timeout(void)
{
10004eec:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10004eee:	4b0e      	ldr	r3, [pc, #56]	; (10004f28 <next_timeout+0x3c>)
10004ef0:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004ef2:	429e      	cmp	r6, r3
10004ef4:	d103      	bne.n	10004efe <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10004ef6:	f7ff ffed 	bl	10004ed4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
10004efa:	480c      	ldr	r0, [pc, #48]	; (10004f2c <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
10004efc:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
10004efe:	f7ff ffe9 	bl	10004ed4 <elapsed>
	if ((to == NULL) ||
10004f02:	2e00      	cmp	r6, #0
10004f04:	d0f9      	beq.n	10004efa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10004f06:	6932      	ldr	r2, [r6, #16]
10004f08:	6973      	ldr	r3, [r6, #20]
10004f0a:	0004      	movs	r4, r0
10004f0c:	17c5      	asrs	r5, r0, #31
10004f0e:	1b12      	subs	r2, r2, r4
10004f10:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10004f12:	2b00      	cmp	r3, #0
10004f14:	dcf1      	bgt.n	10004efa <next_timeout+0xe>
10004f16:	d103      	bne.n	10004f20 <next_timeout+0x34>
10004f18:	2180      	movs	r1, #128	; 0x80
10004f1a:	0609      	lsls	r1, r1, #24
10004f1c:	428a      	cmp	r2, r1
10004f1e:	d2ec      	bcs.n	10004efa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
10004f20:	43d8      	mvns	r0, r3
10004f22:	17c0      	asrs	r0, r0, #31
10004f24:	4010      	ands	r0, r2
	return ret;
10004f26:	e7e9      	b.n	10004efc <next_timeout+0x10>
10004f28:	200000ec 	.word	0x200000ec
10004f2c:	7fffffff 	.word	0x7fffffff

10004f30 <remove_timeout>:
{
10004f30:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10004f32:	2800      	cmp	r0, #0
10004f34:	d00e      	beq.n	10004f54 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10004f36:	4b0b      	ldr	r3, [pc, #44]	; (10004f64 <remove_timeout+0x34>)
10004f38:	685b      	ldr	r3, [r3, #4]
10004f3a:	4298      	cmp	r0, r3
10004f3c:	d00a      	beq.n	10004f54 <remove_timeout+0x24>
10004f3e:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10004f40:	2900      	cmp	r1, #0
10004f42:	d007      	beq.n	10004f54 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10004f44:	690a      	ldr	r2, [r1, #16]
10004f46:	694b      	ldr	r3, [r1, #20]
10004f48:	6904      	ldr	r4, [r0, #16]
10004f4a:	6945      	ldr	r5, [r0, #20]
10004f4c:	1912      	adds	r2, r2, r4
10004f4e:	416b      	adcs	r3, r5
10004f50:	610a      	str	r2, [r1, #16]
10004f52:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10004f54:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004f56:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10004f58:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10004f5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10004f5c:	2300      	movs	r3, #0
10004f5e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10004f60:	6043      	str	r3, [r0, #4]
}
10004f62:	bd30      	pop	{r4, r5, pc}
10004f64:	200000ec 	.word	0x200000ec

10004f68 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10004f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004f6a:	0004      	movs	r4, r0
10004f6c:	0016      	movs	r6, r2
10004f6e:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004f70:	1c53      	adds	r3, r2, #1
10004f72:	d101      	bne.n	10004f78 <z_add_timeout+0x10>
10004f74:	1c7b      	adds	r3, r7, #1
10004f76:	d057      	beq.n	10005028 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10004f78:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10004f7a:	f3ef 8310 	mrs	r3, PRIMASK
10004f7e:	b672      	cpsid	i
10004f80:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10004f82:	2f00      	cmp	r7, #0
10004f84:	da23      	bge.n	10004fce <z_add_timeout+0x66>
10004f86:	1c7b      	adds	r3, r7, #1
10004f88:	d101      	bne.n	10004f8e <z_add_timeout+0x26>
10004f8a:	1cb3      	adds	r3, r6, #2
10004f8c:	d81f      	bhi.n	10004fce <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10004f8e:	4b2b      	ldr	r3, [pc, #172]	; (1000503c <z_add_timeout+0xd4>)
10004f90:	6818      	ldr	r0, [r3, #0]
10004f92:	6859      	ldr	r1, [r3, #4]
10004f94:	2202      	movs	r2, #2
10004f96:	4252      	negs	r2, r2
10004f98:	17d3      	asrs	r3, r2, #31
10004f9a:	1a12      	subs	r2, r2, r0
10004f9c:	418b      	sbcs	r3, r1
10004f9e:	1b92      	subs	r2, r2, r6
10004fa0:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10004fa2:	2b00      	cmp	r3, #0
10004fa4:	dc04      	bgt.n	10004fb0 <z_add_timeout+0x48>
10004fa6:	d101      	bne.n	10004fac <z_add_timeout+0x44>
10004fa8:	2a00      	cmp	r2, #0
10004faa:	d101      	bne.n	10004fb0 <z_add_timeout+0x48>
10004fac:	2201      	movs	r2, #1
10004fae:	2300      	movs	r3, #0
	return list->head == list;
10004fb0:	4f23      	ldr	r7, [pc, #140]	; (10005040 <z_add_timeout+0xd8>)
10004fb2:	6122      	str	r2, [r4, #16]
10004fb4:	6163      	str	r3, [r4, #20]
10004fb6:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004fb8:	42bd      	cmp	r5, r7
10004fba:	d100      	bne.n	10004fbe <z_add_timeout+0x56>
10004fbc:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10004fbe:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10004fc0:	2d00      	cmp	r5, #0
10004fc2:	d10f      	bne.n	10004fe4 <z_add_timeout+0x7c>
	node->next = list;
10004fc4:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10004fc6:	6066      	str	r6, [r4, #4]
	tail->next = node;
10004fc8:	6034      	str	r4, [r6, #0]
	list->tail = node;
10004fca:	607c      	str	r4, [r7, #4]
}
10004fcc:	e01c      	b.n	10005008 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
10004fce:	f7ff ff81 	bl	10004ed4 <elapsed>
10004fd2:	2201      	movs	r2, #1
10004fd4:	2300      	movs	r3, #0
10004fd6:	1992      	adds	r2, r2, r6
10004fd8:	417b      	adcs	r3, r7
10004fda:	0006      	movs	r6, r0
10004fdc:	17c7      	asrs	r7, r0, #31
10004fde:	1992      	adds	r2, r2, r6
10004fe0:	417b      	adcs	r3, r7
10004fe2:	e7e5      	b.n	10004fb0 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10004fe4:	6928      	ldr	r0, [r5, #16]
10004fe6:	6969      	ldr	r1, [r5, #20]
10004fe8:	6922      	ldr	r2, [r4, #16]
10004fea:	6963      	ldr	r3, [r4, #20]
10004fec:	4299      	cmp	r1, r3
10004fee:	dc02      	bgt.n	10004ff6 <z_add_timeout+0x8e>
10004ff0:	d11b      	bne.n	1000502a <z_add_timeout+0xc2>
10004ff2:	4290      	cmp	r0, r2
10004ff4:	d919      	bls.n	1000502a <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10004ff6:	1a80      	subs	r0, r0, r2
10004ff8:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10004ffa:	686b      	ldr	r3, [r5, #4]
10004ffc:	6128      	str	r0, [r5, #16]
10004ffe:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10005000:	6063      	str	r3, [r4, #4]
	node->next = successor;
10005002:	6025      	str	r5, [r4, #0]
	prev->next = node;
10005004:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10005006:	606c      	str	r4, [r5, #4]
	return list->head == list;
10005008:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000500a:	42bb      	cmp	r3, r7
1000500c:	d006      	beq.n	1000501c <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
1000500e:	429c      	cmp	r4, r3
10005010:	d104      	bne.n	1000501c <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
10005012:	f7ff ff6b 	bl	10004eec <next_timeout>
10005016:	2100      	movs	r1, #0
10005018:	f7fe feec 	bl	10003df4 <sys_clock_set_timeout>
	if (key != 0U) {
1000501c:	9b01      	ldr	r3, [sp, #4]
1000501e:	2b00      	cmp	r3, #0
10005020:	d102      	bne.n	10005028 <z_add_timeout+0xc0>
	__asm__ volatile(
10005022:	b662      	cpsie	i
10005024:	f3bf 8f6f 	isb	sy
		}
	}
}
10005028:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
1000502a:	1a12      	subs	r2, r2, r0
1000502c:	418b      	sbcs	r3, r1
1000502e:	6122      	str	r2, [r4, #16]
10005030:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10005032:	42b5      	cmp	r5, r6
10005034:	d0c6      	beq.n	10004fc4 <z_add_timeout+0x5c>
10005036:	682d      	ldr	r5, [r5, #0]
10005038:	e7c2      	b.n	10004fc0 <z_add_timeout+0x58>
1000503a:	46c0      	nop			; (mov r8, r8)
1000503c:	20000210 	.word	0x20000210
10005040:	200000ec 	.word	0x200000ec

10005044 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10005044:	b5f0      	push	{r4, r5, r6, r7, lr}
10005046:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10005048:	f3ef 8310 	mrs	r3, PRIMASK
1000504c:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000504e:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10005050:	4b30      	ldr	r3, [pc, #192]	; (10005114 <sys_clock_announce+0xd0>)
10005052:	6018      	str	r0, [r3, #0]
	return list->head == list;
10005054:	4b30      	ldr	r3, [pc, #192]	; (10005118 <sys_clock_announce+0xd4>)
10005056:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005058:	429c      	cmp	r4, r3
1000505a:	d100      	bne.n	1000505e <sys_clock_announce+0x1a>
1000505c:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
1000505e:	4b2f      	ldr	r3, [pc, #188]	; (1000511c <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
10005060:	4d2c      	ldr	r5, [pc, #176]	; (10005114 <sys_clock_announce+0xd0>)
		curr_tick += dt;
10005062:	9303      	str	r3, [sp, #12]
10005064:	6818      	ldr	r0, [r3, #0]
10005066:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
10005068:	682b      	ldr	r3, [r5, #0]
1000506a:	469c      	mov	ip, r3
1000506c:	2c00      	cmp	r4, #0
1000506e:	d039      	beq.n	100050e4 <sys_clock_announce+0xa0>
10005070:	6962      	ldr	r2, [r4, #20]
10005072:	6926      	ldr	r6, [r4, #16]
10005074:	17db      	asrs	r3, r3, #31
10005076:	429a      	cmp	r2, r3
10005078:	dc02      	bgt.n	10005080 <sys_clock_announce+0x3c>
1000507a:	d10a      	bne.n	10005092 <sys_clock_announce+0x4e>
1000507c:	4566      	cmp	r6, ip
1000507e:	d908      	bls.n	10005092 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10005080:	001f      	movs	r7, r3
10005082:	6922      	ldr	r2, [r4, #16]
10005084:	6963      	ldr	r3, [r4, #20]
10005086:	4666      	mov	r6, ip
10005088:	1b92      	subs	r2, r2, r6
1000508a:	41bb      	sbcs	r3, r7
1000508c:	6122      	str	r2, [r4, #16]
1000508e:	6163      	str	r3, [r4, #20]
10005090:	e028      	b.n	100050e4 <sys_clock_announce+0xa0>
		curr_tick += dt;
10005092:	17f3      	asrs	r3, r6, #31
10005094:	9600      	str	r6, [sp, #0]
10005096:	9301      	str	r3, [sp, #4]
10005098:	9a00      	ldr	r2, [sp, #0]
1000509a:	9b01      	ldr	r3, [sp, #4]
1000509c:	1880      	adds	r0, r0, r2
1000509e:	4159      	adcs	r1, r3
		t->dticks = 0;
100050a0:	2300      	movs	r3, #0
100050a2:	2200      	movs	r2, #0
		curr_tick += dt;
100050a4:	4f1d      	ldr	r7, [pc, #116]	; (1000511c <sys_clock_announce+0xd8>)
		t->dticks = 0;
100050a6:	6122      	str	r2, [r4, #16]
100050a8:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
100050aa:	6038      	str	r0, [r7, #0]
100050ac:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
100050ae:	0020      	movs	r0, r4
100050b0:	f7ff ff3e 	bl	10004f30 <remove_timeout>
	if (key != 0U) {
100050b4:	9b02      	ldr	r3, [sp, #8]
100050b6:	2b00      	cmp	r3, #0
100050b8:	d102      	bne.n	100050c0 <sys_clock_announce+0x7c>
	__asm__ volatile(
100050ba:	b662      	cpsie	i
100050bc:	f3bf 8f6f 	isb	sy
		t->fn(t);
100050c0:	0020      	movs	r0, r4
100050c2:	68a3      	ldr	r3, [r4, #8]
100050c4:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100050c6:	f3ef 8310 	mrs	r3, PRIMASK
100050ca:	b672      	cpsid	i
100050cc:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
100050ce:	4b11      	ldr	r3, [pc, #68]	; (10005114 <sys_clock_announce+0xd0>)
100050d0:	681a      	ldr	r2, [r3, #0]
100050d2:	1b92      	subs	r2, r2, r6
100050d4:	601a      	str	r2, [r3, #0]
	return list->head == list;
100050d6:	4b10      	ldr	r3, [pc, #64]	; (10005118 <sys_clock_announce+0xd4>)
100050d8:	4694      	mov	ip, r2
100050da:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100050dc:	429c      	cmp	r4, r3
100050de:	d1be      	bne.n	1000505e <sys_clock_announce+0x1a>
		curr_tick += dt;
100050e0:	6838      	ldr	r0, [r7, #0]
100050e2:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
100050e4:	4662      	mov	r2, ip
100050e6:	17d3      	asrs	r3, r2, #31
100050e8:	1812      	adds	r2, r2, r0
100050ea:	414b      	adcs	r3, r1
	announce_remaining = 0;
100050ec:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
100050ee:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
100050f0:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
100050f2:	600a      	str	r2, [r1, #0]
100050f4:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
100050f6:	f7ff fef9 	bl	10004eec <next_timeout>
100050fa:	0021      	movs	r1, r4
100050fc:	f7fe fe7a 	bl	10003df4 <sys_clock_set_timeout>
	if (key != 0U) {
10005100:	9b02      	ldr	r3, [sp, #8]
10005102:	42a3      	cmp	r3, r4
10005104:	d102      	bne.n	1000510c <sys_clock_announce+0xc8>
	__asm__ volatile(
10005106:	b662      	cpsie	i
10005108:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
1000510c:	f7ff fce6 	bl	10004adc <z_time_slice>
#endif
}
10005110:	b005      	add	sp, #20
10005112:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005114:	20000358 	.word	0x20000358
10005118:	200000ec 	.word	0x200000ec
1000511c:	20000210 	.word	0x20000210

10005120 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10005120:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005122:	f3ef 8410 	mrs	r4, PRIMASK
10005126:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10005128:	f7ff fed4 	bl	10004ed4 <elapsed>
1000512c:	0002      	movs	r2, r0
1000512e:	4906      	ldr	r1, [pc, #24]	; (10005148 <sys_clock_tick_get+0x28>)
10005130:	17c3      	asrs	r3, r0, #31
10005132:	6808      	ldr	r0, [r1, #0]
10005134:	6849      	ldr	r1, [r1, #4]
10005136:	1880      	adds	r0, r0, r2
10005138:	4159      	adcs	r1, r3
	if (key != 0U) {
1000513a:	2c00      	cmp	r4, #0
1000513c:	d102      	bne.n	10005144 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000513e:	b662      	cpsie	i
10005140:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10005144:	bd10      	pop	{r4, pc}
10005146:	46c0      	nop			; (mov r8, r8)
10005148:	20000210 	.word	0x20000210

1000514c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
1000514c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000514e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005150:	f3ef 8510 	mrs	r5, PRIMASK
10005154:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
10005156:	6803      	ldr	r3, [r0, #0]
10005158:	9501      	str	r5, [sp, #4]
1000515a:	2b00      	cmp	r3, #0
1000515c:	d005      	beq.n	1000516a <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
1000515e:	2d00      	cmp	r5, #0
10005160:	d152      	bne.n	10005208 <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
10005162:	b662      	cpsie	i
10005164:	f3bf 8f6f 	isb	sy
10005168:	e04e      	b.n	10005208 <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
1000516a:	6a82      	ldr	r2, [r0, #40]	; 0x28
1000516c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1000516e:	2100      	movs	r1, #0
10005170:	2001      	movs	r0, #1
10005172:	1880      	adds	r0, r0, r2
10005174:	4159      	adcs	r1, r3
10005176:	2900      	cmp	r1, #0
10005178:	d101      	bne.n	1000517e <z_timer_expiration_handler+0x32>
1000517a:	2801      	cmp	r0, #1
1000517c:	d929      	bls.n	100051d2 <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
1000517e:	2b00      	cmp	r3, #0
10005180:	dc04      	bgt.n	1000518c <z_timer_expiration_handler+0x40>
10005182:	d101      	bne.n	10005188 <z_timer_expiration_handler+0x3c>
10005184:	2a00      	cmp	r2, #0
10005186:	d101      	bne.n	1000518c <z_timer_expiration_handler+0x40>
10005188:	2201      	movs	r2, #1
1000518a:	2300      	movs	r3, #0
1000518c:	2601      	movs	r6, #1
1000518e:	4276      	negs	r6, r6
10005190:	17f7      	asrs	r7, r6, #31
10005192:	18b6      	adds	r6, r6, r2
10005194:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
10005196:	f001 f81c 	bl	100061d2 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000519a:	2201      	movs	r2, #1
1000519c:	2300      	movs	r3, #0
1000519e:	1880      	adds	r0, r0, r2
100051a0:	4159      	adcs	r1, r3
100051a2:	1980      	adds	r0, r0, r6
100051a4:	4179      	adcs	r1, r7
100051a6:	2900      	cmp	r1, #0
100051a8:	dc02      	bgt.n	100051b0 <z_timer_expiration_handler+0x64>
100051aa:	d12e      	bne.n	1000520a <z_timer_expiration_handler+0xbe>
100051ac:	2800      	cmp	r0, #0
100051ae:	d02c      	beq.n	1000520a <z_timer_expiration_handler+0xbe>
100051b0:	f001 f80f 	bl	100061d2 <z_impl_k_uptime_ticks>
100051b4:	2201      	movs	r2, #1
100051b6:	2300      	movs	r3, #0
100051b8:	1880      	adds	r0, r0, r2
100051ba:	4159      	adcs	r1, r3
100051bc:	2202      	movs	r2, #2
100051be:	4252      	negs	r2, r2
100051c0:	17d3      	asrs	r3, r2, #31
100051c2:	1980      	adds	r0, r0, r6
100051c4:	4179      	adcs	r1, r7
100051c6:	1a12      	subs	r2, r2, r0
100051c8:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100051ca:	0020      	movs	r0, r4
100051cc:	4918      	ldr	r1, [pc, #96]	; (10005230 <z_timer_expiration_handler+0xe4>)
100051ce:	f7ff fecb 	bl	10004f68 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
100051d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
100051d4:	3301      	adds	r3, #1
100051d6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100051d8:	6a23      	ldr	r3, [r4, #32]
100051da:	2b00      	cmp	r3, #0
100051dc:	d00b      	beq.n	100051f6 <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
100051de:	2d00      	cmp	r5, #0
100051e0:	d102      	bne.n	100051e8 <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
100051e2:	b662      	cpsie	i
100051e4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
100051e8:	0020      	movs	r0, r4
100051ea:	6a23      	ldr	r3, [r4, #32]
100051ec:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100051ee:	f3ef 8310 	mrs	r3, PRIMASK
100051f2:	b672      	cpsid	i
100051f4:	9301      	str	r3, [sp, #4]
	return list->head == list;
100051f6:	69a5      	ldr	r5, [r4, #24]
100051f8:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
100051fa:	42a5      	cmp	r5, r4
100051fc:	d001      	beq.n	10005202 <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
100051fe:	2d00      	cmp	r5, #0
10005200:	d107      	bne.n	10005212 <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
10005202:	9b01      	ldr	r3, [sp, #4]
10005204:	2b00      	cmp	r3, #0
10005206:	d0ac      	beq.n	10005162 <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
10005208:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000520a:	2202      	movs	r2, #2
1000520c:	4252      	negs	r2, r2
1000520e:	17d3      	asrs	r3, r2, #31
10005210:	e7db      	b.n	100051ca <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
10005212:	0028      	movs	r0, r5
10005214:	f000 ff1d 	bl	10006052 <z_unpend_thread_no_timeout>
10005218:	2300      	movs	r3, #0
1000521a:	672b      	str	r3, [r5, #112]	; 0x70
1000521c:	9b01      	ldr	r3, [sp, #4]
1000521e:	2b00      	cmp	r3, #0
10005220:	d102      	bne.n	10005228 <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
10005222:	b662      	cpsie	i
10005224:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
10005228:	0028      	movs	r0, r5
1000522a:	f000 ff06 	bl	1000603a <z_ready_thread>
1000522e:	e7eb      	b.n	10005208 <z_timer_expiration_handler+0xbc>
10005230:	1000514d 	.word	0x1000514d

10005234 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10005234:	b570      	push	{r4, r5, r6, lr}
10005236:	0006      	movs	r6, r0
10005238:	0014      	movs	r4, r2
1000523a:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
1000523c:	1c51      	adds	r1, r2, #1
1000523e:	d101      	bne.n	10005244 <z_impl_k_timer_start+0x10>
10005240:	1c59      	adds	r1, r3, #1
10005242:	d022      	beq.n	1000528a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
10005244:	2b00      	cmp	r3, #0
10005246:	da03      	bge.n	10005250 <z_impl_k_timer_start+0x1c>
10005248:	1c59      	adds	r1, r3, #1
1000524a:	d10f      	bne.n	1000526c <z_impl_k_timer_start+0x38>
1000524c:	1c91      	adds	r1, r2, #2
1000524e:	d90d      	bls.n	1000526c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
10005250:	0014      	movs	r4, r2
10005252:	1e1d      	subs	r5, r3, #0
10005254:	dc05      	bgt.n	10005262 <z_impl_k_timer_start+0x2e>
10005256:	2b00      	cmp	r3, #0
10005258:	d101      	bne.n	1000525e <z_impl_k_timer_start+0x2a>
1000525a:	2a00      	cmp	r2, #0
1000525c:	d101      	bne.n	10005262 <z_impl_k_timer_start+0x2e>
1000525e:	2401      	movs	r4, #1
10005260:	2500      	movs	r5, #0
10005262:	2201      	movs	r2, #1
10005264:	4252      	negs	r2, r2
10005266:	17d3      	asrs	r3, r2, #31
10005268:	18a4      	adds	r4, r4, r2
1000526a:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
1000526c:	0030      	movs	r0, r6
1000526e:	f000 ff99 	bl	100061a4 <z_abort_timeout>
	timer->period = period;
10005272:	9a04      	ldr	r2, [sp, #16]
10005274:	9b05      	ldr	r3, [sp, #20]
10005276:	62b2      	str	r2, [r6, #40]	; 0x28
10005278:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
1000527a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000527c:	0022      	movs	r2, r4
	timer->status = 0U;
1000527e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10005280:	0030      	movs	r0, r6
10005282:	002b      	movs	r3, r5
10005284:	4901      	ldr	r1, [pc, #4]	; (1000528c <z_impl_k_timer_start+0x58>)
10005286:	f7ff fe6f 	bl	10004f68 <z_add_timeout>
		     duration);
}
1000528a:	bd70      	pop	{r4, r5, r6, pc}
1000528c:	1000514d 	.word	0x1000514d

10005290 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
10005290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct z_poller *poller = event->poller;
10005292:	6884      	ldr	r4, [r0, #8]
{
10005294:	0005      	movs	r5, r0
10005296:	9101      	str	r1, [sp, #4]
	int retcode = 0;

	if (poller != NULL) {
10005298:	2c00      	cmp	r4, #0
1000529a:	d00b      	beq.n	100052b4 <signal_poll_event+0x24>
		if (poller->mode == MODE_POLL) {
1000529c:	7863      	ldrb	r3, [r4, #1]
1000529e:	2b01      	cmp	r3, #1
100052a0:	d136      	bne.n	10005310 <signal_poll_event+0x80>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
100052a2:	0026      	movs	r6, r4
100052a4:	3e60      	subs	r6, #96	; 0x60
	if (!z_is_thread_pending(thread)) {
100052a6:	7b72      	ldrb	r2, [r6, #13]
100052a8:	3301      	adds	r3, #1
100052aa:	0011      	movs	r1, r2
100052ac:	4019      	ands	r1, r3
100052ae:	421a      	tst	r2, r3
100052b0:	d110      	bne.n	100052d4 <signal_poll_event+0x44>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
100052b2:	7021      	strb	r1, [r4, #0]
	event->state |= state;
100052b4:	68ea      	ldr	r2, [r5, #12]
100052b6:	9901      	ldr	r1, [sp, #4]
100052b8:	02d3      	lsls	r3, r2, #11
100052ba:	0e5b      	lsrs	r3, r3, #25
100052bc:	4319      	orrs	r1, r3
100052be:	000b      	movs	r3, r1
100052c0:	217f      	movs	r1, #127	; 0x7f
	event->poller = NULL;
100052c2:	2000      	movs	r0, #0
	event->state |= state;
100052c4:	400b      	ands	r3, r1
100052c6:	4922      	ldr	r1, [pc, #136]	; (10005350 <signal_poll_event+0xc0>)
100052c8:	039b      	lsls	r3, r3, #14
100052ca:	400a      	ands	r2, r1
100052cc:	431a      	orrs	r2, r3
	event->poller = NULL;
100052ce:	60a8      	str	r0, [r5, #8]
	event->state |= state;
100052d0:	60ea      	str	r2, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
100052d2:	e03b      	b.n	1000534c <signal_poll_event+0xbc>
	if (z_is_thread_timeout_expired(thread)) {
100052d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
100052d6:	3302      	adds	r3, #2
100052d8:	d102      	bne.n	100052e0 <signal_poll_event+0x50>
100052da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
100052dc:	3301      	adds	r3, #1
100052de:	d031      	beq.n	10005344 <signal_poll_event+0xb4>
	z_unpend_thread(thread);
100052e0:	0030      	movs	r0, r6
100052e2:	f000 ff18 	bl	10006116 <z_unpend_thread>
	arch_thread_return_value_set(thread,
100052e6:	9b01      	ldr	r3, [sp, #4]
100052e8:	2b08      	cmp	r3, #8
100052ea:	d00e      	beq.n	1000530a <signal_poll_event+0x7a>
100052ec:	2300      	movs	r3, #0
100052ee:	6733      	str	r3, [r6, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100052f0:	7b73      	ldrb	r3, [r6, #13]
100052f2:	06db      	lsls	r3, r3, #27
100052f4:	d10e      	bne.n	10005314 <signal_poll_event+0x84>
	return node->next != NULL;
100052f6:	0023      	movs	r3, r4
100052f8:	3b48      	subs	r3, #72	; 0x48
100052fa:	681f      	ldr	r7, [r3, #0]
100052fc:	2f00      	cmp	r7, #0
100052fe:	d109      	bne.n	10005314 <signal_poll_event+0x84>
	z_ready_thread(thread);
10005300:	0030      	movs	r0, r6
10005302:	f000 fe9a 	bl	1000603a <z_ready_thread>
		poller->is_polling = false;
10005306:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
10005308:	e7d4      	b.n	100052b4 <signal_poll_event+0x24>
	arch_thread_return_value_set(thread,
1000530a:	2304      	movs	r3, #4
1000530c:	425b      	negs	r3, r3
1000530e:	e7ee      	b.n	100052ee <signal_poll_event+0x5e>
		} else if (poller->mode == MODE_TRIGGERED) {
10005310:	2b02      	cmp	r3, #2
10005312:	d002      	beq.n	1000531a <signal_poll_event+0x8a>
		poller->is_polling = false;
10005314:	2300      	movs	r3, #0
10005316:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
10005318:	e7cc      	b.n	100052b4 <signal_poll_event+0x24>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
1000531a:	7823      	ldrb	r3, [r4, #0]
1000531c:	2b00      	cmp	r3, #0
1000531e:	d0c9      	beq.n	100052b4 <signal_poll_event+0x24>
10005320:	0027      	movs	r7, r4
10005322:	3f14      	subs	r7, #20
10005324:	693e      	ldr	r6, [r7, #16]
10005326:	2e00      	cmp	r6, #0
10005328:	d00a      	beq.n	10005340 <signal_poll_event+0xb0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
1000532a:	0020      	movs	r0, r4
1000532c:	3014      	adds	r0, #20
1000532e:	f000 ff39 	bl	100061a4 <z_abort_timeout>
		twork->poll_result = 0;
10005332:	2300      	movs	r3, #0
		z_work_submit_to_queue(work_q, &twork->work);
10005334:	0039      	movs	r1, r7
10005336:	0030      	movs	r0, r6
		twork->poll_result = 0;
10005338:	643b      	str	r3, [r7, #64]	; 0x40
		z_work_submit_to_queue(work_q, &twork->work);
1000533a:	f000 ffb1 	bl	100062a0 <z_work_submit_to_queue>
1000533e:	e7e9      	b.n	10005314 <signal_poll_event+0x84>
		poller->is_polling = false;
10005340:	7026      	strb	r6, [r4, #0]
		if (retcode < 0) {
10005342:	e7b7      	b.n	100052b4 <signal_poll_event+0x24>
		poller->is_polling = false;
10005344:	2300      	movs	r3, #0
		return -EAGAIN;
10005346:	200b      	movs	r0, #11
		poller->is_polling = false;
10005348:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
1000534a:	4240      	negs	r0, r0
}
1000534c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000534e:	46c0      	nop			; (mov r8, r8)
10005350:	ffe03fff 	.word	0xffe03fff

10005354 <z_impl_k_poll_signal_raise>:
{
10005354:	0003      	movs	r3, r0
10005356:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005358:	f3ef 8510 	mrs	r5, PRIMASK
1000535c:	b672      	cpsid	i
	sig->result = result;
1000535e:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
10005360:	2101      	movs	r1, #1
10005362:	6081      	str	r1, [r0, #8]
	return list->head == list;
10005364:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
10005366:	4283      	cmp	r3, r0
10005368:	d103      	bne.n	10005372 <z_impl_k_poll_signal_raise+0x1e>
	if (key != 0U) {
1000536a:	2d00      	cmp	r5, #0
1000536c:	d011      	beq.n	10005392 <z_impl_k_poll_signal_raise+0x3e>
		return 0;
1000536e:	2400      	movs	r4, #0
10005370:	e00d      	b.n	1000538e <z_impl_k_poll_signal_raise+0x3a>
	sys_dnode_t *const next = node->next;
10005372:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10005374:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005376:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005378:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000537a:	2300      	movs	r3, #0
1000537c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000537e:	6043      	str	r3, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
10005380:	f7ff ff86 	bl	10005290 <signal_poll_event>
	z_reschedule(&lock, key);
10005384:	0029      	movs	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
10005386:	0004      	movs	r4, r0
	z_reschedule(&lock, key);
10005388:	4804      	ldr	r0, [pc, #16]	; (1000539c <z_impl_k_poll_signal_raise+0x48>)
1000538a:	f7ff fbeb 	bl	10004b64 <z_reschedule>
}
1000538e:	0020      	movs	r0, r4
10005390:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
10005392:	b662      	cpsie	i
10005394:	f3bf 8f6f 	isb	sy
10005398:	e7e9      	b.n	1000536e <z_impl_k_poll_signal_raise+0x1a>
1000539a:	46c0      	nop			; (mov r8, r8)
1000539c:	2000036d 	.word	0x2000036d

100053a0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
100053a0:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
100053a2:	4802      	ldr	r0, [pc, #8]	; (100053ac <boot_banner+0xc>)
100053a4:	f000 f98d 	bl	100056c2 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
100053a8:	bd10      	pop	{r4, pc}
100053aa:	46c0      	nop			; (mov r8, r8)
100053ac:	10006c54 	.word	0x10006c54

100053b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
100053b0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
100053b2:	4b09      	ldr	r3, [pc, #36]	; (100053d8 <k_sys_work_q_init+0x28>)
{
100053b4:	b085      	sub	sp, #20
	struct k_work_queue_config cfg = {
100053b6:	2400      	movs	r4, #0
100053b8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
100053ba:	2280      	movs	r2, #128	; 0x80
100053bc:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
100053be:	ad02      	add	r5, sp, #8
100053c0:	712c      	strb	r4, [r5, #4]
	k_work_queue_start(&k_sys_work_q,
100053c2:	4906      	ldr	r1, [pc, #24]	; (100053dc <k_sys_work_q_init+0x2c>)
100053c4:	4806      	ldr	r0, [pc, #24]	; (100053e0 <k_sys_work_q_init+0x30>)
100053c6:	9500      	str	r5, [sp, #0]
100053c8:	425b      	negs	r3, r3
100053ca:	00d2      	lsls	r2, r2, #3
100053cc:	f000 f904 	bl	100055d8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
100053d0:	0020      	movs	r0, r4
100053d2:	b005      	add	sp, #20
100053d4:	bd30      	pop	{r4, r5, pc}
100053d6:	46c0      	nop			; (mov r8, r8)
100053d8:	10006c96 	.word	0x10006c96
100053dc:	20001070 	.word	0x20001070
100053e0:	20000218 	.word	0x20000218

100053e4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
100053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100053e6:	0005      	movs	r5, r0
100053e8:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
100053ea:	f3ef 8710 	mrs	r7, PRIMASK
100053ee:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100053f0:	002e      	movs	r6, r5
100053f2:	6fac      	ldr	r4, [r5, #120]	; 0x78
100053f4:	3690      	adds	r6, #144	; 0x90
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
100053f6:	2c00      	cmp	r4, #0
100053f8:	d113      	bne.n	10005422 <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
100053fa:	2102      	movs	r1, #2
100053fc:	0030      	movs	r0, r6
100053fe:	f000 ff3a 	bl	10006276 <flag_test_and_clear>
10005402:	2800      	cmp	r0, #0
10005404:	d13c      	bne.n	10005480 <work_queue_main+0x9c>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
10005406:	2300      	movs	r3, #0
10005408:	002a      	movs	r2, r5
1000540a:	9302      	str	r3, [sp, #8]
1000540c:	2301      	movs	r3, #1
1000540e:	425b      	negs	r3, r3
10005410:	17dc      	asrs	r4, r3, #31
10005412:	0039      	movs	r1, r7
10005414:	9300      	str	r3, [sp, #0]
10005416:	9401      	str	r4, [sp, #4]
10005418:	3280      	adds	r2, #128	; 0x80
1000541a:	4839      	ldr	r0, [pc, #228]	; (10005500 <work_queue_main+0x11c>)
1000541c:	f7ff fd2e 	bl	10004e7c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
10005420:	e7e3      	b.n	100053ea <work_queue_main+0x6>
	return node->next;
10005422:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10005424:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	list->head = node;
10005426:	67ab      	str	r3, [r5, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10005428:	4294      	cmp	r4, r2
1000542a:	d100      	bne.n	1000542e <work_queue_main+0x4a>
	list->tail = node;
1000542c:	67eb      	str	r3, [r5, #124]	; 0x7c
	*flagp |= BIT(bit);
1000542e:	2202      	movs	r2, #2
10005430:	6833      	ldr	r3, [r6, #0]
10005432:	4313      	orrs	r3, r2
10005434:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
10005436:	2304      	movs	r3, #4
10005438:	68e2      	ldr	r2, [r4, #12]
1000543a:	439a      	bics	r2, r3
1000543c:	3b03      	subs	r3, #3
1000543e:	4313      	orrs	r3, r2
10005440:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10005442:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10005444:	2f00      	cmp	r7, #0
10005446:	d025      	beq.n	10005494 <work_queue_main+0xb0>
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10005448:	0020      	movs	r0, r4
1000544a:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000544c:	f3ef 8310 	mrs	r3, PRIMASK
10005450:	b672      	cpsid	i
10005452:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
10005454:	68e3      	ldr	r3, [r4, #12]
10005456:	2101      	movs	r1, #1
10005458:	001a      	movs	r2, r3
1000545a:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
1000545c:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
1000545e:	4208      	tst	r0, r1
10005460:	d11c      	bne.n	1000549c <work_queue_main+0xb8>
	*flagp &= ~BIT(bit);
10005462:	60e2      	str	r2, [r4, #12]
10005464:	2202      	movs	r2, #2
10005466:	6833      	ldr	r3, [r6, #0]
10005468:	4393      	bics	r3, r2
	if (key != 0U) {
1000546a:	9a05      	ldr	r2, [sp, #20]
1000546c:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
1000546e:	05db      	lsls	r3, r3, #23
10005470:	0fdb      	lsrs	r3, r3, #31
10005472:	2a00      	cmp	r2, #0
10005474:	d03f      	beq.n	100054f6 <work_queue_main+0x112>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
10005476:	2b00      	cmp	r3, #0
10005478:	d1b7      	bne.n	100053ea <work_queue_main+0x6>
	z_impl_k_yield();
1000547a:	f7ff fc03 	bl	10004c84 <z_impl_k_yield>
}
1000547e:	e7b4      	b.n	100053ea <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
10005480:	002c      	movs	r4, r5
10005482:	3488      	adds	r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
10005484:	2200      	movs	r2, #0
10005486:	2101      	movs	r1, #1
10005488:	0020      	movs	r0, r4
1000548a:	f000 fe6d 	bl	10006168 <z_sched_wake>
1000548e:	2800      	cmp	r0, #0
10005490:	d1f8      	bne.n	10005484 <work_queue_main+0xa0>
10005492:	e7b8      	b.n	10005406 <work_queue_main+0x22>
	__asm__ volatile(
10005494:	b662      	cpsie	i
10005496:	f3bf 8f6f 	isb	sy
1000549a:	e7d5      	b.n	10005448 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
1000549c:	2203      	movs	r2, #3
1000549e:	4393      	bics	r3, r2
100054a0:	60e3      	str	r3, [r4, #12]
	return list->head;
100054a2:	4b18      	ldr	r3, [pc, #96]	; (10005504 <work_queue_main+0x120>)
100054a4:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
100054a6:	2800      	cmp	r0, #0
100054a8:	d0dc      	beq.n	10005464 <work_queue_main+0x80>
	return node->next;
100054aa:	2700      	movs	r7, #0
100054ac:	6803      	ldr	r3, [r0, #0]
100054ae:	9304      	str	r3, [sp, #16]
100054b0:	2800      	cmp	r0, #0
100054b2:	d0d7      	beq.n	10005464 <work_queue_main+0x80>
		if (wc->work == work) {
100054b4:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
100054b6:	0002      	movs	r2, r0
		if (wc->work == work) {
100054b8:	429c      	cmp	r4, r3
100054ba:	d10e      	bne.n	100054da <work_queue_main+0xf6>
100054bc:	6802      	ldr	r2, [r0, #0]
100054be:	4b11      	ldr	r3, [pc, #68]	; (10005504 <work_queue_main+0x120>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
100054c0:	2f00      	cmp	r7, #0
100054c2:	d112      	bne.n	100054ea <work_queue_main+0x106>
100054c4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
100054c6:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
100054c8:	4281      	cmp	r1, r0
100054ca:	d100      	bne.n	100054ce <work_queue_main+0xea>
	list->tail = node;
100054cc:	605a      	str	r2, [r3, #4]
	parent->next = child;
100054ce:	2300      	movs	r3, #0
100054d0:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
100054d2:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
100054d4:	f7ff f984 	bl	100047e0 <z_impl_k_sem_give>
}
100054d8:	003a      	movs	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
100054da:	9b04      	ldr	r3, [sp, #16]
100054dc:	2b00      	cmp	r3, #0
100054de:	d000      	beq.n	100054e2 <work_queue_main+0xfe>
	return node->next;
100054e0:	681b      	ldr	r3, [r3, #0]
100054e2:	9804      	ldr	r0, [sp, #16]
100054e4:	0017      	movs	r7, r2
100054e6:	9304      	str	r3, [sp, #16]
100054e8:	e7e2      	b.n	100054b0 <work_queue_main+0xcc>
	parent->next = child;
100054ea:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
100054ec:	685a      	ldr	r2, [r3, #4]
100054ee:	4282      	cmp	r2, r0
100054f0:	d1ed      	bne.n	100054ce <work_queue_main+0xea>
	list->tail = node;
100054f2:	605f      	str	r7, [r3, #4]
}
100054f4:	e7eb      	b.n	100054ce <work_queue_main+0xea>
100054f6:	b662      	cpsie	i
100054f8:	f3bf 8f6f 	isb	sy
100054fc:	e7bb      	b.n	10005476 <work_queue_main+0x92>
100054fe:	46c0      	nop			; (mov r8, r8)
10005500:	2000036d 	.word	0x2000036d
10005504:	2000035c 	.word	0x2000035c

10005508 <submit_to_queue_locked>:
{
10005508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
1000550a:	68c3      	ldr	r3, [r0, #12]
{
1000550c:	000d      	movs	r5, r1
	return (*flagp & BIT(bit)) != 0U;
1000550e:	0859      	lsrs	r1, r3, #1
10005510:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10005512:	000f      	movs	r7, r1
{
10005514:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10005516:	4017      	ands	r7, r2
10005518:	4211      	tst	r1, r2
1000551a:	d14b      	bne.n	100055b4 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
1000551c:	089b      	lsrs	r3, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
1000551e:	4213      	tst	r3, r2
10005520:	d11d      	bne.n	1000555e <submit_to_queue_locked+0x56>
		if (*queuep == NULL) {
10005522:	682b      	ldr	r3, [r5, #0]
10005524:	2b00      	cmp	r3, #0
10005526:	d101      	bne.n	1000552c <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10005528:	6883      	ldr	r3, [r0, #8]
1000552a:	602b      	str	r3, [r5, #0]
		ret = 1;
1000552c:	2701      	movs	r7, #1
	return (*flagp & BIT(bit)) != 0U;
1000552e:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10005530:	423b      	tst	r3, r7
10005532:	d002      	beq.n	1000553a <submit_to_queue_locked+0x32>
			*queuep = work->queue;
10005534:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10005536:	19ff      	adds	r7, r7, r7
			*queuep = work->queue;
10005538:	602b      	str	r3, [r5, #0]
		int rc = queue_submit_locked(*queuep, work);
1000553a:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
1000553c:	2e00      	cmp	r6, #0
1000553e:	d047      	beq.n	100055d0 <submit_to_queue_locked+0xc8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10005540:	0032      	movs	r2, r6
10005542:	4b24      	ldr	r3, [pc, #144]	; (100055d4 <submit_to_queue_locked+0xcc>)
10005544:	3290      	adds	r2, #144	; 0x90
10005546:	689b      	ldr	r3, [r3, #8]
10005548:	9201      	str	r2, [sp, #4]
1000554a:	42b3      	cmp	r3, r6
1000554c:	d022      	beq.n	10005594 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
1000554e:	2101      	movs	r1, #1
10005550:	6812      	ldr	r2, [r2, #0]
10005552:	0893      	lsrs	r3, r2, #2
10005554:	400b      	ands	r3, r1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10005556:	420a      	tst	r2, r1
10005558:	d104      	bne.n	10005564 <submit_to_queue_locked+0x5c>
		ret = -EBUSY;
1000555a:	2713      	movs	r7, #19
		return -EINVAL;
1000555c:	427f      	negs	r7, r7
		*queuep = NULL;
1000555e:	2300      	movs	r3, #0
10005560:	602b      	str	r3, [r5, #0]
	return ret;
10005562:	e015      	b.n	10005590 <submit_to_queue_locked+0x88>
	} else if (draining && !chained) {
10005564:	2b00      	cmp	r3, #0
10005566:	d125      	bne.n	100055b4 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10005568:	08d3      	lsrs	r3, r2, #3
1000556a:	400b      	ands	r3, r1
	} else if (plugged && !draining) {
1000556c:	2b00      	cmp	r3, #0
1000556e:	d121      	bne.n	100055b4 <submit_to_queue_locked+0xac>
	parent->next = child;
10005570:	2300      	movs	r3, #0
10005572:	6023      	str	r3, [r4, #0]
	return list->tail;
10005574:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
10005576:	2b00      	cmp	r3, #0
10005578:	d127      	bne.n	100055ca <submit_to_queue_locked+0xc2>
	list->tail = node;
1000557a:	67f4      	str	r4, [r6, #124]	; 0x7c
	list->head = node;
1000557c:	67b4      	str	r4, [r6, #120]	; 0x78
		(void)notify_queue_locked(queue);
1000557e:	0030      	movs	r0, r6
10005580:	f000 fe85 	bl	1000628e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
10005584:	2304      	movs	r3, #4
10005586:	68e2      	ldr	r2, [r4, #12]
10005588:	4313      	orrs	r3, r2
1000558a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
1000558c:	682b      	ldr	r3, [r5, #0]
1000558e:	60a3      	str	r3, [r4, #8]
}
10005590:	0038      	movs	r0, r7
10005592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10005594:	f000 fcff 	bl	10005f96 <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
10005598:	9b01      	ldr	r3, [sp, #4]
1000559a:	2201      	movs	r2, #1
1000559c:	681b      	ldr	r3, [r3, #0]
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
1000559e:	2800      	cmp	r0, #0
100055a0:	d10a      	bne.n	100055b8 <submit_to_queue_locked+0xb0>
	return (*flagp & BIT(bit)) != 0U;
100055a2:	08d9      	lsrs	r1, r3, #3
100055a4:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
100055a6:	4213      	tst	r3, r2
100055a8:	d0d7      	beq.n	1000555a <submit_to_queue_locked+0x52>
	} else if (plugged && !draining) {
100055aa:	2900      	cmp	r1, #0
100055ac:	d0e0      	beq.n	10005570 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
100055ae:	089b      	lsrs	r3, r3, #2
	} else if (plugged && !draining) {
100055b0:	4213      	tst	r3, r2
100055b2:	d1dd      	bne.n	10005570 <submit_to_queue_locked+0x68>
		ret = -EBUSY;
100055b4:	2710      	movs	r7, #16
100055b6:	e7d1      	b.n	1000555c <submit_to_queue_locked+0x54>
	return (*flagp & BIT(bit)) != 0U;
100055b8:	0899      	lsrs	r1, r3, #2
100055ba:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
100055bc:	4213      	tst	r3, r2
100055be:	d0cc      	beq.n	1000555a <submit_to_queue_locked+0x52>
	} else if (draining && !chained) {
100055c0:	2900      	cmp	r1, #0
100055c2:	d1f7      	bne.n	100055b4 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
100055c4:	08db      	lsrs	r3, r3, #3
100055c6:	4013      	ands	r3, r2
100055c8:	e7d0      	b.n	1000556c <submit_to_queue_locked+0x64>
	parent->next = child;
100055ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
100055cc:	67f4      	str	r4, [r6, #124]	; 0x7c
}
100055ce:	e7d6      	b.n	1000557e <submit_to_queue_locked+0x76>
		return -EINVAL;
100055d0:	2716      	movs	r7, #22
100055d2:	e7c3      	b.n	1000555c <submit_to_queue_locked+0x54>
100055d4:	2000032c 	.word	0x2000032c

100055d8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
100055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100055da:	0004      	movs	r4, r0
	list->head = NULL;
100055dc:	2000      	movs	r0, #0
	sys_dlist_init(&w->waitq);
100055de:	0026      	movs	r6, r4
100055e0:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = NULL;
100055e2:	67e0      	str	r0, [r4, #124]	; 0x7c
100055e4:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
100055e6:	1d20      	adds	r0, r4, #4
100055e8:	b089      	sub	sp, #36	; 0x24
100055ea:	67c6      	str	r6, [r0, #124]	; 0x7c
100055ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
100055ee:	3004      	adds	r0, #4
100055f0:	67c6      	str	r6, [r0, #124]	; 0x7c
100055f2:	3080      	adds	r0, #128	; 0x80
	list->head = (sys_dnode_t *)list;
100055f4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
100055f6:	6040      	str	r0, [r0, #4]
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
100055f8:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
100055fa:	2d00      	cmp	r5, #0
100055fc:	d007      	beq.n	1000560e <k_work_queue_start+0x36>
100055fe:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10005600:	4246      	negs	r6, r0
10005602:	4170      	adcs	r0, r6
10005604:	26ff      	movs	r6, #255	; 0xff
10005606:	4240      	negs	r0, r0
10005608:	43b0      	bics	r0, r6
1000560a:	3002      	adds	r0, #2
1000560c:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
1000560e:	0026      	movs	r6, r4
10005610:	3690      	adds	r6, #144	; 0x90
10005612:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
10005614:	2601      	movs	r6, #1
10005616:	4276      	negs	r6, r6
10005618:	17f7      	asrs	r7, r6, #31
1000561a:	9606      	str	r6, [sp, #24]
1000561c:	9707      	str	r7, [sp, #28]
1000561e:	2600      	movs	r6, #0
10005620:	480b      	ldr	r0, [pc, #44]	; (10005650 <k_work_queue_start+0x78>)
10005622:	9303      	str	r3, [sp, #12]
10005624:	9604      	str	r6, [sp, #16]
10005626:	0003      	movs	r3, r0
10005628:	9602      	str	r6, [sp, #8]
1000562a:	0020      	movs	r0, r4
1000562c:	9601      	str	r6, [sp, #4]
1000562e:	9400      	str	r4, [sp, #0]
10005630:	f7ff f862 	bl	100046f8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
10005634:	42b5      	cmp	r5, r6
10005636:	d005      	beq.n	10005644 <k_work_queue_start+0x6c>
10005638:	6829      	ldr	r1, [r5, #0]
1000563a:	42b1      	cmp	r1, r6
1000563c:	d002      	beq.n	10005644 <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
1000563e:	0020      	movs	r0, r4
10005640:	f000 fcaf 	bl	10005fa2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
10005644:	0020      	movs	r0, r4
10005646:	f000 fcb1 	bl	10005fac <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
1000564a:	b009      	add	sp, #36	; 0x24
1000564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000564e:	46c0      	nop			; (mov r8, r8)
10005650:	100053e5 	.word	0x100053e5

10005654 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10005654:	4770      	bx	lr

10005656 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
10005656:	b5f0      	push	{r4, r5, r6, r7, lr}
10005658:	b085      	sub	sp, #20
1000565a:	000d      	movs	r5, r1
1000565c:	1e1c      	subs	r4, r3, #0
1000565e:	9002      	str	r0, [sp, #8]
10005660:	9203      	str	r2, [sp, #12]
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
10005662:	d029      	beq.n	100056b8 <cbpprintf_external+0x62>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
10005664:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
10005666:	785b      	ldrb	r3, [r3, #1]
10005668:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
1000566a:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
1000566c:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000566e:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
10005670:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10005672:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
10005674:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10005676:	18c0      	adds	r0, r0, r3
10005678:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
1000567a:	9b01      	ldr	r3, [sp, #4]
1000567c:	429e      	cmp	r6, r3
1000567e:	d310      	bcc.n	100056a2 <cbpprintf_external+0x4c>

	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10005680:	7962      	ldrb	r2, [r4, #5]
10005682:	7923      	ldrb	r3, [r4, #4]
10005684:	0212      	lsls	r2, r2, #8
10005686:	431a      	orrs	r2, r3
10005688:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
1000568a:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000568c:	041b      	lsls	r3, r3, #16
1000568e:	4313      	orrs	r3, r2
10005690:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
10005692:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10005694:	0612      	lsls	r2, r2, #24
10005696:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10005698:	0023      	movs	r3, r4
1000569a:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
1000569c:	47a8      	blx	r5
}
1000569e:	b005      	add	sp, #20
100056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
100056a2:	7803      	ldrb	r3, [r0, #0]
100056a4:	1c47      	adds	r7, r0, #1
		*ps = s;
100056a6:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
100056a8:	0038      	movs	r0, r7
		*ps = s;
100056aa:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
100056ac:	f000 f92d 	bl	1000590a <strlen>
100056b0:	3001      	adds	r0, #1
100056b2:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
100056b4:	3601      	adds	r6, #1
100056b6:	e7e0      	b.n	1000567a <cbpprintf_external+0x24>
		return -EINVAL;
100056b8:	2016      	movs	r0, #22
100056ba:	4240      	negs	r0, r0
100056bc:	e7ef      	b.n	1000569e <cbpprintf_external+0x48>

100056be <arch_printk_char_out>:
}
100056be:	2000      	movs	r0, #0
100056c0:	4770      	bx	lr

100056c2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
100056c2:	b40f      	push	{r0, r1, r2, r3}
100056c4:	b507      	push	{r0, r1, r2, lr}
100056c6:	a904      	add	r1, sp, #16
100056c8:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
100056ca:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
100056cc:	f000 f888 	bl	100057e0 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
100056d0:	b003      	add	sp, #12
100056d2:	bc08      	pop	{r3}
100056d4:	b004      	add	sp, #16
100056d6:	4718      	bx	r3

100056d8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100056d8:	b510      	push	{r4, lr}
100056da:	0004      	movs	r4, r0
100056dc:	0008      	movs	r0, r1
100056de:	0011      	movs	r1, r2
100056e0:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100056e2:	47a0      	blx	r4
	return z_impl_z_current_get();
100056e4:	f7ff fb68 	bl	10004db8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100056e8:	f7fd ff1e 	bl	10003528 <z_impl_k_thread_abort>

100056ec <encode_uint>:
{
100056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100056ee:	b085      	sub	sp, #20
100056f0:	9001      	str	r0, [sp, #4]
100056f2:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
100056f4:	78d3      	ldrb	r3, [r2, #3]
{
100056f6:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
100056f8:	001a      	movs	r2, r3
100056fa:	3a41      	subs	r2, #65	; 0x41
100056fc:	000f      	movs	r7, r1
	switch (specifier) {
100056fe:	2408      	movs	r4, #8
10005700:	9202      	str	r2, [sp, #8]
10005702:	2b6f      	cmp	r3, #111	; 0x6f
10005704:	d00a      	beq.n	1000571c <encode_uint+0x30>
10005706:	d804      	bhi.n	10005712 <encode_uint+0x26>
		return 16;
10005708:	1924      	adds	r4, r4, r4
	switch (specifier) {
1000570a:	2b58      	cmp	r3, #88	; 0x58
1000570c:	d006      	beq.n	1000571c <encode_uint+0x30>
		return 10;
1000570e:	3c06      	subs	r4, #6
10005710:	e004      	b.n	1000571c <encode_uint+0x30>
	switch (specifier) {
10005712:	2208      	movs	r2, #8
		return 16;
10005714:	2410      	movs	r4, #16
	switch (specifier) {
10005716:	4393      	bics	r3, r2
10005718:	2b70      	cmp	r3, #112	; 0x70
1000571a:	d1f8      	bne.n	1000570e <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
1000571c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000571e:	0022      	movs	r2, r4
10005720:	2300      	movs	r3, #0
10005722:	0039      	movs	r1, r7
10005724:	9801      	ldr	r0, [sp, #4]
10005726:	f7fa fe6b 	bl	10000400 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
1000572a:	0013      	movs	r3, r2
1000572c:	468c      	mov	ip, r1
1000572e:	b2d2      	uxtb	r2, r2
10005730:	2b09      	cmp	r3, #9
10005732:	d81a      	bhi.n	1000576a <encode_uint+0x7e>
10005734:	3230      	adds	r2, #48	; 0x30
10005736:	b2d3      	uxtb	r3, r2
10005738:	3e01      	subs	r6, #1
1000573a:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
1000573c:	2300      	movs	r3, #0
1000573e:	42bb      	cmp	r3, r7
10005740:	d102      	bne.n	10005748 <encode_uint+0x5c>
10005742:	9b01      	ldr	r3, [sp, #4]
10005744:	429c      	cmp	r4, r3
10005746:	d802      	bhi.n	1000574e <encode_uint+0x62>
10005748:	9b03      	ldr	r3, [sp, #12]
1000574a:	429e      	cmp	r6, r3
1000574c:	d80a      	bhi.n	10005764 <encode_uint+0x78>
	if (conv->flag_hash) {
1000574e:	782b      	ldrb	r3, [r5, #0]
10005750:	069b      	lsls	r3, r3, #26
10005752:	d504      	bpl.n	1000575e <encode_uint+0x72>
		if (radix == 8) {
10005754:	2c08      	cmp	r4, #8
10005756:	d110      	bne.n	1000577a <encode_uint+0x8e>
			conv->altform_0 = true;
10005758:	78ab      	ldrb	r3, [r5, #2]
1000575a:	4323      	orrs	r3, r4
1000575c:	70ab      	strb	r3, [r5, #2]
}
1000575e:	0030      	movs	r0, r6
10005760:	b005      	add	sp, #20
10005762:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10005764:	4667      	mov	r7, ip
10005766:	9001      	str	r0, [sp, #4]
10005768:	e7d9      	b.n	1000571e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
1000576a:	0013      	movs	r3, r2
1000576c:	9902      	ldr	r1, [sp, #8]
1000576e:	3357      	adds	r3, #87	; 0x57
10005770:	b2db      	uxtb	r3, r3
10005772:	2919      	cmp	r1, #25
10005774:	d8e0      	bhi.n	10005738 <encode_uint+0x4c>
10005776:	3237      	adds	r2, #55	; 0x37
10005778:	e7dd      	b.n	10005736 <encode_uint+0x4a>
		} else if (radix == 16) {
1000577a:	2c10      	cmp	r4, #16
1000577c:	d1ef      	bne.n	1000575e <encode_uint+0x72>
			conv->altform_0c = true;
1000577e:	78ab      	ldrb	r3, [r5, #2]
10005780:	431c      	orrs	r4, r3
10005782:	70ac      	strb	r4, [r5, #2]
	return bp;
10005784:	e7eb      	b.n	1000575e <encode_uint+0x72>

10005786 <outs>:
{
10005786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005788:	0007      	movs	r7, r0
1000578a:	0015      	movs	r5, r2
1000578c:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000578e:	0014      	movs	r4, r2
{
10005790:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10005792:	42a6      	cmp	r6, r4
10005794:	d806      	bhi.n	100057a4 <outs+0x1e>
10005796:	2e00      	cmp	r6, #0
10005798:	d001      	beq.n	1000579e <outs+0x18>
	return (int)count;
1000579a:	1b60      	subs	r0, r4, r5
1000579c:	e008      	b.n	100057b0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000579e:	7823      	ldrb	r3, [r4, #0]
100057a0:	2b00      	cmp	r3, #0
100057a2:	d0fa      	beq.n	1000579a <outs+0x14>
		int rc = out((int)*sp++, ctx);
100057a4:	7820      	ldrb	r0, [r4, #0]
100057a6:	9901      	ldr	r1, [sp, #4]
100057a8:	47b8      	blx	r7
		if (rc < 0) {
100057aa:	3401      	adds	r4, #1
100057ac:	2800      	cmp	r0, #0
100057ae:	daf0      	bge.n	10005792 <outs+0xc>
}
100057b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100057b2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
100057b2:	4770      	bx	lr

100057b4 <dummy_timestamp>:
}
100057b4:	2000      	movs	r0, #0
100057b6:	4770      	bx	lr

100057b8 <default_lf_get_timestamp>:
{
100057b8:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
100057ba:	f000 fd0a 	bl	100061d2 <z_impl_k_uptime_ticks>
100057be:	220a      	movs	r2, #10
100057c0:	2300      	movs	r3, #0
100057c2:	f7fa fe1d 	bl	10000400 <__aeabi_uldivmod>
}
100057c6:	bd10      	pop	{r4, pc}

100057c8 <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
100057c8:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
100057ca:	2101      	movs	r1, #1
100057cc:	f000 fd1e 	bl	1000620c <z_impl_atomic_add>
	return atomic_add(target, 1);

}
100057d0:	bd10      	pop	{r4, pc}

100057d2 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
100057d2:	2100      	movs	r1, #0
{
100057d4:	b510      	push	{r4, lr}
		(void)z_log_init(false, false);
100057d6:	0008      	movs	r0, r1
100057d8:	f7fd f960 	bl	10002a9c <z_log_init.isra.0>
	}

	return 0;
}
100057dc:	2000      	movs	r0, #0
100057de:	bd10      	pop	{r4, pc}

100057e0 <z_log_vprintk>:
{
100057e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100057e2:	9002      	str	r0, [sp, #8]
100057e4:	2000      	movs	r0, #0
100057e6:	9103      	str	r1, [sp, #12]
100057e8:	0003      	movs	r3, r0
100057ea:	0002      	movs	r2, r0
100057ec:	0001      	movs	r1, r0
100057ee:	9001      	str	r0, [sp, #4]
100057f0:	9000      	str	r0, [sp, #0]
100057f2:	f7fd fa55 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
100057f6:	b005      	add	sp, #20
100057f8:	bd00      	pop	{pc}

100057fa <z_log_notify_backend_enabled>:
}
100057fa:	4770      	bx	lr

100057fc <z_log_get_tag>:
}
100057fc:	2000      	movs	r0, #0
100057fe:	4770      	bx	lr

10005800 <z_log_msg_finalize>:
{
10005800:	b570      	push	{r4, r5, r6, lr}
10005802:	000e      	movs	r6, r1
10005804:	0004      	movs	r4, r0
10005806:	0015      	movs	r5, r2
10005808:	0019      	movs	r1, r3
	if (!msg) {
1000580a:	2800      	cmp	r0, #0
1000580c:	d102      	bne.n	10005814 <z_log_msg_finalize+0x14>
		z_log_dropped(false);
1000580e:	f7fd f9f9 	bl	10002c04 <z_log_dropped>
}
10005812:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
10005814:	2b00      	cmp	r3, #0
10005816:	d006      	beq.n	10005826 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
10005818:	032b      	lsls	r3, r5, #12
1000581a:	0d5b      	lsrs	r3, r3, #21
1000581c:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
1000581e:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
10005820:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
10005822:	f000 f884 	bl	1000592e <memcpy>
	z_log_msg_commit(msg);
10005826:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
10005828:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
1000582a:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
1000582c:	f7fd f9fa 	bl	10002c24 <z_log_msg_commit>
10005830:	e7ef      	b.n	10005812 <z_log_msg_finalize+0x12>

10005832 <out_func>:
{
10005832:	b513      	push	{r0, r1, r4, lr}
		char x = (char)c;
10005834:	466b      	mov	r3, sp
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
10005836:	684a      	ldr	r2, [r1, #4]
		char x = (char)c;
10005838:	71d8      	strb	r0, [r3, #7]
1000583a:	3307      	adds	r3, #7
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
1000583c:	680c      	ldr	r4, [r1, #0]
1000583e:	0018      	movs	r0, r3
10005840:	2101      	movs	r1, #1
10005842:	6852      	ldr	r2, [r2, #4]
10005844:	47a0      	blx	r4
}
10005846:	2000      	movs	r0, #0
10005848:	bd16      	pop	{r1, r2, r4, pc}

1000584a <cr_out_func>:
{
1000584a:	b570      	push	{r4, r5, r6, lr}
1000584c:	0004      	movs	r4, r0
1000584e:	000d      	movs	r5, r1
	if (c == '\n') {
10005850:	280a      	cmp	r0, #10
10005852:	d102      	bne.n	1000585a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
10005854:	200d      	movs	r0, #13
10005856:	f7ff ffec 	bl	10005832 <out_func>
	out_func(c, ctx);
1000585a:	0029      	movs	r1, r5
1000585c:	0020      	movs	r0, r4
1000585e:	f7ff ffe8 	bl	10005832 <out_func>
}
10005862:	2000      	movs	r0, #0
10005864:	bd70      	pop	{r4, r5, r6, pc}

10005866 <buffer_write>:
{
10005866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005868:	0006      	movs	r6, r0
1000586a:	000d      	movs	r5, r1
1000586c:	0014      	movs	r4, r2
1000586e:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
10005870:	0021      	movs	r1, r4
10005872:	0028      	movs	r0, r5
10005874:	003a      	movs	r2, r7
10005876:	47b0      	blx	r6
		len -= processed;
10005878:	1a24      	subs	r4, r4, r0
		buf += processed;
1000587a:	182d      	adds	r5, r5, r0
	} while (len != 0);
1000587c:	2c00      	cmp	r4, #0
1000587e:	d1f7      	bne.n	10005870 <buffer_write+0xa>
}
10005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10005882 <cbvprintf>:
{
10005882:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10005884:	2400      	movs	r4, #0
10005886:	9400      	str	r4, [sp, #0]
10005888:	f7fc fd74 	bl	10002374 <z_cbvprintf_impl>
}
1000588c:	bd16      	pop	{r1, r2, r4, pc}

1000588e <log_output_flush>:
{
1000588e:	b510      	push	{r4, lr}
		     output->control_block->offset,
10005890:	6842      	ldr	r2, [r0, #4]
{
10005892:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
10005894:	ca0c      	ldmia	r2, {r2, r3}
10005896:	6881      	ldr	r1, [r0, #8]
10005898:	6800      	ldr	r0, [r0, #0]
1000589a:	f7ff ffe4 	bl	10005866 <buffer_write>
	output->control_block->offset = 0;
1000589e:	2200      	movs	r2, #0
100058a0:	6863      	ldr	r3, [r4, #4]
100058a2:	601a      	str	r2, [r3, #0]
}
100058a4:	bd10      	pop	{r4, pc}

100058a6 <log_backend_uart_init>:
}
100058a6:	4770      	bx	lr

100058a8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
100058a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
100058aa:	ab0b      	add	r3, sp, #44	; 0x2c
100058ac:	9305      	str	r3, [sp, #20]
100058ae:	2000      	movs	r0, #0
100058b0:	9303      	str	r3, [sp, #12]
100058b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100058b4:	2201      	movs	r2, #1
100058b6:	9302      	str	r3, [sp, #8]
100058b8:	9001      	str	r0, [sp, #4]
100058ba:	0003      	movs	r3, r0
100058bc:	9000      	str	r0, [sp, #0]
100058be:	f7fd f9ef 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
100058c2:	b007      	add	sp, #28
100058c4:	bd00      	pop	{pc}

100058c6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
100058c6:	b510      	push	{r4, lr}
100058c8:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
100058ca:	6800      	ldr	r0, [r0, #0]
100058cc:	f7fd fc2e 	bl	1000312c <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
100058d0:	bd10      	pop	{r4, pc}

100058d2 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
100058d2:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
100058d4:	2100      	movs	r1, #0
100058d6:	2001      	movs	r0, #1
100058d8:	f7fd fc28 	bl	1000312c <z_arm_fatal_error>
}
100058dc:	bd10      	pop	{r4, pc}

100058de <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
100058de:	b510      	push	{r4, lr}
	handler();
100058e0:	f7fd fcaa 	bl	10003238 <z_SysNmiOnReset>
	z_arm_int_exit();
100058e4:	f7fd fd54 	bl	10003390 <z_arm_exc_exit>
}
100058e8:	bd10      	pop	{r4, pc}

100058ea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
100058ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
100058ec:	ab0b      	add	r3, sp, #44	; 0x2c
100058ee:	9305      	str	r3, [sp, #20]
100058f0:	2000      	movs	r0, #0
100058f2:	9303      	str	r3, [sp, #12]
100058f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100058f6:	2201      	movs	r2, #1
100058f8:	9302      	str	r3, [sp, #8]
100058fa:	9001      	str	r0, [sp, #4]
100058fc:	0003      	movs	r3, r0
100058fe:	9000      	str	r0, [sp, #0]
10005900:	f7fd f9ce 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
10005904:	b007      	add	sp, #28
10005906:	bd00      	pop	{pc}

10005908 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10005908:	4770      	bx	lr

1000590a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
1000590a:	0003      	movs	r3, r0
	size_t n = 0;
1000590c:	2000      	movs	r0, #0

	while (*s != '\0') {
1000590e:	5c1a      	ldrb	r2, [r3, r0]
10005910:	2a00      	cmp	r2, #0
10005912:	d100      	bne.n	10005916 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10005914:	4770      	bx	lr
		n++;
10005916:	3001      	adds	r0, #1
10005918:	e7f9      	b.n	1000590e <strlen+0x4>

1000591a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000591a:	0003      	movs	r3, r0
	size_t n = 0;
1000591c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
1000591e:	5c1a      	ldrb	r2, [r3, r0]
10005920:	2a00      	cmp	r2, #0
10005922:	d001      	beq.n	10005928 <strnlen+0xe>
10005924:	4288      	cmp	r0, r1
10005926:	d100      	bne.n	1000592a <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10005928:	4770      	bx	lr
		n++;
1000592a:	3001      	adds	r0, #1
1000592c:	e7f7      	b.n	1000591e <strnlen+0x4>

1000592e <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
1000592e:	2300      	movs	r3, #0
{
10005930:	b510      	push	{r4, lr}
	while (n > 0) {
10005932:	429a      	cmp	r2, r3
10005934:	d100      	bne.n	10005938 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10005936:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10005938:	5ccc      	ldrb	r4, [r1, r3]
1000593a:	54c4      	strb	r4, [r0, r3]
		n--;
1000593c:	3301      	adds	r3, #1
1000593e:	e7f8      	b.n	10005932 <memcpy+0x4>

10005940 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10005940:	0003      	movs	r3, r0
10005942:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10005944:	1882      	adds	r2, r0, r2
10005946:	4293      	cmp	r3, r2
10005948:	d100      	bne.n	1000594c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000594a:	4770      	bx	lr
		*(d_byte++) = c_byte;
1000594c:	7019      	strb	r1, [r3, #0]
		n--;
1000594e:	3301      	adds	r3, #1
10005950:	e7f9      	b.n	10005946 <memset+0x6>

10005952 <_stdout_hook_default>:
	return EOF;
10005952:	2001      	movs	r0, #1
}
10005954:	4240      	negs	r0, r0
10005956:	4770      	bx	lr

10005958 <adc_rpi_configure_func_0>:
			      &adc_rpi_data_##idx,				   \
			      &adc_rpi_config_##idx, POST_KERNEL,		   \
			      CONFIG_ADC_INIT_PRIORITY,				   \
			      &adc_rpi_api_##idx)

DT_INST_FOREACH_STATUS_OKAY(ADC_RPI_INIT);
10005958:	b510      	push	{r4, lr}
1000595a:	2200      	movs	r2, #0
1000595c:	2103      	movs	r1, #3
1000595e:	2016      	movs	r0, #22
10005960:	f7fd fc40 	bl	100031e4 <z_arm_irq_priority_set>
10005964:	2016      	movs	r0, #22
10005966:	f7fd fc31 	bl	100031cc <arch_irq_enable>
1000596a:	bd10      	pop	{r4, pc}

1000596c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000596c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000596e:	ab0b      	add	r3, sp, #44	; 0x2c
10005970:	9305      	str	r3, [sp, #20]
10005972:	2000      	movs	r0, #0
10005974:	9303      	str	r3, [sp, #12]
10005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10005978:	2201      	movs	r2, #1
1000597a:	9302      	str	r3, [sp, #8]
1000597c:	9001      	str	r0, [sp, #4]
1000597e:	0003      	movs	r3, r0
10005980:	9000      	str	r0, [sp, #0]
10005982:	f7fd f98d 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
10005986:	b007      	add	sp, #28
10005988:	bd00      	pop	{pc}

1000598a <adc_context_on_timer_expired>:
{
1000598a:	b510      	push	{r4, lr}
1000598c:	0004      	movs	r4, r0
	if (atomic_inc(&ctx->sampling_requested) == 0) {
1000598e:	3c08      	subs	r4, #8
10005990:	2101      	movs	r1, #1
10005992:	0020      	movs	r0, r4
10005994:	f000 fc3a 	bl	1000620c <z_impl_atomic_add>
10005998:	2800      	cmp	r0, #0
1000599a:	d103      	bne.n	100059a4 <adc_context_on_timer_expired+0x1a>
		adc_context_start_sampling(ctx);
1000599c:	0020      	movs	r0, r4
1000599e:	f7fd fe73 	bl	10003688 <adc_context_start_sampling>
}
100059a2:	bd10      	pop	{r4, pc}
		ctx->status = -EBUSY;
100059a4:	2310      	movs	r3, #16
100059a6:	425b      	negs	r3, r3
100059a8:	6723      	str	r3, [r4, #112]	; 0x70
}
100059aa:	e7fa      	b.n	100059a2 <adc_context_on_timer_expired+0x18>

100059ac <adc_rpi_read>:
{
100059ac:	b510      	push	{r4, lr}
	return adc_rpi_read_async(dev, sequence, NULL);
100059ae:	2200      	movs	r2, #0
100059b0:	f7fd fe98 	bl	100036e4 <adc_rpi_read_async>
}
100059b4:	bd10      	pop	{r4, pc}

100059b6 <adc_context_complete.part.0>:
static inline void adc_context_complete(struct adc_context *ctx, int status)
100059b6:	b510      	push	{r4, lr}
100059b8:	0004      	movs	r4, r0
		if (ctx->signal) {
100059ba:	6f40      	ldr	r0, [r0, #116]	; 0x74
100059bc:	2800      	cmp	r0, #0
100059be:	d001      	beq.n	100059c4 <adc_context_complete.part.0+0xe>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
100059c0:	f7ff fcc8 	bl	10005354 <z_impl_k_poll_signal_raise>
		k_sem_give(&ctx->lock);
100059c4:	0020      	movs	r0, r4
100059c6:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
100059c8:	f7fe ff0a 	bl	100047e0 <z_impl_k_sem_give>
}
100059cc:	bd10      	pop	{r4, pc}

100059ce <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
100059ce:	23d0      	movs	r3, #208	; 0xd0
100059d0:	061b      	lsls	r3, r3, #24
100059d2:	685b      	ldr	r3, [r3, #4]
}
100059d4:	2000      	movs	r0, #0
	*value = gpio_get_all();
100059d6:	600b      	str	r3, [r1, #0]
}
100059d8:	4770      	bx	lr

100059da <gpio_rpi_port_set_bits_raw>:
{
100059da:	000a      	movs	r2, r1
100059dc:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
100059de:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
100059e0:	0010      	movs	r0, r2
100059e2:	6919      	ldr	r1, [r3, #16]
100059e4:	4388      	bics	r0, r1
100059e6:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
100059e8:	20d0      	movs	r0, #208	; 0xd0
100059ea:	0600      	lsls	r0, r0, #24
100059ec:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
100059ee:	691c      	ldr	r4, [r3, #16]
100059f0:	6959      	ldr	r1, [r3, #20]
100059f2:	4021      	ands	r1, r4
100059f4:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
100059f6:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
100059f8:	6919      	ldr	r1, [r3, #16]
100059fa:	695b      	ldr	r3, [r3, #20]
100059fc:	4011      	ands	r1, r2
100059fe:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10005a00:	6241      	str	r1, [r0, #36]	; 0x24
}
10005a02:	2000      	movs	r0, #0
10005a04:	bd10      	pop	{r4, pc}

10005a06 <gpio_rpi_port_clear_bits_raw>:
{
10005a06:	000a      	movs	r2, r1
10005a08:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10005a0a:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
10005a0c:	0010      	movs	r0, r2
10005a0e:	6919      	ldr	r1, [r3, #16]
10005a10:	4388      	bics	r0, r1
10005a12:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10005a14:	20d0      	movs	r0, #208	; 0xd0
10005a16:	0600      	lsls	r0, r0, #24
10005a18:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
10005a1a:	691c      	ldr	r4, [r3, #16]
10005a1c:	6959      	ldr	r1, [r3, #20]
10005a1e:	4021      	ands	r1, r4
10005a20:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10005a22:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10005a24:	6919      	ldr	r1, [r3, #16]
10005a26:	695b      	ldr	r3, [r3, #20]
10005a28:	4011      	ands	r1, r2
10005a2a:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
10005a2c:	6281      	str	r1, [r0, #40]	; 0x28
}
10005a2e:	2000      	movs	r0, #0
10005a30:	bd10      	pop	{r4, pc}

10005a32 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
10005a32:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
10005a34:	0008      	movs	r0, r1
10005a36:	691a      	ldr	r2, [r3, #16]
10005a38:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
10005a3a:	22d0      	movs	r2, #208	; 0xd0
10005a3c:	0612      	lsls	r2, r2, #24
10005a3e:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10005a40:	691b      	ldr	r3, [r3, #16]
}
10005a42:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10005a44:	400b      	ands	r3, r1
10005a46:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10005a48:	4770      	bx	lr

10005a4a <gpio_rpi_manage_callback>:
{
10005a4a:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10005a4c:	6903      	ldr	r3, [r0, #16]
	return list->head;
10005a4e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10005a50:	2800      	cmp	r0, #0
10005a52:	d021      	beq.n	10005a98 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005a54:	4288      	cmp	r0, r1
10005a56:	d11b      	bne.n	10005a90 <gpio_rpi_manage_callback+0x46>
	return node->next;
10005a58:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10005a5a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10005a5c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10005a5e:	42a1      	cmp	r1, r4
10005a60:	d100      	bne.n	10005a64 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10005a62:	6098      	str	r0, [r3, #8]
	parent->next = child;
10005a64:	2000      	movs	r0, #0
10005a66:	6008      	str	r0, [r1, #0]
	if (set) {
10005a68:	4282      	cmp	r2, r0
10005a6a:	d006      	beq.n	10005a7a <gpio_rpi_manage_callback+0x30>
	return list->head;
10005a6c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10005a6e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10005a70:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10005a72:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10005a74:	2a00      	cmp	r2, #0
10005a76:	d100      	bne.n	10005a7a <gpio_rpi_manage_callback+0x30>
	list->tail = node;
10005a78:	6099      	str	r1, [r3, #8]
	return 0;
10005a7a:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10005a7c:	e010      	b.n	10005aa0 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005a7e:	4281      	cmp	r1, r0
10005a80:	d106      	bne.n	10005a90 <gpio_rpi_manage_callback+0x46>
	return node->next;
10005a82:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
10005a84:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10005a86:	6898      	ldr	r0, [r3, #8]
10005a88:	4281      	cmp	r1, r0
10005a8a:	d1eb      	bne.n	10005a64 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10005a8c:	609c      	str	r4, [r3, #8]
}
10005a8e:	e7e9      	b.n	10005a64 <gpio_rpi_manage_callback+0x1a>
	return node->next;
10005a90:	0004      	movs	r4, r0
10005a92:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005a94:	2800      	cmp	r0, #0
10005a96:	d1f2      	bne.n	10005a7e <gpio_rpi_manage_callback+0x34>
			if (!set) {
10005a98:	2a00      	cmp	r2, #0
10005a9a:	d1e7      	bne.n	10005a6c <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10005a9c:	2016      	movs	r0, #22
10005a9e:	4240      	negs	r0, r0
}
10005aa0:	bd10      	pop	{r4, pc}

10005aa2 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10005aa2:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10005aa4:	6843      	ldr	r3, [r0, #4]
10005aa6:	685b      	ldr	r3, [r3, #4]
10005aa8:	4798      	blx	r3
	return 0;
}
10005aaa:	2000      	movs	r0, #0
10005aac:	bd10      	pop	{r4, pc}

10005aae <gpio_rpi_pin_interrupt_configure>:
{
10005aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005ab0:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10005ab2:	6907      	ldr	r7, [r0, #16]
{
10005ab4:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005ab6:	210f      	movs	r1, #15
10005ab8:	2200      	movs	r2, #0
10005aba:	0028      	movs	r0, r5
{
10005abc:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005abe:	f7fe fbf3 	bl	100042a8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005ac2:	2201      	movs	r2, #1
10005ac4:	0013      	movs	r3, r2
10005ac6:	40ab      	lsls	r3, r5
10005ac8:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10005aca:	2380      	movs	r3, #128	; 0x80
10005acc:	039b      	lsls	r3, r3, #14
10005ace:	429e      	cmp	r6, r3
10005ad0:	d105      	bne.n	10005ade <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005ad2:	68fb      	ldr	r3, [r7, #12]
10005ad4:	9a01      	ldr	r2, [sp, #4]
10005ad6:	4393      	bics	r3, r2
}
10005ad8:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005ada:	60fb      	str	r3, [r7, #12]
}
10005adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10005ade:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10005ae0:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10005ae2:	04db      	lsls	r3, r3, #19
10005ae4:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10005ae6:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10005ae8:	01f6      	lsls	r6, r6, #7
10005aea:	d50d      	bpl.n	10005b08 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10005aec:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10005aee:	2b00      	cmp	r3, #0
10005af0:	d001      	beq.n	10005af6 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10005af2:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10005af4:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10005af6:	2201      	movs	r2, #1
10005af8:	0028      	movs	r0, r5
10005afa:	f7fe fbd5 	bl	100042a8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005afe:	68fb      	ldr	r3, [r7, #12]
10005b00:	9a01      	ldr	r2, [sp, #4]
10005b02:	431a      	orrs	r2, r3
10005b04:	0013      	movs	r3, r2
10005b06:	e7e7      	b.n	10005ad8 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10005b08:	2b00      	cmp	r3, #0
10005b0a:	d0f4      	beq.n	10005af6 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10005b0c:	2302      	movs	r3, #2
10005b0e:	e7f1      	b.n	10005af4 <gpio_rpi_pin_interrupt_configure+0x46>

10005b10 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10005b10:	b510      	push	{r4, lr}
10005b12:	2200      	movs	r2, #0
10005b14:	2103      	movs	r1, #3
10005b16:	200d      	movs	r0, #13
10005b18:	f7fd fb64 	bl	100031e4 <z_arm_irq_priority_set>
10005b1c:	200d      	movs	r0, #13
10005b1e:	f7fd fb55 	bl	100031cc <arch_irq_enable>
10005b22:	bd10      	pop	{r4, pc}

10005b24 <gpio_rpi_port_set_masked_raw>:
{
10005b24:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
10005b26:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005b28:	20d0      	movs	r0, #208	; 0xd0
10005b2a:	0600      	lsls	r0, r0, #24
10005b2c:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
10005b2e:	6925      	ldr	r5, [r4, #16]
10005b30:	4053      	eors	r3, r2
10005b32:	400b      	ands	r3, r1
10005b34:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10005b36:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005b38:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10005b3a:	6a03      	ldr	r3, [r0, #32]
10005b3c:	4053      	eors	r3, r2
10005b3e:	439d      	bics	r5, r3
10005b40:	002b      	movs	r3, r5
10005b42:	6925      	ldr	r5, [r4, #16]
10005b44:	401d      	ands	r5, r3
10005b46:	6963      	ldr	r3, [r4, #20]
10005b48:	402b      	ands	r3, r5
10005b4a:	62c3      	str	r3, [r0, #44]	; 0x2c
10005b4c:	6a03      	ldr	r3, [r0, #32]
10005b4e:	405a      	eors	r2, r3
10005b50:	400a      	ands	r2, r1
10005b52:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
10005b54:	6963      	ldr	r3, [r4, #20]
10005b56:	4011      	ands	r1, r2
10005b58:	4399      	bics	r1, r3
10005b5a:	62c1      	str	r1, [r0, #44]	; 0x2c
}
10005b5c:	2000      	movs	r0, #0
10005b5e:	bd30      	pop	{r4, r5, pc}

10005b60 <gpio_rpi_configure>:
{
10005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005b62:	0015      	movs	r5, r2
10005b64:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
10005b66:	2401      	movs	r4, #1
10005b68:	0952      	lsrs	r2, r2, #5
10005b6a:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
10005b6c:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
10005b6e:	4021      	ands	r1, r4
10005b70:	0038      	movs	r0, r7
10005b72:	4022      	ands	r2, r4
10005b74:	f7fe fb4e 	bl	10004214 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10005b78:	2105      	movs	r1, #5
10005b7a:	0038      	movs	r0, r7
10005b7c:	f7fe fb34 	bl	100041e8 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10005b80:	03ab      	lsls	r3, r5, #14
10005b82:	d525      	bpl.n	10005bd0 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
10005b84:	40bc      	lsls	r4, r7
10005b86:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
10005b88:	07a9      	lsls	r1, r5, #30
10005b8a:	d515      	bpl.n	10005bb8 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
10005b8c:	4322      	orrs	r2, r4
10005b8e:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005b90:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
10005b92:	6971      	ldr	r1, [r6, #20]
10005b94:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10005b96:	0768      	lsls	r0, r5, #29
10005b98:	d507      	bpl.n	10005baa <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
10005b9a:	4321      	orrs	r1, r4
10005b9c:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
10005b9e:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
10005ba0:	036d      	lsls	r5, r5, #13
10005ba2:	d507      	bpl.n	10005bb4 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
10005ba4:	6254      	str	r4, [r2, #36]	; 0x24
}
10005ba6:	2000      	movs	r0, #0
10005ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
10005baa:	43a1      	bics	r1, r4
10005bac:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
10005bae:	6154      	str	r4, [r2, #20]
    if (out)
10005bb0:	032d      	lsls	r5, r5, #12
10005bb2:	d4f7      	bmi.n	10005ba4 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
10005bb4:	6294      	str	r4, [r2, #40]	; 0x28
}
10005bb6:	e7f6      	b.n	10005ba6 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
10005bb8:	43a2      	bics	r2, r4
10005bba:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
10005bbc:	22d0      	movs	r2, #208	; 0xd0
10005bbe:	0612      	lsls	r2, r2, #24
10005bc0:	0329      	lsls	r1, r5, #12
10005bc2:	d501      	bpl.n	10005bc8 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
10005bc4:	6154      	str	r4, [r2, #20]
}
10005bc6:	e7ed      	b.n	10005ba4 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10005bc8:	036d      	lsls	r5, r5, #13
10005bca:	d5eb      	bpl.n	10005ba4 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
10005bcc:	6194      	str	r4, [r2, #24]
}
10005bce:	e7e9      	b.n	10005ba4 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
10005bd0:	03ed      	lsls	r5, r5, #15
10005bd2:	d5e8      	bpl.n	10005ba6 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
10005bd4:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10005bd6:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
10005bd8:	0612      	lsls	r2, r2, #24
10005bda:	e7eb      	b.n	10005bb4 <gpio_rpi_configure+0x54>

10005bdc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10005bdc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10005bde:	6803      	ldr	r3, [r0, #0]
10005be0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10005be2:	7905      	ldrb	r5, [r0, #4]
10005be4:	6804      	ldr	r4, [r0, #0]
10005be6:	00ed      	lsls	r5, r5, #3
10005be8:	1964      	adds	r4, r4, r5
10005bea:	42a3      	cmp	r3, r4
10005bec:	d302      	bcc.n	10005bf4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10005bee:	2002      	movs	r0, #2
10005bf0:	4240      	negs	r0, r0
}
10005bf2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10005bf4:	795c      	ldrb	r4, [r3, #5]
10005bf6:	428c      	cmp	r4, r1
10005bf8:	d001      	beq.n	10005bfe <pinctrl_lookup_state+0x22>
		(*state)++;
10005bfa:	3308      	adds	r3, #8
10005bfc:	e7f0      	b.n	10005be0 <pinctrl_lookup_state+0x4>
			return 0;
10005bfe:	2000      	movs	r0, #0
10005c00:	e7f7      	b.n	10005bf2 <pinctrl_lookup_state+0x16>

10005c02 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10005c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005c04:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005c06:	2601      	movs	r6, #1
10005c08:	008d      	lsls	r5, r1, #2
10005c0a:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10005c0c:	42ac      	cmp	r4, r5
10005c0e:	d101      	bne.n	10005c14 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10005c10:	2000      	movs	r0, #0
10005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10005c14:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10005c16:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10005c18:	06c0      	lsls	r0, r0, #27
10005c1a:	0ec0      	lsrs	r0, r0, #27
10005c1c:	f000 f987 	bl	10005f2e <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10005c20:	8821      	ldrh	r1, [r4, #0]
10005c22:	7820      	ldrb	r0, [r4, #0]
10005c24:	05c9      	lsls	r1, r1, #23
10005c26:	06c0      	lsls	r0, r0, #27
10005c28:	0f09      	lsrs	r1, r1, #28
10005c2a:	0ec0      	lsrs	r0, r0, #27
10005c2c:	f7fe fadc 	bl	100041e8 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10005c30:	7861      	ldrb	r1, [r4, #1]
10005c32:	7820      	ldrb	r0, [r4, #0]
10005c34:	09ca      	lsrs	r2, r1, #7
10005c36:	06c0      	lsls	r0, r0, #27
10005c38:	0649      	lsls	r1, r1, #25
10005c3a:	0fc9      	lsrs	r1, r1, #31
10005c3c:	0ec0      	lsrs	r0, r0, #27
10005c3e:	f7fe fae9 	bl	10004214 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10005c42:	7861      	ldrb	r1, [r4, #1]
10005c44:	7820      	ldrb	r0, [r4, #0]
10005c46:	06c9      	lsls	r1, r1, #27
10005c48:	06c0      	lsls	r0, r0, #27
10005c4a:	0f09      	lsrs	r1, r1, #28
10005c4c:	0ec0      	lsrs	r0, r0, #27
10005c4e:	f7fe fb0f 	bl	10004270 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005c52:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10005c54:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005c56:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10005c58:	06c0      	lsls	r0, r0, #27
10005c5a:	4031      	ands	r1, r6
10005c5c:	0ec0      	lsrs	r0, r0, #27
10005c5e:	f7fe faf9 	bl	10004254 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10005c62:	78a1      	ldrb	r1, [r4, #2]
10005c64:	7820      	ldrb	r0, [r4, #0]
10005c66:	0789      	lsls	r1, r1, #30
10005c68:	06c0      	lsls	r0, r0, #27
10005c6a:	0fc9      	lsrs	r1, r1, #31
10005c6c:	0ec0      	lsrs	r0, r0, #27
10005c6e:	f7fe fae3 	bl	10004238 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10005c72:	78a1      	ldrb	r1, [r4, #2]
10005c74:	7820      	ldrb	r0, [r4, #0]
10005c76:	07c9      	lsls	r1, r1, #31
10005c78:	06c0      	lsls	r0, r0, #27
10005c7a:	0fc9      	lsrs	r1, r1, #31
10005c7c:	0ec0      	lsrs	r0, r0, #27
10005c7e:	f7fe fb35 	bl	100042ec <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10005c82:	003c      	movs	r4, r7
10005c84:	e7c2      	b.n	10005c0c <pinctrl_configure_pins+0xa>

10005c86 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10005c86:	2000      	movs	r0, #0
10005c88:	4770      	bx	lr

10005c8a <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10005c8a:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10005c8c:	7900      	ldrb	r0, [r0, #4]
10005c8e:	2802      	cmp	r0, #2
10005c90:	d009      	beq.n	10005ca6 <reset_rpi_read_register.isra.0+0x1c>
10005c92:	2804      	cmp	r0, #4
10005c94:	d00b      	beq.n	10005cae <reset_rpi_read_register.isra.0+0x24>
10005c96:	2801      	cmp	r0, #1
10005c98:	d10c      	bne.n	10005cb4 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
10005c9a:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
10005c9c:	780b      	ldrb	r3, [r1, #0]
10005c9e:	b2db      	uxtb	r3, r3
	return 0;
10005ca0:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10005ca2:	6013      	str	r3, [r2, #0]
}
10005ca4:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10005ca6:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
10005ca8:	880b      	ldrh	r3, [r1, #0]
10005caa:	b29b      	uxth	r3, r3
		break;
10005cac:	e7f8      	b.n	10005ca0 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10005cae:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10005cb0:	680b      	ldr	r3, [r1, #0]
		break;
10005cb2:	e7f5      	b.n	10005ca0 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10005cb4:	2016      	movs	r0, #22
10005cb6:	4240      	negs	r0, r0
10005cb8:	e7f4      	b.n	10005ca4 <reset_rpi_read_register.isra.0+0x1a>

10005cba <reset_rpi_update>:
{
10005cba:	0003      	movs	r3, r0
10005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10005cbe:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10005cc0:	685f      	ldr	r7, [r3, #4]
{
10005cc2:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10005cc4:	793e      	ldrb	r6, [r7, #4]
{
10005cc6:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10005cc8:	00f1      	lsls	r1, r6, #3
10005cca:	f7fa fabd 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005cce:	aa03      	add	r2, sp, #12
10005cd0:	0004      	movs	r4, r0
10005cd2:	000d      	movs	r5, r1
10005cd4:	b281      	uxth	r1, r0
10005cd6:	0038      	movs	r0, r7
10005cd8:	f7ff ffd7 	bl	10005c8a <reset_rpi_read_register.isra.0>
	if (ret) {
10005cdc:	2800      	cmp	r0, #0
10005cde:	d117      	bne.n	10005d10 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10005ce0:	2201      	movs	r2, #1
10005ce2:	9903      	ldr	r1, [sp, #12]
10005ce4:	b2ed      	uxtb	r5, r5
10005ce6:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
10005ce8:	000b      	movs	r3, r1
		value |= BIT(regbit);
10005cea:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
10005cec:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10005cee:	797d      	ldrb	r5, [r7, #5]
10005cf0:	9a01      	ldr	r2, [sp, #4]
10005cf2:	4295      	cmp	r5, r2
10005cf4:	d001      	beq.n	10005cfa <reset_rpi_update+0x40>
		value |= BIT(regbit);
10005cf6:	4663      	mov	r3, ip
10005cf8:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10005cfa:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
10005cfc:	2e02      	cmp	r6, #2
10005cfe:	d009      	beq.n	10005d14 <reset_rpi_update+0x5a>
10005d00:	2e04      	cmp	r6, #4
10005d02:	d00c      	beq.n	10005d1e <reset_rpi_update+0x64>
10005d04:	2e01      	cmp	r6, #1
10005d06:	d10e      	bne.n	10005d26 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
10005d08:	b2a4      	uxth	r4, r4
10005d0a:	b2db      	uxtb	r3, r3
10005d0c:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005d0e:	7023      	strb	r3, [r4, #0]
}
10005d10:	b005      	add	sp, #20
10005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10005d14:	b2a4      	uxth	r4, r4
10005d16:	b29b      	uxth	r3, r3
10005d18:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10005d1a:	8023      	strh	r3, [r4, #0]
}
10005d1c:	e7f8      	b.n	10005d10 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10005d1e:	b2a4      	uxth	r4, r4
10005d20:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10005d22:	6023      	str	r3, [r4, #0]
}
10005d24:	e7f4      	b.n	10005d10 <reset_rpi_update+0x56>
	switch (config->reg_width) {
10005d26:	2016      	movs	r0, #22
10005d28:	4240      	negs	r0, r0
10005d2a:	e7f1      	b.n	10005d10 <reset_rpi_update+0x56>

10005d2c <reset_rpi_line_assert>:
{
10005d2c:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10005d2e:	2201      	movs	r2, #1
10005d30:	f7ff ffc3 	bl	10005cba <reset_rpi_update>
}
10005d34:	bd10      	pop	{r4, pc}

10005d36 <reset_rpi_line_deassert>:
{
10005d36:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10005d38:	2200      	movs	r2, #0
10005d3a:	f7ff ffbe 	bl	10005cba <reset_rpi_update>
}
10005d3e:	bd10      	pop	{r4, pc}

10005d40 <reset_rpi_line_toggle>:
{
10005d40:	b570      	push	{r4, r5, r6, lr}
10005d42:	0004      	movs	r4, r0
10005d44:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10005d46:	f7ff fff1 	bl	10005d2c <reset_rpi_line_assert>
	if (ret) {
10005d4a:	2800      	cmp	r0, #0
10005d4c:	d103      	bne.n	10005d56 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10005d4e:	0029      	movs	r1, r5
10005d50:	0020      	movs	r0, r4
10005d52:	f7ff fff0 	bl	10005d36 <reset_rpi_line_deassert>
}
10005d56:	bd70      	pop	{r4, r5, r6, pc}

10005d58 <reset_rpi_status>:
{
10005d58:	0003      	movs	r3, r0
10005d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10005d5c:	685e      	ldr	r6, [r3, #4]
{
10005d5e:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10005d60:	7931      	ldrb	r1, [r6, #4]
{
10005d62:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10005d64:	00c9      	lsls	r1, r1, #3
10005d66:	f7fa fa6f 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10005d6a:	aa01      	add	r2, sp, #4
10005d6c:	000d      	movs	r5, r1
10005d6e:	b281      	uxth	r1, r0
10005d70:	0030      	movs	r0, r6
10005d72:	f7ff ff8a 	bl	10005c8a <reset_rpi_read_register.isra.0>
	if (ret) {
10005d76:	2800      	cmp	r0, #0
10005d78:	d109      	bne.n	10005d8e <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10005d7a:	9b01      	ldr	r3, [sp, #4]
10005d7c:	b2ed      	uxtb	r5, r5
10005d7e:	40eb      	lsrs	r3, r5
10005d80:	2201      	movs	r2, #1
10005d82:	439a      	bics	r2, r3
10005d84:	7973      	ldrb	r3, [r6, #5]
10005d86:	4259      	negs	r1, r3
10005d88:	414b      	adcs	r3, r1
10005d8a:	4053      	eors	r3, r2
10005d8c:	7023      	strb	r3, [r4, #0]
}
10005d8e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10005d90 <uart_rpi_poll_in>:
{
10005d90:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005d92:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005d94:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005d96:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005d98:	699c      	ldr	r4, [r3, #24]
10005d9a:	0020      	movs	r0, r4
10005d9c:	4010      	ands	r0, r2
10005d9e:	4214      	tst	r4, r2
10005da0:	d102      	bne.n	10005da8 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10005da2:	681b      	ldr	r3, [r3, #0]
10005da4:	700b      	strb	r3, [r1, #0]
}
10005da6:	bd10      	pop	{r4, pc}
		return -1;
10005da8:	2001      	movs	r0, #1
10005daa:	4240      	negs	r0, r0
10005dac:	e7fb      	b.n	10005da6 <uart_rpi_poll_in+0x16>

10005dae <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005dae:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005db0:	6843      	ldr	r3, [r0, #4]
10005db2:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005db4:	6998      	ldr	r0, [r3, #24]
10005db6:	4210      	tst	r0, r2
10005db8:	d1fc      	bne.n	10005db4 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10005dba:	6019      	str	r1, [r3, #0]
}
10005dbc:	4770      	bx	lr

10005dbe <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005dbe:	6843      	ldr	r3, [r0, #4]
10005dc0:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10005dc2:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10005dc4:	0518      	lsls	r0, r3, #20
10005dc6:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10005dc8:	055a      	lsls	r2, r3, #21
10005dca:	d501      	bpl.n	10005dd0 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10005dcc:	2208      	movs	r2, #8
10005dce:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10005dd0:	059a      	lsls	r2, r3, #22
10005dd2:	d501      	bpl.n	10005dd8 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10005dd4:	2202      	movs	r2, #2
10005dd6:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10005dd8:	05db      	lsls	r3, r3, #23
10005dda:	d501      	bpl.n	10005de0 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10005ddc:	2304      	movs	r3, #4
10005dde:	4318      	orrs	r0, r3
}
10005de0:	4770      	bx	lr

10005de2 <uart_rpi_fifo_fill>:
{
10005de2:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005de4:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005de6:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005de8:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10005dea:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005dec:	699c      	ldr	r4, [r3, #24]
10005dee:	422c      	tst	r4, r5
10005df0:	d102      	bne.n	10005df8 <uart_rpi_fifo_fill+0x16>
10005df2:	1a14      	subs	r4, r2, r0
10005df4:	2c00      	cmp	r4, #0
10005df6:	dc00      	bgt.n	10005dfa <uart_rpi_fifo_fill+0x18>
}
10005df8:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10005dfa:	5c0c      	ldrb	r4, [r1, r0]
10005dfc:	3001      	adds	r0, #1
10005dfe:	601c      	str	r4, [r3, #0]
10005e00:	e7f4      	b.n	10005dec <uart_rpi_fifo_fill+0xa>

10005e02 <uart_rpi_fifo_read>:
{
10005e02:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005e04:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005e06:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005e08:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10005e0a:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005e0c:	699c      	ldr	r4, [r3, #24]
10005e0e:	422c      	tst	r4, r5
10005e10:	d102      	bne.n	10005e18 <uart_rpi_fifo_read+0x16>
10005e12:	1a14      	subs	r4, r2, r0
10005e14:	2c00      	cmp	r4, #0
10005e16:	dc00      	bgt.n	10005e1a <uart_rpi_fifo_read+0x18>
}
10005e18:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10005e1a:	681c      	ldr	r4, [r3, #0]
10005e1c:	540c      	strb	r4, [r1, r0]
10005e1e:	3001      	adds	r0, #1
10005e20:	e7f4      	b.n	10005e0c <uart_rpi_fifo_read+0xa>

10005e22 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005e22:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005e24:	6843      	ldr	r3, [r0, #4]
10005e26:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005e28:	6b99      	ldr	r1, [r3, #56]	; 0x38
10005e2a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10005e2c:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005e2e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10005e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005e32:	438a      	bics	r2, r1
10005e34:	635a      	str	r2, [r3, #52]	; 0x34
}
10005e36:	4770      	bx	lr

10005e38 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10005e38:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005e3a:	6843      	ldr	r3, [r0, #4]
10005e3c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10005e3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005e40:	438b      	bics	r3, r1
10005e42:	6393      	str	r3, [r2, #56]	; 0x38
}
10005e44:	4770      	bx	lr

10005e46 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005e46:	6843      	ldr	r3, [r0, #4]
10005e48:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10005e4a:	6c18      	ldr	r0, [r3, #64]	; 0x40
10005e4c:	0680      	lsls	r0, r0, #26
10005e4e:	0fc0      	lsrs	r0, r0, #31
}
10005e50:	4770      	bx	lr

10005e52 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005e52:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005e54:	6843      	ldr	r3, [r0, #4]
10005e56:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005e58:	6b99      	ldr	r1, [r3, #56]	; 0x38
10005e5a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10005e5c:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10005e5e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10005e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005e62:	438a      	bics	r2, r1
10005e64:	635a      	str	r2, [r3, #52]	; 0x34
}
10005e66:	4770      	bx	lr

10005e68 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10005e68:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10005e6a:	6843      	ldr	r3, [r0, #4]
10005e6c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10005e6e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10005e70:	438b      	bics	r3, r1
10005e72:	6393      	str	r3, [r2, #56]	; 0x38
}
10005e74:	4770      	bx	lr

10005e76 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005e76:	6843      	ldr	r3, [r0, #4]
10005e78:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10005e7a:	6998      	ldr	r0, [r3, #24]
10005e7c:	0600      	lsls	r0, r0, #24
10005e7e:	0fc0      	lsrs	r0, r0, #31
}
10005e80:	4770      	bx	lr

10005e82 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005e82:	6843      	ldr	r3, [r0, #4]
10005e84:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10005e86:	6c18      	ldr	r0, [r3, #64]	; 0x40
10005e88:	06c0      	lsls	r0, r0, #27
10005e8a:	0fc0      	lsrs	r0, r0, #31
}
10005e8c:	4770      	bx	lr

10005e8e <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005e8e:	6843      	ldr	r3, [r0, #4]
10005e90:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005e92:	23f8      	movs	r3, #248	; 0xf8
10005e94:	6b91      	ldr	r1, [r2, #56]	; 0x38
10005e96:	00db      	lsls	r3, r3, #3
10005e98:	430b      	orrs	r3, r1
10005e9a:	6393      	str	r3, [r2, #56]	; 0x38
}
10005e9c:	4770      	bx	lr

10005e9e <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10005e9e:	b510      	push	{r4, lr}
10005ea0:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10005ea2:	f7ff ffee 	bl	10005e82 <uart_rpi_irq_rx_ready>
10005ea6:	0003      	movs	r3, r0
10005ea8:	2001      	movs	r0, #1
10005eaa:	2b00      	cmp	r3, #0
10005eac:	d104      	bne.n	10005eb8 <uart_rpi_irq_is_pending+0x1a>
10005eae:	0020      	movs	r0, r4
10005eb0:	f7ff ffc9 	bl	10005e46 <uart_rpi_irq_tx_ready>
10005eb4:	1e43      	subs	r3, r0, #1
10005eb6:	4198      	sbcs	r0, r3
}
10005eb8:	bd10      	pop	{r4, pc}

10005eba <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10005eba:	2001      	movs	r0, #1
10005ebc:	4770      	bx	lr

10005ebe <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10005ebe:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10005ec0:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10005ec2:	60da      	str	r2, [r3, #12]
}
10005ec4:	4770      	bx	lr

10005ec6 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10005ec6:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10005ec8:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10005eca:	6893      	ldr	r3, [r2, #8]
10005ecc:	2b00      	cmp	r3, #0
10005ece:	d001      	beq.n	10005ed4 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10005ed0:	68d1      	ldr	r1, [r2, #12]
10005ed2:	4798      	blx	r3
	}
}
10005ed4:	bd10      	pop	{r4, pc}

10005ed6 <uart_rpi_config_get>:
{
10005ed6:	0003      	movs	r3, r0
10005ed8:	b510      	push	{r4, lr}
10005eda:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
10005edc:	2208      	movs	r2, #8
10005ede:	6919      	ldr	r1, [r3, #16]
10005ee0:	f7ff fd25 	bl	1000592e <memcpy>
}
10005ee4:	2000      	movs	r0, #0
10005ee6:	bd10      	pop	{r4, pc}

10005ee8 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10005ee8:	b510      	push	{r4, lr}
10005eea:	2200      	movs	r2, #0
10005eec:	2103      	movs	r1, #3
10005eee:	2014      	movs	r0, #20
10005ef0:	f7fd f978 	bl	100031e4 <z_arm_irq_priority_set>
10005ef4:	2014      	movs	r0, #20
10005ef6:	f7fd f969 	bl	100031cc <arch_irq_enable>
10005efa:	bd10      	pop	{r4, pc}

10005efc <uart_rpi_configure>:
{
10005efc:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10005efe:	6843      	ldr	r3, [r0, #4]
{
10005f00:	0006      	movs	r6, r0
10005f02:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10005f04:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10005f06:	6809      	ldr	r1, [r1, #0]
10005f08:	6818      	ldr	r0, [r3, #0]
10005f0a:	f7fe f9fd 	bl	10004308 <uart_set_baudrate>
	if (baudrate == 0) {
10005f0e:	2800      	cmp	r0, #0
10005f10:	d102      	bne.n	10005f18 <uart_rpi_configure+0x1c>
		return -EINVAL;
10005f12:	2016      	movs	r0, #22
10005f14:	4240      	negs	r0, r0
}
10005f16:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10005f18:	79a3      	ldrb	r3, [r4, #6]
10005f1a:	7962      	ldrb	r2, [r4, #5]
10005f1c:	7921      	ldrb	r1, [r4, #4]
10005f1e:	6870      	ldr	r0, [r6, #4]
10005f20:	f7fd fea6 	bl	10003c70 <uart_rpi_set_format.isra.0>
10005f24:	2800      	cmp	r0, #0
10005f26:	d1f4      	bne.n	10005f12 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10005f28:	cc06      	ldmia	r4!, {r1, r2}
10005f2a:	c506      	stmia	r5!, {r1, r2}
	return 0;
10005f2c:	e7f3      	b.n	10005f16 <uart_rpi_configure+0x1a>

10005f2e <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005f2e:	2301      	movs	r3, #1
10005f30:	22d0      	movs	r2, #208	; 0xd0
10005f32:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10005f34:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005f36:	0612      	lsls	r2, r2, #24
10005f38:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005f3a:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10005f3c:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005f3e:	f7fe f953 	bl	100041e8 <gpio_set_function>
}
10005f42:	bd10      	pop	{r4, pc}

10005f44 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10005f44:	4770      	bx	lr

10005f46 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10005f46:	2800      	cmp	r0, #0
10005f48:	d009      	beq.n	10005f5e <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10005f4a:	2301      	movs	r3, #1
10005f4c:	68c2      	ldr	r2, [r0, #12]
10005f4e:	2000      	movs	r0, #0
10005f50:	7851      	ldrb	r1, [r2, #1]
10005f52:	4219      	tst	r1, r3
10005f54:	d002      	beq.n	10005f5c <z_device_is_ready+0x16>
10005f56:	7810      	ldrb	r0, [r2, #0]
10005f58:	4242      	negs	r2, r0
10005f5a:	4150      	adcs	r0, r2
10005f5c:	4018      	ands	r0, r3
}
10005f5e:	4770      	bx	lr

10005f60 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10005f60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10005f62:	ab0b      	add	r3, sp, #44	; 0x2c
10005f64:	9305      	str	r3, [sp, #20]
10005f66:	2000      	movs	r0, #0
10005f68:	9303      	str	r3, [sp, #12]
10005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10005f6c:	2201      	movs	r2, #1
10005f6e:	9302      	str	r3, [sp, #8]
10005f70:	9001      	str	r0, [sp, #4]
10005f72:	0003      	movs	r3, r0
10005f74:	9000      	str	r0, [sp, #0]
10005f76:	f7fc fe93 	bl	10002ca0 <z_impl_z_log_msg_runtime_vcreate>
}
10005f7a:	b007      	add	sp, #28
10005f7c:	bd00      	pop	{pc}

10005f7e <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10005f7e:	f3ef 8310 	mrs	r3, PRIMASK
10005f82:	b672      	cpsid	i
	for (;;) {
10005f84:	e7fe      	b.n	10005f84 <arch_system_halt+0x6>

10005f86 <z_early_memset>:
{
10005f86:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10005f88:	f7ff fcda 	bl	10005940 <memset>
}
10005f8c:	bd10      	pop	{r4, pc}

10005f8e <z_early_memcpy>:
{
10005f8e:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10005f90:	f7ff fccd 	bl	1000592e <memcpy>
}
10005f94:	bd10      	pop	{r4, pc}

10005f96 <k_is_in_isr>:
10005f96:	f3ef 8005 	mrs	r0, IPSR
	return (__get_IPSR()) ? (true) : (false);
10005f9a:	1e43      	subs	r3, r0, #1
10005f9c:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
10005f9e:	b2c0      	uxtb	r0, r0
}
10005fa0:	4770      	bx	lr

10005fa2 <z_impl_k_thread_name_set>:
	return -ENOSYS;
10005fa2:	2058      	movs	r0, #88	; 0x58
}
10005fa4:	4240      	negs	r0, r0
10005fa6:	4770      	bx	lr

10005fa8 <k_thread_name_get>:
}
10005fa8:	2000      	movs	r0, #0
10005faa:	4770      	bx	lr

10005fac <z_impl_k_thread_start>:
{
10005fac:	b510      	push	{r4, lr}
	z_sched_start(thread);
10005fae:	f7fe fdef 	bl	10004b90 <z_sched_start>
}
10005fb2:	bd10      	pop	{r4, pc}

10005fb4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10005fb4:	b510      	push	{r4, lr}
10005fb6:	f3ef 8310 	mrs	r3, PRIMASK
10005fba:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10005fbc:	f7fd f8ae 	bl	1000311c <arch_cpu_idle>
10005fc0:	e7f9      	b.n	10005fb6 <idle+0x2>

10005fc2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10005fc2:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10005fc4:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10005fc6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10005fc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005fca:	2300      	movs	r3, #0
10005fcc:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005fce:	6043      	str	r3, [r0, #4]
}
10005fd0:	4770      	bx	lr

10005fd2 <unpend_thread_no_timeout>:
{
10005fd2:	b510      	push	{r4, lr}
10005fd4:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10005fd6:	f7ff fff4 	bl	10005fc2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005fda:	2202      	movs	r2, #2
10005fdc:	7b63      	ldrb	r3, [r4, #13]
10005fde:	4393      	bics	r3, r2
10005fe0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10005fe2:	2300      	movs	r3, #0
10005fe4:	60a3      	str	r3, [r4, #8]
}
10005fe6:	bd10      	pop	{r4, pc}

10005fe8 <add_to_waitq_locked>:
{
10005fe8:	b570      	push	{r4, r5, r6, lr}
10005fea:	0004      	movs	r4, r0
10005fec:	000d      	movs	r5, r1
	unready_thread(thread);
10005fee:	f7fe fd29 	bl	10004a44 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10005ff2:	2302      	movs	r3, #2
10005ff4:	7b62      	ldrb	r2, [r4, #13]
10005ff6:	4313      	orrs	r3, r2
10005ff8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10005ffa:	2d00      	cmp	r5, #0
10005ffc:	d01c      	beq.n	10006038 <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
10005ffe:	60a5      	str	r5, [r4, #8]
	return list->head == list;
10006000:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006002:	429d      	cmp	r5, r3
10006004:	d109      	bne.n	1000601a <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
10006006:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10006008:	6025      	str	r5, [r4, #0]
	node->prev = tail;
1000600a:	6063      	str	r3, [r4, #4]
	tail->next = node;
1000600c:	601c      	str	r4, [r3, #0]
	list->tail = node;
1000600e:	606c      	str	r4, [r5, #4]
}
10006010:	e012      	b.n	10006038 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
10006012:	686a      	ldr	r2, [r5, #4]
10006014:	4293      	cmp	r3, r2
10006016:	d0f6      	beq.n	10006006 <add_to_waitq_locked+0x1e>
10006018:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000601a:	2b00      	cmp	r3, #0
1000601c:	d0f3      	beq.n	10006006 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
1000601e:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
10006020:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
10006022:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
10006024:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10006026:	428a      	cmp	r2, r1
10006028:	d0f3      	beq.n	10006012 <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000602a:	4291      	cmp	r1, r2
1000602c:	ddf1      	ble.n	10006012 <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
1000602e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10006030:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10006032:	6062      	str	r2, [r4, #4]
	prev->next = node;
10006034:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10006036:	605c      	str	r4, [r3, #4]
}
10006038:	bd70      	pop	{r4, r5, r6, pc}

1000603a <z_ready_thread>:
{
1000603a:	b510      	push	{r4, lr}
1000603c:	f3ef 8410 	mrs	r4, PRIMASK
10006040:	b672      	cpsid	i
			ready_thread(thread);
10006042:	f7fe fcc9 	bl	100049d8 <ready_thread>
	if (key != 0U) {
10006046:	2c00      	cmp	r4, #0
10006048:	d102      	bne.n	10006050 <z_ready_thread+0x16>
	__asm__ volatile(
1000604a:	b662      	cpsie	i
1000604c:	f3bf 8f6f 	isb	sy
}
10006050:	bd10      	pop	{r4, pc}

10006052 <z_unpend_thread_no_timeout>:
{
10006052:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10006054:	f3ef 8410 	mrs	r4, PRIMASK
10006058:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
1000605a:	6883      	ldr	r3, [r0, #8]
1000605c:	2b00      	cmp	r3, #0
1000605e:	d001      	beq.n	10006064 <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
10006060:	f7ff ffb7 	bl	10005fd2 <unpend_thread_no_timeout>
	if (key != 0U) {
10006064:	2c00      	cmp	r4, #0
10006066:	d102      	bne.n	1000606e <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
10006068:	b662      	cpsie	i
1000606a:	f3bf 8f6f 	isb	sy
}
1000606e:	bd10      	pop	{r4, pc}

10006070 <z_sched_wake_thread>:
{
10006070:	b570      	push	{r4, r5, r6, lr}
10006072:	0004      	movs	r4, r0
10006074:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10006076:	f3ef 8510 	mrs	r5, PRIMASK
1000607a:	b672      	cpsid	i
		if (!killed) {
1000607c:	2328      	movs	r3, #40	; 0x28
1000607e:	7b42      	ldrb	r2, [r0, #13]
10006080:	421a      	tst	r2, r3
10006082:	d10e      	bne.n	100060a2 <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10006084:	6883      	ldr	r3, [r0, #8]
10006086:	2b00      	cmp	r3, #0
10006088:	d001      	beq.n	1000608e <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
1000608a:	f7ff ffa2 	bl	10005fd2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000608e:	2204      	movs	r2, #4
10006090:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10006092:	2e00      	cmp	r6, #0
10006094:	d000      	beq.n	10006098 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10006096:	2214      	movs	r2, #20
10006098:	4393      	bics	r3, r2
			ready_thread(thread);
1000609a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000609c:	7363      	strb	r3, [r4, #13]
1000609e:	f7fe fc9b 	bl	100049d8 <ready_thread>
	if (key != 0U) {
100060a2:	2d00      	cmp	r5, #0
100060a4:	d102      	bne.n	100060ac <z_sched_wake_thread+0x3c>
	__asm__ volatile(
100060a6:	b662      	cpsie	i
100060a8:	f3bf 8f6f 	isb	sy
}
100060ac:	bd70      	pop	{r4, r5, r6, pc}

100060ae <z_thread_timeout>:
{
100060ae:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
100060b0:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
100060b2:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
100060b4:	f7ff ffdc 	bl	10006070 <z_sched_wake_thread>
}
100060b8:	bd10      	pop	{r4, pc}

100060ba <z_unpend1_no_timeout>:
{
100060ba:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100060bc:	f3ef 8510 	mrs	r5, PRIMASK
100060c0:	b672      	cpsid	i
	return list->head == list;
100060c2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100060c4:	42a0      	cmp	r0, r4
100060c6:	d00b      	beq.n	100060e0 <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
100060c8:	2c00      	cmp	r4, #0
100060ca:	d002      	beq.n	100060d2 <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
100060cc:	0020      	movs	r0, r4
100060ce:	f7ff ff80 	bl	10005fd2 <unpend_thread_no_timeout>
	if (key != 0U) {
100060d2:	2d00      	cmp	r5, #0
100060d4:	d102      	bne.n	100060dc <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
100060d6:	b662      	cpsie	i
100060d8:	f3bf 8f6f 	isb	sy
}
100060dc:	0020      	movs	r0, r4
100060de:	bd70      	pop	{r4, r5, r6, pc}
100060e0:	2400      	movs	r4, #0
100060e2:	e7f6      	b.n	100060d2 <z_unpend1_no_timeout+0x18>

100060e4 <z_unpend_first_thread>:
{
100060e4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100060e6:	f3ef 8510 	mrs	r5, PRIMASK
100060ea:	b672      	cpsid	i
	return list->head == list;
100060ec:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100060ee:	42a0      	cmp	r0, r4
100060f0:	d00f      	beq.n	10006112 <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
100060f2:	2c00      	cmp	r4, #0
100060f4:	d006      	beq.n	10006104 <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
100060f6:	0020      	movs	r0, r4
100060f8:	f7ff ff6b 	bl	10005fd2 <unpend_thread_no_timeout>
100060fc:	0020      	movs	r0, r4
100060fe:	3018      	adds	r0, #24
10006100:	f000 f850 	bl	100061a4 <z_abort_timeout>
	if (key != 0U) {
10006104:	2d00      	cmp	r5, #0
10006106:	d102      	bne.n	1000610e <z_unpend_first_thread+0x2a>
	__asm__ volatile(
10006108:	b662      	cpsie	i
1000610a:	f3bf 8f6f 	isb	sy
}
1000610e:	0020      	movs	r0, r4
10006110:	bd70      	pop	{r4, r5, r6, pc}
10006112:	2400      	movs	r4, #0
10006114:	e7f6      	b.n	10006104 <z_unpend_first_thread+0x20>

10006116 <z_unpend_thread>:
{
10006116:	b570      	push	{r4, r5, r6, lr}
10006118:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000611a:	f3ef 8510 	mrs	r5, PRIMASK
1000611e:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
10006120:	6883      	ldr	r3, [r0, #8]
10006122:	2b00      	cmp	r3, #0
10006124:	d001      	beq.n	1000612a <z_unpend_thread+0x14>
			unpend_thread_no_timeout(thread);
10006126:	f7ff ff54 	bl	10005fd2 <unpend_thread_no_timeout>
	if (key != 0U) {
1000612a:	2d00      	cmp	r5, #0
1000612c:	d102      	bne.n	10006134 <z_unpend_thread+0x1e>
	__asm__ volatile(
1000612e:	b662      	cpsie	i
10006130:	f3bf 8f6f 	isb	sy
10006134:	0020      	movs	r0, r4
10006136:	3018      	adds	r0, #24
10006138:	f000 f834 	bl	100061a4 <z_abort_timeout>
}
1000613c:	bd70      	pop	{r4, r5, r6, pc}

1000613e <z_reschedule_irqlock>:
{
1000613e:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10006140:	2800      	cmp	r0, #0
10006142:	d105      	bne.n	10006150 <z_reschedule_irqlock+0x12>
10006144:	f3ef 8005 	mrs	r0, IPSR
10006148:	2800      	cmp	r0, #0
1000614a:	d102      	bne.n	10006152 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
1000614c:	f7fd f88c 	bl	10003268 <arch_swap>
}
10006150:	bd10      	pop	{r4, pc}
10006152:	b662      	cpsie	i
10006154:	f3bf 8f6f 	isb	sy
10006158:	e7fa      	b.n	10006150 <z_reschedule_irqlock+0x12>

1000615a <z_reschedule_unlocked>:
{
1000615a:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000615c:	f3ef 8010 	mrs	r0, PRIMASK
10006160:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10006162:	f7ff ffec 	bl	1000613e <z_reschedule_irqlock>
}
10006166:	bd10      	pop	{r4, pc}

10006168 <z_sched_wake>:
{
10006168:	0003      	movs	r3, r0
1000616a:	b570      	push	{r4, r5, r6, lr}
1000616c:	f3ef 8510 	mrs	r5, PRIMASK
10006170:	b672      	cpsid	i
	return list->head == list;
10006172:	6804      	ldr	r4, [r0, #0]
	bool ret = false;
10006174:	2000      	movs	r0, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006176:	42a3      	cmp	r3, r4
10006178:	d00e      	beq.n	10006198 <z_sched_wake+0x30>
		if (thread != NULL) {
1000617a:	4284      	cmp	r4, r0
1000617c:	d00c      	beq.n	10006198 <z_sched_wake+0x30>
1000617e:	6721      	str	r1, [r4, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
10006180:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
10006182:	0020      	movs	r0, r4
10006184:	f7ff ff25 	bl	10005fd2 <unpend_thread_no_timeout>
10006188:	0020      	movs	r0, r4
1000618a:	3018      	adds	r0, #24
1000618c:	f000 f80a 	bl	100061a4 <z_abort_timeout>
			ready_thread(thread);
10006190:	0020      	movs	r0, r4
10006192:	f7fe fc21 	bl	100049d8 <ready_thread>
			ret = true;
10006196:	2001      	movs	r0, #1
	if (key != 0U) {
10006198:	2d00      	cmp	r5, #0
1000619a:	d102      	bne.n	100061a2 <z_sched_wake+0x3a>
	__asm__ volatile(
1000619c:	b662      	cpsie	i
1000619e:	f3bf 8f6f 	isb	sy
}
100061a2:	bd70      	pop	{r4, r5, r6, pc}

100061a4 <z_abort_timeout>:
{
100061a4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100061a6:	f3ef 8410 	mrs	r4, PRIMASK
100061aa:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
100061ac:	6803      	ldr	r3, [r0, #0]
100061ae:	2b00      	cmp	r3, #0
100061b0:	d008      	beq.n	100061c4 <z_abort_timeout+0x20>
			remove_timeout(to);
100061b2:	f7fe febd 	bl	10004f30 <remove_timeout>
			ret = 0;
100061b6:	2000      	movs	r0, #0
	if (key != 0U) {
100061b8:	2c00      	cmp	r4, #0
100061ba:	d102      	bne.n	100061c2 <z_abort_timeout+0x1e>
	__asm__ volatile(
100061bc:	b662      	cpsie	i
100061be:	f3bf 8f6f 	isb	sy
}
100061c2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
100061c4:	2016      	movs	r0, #22
100061c6:	4240      	negs	r0, r0
100061c8:	e7f6      	b.n	100061b8 <z_abort_timeout+0x14>

100061ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
100061ca:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
100061cc:	f7fe ffa8 	bl	10005120 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
100061d0:	bd10      	pop	{r4, pc}

100061d2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
100061d2:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
100061d4:	f7fe ffa4 	bl	10005120 <sys_clock_tick_get>
}
100061d8:	bd10      	pop	{r4, pc}

100061da <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
100061da:	b510      	push	{r4, lr}
100061dc:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
100061de:	f7ff ffe1 	bl	100061a4 <z_abort_timeout>

	if (inactive) {
100061e2:	2800      	cmp	r0, #0
100061e4:	d111      	bne.n	1000620a <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
100061e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
100061e8:	2b00      	cmp	r3, #0
100061ea:	d001      	beq.n	100061f0 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
100061ec:	0020      	movs	r0, r4
100061ee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
100061f0:	0020      	movs	r0, r4
100061f2:	3018      	adds	r0, #24
100061f4:	f7ff ff61 	bl	100060ba <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
100061f8:	2800      	cmp	r0, #0
100061fa:	d006      	beq.n	1000620a <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
100061fc:	f7ff ff1d 	bl	1000603a <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
10006200:	f3ef 8010 	mrs	r0, PRIMASK
10006204:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10006206:	f7ff ff9a 	bl	1000613e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
1000620a:	bd10      	pop	{r4, pc}

1000620c <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
1000620c:	0003      	movs	r3, r0
1000620e:	f3ef 8210 	mrs	r2, PRIMASK
10006212:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10006214:	6800      	ldr	r0, [r0, #0]
	*target += value;
10006216:	1841      	adds	r1, r0, r1
10006218:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000621a:	2a00      	cmp	r2, #0
1000621c:	d102      	bne.n	10006224 <z_impl_atomic_add+0x18>
	__asm__ volatile(
1000621e:	b662      	cpsie	i
10006220:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10006224:	4770      	bx	lr

10006226 <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
10006226:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10006228:	f3ef 8210 	mrs	r2, PRIMASK
1000622c:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
1000622e:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10006230:	1a41      	subs	r1, r0, r1
10006232:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10006234:	2a00      	cmp	r2, #0
10006236:	d102      	bne.n	1000623e <z_impl_atomic_sub+0x18>
	__asm__ volatile(
10006238:	b662      	cpsie	i
1000623a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
1000623e:	4770      	bx	lr

10006240 <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
10006240:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10006242:	f3ef 8210 	mrs	r2, PRIMASK
10006246:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10006248:	6800      	ldr	r0, [r0, #0]
	*target = value;
1000624a:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000624c:	2a00      	cmp	r2, #0
1000624e:	d102      	bne.n	10006256 <z_impl_atomic_set+0x16>
	__asm__ volatile(
10006250:	b662      	cpsie	i
10006252:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10006256:	4770      	bx	lr

10006258 <z_handle_obj_poll_events>:
{
10006258:	b510      	push	{r4, lr}
1000625a:	0003      	movs	r3, r0
	return list->head == list;
1000625c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
1000625e:	4283      	cmp	r3, r0
10006260:	d008      	beq.n	10006274 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const next = node->next;
10006262:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10006264:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10006266:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10006268:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000626a:	2300      	movs	r3, #0
1000626c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000626e:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
10006270:	f7ff f80e 	bl	10005290 <signal_poll_event>
}
10006274:	bd10      	pop	{r4, pc}

10006276 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
10006276:	2201      	movs	r2, #1
{
10006278:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
1000627a:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
1000627c:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
1000627e:	408c      	lsls	r4, r1
10006280:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
10006282:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
10006284:	43a5      	bics	r5, r4
10006286:	6005      	str	r5, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
10006288:	0018      	movs	r0, r3
	return ret;
1000628a:	4010      	ands	r0, r2
}
1000628c:	bd30      	pop	{r4, r5, pc}

1000628e <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
1000628e:	b510      	push	{r4, lr}
	if (queue != NULL) {
10006290:	2800      	cmp	r0, #0
10006292:	d004      	beq.n	1000629e <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
10006294:	2200      	movs	r2, #0
10006296:	3080      	adds	r0, #128	; 0x80
10006298:	0011      	movs	r1, r2
1000629a:	f7ff ff65 	bl	10006168 <z_sched_wake>
}
1000629e:	bd10      	pop	{r4, pc}

100062a0 <z_work_submit_to_queue>:
{
100062a0:	b513      	push	{r0, r1, r4, lr}
100062a2:	9001      	str	r0, [sp, #4]
100062a4:	0008      	movs	r0, r1
	__asm__ volatile("mrs %0, PRIMASK;"
100062a6:	f3ef 8410 	mrs	r4, PRIMASK
100062aa:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
100062ac:	a901      	add	r1, sp, #4
100062ae:	f7ff f92b 	bl	10005508 <submit_to_queue_locked>
	if (key != 0U) {
100062b2:	2c00      	cmp	r4, #0
100062b4:	d102      	bne.n	100062bc <z_work_submit_to_queue+0x1c>
	__asm__ volatile(
100062b6:	b662      	cpsie	i
100062b8:	f3bf 8f6f 	isb	sy
}
100062bc:	bd16      	pop	{r1, r2, r4, pc}
	...
