
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000eb0 10000eb9 100023c1 10000e75     ... .....#..u...
	...
1000012c:	10000d41 00000000 00000000 10000ce1     A...............
1000013c:	10001185                                ....

10000140 <_irq_vector_table>:
10000140:	10000db1 10000db1 10000db1 10000db1     ................
10000150:	10000db1 10000db1 10000db1 10000db1     ................
10000160:	10000db1 10000db1 10000db1 10000db1     ................
10000170:	10000db1 10000db1 10000db1 10000db1     ................
10000180:	10000db1 10000db1 10000db1 10000db1     ................
10000190:	10000db1 10000db1 10000db1 10000db1     ................
100001a0:	10000db1 10000db1                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__aeabi_uldivmod>:
1000029c:	2b00      	cmp	r3, #0
1000029e:	d111      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a0:	2a00      	cmp	r2, #0
100002a2:	d10f      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a4:	2900      	cmp	r1, #0
100002a6:	d100      	bne.n	100002aa <__aeabi_uldivmod+0xe>
100002a8:	2800      	cmp	r0, #0
100002aa:	d002      	beq.n	100002b2 <__aeabi_uldivmod+0x16>
100002ac:	2100      	movs	r1, #0
100002ae:	43c9      	mvns	r1, r1
100002b0:	0008      	movs	r0, r1
100002b2:	b407      	push	{r0, r1, r2}
100002b4:	4802      	ldr	r0, [pc, #8]	; (100002c0 <__aeabi_uldivmod+0x24>)
100002b6:	a102      	add	r1, pc, #8	; (adr r1, 100002c0 <__aeabi_uldivmod+0x24>)
100002b8:	1840      	adds	r0, r0, r1
100002ba:	9002      	str	r0, [sp, #8]
100002bc:	bd03      	pop	{r0, r1, pc}
100002be:	46c0      	nop			; (mov r8, r8)
100002c0:	ffffff9d 	.word	0xffffff9d
100002c4:	b403      	push	{r0, r1}
100002c6:	4668      	mov	r0, sp
100002c8:	b501      	push	{r0, lr}
100002ca:	9802      	ldr	r0, [sp, #8]
100002cc:	f000 f84c 	bl	10000368 <__udivmoddi4>
100002d0:	9b01      	ldr	r3, [sp, #4]
100002d2:	469e      	mov	lr, r3
100002d4:	b002      	add	sp, #8
100002d6:	bc0c      	pop	{r2, r3}
100002d8:	4770      	bx	lr
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_llsr>:
100002dc:	40d0      	lsrs	r0, r2
100002de:	000b      	movs	r3, r1
100002e0:	40d1      	lsrs	r1, r2
100002e2:	469c      	mov	ip, r3
100002e4:	3a20      	subs	r2, #32
100002e6:	40d3      	lsrs	r3, r2
100002e8:	4318      	orrs	r0, r3
100002ea:	4252      	negs	r2, r2
100002ec:	4663      	mov	r3, ip
100002ee:	4093      	lsls	r3, r2
100002f0:	4318      	orrs	r0, r3
100002f2:	4770      	bx	lr

100002f4 <__aeabi_llsl>:
100002f4:	4091      	lsls	r1, r2
100002f6:	0003      	movs	r3, r0
100002f8:	4090      	lsls	r0, r2
100002fa:	469c      	mov	ip, r3
100002fc:	3a20      	subs	r2, #32
100002fe:	4093      	lsls	r3, r2
10000300:	4319      	orrs	r1, r3
10000302:	4252      	negs	r2, r2
10000304:	4663      	mov	r3, ip
10000306:	40d3      	lsrs	r3, r2
10000308:	4319      	orrs	r1, r3
1000030a:	4770      	bx	lr

1000030c <__clzdi2>:
1000030c:	b510      	push	{r4, lr}
1000030e:	2900      	cmp	r1, #0
10000310:	d103      	bne.n	1000031a <__clzdi2+0xe>
10000312:	f7ff ffa5 	bl	10000260 <__clzsi2>
10000316:	3020      	adds	r0, #32
10000318:	e002      	b.n	10000320 <__clzdi2+0x14>
1000031a:	0008      	movs	r0, r1
1000031c:	f7ff ffa0 	bl	10000260 <__clzsi2>
10000320:	bd10      	pop	{r4, pc}
10000322:	46c0      	nop			; (mov r8, r8)

10000324 <__aeabi_lmul>:
10000324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000326:	0c04      	lsrs	r4, r0, #16
10000328:	000d      	movs	r5, r1
1000032a:	b291      	uxth	r1, r2
1000032c:	000f      	movs	r7, r1
1000032e:	4361      	muls	r1, r4
10000330:	468c      	mov	ip, r1
10000332:	0006      	movs	r6, r0
10000334:	9301      	str	r3, [sp, #4]
10000336:	b283      	uxth	r3, r0
10000338:	0c10      	lsrs	r0, r2, #16
1000033a:	435f      	muls	r7, r3
1000033c:	4344      	muls	r4, r0
1000033e:	4358      	muls	r0, r3
10000340:	0c3b      	lsrs	r3, r7, #16
10000342:	4460      	add	r0, ip
10000344:	181b      	adds	r3, r3, r0
10000346:	4299      	cmp	r1, r3
10000348:	d902      	bls.n	10000350 <__aeabi_lmul+0x2c>
1000034a:	2180      	movs	r1, #128	; 0x80
1000034c:	0249      	lsls	r1, r1, #9
1000034e:	1864      	adds	r4, r4, r1
10000350:	9901      	ldr	r1, [sp, #4]
10000352:	4355      	muls	r5, r2
10000354:	4371      	muls	r1, r6
10000356:	0c18      	lsrs	r0, r3, #16
10000358:	1904      	adds	r4, r0, r4
1000035a:	041b      	lsls	r3, r3, #16
1000035c:	b2bf      	uxth	r7, r7
1000035e:	1949      	adds	r1, r1, r5
10000360:	19d8      	adds	r0, r3, r7
10000362:	1909      	adds	r1, r1, r4
10000364:	b003      	add	sp, #12
10000366:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000368 <__udivmoddi4>:
10000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000036a:	0006      	movs	r6, r0
1000036c:	000f      	movs	r7, r1
1000036e:	0015      	movs	r5, r2
10000370:	001c      	movs	r4, r3
10000372:	b085      	sub	sp, #20
10000374:	428b      	cmp	r3, r1
10000376:	d863      	bhi.n	10000440 <__udivmoddi4+0xd8>
10000378:	d101      	bne.n	1000037e <__udivmoddi4+0x16>
1000037a:	4282      	cmp	r2, r0
1000037c:	d860      	bhi.n	10000440 <__udivmoddi4+0xd8>
1000037e:	0021      	movs	r1, r4
10000380:	0028      	movs	r0, r5
10000382:	f7ff ffc3 	bl	1000030c <__clzdi2>
10000386:	0039      	movs	r1, r7
10000388:	9000      	str	r0, [sp, #0]
1000038a:	0030      	movs	r0, r6
1000038c:	f7ff ffbe 	bl	1000030c <__clzdi2>
10000390:	9b00      	ldr	r3, [sp, #0]
10000392:	0021      	movs	r1, r4
10000394:	1a1b      	subs	r3, r3, r0
10000396:	001a      	movs	r2, r3
10000398:	0028      	movs	r0, r5
1000039a:	9303      	str	r3, [sp, #12]
1000039c:	f7ff ffaa 	bl	100002f4 <__aeabi_llsl>
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	9101      	str	r1, [sp, #4]
100003a4:	42b9      	cmp	r1, r7
100003a6:	d845      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003a8:	d101      	bne.n	100003ae <__udivmoddi4+0x46>
100003aa:	42b0      	cmp	r0, r6
100003ac:	d842      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003ae:	9b00      	ldr	r3, [sp, #0]
100003b0:	9c01      	ldr	r4, [sp, #4]
100003b2:	2001      	movs	r0, #1
100003b4:	2100      	movs	r1, #0
100003b6:	9a03      	ldr	r2, [sp, #12]
100003b8:	1af6      	subs	r6, r6, r3
100003ba:	41a7      	sbcs	r7, r4
100003bc:	f7ff ff9a 	bl	100002f4 <__aeabi_llsl>
100003c0:	0004      	movs	r4, r0
100003c2:	000d      	movs	r5, r1
100003c4:	9b03      	ldr	r3, [sp, #12]
100003c6:	2b00      	cmp	r3, #0
100003c8:	d02b      	beq.n	10000422 <__udivmoddi4+0xba>
100003ca:	9b01      	ldr	r3, [sp, #4]
100003cc:	9a00      	ldr	r2, [sp, #0]
100003ce:	07db      	lsls	r3, r3, #31
100003d0:	0850      	lsrs	r0, r2, #1
100003d2:	4318      	orrs	r0, r3
100003d4:	9b01      	ldr	r3, [sp, #4]
100003d6:	0859      	lsrs	r1, r3, #1
100003d8:	9b03      	ldr	r3, [sp, #12]
100003da:	469c      	mov	ip, r3
100003dc:	42b9      	cmp	r1, r7
100003de:	d82c      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e0:	d101      	bne.n	100003e6 <__udivmoddi4+0x7e>
100003e2:	42b0      	cmp	r0, r6
100003e4:	d829      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e6:	0032      	movs	r2, r6
100003e8:	003b      	movs	r3, r7
100003ea:	1a12      	subs	r2, r2, r0
100003ec:	418b      	sbcs	r3, r1
100003ee:	2601      	movs	r6, #1
100003f0:	1892      	adds	r2, r2, r2
100003f2:	415b      	adcs	r3, r3
100003f4:	2700      	movs	r7, #0
100003f6:	18b6      	adds	r6, r6, r2
100003f8:	415f      	adcs	r7, r3
100003fa:	2301      	movs	r3, #1
100003fc:	425b      	negs	r3, r3
100003fe:	449c      	add	ip, r3
10000400:	4663      	mov	r3, ip
10000402:	2b00      	cmp	r3, #0
10000404:	d1ea      	bne.n	100003dc <__udivmoddi4+0x74>
10000406:	0030      	movs	r0, r6
10000408:	0039      	movs	r1, r7
1000040a:	9a03      	ldr	r2, [sp, #12]
1000040c:	f7ff ff66 	bl	100002dc <__aeabi_llsr>
10000410:	9a03      	ldr	r2, [sp, #12]
10000412:	19a4      	adds	r4, r4, r6
10000414:	417d      	adcs	r5, r7
10000416:	0006      	movs	r6, r0
10000418:	000f      	movs	r7, r1
1000041a:	f7ff ff6b 	bl	100002f4 <__aeabi_llsl>
1000041e:	1a24      	subs	r4, r4, r0
10000420:	418d      	sbcs	r5, r1
10000422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000424:	2b00      	cmp	r3, #0
10000426:	d001      	beq.n	1000042c <__udivmoddi4+0xc4>
10000428:	601e      	str	r6, [r3, #0]
1000042a:	605f      	str	r7, [r3, #4]
1000042c:	0020      	movs	r0, r4
1000042e:	0029      	movs	r1, r5
10000430:	b005      	add	sp, #20
10000432:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000434:	2400      	movs	r4, #0
10000436:	2500      	movs	r5, #0
10000438:	e7c4      	b.n	100003c4 <__udivmoddi4+0x5c>
1000043a:	19b6      	adds	r6, r6, r6
1000043c:	417f      	adcs	r7, r7
1000043e:	e7dc      	b.n	100003fa <__udivmoddi4+0x92>
10000440:	2400      	movs	r4, #0
10000442:	2500      	movs	r5, #0
10000444:	e7ed      	b.n	10000422 <__udivmoddi4+0xba>
	...

10000448 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
10000448:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000044a:	4c11      	ldr	r4, [pc, #68]	; (10000490 <main+0x48>)
1000044c:	0020      	movs	r0, r4
1000044e:	f002 faa1 	bl	10002994 <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&led)) {
10000452:	2800      	cmp	r0, #0
10000454:	d01b      	beq.n	1000048e <main+0x46>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
10000456:	6921      	ldr	r1, [r4, #16]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000458:	480e      	ldr	r0, [pc, #56]	; (10000494 <main+0x4c>)
1000045a:	680a      	ldr	r2, [r1, #0]
	const struct gpio_driver_api *api =
1000045c:	68a3      	ldr	r3, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000045e:	4002      	ands	r2, r0
10000460:	600a      	str	r2, [r1, #0]
	}

	return api->pin_configure(port, pin, flags);
10000462:	22a0      	movs	r2, #160	; 0xa0
10000464:	2119      	movs	r1, #25
10000466:	0020      	movs	r0, r4
10000468:	681b      	ldr	r3, [r3, #0]
1000046a:	0312      	lsls	r2, r2, #12
1000046c:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
1000046e:	2800      	cmp	r0, #0
10000470:	db0d      	blt.n	1000048e <main+0x46>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
10000472:	2580      	movs	r5, #128	; 0x80
10000474:	04ad      	lsls	r5, r5, #18
10000476:	68a3      	ldr	r3, [r4, #8]
10000478:	0029      	movs	r1, r5
1000047a:	0020      	movs	r0, r4
1000047c:	695b      	ldr	r3, [r3, #20]
1000047e:	4798      	blx	r3
		return;
	}

	while (1) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
10000480:	2800      	cmp	r0, #0
10000482:	db04      	blt.n	1000048e <main+0x46>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10000484:	2100      	movs	r1, #0
10000486:	4804      	ldr	r0, [pc, #16]	; (10000498 <main+0x50>)
10000488:	f001 fd36 	bl	10001ef8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
1000048c:	e7f3      	b.n	10000476 <main+0x2e>
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
1000048e:	bd70      	pop	{r4, r5, r6, pc}
10000490:	10002b50 	.word	0x10002b50
10000494:	fdffffff 	.word	0xfdffffff
10000498:	00002710 	.word	0x00002710

1000049c <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
1000049c:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
1000049e:	4b02      	ldr	r3, [pc, #8]	; (100004a8 <char_out+0xc>)
100004a0:	681b      	ldr	r3, [r3, #0]
100004a2:	4798      	blx	r3
}
100004a4:	bd10      	pop	{r4, pc}
100004a6:	46c0      	nop			; (mov r8, r8)
100004a8:	20000000 	.word	0x20000000

100004ac <__printk_hook_install>:
	_char_out = fn;
100004ac:	4b01      	ldr	r3, [pc, #4]	; (100004b4 <__printk_hook_install+0x8>)
100004ae:	6018      	str	r0, [r3, #0]
}
100004b0:	4770      	bx	lr
100004b2:	46c0      	nop			; (mov r8, r8)
100004b4:	20000000 	.word	0x20000000

100004b8 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100004b8:	b513      	push	{r0, r1, r4, lr}
100004ba:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100004bc:	2100      	movs	r1, #0
100004be:	4c03      	ldr	r4, [pc, #12]	; (100004cc <vprintk+0x14>)
100004c0:	0002      	movs	r2, r0
100004c2:	9100      	str	r1, [sp, #0]
100004c4:	0020      	movs	r0, r4
100004c6:	f000 f803 	bl	100004d0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
100004ca:	bd13      	pop	{r0, r1, r4, pc}
100004cc:	1000049d 	.word	0x1000049d

100004d0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
100004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100004d2:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
100004d4:	2700      	movs	r7, #0
{
100004d6:	b099      	sub	sp, #100	; 0x64
100004d8:	9004      	str	r0, [sp, #16]
100004da:	9105      	str	r1, [sp, #20]
100004dc:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
100004de:	9b08      	ldr	r3, [sp, #32]
100004e0:	7818      	ldrb	r0, [r3, #0]
100004e2:	2800      	cmp	r0, #0
100004e4:	d101      	bne.n	100004ea <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
100004e6:	0038      	movs	r0, r7
100004e8:	e327      	b.n	10000b3a <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
100004ea:	9b08      	ldr	r3, [sp, #32]
100004ec:	3301      	adds	r3, #1
100004ee:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
100004f0:	2825      	cmp	r0, #37	; 0x25
100004f2:	d007      	beq.n	10000504 <z_cbvprintf_impl+0x34>
			OUTC('%');
100004f4:	9905      	ldr	r1, [sp, #20]
100004f6:	9b04      	ldr	r3, [sp, #16]
100004f8:	4798      	blx	r3
100004fa:	2800      	cmp	r0, #0
100004fc:	da00      	bge.n	10000500 <z_cbvprintf_impl+0x30>
100004fe:	e31c      	b.n	10000b3a <z_cbvprintf_impl+0x66a>
10000500:	3701      	adds	r7, #1
		if (bps == NULL) {
10000502:	e1e3      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		} state = {
10000504:	ad12      	add	r5, sp, #72	; 0x48
10000506:	2218      	movs	r2, #24
10000508:	2100      	movs	r1, #0
1000050a:	0028      	movs	r0, r5
1000050c:	f001 ff7a 	bl	10002404 <memset>
	if (*sp == '%') {
10000510:	9b08      	ldr	r3, [sp, #32]
10000512:	785b      	ldrb	r3, [r3, #1]
10000514:	2b25      	cmp	r3, #37	; 0x25
10000516:	d114      	bne.n	10000542 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000518:	9a08      	ldr	r2, [sp, #32]
1000051a:	72eb      	strb	r3, [r5, #11]
1000051c:	3202      	adds	r2, #2
1000051e:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000520:	ab12      	add	r3, sp, #72	; 0x48
10000522:	7a5a      	ldrb	r2, [r3, #9]
10000524:	07d1      	lsls	r1, r2, #31
10000526:	d400      	bmi.n	1000052a <z_cbvprintf_impl+0x5a>
10000528:	e17f      	b.n	1000082a <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
1000052a:	cc02      	ldmia	r4!, {r1}
1000052c:	9103      	str	r1, [sp, #12]
			if (width < 0) {
1000052e:	2900      	cmp	r1, #0
10000530:	db00      	blt.n	10000534 <z_cbvprintf_impl+0x64>
10000532:	e17f      	b.n	10000834 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000534:	2104      	movs	r1, #4
10000536:	7a18      	ldrb	r0, [r3, #8]
10000538:	4301      	orrs	r1, r0
1000053a:	7219      	strb	r1, [r3, #8]
				width = -width;
1000053c:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000053e:	425b      	negs	r3, r3
10000540:	e177      	b.n	10000832 <z_cbvprintf_impl+0x362>
10000542:	2200      	movs	r2, #0
		switch (*sp) {
10000544:	2601      	movs	r6, #1
10000546:	0015      	movs	r5, r2
10000548:	0010      	movs	r0, r2
1000054a:	4694      	mov	ip, r2
1000054c:	9203      	str	r2, [sp, #12]
1000054e:	9b07      	ldr	r3, [sp, #28]
10000550:	781b      	ldrb	r3, [r3, #0]
10000552:	2b2b      	cmp	r3, #43	; 0x2b
10000554:	d06f      	beq.n	10000636 <z_cbvprintf_impl+0x166>
10000556:	d868      	bhi.n	1000062a <z_cbvprintf_impl+0x15a>
10000558:	2b20      	cmp	r3, #32
1000055a:	d071      	beq.n	10000640 <z_cbvprintf_impl+0x170>
1000055c:	2b23      	cmp	r3, #35	; 0x23
1000055e:	d071      	beq.n	10000644 <z_cbvprintf_impl+0x174>
10000560:	2a00      	cmp	r2, #0
10000562:	d005      	beq.n	10000570 <z_cbvprintf_impl+0xa0>
10000564:	ae12      	add	r6, sp, #72	; 0x48
10000566:	7a32      	ldrb	r2, [r6, #8]
10000568:	0011      	movs	r1, r2
1000056a:	2240      	movs	r2, #64	; 0x40
1000056c:	430a      	orrs	r2, r1
1000056e:	7232      	strb	r2, [r6, #8]
10000570:	2d00      	cmp	r5, #0
10000572:	d004      	beq.n	1000057e <z_cbvprintf_impl+0xae>
10000574:	2220      	movs	r2, #32
10000576:	ad12      	add	r5, sp, #72	; 0x48
10000578:	7a2e      	ldrb	r6, [r5, #8]
1000057a:	4332      	orrs	r2, r6
1000057c:	722a      	strb	r2, [r5, #8]
1000057e:	2800      	cmp	r0, #0
10000580:	d004      	beq.n	1000058c <z_cbvprintf_impl+0xbc>
10000582:	2210      	movs	r2, #16
10000584:	a812      	add	r0, sp, #72	; 0x48
10000586:	7a05      	ldrb	r5, [r0, #8]
10000588:	432a      	orrs	r2, r5
1000058a:	7202      	strb	r2, [r0, #8]
1000058c:	9a03      	ldr	r2, [sp, #12]
1000058e:	2a00      	cmp	r2, #0
10000590:	d004      	beq.n	1000059c <z_cbvprintf_impl+0xcc>
10000592:	2208      	movs	r2, #8
10000594:	a912      	add	r1, sp, #72	; 0x48
10000596:	7a08      	ldrb	r0, [r1, #8]
10000598:	4302      	orrs	r2, r0
1000059a:	720a      	strb	r2, [r1, #8]
1000059c:	4662      	mov	r2, ip
1000059e:	2a00      	cmp	r2, #0
100005a0:	d004      	beq.n	100005ac <z_cbvprintf_impl+0xdc>
100005a2:	2204      	movs	r2, #4
100005a4:	a912      	add	r1, sp, #72	; 0x48
100005a6:	7a08      	ldrb	r0, [r1, #8]
100005a8:	4302      	orrs	r2, r0
100005aa:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100005ac:	2144      	movs	r1, #68	; 0x44
100005ae:	a812      	add	r0, sp, #72	; 0x48
100005b0:	7a02      	ldrb	r2, [r0, #8]
100005b2:	4011      	ands	r1, r2
100005b4:	2944      	cmp	r1, #68	; 0x44
100005b6:	d102      	bne.n	100005be <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100005b8:	2140      	movs	r1, #64	; 0x40
100005ba:	438a      	bics	r2, r1
100005bc:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100005be:	2280      	movs	r2, #128	; 0x80
100005c0:	7a01      	ldrb	r1, [r0, #8]
100005c2:	4252      	negs	r2, r2
100005c4:	430a      	orrs	r2, r1
100005c6:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
100005c8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
100005ca:	250a      	movs	r5, #10
100005cc:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
100005ce:	2b2a      	cmp	r3, #42	; 0x2a
100005d0:	d140      	bne.n	10000654 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
100005d2:	7a41      	ldrb	r1, [r0, #9]
100005d4:	3b29      	subs	r3, #41	; 0x29
100005d6:	430b      	orrs	r3, r1
		return ++sp;
100005d8:	3201      	adds	r2, #1
		conv->width_star = true;
100005da:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
100005dc:	7815      	ldrb	r5, [r2, #0]
100005de:	2602      	movs	r6, #2
100005e0:	0029      	movs	r1, r5
100005e2:	392e      	subs	r1, #46	; 0x2e
100005e4:	424b      	negs	r3, r1
100005e6:	4159      	adcs	r1, r3
100005e8:	a812      	add	r0, sp, #72	; 0x48
100005ea:	7a43      	ldrb	r3, [r0, #9]
100005ec:	0049      	lsls	r1, r1, #1
100005ee:	43b3      	bics	r3, r6
100005f0:	430b      	orrs	r3, r1
100005f2:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
100005f4:	2d2e      	cmp	r5, #46	; 0x2e
100005f6:	d145      	bne.n	10000684 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
100005f8:	7853      	ldrb	r3, [r2, #1]
100005fa:	2b2a      	cmp	r3, #42	; 0x2a
100005fc:	d03d      	beq.n	1000067a <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
100005fe:	2300      	movs	r3, #0
	++sp;
10000600:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000602:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000604:	7811      	ldrb	r1, [r2, #0]
10000606:	1c55      	adds	r5, r2, #1
10000608:	0008      	movs	r0, r1
1000060a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000060c:	2809      	cmp	r0, #9
1000060e:	d963      	bls.n	100006d8 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10000610:	a912      	add	r1, sp, #72	; 0x48
10000612:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000614:	7a0d      	ldrb	r5, [r1, #8]
10000616:	07a8      	lsls	r0, r5, #30
10000618:	4318      	orrs	r0, r3
1000061a:	2302      	movs	r3, #2
1000061c:	439d      	bics	r5, r3
1000061e:	002b      	movs	r3, r5
10000620:	0fc0      	lsrs	r0, r0, #31
10000622:	0040      	lsls	r0, r0, #1
10000624:	4303      	orrs	r3, r0
10000626:	720b      	strb	r3, [r1, #8]
	return sp;
10000628:	e02c      	b.n	10000684 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
1000062a:	2b2d      	cmp	r3, #45	; 0x2d
1000062c:	d00c      	beq.n	10000648 <z_cbvprintf_impl+0x178>
1000062e:	2b30      	cmp	r3, #48	; 0x30
10000630:	d196      	bne.n	10000560 <z_cbvprintf_impl+0x90>
10000632:	0032      	movs	r2, r6
10000634:	e000      	b.n	10000638 <z_cbvprintf_impl+0x168>
10000636:	9603      	str	r6, [sp, #12]
			++sp;
10000638:	9b07      	ldr	r3, [sp, #28]
1000063a:	3301      	adds	r3, #1
1000063c:	9307      	str	r3, [sp, #28]
	} while (loop);
1000063e:	e786      	b.n	1000054e <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10000640:	0030      	movs	r0, r6
10000642:	e7f9      	b.n	10000638 <z_cbvprintf_impl+0x168>
10000644:	0035      	movs	r5, r6
10000646:	e7f7      	b.n	10000638 <z_cbvprintf_impl+0x168>
10000648:	46b4      	mov	ip, r6
1000064a:	e7f5      	b.n	10000638 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
1000064c:	0032      	movs	r2, r6
1000064e:	4369      	muls	r1, r5
10000650:	3930      	subs	r1, #48	; 0x30
10000652:	1859      	adds	r1, r3, r1
10000654:	7813      	ldrb	r3, [r2, #0]
10000656:	1c56      	adds	r6, r2, #1
10000658:	0018      	movs	r0, r3
1000065a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000065c:	2809      	cmp	r0, #9
1000065e:	d9f5      	bls.n	1000064c <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10000660:	9b07      	ldr	r3, [sp, #28]
10000662:	4293      	cmp	r3, r2
10000664:	d0ba      	beq.n	100005dc <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10000666:	2502      	movs	r5, #2
		conv->width_value = width;
10000668:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
1000066a:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
1000066c:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
1000066e:	0fc9      	lsrs	r1, r1, #31
10000670:	0049      	lsls	r1, r1, #1
10000672:	43a8      	bics	r0, r5
10000674:	4301      	orrs	r1, r0
10000676:	7219      	strb	r1, [r3, #8]
10000678:	e7b0      	b.n	100005dc <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
1000067a:	2304      	movs	r3, #4
1000067c:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
1000067e:	3202      	adds	r2, #2
		conv->prec_star = true;
10000680:	430b      	orrs	r3, r1
10000682:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10000684:	7811      	ldrb	r1, [r2, #0]
10000686:	ab12      	add	r3, sp, #72	; 0x48
10000688:	296c      	cmp	r1, #108	; 0x6c
1000068a:	d045      	beq.n	10000718 <z_cbvprintf_impl+0x248>
1000068c:	d829      	bhi.n	100006e2 <z_cbvprintf_impl+0x212>
1000068e:	2968      	cmp	r1, #104	; 0x68
10000690:	d030      	beq.n	100006f4 <z_cbvprintf_impl+0x224>
10000692:	296a      	cmp	r1, #106	; 0x6a
10000694:	d04c      	beq.n	10000730 <z_cbvprintf_impl+0x260>
10000696:	294c      	cmp	r1, #76	; 0x4c
10000698:	d054      	beq.n	10000744 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
1000069a:	7811      	ldrb	r1, [r2, #0]
1000069c:	1c53      	adds	r3, r2, #1
1000069e:	aa12      	add	r2, sp, #72	; 0x48
100006a0:	9307      	str	r3, [sp, #28]
100006a2:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100006a4:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
100006a6:	2978      	cmp	r1, #120	; 0x78
100006a8:	d900      	bls.n	100006ac <z_cbvprintf_impl+0x1dc>
100006aa:	e0b9      	b.n	10000820 <z_cbvprintf_impl+0x350>
100006ac:	296d      	cmp	r1, #109	; 0x6d
100006ae:	d850      	bhi.n	10000752 <z_cbvprintf_impl+0x282>
100006b0:	2969      	cmp	r1, #105	; 0x69
100006b2:	d900      	bls.n	100006b6 <z_cbvprintf_impl+0x1e6>
100006b4:	e0b4      	b.n	10000820 <z_cbvprintf_impl+0x350>
100006b6:	2957      	cmp	r1, #87	; 0x57
100006b8:	d866      	bhi.n	10000788 <z_cbvprintf_impl+0x2b8>
100006ba:	2941      	cmp	r1, #65	; 0x41
100006bc:	d003      	beq.n	100006c6 <z_cbvprintf_impl+0x1f6>
100006be:	3945      	subs	r1, #69	; 0x45
100006c0:	2902      	cmp	r1, #2
100006c2:	d900      	bls.n	100006c6 <z_cbvprintf_impl+0x1f6>
100006c4:	e0ac      	b.n	10000820 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
100006c6:	2307      	movs	r3, #7
100006c8:	a912      	add	r1, sp, #72	; 0x48
100006ca:	7a8a      	ldrb	r2, [r1, #10]
100006cc:	439a      	bics	r2, r3
100006ce:	3b03      	subs	r3, #3
100006d0:	4313      	orrs	r3, r2
100006d2:	728b      	strb	r3, [r1, #10]
			unsupported = true;
100006d4:	2301      	movs	r3, #1
			break;
100006d6:	e073      	b.n	100007c0 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
100006d8:	4373      	muls	r3, r6
100006da:	3b30      	subs	r3, #48	; 0x30
100006dc:	002a      	movs	r2, r5
100006de:	185b      	adds	r3, r3, r1
100006e0:	e790      	b.n	10000604 <z_cbvprintf_impl+0x134>
	switch (*sp) {
100006e2:	2974      	cmp	r1, #116	; 0x74
100006e4:	d029      	beq.n	1000073a <z_cbvprintf_impl+0x26a>
100006e6:	297a      	cmp	r1, #122	; 0x7a
100006e8:	d1d7      	bne.n	1000069a <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
100006ea:	2178      	movs	r1, #120	; 0x78
100006ec:	7a58      	ldrb	r0, [r3, #9]
100006ee:	4388      	bics	r0, r1
100006f0:	3948      	subs	r1, #72	; 0x48
100006f2:	e00d      	b.n	10000710 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
100006f4:	7850      	ldrb	r0, [r2, #1]
100006f6:	2178      	movs	r1, #120	; 0x78
100006f8:	2868      	cmp	r0, #104	; 0x68
100006fa:	d106      	bne.n	1000070a <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
100006fc:	7a58      	ldrb	r0, [r3, #9]
100006fe:	4388      	bics	r0, r1
10000700:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10000702:	4301      	orrs	r1, r0
10000704:	7259      	strb	r1, [r3, #9]
			++sp;
10000706:	3202      	adds	r2, #2
10000708:	e7c7      	b.n	1000069a <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
1000070a:	7a58      	ldrb	r0, [r3, #9]
1000070c:	4388      	bics	r0, r1
1000070e:	2110      	movs	r1, #16
10000710:	4301      	orrs	r1, r0
10000712:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000714:	3201      	adds	r2, #1
10000716:	e7c0      	b.n	1000069a <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000718:	7850      	ldrb	r0, [r2, #1]
1000071a:	2178      	movs	r1, #120	; 0x78
1000071c:	286c      	cmp	r0, #108	; 0x6c
1000071e:	d103      	bne.n	10000728 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10000720:	7a58      	ldrb	r0, [r3, #9]
10000722:	4388      	bics	r0, r1
10000724:	3958      	subs	r1, #88	; 0x58
10000726:	e7ec      	b.n	10000702 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000728:	7a58      	ldrb	r0, [r3, #9]
1000072a:	4388      	bics	r0, r1
1000072c:	2118      	movs	r1, #24
1000072e:	e7ef      	b.n	10000710 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10000730:	2178      	movs	r1, #120	; 0x78
10000732:	7a58      	ldrb	r0, [r3, #9]
10000734:	4388      	bics	r0, r1
10000736:	3950      	subs	r1, #80	; 0x50
10000738:	e7ea      	b.n	10000710 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
1000073a:	2178      	movs	r1, #120	; 0x78
1000073c:	7a58      	ldrb	r0, [r3, #9]
1000073e:	4388      	bics	r0, r1
10000740:	3940      	subs	r1, #64	; 0x40
10000742:	e7e5      	b.n	10000710 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000744:	8918      	ldrh	r0, [r3, #8]
10000746:	49a5      	ldr	r1, [pc, #660]	; (100009dc <z_cbvprintf_impl+0x50c>)
10000748:	4008      	ands	r0, r1
1000074a:	49a5      	ldr	r1, [pc, #660]	; (100009e0 <z_cbvprintf_impl+0x510>)
1000074c:	4301      	orrs	r1, r0
1000074e:	8119      	strh	r1, [r3, #8]
		break;
10000750:	e7e0      	b.n	10000714 <z_cbvprintf_impl+0x244>
10000752:	2001      	movs	r0, #1
10000754:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000756:	396e      	subs	r1, #110	; 0x6e
10000758:	b2c9      	uxtb	r1, r1
1000075a:	408d      	lsls	r5, r1
1000075c:	0029      	movs	r1, r5
1000075e:	4da1      	ldr	r5, [pc, #644]	; (100009e4 <z_cbvprintf_impl+0x514>)
10000760:	4229      	tst	r1, r5
10000762:	d138      	bne.n	100007d6 <z_cbvprintf_impl+0x306>
10000764:	2524      	movs	r5, #36	; 0x24
10000766:	4229      	tst	r1, r5
10000768:	d151      	bne.n	1000080e <z_cbvprintf_impl+0x33e>
1000076a:	4201      	tst	r1, r0
1000076c:	d058      	beq.n	10000820 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
1000076e:	2107      	movs	r1, #7
10000770:	7a90      	ldrb	r0, [r2, #10]
10000772:	4388      	bics	r0, r1
10000774:	3904      	subs	r1, #4
10000776:	4301      	orrs	r1, r0
10000778:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000077a:	2278      	movs	r2, #120	; 0x78
1000077c:	4013      	ands	r3, r2
1000077e:	3b40      	subs	r3, #64	; 0x40
10000780:	425a      	negs	r2, r3
10000782:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000784:	b2db      	uxtb	r3, r3
10000786:	e01b      	b.n	100007c0 <z_cbvprintf_impl+0x2f0>
10000788:	2001      	movs	r0, #1
	switch (conv->specifier) {
1000078a:	000d      	movs	r5, r1
1000078c:	0006      	movs	r6, r0
1000078e:	3d58      	subs	r5, #88	; 0x58
10000790:	b2ed      	uxtb	r5, r5
10000792:	40ae      	lsls	r6, r5
10000794:	0035      	movs	r5, r6
10000796:	26e2      	movs	r6, #226	; 0xe2
10000798:	0236      	lsls	r6, r6, #8
1000079a:	4235      	tst	r5, r6
1000079c:	d193      	bne.n	100006c6 <z_cbvprintf_impl+0x1f6>
1000079e:	4e92      	ldr	r6, [pc, #584]	; (100009e8 <z_cbvprintf_impl+0x518>)
100007a0:	4235      	tst	r5, r6
100007a2:	d122      	bne.n	100007ea <z_cbvprintf_impl+0x31a>
100007a4:	2184      	movs	r1, #132	; 0x84
100007a6:	0289      	lsls	r1, r1, #10
100007a8:	420d      	tst	r5, r1
100007aa:	d039      	beq.n	10000820 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
100007ac:	2507      	movs	r5, #7
100007ae:	7a91      	ldrb	r1, [r2, #10]
100007b0:	43a9      	bics	r1, r5
100007b2:	4301      	orrs	r1, r0
100007b4:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100007b6:	2178      	movs	r1, #120	; 0x78
100007b8:	400b      	ands	r3, r1
100007ba:	2b40      	cmp	r3, #64	; 0x40
100007bc:	d011      	beq.n	100007e2 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100007be:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100007c0:	aa12      	add	r2, sp, #72	; 0x48
100007c2:	7a11      	ldrb	r1, [r2, #8]
100007c4:	0788      	lsls	r0, r1, #30
100007c6:	0fc0      	lsrs	r0, r0, #31
100007c8:	4303      	orrs	r3, r0
100007ca:	2002      	movs	r0, #2
100007cc:	005b      	lsls	r3, r3, #1
100007ce:	4381      	bics	r1, r0
100007d0:	4319      	orrs	r1, r3
100007d2:	7211      	strb	r1, [r2, #8]
	return sp;
100007d4:	e6a4      	b.n	10000520 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
100007d6:	2107      	movs	r1, #7
100007d8:	7a95      	ldrb	r5, [r2, #10]
100007da:	438d      	bics	r5, r1
100007dc:	3905      	subs	r1, #5
100007de:	4329      	orrs	r1, r5
100007e0:	e7e8      	b.n	100007b4 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100007e2:	7a13      	ldrb	r3, [r2, #8]
100007e4:	4303      	orrs	r3, r0
		conv->invalid = true;
100007e6:	7213      	strb	r3, [r2, #8]
		break;
100007e8:	e7e9      	b.n	100007be <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100007ea:	2507      	movs	r5, #7
100007ec:	7a96      	ldrb	r6, [r2, #10]
100007ee:	43ae      	bics	r6, r5
100007f0:	3d05      	subs	r5, #5
100007f2:	4335      	orrs	r5, r6
100007f4:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100007f6:	2578      	movs	r5, #120	; 0x78
100007f8:	402b      	ands	r3, r5
100007fa:	2b40      	cmp	r3, #64	; 0x40
100007fc:	d102      	bne.n	10000804 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
100007fe:	7a15      	ldrb	r5, [r2, #8]
10000800:	4328      	orrs	r0, r5
10000802:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10000804:	2963      	cmp	r1, #99	; 0x63
10000806:	d1da      	bne.n	100007be <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10000808:	1e5a      	subs	r2, r3, #1
1000080a:	4193      	sbcs	r3, r2
1000080c:	e7ba      	b.n	10000784 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
1000080e:	2107      	movs	r1, #7
10000810:	7a90      	ldrb	r0, [r2, #10]
10000812:	4388      	bics	r0, r1
10000814:	3904      	subs	r1, #4
10000816:	4301      	orrs	r1, r0
10000818:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000081a:	2278      	movs	r2, #120	; 0x78
1000081c:	4013      	ands	r3, r2
1000081e:	e7f3      	b.n	10000808 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10000820:	2301      	movs	r3, #1
10000822:	aa12      	add	r2, sp, #72	; 0x48
10000824:	7a11      	ldrb	r1, [r2, #8]
10000826:	430b      	orrs	r3, r1
10000828:	e7dd      	b.n	100007e6 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
1000082a:	7a19      	ldrb	r1, [r3, #8]
1000082c:	297f      	cmp	r1, #127	; 0x7f
1000082e:	d90f      	bls.n	10000850 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10000830:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10000832:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000834:	ab12      	add	r3, sp, #72	; 0x48
10000836:	0751      	lsls	r1, r2, #29
10000838:	d50c      	bpl.n	10000854 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
1000083a:	cc04      	ldmia	r4!, {r2}
1000083c:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
1000083e:	2a00      	cmp	r2, #0
10000840:	da0c      	bge.n	1000085c <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10000842:	2102      	movs	r1, #2
10000844:	7a5a      	ldrb	r2, [r3, #9]
10000846:	438a      	bics	r2, r1
10000848:	725a      	strb	r2, [r3, #9]
		int precision = -1;
1000084a:	2301      	movs	r3, #1
1000084c:	425b      	negs	r3, r3
1000084e:	e004      	b.n	1000085a <z_cbvprintf_impl+0x38a>
		int width = -1;
10000850:	2301      	movs	r3, #1
10000852:	e674      	b.n	1000053e <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10000854:	0792      	lsls	r2, r2, #30
10000856:	d5f8      	bpl.n	1000084a <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10000858:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
1000085a:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
1000085c:	2500      	movs	r5, #0
1000085e:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10000860:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
10000862:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10000864:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000866:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10000868:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
1000086a:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
1000086c:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
1000086e:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10000870:	2b01      	cmp	r3, #1
10000872:	d130      	bne.n	100008d6 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10000874:	1ed0      	subs	r0, r2, #3
10000876:	2804      	cmp	r0, #4
10000878:	d804      	bhi.n	10000884 <z_cbvprintf_impl+0x3b4>
1000087a:	f7ff fc95 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000087e:	450e      	.short	0x450e
10000880:	0e45      	.short	0x0e45
10000882:	0e          	.byte	0x0e
10000883:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10000884:	6823      	ldr	r3, [r4, #0]
10000886:	17d8      	asrs	r0, r3, #31
10000888:	9312      	str	r3, [sp, #72]	; 0x48
1000088a:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
1000088c:	2a01      	cmp	r2, #1
1000088e:	d109      	bne.n	100008a4 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10000890:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
10000892:	9312      	str	r3, [sp, #72]	; 0x48
10000894:	17db      	asrs	r3, r3, #31
10000896:	604b      	str	r3, [r1, #4]
10000898:	e006      	b.n	100008a8 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
1000089a:	cc08      	ldmia	r4!, {r3}
1000089c:	9312      	str	r3, [sp, #72]	; 0x48
1000089e:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100008a0:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100008a2:	e002      	b.n	100008aa <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100008a4:	2a02      	cmp	r2, #2
100008a6:	d014      	beq.n	100008d2 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100008a8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100008aa:	a912      	add	r1, sp, #72	; 0x48
100008ac:	7a0b      	ldrb	r3, [r1, #8]
100008ae:	2003      	movs	r0, #3
100008b0:	001d      	movs	r5, r3
100008b2:	4005      	ands	r5, r0
100008b4:	4203      	tst	r3, r0
100008b6:	d045      	beq.n	10000944 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100008b8:	9b07      	ldr	r3, [sp, #28]
100008ba:	9a08      	ldr	r2, [sp, #32]
100008bc:	9905      	ldr	r1, [sp, #20]
100008be:	9804      	ldr	r0, [sp, #16]
100008c0:	f001 fd57 	bl	10002372 <outs>
100008c4:	2800      	cmp	r0, #0
100008c6:	da00      	bge.n	100008ca <z_cbvprintf_impl+0x3fa>
100008c8:	e137      	b.n	10000b3a <z_cbvprintf_impl+0x66a>
100008ca:	183f      	adds	r7, r7, r0
			continue;
100008cc:	9b07      	ldr	r3, [sp, #28]
100008ce:	9308      	str	r3, [sp, #32]
100008d0:	e605      	b.n	100004de <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
100008d2:	b21b      	sxth	r3, r3
100008d4:	e7dd      	b.n	10000892 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
100008d6:	2b02      	cmp	r3, #2
100008d8:	d125      	bne.n	10000926 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100008da:	1ed0      	subs	r0, r2, #3
100008dc:	2804      	cmp	r0, #4
100008de:	d804      	bhi.n	100008ea <z_cbvprintf_impl+0x41a>
100008e0:	f7ff fc62 	bl	100001a8 <__gnu_thumb1_case_uqi>
100008e4:	1912120d 	.word	0x1912120d
100008e8:	19          	.byte	0x19
100008e9:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100008ea:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
100008ec:	2a01      	cmp	r2, #1
100008ee:	d016      	beq.n	1000091e <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
100008f0:	9312      	str	r3, [sp, #72]	; 0x48
100008f2:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
100008f4:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
100008f6:	2a02      	cmp	r2, #2
100008f8:	d1d7      	bne.n	100008aa <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100008fa:	9312      	str	r3, [sp, #72]	; 0x48
100008fc:	e7d5      	b.n	100008aa <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
100008fe:	cc08      	ldmia	r4!, {r3}
10000900:	9312      	str	r3, [sp, #72]	; 0x48
10000902:	2300      	movs	r3, #0
10000904:	9313      	str	r3, [sp, #76]	; 0x4c
10000906:	e7d0      	b.n	100008aa <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10000908:	2307      	movs	r3, #7
1000090a:	3407      	adds	r4, #7
1000090c:	439c      	bics	r4, r3
				value->uint =
1000090e:	cc03      	ldmia	r4!, {r0, r1}
10000910:	9012      	str	r0, [sp, #72]	; 0x48
10000912:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10000914:	e7c9      	b.n	100008aa <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10000916:	cc08      	ldmia	r4!, {r3}
10000918:	9312      	str	r3, [sp, #72]	; 0x48
1000091a:	2300      	movs	r3, #0
1000091c:	e7c0      	b.n	100008a0 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
1000091e:	b2db      	uxtb	r3, r3
10000920:	9312      	str	r3, [sp, #72]	; 0x48
10000922:	604d      	str	r5, [r1, #4]
10000924:	e7c1      	b.n	100008aa <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10000926:	2b04      	cmp	r3, #4
10000928:	d108      	bne.n	1000093c <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
1000092a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
1000092c:	3303      	adds	r3, #3
1000092e:	439c      	bics	r4, r3
10000930:	6820      	ldr	r0, [r4, #0]
10000932:	6861      	ldr	r1, [r4, #4]
10000934:	3408      	adds	r4, #8
10000936:	9012      	str	r0, [sp, #72]	; 0x48
10000938:	9113      	str	r1, [sp, #76]	; 0x4c
1000093a:	e7b6      	b.n	100008aa <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
1000093c:	2b03      	cmp	r3, #3
1000093e:	d1b4      	bne.n	100008aa <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000940:	cc08      	ldmia	r4!, {r3}
10000942:	e7da      	b.n	100008fa <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10000944:	7ac8      	ldrb	r0, [r1, #11]
10000946:	2878      	cmp	r0, #120	; 0x78
10000948:	d8c0      	bhi.n	100008cc <z_cbvprintf_impl+0x3fc>
1000094a:	2862      	cmp	r0, #98	; 0x62
1000094c:	d82b      	bhi.n	100009a6 <z_cbvprintf_impl+0x4d6>
1000094e:	2825      	cmp	r0, #37	; 0x25
10000950:	d100      	bne.n	10000954 <z_cbvprintf_impl+0x484>
10000952:	e5cf      	b.n	100004f4 <z_cbvprintf_impl+0x24>
10000954:	2858      	cmp	r0, #88	; 0x58
10000956:	d1b9      	bne.n	100008cc <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000958:	9812      	ldr	r0, [sp, #72]	; 0x48
1000095a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000095c:	231e      	movs	r3, #30
1000095e:	aa0a      	add	r2, sp, #40	; 0x28
10000960:	189b      	adds	r3, r3, r2
10000962:	9300      	str	r3, [sp, #0]
10000964:	aa14      	add	r2, sp, #80	; 0x50
10000966:	ab0c      	add	r3, sp, #48	; 0x30
10000968:	f001 fcb6 	bl	100022d8 <encode_uint>
			if (precision >= 0) {
1000096c:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
1000096e:	0006      	movs	r6, r0
			if (precision >= 0) {
10000970:	2b00      	cmp	r3, #0
10000972:	db0d      	blt.n	10000990 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10000974:	231e      	movs	r3, #30
				conv->flag_zero = false;
10000976:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000978:	aa0a      	add	r2, sp, #40	; 0x28
1000097a:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
1000097c:	aa12      	add	r2, sp, #72	; 0x48
1000097e:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10000980:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10000982:	4381      	bics	r1, r0
10000984:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000986:	9906      	ldr	r1, [sp, #24]
10000988:	4299      	cmp	r1, r3
1000098a:	d901      	bls.n	10000990 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
1000098c:	1acb      	subs	r3, r1, r3
1000098e:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10000990:	2e00      	cmp	r6, #0
10000992:	d09b      	beq.n	100008cc <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000994:	231e      	movs	r3, #30
10000996:	aa0a      	add	r2, sp, #40	; 0x28
10000998:	189b      	adds	r3, r3, r2
1000099a:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
1000099c:	9306      	str	r3, [sp, #24]
1000099e:	2d00      	cmp	r5, #0
100009a0:	d032      	beq.n	10000a08 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
100009a2:	3001      	adds	r0, #1
100009a4:	e030      	b.n	10000a08 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100009a6:	3863      	subs	r0, #99	; 0x63
100009a8:	2815      	cmp	r0, #21
100009aa:	d88f      	bhi.n	100008cc <z_cbvprintf_impl+0x3fc>
100009ac:	f7ff fc06 	bl	100001bc <__gnu_thumb1_case_shi>
100009b0:	0068005e 	.word	0x0068005e
100009b4:	ff8eff8e 	.word	0xff8eff8e
100009b8:	ff8eff8e 	.word	0xff8eff8e
100009bc:	ff8e0068 	.word	0xff8e0068
100009c0:	ff8eff8e 	.word	0xff8eff8e
100009c4:	00a0ff8e 	.word	0x00a0ff8e
100009c8:	007c007a 	.word	0x007c007a
100009cc:	ff8eff8e 	.word	0xff8eff8e
100009d0:	ff8e001e 	.word	0xff8e001e
100009d4:	ff8e007a 	.word	0xff8e007a
100009d8:	007aff8e 	.word	0x007aff8e
100009dc:	ffff87fd 	.word	0xffff87fd
100009e0:	00004002 	.word	0x00004002
100009e4:	00000482 	.word	0x00000482
100009e8:	00000801 	.word	0x00000801
			if (precision >= 0) {
100009ec:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
100009ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
100009f0:	2b00      	cmp	r3, #0
100009f2:	db37      	blt.n	10000a64 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
100009f4:	0019      	movs	r1, r3
100009f6:	0030      	movs	r0, r6
100009f8:	f001 fcf1 	bl	100023de <strnlen>
			bpe = bps + len;
100009fc:	1833      	adds	r3, r6, r0
		char sign = 0;
100009fe:	2500      	movs	r5, #0
			bpe = bps + len;
10000a00:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10000a02:	2e00      	cmp	r6, #0
10000a04:	d100      	bne.n	10000a08 <z_cbvprintf_impl+0x538>
10000a06:	e761      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10000a08:	ab12      	add	r3, sp, #72	; 0x48
10000a0a:	7a9b      	ldrb	r3, [r3, #10]
10000a0c:	2210      	movs	r2, #16
10000a0e:	0019      	movs	r1, r3
10000a10:	4011      	ands	r1, r2
10000a12:	910b      	str	r1, [sp, #44]	; 0x2c
10000a14:	4213      	tst	r3, r2
10000a16:	d100      	bne.n	10000a1a <z_cbvprintf_impl+0x54a>
10000a18:	e085      	b.n	10000b26 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10000a1a:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10000a1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
10000a1e:	920a      	str	r2, [sp, #40]	; 0x28
10000a20:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10000a22:	065b      	lsls	r3, r3, #25
10000a24:	d501      	bpl.n	10000a2a <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10000a26:	9b16      	ldr	r3, [sp, #88]	; 0x58
10000a28:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10000a2a:	9b03      	ldr	r3, [sp, #12]
10000a2c:	2b00      	cmp	r3, #0
10000a2e:	dc00      	bgt.n	10000a32 <z_cbvprintf_impl+0x562>
10000a30:	e094      	b.n	10000b5c <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10000a32:	1a1b      	subs	r3, r3, r0
10000a34:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10000a36:	ab12      	add	r3, sp, #72	; 0x48
10000a38:	7a1b      	ldrb	r3, [r3, #8]
10000a3a:	075a      	lsls	r2, r3, #29
10000a3c:	0fd1      	lsrs	r1, r2, #31
10000a3e:	9108      	str	r1, [sp, #32]
10000a40:	2a00      	cmp	r2, #0
10000a42:	da00      	bge.n	10000a46 <z_cbvprintf_impl+0x576>
10000a44:	e08a      	b.n	10000b5c <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
10000a46:	065b      	lsls	r3, r3, #25
10000a48:	d400      	bmi.n	10000a4c <z_cbvprintf_impl+0x57c>
10000a4a:	e078      	b.n	10000b3e <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10000a4c:	2d00      	cmp	r5, #0
10000a4e:	d007      	beq.n	10000a60 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10000a50:	0028      	movs	r0, r5
10000a52:	9905      	ldr	r1, [sp, #20]
10000a54:	9b04      	ldr	r3, [sp, #16]
10000a56:	4798      	blx	r3
10000a58:	2800      	cmp	r0, #0
10000a5a:	db6e      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000a5c:	9d08      	ldr	r5, [sp, #32]
10000a5e:	3701      	adds	r7, #1
					pad = '0';
10000a60:	2330      	movs	r3, #48	; 0x30
10000a62:	e06d      	b.n	10000b40 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10000a64:	0030      	movs	r0, r6
10000a66:	f001 fcb2 	bl	100023ce <strlen>
10000a6a:	e7c7      	b.n	100009fc <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10000a6c:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000a70:	ae0c      	add	r6, sp, #48	; 0x30
10000a72:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10000a74:	aa0a      	add	r2, sp, #40	; 0x28
10000a76:	189b      	adds	r3, r3, r2
		char sign = 0;
10000a78:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10000a7a:	2001      	movs	r0, #1
			bpe = buf + 1;
10000a7c:	9306      	str	r3, [sp, #24]
10000a7e:	e7c3      	b.n	10000a08 <z_cbvprintf_impl+0x538>
				sign = '+';
10000a80:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000a82:	071a      	lsls	r2, r3, #28
10000a84:	d402      	bmi.n	10000a8c <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
10000a86:	06db      	lsls	r3, r3, #27
10000a88:	0fdb      	lsrs	r3, r3, #31
10000a8a:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10000a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000a8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10000a90:	2b00      	cmp	r3, #0
10000a92:	db00      	blt.n	10000a96 <z_cbvprintf_impl+0x5c6>
10000a94:	e760      	b.n	10000958 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
10000a96:	2100      	movs	r1, #0
10000a98:	4250      	negs	r0, r2
10000a9a:	4199      	sbcs	r1, r3
				sign = '-';
10000a9c:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000a9e:	9012      	str	r0, [sp, #72]	; 0x48
10000aa0:	9113      	str	r1, [sp, #76]	; 0x4c
10000aa2:	e759      	b.n	10000958 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10000aa4:	2500      	movs	r5, #0
10000aa6:	e757      	b.n	10000958 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10000aa8:	9812      	ldr	r0, [sp, #72]	; 0x48
10000aaa:	ad12      	add	r5, sp, #72	; 0x48
10000aac:	2800      	cmp	r0, #0
10000aae:	d034      	beq.n	10000b1a <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000ab0:	231e      	movs	r3, #30
10000ab2:	aa0a      	add	r2, sp, #40	; 0x28
10000ab4:	189b      	adds	r3, r3, r2
10000ab6:	9300      	str	r3, [sp, #0]
10000ab8:	aa14      	add	r2, sp, #80	; 0x50
10000aba:	ab0c      	add	r3, sp, #48	; 0x30
10000abc:	2100      	movs	r1, #0
10000abe:	f001 fc0b 	bl	100022d8 <encode_uint>
				conv->altform_0c = true;
10000ac2:	23ef      	movs	r3, #239	; 0xef
10000ac4:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000ac6:	0006      	movs	r6, r0
				conv->altform_0c = true;
10000ac8:	401a      	ands	r2, r3
10000aca:	4b48      	ldr	r3, [pc, #288]	; (10000bec <z_cbvprintf_impl+0x71c>)
10000acc:	4313      	orrs	r3, r2
10000ace:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000ad0:	2500      	movs	r5, #0
			if (precision >= 0) {
10000ad2:	9b06      	ldr	r3, [sp, #24]
10000ad4:	42ab      	cmp	r3, r5
10000ad6:	db00      	blt.n	10000ada <z_cbvprintf_impl+0x60a>
10000ad8:	e74c      	b.n	10000974 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
10000ada:	42a8      	cmp	r0, r5
10000adc:	d100      	bne.n	10000ae0 <z_cbvprintf_impl+0x610>
10000ade:	e6f5      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000ae0:	231e      	movs	r3, #30
10000ae2:	aa0a      	add	r2, sp, #40	; 0x28
10000ae4:	189b      	adds	r3, r3, r2
10000ae6:	1a18      	subs	r0, r3, r0
10000ae8:	231e      	movs	r3, #30
10000aea:	189b      	adds	r3, r3, r2
10000aec:	9306      	str	r3, [sp, #24]
10000aee:	e78b      	b.n	10000a08 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10000af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10000af2:	2a07      	cmp	r2, #7
10000af4:	d900      	bls.n	10000af8 <z_cbvprintf_impl+0x628>
10000af6:	e6e9      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
10000af8:	0010      	movs	r0, r2
10000afa:	f7ff fb55 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000afe:	040c      	.short	0x040c
10000b00:	08080c06 	.word	0x08080c06
10000b04:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10000b06:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10000b08:	e6e0      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10000b0a:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10000b0c:	e6de      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10000b0e:	17fa      	asrs	r2, r7, #31
10000b10:	601f      	str	r7, [r3, #0]
10000b12:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10000b14:	e6da      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000b16:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10000b18:	e6d8      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10000b1a:	4b35      	ldr	r3, [pc, #212]	; (10000bf0 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10000b1c:	0005      	movs	r5, r0
10000b1e:	4e35      	ldr	r6, [pc, #212]	; (10000bf4 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10000b20:	2005      	movs	r0, #5
			bpe = bps + 5;
10000b22:	9306      	str	r3, [sp, #24]
10000b24:	e770      	b.n	10000a08 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10000b26:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000b28:	0fd2      	lsrs	r2, r2, #31
10000b2a:	1880      	adds	r0, r0, r2
10000b2c:	e776      	b.n	10000a1c <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10000b2e:	9905      	ldr	r1, [sp, #20]
10000b30:	9809      	ldr	r0, [sp, #36]	; 0x24
10000b32:	9b04      	ldr	r3, [sp, #16]
10000b34:	4798      	blx	r3
10000b36:	2800      	cmp	r0, #0
10000b38:	da05      	bge.n	10000b46 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10000b3a:	b019      	add	sp, #100	; 0x64
10000b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000b3e:	2320      	movs	r3, #32
					pad = '0';
10000b40:	9309      	str	r3, [sp, #36]	; 0x24
10000b42:	9b03      	ldr	r3, [sp, #12]
10000b44:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10000b46:	9b08      	ldr	r3, [sp, #32]
10000b48:	001a      	movs	r2, r3
10000b4a:	3a01      	subs	r2, #1
10000b4c:	9208      	str	r2, [sp, #32]
10000b4e:	2b00      	cmp	r3, #0
10000b50:	dced      	bgt.n	10000b2e <z_cbvprintf_impl+0x65e>
10000b52:	9a03      	ldr	r2, [sp, #12]
10000b54:	19d7      	adds	r7, r2, r7
10000b56:	1aff      	subs	r7, r7, r3
10000b58:	9b08      	ldr	r3, [sp, #32]
10000b5a:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10000b5c:	2d00      	cmp	r5, #0
10000b5e:	d006      	beq.n	10000b6e <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10000b60:	0028      	movs	r0, r5
10000b62:	9905      	ldr	r1, [sp, #20]
10000b64:	9b04      	ldr	r3, [sp, #16]
10000b66:	4798      	blx	r3
10000b68:	2800      	cmp	r0, #0
10000b6a:	dbe6      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000b6c:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000b6e:	ab12      	add	r3, sp, #72	; 0x48
10000b70:	7a9b      	ldrb	r3, [r3, #10]
10000b72:	06da      	lsls	r2, r3, #27
10000b74:	d401      	bmi.n	10000b7a <z_cbvprintf_impl+0x6aa>
10000b76:	071b      	lsls	r3, r3, #28
10000b78:	d506      	bpl.n	10000b88 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10000b7a:	2030      	movs	r0, #48	; 0x30
10000b7c:	9905      	ldr	r1, [sp, #20]
10000b7e:	9b04      	ldr	r3, [sp, #16]
10000b80:	4798      	blx	r3
10000b82:	2800      	cmp	r0, #0
10000b84:	dbd9      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000b86:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000b8a:	2b00      	cmp	r3, #0
10000b8c:	d007      	beq.n	10000b9e <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10000b8e:	ab12      	add	r3, sp, #72	; 0x48
10000b90:	7ad8      	ldrb	r0, [r3, #11]
10000b92:	9905      	ldr	r1, [sp, #20]
10000b94:	9b04      	ldr	r3, [sp, #16]
10000b96:	4798      	blx	r3
10000b98:	2800      	cmp	r0, #0
10000b9a:	dbce      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000b9c:	3701      	adds	r7, #1
				while (width-- > 0) {
10000b9e:	003d      	movs	r5, r7
10000ba0:	e006      	b.n	10000bb0 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10000ba2:	2030      	movs	r0, #48	; 0x30
10000ba4:	9905      	ldr	r1, [sp, #20]
10000ba6:	9b04      	ldr	r3, [sp, #16]
10000ba8:	4798      	blx	r3
10000baa:	2800      	cmp	r0, #0
10000bac:	dbc5      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000bae:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10000bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000bb2:	19db      	adds	r3, r3, r7
10000bb4:	1b5b      	subs	r3, r3, r5
10000bb6:	2b00      	cmp	r3, #0
10000bb8:	dcf3      	bgt.n	10000ba2 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10000bba:	0032      	movs	r2, r6
10000bbc:	9b06      	ldr	r3, [sp, #24]
10000bbe:	9905      	ldr	r1, [sp, #20]
10000bc0:	9804      	ldr	r0, [sp, #16]
10000bc2:	f001 fbd6 	bl	10002372 <outs>
10000bc6:	2800      	cmp	r0, #0
10000bc8:	dbb7      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000bca:	1947      	adds	r7, r0, r5
10000bcc:	003d      	movs	r5, r7
		while (width > 0) {
10000bce:	9b03      	ldr	r3, [sp, #12]
10000bd0:	195b      	adds	r3, r3, r5
10000bd2:	1bdb      	subs	r3, r3, r7
10000bd4:	2b00      	cmp	r3, #0
10000bd6:	dc00      	bgt.n	10000bda <z_cbvprintf_impl+0x70a>
10000bd8:	e678      	b.n	100008cc <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10000bda:	2020      	movs	r0, #32
10000bdc:	9905      	ldr	r1, [sp, #20]
10000bde:	9b04      	ldr	r3, [sp, #16]
10000be0:	4798      	blx	r3
10000be2:	2800      	cmp	r0, #0
10000be4:	dba9      	blt.n	10000b3a <z_cbvprintf_impl+0x66a>
10000be6:	3701      	adds	r7, #1
			--width;
10000be8:	e7f1      	b.n	10000bce <z_cbvprintf_impl+0x6fe>
10000bea:	46c0      	nop			; (mov r8, r8)
10000bec:	00007810 	.word	0x00007810
10000bf0:	10002d5e 	.word	0x10002d5e
10000bf4:	10002d59 	.word	0x10002d59

10000bf8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000bf8:	4901      	ldr	r1, [pc, #4]	; (10000c00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000bfa:	2210      	movs	r2, #16
	str	r2, [r1]
10000bfc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000bfe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000c00:	e000ed10 	.word	0xe000ed10

10000c04 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10000c04:	f3bf 8f4f 	dsb	sy
10000c08:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000c0a:	b662      	cpsie	i
	isb
10000c0c:	f3bf 8f6f 	isb	sy

	bx	lr
10000c10:	4770      	bx	lr
10000c12:	46c0      	nop			; (mov r8, r8)

10000c14 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10000c14:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000c16:	0600      	lsls	r0, r0, #24
10000c18:	d405      	bmi.n	10000c26 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000c1a:	221f      	movs	r2, #31
10000c1c:	401a      	ands	r2, r3
10000c1e:	2301      	movs	r3, #1
10000c20:	4093      	lsls	r3, r2
10000c22:	4a01      	ldr	r2, [pc, #4]	; (10000c28 <arch_irq_enable+0x14>)
10000c24:	6013      	str	r3, [r2, #0]
}
10000c26:	4770      	bx	lr
10000c28:	e000e100 	.word	0xe000e100

10000c2c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000c2c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c2e:	25ff      	movs	r5, #255	; 0xff
10000c30:	2203      	movs	r2, #3
10000c32:	000b      	movs	r3, r1
10000c34:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000c36:	b240      	sxtb	r0, r0
10000c38:	4002      	ands	r2, r0
10000c3a:	00d2      	lsls	r2, r2, #3
10000c3c:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c3e:	015b      	lsls	r3, r3, #5
10000c40:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c42:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c44:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10000c46:	2800      	cmp	r0, #0
10000c48:	db0a      	blt.n	10000c60 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c4a:	24c0      	movs	r4, #192	; 0xc0
10000c4c:	4a0a      	ldr	r2, [pc, #40]	; (10000c78 <z_arm_irq_priority_set+0x4c>)
10000c4e:	0880      	lsrs	r0, r0, #2
10000c50:	0080      	lsls	r0, r0, #2
10000c52:	1880      	adds	r0, r0, r2
10000c54:	00a4      	lsls	r4, r4, #2
10000c56:	5902      	ldr	r2, [r0, r4]
10000c58:	400a      	ands	r2, r1
10000c5a:	4313      	orrs	r3, r2
10000c5c:	5103      	str	r3, [r0, r4]
}
10000c5e:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c60:	220f      	movs	r2, #15
10000c62:	4010      	ands	r0, r2
10000c64:	3808      	subs	r0, #8
10000c66:	4a05      	ldr	r2, [pc, #20]	; (10000c7c <z_arm_irq_priority_set+0x50>)
10000c68:	0880      	lsrs	r0, r0, #2
10000c6a:	0080      	lsls	r0, r0, #2
10000c6c:	1880      	adds	r0, r0, r2
10000c6e:	69c2      	ldr	r2, [r0, #28]
10000c70:	4011      	ands	r1, r2
10000c72:	4319      	orrs	r1, r3
10000c74:	61c1      	str	r1, [r0, #28]
10000c76:	e7f2      	b.n	10000c5e <z_arm_irq_priority_set+0x32>
10000c78:	e000e100 	.word	0xe000e100
10000c7c:	e000ed00 	.word	0xe000ed00

10000c80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000c80:	bf30      	wfi
    b z_SysNmiOnReset
10000c82:	e7fd      	b.n	10000c80 <z_SysNmiOnReset>

10000c84 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000c84:	22ff      	movs	r2, #255	; 0xff
10000c86:	4b08      	ldr	r3, [pc, #32]	; (10000ca8 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000c88:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000c8a:	4393      	bics	r3, r2
10000c8c:	4a07      	ldr	r2, [pc, #28]	; (10000cac <z_arm_prep_c+0x28>)
10000c8e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000c94:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000c98:	f000 fdd8 	bl	1000184c <z_bss_zero>
	z_data_copy();
10000c9c:	f001 f9a6 	bl	10001fec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000ca0:	f000 f8f2 	bl	10000e88 <z_arm_interrupt_init>
	z_cstart();
10000ca4:	f000 fe12 	bl	100018cc <z_cstart>
10000ca8:	10000100 	.word	0x10000100
10000cac:	e000ed00 	.word	0xe000ed00

10000cb0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000cb0:	4a08      	ldr	r2, [pc, #32]	; (10000cd4 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000cb2:	4909      	ldr	r1, [pc, #36]	; (10000cd8 <arch_swap+0x28>)
	_current->arch.basepri = key;
10000cb4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000cb6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000cb8:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000cba:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000cbc:	2380      	movs	r3, #128	; 0x80
10000cbe:	4907      	ldr	r1, [pc, #28]	; (10000cdc <arch_swap+0x2c>)
10000cc0:	055b      	lsls	r3, r3, #21
10000cc2:	6848      	ldr	r0, [r1, #4]
10000cc4:	4303      	orrs	r3, r0
10000cc6:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10000cc8:	b662      	cpsie	i
10000cca:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10000cce:	6893      	ldr	r3, [r2, #8]
10000cd0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10000cd2:	4770      	bx	lr
10000cd4:	20000178 	.word	0x20000178
10000cd8:	10002d2c 	.word	0x10002d2c
10000cdc:	e000ed00 	.word	0xe000ed00

10000ce0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10000ce0:	4913      	ldr	r1, [pc, #76]	; (10000d30 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10000ce2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10000ce4:	4813      	ldr	r0, [pc, #76]	; (10000d34 <_thread_irq_disabled+0x22>)
    add r0, r2
10000ce6:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10000ce8:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10000cec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10000cee:	4643      	mov	r3, r8
    mov r4, r9
10000cf0:	464c      	mov	r4, r9
    mov r5, r10
10000cf2:	4655      	mov	r5, sl
    mov r6, r11
10000cf4:	465e      	mov	r6, fp
    mov r7, ip
10000cf6:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10000cf8:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000cfa:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10000cfc:	4f0e      	ldr	r7, [pc, #56]	; (10000d38 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10000cfe:	4e0f      	ldr	r6, [pc, #60]	; (10000d3c <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10000d00:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10000d02:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10000d04:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10000d06:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10000d08:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10000d0a:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10000d0c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10000d0e:	d100      	bne.n	10000d12 <_thread_irq_disabled>
    cpsie i
10000d10:	b662      	cpsie	i

10000d12 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10000d12:	4c08      	ldr	r4, [pc, #32]	; (10000d34 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10000d14:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10000d16:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10000d18:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10000d1a:	4698      	mov	r8, r3
    mov r9, r4
10000d1c:	46a1      	mov	r9, r4
    mov r10, r5
10000d1e:	46aa      	mov	sl, r5
    mov r11, r6
10000d20:	46b3      	mov	fp, r6
    mov ip, r7
10000d22:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10000d24:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10000d26:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10000d28:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10000d2c:	4770      	bx	lr
10000d2e:	0000      	.short	0x0000
    ldr r1, =_kernel
10000d30:	20000178 	.word	0x20000178
    ldr r0, =_thread_offset_to_callee_saved
10000d34:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10000d38:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10000d3c:	08000000 	.word	0x08000000

10000d40 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10000d40:	2004      	movs	r0, #4
  mov r1, lr
10000d42:	4671      	mov	r1, lr
  tst r1, r0
10000d44:	4201      	tst	r1, r0
  beq _stack_frame_msp
10000d46:	d002      	beq.n	10000d4e <_stack_frame_msp>
  mrs r0, PSP
10000d48:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10000d4c:	d101      	bne.n	10000d52 <_stack_frame_endif>

10000d4e <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10000d4e:	f3ef 8008 	mrs	r0, MSP

10000d52 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10000d52:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10000d54:	3902      	subs	r1, #2
    ldrb r1, [r1]
10000d56:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10000d58:	2902      	cmp	r1, #2
    beq _oops
10000d5a:	d0ff      	beq.n	10000d5c <_oops>

10000d5c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10000d5c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10000d5e:	f001 fb23 	bl	100023a8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10000d62:	bd01      	pop	{r0, pc}

10000d64 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10000d64:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10000d66:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10000d68:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10000d6a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10000d6c:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10000d6e:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10000d70:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10000d72:	4906      	ldr	r1, [pc, #24]	; (10000d8c <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10000d74:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10000d76:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10000d78:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10000d7a:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10000d7c:	2380      	movs	r3, #128	; 0x80
10000d7e:	045b      	lsls	r3, r3, #17
10000d80:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10000d82:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10000d84:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10000d86:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10000d88:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10000d8a:	bd10      	pop	{r4, pc}
10000d8c:	100022c5 	.word	0x100022c5

10000d90 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10000d90:	4b06      	ldr	r3, [pc, #24]	; (10000dac <arch_switch_to_main_thread+0x1c>)
10000d92:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10000d94:	1c10      	adds	r0, r2, #0
10000d96:	f381 8809 	msr	PSP, r1
10000d9a:	2100      	movs	r1, #0
10000d9c:	b662      	cpsie	i
10000d9e:	f3bf 8f6f 	isb	sy
10000da2:	2200      	movs	r2, #0
10000da4:	2300      	movs	r3, #0
10000da6:	f001 fa8d 	bl	100022c4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10000daa:	46c0      	nop			; (mov r8, r8)
10000dac:	20000178 	.word	0x20000178

10000db0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10000db0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10000db2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10000db6:	4905      	ldr	r1, [pc, #20]	; (10000dcc <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10000db8:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10000dba:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10000dbc:	4904      	ldr	r1, [pc, #16]	; (10000dd0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10000dbe:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10000dc0:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10000dc2:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10000dc4:	bc09      	pop	{r0, r3}
	mov lr, r3
10000dc6:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10000dc8:	4902      	ldr	r1, [pc, #8]	; (10000dd4 <_isr_wrapper+0x24>)
	bx r1
10000dca:	4708      	bx	r1
	ldr r1, =16
10000dcc:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10000dd0:	10002b68 	.word	0x10002b68
	ldr r1, =z_arm_int_exit
10000dd4:	10000dd9 	.word	0x10000dd9

10000dd8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10000dd8:	4b04      	ldr	r3, [pc, #16]	; (10000dec <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10000dda:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10000ddc:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
10000dde:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10000de0:	d002      	beq.n	10000de8 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10000de2:	4903      	ldr	r1, [pc, #12]	; (10000df0 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10000de4:	4a03      	ldr	r2, [pc, #12]	; (10000df4 <_EXIT_EXC+0xc>)
	str r2, [r1]
10000de6:	600a      	str	r2, [r1, #0]

10000de8 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10000de8:	4770      	bx	lr
10000dea:	0000      	.short	0x0000
	ldr r3, =_kernel
10000dec:	20000178 	.word	0x20000178
	ldr r1, =_SCS_ICSR
10000df0:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10000df4:	10000000 	.word	0x10000000

10000df8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10000df8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000dfa:	4b1b      	ldr	r3, [pc, #108]	; (10000e68 <z_arm_fault+0x70>)
{
10000dfc:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000dfe:	685b      	ldr	r3, [r3, #4]
{
10000e00:	b088      	sub	sp, #32
10000e02:	05db      	lsls	r3, r3, #23
10000e04:	0ddb      	lsrs	r3, r3, #23
10000e06:	b662      	cpsie	i
10000e08:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10000e0c:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e0e:	0e16      	lsrs	r6, r2, #24
		return NULL;
10000e10:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e12:	2eff      	cmp	r6, #255	; 0xff
10000e14:	d109      	bne.n	10000e2a <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10000e16:	3ef3      	subs	r6, #243	; 0xf3
10000e18:	4016      	ands	r6, r2
10000e1a:	2e08      	cmp	r6, #8
10000e1c:	d005      	beq.n	10000e2a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10000e1e:	0001      	movs	r1, r0
			*nested_exc = true;
10000e20:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10000e22:	0712      	lsls	r2, r2, #28
10000e24:	d501      	bpl.n	10000e2a <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10000e26:	0021      	movs	r1, r4
	*nested_exc = false;
10000e28:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10000e2a:	2400      	movs	r4, #0
	switch (fault) {
10000e2c:	2b03      	cmp	r3, #3
10000e2e:	d106      	bne.n	10000e3e <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10000e30:	698b      	ldr	r3, [r1, #24]
10000e32:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10000e34:	881a      	ldrh	r2, [r3, #0]
10000e36:	4b0d      	ldr	r3, [pc, #52]	; (10000e6c <z_arm_fault+0x74>)
10000e38:	429a      	cmp	r2, r3
10000e3a:	d100      	bne.n	10000e3e <z_arm_fault+0x46>
		reason = esf->basic.r0;
10000e3c:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10000e3e:	2220      	movs	r2, #32
10000e40:	4668      	mov	r0, sp
10000e42:	f001 fad6 	bl	100023f2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10000e46:	9b07      	ldr	r3, [sp, #28]
10000e48:	2d00      	cmp	r5, #0
10000e4a:	d00a      	beq.n	10000e62 <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10000e4c:	05da      	lsls	r2, r3, #23
10000e4e:	d102      	bne.n	10000e56 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10000e50:	4a07      	ldr	r2, [pc, #28]	; (10000e70 <z_arm_fault+0x78>)
10000e52:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000e54:	9307      	str	r3, [sp, #28]

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10000e56:	4669      	mov	r1, sp
10000e58:	0020      	movs	r0, r4
10000e5a:	f001 faa1 	bl	100023a0 <z_arm_fatal_error>
}
10000e5e:	b008      	add	sp, #32
10000e60:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000e62:	0a5b      	lsrs	r3, r3, #9
10000e64:	025b      	lsls	r3, r3, #9
10000e66:	e7f5      	b.n	10000e54 <z_arm_fault+0x5c>
10000e68:	e000ed00 	.word	0xe000ed00
10000e6c:	0000df02 	.word	0x0000df02
10000e70:	000001ff 	.word	0x000001ff

10000e74 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10000e74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10000e78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10000e7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10000e7e:	4672      	mov	r2, lr
	bl z_arm_fault
10000e80:	f7ff ffba 	bl	10000df8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10000e84:	bd01      	pop	{r0, pc}
10000e86:	46c0      	nop			; (mov r8, r8)

10000e88 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000e8a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10000e8c:	2200      	movs	r2, #0
10000e8e:	2603      	movs	r6, #3
10000e90:	25ff      	movs	r5, #255	; 0xff
10000e92:	00a4      	lsls	r4, r4, #2
10000e94:	0010      	movs	r0, r2
10000e96:	002f      	movs	r7, r5
10000e98:	4030      	ands	r0, r6
10000e9a:	00c0      	lsls	r0, r0, #3
10000e9c:	4087      	lsls	r7, r0
10000e9e:	4905      	ldr	r1, [pc, #20]	; (10000eb4 <z_arm_interrupt_init+0x2c>)
10000ea0:	0893      	lsrs	r3, r2, #2
10000ea2:	009b      	lsls	r3, r3, #2
10000ea4:	185b      	adds	r3, r3, r1
10000ea6:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10000ea8:	3201      	adds	r2, #1
10000eaa:	43b9      	bics	r1, r7
10000eac:	5119      	str	r1, [r3, r4]
10000eae:	2a1a      	cmp	r2, #26
10000eb0:	d1f0      	bne.n	10000e94 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000eb4:	e000e100 	.word	0xe000e100

10000eb8 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000eb8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10000eba:	4807      	ldr	r0, [pc, #28]	; (10000ed8 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000ebc:	4907      	ldr	r1, [pc, #28]	; (10000edc <__start+0x24>)
    adds r0, r0, r1
10000ebe:	1840      	adds	r0, r0, r1
    msr PSP, r0
10000ec0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10000ec4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10000ec8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10000eca:	4308      	orrs	r0, r1
    msr CONTROL, r0
10000ecc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10000ed0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10000ed4:	f7ff fed6 	bl	10000c84 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10000ed8:	200001b0 	.word	0x200001b0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000edc:	00000800 	.word	0x00000800

10000ee0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10000ee0:	b510      	push	{r4, lr}
	if (_current == thread) {
10000ee2:	4b0a      	ldr	r3, [pc, #40]	; (10000f0c <z_impl_k_thread_abort+0x2c>)
10000ee4:	689b      	ldr	r3, [r3, #8]
10000ee6:	4283      	cmp	r3, r0
10000ee8:	d10d      	bne.n	10000f06 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10000eea:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10000eee:	2b00      	cmp	r3, #0
10000ef0:	d009      	beq.n	10000f06 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000ef2:	2280      	movs	r2, #128	; 0x80
10000ef4:	4b06      	ldr	r3, [pc, #24]	; (10000f10 <z_impl_k_thread_abort+0x30>)
10000ef6:	0552      	lsls	r2, r2, #21
10000ef8:	6859      	ldr	r1, [r3, #4]
10000efa:	430a      	orrs	r2, r1
10000efc:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10000efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000f00:	4904      	ldr	r1, [pc, #16]	; (10000f14 <z_impl_k_thread_abort+0x34>)
10000f02:	400a      	ands	r2, r1
10000f04:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10000f06:	f001 f815 	bl	10001f34 <z_thread_abort>
}
10000f0a:	bd10      	pop	{r4, pc}
10000f0c:	20000178 	.word	0x20000178
10000f10:	e000ed00 	.word	0xe000ed00
10000f14:	ffff7fff 	.word	0xffff7fff

10000f18 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10000f18:	4b01      	ldr	r3, [pc, #4]	; (10000f20 <__stdout_hook_install+0x8>)
10000f1a:	6018      	str	r0, [r3, #0]
}
10000f1c:	4770      	bx	lr
10000f1e:	46c0      	nop			; (mov r8, r8)
10000f20:	20000004 	.word	0x20000004

10000f24 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000f24:	4b0e      	ldr	r3, [pc, #56]	; (10000f60 <rp2040_init+0x3c>)
10000f26:	4a0f      	ldr	r2, [pc, #60]	; (10000f64 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10000f28:	b570      	push	{r4, r5, r6, lr}
10000f2a:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000f2c:	4d0e      	ldr	r5, [pc, #56]	; (10000f68 <rp2040_init+0x44>)
10000f2e:	4b0f      	ldr	r3, [pc, #60]	; (10000f6c <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000f30:	4c0f      	ldr	r4, [pc, #60]	; (10000f70 <rp2040_init+0x4c>)
10000f32:	602b      	str	r3, [r5, #0]
10000f34:	0019      	movs	r1, r3
10000f36:	68a2      	ldr	r2, [r4, #8]
10000f38:	4391      	bics	r1, r2
10000f3a:	d1fb      	bne.n	10000f34 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10000f3c:	f000 fa4c 	bl	100013d8 <clocks_init>
10000f40:	4b0c      	ldr	r3, [pc, #48]	; (10000f74 <rp2040_init+0x50>)
10000f42:	602b      	str	r3, [r5, #0]
10000f44:	68a3      	ldr	r3, [r4, #8]
10000f46:	01db      	lsls	r3, r3, #7
10000f48:	3380      	adds	r3, #128	; 0x80
10000f4a:	d1fb      	bne.n	10000f44 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10000f4c:	f3ef 8310 	mrs	r3, PRIMASK
10000f50:	b672      	cpsid	i
	if (key != 0U) {
10000f52:	2b00      	cmp	r3, #0
10000f54:	d102      	bne.n	10000f5c <rp2040_init+0x38>
	__asm__ volatile(
10000f56:	b662      	cpsie	i
10000f58:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10000f5c:	2000      	movs	r0, #0
10000f5e:	bd70      	pop	{r4, r5, r6, pc}
10000f60:	4000e000 	.word	0x4000e000
10000f64:	ffffcdbf 	.word	0xffffcdbf
10000f68:	4000f000 	.word	0x4000f000
10000f6c:	003c3ffe 	.word	0x003c3ffe
10000f70:	4000c000 	.word	0x4000c000
10000f74:	01ffffff 	.word	0x01ffffff

10000f78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10000f78:	b510      	push	{r4, lr}
10000f7a:	4808      	ldr	r0, [pc, #32]	; (10000f9c <uart_console_init+0x24>)
10000f7c:	f001 fd0a 	bl	10002994 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10000f80:	2800      	cmp	r0, #0
10000f82:	d008      	beq.n	10000f96 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10000f84:	4c06      	ldr	r4, [pc, #24]	; (10000fa0 <uart_console_init+0x28>)
10000f86:	0020      	movs	r0, r4
10000f88:	f7ff ffc6 	bl	10000f18 <__stdout_hook_install>
	__printk_hook_install(console_out);
10000f8c:	0020      	movs	r0, r4
10000f8e:	f7ff fa8d 	bl	100004ac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10000f92:	2000      	movs	r0, #0
}
10000f94:	bd10      	pop	{r4, pc}
		return -ENODEV;
10000f96:	2013      	movs	r0, #19
10000f98:	4240      	negs	r0, r0
10000f9a:	e7fb      	b.n	10000f94 <uart_console_init+0x1c>
10000f9c:	10002b38 	.word	0x10002b38
10000fa0:	10000fa5 	.word	0x10000fa5

10000fa4 <console_out>:
{
10000fa4:	b570      	push	{r4, r5, r6, lr}
10000fa6:	0004      	movs	r4, r0
10000fa8:	4d07      	ldr	r5, [pc, #28]	; (10000fc8 <console_out+0x24>)
	if ('\n' == c) {
10000faa:	280a      	cmp	r0, #10
10000fac:	d104      	bne.n	10000fb8 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10000fae:	68ab      	ldr	r3, [r5, #8]
10000fb0:	210d      	movs	r1, #13
10000fb2:	0028      	movs	r0, r5
10000fb4:	685b      	ldr	r3, [r3, #4]
10000fb6:	4798      	blx	r3
10000fb8:	68ab      	ldr	r3, [r5, #8]
10000fba:	0028      	movs	r0, r5
10000fbc:	685b      	ldr	r3, [r3, #4]
10000fbe:	b2e1      	uxtb	r1, r4
10000fc0:	4798      	blx	r3
}
10000fc2:	0020      	movs	r0, r4
10000fc4:	bd70      	pop	{r4, r5, r6, pc}
10000fc6:	46c0      	nop			; (mov r8, r8)
10000fc8:	10002b38 	.word	0x10002b38

10000fcc <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10000fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000fce:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10000fd0:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10000fd2:	6903      	ldr	r3, [r0, #16]
10000fd4:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10000fd6:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10000fd8:	4a14      	ldr	r2, [pc, #80]	; (1000102c <gpio_rpi_isr+0x60>)
10000fda:	3308      	adds	r3, #8
10000fdc:	009b      	lsls	r3, r3, #2
10000fde:	589b      	ldr	r3, [r3, r2]
10000fe0:	2207      	movs	r2, #7
10000fe2:	4022      	ands	r2, r4
10000fe4:	0092      	lsls	r2, r2, #2
10000fe6:	40d3      	lsrs	r3, r2
		if (events) {
10000fe8:	220f      	movs	r2, #15
10000fea:	4213      	tst	r3, r2
10000fec:	d103      	bne.n	10000ff6 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10000fee:	3401      	adds	r4, #1
10000ff0:	2c1e      	cmp	r4, #30
10000ff2:	d1f0      	bne.n	10000fd6 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10000ff4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10000ff6:	210f      	movs	r1, #15
10000ff8:	0020      	movs	r0, r4
10000ffa:	f000 fb33 	bl	10001664 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10000ffe:	9b01      	ldr	r3, [sp, #4]
10001000:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10001002:	2900      	cmp	r1, #0
10001004:	d0f3      	beq.n	10000fee <gpio_rpi_isr+0x22>
10001006:	2701      	movs	r7, #1
10001008:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
1000100a:	680d      	ldr	r5, [r1, #0]
1000100c:	2900      	cmp	r1, #0
1000100e:	d0ee      	beq.n	10000fee <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10001010:	688b      	ldr	r3, [r1, #8]
10001012:	001a      	movs	r2, r3
10001014:	403a      	ands	r2, r7
10001016:	423b      	tst	r3, r7
10001018:	d002      	beq.n	10001020 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
1000101a:	0030      	movs	r0, r6
1000101c:	684b      	ldr	r3, [r1, #4]
1000101e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10001020:	1e2b      	subs	r3, r5, #0
10001022:	d000      	beq.n	10001026 <gpio_rpi_isr+0x5a>
10001024:	682b      	ldr	r3, [r5, #0]
10001026:	0029      	movs	r1, r5
10001028:	001d      	movs	r5, r3
1000102a:	e7ef      	b.n	1000100c <gpio_rpi_isr+0x40>
1000102c:	40014100 	.word	0x40014100

10001030 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10001030:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001032:	4903      	ldr	r1, [pc, #12]	; (10001040 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10001034:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001036:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001038:	400b      	ands	r3, r1
1000103a:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
1000103c:	4770      	bx	lr
1000103e:	46c0      	nop			; (mov r8, r8)
10001040:	fffff83f 	.word	0xfffff83f

10001044 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10001044:	b510      	push	{r4, lr}
10001046:	2b03      	cmp	r3, #3
10001048:	d823      	bhi.n	10001092 <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
1000104a:	2a01      	cmp	r2, #1
1000104c:	d002      	beq.n	10001054 <uart_rpi_set_format.isra.0+0x10>
1000104e:	2a03      	cmp	r2, #3
10001050:	d11f      	bne.n	10001092 <uart_rpi_set_format.isra.0+0x4e>
10001052:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10001054:	2902      	cmp	r1, #2
10001056:	d81c      	bhi.n	10001092 <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10001058:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000105a:	3a01      	subs	r2, #1
1000105c:	480e      	ldr	r0, [pc, #56]	; (10001098 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000105e:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001060:	00d2      	lsls	r2, r2, #3
10001062:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10001064:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001066:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10001068:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000106a:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
1000106c:	4299      	cmp	r1, r3
1000106e:	d005      	beq.n	1000107c <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001070:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10001072:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001074:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10001076:	424b      	negs	r3, r1
10001078:	4159      	adcs	r1, r3
1000107a:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000107c:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000107e:	236e      	movs	r3, #110	; 0x6e
10001080:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10001082:	404a      	eors	r2, r1
10001084:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001086:	2380      	movs	r3, #128	; 0x80
10001088:	015b      	lsls	r3, r3, #5
1000108a:	4303      	orrs	r3, r0
	return 0;
1000108c:	2000      	movs	r0, #0
1000108e:	601a      	str	r2, [r3, #0]
}
10001090:	bd10      	pop	{r4, pc}
		return -EINVAL;
10001092:	2016      	movs	r0, #22
10001094:	4240      	negs	r0, r0
10001096:	e7fb      	b.n	10001090 <uart_rpi_set_format.isra.0+0x4c>
10001098:	10002d8b 	.word	0x10002d8b

1000109c <uart_rpi_init>:
{
1000109c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
1000109e:	6845      	ldr	r5, [r0, #4]
{
100010a0:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
100010a2:	682b      	ldr	r3, [r5, #0]
{
100010a4:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
100010a6:	6906      	ldr	r6, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100010a8:	2100      	movs	r1, #0
100010aa:	68a8      	ldr	r0, [r5, #8]
100010ac:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
100010ae:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100010b0:	9301      	str	r3, [sp, #4]
100010b2:	f001 faba 	bl	1000262a <pinctrl_lookup_state>
	if (ret < 0) {
100010b6:	2800      	cmp	r0, #0
100010b8:	db23      	blt.n	10001102 <uart_rpi_init+0x66>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100010ba:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100010bc:	2200      	movs	r2, #0
100010be:	7919      	ldrb	r1, [r3, #4]
100010c0:	6818      	ldr	r0, [r3, #0]
100010c2:	f001 fac5 	bl	10002650 <pinctrl_configure_pins>
	if (ret < 0) {
100010c6:	2800      	cmp	r0, #0
100010c8:	db1b      	blt.n	10001102 <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
100010ca:	6831      	ldr	r1, [r6, #0]
100010cc:	9801      	ldr	r0, [sp, #4]
100010ce:	f000 fb33 	bl	10001738 <uart_init>
	if (baudrate == 0) {
100010d2:	2800      	cmp	r0, #0
100010d4:	d017      	beq.n	10001106 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
100010d6:	4b0d      	ldr	r3, [pc, #52]	; (1000110c <uart_rpi_init+0x70>)
100010d8:	6030      	str	r0, [r6, #0]
100010da:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
100010dc:	2201      	movs	r2, #1
100010de:	2303      	movs	r3, #3
100010e0:	2100      	movs	r1, #0
100010e2:	6860      	ldr	r0, [r4, #4]
100010e4:	f7ff ffae 	bl	10001044 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100010e8:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100010ea:	23c0      	movs	r3, #192	; 0xc0
100010ec:	322c      	adds	r2, #44	; 0x2c
100010ee:	019b      	lsls	r3, r3, #6
100010f0:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
100010f2:	2600      	movs	r6, #0
100010f4:	2210      	movs	r2, #16
100010f6:	601a      	str	r2, [r3, #0]
100010f8:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
100010fa:	0020      	movs	r0, r4
100010fc:	696b      	ldr	r3, [r5, #20]
100010fe:	4798      	blx	r3
	return 0;
10001100:	0030      	movs	r0, r6
}
10001102:	b005      	add	sp, #20
10001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10001106:	2016      	movs	r0, #22
10001108:	4240      	negs	r0, r0
1000110a:	e7fa      	b.n	10001102 <uart_rpi_init+0x66>
1000110c:	00030100 	.word	0x00030100

10001110 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10001110:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10001112:	4b0a      	ldr	r3, [pc, #40]	; (1000113c <elapsed+0x2c>)
10001114:	4a0a      	ldr	r2, [pc, #40]	; (10001140 <elapsed+0x30>)
10001116:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001118:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
1000111a:	4d0a      	ldr	r5, [pc, #40]	; (10001144 <elapsed+0x34>)
1000111c:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000111e:	03c9      	lsls	r1, r1, #15
10001120:	d401      	bmi.n	10001126 <elapsed+0x16>
	    || (val1 < val2)) {
10001122:	42a0      	cmp	r0, r4
10001124:	d204      	bcs.n	10001130 <elapsed+0x20>
		overflow_cyc += last_load;
10001126:	6811      	ldr	r1, [r2, #0]
10001128:	6828      	ldr	r0, [r5, #0]
1000112a:	1809      	adds	r1, r1, r0
1000112c:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
1000112e:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10001130:	682b      	ldr	r3, [r5, #0]
10001132:	6810      	ldr	r0, [r2, #0]
10001134:	18c0      	adds	r0, r0, r3
10001136:	1b00      	subs	r0, r0, r4
}
10001138:	bd30      	pop	{r4, r5, pc}
1000113a:	46c0      	nop			; (mov r8, r8)
1000113c:	e000e010 	.word	0xe000e010
10001140:	20000140 	.word	0x20000140
10001144:	2000014c 	.word	0x2000014c

10001148 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10001148:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000114a:	4a09      	ldr	r2, [pc, #36]	; (10001170 <sys_clock_driver_init+0x28>)
1000114c:	6a13      	ldr	r3, [r2, #32]
1000114e:	021b      	lsls	r3, r3, #8
10001150:	0a1b      	lsrs	r3, r3, #8
10001152:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10001154:	4b07      	ldr	r3, [pc, #28]	; (10001174 <sys_clock_driver_init+0x2c>)
10001156:	4a08      	ldr	r2, [pc, #32]	; (10001178 <sys_clock_driver_init+0x30>)
10001158:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
1000115a:	4b08      	ldr	r3, [pc, #32]	; (1000117c <sys_clock_driver_init+0x34>)
1000115c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
1000115e:	4b08      	ldr	r3, [pc, #32]	; (10001180 <sys_clock_driver_init+0x38>)
10001160:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10001162:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10001164:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10001166:	6819      	ldr	r1, [r3, #0]
10001168:	430a      	orrs	r2, r1
1000116a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
1000116c:	4770      	bx	lr
1000116e:	46c0      	nop			; (mov r8, r8)
10001170:	e000ed00 	.word	0xe000ed00
10001174:	2000014c 	.word	0x2000014c
10001178:	000030d3 	.word	0x000030d3
1000117c:	20000140 	.word	0x20000140
10001180:	e000e010 	.word	0xe000e010

10001184 <sys_clock_isr>:
{
10001184:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10001186:	f7ff ffc3 	bl	10001110 <elapsed>
	cycle_count += overflow_cyc;
1000118a:	4b0b      	ldr	r3, [pc, #44]	; (100011b8 <sys_clock_isr+0x34>)
1000118c:	4a0b      	ldr	r2, [pc, #44]	; (100011bc <sys_clock_isr+0x38>)
1000118e:	6818      	ldr	r0, [r3, #0]
10001190:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10001192:	4c0b      	ldr	r4, [pc, #44]	; (100011c0 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10001194:	1840      	adds	r0, r0, r1
10001196:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10001198:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000119a:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
1000119c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000119e:	4909      	ldr	r1, [pc, #36]	; (100011c4 <sys_clock_isr+0x40>)
100011a0:	1b40      	subs	r0, r0, r5
100011a2:	f7ff f815 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100011a6:	4b07      	ldr	r3, [pc, #28]	; (100011c4 <sys_clock_isr+0x40>)
100011a8:	4343      	muls	r3, r0
100011aa:	195b      	adds	r3, r3, r5
100011ac:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
100011ae:	f000 ffef 	bl	10002190 <sys_clock_announce>
	z_arm_int_exit();
100011b2:	f7ff fe11 	bl	10000dd8 <z_arm_exc_exit>
}
100011b6:	bd70      	pop	{r4, r5, r6, pc}
100011b8:	20000140 	.word	0x20000140
100011bc:	20000148 	.word	0x20000148
100011c0:	20000144 	.word	0x20000144
100011c4:	000030d4 	.word	0x000030d4

100011c8 <sys_clock_set_timeout>:
{
100011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100011ca:	4d32      	ldr	r5, [pc, #200]	; (10001294 <sys_clock_set_timeout+0xcc>)
100011cc:	4f32      	ldr	r7, [pc, #200]	; (10001298 <sys_clock_set_timeout+0xd0>)
100011ce:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
100011d0:	2900      	cmp	r1, #0
100011d2:	d054      	beq.n	1000127e <sys_clock_set_timeout+0xb6>
100011d4:	1c43      	adds	r3, r0, #1
100011d6:	d108      	bne.n	100011ea <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100011d8:	2201      	movs	r2, #1
100011da:	682b      	ldr	r3, [r5, #0]
100011dc:	4393      	bics	r3, r2
100011de:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
100011e0:	23ff      	movs	r3, #255	; 0xff
100011e2:	061b      	lsls	r3, r3, #24
100011e4:	603b      	str	r3, [r7, #0]
}
100011e6:	b005      	add	sp, #20
100011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
100011ea:	683b      	ldr	r3, [r7, #0]
100011ec:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
100011ee:	2600      	movs	r6, #0
100011f0:	2801      	cmp	r0, #1
100011f2:	dd04      	ble.n	100011fe <sys_clock_set_timeout+0x36>
100011f4:	4b29      	ldr	r3, [pc, #164]	; (1000129c <sys_clock_set_timeout+0xd4>)
100011f6:	001e      	movs	r6, r3
100011f8:	4298      	cmp	r0, r3
100011fa:	dc00      	bgt.n	100011fe <sys_clock_set_timeout+0x36>
100011fc:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100011fe:	f3ef 8310 	mrs	r3, PRIMASK
10001202:	b672      	cpsid	i
10001204:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10001206:	f7ff ff83 	bl	10001110 <elapsed>
	overflow_cyc = 0U;
1000120a:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
1000120c:	68ab      	ldr	r3, [r5, #8]
1000120e:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10001210:	4b23      	ldr	r3, [pc, #140]	; (100012a0 <sys_clock_set_timeout+0xd8>)
10001212:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10001214:	4b23      	ldr	r3, [pc, #140]	; (100012a4 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10001216:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10001218:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
1000121a:	4b23      	ldr	r3, [pc, #140]	; (100012a8 <sys_clock_set_timeout+0xe0>)
1000121c:	681b      	ldr	r3, [r3, #0]
1000121e:	9300      	str	r3, [sp, #0]
10001220:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10001222:	4290      	cmp	r0, r2
10001224:	db31      	blt.n	1000128a <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10001226:	4b21      	ldr	r3, [pc, #132]	; (100012ac <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001228:	4a21      	ldr	r2, [pc, #132]	; (100012b0 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
1000122a:	435e      	muls	r6, r3
		delay += unannounced;
1000122c:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
1000122e:	0019      	movs	r1, r3
10001230:	1880      	adds	r0, r0, r2
10001232:	f7fe ffcd 	bl	100001d0 <__udivsi3>
		delay =
10001236:	4b1d      	ldr	r3, [pc, #116]	; (100012ac <sys_clock_set_timeout+0xe4>)
10001238:	4358      	muls	r0, r3
		delay -= unannounced;
1000123a:	9b00      	ldr	r3, [sp, #0]
1000123c:	1b1b      	subs	r3, r3, r4
1000123e:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
10001240:	2380      	movs	r3, #128	; 0x80
10001242:	00db      	lsls	r3, r3, #3
10001244:	4298      	cmp	r0, r3
10001246:	d923      	bls.n	10001290 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10001248:	4b1a      	ldr	r3, [pc, #104]	; (100012b4 <sys_clock_set_timeout+0xec>)
1000124a:	4298      	cmp	r0, r3
1000124c:	d820      	bhi.n	10001290 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
1000124e:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
10001250:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
10001252:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10001254:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10001256:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001258:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
1000125a:	9b02      	ldr	r3, [sp, #8]
1000125c:	9802      	ldr	r0, [sp, #8]
1000125e:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10001260:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10001262:	4288      	cmp	r0, r1
10001264:	d202      	bcs.n	1000126c <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10001266:	9a01      	ldr	r2, [sp, #4]
10001268:	189b      	adds	r3, r3, r2
1000126a:	191a      	adds	r2, r3, r4
1000126c:	4b0c      	ldr	r3, [pc, #48]	; (100012a0 <sys_clock_set_timeout+0xd8>)
1000126e:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10001270:	9b03      	ldr	r3, [sp, #12]
10001272:	2b00      	cmp	r3, #0
10001274:	d1b7      	bne.n	100011e6 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10001276:	b662      	cpsie	i
10001278:	f3bf 8f6f 	isb	sy
1000127c:	e7b3      	b.n	100011e6 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
1000127e:	683b      	ldr	r3, [r7, #0]
10001280:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10001282:	1c43      	adds	r3, r0, #1
10001284:	d1b3      	bne.n	100011ee <sys_clock_set_timeout+0x26>
10001286:	4805      	ldr	r0, [pc, #20]	; (1000129c <sys_clock_set_timeout+0xd4>)
10001288:	e7b8      	b.n	100011fc <sys_clock_set_timeout+0x34>
1000128a:	2080      	movs	r0, #128	; 0x80
1000128c:	00c0      	lsls	r0, r0, #3
1000128e:	e7de      	b.n	1000124e <sys_clock_set_timeout+0x86>
10001290:	0018      	movs	r0, r3
10001292:	e7dc      	b.n	1000124e <sys_clock_set_timeout+0x86>
10001294:	e000e010 	.word	0xe000e010
10001298:	2000014c 	.word	0x2000014c
1000129c:	0000053d 	.word	0x0000053d
100012a0:	20000148 	.word	0x20000148
100012a4:	20000140 	.word	0x20000140
100012a8:	20000144 	.word	0x20000144
100012ac:	000030d4 	.word	0x000030d4
100012b0:	000030d3 	.word	0x000030d3
100012b4:	00ffc684 	.word	0x00ffc684

100012b8 <sys_clock_elapsed>:
{
100012b8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100012ba:	f3ef 8410 	mrs	r4, PRIMASK
100012be:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100012c0:	f7ff ff26 	bl	10001110 <elapsed>
100012c4:	4b07      	ldr	r3, [pc, #28]	; (100012e4 <sys_clock_elapsed+0x2c>)
100012c6:	4a08      	ldr	r2, [pc, #32]	; (100012e8 <sys_clock_elapsed+0x30>)
100012c8:	681b      	ldr	r3, [r3, #0]
100012ca:	6812      	ldr	r2, [r2, #0]
100012cc:	1a9b      	subs	r3, r3, r2
100012ce:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100012d0:	2c00      	cmp	r4, #0
100012d2:	d102      	bne.n	100012da <sys_clock_elapsed+0x22>
	__asm__ volatile(
100012d4:	b662      	cpsie	i
100012d6:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100012da:	4904      	ldr	r1, [pc, #16]	; (100012ec <sys_clock_elapsed+0x34>)
100012dc:	f7fe ff78 	bl	100001d0 <__udivsi3>
}
100012e0:	bd10      	pop	{r4, pc}
100012e2:	46c0      	nop			; (mov r8, r8)
100012e4:	20000148 	.word	0x20000148
100012e8:	20000144 	.word	0x20000144
100012ec:	000030d4 	.word	0x000030d4

100012f0 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100012f2:	b085      	sub	sp, #20
100012f4:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100012f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012f8:	0005      	movs	r5, r0
100012fa:	000f      	movs	r7, r1
        return false;
100012fc:	2000      	movs	r0, #0
    if (freq > src_freq)
100012fe:	429a      	cmp	r2, r3
10001300:	d863      	bhi.n	100013ca <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001302:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001304:	0e1a      	lsrs	r2, r3, #24
10001306:	021b      	lsls	r3, r3, #8
10001308:	9203      	str	r2, [sp, #12]
1000130a:	9302      	str	r3, [sp, #8]
1000130c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000130e:	0003      	movs	r3, r0
10001310:	9903      	ldr	r1, [sp, #12]
10001312:	9802      	ldr	r0, [sp, #8]
10001314:	f7fe ffc2 	bl	1000029c <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001318:	436c      	muls	r4, r5
1000131a:	4b2d      	ldr	r3, [pc, #180]	; (100013d0 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000131c:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000131e:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001320:	6863      	ldr	r3, [r4, #4]
10001322:	4283      	cmp	r3, r0
10001324:	d200      	bcs.n	10001328 <clock_configure+0x38>
        clock->div = div;
10001326:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10001328:	1f2b      	subs	r3, r5, #4
1000132a:	b2db      	uxtb	r3, r3
1000132c:	9300      	str	r3, [sp, #0]
1000132e:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001330:	9a00      	ldr	r2, [sp, #0]
10001332:	019b      	lsls	r3, r3, #6
10001334:	4323      	orrs	r3, r4
10001336:	2a01      	cmp	r2, #1
10001338:	d81b      	bhi.n	10001372 <clock_configure+0x82>
1000133a:	2f01      	cmp	r7, #1
1000133c:	d119      	bne.n	10001372 <clock_configure+0x82>
1000133e:	2203      	movs	r2, #3
10001340:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10001342:	68a3      	ldr	r3, [r4, #8]
10001344:	423b      	tst	r3, r7
10001346:	d0fc      	beq.n	10001342 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001348:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000134a:	6823      	ldr	r3, [r4, #0]
1000134c:	0152      	lsls	r2, r2, #5
1000134e:	405a      	eors	r2, r3
10001350:	23e0      	movs	r3, #224	; 0xe0
10001352:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001354:	2380      	movs	r3, #128	; 0x80
10001356:	015b      	lsls	r3, r3, #5
10001358:	4323      	orrs	r3, r4
1000135a:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000135c:	2103      	movs	r1, #3
1000135e:	6822      	ldr	r2, [r4, #0]
10001360:	407a      	eors	r2, r7
10001362:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001364:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10001366:	2301      	movs	r3, #1
10001368:	40bb      	lsls	r3, r7
1000136a:	68a2      	ldr	r2, [r4, #8]
1000136c:	4213      	tst	r3, r2
1000136e:	d0fc      	beq.n	1000136a <clock_configure+0x7a>
10001370:	e01a      	b.n	100013a8 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001372:	2280      	movs	r2, #128	; 0x80
10001374:	0112      	lsls	r2, r2, #4
10001376:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10001378:	4b16      	ldr	r3, [pc, #88]	; (100013d4 <clock_configure+0xe4>)
1000137a:	00aa      	lsls	r2, r5, #2
1000137c:	58d1      	ldr	r1, [r2, r3]
1000137e:	2900      	cmp	r1, #0
10001380:	d005      	beq.n	1000138e <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001382:	6958      	ldr	r0, [r3, #20]
10001384:	f7fe ff24 	bl	100001d0 <__udivsi3>
10001388:	3001      	adds	r0, #1
            asm volatile (
1000138a:	3801      	subs	r0, #1
1000138c:	d1fd      	bne.n	1000138a <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
1000138e:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001390:	6823      	ldr	r3, [r4, #0]
10001392:	0152      	lsls	r2, r2, #5
10001394:	405a      	eors	r2, r3
10001396:	23e0      	movs	r3, #224	; 0xe0
10001398:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000139a:	2380      	movs	r3, #128	; 0x80
1000139c:	015b      	lsls	r3, r3, #5
1000139e:	4323      	orrs	r3, r4
100013a0:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
100013a2:	9a00      	ldr	r2, [sp, #0]
100013a4:	2a01      	cmp	r2, #1
100013a6:	d9d9      	bls.n	1000135c <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100013a8:	2380      	movs	r3, #128	; 0x80
100013aa:	2280      	movs	r2, #128	; 0x80
100013ac:	019b      	lsls	r3, r3, #6
100013ae:	4323      	orrs	r3, r4
100013b0:	0112      	lsls	r2, r2, #4
100013b2:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100013b4:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
100013b6:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100013b8:	0032      	movs	r2, r6
100013ba:	2300      	movs	r3, #0
100013bc:	9903      	ldr	r1, [sp, #12]
100013be:	f7fe ff6d 	bl	1000029c <__aeabi_uldivmod>
100013c2:	4c04      	ldr	r4, [pc, #16]	; (100013d4 <clock_configure+0xe4>)
100013c4:	00ad      	lsls	r5, r5, #2
100013c6:	5160      	str	r0, [r4, r5]
100013c8:	2001      	movs	r0, #1

    return true;
}
100013ca:	b005      	add	sp, #20
100013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100013ce:	46c0      	nop			; (mov r8, r8)
100013d0:	40008000 	.word	0x40008000
100013d4:	20000150 	.word	0x20000150

100013d8 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100013d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100013da:	200c      	movs	r0, #12
100013dc:	f000 f8de 	bl	1000159c <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100013e0:	f000 f8e4 	bl	100015ac <running_on_fpga>
100013e4:	2800      	cmp	r0, #0
100013e6:	d00a      	beq.n	100013fe <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100013e8:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100013ea:	4a2c      	ldr	r2, [pc, #176]	; (1000149c <clocks_init+0xc4>)
100013ec:	482c      	ldr	r0, [pc, #176]	; (100014a0 <clocks_init+0xc8>)
100013ee:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100013f0:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100013f2:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100013f4:	2b0a      	cmp	r3, #10
100013f6:	d1fa      	bne.n	100013ee <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100013f8:	4b2a      	ldr	r3, [pc, #168]	; (100014a4 <clocks_init+0xcc>)
100013fa:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100013fc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
100013fe:	4d2a      	ldr	r5, [pc, #168]	; (100014a8 <clocks_init+0xd0>)
10001400:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10001402:	f000 f8b7 	bl	10001574 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001406:	2201      	movs	r2, #1
10001408:	4b28      	ldr	r3, [pc, #160]	; (100014ac <clocks_init+0xd4>)
1000140a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
1000140c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000140e:	2b01      	cmp	r3, #1
10001410:	d1fc      	bne.n	1000140c <clocks_init+0x34>
10001412:	2203      	movs	r2, #3
10001414:	4b26      	ldr	r3, [pc, #152]	; (100014b0 <clocks_init+0xd8>)
10001416:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001418:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000141a:	2c01      	cmp	r4, #1
1000141c:	d1fc      	bne.n	10001418 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000141e:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10001420:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10001422:	0021      	movs	r1, r4
10001424:	9500      	str	r5, [sp, #0]
10001426:	2306      	movs	r3, #6
10001428:	4a22      	ldr	r2, [pc, #136]	; (100014b4 <clocks_init+0xdc>)
1000142a:	4823      	ldr	r0, [pc, #140]	; (100014b8 <clocks_init+0xe0>)
1000142c:	f000 f854 	bl	100014d8 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10001430:	0033      	movs	r3, r6
10001432:	0021      	movs	r1, r4
10001434:	4a21      	ldr	r2, [pc, #132]	; (100014bc <clocks_init+0xe4>)
10001436:	4822      	ldr	r0, [pc, #136]	; (100014c0 <clocks_init+0xe8>)
10001438:	9600      	str	r6, [sp, #0]
1000143a:	f000 f84d 	bl	100014d8 <pll_init>
    clock_configure(clk_ref,
1000143e:	4b21      	ldr	r3, [pc, #132]	; (100014c4 <clocks_init+0xec>)
10001440:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10001442:	4d21      	ldr	r5, [pc, #132]	; (100014c8 <clocks_init+0xf0>)
    clock_configure(clk_ref,
10001444:	9300      	str	r3, [sp, #0]
10001446:	2200      	movs	r2, #0
10001448:	2004      	movs	r0, #4
1000144a:	f7ff ff51 	bl	100012f0 <clock_configure>
    clock_configure(clk_sys,
1000144e:	002b      	movs	r3, r5
10001450:	0021      	movs	r1, r4
10001452:	2200      	movs	r2, #0
10001454:	0030      	movs	r0, r6
10001456:	9500      	str	r5, [sp, #0]
10001458:	f7ff ff4a 	bl	100012f0 <clock_configure>
    clock_configure(clk_usb,
1000145c:	2200      	movs	r2, #0
1000145e:	4c10      	ldr	r4, [pc, #64]	; (100014a0 <clocks_init+0xc8>)
10001460:	0011      	movs	r1, r2
10001462:	0023      	movs	r3, r4
10001464:	9400      	str	r4, [sp, #0]
10001466:	2007      	movs	r0, #7
10001468:	f7ff ff42 	bl	100012f0 <clock_configure>
    clock_configure(clk_adc,
1000146c:	2200      	movs	r2, #0
1000146e:	0023      	movs	r3, r4
10001470:	0011      	movs	r1, r2
10001472:	9400      	str	r4, [sp, #0]
10001474:	2008      	movs	r0, #8
10001476:	f7ff ff3b 	bl	100012f0 <clock_configure>
    clock_configure(clk_rtc,
1000147a:	2200      	movs	r2, #0
1000147c:	4b09      	ldr	r3, [pc, #36]	; (100014a4 <clocks_init+0xcc>)
1000147e:	0011      	movs	r1, r2
10001480:	9300      	str	r3, [sp, #0]
10001482:	2009      	movs	r0, #9
10001484:	0023      	movs	r3, r4
10001486:	f7ff ff33 	bl	100012f0 <clock_configure>
    clock_configure(clk_peri,
1000148a:	2200      	movs	r2, #0
1000148c:	002b      	movs	r3, r5
1000148e:	0011      	movs	r1, r2
10001490:	9500      	str	r5, [sp, #0]
10001492:	2006      	movs	r0, #6
10001494:	f7ff ff2c 	bl	100012f0 <clock_configure>
10001498:	e7b0      	b.n	100013fc <clocks_init+0x24>
1000149a:	46c0      	nop			; (mov r8, r8)
1000149c:	20000150 	.word	0x20000150
100014a0:	02dc6c00 	.word	0x02dc6c00
100014a4:	0000b71b 	.word	0x0000b71b
100014a8:	40008000 	.word	0x40008000
100014ac:	4000b03c 	.word	0x4000b03c
100014b0:	4000b030 	.word	0x4000b030
100014b4:	59682f00 	.word	0x59682f00
100014b8:	40028000 	.word	0x40028000
100014bc:	47868c00 	.word	0x47868c00
100014c0:	4002c000 	.word	0x4002c000
100014c4:	00b71b00 	.word	0x00b71b00
100014c8:	07735940 	.word	0x07735940

100014cc <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100014cc:	4b01      	ldr	r3, [pc, #4]	; (100014d4 <clock_get_hz+0x8>)
100014ce:	0080      	lsls	r0, r0, #2
100014d0:	58c0      	ldr	r0, [r0, r3]
}
100014d2:	4770      	bx	lr
100014d4:	20000150 	.word	0x20000150

100014d8 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100014da:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100014dc:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100014de:	0017      	movs	r7, r2
100014e0:	001e      	movs	r6, r3
100014e2:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100014e4:	f7fe fe74 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100014e8:	491d      	ldr	r1, [pc, #116]	; (10001560 <pll_init+0x88>)
100014ea:	4341      	muls	r1, r0
100014ec:	0038      	movs	r0, r7
100014ee:	f7fe fe6f 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100014f2:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100014f4:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100014f6:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100014f8:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100014fa:	6822      	ldr	r2, [r4, #0]
100014fc:	2a00      	cmp	r2, #0
100014fe:	da0f      	bge.n	10001520 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001500:	213f      	movs	r1, #63	; 0x3f
10001502:	6822      	ldr	r2, [r4, #0]
10001504:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001506:	42aa      	cmp	r2, r5
10001508:	d10a      	bne.n	10001520 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000150a:	68a2      	ldr	r2, [r4, #8]
1000150c:	0512      	lsls	r2, r2, #20
1000150e:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001510:	4282      	cmp	r2, r0
10001512:	d105      	bne.n	10001520 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10001514:	21ee      	movs	r1, #238	; 0xee
10001516:	68e2      	ldr	r2, [r4, #12]
10001518:	02c9      	lsls	r1, r1, #11
1000151a:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000151c:	429a      	cmp	r2, r3
1000151e:	d01b      	beq.n	10001558 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001520:	4a10      	ldr	r2, [pc, #64]	; (10001564 <pll_init+0x8c>)
10001522:	4294      	cmp	r4, r2
10001524:	d019      	beq.n	1000155a <pll_init+0x82>
10001526:	2280      	movs	r2, #128	; 0x80
10001528:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000152a:	490f      	ldr	r1, [pc, #60]	; (10001568 <pll_init+0x90>)
1000152c:	4e0f      	ldr	r6, [pc, #60]	; (1000156c <pll_init+0x94>)
1000152e:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001530:	490f      	ldr	r1, [pc, #60]	; (10001570 <pll_init+0x98>)
10001532:	600a      	str	r2, [r1, #0]
10001534:	0017      	movs	r7, r2
10001536:	68b1      	ldr	r1, [r6, #8]
10001538:	438f      	bics	r7, r1
1000153a:	d1fb      	bne.n	10001534 <pll_init+0x5c>
1000153c:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000153e:	1d21      	adds	r1, r4, #4
10001540:	0192      	lsls	r2, r2, #6
10001542:	430a      	orrs	r2, r1
10001544:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10001546:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10001548:	60a0      	str	r0, [r4, #8]
1000154a:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000154c:	6821      	ldr	r1, [r4, #0]
1000154e:	2900      	cmp	r1, #0
10001550:	dafc      	bge.n	1000154c <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
10001552:	60e3      	str	r3, [r4, #12]
10001554:	2308      	movs	r3, #8
10001556:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000155a:	2280      	movs	r2, #128	; 0x80
1000155c:	0192      	lsls	r2, r2, #6
1000155e:	e7e4      	b.n	1000152a <pll_init+0x52>
10001560:	000f4240 	.word	0x000f4240
10001564:	4002c000 	.word	0x4002c000
10001568:	4000e000 	.word	0x4000e000
1000156c:	4000c000 	.word	0x4000c000
10001570:	4000f000 	.word	0x4000f000

10001574 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001574:	22aa      	movs	r2, #170	; 0xaa
10001576:	4b06      	ldr	r3, [pc, #24]	; (10001590 <xosc_init+0x1c>)
10001578:	0112      	lsls	r2, r2, #4
1000157a:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000157c:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000157e:	4905      	ldr	r1, [pc, #20]	; (10001594 <xosc_init+0x20>)
10001580:	60da      	str	r2, [r3, #12]
10001582:	4a05      	ldr	r2, [pc, #20]	; (10001598 <xosc_init+0x24>)
10001584:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001586:	685a      	ldr	r2, [r3, #4]
10001588:	2a00      	cmp	r2, #0
1000158a:	dafc      	bge.n	10001586 <xosc_init+0x12>
}
1000158c:	4770      	bx	lr
1000158e:	46c0      	nop			; (mov r8, r8)
10001590:	40024000 	.word	0x40024000
10001594:	00fab000 	.word	0x00fab000
10001598:	40026000 	.word	0x40026000

1000159c <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
1000159c:	2380      	movs	r3, #128	; 0x80
1000159e:	4a02      	ldr	r2, [pc, #8]	; (100015a8 <watchdog_start_tick+0xc>)
100015a0:	009b      	lsls	r3, r3, #2
100015a2:	4303      	orrs	r3, r0
100015a4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100015a6:	4770      	bx	lr
100015a8:	40058000 	.word	0x40058000

100015ac <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100015ac:	4b02      	ldr	r3, [pc, #8]	; (100015b8 <running_on_fpga+0xc>)
100015ae:	6818      	ldr	r0, [r3, #0]
100015b0:	0780      	lsls	r0, r0, #30
100015b2:	0fc0      	lsrs	r0, r0, #31
}
100015b4:	4770      	bx	lr
100015b6:	46c0      	nop			; (mov r8, r8)
100015b8:	4006c000 	.word	0x4006c000

100015bc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100015bc:	4b08      	ldr	r3, [pc, #32]	; (100015e0 <gpio_set_function+0x24>)
100015be:	0082      	lsls	r2, r0, #2
100015c0:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015c2:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100015c4:	b510      	push	{r4, lr}
100015c6:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100015c8:	00c0      	lsls	r0, r0, #3
100015ca:	4063      	eors	r3, r4
100015cc:	24c0      	movs	r4, #192	; 0xc0
100015ce:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015d0:	2480      	movs	r4, #128	; 0x80
100015d2:	0164      	lsls	r4, r4, #5
100015d4:	4322      	orrs	r2, r4
100015d6:	6013      	str	r3, [r2, #0]
100015d8:	4b02      	ldr	r3, [pc, #8]	; (100015e4 <gpio_set_function+0x28>)
100015da:	18c0      	adds	r0, r0, r3
100015dc:	6041      	str	r1, [r0, #4]
}
100015de:	bd10      	pop	{r4, pc}
100015e0:	4001c004 	.word	0x4001c004
100015e4:	40014000 	.word	0x40014000

100015e8 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
100015e8:	4b07      	ldr	r3, [pc, #28]	; (10001608 <gpio_set_pulls+0x20>)
100015ea:	0080      	lsls	r0, r0, #2
100015ec:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015ee:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100015f0:	00c9      	lsls	r1, r1, #3
100015f2:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100015f4:	430a      	orrs	r2, r1
100015f6:	405a      	eors	r2, r3
100015f8:	230c      	movs	r3, #12
100015fa:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015fc:	2380      	movs	r3, #128	; 0x80
100015fe:	015b      	lsls	r3, r3, #5
10001600:	4303      	orrs	r3, r0
10001602:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001604:	4770      	bx	lr
10001606:	46c0      	nop			; (mov r8, r8)
10001608:	4001c004 	.word	0x4001c004

1000160c <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
1000160c:	4b05      	ldr	r3, [pc, #20]	; (10001624 <gpio_set_input_hysteresis_enabled+0x18>)
1000160e:	0080      	lsls	r0, r0, #2
10001610:	18c0      	adds	r0, r0, r3
10001612:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001614:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001616:	2900      	cmp	r1, #0
10001618:	d100      	bne.n	1000161c <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000161a:	23c0      	movs	r3, #192	; 0xc0
1000161c:	019b      	lsls	r3, r3, #6
1000161e:	4303      	orrs	r3, r0
10001620:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10001622:	4770      	bx	lr
10001624:	4001c004 	.word	0x4001c004

10001628 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001628:	4b05      	ldr	r3, [pc, #20]	; (10001640 <gpio_set_slew_rate+0x18>)
1000162a:	0080      	lsls	r0, r0, #2
1000162c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000162e:	6803      	ldr	r3, [r0, #0]
10001630:	4059      	eors	r1, r3
10001632:	2301      	movs	r3, #1
10001634:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001636:	2380      	movs	r3, #128	; 0x80
10001638:	015b      	lsls	r3, r3, #5
1000163a:	4303      	orrs	r3, r0
1000163c:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000163e:	4770      	bx	lr
10001640:	4001c004 	.word	0x4001c004

10001644 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001644:	4b06      	ldr	r3, [pc, #24]	; (10001660 <gpio_set_drive_strength+0x1c>)
10001646:	0080      	lsls	r0, r0, #2
10001648:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000164a:	6803      	ldr	r3, [r0, #0]
1000164c:	0109      	lsls	r1, r1, #4
1000164e:	4059      	eors	r1, r3
10001650:	2330      	movs	r3, #48	; 0x30
10001652:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001654:	2380      	movs	r3, #128	; 0x80
10001656:	015b      	lsls	r3, r3, #5
10001658:	4303      	orrs	r3, r0
1000165a:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
1000165c:	4770      	bx	lr
1000165e:	46c0      	nop			; (mov r8, r8)
10001660:	4001c004 	.word	0x4001c004

10001664 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
10001664:	2207      	movs	r2, #7
10001666:	08c3      	lsrs	r3, r0, #3
10001668:	4010      	ands	r0, r2
1000166a:	0080      	lsls	r0, r0, #2
1000166c:	4081      	lsls	r1, r0
1000166e:	4a02      	ldr	r2, [pc, #8]	; (10001678 <gpio_acknowledge_irq+0x14>)
10001670:	333c      	adds	r3, #60	; 0x3c
10001672:	009b      	lsls	r3, r3, #2
10001674:	5099      	str	r1, [r3, r2]
}
10001676:	4770      	bx	lr
10001678:	40014000 	.word	0x40014000

1000167c <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000167e:	23d0      	movs	r3, #208	; 0xd0
10001680:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001682:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001684:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001686:	4263      	negs	r3, r4
10001688:	415c      	adcs	r4, r3
1000168a:	232f      	movs	r3, #47	; 0x2f
1000168c:	4264      	negs	r4, r4
1000168e:	439c      	bics	r4, r3
10001690:	4b0a      	ldr	r3, [pc, #40]	; (100016bc <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001692:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001694:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001696:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10001698:	f7ff ffe4 	bl	10001664 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
1000169c:	2307      	movs	r3, #7
1000169e:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100016a0:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
100016a2:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100016a4:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
100016a6:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100016a8:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016aa:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100016ac:	2e00      	cmp	r6, #0
100016ae:	d100      	bne.n	100016b2 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016b0:	23c0      	movs	r3, #192	; 0xc0
100016b2:	019b      	lsls	r3, r3, #6
100016b4:	4323      	orrs	r3, r4
100016b6:	601f      	str	r7, [r3, #0]
}
100016b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100016ba:	46c0      	nop			; (mov r8, r8)
100016bc:	40014130 	.word	0x40014130

100016c0 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100016c0:	4b05      	ldr	r3, [pc, #20]	; (100016d8 <gpio_set_input_enabled+0x18>)
100016c2:	0080      	lsls	r0, r0, #2
100016c4:	18c0      	adds	r0, r0, r3
100016c6:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016c8:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100016ca:	2900      	cmp	r1, #0
100016cc:	d100      	bne.n	100016d0 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016ce:	23c0      	movs	r3, #192	; 0xc0
100016d0:	019b      	lsls	r3, r3, #6
100016d2:	4303      	orrs	r3, r0
100016d4:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100016d6:	4770      	bx	lr
100016d8:	4001c004 	.word	0x4001c004

100016dc <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100016dc:	b570      	push	{r4, r5, r6, lr}
100016de:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100016e0:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100016e2:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100016e4:	f7ff fef2 	bl	100014cc <clock_get_hz>
100016e8:	0021      	movs	r1, r4
100016ea:	00c0      	lsls	r0, r0, #3
100016ec:	f7fe fd70 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100016f0:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100016f2:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100016f4:	d007      	beq.n	10001706 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100016f6:	4b0e      	ldr	r3, [pc, #56]	; (10001730 <uart_set_baudrate+0x54>)
100016f8:	429d      	cmp	r5, r3
100016fa:	d815      	bhi.n	10001728 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100016fc:	237f      	movs	r3, #127	; 0x7f
100016fe:	4018      	ands	r0, r3
10001700:	1900      	adds	r0, r0, r4
10001702:	002c      	movs	r4, r5
10001704:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001706:	2380      	movs	r3, #128	; 0x80
10001708:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
1000170a:	6274      	str	r4, [r6, #36]	; 0x24
1000170c:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
1000170e:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001710:	362c      	adds	r6, #44	; 0x2c
10001712:	4333      	orrs	r3, r6
10001714:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001716:	2006      	movs	r0, #6
10001718:	f7ff fed8 	bl	100014cc <clock_get_hz>
1000171c:	01a1      	lsls	r1, r4, #6
1000171e:	1949      	adds	r1, r1, r5
10001720:	0080      	lsls	r0, r0, #2
10001722:	f7fe fd55 	bl	100001d0 <__udivsi3>
}
10001726:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001728:	2500      	movs	r5, #0
        baud_ibrd = 65535;
1000172a:	4c02      	ldr	r4, [pc, #8]	; (10001734 <uart_set_baudrate+0x58>)
1000172c:	e7eb      	b.n	10001706 <uart_set_baudrate+0x2a>
1000172e:	46c0      	nop			; (mov r8, r8)
10001730:	0000fffe 	.word	0x0000fffe
10001734:	0000ffff 	.word	0x0000ffff

10001738 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001738:	b570      	push	{r4, r5, r6, lr}
1000173a:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
1000173c:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000173e:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10001740:	f7ff fec4 	bl	100014cc <clock_get_hz>
10001744:	2800      	cmp	r0, #0
10001746:	d02e      	beq.n	100017a6 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001748:	4b19      	ldr	r3, [pc, #100]	; (100017b0 <uart_init+0x78>)
1000174a:	429c      	cmp	r4, r3
1000174c:	d02c      	beq.n	100017a8 <uart_init+0x70>
1000174e:	2380      	movs	r3, #128	; 0x80
10001750:	03db      	lsls	r3, r3, #15
10001752:	4a18      	ldr	r2, [pc, #96]	; (100017b4 <uart_init+0x7c>)
10001754:	4918      	ldr	r1, [pc, #96]	; (100017b8 <uart_init+0x80>)
10001756:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001758:	4a18      	ldr	r2, [pc, #96]	; (100017bc <uart_init+0x84>)
1000175a:	6013      	str	r3, [r2, #0]
1000175c:	0018      	movs	r0, r3
1000175e:	688a      	ldr	r2, [r1, #8]
10001760:	4390      	bics	r0, r2
10001762:	d1fb      	bne.n	1000175c <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10001764:	4b16      	ldr	r3, [pc, #88]	; (100017c0 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001766:	4a17      	ldr	r2, [pc, #92]	; (100017c4 <uart_init+0x8c>)
10001768:	18e3      	adds	r3, r4, r3
1000176a:	4259      	negs	r1, r3
1000176c:	414b      	adcs	r3, r1
1000176e:	2180      	movs	r1, #128	; 0x80
10001770:	005b      	lsls	r3, r3, #1
10001772:	0049      	lsls	r1, r1, #1
10001774:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10001776:	0020      	movs	r0, r4
10001778:	0029      	movs	r1, r5
1000177a:	f7ff ffaf 	bl	100016dc <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000177e:	2360      	movs	r3, #96	; 0x60
10001780:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001782:	0021      	movs	r1, r4
10001784:	4053      	eors	r3, r2
10001786:	226e      	movs	r2, #110	; 0x6e
10001788:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000178a:	2280      	movs	r2, #128	; 0x80
1000178c:	312c      	adds	r1, #44	; 0x2c
1000178e:	0152      	lsls	r2, r2, #5
10001790:	430a      	orrs	r2, r1
10001792:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001794:	4b0c      	ldr	r3, [pc, #48]	; (100017c8 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001796:	2210      	movs	r2, #16
10001798:	6323      	str	r3, [r4, #48]	; 0x30
1000179a:	2380      	movs	r3, #128	; 0x80
1000179c:	019b      	lsls	r3, r3, #6
1000179e:	430b      	orrs	r3, r1
100017a0:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
100017a2:	2303      	movs	r3, #3
100017a4:	64a3      	str	r3, [r4, #72]	; 0x48
}
100017a6:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100017a8:	2380      	movs	r3, #128	; 0x80
100017aa:	041b      	lsls	r3, r3, #16
100017ac:	e7d1      	b.n	10001752 <uart_init+0x1a>
100017ae:	46c0      	nop			; (mov r8, r8)
100017b0:	40038000 	.word	0x40038000
100017b4:	4000e000 	.word	0x4000e000
100017b8:	4000c000 	.word	0x4000c000
100017bc:	4000f000 	.word	0x4000f000
100017c0:	bffc8000 	.word	0xbffc8000
100017c4:	200001a8 	.word	0x200001a8
100017c8:	00000301 	.word	0x00000301

100017cc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100017cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100017ce:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100017d0:	4e10      	ldr	r6, [pc, #64]	; (10001814 <z_sys_init_run_level+0x48>)
100017d2:	0083      	lsls	r3, r0, #2
100017d4:	3001      	adds	r0, #1
100017d6:	599c      	ldr	r4, [r3, r6]
100017d8:	0083      	lsls	r3, r0, #2
100017da:	9301      	str	r3, [sp, #4]
100017dc:	9b01      	ldr	r3, [sp, #4]
100017de:	58f3      	ldr	r3, [r6, r3]
100017e0:	42a3      	cmp	r3, r4
100017e2:	d800      	bhi.n	100017e6 <z_sys_init_run_level+0x1a>
		}
	}
}
100017e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100017e6:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
100017e8:	6823      	ldr	r3, [r4, #0]
100017ea:	0028      	movs	r0, r5
100017ec:	4798      	blx	r3
		if (dev != NULL) {
100017ee:	2d00      	cmp	r5, #0
100017f0:	d00d      	beq.n	1000180e <z_sys_init_run_level+0x42>
			if (rc != 0) {
100017f2:	2800      	cmp	r0, #0
100017f4:	d007      	beq.n	10001806 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
100017f6:	17c2      	asrs	r2, r0, #31
100017f8:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
100017fa:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
100017fc:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
100017fe:	28ff      	cmp	r0, #255	; 0xff
10001800:	dd00      	ble.n	10001804 <z_sys_init_run_level+0x38>
10001802:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
10001804:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001806:	68ea      	ldr	r2, [r5, #12]
10001808:	7853      	ldrb	r3, [r2, #1]
1000180a:	433b      	orrs	r3, r7
1000180c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
1000180e:	3408      	adds	r4, #8
10001810:	e7e4      	b.n	100017dc <z_sys_init_run_level+0x10>
10001812:	46c0      	nop			; (mov r8, r8)
10001814:	10002d30 	.word	0x10002d30

10001818 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001818:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000181a:	2401      	movs	r4, #1
1000181c:	4b09      	ldr	r3, [pc, #36]	; (10001844 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000181e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10001820:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10001822:	f7ff ffd3 	bl	100017cc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001826:	f000 fd37 	bl	10002298 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
1000182a:	2004      	movs	r0, #4
1000182c:	f7ff ffce 	bl	100017cc <z_sys_init_run_level>

	z_init_static_threads();
10001830:	f000 f8ce 	bl	100019d0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10001834:	f7fe fe08 	bl	10000448 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001838:	4a03      	ldr	r2, [pc, #12]	; (10001848 <bg_thread_main+0x30>)
1000183a:	7b13      	ldrb	r3, [r2, #12]
1000183c:	43a3      	bics	r3, r4
1000183e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10001840:	bd10      	pop	{r4, pc}
10001842:	46c0      	nop			; (mov r8, r8)
10001844:	200001ac 	.word	0x200001ac
10001848:	20000098 	.word	0x20000098

1000184c <z_bss_zero>:
{
1000184c:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
1000184e:	4a03      	ldr	r2, [pc, #12]	; (1000185c <z_bss_zero+0x10>)
10001850:	4803      	ldr	r0, [pc, #12]	; (10001860 <z_bss_zero+0x14>)
10001852:	2100      	movs	r1, #0
10001854:	1a12      	subs	r2, r2, r0
10001856:	f001 f8c7 	bl	100029e8 <z_early_memset>
}
1000185a:	bd10      	pop	{r4, pc}
1000185c:	200001b0 	.word	0x200001b0
10001860:	20000028 	.word	0x20000028

10001864 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001864:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001866:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10001868:	2501      	movs	r5, #1
{
1000186a:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
1000186c:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000186e:	0201      	lsls	r1, r0, #8
10001870:	4811      	ldr	r0, [pc, #68]	; (100018b8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10001872:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10001874:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10001876:	2000      	movs	r0, #0
{
10001878:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
1000187a:	9504      	str	r5, [sp, #16]
1000187c:	350e      	adds	r5, #14
1000187e:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001880:	3505      	adds	r5, #5
10001882:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10001884:	4b0d      	ldr	r3, [pc, #52]	; (100018bc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10001886:	9005      	str	r0, [sp, #20]
10001888:	9002      	str	r0, [sp, #8]
1000188a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000188c:	480c      	ldr	r0, [pc, #48]	; (100018c0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000188e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001890:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10001892:	4b0c      	ldr	r3, [pc, #48]	; (100018c4 <z_init_cpu+0x60>)
10001894:	0030      	movs	r0, r6
10001896:	9500      	str	r5, [sp, #0]
10001898:	0052      	lsls	r2, r2, #1
1000189a:	f000 f86f 	bl	1000197c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000189e:	2204      	movs	r2, #4
100018a0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
100018a2:	742c      	strb	r4, [r5, #16]
100018a4:	4393      	bics	r3, r2
100018a6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
100018a8:	3401      	adds	r4, #1
100018aa:	4b07      	ldr	r3, [pc, #28]	; (100018c8 <z_init_cpu+0x64>)
100018ac:	02e4      	lsls	r4, r4, #11
100018ae:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100018b0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100018b2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100018b4:	b006      	add	sp, #24
100018b6:	bd70      	pop	{r4, r5, r6, pc}
100018b8:	200009b0 	.word	0x200009b0
100018bc:	20000028 	.word	0x20000028
100018c0:	20000178 	.word	0x20000178
100018c4:	100029f9 	.word	0x100029f9
100018c8:	200001b0 	.word	0x200001b0

100018cc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
100018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100018ce:	2000      	movs	r0, #0
{
100018d0:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100018d2:	f7ff ff7b 	bl	100017cc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100018d6:	4b21      	ldr	r3, [pc, #132]	; (1000195c <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100018d8:	f383 8808 	msr	MSP, r3
100018dc:	4920      	ldr	r1, [pc, #128]	; (10001960 <z_cstart+0x94>)
100018de:	4b21      	ldr	r3, [pc, #132]	; (10001964 <z_cstart+0x98>)
100018e0:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
100018e2:	2500      	movs	r5, #0
100018e4:	401a      	ands	r2, r3
100018e6:	23e0      	movs	r3, #224	; 0xe0
100018e8:	041b      	lsls	r3, r3, #16
100018ea:	4313      	orrs	r3, r2
100018ec:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100018ee:	f000 fd6d 	bl	100023cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
100018f2:	f7ff f981 	bl	10000bf8 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
100018f6:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100018f8:	4e1b      	ldr	r6, [pc, #108]	; (10001968 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
100018fa:	ab06      	add	r3, sp, #24
100018fc:	32ff      	adds	r2, #255	; 0xff
100018fe:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001900:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001902:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001904:	f001 f845 	bl	10002992 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10001908:	2001      	movs	r0, #1
1000190a:	f7ff ff5f 	bl	100017cc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
1000190e:	2002      	movs	r0, #2
10001910:	f7ff ff5c 	bl	100017cc <z_sys_init_run_level>
	z_sched_init();
10001914:	f000 fa60 	bl	10001dd8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001918:	4c14      	ldr	r4, [pc, #80]	; (1000196c <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000191a:	4b15      	ldr	r3, [pc, #84]	; (10001970 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
1000191c:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000191e:	2280      	movs	r2, #128	; 0x80
10001920:	9305      	str	r3, [sp, #20]
10001922:	2301      	movs	r3, #1
10001924:	4e13      	ldr	r6, [pc, #76]	; (10001974 <z_cstart+0xa8>)
10001926:	4914      	ldr	r1, [pc, #80]	; (10001978 <z_cstart+0xac>)
10001928:	9304      	str	r3, [sp, #16]
1000192a:	00d2      	lsls	r2, r2, #3
1000192c:	0033      	movs	r3, r6
1000192e:	0020      	movs	r0, r4
10001930:	9503      	str	r5, [sp, #12]
10001932:	9502      	str	r5, [sp, #8]
10001934:	9501      	str	r5, [sp, #4]
10001936:	9500      	str	r5, [sp, #0]
10001938:	f000 f820 	bl	1000197c <z_setup_new_thread>
1000193c:	2204      	movs	r2, #4
1000193e:	0007      	movs	r7, r0
10001940:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10001942:	0020      	movs	r0, r4
10001944:	4393      	bics	r3, r2
10001946:	7363      	strb	r3, [r4, #13]
10001948:	f001 f870 	bl	10002a2c <z_ready_thread>
	z_init_cpu(0);
1000194c:	0028      	movs	r0, r5
1000194e:	f7ff ff89 	bl	10001864 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001952:	0032      	movs	r2, r6
10001954:	0039      	movs	r1, r7
10001956:	0020      	movs	r0, r4
10001958:	f7ff fa1a 	bl	10000d90 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
1000195c:	200009b0 	.word	0x200009b0
10001960:	e000ed00 	.word	0xe000ed00
10001964:	ff00ffff 	.word	0xff00ffff
10001968:	20000178 	.word	0x20000178
1000196c:	20000098 	.word	0x20000098
10001970:	10002d9c 	.word	0x10002d9c
10001974:	10001819 	.word	0x10001819
10001978:	20000ab0 	.word	0x20000ab0

1000197c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
1000197c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1000197e:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001980:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001982:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001984:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001986:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001988:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
1000198a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
1000198c:	2004      	movs	r0, #4
1000198e:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10001990:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001992:	3207      	adds	r2, #7
	thread_base->prio = priority;
10001994:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001996:	2007      	movs	r0, #7
10001998:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
1000199a:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000199c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
1000199e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
100019a0:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
100019a2:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
100019a4:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100019a6:	9202      	str	r2, [sp, #8]
100019a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100019aa:	0020      	movs	r0, r4
100019ac:	9201      	str	r2, [sp, #4]
100019ae:	9a08      	ldr	r2, [sp, #32]
100019b0:	9200      	str	r2, [sp, #0]
100019b2:	002a      	movs	r2, r5
100019b4:	f7ff f9d6 	bl	10000d64 <arch_new_thread>
	if (!_current) {
100019b8:	4b04      	ldr	r3, [pc, #16]	; (100019cc <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
100019ba:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
100019bc:	689b      	ldr	r3, [r3, #8]
100019be:	42b3      	cmp	r3, r6
100019c0:	d000      	beq.n	100019c4 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
100019c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
100019c4:	0028      	movs	r0, r5
100019c6:	6663      	str	r3, [r4, #100]	; 0x64
100019c8:	b004      	add	sp, #16
100019ca:	bd70      	pop	{r4, r5, r6, pc}
100019cc:	20000178 	.word	0x20000178

100019d0 <z_init_static_threads>:
{
100019d0:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100019d2:	4c20      	ldr	r4, [pc, #128]	; (10001a54 <z_init_static_threads+0x84>)
{
100019d4:	b086      	sub	sp, #24
100019d6:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
100019d8:	4d1f      	ldr	r5, [pc, #124]	; (10001a58 <z_init_static_threads+0x88>)
100019da:	42ac      	cmp	r4, r5
100019dc:	d308      	bcc.n	100019f0 <z_init_static_threads+0x20>
	k_sched_lock();
100019de:	f000 f9d5 	bl	10001d8c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
100019e2:	0034      	movs	r4, r6
100019e4:	42ac      	cmp	r4, r5
100019e6:	d319      	bcc.n	10001a1c <z_init_static_threads+0x4c>
	k_sched_unlock();
100019e8:	f000 f9e0 	bl	10001dac <k_sched_unlock>
}
100019ec:	b006      	add	sp, #24
100019ee:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
100019f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100019f2:	9305      	str	r3, [sp, #20]
100019f4:	6a23      	ldr	r3, [r4, #32]
100019f6:	9304      	str	r3, [sp, #16]
100019f8:	69e3      	ldr	r3, [r4, #28]
100019fa:	9303      	str	r3, [sp, #12]
100019fc:	69a3      	ldr	r3, [r4, #24]
100019fe:	9302      	str	r3, [sp, #8]
10001a00:	6963      	ldr	r3, [r4, #20]
10001a02:	9301      	str	r3, [sp, #4]
10001a04:	6923      	ldr	r3, [r4, #16]
10001a06:	9300      	str	r3, [sp, #0]
10001a08:	68e3      	ldr	r3, [r4, #12]
10001a0a:	68a2      	ldr	r2, [r4, #8]
10001a0c:	6861      	ldr	r1, [r4, #4]
10001a0e:	6820      	ldr	r0, [r4, #0]
10001a10:	f7ff ffb4 	bl	1000197c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001a14:	6823      	ldr	r3, [r4, #0]
10001a16:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001a18:	342c      	adds	r4, #44	; 0x2c
10001a1a:	e7dd      	b.n	100019d8 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
10001a1e:	1c5a      	adds	r2, r3, #1
10001a20:	d00f      	beq.n	10001a42 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001a22:	43d8      	mvns	r0, r3
10001a24:	17c0      	asrs	r0, r0, #31
10001a26:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001a28:	220a      	movs	r2, #10
10001a2a:	2300      	movs	r3, #0
10001a2c:	17c1      	asrs	r1, r0, #31
10001a2e:	f7fe fc79 	bl	10000324 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001a32:	6826      	ldr	r6, [r4, #0]
10001a34:	000b      	movs	r3, r1
10001a36:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001a38:	4301      	orrs	r1, r0
10001a3a:	d104      	bne.n	10001a46 <z_init_static_threads+0x76>
	z_sched_start(thread);
10001a3c:	0030      	movs	r0, r6
10001a3e:	f000 f95f 	bl	10001d00 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001a42:	342c      	adds	r4, #44	; 0x2c
10001a44:	e7ce      	b.n	100019e4 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001a46:	0030      	movs	r0, r6
10001a48:	4904      	ldr	r1, [pc, #16]	; (10001a5c <z_init_static_threads+0x8c>)
10001a4a:	3018      	adds	r0, #24
10001a4c:	f000 fb32 	bl	100020b4 <z_add_timeout>
10001a50:	e7f7      	b.n	10001a42 <z_init_static_threads+0x72>
10001a52:	46c0      	nop			; (mov r8, r8)
10001a54:	10002c38 	.word	0x10002c38
10001a58:	10002c38 	.word	0x10002c38
10001a5c:	10002a83 	.word	0x10002a83

10001a60 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10001a60:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001a62:	4b04      	ldr	r3, [pc, #16]	; (10001a74 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10001a64:	4a04      	ldr	r2, [pc, #16]	; (10001a78 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001a66:	1ac0      	subs	r0, r0, r3
10001a68:	4b04      	ldr	r3, [pc, #16]	; (10001a7c <slice_timeout+0x1c>)
10001a6a:	10c0      	asrs	r0, r0, #3
10001a6c:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10001a6e:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10001a70:	4770      	bx	lr
10001a72:	46c0      	nop			; (mov r8, r8)
10001a74:	20000108 	.word	0x20000108
10001a78:	200001ad 	.word	0x200001ad
10001a7c:	aaaaaaab 	.word	0xaaaaaaab

10001a80 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10001a80:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10001a82:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10001a84:	4b0a      	ldr	r3, [pc, #40]	; (10001ab0 <z_reset_time_slice+0x30>)
10001a86:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10001a88:	4b0a      	ldr	r3, [pc, #40]	; (10001ab4 <z_reset_time_slice+0x34>)
10001a8a:	436c      	muls	r4, r5
10001a8c:	18e4      	adds	r4, r4, r3
10001a8e:	0020      	movs	r0, r4
10001a90:	f001 f812 	bl	10002ab8 <z_abort_timeout>
	int ret = slice_ticks;
10001a94:	4b08      	ldr	r3, [pc, #32]	; (10001ab8 <z_reset_time_slice+0x38>)
10001a96:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
10001a98:	2a00      	cmp	r2, #0
10001a9a:	d008      	beq.n	10001aae <z_reset_time_slice+0x2e>
		slice_expired[cpu] = false;
10001a9c:	2100      	movs	r1, #0
10001a9e:	4b07      	ldr	r3, [pc, #28]	; (10001abc <z_reset_time_slice+0x3c>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
10001aa0:	3a01      	subs	r2, #1
		slice_expired[cpu] = false;
10001aa2:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001aa4:	0020      	movs	r0, r4
10001aa6:	4906      	ldr	r1, [pc, #24]	; (10001ac0 <z_reset_time_slice+0x40>)
			      K_TICKS(slice_time(curr) - 1));
10001aa8:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001aaa:	f000 fb03 	bl	100020b4 <z_add_timeout>
	}
}
10001aae:	bd70      	pop	{r4, r5, r6, pc}
10001ab0:	20000178 	.word	0x20000178
10001ab4:	20000108 	.word	0x20000108
10001ab8:	200001a0 	.word	0x200001a0
10001abc:	200001ad 	.word	0x200001ad
10001ac0:	10001a61 	.word	0x10001a61

10001ac4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10001ac4:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10001ac6:	4d0e      	ldr	r5, [pc, #56]	; (10001b00 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001ac8:	4b0e      	ldr	r3, [pc, #56]	; (10001b04 <update_cache+0x40>)
	return list->head == list;
10001aca:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001acc:	429c      	cmp	r4, r3
10001ace:	d001      	beq.n	10001ad4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10001ad0:	2c00      	cmp	r4, #0
10001ad2:	d100      	bne.n	10001ad6 <update_cache+0x12>
10001ad4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10001ad6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10001ad8:	2800      	cmp	r0, #0
10001ada:	d108      	bne.n	10001aee <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10001adc:	7b5a      	ldrb	r2, [r3, #13]
10001ade:	06d2      	lsls	r2, r2, #27
10001ae0:	d105      	bne.n	10001aee <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10001ae2:	69a2      	ldr	r2, [r4, #24]
10001ae4:	2a00      	cmp	r2, #0
10001ae6:	d102      	bne.n	10001aee <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10001ae8:	89da      	ldrh	r2, [r3, #14]
10001aea:	2a7f      	cmp	r2, #127	; 0x7f
10001aec:	d805      	bhi.n	10001afa <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10001aee:	429c      	cmp	r4, r3
10001af0:	d002      	beq.n	10001af8 <update_cache+0x34>
			z_reset_time_slice(thread);
10001af2:	0020      	movs	r0, r4
10001af4:	f7ff ffc4 	bl	10001a80 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10001af8:	0023      	movs	r3, r4
10001afa:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10001afc:	bd70      	pop	{r4, r5, r6, pc}
10001afe:	46c0      	nop			; (mov r8, r8)
10001b00:	20000178 	.word	0x20000178
10001b04:	20000190 	.word	0x20000190

10001b08 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10001b08:	220d      	movs	r2, #13
{
10001b0a:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10001b0c:	5682      	ldrsb	r2, [r0, r2]
{
10001b0e:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001b10:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001b12:	2a00      	cmp	r2, #0
10001b14:	da04      	bge.n	10001b20 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001b16:	227f      	movs	r2, #127	; 0x7f
10001b18:	4013      	ands	r3, r2
10001b1a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10001b1c:	f000 ff73 	bl	10002a06 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001b20:	2380      	movs	r3, #128	; 0x80
10001b22:	7b62      	ldrb	r2, [r4, #13]
10001b24:	425b      	negs	r3, r3
10001b26:	4313      	orrs	r3, r2
	return list->head == list;
10001b28:	4a13      	ldr	r2, [pc, #76]	; (10001b78 <move_thread_to_end_of_prio_q+0x70>)
10001b2a:	7363      	strb	r3, [r4, #13]
10001b2c:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001b2e:	4813      	ldr	r0, [pc, #76]	; (10001b7c <move_thread_to_end_of_prio_q+0x74>)
10001b30:	4283      	cmp	r3, r0
10001b32:	d100      	bne.n	10001b36 <move_thread_to_end_of_prio_q+0x2e>
10001b34:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10001b36:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001b38:	2b00      	cmp	r3, #0
10001b3a:	d104      	bne.n	10001b46 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10001b3c:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10001b3e:	6061      	str	r1, [r4, #4]

	tail->next = node;
10001b40:	600c      	str	r4, [r1, #0]
	list->tail = node;
10001b42:	61d4      	str	r4, [r2, #28]
}
10001b44:	e00c      	b.n	10001b60 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10001b46:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001b48:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001b4a:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10001b4c:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001b4e:	42b5      	cmp	r5, r6
10001b50:	d00d      	beq.n	10001b6e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001b52:	42ae      	cmp	r6, r5
10001b54:	dd0b      	ble.n	10001b6e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10001b56:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10001b58:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10001b5a:	6061      	str	r1, [r4, #4]
	prev->next = node;
10001b5c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10001b5e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10001b60:	6890      	ldr	r0, [r2, #8]
10001b62:	1b00      	subs	r0, r0, r4
10001b64:	4243      	negs	r3, r0
10001b66:	4158      	adcs	r0, r3
10001b68:	f7ff ffac 	bl	10001ac4 <update_cache>
}
10001b6c:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001b6e:	4299      	cmp	r1, r3
10001b70:	d0e4      	beq.n	10001b3c <move_thread_to_end_of_prio_q+0x34>
10001b72:	681b      	ldr	r3, [r3, #0]
10001b74:	e7e0      	b.n	10001b38 <move_thread_to_end_of_prio_q+0x30>
10001b76:	46c0      	nop			; (mov r8, r8)
10001b78:	20000178 	.word	0x20000178
10001b7c:	20000190 	.word	0x20000190

10001b80 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001b80:	230d      	movs	r3, #13
{
10001b82:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001b84:	56c3      	ldrsb	r3, [r0, r3]
10001b86:	7b41      	ldrb	r1, [r0, #13]
10001b88:	2b00      	cmp	r3, #0
10001b8a:	db26      	blt.n	10001bda <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10001b8c:	06cb      	lsls	r3, r1, #27
10001b8e:	d124      	bne.n	10001bda <ready_thread+0x5a>
	return node->next != NULL;
10001b90:	6983      	ldr	r3, [r0, #24]
10001b92:	2b00      	cmp	r3, #0
10001b94:	d121      	bne.n	10001bda <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10001b96:	2280      	movs	r2, #128	; 0x80
10001b98:	4252      	negs	r2, r2
10001b9a:	430a      	orrs	r2, r1
10001b9c:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10001b9e:	4a11      	ldr	r2, [pc, #68]	; (10001be4 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001ba0:	4c11      	ldr	r4, [pc, #68]	; (10001be8 <ready_thread+0x68>)
	return list->head == list;
10001ba2:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001ba4:	42a1      	cmp	r1, r4
10001ba6:	d000      	beq.n	10001baa <ready_thread+0x2a>
10001ba8:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10001baa:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001bac:	2b00      	cmp	r3, #0
10001bae:	d104      	bne.n	10001bba <ready_thread+0x3a>
	node->next = list;
10001bb0:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10001bb2:	6041      	str	r1, [r0, #4]
	tail->next = node;
10001bb4:	6008      	str	r0, [r1, #0]
	list->tail = node;
10001bb6:	61d0      	str	r0, [r2, #28]
}
10001bb8:	e00c      	b.n	10001bd4 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10001bba:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001bbc:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001bbe:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10001bc0:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001bc2:	42b5      	cmp	r5, r6
10001bc4:	d00a      	beq.n	10001bdc <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001bc6:	42ae      	cmp	r6, r5
10001bc8:	dd08      	ble.n	10001bdc <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10001bca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10001bcc:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10001bce:	6042      	str	r2, [r0, #4]
	prev->next = node;
10001bd0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10001bd2:	6058      	str	r0, [r3, #4]
		update_cache(0);
10001bd4:	2000      	movs	r0, #0
10001bd6:	f7ff ff75 	bl	10001ac4 <update_cache>
}
10001bda:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001bdc:	428b      	cmp	r3, r1
10001bde:	d0e7      	beq.n	10001bb0 <ready_thread+0x30>
10001be0:	681b      	ldr	r3, [r3, #0]
10001be2:	e7e3      	b.n	10001bac <ready_thread+0x2c>
10001be4:	20000178 	.word	0x20000178
10001be8:	20000190 	.word	0x20000190

10001bec <unready_thread>:
	if (z_is_thread_queued(thread)) {
10001bec:	220d      	movs	r2, #13
{
10001bee:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10001bf0:	5682      	ldrsb	r2, [r0, r2]
{
10001bf2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001bf4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001bf6:	2a00      	cmp	r2, #0
10001bf8:	da04      	bge.n	10001c04 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001bfa:	227f      	movs	r2, #127	; 0x7f
10001bfc:	4013      	ands	r3, r2
10001bfe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001c00:	f000 ff01 	bl	10002a06 <sys_dlist_remove>
	update_cache(thread == _current);
10001c04:	4b03      	ldr	r3, [pc, #12]	; (10001c14 <unready_thread+0x28>)
10001c06:	6898      	ldr	r0, [r3, #8]
10001c08:	1b00      	subs	r0, r0, r4
10001c0a:	4243      	negs	r3, r0
10001c0c:	4158      	adcs	r0, r3
10001c0e:	f7ff ff59 	bl	10001ac4 <update_cache>
}
10001c12:	bd10      	pop	{r4, pc}
10001c14:	20000178 	.word	0x20000178

10001c18 <k_sched_time_slice_set>:
{
10001c18:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001c1a:	f3ef 8410 	mrs	r4, PRIMASK
10001c1e:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10001c20:	230a      	movs	r3, #10
10001c22:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10001c24:	2800      	cmp	r0, #0
10001c26:	dd02      	ble.n	10001c2e <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10001c28:	2b02      	cmp	r3, #2
10001c2a:	da00      	bge.n	10001c2e <k_sched_time_slice_set+0x16>
10001c2c:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10001c2e:	4a07      	ldr	r2, [pc, #28]	; (10001c4c <k_sched_time_slice_set+0x34>)
10001c30:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10001c32:	4b07      	ldr	r3, [pc, #28]	; (10001c50 <k_sched_time_slice_set+0x38>)
10001c34:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10001c36:	4b07      	ldr	r3, [pc, #28]	; (10001c54 <k_sched_time_slice_set+0x3c>)
10001c38:	6898      	ldr	r0, [r3, #8]
10001c3a:	f7ff ff21 	bl	10001a80 <z_reset_time_slice>
	if (key != 0U) {
10001c3e:	2c00      	cmp	r4, #0
10001c40:	d102      	bne.n	10001c48 <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10001c42:	b662      	cpsie	i
10001c44:	f3bf 8f6f 	isb	sy
}
10001c48:	bd10      	pop	{r4, pc}
10001c4a:	46c0      	nop			; (mov r8, r8)
10001c4c:	200001a0 	.word	0x200001a0
10001c50:	2000019c 	.word	0x2000019c
10001c54:	20000178 	.word	0x20000178

10001c58 <z_time_slice>:
{
10001c58:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001c5a:	f3ef 8510 	mrs	r5, PRIMASK
10001c5e:	b672      	cpsid	i
	if (pending_current == _current) {
10001c60:	4a16      	ldr	r2, [pc, #88]	; (10001cbc <z_time_slice+0x64>)
10001c62:	4b17      	ldr	r3, [pc, #92]	; (10001cc0 <z_time_slice+0x68>)
10001c64:	6894      	ldr	r4, [r2, #8]
10001c66:	6819      	ldr	r1, [r3, #0]
10001c68:	428c      	cmp	r4, r1
10001c6a:	d108      	bne.n	10001c7e <z_time_slice+0x26>
	z_reset_time_slice(curr);
10001c6c:	0020      	movs	r0, r4
10001c6e:	f7ff ff07 	bl	10001a80 <z_reset_time_slice>
	if (key != 0U) {
10001c72:	2d00      	cmp	r5, #0
10001c74:	d102      	bne.n	10001c7c <z_time_slice+0x24>
	__asm__ volatile(
10001c76:	b662      	cpsie	i
10001c78:	f3bf 8f6f 	isb	sy
}
10001c7c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10001c7e:	2100      	movs	r1, #0
10001c80:	6019      	str	r1, [r3, #0]
	int ret = slice_ticks;
10001c82:	4b10      	ldr	r3, [pc, #64]	; (10001cc4 <z_time_slice+0x6c>)
	if (slice_time(_current) && sliceable(_current)) {
10001c84:	681b      	ldr	r3, [r3, #0]
10001c86:	428b      	cmp	r3, r1
10001c88:	d0f3      	beq.n	10001c72 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001c8a:	89e3      	ldrh	r3, [r4, #14]
10001c8c:	2b7f      	cmp	r3, #127	; 0x7f
10001c8e:	d8f0      	bhi.n	10001c72 <z_time_slice+0x1a>
		&& !z_is_thread_prevented_from_running(thread)
10001c90:	7b63      	ldrb	r3, [r4, #13]
10001c92:	06db      	lsls	r3, r3, #27
10001c94:	d1ed      	bne.n	10001c72 <z_time_slice+0x1a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001c96:	210e      	movs	r1, #14
10001c98:	4b0b      	ldr	r3, [pc, #44]	; (10001cc8 <z_time_slice+0x70>)
10001c9a:	5661      	ldrsb	r1, [r4, r1]
10001c9c:	681b      	ldr	r3, [r3, #0]
10001c9e:	4299      	cmp	r1, r3
10001ca0:	dbe7      	blt.n	10001c72 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001ca2:	4b0a      	ldr	r3, [pc, #40]	; (10001ccc <z_time_slice+0x74>)
10001ca4:	429c      	cmp	r4, r3
10001ca6:	d0e4      	beq.n	10001c72 <z_time_slice+0x1a>
		if (slice_expired[_current_cpu->id]) {
10001ca8:	4b09      	ldr	r3, [pc, #36]	; (10001cd0 <z_time_slice+0x78>)
10001caa:	7c12      	ldrb	r2, [r2, #16]
10001cac:	5c9b      	ldrb	r3, [r3, r2]
10001cae:	2b00      	cmp	r3, #0
10001cb0:	d0df      	beq.n	10001c72 <z_time_slice+0x1a>
		move_thread_to_end_of_prio_q(curr);
10001cb2:	0020      	movs	r0, r4
10001cb4:	f7ff ff28 	bl	10001b08 <move_thread_to_end_of_prio_q>
10001cb8:	e7d8      	b.n	10001c6c <z_time_slice+0x14>
10001cba:	46c0      	nop			; (mov r8, r8)
10001cbc:	20000178 	.word	0x20000178
10001cc0:	20000198 	.word	0x20000198
10001cc4:	200001a0 	.word	0x200001a0
10001cc8:	2000019c 	.word	0x2000019c
10001ccc:	20000028 	.word	0x20000028
10001cd0:	200001ad 	.word	0x200001ad

10001cd4 <z_reschedule>:
{
10001cd4:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10001cd6:	2900      	cmp	r1, #0
10001cd8:	d10a      	bne.n	10001cf0 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001cda:	f3ef 8005 	mrs	r0, IPSR
10001cde:	2800      	cmp	r0, #0
10001ce0:	d107      	bne.n	10001cf2 <z_reschedule+0x1e>
	return new_thread != _current;
10001ce2:	4b06      	ldr	r3, [pc, #24]	; (10001cfc <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10001ce4:	689a      	ldr	r2, [r3, #8]
10001ce6:	695b      	ldr	r3, [r3, #20]
10001ce8:	429a      	cmp	r2, r3
10001cea:	d002      	beq.n	10001cf2 <z_reschedule+0x1e>
	ret = arch_swap(key);
10001cec:	f7fe ffe0 	bl	10000cb0 <arch_swap>
}
10001cf0:	bd10      	pop	{r4, pc}
10001cf2:	b662      	cpsie	i
10001cf4:	f3bf 8f6f 	isb	sy
10001cf8:	e7fa      	b.n	10001cf0 <z_reschedule+0x1c>
10001cfa:	46c0      	nop			; (mov r8, r8)
10001cfc:	20000178 	.word	0x20000178

10001d00 <z_sched_start>:
{
10001d00:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001d02:	f3ef 8410 	mrs	r4, PRIMASK
10001d06:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10001d08:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10001d0a:	7b43      	ldrb	r3, [r0, #13]
10001d0c:	4213      	tst	r3, r2
10001d0e:	d105      	bne.n	10001d1c <z_sched_start+0x1c>
	if (key != 0U) {
10001d10:	2c00      	cmp	r4, #0
10001d12:	d102      	bne.n	10001d1a <z_sched_start+0x1a>
	__asm__ volatile(
10001d14:	b662      	cpsie	i
10001d16:	f3bf 8f6f 	isb	sy
}
10001d1a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001d1c:	4393      	bics	r3, r2
10001d1e:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10001d20:	f7ff ff2e 	bl	10001b80 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10001d24:	0021      	movs	r1, r4
10001d26:	4802      	ldr	r0, [pc, #8]	; (10001d30 <z_sched_start+0x30>)
10001d28:	f7ff ffd4 	bl	10001cd4 <z_reschedule>
10001d2c:	e7f5      	b.n	10001d1a <z_sched_start+0x1a>
10001d2e:	46c0      	nop			; (mov r8, r8)
10001d30:	200001ae 	.word	0x200001ae

10001d34 <z_impl_k_thread_suspend>:
{
10001d34:	b570      	push	{r4, r5, r6, lr}
10001d36:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10001d38:	3018      	adds	r0, #24
10001d3a:	f000 febd 	bl	10002ab8 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10001d3e:	f3ef 8610 	mrs	r6, PRIMASK
10001d42:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10001d44:	220d      	movs	r2, #13
10001d46:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10001d48:	7b63      	ldrb	r3, [r4, #13]
10001d4a:	2a00      	cmp	r2, #0
10001d4c:	da05      	bge.n	10001d5a <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001d4e:	227f      	movs	r2, #127	; 0x7f
10001d50:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10001d52:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001d54:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001d56:	f000 fe56 	bl	10002a06 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10001d5a:	2310      	movs	r3, #16
		update_cache(thread == _current);
10001d5c:	4d0a      	ldr	r5, [pc, #40]	; (10001d88 <z_impl_k_thread_suspend+0x54>)
10001d5e:	7b62      	ldrb	r2, [r4, #13]
10001d60:	68a8      	ldr	r0, [r5, #8]
10001d62:	4313      	orrs	r3, r2
10001d64:	1b00      	subs	r0, r0, r4
10001d66:	7363      	strb	r3, [r4, #13]
10001d68:	4243      	negs	r3, r0
10001d6a:	4158      	adcs	r0, r3
10001d6c:	f7ff feaa 	bl	10001ac4 <update_cache>
	if (key != 0U) {
10001d70:	2e00      	cmp	r6, #0
10001d72:	d102      	bne.n	10001d7a <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10001d74:	b662      	cpsie	i
10001d76:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10001d7a:	68ab      	ldr	r3, [r5, #8]
10001d7c:	42a3      	cmp	r3, r4
10001d7e:	d101      	bne.n	10001d84 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10001d80:	f000 fe93 	bl	10002aaa <z_reschedule_unlocked>
}
10001d84:	bd70      	pop	{r4, r5, r6, pc}
10001d86:	46c0      	nop			; (mov r8, r8)
10001d88:	20000178 	.word	0x20000178

10001d8c <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10001d8c:	f3ef 8110 	mrs	r1, PRIMASK
10001d90:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10001d92:	4b05      	ldr	r3, [pc, #20]	; (10001da8 <k_sched_lock+0x1c>)
10001d94:	689a      	ldr	r2, [r3, #8]
10001d96:	7bd3      	ldrb	r3, [r2, #15]
10001d98:	3b01      	subs	r3, #1
10001d9a:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10001d9c:	2900      	cmp	r1, #0
10001d9e:	d102      	bne.n	10001da6 <k_sched_lock+0x1a>
	__asm__ volatile(
10001da0:	b662      	cpsie	i
10001da2:	f3bf 8f6f 	isb	sy
}
10001da6:	4770      	bx	lr
10001da8:	20000178 	.word	0x20000178

10001dac <k_sched_unlock>:
{
10001dac:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001dae:	f3ef 8410 	mrs	r4, PRIMASK
10001db2:	b672      	cpsid	i
		++_current->base.sched_locked;
10001db4:	4b07      	ldr	r3, [pc, #28]	; (10001dd4 <k_sched_unlock+0x28>)
		update_cache(0);
10001db6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10001db8:	689a      	ldr	r2, [r3, #8]
10001dba:	7bd3      	ldrb	r3, [r2, #15]
10001dbc:	3301      	adds	r3, #1
10001dbe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10001dc0:	f7ff fe80 	bl	10001ac4 <update_cache>
	if (key != 0U) {
10001dc4:	2c00      	cmp	r4, #0
10001dc6:	d102      	bne.n	10001dce <k_sched_unlock+0x22>
	__asm__ volatile(
10001dc8:	b662      	cpsie	i
10001dca:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10001dce:	f000 fe6c 	bl	10002aaa <z_reschedule_unlocked>
}
10001dd2:	bd10      	pop	{r4, pc}
10001dd4:	20000178 	.word	0x20000178

10001dd8 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10001dd8:	2100      	movs	r1, #0
{
10001dda:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10001ddc:	4b03      	ldr	r3, [pc, #12]	; (10001dec <z_sched_init+0x14>)
10001dde:	4a04      	ldr	r2, [pc, #16]	; (10001df0 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10001de0:	0008      	movs	r0, r1
10001de2:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10001de4:	61da      	str	r2, [r3, #28]
10001de6:	f7ff ff17 	bl	10001c18 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10001dea:	bd10      	pop	{r4, pc}
10001dec:	20000178 	.word	0x20000178
10001df0:	20000190 	.word	0x20000190

10001df4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001df6:	f3ef 8510 	mrs	r5, PRIMASK
10001dfa:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001dfc:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10001dfe:	4c19      	ldr	r4, [pc, #100]	; (10001e64 <z_impl_k_yield+0x70>)
10001e00:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001e02:	7b43      	ldrb	r3, [r0, #13]
10001e04:	4013      	ands	r3, r2
10001e06:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001e08:	f000 fdfd 	bl	10002a06 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001e0c:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10001e0e:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10001e10:	4252      	negs	r2, r2
10001e12:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e14:	4814      	ldr	r0, [pc, #80]	; (10001e68 <z_impl_k_yield+0x74>)
10001e16:	430a      	orrs	r2, r1
10001e18:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10001e1a:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e1c:	4282      	cmp	r2, r0
10001e1e:	d100      	bne.n	10001e22 <z_impl_k_yield+0x2e>
10001e20:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10001e22:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001e24:	2a00      	cmp	r2, #0
10001e26:	d104      	bne.n	10001e32 <z_impl_k_yield+0x3e>
	node->next = list;
10001e28:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10001e2a:	6059      	str	r1, [r3, #4]
	tail->next = node;
10001e2c:	600b      	str	r3, [r1, #0]
	list->tail = node;
10001e2e:	61e3      	str	r3, [r4, #28]
}
10001e30:	e00c      	b.n	10001e4c <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10001e32:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10001e34:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10001e36:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10001e38:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10001e3a:	42be      	cmp	r6, r7
10001e3c:	d00d      	beq.n	10001e5a <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001e3e:	42b7      	cmp	r7, r6
10001e40:	dd0b      	ble.n	10001e5a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10001e42:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10001e44:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10001e46:	6059      	str	r1, [r3, #4]
	prev->next = node;
10001e48:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10001e4a:	6053      	str	r3, [r2, #4]
	update_cache(1);
10001e4c:	2001      	movs	r0, #1
10001e4e:	f7ff fe39 	bl	10001ac4 <update_cache>
10001e52:	0028      	movs	r0, r5
10001e54:	f7fe ff2c 	bl	10000cb0 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10001e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10001e5a:	428a      	cmp	r2, r1
10001e5c:	d0e4      	beq.n	10001e28 <z_impl_k_yield+0x34>
10001e5e:	6812      	ldr	r2, [r2, #0]
10001e60:	e7e0      	b.n	10001e24 <z_impl_k_yield+0x30>
10001e62:	46c0      	nop			; (mov r8, r8)
10001e64:	20000178 	.word	0x20000178
10001e68:	20000190 	.word	0x20000190

10001e6c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10001e6c:	0003      	movs	r3, r0
{
10001e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10001e70:	430b      	orrs	r3, r1
{
10001e72:	0004      	movs	r4, r0
10001e74:	000d      	movs	r5, r1
	if (ticks == 0) {
10001e76:	2b00      	cmp	r3, #0
10001e78:	d103      	bne.n	10001e82 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
10001e7a:	f7ff ffbb 	bl	10001df4 <z_impl_k_yield>
		k_yield();
		return 0;
10001e7e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10001e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10001e82:	1c4b      	adds	r3, r1, #1
10001e84:	db2e      	blt.n	10001ee4 <z_tick_sleep+0x78>
10001e86:	1c4b      	adds	r3, r1, #1
10001e88:	d101      	bne.n	10001e8e <z_tick_sleep+0x22>
10001e8a:	1c83      	adds	r3, r0, #2
10001e8c:	d32a      	bcc.n	10001ee4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10001e8e:	f000 fe26 	bl	10002ade <sys_clock_tick_get_32>
10001e92:	1827      	adds	r7, r4, r0
10001e94:	f3ef 8310 	mrs	r3, PRIMASK
10001e98:	b672      	cpsid	i
	pending_current = _current;
10001e9a:	4e14      	ldr	r6, [pc, #80]	; (10001eec <z_tick_sleep+0x80>)
10001e9c:	9301      	str	r3, [sp, #4]
10001e9e:	68b0      	ldr	r0, [r6, #8]
10001ea0:	4b13      	ldr	r3, [pc, #76]	; (10001ef0 <z_tick_sleep+0x84>)
10001ea2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10001ea4:	f7ff fea2 	bl	10001bec <unready_thread>
	z_add_thread_timeout(_current, timeout);
10001ea8:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001eaa:	0022      	movs	r2, r4
10001eac:	002b      	movs	r3, r5
10001eae:	4911      	ldr	r1, [pc, #68]	; (10001ef4 <z_tick_sleep+0x88>)
10001eb0:	3018      	adds	r0, #24
10001eb2:	f000 f8ff 	bl	100020b4 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10001eb6:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10001eb8:	68b2      	ldr	r2, [r6, #8]
10001eba:	9801      	ldr	r0, [sp, #4]
10001ebc:	7b51      	ldrb	r1, [r2, #13]
10001ebe:	430b      	orrs	r3, r1
10001ec0:	7353      	strb	r3, [r2, #13]
10001ec2:	f7fe fef5 	bl	10000cb0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10001ec6:	f000 fe0a 	bl	10002ade <sys_clock_tick_get_32>
10001eca:	2300      	movs	r3, #0
10001ecc:	003a      	movs	r2, r7
10001ece:	0004      	movs	r4, r0
10001ed0:	001d      	movs	r5, r3
10001ed2:	1b12      	subs	r2, r2, r4
10001ed4:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10001ed6:	42ab      	cmp	r3, r5
10001ed8:	dc02      	bgt.n	10001ee0 <z_tick_sleep+0x74>
10001eda:	d1d0      	bne.n	10001e7e <z_tick_sleep+0x12>
10001edc:	42aa      	cmp	r2, r5
10001ede:	d0ce      	beq.n	10001e7e <z_tick_sleep+0x12>
		return ticks;
10001ee0:	0010      	movs	r0, r2
10001ee2:	e7cd      	b.n	10001e80 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10001ee4:	2702      	movs	r7, #2
10001ee6:	427f      	negs	r7, r7
10001ee8:	1b3f      	subs	r7, r7, r4
10001eea:	e7d3      	b.n	10001e94 <z_tick_sleep+0x28>
10001eec:	20000178 	.word	0x20000178
10001ef0:	20000198 	.word	0x20000198
10001ef4:	10002a83 	.word	0x10002a83

10001ef8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10001ef8:	b510      	push	{r4, lr}
10001efa:	000b      	movs	r3, r1
10001efc:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10001efe:	1c42      	adds	r2, r0, #1
10001f00:	d107      	bne.n	10001f12 <z_impl_k_sleep+0x1a>
10001f02:	3301      	adds	r3, #1
10001f04:	d105      	bne.n	10001f12 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10001f06:	4b07      	ldr	r3, [pc, #28]	; (10001f24 <z_impl_k_sleep+0x2c>)
10001f08:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
10001f0a:	f7ff ff13 	bl	10001d34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10001f0e:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10001f10:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10001f12:	0021      	movs	r1, r4
10001f14:	f7ff ffaa 	bl	10001e6c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10001f18:	220a      	movs	r2, #10
10001f1a:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10001f1c:	17c1      	asrs	r1, r0, #31
10001f1e:	f7fe f9bd 	bl	1000029c <__aeabi_uldivmod>
	return ret;
10001f22:	e7f5      	b.n	10001f10 <z_impl_k_sleep+0x18>
10001f24:	20000178 	.word	0x20000178

10001f28 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10001f28:	4b01      	ldr	r3, [pc, #4]	; (10001f30 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10001f2a:	6898      	ldr	r0, [r3, #8]
}
10001f2c:	4770      	bx	lr
10001f2e:	46c0      	nop			; (mov r8, r8)
10001f30:	20000178 	.word	0x20000178

10001f34 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10001f34:	b570      	push	{r4, r5, r6, lr}
10001f36:	0004      	movs	r4, r0
10001f38:	f3ef 8610 	mrs	r6, PRIMASK
10001f3c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10001f3e:	7b03      	ldrb	r3, [r0, #12]
10001f40:	07db      	lsls	r3, r3, #31
10001f42:	d508      	bpl.n	10001f56 <z_thread_abort+0x22>
	if (key != 0U) {
10001f44:	2e00      	cmp	r6, #0
10001f46:	d102      	bne.n	10001f4e <z_thread_abort+0x1a>
	__asm__ volatile(
10001f48:	b662      	cpsie	i
10001f4a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10001f4e:	2004      	movs	r0, #4
10001f50:	b662      	cpsie	i
10001f52:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10001f54:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10001f56:	2308      	movs	r3, #8
10001f58:	7b42      	ldrb	r2, [r0, #13]
10001f5a:	421a      	tst	r2, r3
10001f5c:	d005      	beq.n	10001f6a <z_thread_abort+0x36>
	if (key != 0U) {
10001f5e:	2e00      	cmp	r6, #0
10001f60:	d1f8      	bne.n	10001f54 <z_thread_abort+0x20>
	__asm__ volatile(
10001f62:	b662      	cpsie	i
10001f64:	f3bf 8f6f 	isb	sy
10001f68:	e7f4      	b.n	10001f54 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10001f6a:	2120      	movs	r1, #32
10001f6c:	0010      	movs	r0, r2
10001f6e:	4388      	bics	r0, r1
10001f70:	0001      	movs	r1, r0
10001f72:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10001f74:	b248      	sxtb	r0, r1
10001f76:	2800      	cmp	r0, #0
10001f78:	db20      	blt.n	10001fbc <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10001f7a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10001f7c:	68a3      	ldr	r3, [r4, #8]
10001f7e:	2b00      	cmp	r3, #0
10001f80:	d002      	beq.n	10001f88 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10001f82:	0020      	movs	r0, r4
10001f84:	f000 fd47 	bl	10002a16 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10001f88:	0020      	movs	r0, r4
10001f8a:	3018      	adds	r0, #24
10001f8c:	f000 fd94 	bl	10002ab8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10001f90:	0023      	movs	r3, r4
	return list->head == list;
10001f92:	6da5      	ldr	r5, [r4, #88]	; 0x58
10001f94:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001f96:	429d      	cmp	r5, r3
10001f98:	d001      	beq.n	10001f9e <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10001f9a:	2d00      	cmp	r5, #0
10001f9c:	d116      	bne.n	10001fcc <z_thread_abort+0x98>
		update_cache(1);
10001f9e:	2001      	movs	r0, #1
10001fa0:	f7ff fd90 	bl	10001ac4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10001fa4:	4b10      	ldr	r3, [pc, #64]	; (10001fe8 <z_thread_abort+0xb4>)
10001fa6:	689b      	ldr	r3, [r3, #8]
10001fa8:	42a3      	cmp	r3, r4
10001faa:	d1d8      	bne.n	10001f5e <z_thread_abort+0x2a>
10001fac:	f3ef 8305 	mrs	r3, IPSR
10001fb0:	2b00      	cmp	r3, #0
10001fb2:	d1d4      	bne.n	10001f5e <z_thread_abort+0x2a>
10001fb4:	0030      	movs	r0, r6
10001fb6:	f7fe fe7b 	bl	10000cb0 <arch_swap>
	return ret;
10001fba:	e7d0      	b.n	10001f5e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001fbc:	215f      	movs	r1, #95	; 0x5f
10001fbe:	400a      	ands	r2, r1
10001fc0:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10001fc2:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001fc4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001fc6:	f000 fd1e 	bl	10002a06 <sys_dlist_remove>
}
10001fca:	e7d7      	b.n	10001f7c <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10001fcc:	0028      	movs	r0, r5
10001fce:	f000 fd22 	bl	10002a16 <unpend_thread_no_timeout>
10001fd2:	0028      	movs	r0, r5
10001fd4:	3018      	adds	r0, #24
10001fd6:	f000 fd6f 	bl	10002ab8 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10001fda:	2300      	movs	r3, #0
		ready_thread(thread);
10001fdc:	0028      	movs	r0, r5
10001fde:	66eb      	str	r3, [r5, #108]	; 0x6c
10001fe0:	f7ff fdce 	bl	10001b80 <ready_thread>
10001fe4:	e7d4      	b.n	10001f90 <z_thread_abort+0x5c>
10001fe6:	46c0      	nop			; (mov r8, r8)
10001fe8:	20000178 	.word	0x20000178

10001fec <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10001fec:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10001fee:	4806      	ldr	r0, [pc, #24]	; (10002008 <z_data_copy+0x1c>)
10001ff0:	4a06      	ldr	r2, [pc, #24]	; (1000200c <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10001ff2:	4907      	ldr	r1, [pc, #28]	; (10002010 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10001ff4:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10001ff6:	f000 fcfb 	bl	100029f0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10001ffa:	4a06      	ldr	r2, [pc, #24]	; (10002014 <z_data_copy+0x28>)
10001ffc:	4906      	ldr	r1, [pc, #24]	; (10002018 <z_data_copy+0x2c>)
10001ffe:	4807      	ldr	r0, [pc, #28]	; (1000201c <z_data_copy+0x30>)
10002000:	f000 fcf6 	bl	100029f0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002004:	bd10      	pop	{r4, pc}
10002006:	46c0      	nop			; (mov r8, r8)
10002008:	20000000 	.word	0x20000000
1000200c:	20000026 	.word	0x20000026
10002010:	10002de8 	.word	0x10002de8
10002014:	00000000 	.word	0x00000000
10002018:	10002de8 	.word	0x10002de8
1000201c:	20000000 	.word	0x20000000

10002020 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002020:	2000      	movs	r0, #0
{
10002022:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002024:	4b03      	ldr	r3, [pc, #12]	; (10002034 <elapsed+0x14>)
10002026:	681b      	ldr	r3, [r3, #0]
10002028:	4283      	cmp	r3, r0
1000202a:	d101      	bne.n	10002030 <elapsed+0x10>
1000202c:	f7ff f944 	bl	100012b8 <sys_clock_elapsed>
}
10002030:	bd10      	pop	{r4, pc}
10002032:	46c0      	nop			; (mov r8, r8)
10002034:	200001a4 	.word	0x200001a4

10002038 <next_timeout>:

static int32_t next_timeout(void)
{
10002038:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
1000203a:	4b0e      	ldr	r3, [pc, #56]	; (10002074 <next_timeout+0x3c>)
1000203c:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000203e:	429e      	cmp	r6, r3
10002040:	d103      	bne.n	1000204a <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10002042:	f7ff ffed 	bl	10002020 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
10002046:	480c      	ldr	r0, [pc, #48]	; (10002078 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
10002048:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
1000204a:	f7ff ffe9 	bl	10002020 <elapsed>
	if ((to == NULL) ||
1000204e:	2e00      	cmp	r6, #0
10002050:	d0f9      	beq.n	10002046 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002052:	6932      	ldr	r2, [r6, #16]
10002054:	6973      	ldr	r3, [r6, #20]
10002056:	0004      	movs	r4, r0
10002058:	17c5      	asrs	r5, r0, #31
1000205a:	1b12      	subs	r2, r2, r4
1000205c:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
1000205e:	2b00      	cmp	r3, #0
10002060:	dcf1      	bgt.n	10002046 <next_timeout+0xe>
10002062:	d103      	bne.n	1000206c <next_timeout+0x34>
10002064:	2180      	movs	r1, #128	; 0x80
10002066:	0609      	lsls	r1, r1, #24
10002068:	428a      	cmp	r2, r1
1000206a:	d2ec      	bcs.n	10002046 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
1000206c:	43d8      	mvns	r0, r3
1000206e:	17c0      	asrs	r0, r0, #31
10002070:	4010      	ands	r0, r2
	return ret;
10002072:	e7e9      	b.n	10002048 <next_timeout+0x10>
10002074:	20000018 	.word	0x20000018
10002078:	7fffffff 	.word	0x7fffffff

1000207c <remove_timeout>:
{
1000207c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
1000207e:	2800      	cmp	r0, #0
10002080:	d00e      	beq.n	100020a0 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10002082:	4b0b      	ldr	r3, [pc, #44]	; (100020b0 <remove_timeout+0x34>)
10002084:	685b      	ldr	r3, [r3, #4]
10002086:	4298      	cmp	r0, r3
10002088:	d00a      	beq.n	100020a0 <remove_timeout+0x24>
1000208a:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
1000208c:	2900      	cmp	r1, #0
1000208e:	d007      	beq.n	100020a0 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10002090:	690a      	ldr	r2, [r1, #16]
10002092:	694b      	ldr	r3, [r1, #20]
10002094:	6904      	ldr	r4, [r0, #16]
10002096:	6945      	ldr	r5, [r0, #20]
10002098:	1912      	adds	r2, r2, r4
1000209a:	416b      	adcs	r3, r5
1000209c:	610a      	str	r2, [r1, #16]
1000209e:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
100020a0:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100020a2:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
100020a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100020a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100020a8:	2300      	movs	r3, #0
100020aa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100020ac:	6043      	str	r3, [r0, #4]
}
100020ae:	bd30      	pop	{r4, r5, pc}
100020b0:	20000018 	.word	0x20000018

100020b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100020b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100020b6:	0004      	movs	r4, r0
100020b8:	0016      	movs	r6, r2
100020ba:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100020bc:	1c53      	adds	r3, r2, #1
100020be:	d101      	bne.n	100020c4 <z_add_timeout+0x10>
100020c0:	1c7b      	adds	r3, r7, #1
100020c2:	d057      	beq.n	10002174 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
100020c4:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
100020c6:	f3ef 8310 	mrs	r3, PRIMASK
100020ca:	b672      	cpsid	i
100020cc:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
100020ce:	2f00      	cmp	r7, #0
100020d0:	da23      	bge.n	1000211a <z_add_timeout+0x66>
100020d2:	1c7b      	adds	r3, r7, #1
100020d4:	d101      	bne.n	100020da <z_add_timeout+0x26>
100020d6:	1cb3      	adds	r3, r6, #2
100020d8:	d81f      	bhi.n	1000211a <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
100020da:	4b2b      	ldr	r3, [pc, #172]	; (10002188 <z_add_timeout+0xd4>)
100020dc:	6818      	ldr	r0, [r3, #0]
100020de:	6859      	ldr	r1, [r3, #4]
100020e0:	2202      	movs	r2, #2
100020e2:	4252      	negs	r2, r2
100020e4:	17d3      	asrs	r3, r2, #31
100020e6:	1a12      	subs	r2, r2, r0
100020e8:	418b      	sbcs	r3, r1
100020ea:	1b92      	subs	r2, r2, r6
100020ec:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
100020ee:	2b00      	cmp	r3, #0
100020f0:	dc04      	bgt.n	100020fc <z_add_timeout+0x48>
100020f2:	d101      	bne.n	100020f8 <z_add_timeout+0x44>
100020f4:	2a00      	cmp	r2, #0
100020f6:	d101      	bne.n	100020fc <z_add_timeout+0x48>
100020f8:	2201      	movs	r2, #1
100020fa:	2300      	movs	r3, #0
	return list->head == list;
100020fc:	4f23      	ldr	r7, [pc, #140]	; (1000218c <z_add_timeout+0xd8>)
100020fe:	6122      	str	r2, [r4, #16]
10002100:	6163      	str	r3, [r4, #20]
10002102:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002104:	42bd      	cmp	r5, r7
10002106:	d100      	bne.n	1000210a <z_add_timeout+0x56>
10002108:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
1000210a:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
1000210c:	2d00      	cmp	r5, #0
1000210e:	d10f      	bne.n	10002130 <z_add_timeout+0x7c>
	node->next = list;
10002110:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002112:	6066      	str	r6, [r4, #4]
	tail->next = node;
10002114:	6034      	str	r4, [r6, #0]
	list->tail = node;
10002116:	607c      	str	r4, [r7, #4]
}
10002118:	e01c      	b.n	10002154 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
1000211a:	f7ff ff81 	bl	10002020 <elapsed>
1000211e:	2201      	movs	r2, #1
10002120:	2300      	movs	r3, #0
10002122:	1992      	adds	r2, r2, r6
10002124:	417b      	adcs	r3, r7
10002126:	0006      	movs	r6, r0
10002128:	17c7      	asrs	r7, r0, #31
1000212a:	1992      	adds	r2, r2, r6
1000212c:	417b      	adcs	r3, r7
1000212e:	e7e5      	b.n	100020fc <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10002130:	6928      	ldr	r0, [r5, #16]
10002132:	6969      	ldr	r1, [r5, #20]
10002134:	6922      	ldr	r2, [r4, #16]
10002136:	6963      	ldr	r3, [r4, #20]
10002138:	4299      	cmp	r1, r3
1000213a:	dc02      	bgt.n	10002142 <z_add_timeout+0x8e>
1000213c:	d11b      	bne.n	10002176 <z_add_timeout+0xc2>
1000213e:	4290      	cmp	r0, r2
10002140:	d919      	bls.n	10002176 <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10002142:	1a80      	subs	r0, r0, r2
10002144:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10002146:	686b      	ldr	r3, [r5, #4]
10002148:	6128      	str	r0, [r5, #16]
1000214a:	6169      	str	r1, [r5, #20]
	node->prev = prev;
1000214c:	6063      	str	r3, [r4, #4]
	node->next = successor;
1000214e:	6025      	str	r5, [r4, #0]
	prev->next = node;
10002150:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002152:	606c      	str	r4, [r5, #4]
	return list->head == list;
10002154:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002156:	42bb      	cmp	r3, r7
10002158:	d006      	beq.n	10002168 <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
1000215a:	429c      	cmp	r4, r3
1000215c:	d104      	bne.n	10002168 <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
1000215e:	f7ff ff6b 	bl	10002038 <next_timeout>
10002162:	2100      	movs	r1, #0
10002164:	f7ff f830 	bl	100011c8 <sys_clock_set_timeout>
	if (key != 0U) {
10002168:	9b01      	ldr	r3, [sp, #4]
1000216a:	2b00      	cmp	r3, #0
1000216c:	d102      	bne.n	10002174 <z_add_timeout+0xc0>
	__asm__ volatile(
1000216e:	b662      	cpsie	i
10002170:	f3bf 8f6f 	isb	sy
		}
	}
}
10002174:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
10002176:	1a12      	subs	r2, r2, r0
10002178:	418b      	sbcs	r3, r1
1000217a:	6122      	str	r2, [r4, #16]
1000217c:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
1000217e:	42b5      	cmp	r5, r6
10002180:	d0c6      	beq.n	10002110 <z_add_timeout+0x5c>
10002182:	682d      	ldr	r5, [r5, #0]
10002184:	e7c2      	b.n	1000210c <z_add_timeout+0x58>
10002186:	46c0      	nop			; (mov r8, r8)
10002188:	20000120 	.word	0x20000120
1000218c:	20000018 	.word	0x20000018

10002190 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10002190:	b5f0      	push	{r4, r5, r6, r7, lr}
10002192:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10002194:	f3ef 8310 	mrs	r3, PRIMASK
10002198:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000219a:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
1000219c:	4b30      	ldr	r3, [pc, #192]	; (10002260 <sys_clock_announce+0xd0>)
1000219e:	6018      	str	r0, [r3, #0]
	return list->head == list;
100021a0:	4b30      	ldr	r3, [pc, #192]	; (10002264 <sys_clock_announce+0xd4>)
100021a2:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100021a4:	429c      	cmp	r4, r3
100021a6:	d100      	bne.n	100021aa <sys_clock_announce+0x1a>
100021a8:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
100021aa:	4b2f      	ldr	r3, [pc, #188]	; (10002268 <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
100021ac:	4d2c      	ldr	r5, [pc, #176]	; (10002260 <sys_clock_announce+0xd0>)
		curr_tick += dt;
100021ae:	9303      	str	r3, [sp, #12]
100021b0:	6818      	ldr	r0, [r3, #0]
100021b2:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
100021b4:	682b      	ldr	r3, [r5, #0]
100021b6:	469c      	mov	ip, r3
100021b8:	2c00      	cmp	r4, #0
100021ba:	d039      	beq.n	10002230 <sys_clock_announce+0xa0>
100021bc:	6962      	ldr	r2, [r4, #20]
100021be:	6926      	ldr	r6, [r4, #16]
100021c0:	17db      	asrs	r3, r3, #31
100021c2:	429a      	cmp	r2, r3
100021c4:	dc02      	bgt.n	100021cc <sys_clock_announce+0x3c>
100021c6:	d10a      	bne.n	100021de <sys_clock_announce+0x4e>
100021c8:	4566      	cmp	r6, ip
100021ca:	d908      	bls.n	100021de <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
100021cc:	001f      	movs	r7, r3
100021ce:	6922      	ldr	r2, [r4, #16]
100021d0:	6963      	ldr	r3, [r4, #20]
100021d2:	4666      	mov	r6, ip
100021d4:	1b92      	subs	r2, r2, r6
100021d6:	41bb      	sbcs	r3, r7
100021d8:	6122      	str	r2, [r4, #16]
100021da:	6163      	str	r3, [r4, #20]
100021dc:	e028      	b.n	10002230 <sys_clock_announce+0xa0>
		curr_tick += dt;
100021de:	17f3      	asrs	r3, r6, #31
100021e0:	9600      	str	r6, [sp, #0]
100021e2:	9301      	str	r3, [sp, #4]
100021e4:	9a00      	ldr	r2, [sp, #0]
100021e6:	9b01      	ldr	r3, [sp, #4]
100021e8:	1880      	adds	r0, r0, r2
100021ea:	4159      	adcs	r1, r3
		t->dticks = 0;
100021ec:	2300      	movs	r3, #0
100021ee:	2200      	movs	r2, #0
		curr_tick += dt;
100021f0:	4f1d      	ldr	r7, [pc, #116]	; (10002268 <sys_clock_announce+0xd8>)
		t->dticks = 0;
100021f2:	6122      	str	r2, [r4, #16]
100021f4:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
100021f6:	6038      	str	r0, [r7, #0]
100021f8:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
100021fa:	0020      	movs	r0, r4
100021fc:	f7ff ff3e 	bl	1000207c <remove_timeout>
	if (key != 0U) {
10002200:	9b02      	ldr	r3, [sp, #8]
10002202:	2b00      	cmp	r3, #0
10002204:	d102      	bne.n	1000220c <sys_clock_announce+0x7c>
	__asm__ volatile(
10002206:	b662      	cpsie	i
10002208:	f3bf 8f6f 	isb	sy
		t->fn(t);
1000220c:	0020      	movs	r0, r4
1000220e:	68a3      	ldr	r3, [r4, #8]
10002210:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002212:	f3ef 8310 	mrs	r3, PRIMASK
10002216:	b672      	cpsid	i
10002218:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
1000221a:	4b11      	ldr	r3, [pc, #68]	; (10002260 <sys_clock_announce+0xd0>)
1000221c:	681a      	ldr	r2, [r3, #0]
1000221e:	1b92      	subs	r2, r2, r6
10002220:	601a      	str	r2, [r3, #0]
	return list->head == list;
10002222:	4b10      	ldr	r3, [pc, #64]	; (10002264 <sys_clock_announce+0xd4>)
10002224:	4694      	mov	ip, r2
10002226:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002228:	429c      	cmp	r4, r3
1000222a:	d1be      	bne.n	100021aa <sys_clock_announce+0x1a>
		curr_tick += dt;
1000222c:	6838      	ldr	r0, [r7, #0]
1000222e:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10002230:	4662      	mov	r2, ip
10002232:	17d3      	asrs	r3, r2, #31
10002234:	1812      	adds	r2, r2, r0
10002236:	414b      	adcs	r3, r1
	announce_remaining = 0;
10002238:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000223a:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
1000223c:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
1000223e:	600a      	str	r2, [r1, #0]
10002240:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
10002242:	f7ff fef9 	bl	10002038 <next_timeout>
10002246:	0021      	movs	r1, r4
10002248:	f7fe ffbe 	bl	100011c8 <sys_clock_set_timeout>
	if (key != 0U) {
1000224c:	9b02      	ldr	r3, [sp, #8]
1000224e:	42a3      	cmp	r3, r4
10002250:	d102      	bne.n	10002258 <sys_clock_announce+0xc8>
	__asm__ volatile(
10002252:	b662      	cpsie	i
10002254:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
10002258:	f7ff fcfe 	bl	10001c58 <z_time_slice>
#endif
}
1000225c:	b005      	add	sp, #20
1000225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002260:	200001a4 	.word	0x200001a4
10002264:	20000018 	.word	0x20000018
10002268:	20000120 	.word	0x20000120

1000226c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
1000226c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000226e:	f3ef 8410 	mrs	r4, PRIMASK
10002272:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
10002274:	f7ff fed4 	bl	10002020 <elapsed>
10002278:	0002      	movs	r2, r0
1000227a:	4906      	ldr	r1, [pc, #24]	; (10002294 <sys_clock_tick_get+0x28>)
1000227c:	17c3      	asrs	r3, r0, #31
1000227e:	6808      	ldr	r0, [r1, #0]
10002280:	6849      	ldr	r1, [r1, #4]
10002282:	1880      	adds	r0, r0, r2
10002284:	4159      	adcs	r1, r3
	if (key != 0U) {
10002286:	2c00      	cmp	r4, #0
10002288:	d102      	bne.n	10002290 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000228a:	b662      	cpsie	i
1000228c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10002290:	bd10      	pop	{r4, pc}
10002292:	46c0      	nop			; (mov r8, r8)
10002294:	20000120 	.word	0x20000120

10002298 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10002298:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
1000229a:	4802      	ldr	r0, [pc, #8]	; (100022a4 <boot_banner+0xc>)
1000229c:	f000 f807 	bl	100022ae <printk>
#endif /* CONFIG_BOOT_BANNER */
}
100022a0:	bd10      	pop	{r4, pc}
100022a2:	46c0      	nop			; (mov r8, r8)
100022a4:	10002da4 	.word	0x10002da4

100022a8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100022a8:	4770      	bx	lr

100022aa <arch_printk_char_out>:
}
100022aa:	2000      	movs	r0, #0
100022ac:	4770      	bx	lr

100022ae <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
100022ae:	b40f      	push	{r0, r1, r2, r3}
100022b0:	b507      	push	{r0, r1, r2, lr}
100022b2:	a904      	add	r1, sp, #16
100022b4:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
100022b6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
100022b8:	f7fe f8fe 	bl	100004b8 <vprintk>

	va_end(ap);
}
100022bc:	b003      	add	sp, #12
100022be:	bc08      	pop	{r3}
100022c0:	b004      	add	sp, #16
100022c2:	4718      	bx	r3

100022c4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100022c4:	b510      	push	{r4, lr}
100022c6:	0004      	movs	r4, r0
100022c8:	0008      	movs	r0, r1
100022ca:	0011      	movs	r1, r2
100022cc:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100022ce:	47a0      	blx	r4
	return z_impl_z_current_get();
100022d0:	f7ff fe2a 	bl	10001f28 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100022d4:	f7fe fe04 	bl	10000ee0 <z_impl_k_thread_abort>

100022d8 <encode_uint>:
{
100022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100022da:	b085      	sub	sp, #20
100022dc:	9001      	str	r0, [sp, #4]
100022de:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
100022e0:	78d3      	ldrb	r3, [r2, #3]
{
100022e2:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
100022e4:	001a      	movs	r2, r3
100022e6:	3a41      	subs	r2, #65	; 0x41
100022e8:	000f      	movs	r7, r1
	switch (specifier) {
100022ea:	2408      	movs	r4, #8
100022ec:	9202      	str	r2, [sp, #8]
100022ee:	2b6f      	cmp	r3, #111	; 0x6f
100022f0:	d00a      	beq.n	10002308 <encode_uint+0x30>
100022f2:	d804      	bhi.n	100022fe <encode_uint+0x26>
		return 16;
100022f4:	1924      	adds	r4, r4, r4
	switch (specifier) {
100022f6:	2b58      	cmp	r3, #88	; 0x58
100022f8:	d006      	beq.n	10002308 <encode_uint+0x30>
		return 10;
100022fa:	3c06      	subs	r4, #6
100022fc:	e004      	b.n	10002308 <encode_uint+0x30>
	switch (specifier) {
100022fe:	2208      	movs	r2, #8
		return 16;
10002300:	2410      	movs	r4, #16
	switch (specifier) {
10002302:	4393      	bics	r3, r2
10002304:	2b70      	cmp	r3, #112	; 0x70
10002306:	d1f8      	bne.n	100022fa <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10002308:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000230a:	0022      	movs	r2, r4
1000230c:	2300      	movs	r3, #0
1000230e:	0039      	movs	r1, r7
10002310:	9801      	ldr	r0, [sp, #4]
10002312:	f7fd ffc3 	bl	1000029c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002316:	0013      	movs	r3, r2
10002318:	468c      	mov	ip, r1
1000231a:	b2d2      	uxtb	r2, r2
1000231c:	2b09      	cmp	r3, #9
1000231e:	d81a      	bhi.n	10002356 <encode_uint+0x7e>
10002320:	3230      	adds	r2, #48	; 0x30
10002322:	b2d3      	uxtb	r3, r2
10002324:	3e01      	subs	r6, #1
10002326:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10002328:	2300      	movs	r3, #0
1000232a:	42bb      	cmp	r3, r7
1000232c:	d102      	bne.n	10002334 <encode_uint+0x5c>
1000232e:	9b01      	ldr	r3, [sp, #4]
10002330:	429c      	cmp	r4, r3
10002332:	d802      	bhi.n	1000233a <encode_uint+0x62>
10002334:	9b03      	ldr	r3, [sp, #12]
10002336:	429e      	cmp	r6, r3
10002338:	d80a      	bhi.n	10002350 <encode_uint+0x78>
	if (conv->flag_hash) {
1000233a:	782b      	ldrb	r3, [r5, #0]
1000233c:	069b      	lsls	r3, r3, #26
1000233e:	d504      	bpl.n	1000234a <encode_uint+0x72>
		if (radix == 8) {
10002340:	2c08      	cmp	r4, #8
10002342:	d110      	bne.n	10002366 <encode_uint+0x8e>
			conv->altform_0 = true;
10002344:	78ab      	ldrb	r3, [r5, #2]
10002346:	4323      	orrs	r3, r4
10002348:	70ab      	strb	r3, [r5, #2]
}
1000234a:	0030      	movs	r0, r6
1000234c:	b005      	add	sp, #20
1000234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10002350:	4667      	mov	r7, ip
10002352:	9001      	str	r0, [sp, #4]
10002354:	e7d9      	b.n	1000230a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002356:	0013      	movs	r3, r2
10002358:	9902      	ldr	r1, [sp, #8]
1000235a:	3357      	adds	r3, #87	; 0x57
1000235c:	b2db      	uxtb	r3, r3
1000235e:	2919      	cmp	r1, #25
10002360:	d8e0      	bhi.n	10002324 <encode_uint+0x4c>
10002362:	3237      	adds	r2, #55	; 0x37
10002364:	e7dd      	b.n	10002322 <encode_uint+0x4a>
		} else if (radix == 16) {
10002366:	2c10      	cmp	r4, #16
10002368:	d1ef      	bne.n	1000234a <encode_uint+0x72>
			conv->altform_0c = true;
1000236a:	78ab      	ldrb	r3, [r5, #2]
1000236c:	431c      	orrs	r4, r3
1000236e:	70ac      	strb	r4, [r5, #2]
	return bp;
10002370:	e7eb      	b.n	1000234a <encode_uint+0x72>

10002372 <outs>:
{
10002372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002374:	0007      	movs	r7, r0
10002376:	0015      	movs	r5, r2
10002378:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000237a:	0014      	movs	r4, r2
{
1000237c:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000237e:	42a6      	cmp	r6, r4
10002380:	d806      	bhi.n	10002390 <outs+0x1e>
10002382:	2e00      	cmp	r6, #0
10002384:	d001      	beq.n	1000238a <outs+0x18>
	return (int)count;
10002386:	1b60      	subs	r0, r4, r5
10002388:	e008      	b.n	1000239c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000238a:	7823      	ldrb	r3, [r4, #0]
1000238c:	2b00      	cmp	r3, #0
1000238e:	d0fa      	beq.n	10002386 <outs+0x14>
		int rc = out((int)*sp++, ctx);
10002390:	7820      	ldrb	r0, [r4, #0]
10002392:	9901      	ldr	r1, [sp, #4]
10002394:	47b8      	blx	r7
		if (rc < 0) {
10002396:	3401      	adds	r4, #1
10002398:	2800      	cmp	r0, #0
1000239a:	daf0      	bge.n	1000237e <outs+0xc>
}
1000239c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000239e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
1000239e:	4770      	bx	lr

100023a0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100023a0:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100023a2:	f000 fb0b 	bl	100029bc <z_fatal_error>
}
100023a6:	bd10      	pop	{r4, pc}

100023a8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
100023a8:	b510      	push	{r4, lr}
100023aa:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
100023ac:	6800      	ldr	r0, [r0, #0]
100023ae:	f000 fb05 	bl	100029bc <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
100023b2:	bd10      	pop	{r4, pc}

100023b4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
100023b4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
100023b6:	2100      	movs	r1, #0
100023b8:	2001      	movs	r0, #1
100023ba:	f7ff fff1 	bl	100023a0 <z_arm_fatal_error>
}
100023be:	bd10      	pop	{r4, pc}

100023c0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
100023c0:	b510      	push	{r4, lr}
	handler();
100023c2:	f7fe fc5d 	bl	10000c80 <z_SysNmiOnReset>
	z_arm_int_exit();
100023c6:	f7fe fd07 	bl	10000dd8 <z_arm_exc_exit>
}
100023ca:	bd10      	pop	{r4, pc}

100023cc <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
100023cc:	4770      	bx	lr

100023ce <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100023ce:	0003      	movs	r3, r0
	size_t n = 0;
100023d0:	2000      	movs	r0, #0

	while (*s != '\0') {
100023d2:	5c1a      	ldrb	r2, [r3, r0]
100023d4:	2a00      	cmp	r2, #0
100023d6:	d100      	bne.n	100023da <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
100023d8:	4770      	bx	lr
		n++;
100023da:	3001      	adds	r0, #1
100023dc:	e7f9      	b.n	100023d2 <strlen+0x4>

100023de <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
100023de:	0003      	movs	r3, r0
	size_t n = 0;
100023e0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
100023e2:	5c1a      	ldrb	r2, [r3, r0]
100023e4:	2a00      	cmp	r2, #0
100023e6:	d001      	beq.n	100023ec <strnlen+0xe>
100023e8:	4288      	cmp	r0, r1
100023ea:	d100      	bne.n	100023ee <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
100023ec:	4770      	bx	lr
		n++;
100023ee:	3001      	adds	r0, #1
100023f0:	e7f7      	b.n	100023e2 <strnlen+0x4>

100023f2 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
100023f2:	2300      	movs	r3, #0
{
100023f4:	b510      	push	{r4, lr}
	while (n > 0) {
100023f6:	429a      	cmp	r2, r3
100023f8:	d100      	bne.n	100023fc <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
100023fa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
100023fc:	5ccc      	ldrb	r4, [r1, r3]
100023fe:	54c4      	strb	r4, [r0, r3]
		n--;
10002400:	3301      	adds	r3, #1
10002402:	e7f8      	b.n	100023f6 <memcpy+0x4>

10002404 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10002404:	0003      	movs	r3, r0
10002406:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10002408:	1882      	adds	r2, r0, r2
1000240a:	4293      	cmp	r3, r2
1000240c:	d100      	bne.n	10002410 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000240e:	4770      	bx	lr
		*(d_byte++) = c_byte;
10002410:	7019      	strb	r1, [r3, #0]
		n--;
10002412:	3301      	adds	r3, #1
10002414:	e7f9      	b.n	1000240a <memset+0x6>

10002416 <_stdout_hook_default>:
	return EOF;
10002416:	2001      	movs	r0, #1
}
10002418:	4240      	negs	r0, r0
1000241a:	4770      	bx	lr

1000241c <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
1000241c:	23d0      	movs	r3, #208	; 0xd0
1000241e:	061b      	lsls	r3, r3, #24
10002420:	685b      	ldr	r3, [r3, #4]
}
10002422:	2000      	movs	r0, #0
	*value = gpio_get_all();
10002424:	600b      	str	r3, [r1, #0]
}
10002426:	4770      	bx	lr

10002428 <gpio_rpi_port_set_bits_raw>:
{
10002428:	000a      	movs	r2, r1
1000242a:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000242c:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
1000242e:	0010      	movs	r0, r2
10002430:	6919      	ldr	r1, [r3, #16]
10002432:	4388      	bics	r0, r1
10002434:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10002436:	20d0      	movs	r0, #208	; 0xd0
10002438:	0600      	lsls	r0, r0, #24
1000243a:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000243c:	691c      	ldr	r4, [r3, #16]
1000243e:	6959      	ldr	r1, [r3, #20]
10002440:	4021      	ands	r1, r4
10002442:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10002444:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10002446:	6919      	ldr	r1, [r3, #16]
10002448:	695b      	ldr	r3, [r3, #20]
1000244a:	4011      	ands	r1, r2
1000244c:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
1000244e:	6241      	str	r1, [r0, #36]	; 0x24
}
10002450:	2000      	movs	r0, #0
10002452:	bd10      	pop	{r4, pc}

10002454 <gpio_rpi_port_clear_bits_raw>:
{
10002454:	000a      	movs	r2, r1
10002456:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10002458:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
1000245a:	0010      	movs	r0, r2
1000245c:	6919      	ldr	r1, [r3, #16]
1000245e:	4388      	bics	r0, r1
10002460:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10002462:	20d0      	movs	r0, #208	; 0xd0
10002464:	0600      	lsls	r0, r0, #24
10002466:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
10002468:	691c      	ldr	r4, [r3, #16]
1000246a:	6959      	ldr	r1, [r3, #20]
1000246c:	4021      	ands	r1, r4
1000246e:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10002470:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10002472:	6919      	ldr	r1, [r3, #16]
10002474:	695b      	ldr	r3, [r3, #20]
10002476:	4011      	ands	r1, r2
10002478:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000247a:	6281      	str	r1, [r0, #40]	; 0x28
}
1000247c:	2000      	movs	r0, #0
1000247e:	bd10      	pop	{r4, pc}

10002480 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
10002480:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
10002482:	0008      	movs	r0, r1
10002484:	691a      	ldr	r2, [r3, #16]
10002486:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
10002488:	22d0      	movs	r2, #208	; 0xd0
1000248a:	0612      	lsls	r2, r2, #24
1000248c:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000248e:	691b      	ldr	r3, [r3, #16]
}
10002490:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10002492:	400b      	ands	r3, r1
10002494:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002496:	4770      	bx	lr

10002498 <gpio_rpi_manage_callback>:
{
10002498:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
1000249a:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
1000249c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
1000249e:	2800      	cmp	r0, #0
100024a0:	d021      	beq.n	100024e6 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100024a2:	4288      	cmp	r0, r1
100024a4:	d11b      	bne.n	100024de <gpio_rpi_manage_callback+0x46>
	return node->next;
100024a6:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
100024a8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
100024aa:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100024ac:	42a1      	cmp	r1, r4
100024ae:	d100      	bne.n	100024b2 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100024b0:	6098      	str	r0, [r3, #8]
	parent->next = child;
100024b2:	2000      	movs	r0, #0
100024b4:	6008      	str	r0, [r1, #0]
	if (set) {
100024b6:	4282      	cmp	r2, r0
100024b8:	d006      	beq.n	100024c8 <gpio_rpi_manage_callback+0x30>
	return list->head;
100024ba:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
100024bc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
100024be:	689a      	ldr	r2, [r3, #8]
	list->head = node;
100024c0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
100024c2:	2a00      	cmp	r2, #0
100024c4:	d100      	bne.n	100024c8 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
100024c6:	6099      	str	r1, [r3, #8]
	return 0;
100024c8:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
100024ca:	e010      	b.n	100024ee <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100024cc:	4281      	cmp	r1, r0
100024ce:	d106      	bne.n	100024de <gpio_rpi_manage_callback+0x46>
	return node->next;
100024d0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
100024d2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100024d4:	6898      	ldr	r0, [r3, #8]
100024d6:	4281      	cmp	r1, r0
100024d8:	d1eb      	bne.n	100024b2 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100024da:	609c      	str	r4, [r3, #8]
}
100024dc:	e7e9      	b.n	100024b2 <gpio_rpi_manage_callback+0x1a>
	return node->next;
100024de:	0004      	movs	r4, r0
100024e0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100024e2:	2800      	cmp	r0, #0
100024e4:	d1f2      	bne.n	100024cc <gpio_rpi_manage_callback+0x34>
			if (!set) {
100024e6:	2a00      	cmp	r2, #0
100024e8:	d1e7      	bne.n	100024ba <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
100024ea:	2016      	movs	r0, #22
100024ec:	4240      	negs	r0, r0
}
100024ee:	bd10      	pop	{r4, pc}

100024f0 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
100024f0:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
100024f2:	6843      	ldr	r3, [r0, #4]
100024f4:	685b      	ldr	r3, [r3, #4]
100024f6:	4798      	blx	r3
	return 0;
}
100024f8:	2000      	movs	r0, #0
100024fa:	bd10      	pop	{r4, pc}

100024fc <gpio_rpi_pin_interrupt_configure>:
{
100024fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100024fe:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10002500:	6907      	ldr	r7, [r0, #16]
{
10002502:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10002504:	210f      	movs	r1, #15
10002506:	2200      	movs	r2, #0
10002508:	0028      	movs	r0, r5
{
1000250a:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000250c:	f7ff f8b6 	bl	1000167c <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002510:	2201      	movs	r2, #1
10002512:	0013      	movs	r3, r2
10002514:	40ab      	lsls	r3, r5
10002516:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10002518:	2380      	movs	r3, #128	; 0x80
1000251a:	039b      	lsls	r3, r3, #14
1000251c:	429e      	cmp	r6, r3
1000251e:	d105      	bne.n	1000252c <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002520:	68fb      	ldr	r3, [r7, #12]
10002522:	9a01      	ldr	r2, [sp, #4]
10002524:	4393      	bics	r3, r2
}
10002526:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002528:	60fb      	str	r3, [r7, #12]
}
1000252a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
1000252c:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
1000252e:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10002530:	04db      	lsls	r3, r3, #19
10002532:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10002534:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10002536:	01f6      	lsls	r6, r6, #7
10002538:	d50d      	bpl.n	10002556 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
1000253a:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
1000253c:	2b00      	cmp	r3, #0
1000253e:	d001      	beq.n	10002544 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10002540:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10002542:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10002544:	2201      	movs	r2, #1
10002546:	0028      	movs	r0, r5
10002548:	f7ff f898 	bl	1000167c <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000254c:	68fb      	ldr	r3, [r7, #12]
1000254e:	9a01      	ldr	r2, [sp, #4]
10002550:	431a      	orrs	r2, r3
10002552:	0013      	movs	r3, r2
10002554:	e7e7      	b.n	10002526 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10002556:	2b00      	cmp	r3, #0
10002558:	d0f4      	beq.n	10002544 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
1000255a:	2302      	movs	r3, #2
1000255c:	e7f1      	b.n	10002542 <gpio_rpi_pin_interrupt_configure+0x46>

1000255e <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
1000255e:	b510      	push	{r4, lr}
10002560:	2200      	movs	r2, #0
10002562:	2103      	movs	r1, #3
10002564:	200d      	movs	r0, #13
10002566:	f7fe fb61 	bl	10000c2c <z_arm_irq_priority_set>
1000256a:	200d      	movs	r0, #13
1000256c:	f7fe fb52 	bl	10000c14 <arch_irq_enable>
10002570:	bd10      	pop	{r4, pc}

10002572 <gpio_rpi_port_set_masked_raw>:
{
10002572:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
10002574:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002576:	20d0      	movs	r0, #208	; 0xd0
10002578:	0600      	lsls	r0, r0, #24
1000257a:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
1000257c:	6925      	ldr	r5, [r4, #16]
1000257e:	4053      	eors	r3, r2
10002580:	400b      	ands	r3, r1
10002582:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10002584:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002586:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10002588:	6a03      	ldr	r3, [r0, #32]
1000258a:	4053      	eors	r3, r2
1000258c:	439d      	bics	r5, r3
1000258e:	002b      	movs	r3, r5
10002590:	6925      	ldr	r5, [r4, #16]
10002592:	401d      	ands	r5, r3
10002594:	6963      	ldr	r3, [r4, #20]
10002596:	402b      	ands	r3, r5
10002598:	62c3      	str	r3, [r0, #44]	; 0x2c
1000259a:	6a03      	ldr	r3, [r0, #32]
1000259c:	405a      	eors	r2, r3
1000259e:	400a      	ands	r2, r1
100025a0:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
100025a2:	6963      	ldr	r3, [r4, #20]
100025a4:	4011      	ands	r1, r2
100025a6:	4399      	bics	r1, r3
100025a8:	62c1      	str	r1, [r0, #44]	; 0x2c
}
100025aa:	2000      	movs	r0, #0
100025ac:	bd30      	pop	{r4, r5, pc}

100025ae <gpio_rpi_configure>:
{
100025ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100025b0:	0015      	movs	r5, r2
100025b2:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
100025b4:	2401      	movs	r4, #1
100025b6:	0952      	lsrs	r2, r2, #5
100025b8:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
100025ba:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
100025bc:	4021      	ands	r1, r4
100025be:	0038      	movs	r0, r7
100025c0:	4022      	ands	r2, r4
100025c2:	f7ff f811 	bl	100015e8 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100025c6:	2105      	movs	r1, #5
100025c8:	0038      	movs	r0, r7
100025ca:	f7fe fff7 	bl	100015bc <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100025ce:	03ab      	lsls	r3, r5, #14
100025d0:	d525      	bpl.n	1000261e <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
100025d2:	40bc      	lsls	r4, r7
100025d4:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
100025d6:	07a9      	lsls	r1, r5, #30
100025d8:	d515      	bpl.n	10002606 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
100025da:	4322      	orrs	r2, r4
100025dc:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100025de:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
100025e0:	6971      	ldr	r1, [r6, #20]
100025e2:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100025e4:	0768      	lsls	r0, r5, #29
100025e6:	d507      	bpl.n	100025f8 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
100025e8:	4321      	orrs	r1, r4
100025ea:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
100025ec:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
100025ee:	036d      	lsls	r5, r5, #13
100025f0:	d507      	bpl.n	10002602 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
100025f2:	6254      	str	r4, [r2, #36]	; 0x24
}
100025f4:	2000      	movs	r0, #0
100025f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
100025f8:	43a1      	bics	r1, r4
100025fa:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
100025fc:	6154      	str	r4, [r2, #20]
    if (out)
100025fe:	032d      	lsls	r5, r5, #12
10002600:	d4f7      	bmi.n	100025f2 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
10002602:	6294      	str	r4, [r2, #40]	; 0x28
}
10002604:	e7f6      	b.n	100025f4 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
10002606:	43a2      	bics	r2, r4
10002608:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
1000260a:	22d0      	movs	r2, #208	; 0xd0
1000260c:	0612      	lsls	r2, r2, #24
1000260e:	0329      	lsls	r1, r5, #12
10002610:	d501      	bpl.n	10002616 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
10002612:	6154      	str	r4, [r2, #20]
}
10002614:	e7ed      	b.n	100025f2 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10002616:	036d      	lsls	r5, r5, #13
10002618:	d5eb      	bpl.n	100025f2 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
1000261a:	6194      	str	r4, [r2, #24]
}
1000261c:	e7e9      	b.n	100025f2 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
1000261e:	03ed      	lsls	r5, r5, #15
10002620:	d5e8      	bpl.n	100025f4 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
10002622:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10002624:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
10002626:	0612      	lsls	r2, r2, #24
10002628:	e7eb      	b.n	10002602 <gpio_rpi_configure+0x54>

1000262a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000262a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
1000262c:	6803      	ldr	r3, [r0, #0]
1000262e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10002630:	7905      	ldrb	r5, [r0, #4]
10002632:	6804      	ldr	r4, [r0, #0]
10002634:	00ed      	lsls	r5, r5, #3
10002636:	1964      	adds	r4, r4, r5
10002638:	42a3      	cmp	r3, r4
1000263a:	d302      	bcc.n	10002642 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
1000263c:	2002      	movs	r0, #2
1000263e:	4240      	negs	r0, r0
}
10002640:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10002642:	795c      	ldrb	r4, [r3, #5]
10002644:	428c      	cmp	r4, r1
10002646:	d001      	beq.n	1000264c <pinctrl_lookup_state+0x22>
		(*state)++;
10002648:	3308      	adds	r3, #8
1000264a:	e7f0      	b.n	1000262e <pinctrl_lookup_state+0x4>
			return 0;
1000264c:	2000      	movs	r0, #0
1000264e:	e7f7      	b.n	10002640 <pinctrl_lookup_state+0x16>

10002650 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002652:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002654:	2601      	movs	r6, #1
10002656:	008d      	lsls	r5, r1, #2
10002658:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000265a:	42ac      	cmp	r4, r5
1000265c:	d101      	bne.n	10002662 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
1000265e:	2000      	movs	r0, #0
10002660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10002662:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10002664:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10002666:	06c0      	lsls	r0, r0, #27
10002668:	0ec0      	lsrs	r0, r0, #27
1000266a:	f000 f987 	bl	1000297c <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
1000266e:	8821      	ldrh	r1, [r4, #0]
10002670:	7820      	ldrb	r0, [r4, #0]
10002672:	05c9      	lsls	r1, r1, #23
10002674:	06c0      	lsls	r0, r0, #27
10002676:	0f09      	lsrs	r1, r1, #28
10002678:	0ec0      	lsrs	r0, r0, #27
1000267a:	f7fe ff9f 	bl	100015bc <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
1000267e:	7861      	ldrb	r1, [r4, #1]
10002680:	7820      	ldrb	r0, [r4, #0]
10002682:	09ca      	lsrs	r2, r1, #7
10002684:	06c0      	lsls	r0, r0, #27
10002686:	0649      	lsls	r1, r1, #25
10002688:	0fc9      	lsrs	r1, r1, #31
1000268a:	0ec0      	lsrs	r0, r0, #27
1000268c:	f7fe ffac 	bl	100015e8 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10002690:	7861      	ldrb	r1, [r4, #1]
10002692:	7820      	ldrb	r0, [r4, #0]
10002694:	06c9      	lsls	r1, r1, #27
10002696:	06c0      	lsls	r0, r0, #27
10002698:	0f09      	lsrs	r1, r1, #28
1000269a:	0ec0      	lsrs	r0, r0, #27
1000269c:	f7fe ffd2 	bl	10001644 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100026a0:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100026a2:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100026a4:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
100026a6:	06c0      	lsls	r0, r0, #27
100026a8:	4031      	ands	r1, r6
100026aa:	0ec0      	lsrs	r0, r0, #27
100026ac:	f7fe ffbc 	bl	10001628 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
100026b0:	78a1      	ldrb	r1, [r4, #2]
100026b2:	7820      	ldrb	r0, [r4, #0]
100026b4:	0789      	lsls	r1, r1, #30
100026b6:	06c0      	lsls	r0, r0, #27
100026b8:	0fc9      	lsrs	r1, r1, #31
100026ba:	0ec0      	lsrs	r0, r0, #27
100026bc:	f7fe ffa6 	bl	1000160c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100026c0:	78a1      	ldrb	r1, [r4, #2]
100026c2:	7820      	ldrb	r0, [r4, #0]
100026c4:	07c9      	lsls	r1, r1, #31
100026c6:	06c0      	lsls	r0, r0, #27
100026c8:	0fc9      	lsrs	r1, r1, #31
100026ca:	0ec0      	lsrs	r0, r0, #27
100026cc:	f7fe fff8 	bl	100016c0 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
100026d0:	003c      	movs	r4, r7
100026d2:	e7c2      	b.n	1000265a <pinctrl_configure_pins+0xa>

100026d4 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
100026d4:	2000      	movs	r0, #0
100026d6:	4770      	bx	lr

100026d8 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
100026d8:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
100026da:	7900      	ldrb	r0, [r0, #4]
100026dc:	2802      	cmp	r0, #2
100026de:	d009      	beq.n	100026f4 <reset_rpi_read_register.isra.0+0x1c>
100026e0:	2804      	cmp	r0, #4
100026e2:	d00b      	beq.n	100026fc <reset_rpi_read_register.isra.0+0x24>
100026e4:	2801      	cmp	r0, #1
100026e6:	d10c      	bne.n	10002702 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
100026e8:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
100026ea:	780b      	ldrb	r3, [r1, #0]
100026ec:	b2db      	uxtb	r3, r3
	return 0;
100026ee:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
100026f0:	6013      	str	r3, [r2, #0]
}
100026f2:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
100026f4:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
100026f6:	880b      	ldrh	r3, [r1, #0]
100026f8:	b29b      	uxth	r3, r3
		break;
100026fa:	e7f8      	b.n	100026ee <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
100026fc:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100026fe:	680b      	ldr	r3, [r1, #0]
		break;
10002700:	e7f5      	b.n	100026ee <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10002702:	2016      	movs	r0, #22
10002704:	4240      	negs	r0, r0
10002706:	e7f4      	b.n	100026f2 <reset_rpi_read_register.isra.0+0x1a>

10002708 <reset_rpi_update>:
{
10002708:	0003      	movs	r3, r0
1000270a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000270c:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
1000270e:	685f      	ldr	r7, [r3, #4]
{
10002710:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10002712:	793e      	ldrb	r6, [r7, #4]
{
10002714:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002716:	00f1      	lsls	r1, r6, #3
10002718:	f7fd fd96 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000271c:	aa03      	add	r2, sp, #12
1000271e:	0004      	movs	r4, r0
10002720:	000d      	movs	r5, r1
10002722:	b281      	uxth	r1, r0
10002724:	0038      	movs	r0, r7
10002726:	f7ff ffd7 	bl	100026d8 <reset_rpi_read_register.isra.0>
	if (ret) {
1000272a:	2800      	cmp	r0, #0
1000272c:	d117      	bne.n	1000275e <reset_rpi_update+0x56>
		value |= BIT(regbit);
1000272e:	2201      	movs	r2, #1
10002730:	9903      	ldr	r1, [sp, #12]
10002732:	b2ed      	uxtb	r5, r5
10002734:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
10002736:	000b      	movs	r3, r1
		value |= BIT(regbit);
10002738:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
1000273a:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
1000273c:	797d      	ldrb	r5, [r7, #5]
1000273e:	9a01      	ldr	r2, [sp, #4]
10002740:	4295      	cmp	r5, r2
10002742:	d001      	beq.n	10002748 <reset_rpi_update+0x40>
		value |= BIT(regbit);
10002744:	4663      	mov	r3, ip
10002746:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10002748:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
1000274a:	2e02      	cmp	r6, #2
1000274c:	d009      	beq.n	10002762 <reset_rpi_update+0x5a>
1000274e:	2e04      	cmp	r6, #4
10002750:	d00c      	beq.n	1000276c <reset_rpi_update+0x64>
10002752:	2e01      	cmp	r6, #1
10002754:	d10e      	bne.n	10002774 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
10002756:	b2a4      	uxth	r4, r4
10002758:	b2db      	uxtb	r3, r3
1000275a:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
1000275c:	7023      	strb	r3, [r4, #0]
}
1000275e:	b005      	add	sp, #20
10002760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10002762:	b2a4      	uxth	r4, r4
10002764:	b29b      	uxth	r3, r3
10002766:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10002768:	8023      	strh	r3, [r4, #0]
}
1000276a:	e7f8      	b.n	1000275e <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
1000276c:	b2a4      	uxth	r4, r4
1000276e:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002770:	6023      	str	r3, [r4, #0]
}
10002772:	e7f4      	b.n	1000275e <reset_rpi_update+0x56>
	switch (config->reg_width) {
10002774:	2016      	movs	r0, #22
10002776:	4240      	negs	r0, r0
10002778:	e7f1      	b.n	1000275e <reset_rpi_update+0x56>

1000277a <reset_rpi_line_assert>:
{
1000277a:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
1000277c:	2201      	movs	r2, #1
1000277e:	f7ff ffc3 	bl	10002708 <reset_rpi_update>
}
10002782:	bd10      	pop	{r4, pc}

10002784 <reset_rpi_line_deassert>:
{
10002784:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10002786:	2200      	movs	r2, #0
10002788:	f7ff ffbe 	bl	10002708 <reset_rpi_update>
}
1000278c:	bd10      	pop	{r4, pc}

1000278e <reset_rpi_line_toggle>:
{
1000278e:	b570      	push	{r4, r5, r6, lr}
10002790:	0004      	movs	r4, r0
10002792:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10002794:	f7ff fff1 	bl	1000277a <reset_rpi_line_assert>
	if (ret) {
10002798:	2800      	cmp	r0, #0
1000279a:	d103      	bne.n	100027a4 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
1000279c:	0029      	movs	r1, r5
1000279e:	0020      	movs	r0, r4
100027a0:	f7ff fff0 	bl	10002784 <reset_rpi_line_deassert>
}
100027a4:	bd70      	pop	{r4, r5, r6, pc}

100027a6 <reset_rpi_status>:
{
100027a6:	0003      	movs	r3, r0
100027a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
100027aa:	685e      	ldr	r6, [r3, #4]
{
100027ac:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100027ae:	7931      	ldrb	r1, [r6, #4]
{
100027b0:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
100027b2:	00c9      	lsls	r1, r1, #3
100027b4:	f7fd fd48 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100027b8:	aa01      	add	r2, sp, #4
100027ba:	000d      	movs	r5, r1
100027bc:	b281      	uxth	r1, r0
100027be:	0030      	movs	r0, r6
100027c0:	f7ff ff8a 	bl	100026d8 <reset_rpi_read_register.isra.0>
	if (ret) {
100027c4:	2800      	cmp	r0, #0
100027c6:	d109      	bne.n	100027dc <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
100027c8:	9b01      	ldr	r3, [sp, #4]
100027ca:	b2ed      	uxtb	r5, r5
100027cc:	40eb      	lsrs	r3, r5
100027ce:	2201      	movs	r2, #1
100027d0:	439a      	bics	r2, r3
100027d2:	7973      	ldrb	r3, [r6, #5]
100027d4:	4259      	negs	r1, r3
100027d6:	414b      	adcs	r3, r1
100027d8:	4053      	eors	r3, r2
100027da:	7023      	strb	r3, [r4, #0]
}
100027dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

100027de <uart_rpi_poll_in>:
{
100027de:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
100027e0:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
100027e2:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100027e4:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
100027e6:	699c      	ldr	r4, [r3, #24]
100027e8:	0020      	movs	r0, r4
100027ea:	4010      	ands	r0, r2
100027ec:	4214      	tst	r4, r2
100027ee:	d102      	bne.n	100027f6 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
100027f0:	681b      	ldr	r3, [r3, #0]
100027f2:	700b      	strb	r3, [r1, #0]
}
100027f4:	bd10      	pop	{r4, pc}
		return -1;
100027f6:	2001      	movs	r0, #1
100027f8:	4240      	negs	r0, r0
100027fa:	e7fb      	b.n	100027f4 <uart_rpi_poll_in+0x16>

100027fc <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
100027fc:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100027fe:	6843      	ldr	r3, [r0, #4]
10002800:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002802:	6998      	ldr	r0, [r3, #24]
10002804:	4210      	tst	r0, r2
10002806:	d1fc      	bne.n	10002802 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10002808:	6019      	str	r1, [r3, #0]
}
1000280a:	4770      	bx	lr

1000280c <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000280c:	6843      	ldr	r3, [r0, #4]
1000280e:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10002810:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10002812:	0518      	lsls	r0, r3, #20
10002814:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10002816:	055a      	lsls	r2, r3, #21
10002818:	d501      	bpl.n	1000281e <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
1000281a:	2208      	movs	r2, #8
1000281c:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
1000281e:	059a      	lsls	r2, r3, #22
10002820:	d501      	bpl.n	10002826 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10002822:	2202      	movs	r2, #2
10002824:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10002826:	05db      	lsls	r3, r3, #23
10002828:	d501      	bpl.n	1000282e <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
1000282a:	2304      	movs	r3, #4
1000282c:	4318      	orrs	r0, r3
}
1000282e:	4770      	bx	lr

10002830 <uart_rpi_fifo_fill>:
{
10002830:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002832:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002834:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002836:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002838:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000283a:	699c      	ldr	r4, [r3, #24]
1000283c:	422c      	tst	r4, r5
1000283e:	d102      	bne.n	10002846 <uart_rpi_fifo_fill+0x16>
10002840:	1a14      	subs	r4, r2, r0
10002842:	2c00      	cmp	r4, #0
10002844:	dc00      	bgt.n	10002848 <uart_rpi_fifo_fill+0x18>
}
10002846:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10002848:	5c0c      	ldrb	r4, [r1, r0]
1000284a:	3001      	adds	r0, #1
1000284c:	601c      	str	r4, [r3, #0]
1000284e:	e7f4      	b.n	1000283a <uart_rpi_fifo_fill+0xa>

10002850 <uart_rpi_fifo_read>:
{
10002850:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002852:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002854:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002856:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002858:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000285a:	699c      	ldr	r4, [r3, #24]
1000285c:	422c      	tst	r4, r5
1000285e:	d102      	bne.n	10002866 <uart_rpi_fifo_read+0x16>
10002860:	1a14      	subs	r4, r2, r0
10002862:	2c00      	cmp	r4, #0
10002864:	dc00      	bgt.n	10002868 <uart_rpi_fifo_read+0x18>
}
10002866:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10002868:	681c      	ldr	r4, [r3, #0]
1000286a:	540c      	strb	r4, [r1, r0]
1000286c:	3001      	adds	r0, #1
1000286e:	e7f4      	b.n	1000285a <uart_rpi_fifo_read+0xa>

10002870 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002870:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002872:	6843      	ldr	r3, [r0, #4]
10002874:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002876:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002878:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000287a:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000287c:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000287e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002880:	438a      	bics	r2, r1
10002882:	635a      	str	r2, [r3, #52]	; 0x34
}
10002884:	4770      	bx	lr

10002886 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002886:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002888:	6843      	ldr	r3, [r0, #4]
1000288a:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000288c:	6b93      	ldr	r3, [r2, #56]	; 0x38
1000288e:	438b      	bics	r3, r1
10002890:	6393      	str	r3, [r2, #56]	; 0x38
}
10002892:	4770      	bx	lr

10002894 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002894:	6843      	ldr	r3, [r0, #4]
10002896:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10002898:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000289a:	0680      	lsls	r0, r0, #26
1000289c:	0fc0      	lsrs	r0, r0, #31
}
1000289e:	4770      	bx	lr

100028a0 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100028a0:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100028a2:	6843      	ldr	r3, [r0, #4]
100028a4:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100028a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
100028a8:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100028aa:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100028ac:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100028b0:	438a      	bics	r2, r1
100028b2:	635a      	str	r2, [r3, #52]	; 0x34
}
100028b4:	4770      	bx	lr

100028b6 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100028b6:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100028b8:	6843      	ldr	r3, [r0, #4]
100028ba:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100028bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
100028be:	438b      	bics	r3, r1
100028c0:	6393      	str	r3, [r2, #56]	; 0x38
}
100028c2:	4770      	bx	lr

100028c4 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100028c4:	6843      	ldr	r3, [r0, #4]
100028c6:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100028c8:	6998      	ldr	r0, [r3, #24]
100028ca:	0600      	lsls	r0, r0, #24
100028cc:	0fc0      	lsrs	r0, r0, #31
}
100028ce:	4770      	bx	lr

100028d0 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100028d0:	6843      	ldr	r3, [r0, #4]
100028d2:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100028d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
100028d6:	06c0      	lsls	r0, r0, #27
100028d8:	0fc0      	lsrs	r0, r0, #31
}
100028da:	4770      	bx	lr

100028dc <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
100028dc:	6843      	ldr	r3, [r0, #4]
100028de:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
100028e0:	23f8      	movs	r3, #248	; 0xf8
100028e2:	6b91      	ldr	r1, [r2, #56]	; 0x38
100028e4:	00db      	lsls	r3, r3, #3
100028e6:	430b      	orrs	r3, r1
100028e8:	6393      	str	r3, [r2, #56]	; 0x38
}
100028ea:	4770      	bx	lr

100028ec <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
100028ec:	b510      	push	{r4, lr}
100028ee:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
100028f0:	f7ff ffee 	bl	100028d0 <uart_rpi_irq_rx_ready>
100028f4:	0003      	movs	r3, r0
100028f6:	2001      	movs	r0, #1
100028f8:	2b00      	cmp	r3, #0
100028fa:	d104      	bne.n	10002906 <uart_rpi_irq_is_pending+0x1a>
100028fc:	0020      	movs	r0, r4
100028fe:	f7ff ffc9 	bl	10002894 <uart_rpi_irq_tx_ready>
10002902:	1e43      	subs	r3, r0, #1
10002904:	4198      	sbcs	r0, r3
}
10002906:	bd10      	pop	{r4, pc}

10002908 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10002908:	2001      	movs	r0, #1
1000290a:	4770      	bx	lr

1000290c <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
1000290c:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
1000290e:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10002910:	60da      	str	r2, [r3, #12]
}
10002912:	4770      	bx	lr

10002914 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10002914:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10002916:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10002918:	6893      	ldr	r3, [r2, #8]
1000291a:	2b00      	cmp	r3, #0
1000291c:	d001      	beq.n	10002922 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
1000291e:	68d1      	ldr	r1, [r2, #12]
10002920:	4798      	blx	r3
	}
}
10002922:	bd10      	pop	{r4, pc}

10002924 <uart_rpi_config_get>:
{
10002924:	0003      	movs	r3, r0
10002926:	b510      	push	{r4, lr}
10002928:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
1000292a:	2208      	movs	r2, #8
1000292c:	6919      	ldr	r1, [r3, #16]
1000292e:	f7ff fd60 	bl	100023f2 <memcpy>
}
10002932:	2000      	movs	r0, #0
10002934:	bd10      	pop	{r4, pc}

10002936 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10002936:	b510      	push	{r4, lr}
10002938:	2200      	movs	r2, #0
1000293a:	2103      	movs	r1, #3
1000293c:	2014      	movs	r0, #20
1000293e:	f7fe f975 	bl	10000c2c <z_arm_irq_priority_set>
10002942:	2014      	movs	r0, #20
10002944:	f7fe f966 	bl	10000c14 <arch_irq_enable>
10002948:	bd10      	pop	{r4, pc}

1000294a <uart_rpi_configure>:
{
1000294a:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
1000294c:	6843      	ldr	r3, [r0, #4]
{
1000294e:	0006      	movs	r6, r0
10002950:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10002952:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10002954:	6809      	ldr	r1, [r1, #0]
10002956:	6818      	ldr	r0, [r3, #0]
10002958:	f7fe fec0 	bl	100016dc <uart_set_baudrate>
	if (baudrate == 0) {
1000295c:	2800      	cmp	r0, #0
1000295e:	d102      	bne.n	10002966 <uart_rpi_configure+0x1c>
		return -EINVAL;
10002960:	2016      	movs	r0, #22
10002962:	4240      	negs	r0, r0
}
10002964:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10002966:	79a3      	ldrb	r3, [r4, #6]
10002968:	7962      	ldrb	r2, [r4, #5]
1000296a:	7921      	ldrb	r1, [r4, #4]
1000296c:	6870      	ldr	r0, [r6, #4]
1000296e:	f7fe fb69 	bl	10001044 <uart_rpi_set_format.isra.0>
10002972:	2800      	cmp	r0, #0
10002974:	d1f4      	bne.n	10002960 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10002976:	cc06      	ldmia	r4!, {r1, r2}
10002978:	c506      	stmia	r5!, {r1, r2}
	return 0;
1000297a:	e7f3      	b.n	10002964 <uart_rpi_configure+0x1a>

1000297c <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000297c:	2301      	movs	r3, #1
1000297e:	22d0      	movs	r2, #208	; 0xd0
10002980:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10002982:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002984:	0612      	lsls	r2, r2, #24
10002986:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002988:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
1000298a:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000298c:	f7fe fe16 	bl	100015bc <gpio_set_function>
}
10002990:	bd10      	pop	{r4, pc}

10002992 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10002992:	4770      	bx	lr

10002994 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10002994:	2800      	cmp	r0, #0
10002996:	d009      	beq.n	100029ac <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10002998:	2301      	movs	r3, #1
1000299a:	68c2      	ldr	r2, [r0, #12]
1000299c:	2000      	movs	r0, #0
1000299e:	7851      	ldrb	r1, [r2, #1]
100029a0:	4219      	tst	r1, r3
100029a2:	d002      	beq.n	100029aa <z_device_is_ready+0x16>
100029a4:	7810      	ldrb	r0, [r2, #0]
100029a6:	4242      	negs	r2, r0
100029a8:	4150      	adcs	r0, r2
100029aa:	4018      	ands	r0, r3
}
100029ac:	4770      	bx	lr

100029ae <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
100029ae:	f3ef 8310 	mrs	r3, PRIMASK
100029b2:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
100029b4:	e7fe      	b.n	100029b4 <arch_system_halt+0x6>

100029b6 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100029b6:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
100029b8:	f7ff fff9 	bl	100029ae <arch_system_halt>

100029bc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100029be:	0005      	movs	r5, r0
100029c0:	000e      	movs	r6, r1
100029c2:	f3ef 8710 	mrs	r7, PRIMASK
100029c6:	b672      	cpsid	i
	return z_impl_z_current_get();
100029c8:	f7ff faae 	bl	10001f28 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100029cc:	0031      	movs	r1, r6
100029ce:	0004      	movs	r4, r0
100029d0:	0028      	movs	r0, r5
100029d2:	f7ff fff0 	bl	100029b6 <k_sys_fatal_error_handler>
	if (key != 0U) {
100029d6:	2f00      	cmp	r7, #0
100029d8:	d102      	bne.n	100029e0 <z_fatal_error+0x24>
	__asm__ volatile(
100029da:	b662      	cpsie	i
100029dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100029e0:	0020      	movs	r0, r4
100029e2:	f7fe fa7d 	bl	10000ee0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100029e8 <z_early_memset>:
{
100029e8:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
100029ea:	f7ff fd0b 	bl	10002404 <memset>
}
100029ee:	bd10      	pop	{r4, pc}

100029f0 <z_early_memcpy>:
{
100029f0:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
100029f2:	f7ff fcfe 	bl	100023f2 <memcpy>
}
100029f6:	bd10      	pop	{r4, pc}

100029f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
100029f8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100029fa:	f3ef 8310 	mrs	r3, PRIMASK
100029fe:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10002a00:	f7fe f900 	bl	10000c04 <arch_cpu_idle>
10002a04:	e7f9      	b.n	100029fa <idle+0x2>

10002a06 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10002a06:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002a08:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10002a0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002a0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002a0e:	2300      	movs	r3, #0
10002a10:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002a12:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10002a14:	4770      	bx	lr

10002a16 <unpend_thread_no_timeout>:
{
10002a16:	b510      	push	{r4, lr}
10002a18:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10002a1a:	f7ff fff4 	bl	10002a06 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10002a1e:	2202      	movs	r2, #2
10002a20:	7b63      	ldrb	r3, [r4, #13]
10002a22:	4393      	bics	r3, r2
10002a24:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10002a26:	2300      	movs	r3, #0
10002a28:	60a3      	str	r3, [r4, #8]
}
10002a2a:	bd10      	pop	{r4, pc}

10002a2c <z_ready_thread>:
{
10002a2c:	b510      	push	{r4, lr}
10002a2e:	f3ef 8410 	mrs	r4, PRIMASK
10002a32:	b672      	cpsid	i
			ready_thread(thread);
10002a34:	f7ff f8a4 	bl	10001b80 <ready_thread>
	if (key != 0U) {
10002a38:	2c00      	cmp	r4, #0
10002a3a:	d102      	bne.n	10002a42 <z_ready_thread+0x16>
	__asm__ volatile(
10002a3c:	b662      	cpsie	i
10002a3e:	f3bf 8f6f 	isb	sy
}
10002a42:	bd10      	pop	{r4, pc}

10002a44 <z_sched_wake_thread>:
{
10002a44:	b570      	push	{r4, r5, r6, lr}
10002a46:	0004      	movs	r4, r0
10002a48:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10002a4a:	f3ef 8510 	mrs	r5, PRIMASK
10002a4e:	b672      	cpsid	i
		if (!killed) {
10002a50:	2328      	movs	r3, #40	; 0x28
10002a52:	7b42      	ldrb	r2, [r0, #13]
10002a54:	421a      	tst	r2, r3
10002a56:	d10e      	bne.n	10002a76 <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10002a58:	6883      	ldr	r3, [r0, #8]
10002a5a:	2b00      	cmp	r3, #0
10002a5c:	d001      	beq.n	10002a62 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10002a5e:	f7ff ffda 	bl	10002a16 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002a62:	2204      	movs	r2, #4
10002a64:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10002a66:	2e00      	cmp	r6, #0
10002a68:	d000      	beq.n	10002a6c <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10002a6a:	2214      	movs	r2, #20
10002a6c:	4393      	bics	r3, r2
			ready_thread(thread);
10002a6e:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002a70:	7363      	strb	r3, [r4, #13]
10002a72:	f7ff f885 	bl	10001b80 <ready_thread>
	if (key != 0U) {
10002a76:	2d00      	cmp	r5, #0
10002a78:	d102      	bne.n	10002a80 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10002a7a:	b662      	cpsie	i
10002a7c:	f3bf 8f6f 	isb	sy
}
10002a80:	bd70      	pop	{r4, r5, r6, pc}

10002a82 <z_thread_timeout>:
{
10002a82:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10002a84:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10002a86:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10002a88:	f7ff ffdc 	bl	10002a44 <z_sched_wake_thread>
}
10002a8c:	bd10      	pop	{r4, pc}

10002a8e <z_reschedule_irqlock>:
{
10002a8e:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002a90:	2800      	cmp	r0, #0
10002a92:	d105      	bne.n	10002aa0 <z_reschedule_irqlock+0x12>
10002a94:	f3ef 8005 	mrs	r0, IPSR
10002a98:	2800      	cmp	r0, #0
10002a9a:	d102      	bne.n	10002aa2 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10002a9c:	f7fe f908 	bl	10000cb0 <arch_swap>
}
10002aa0:	bd10      	pop	{r4, pc}
10002aa2:	b662      	cpsie	i
10002aa4:	f3bf 8f6f 	isb	sy
10002aa8:	e7fa      	b.n	10002aa0 <z_reschedule_irqlock+0x12>

10002aaa <z_reschedule_unlocked>:
{
10002aaa:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002aac:	f3ef 8010 	mrs	r0, PRIMASK
10002ab0:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002ab2:	f7ff ffec 	bl	10002a8e <z_reschedule_irqlock>
}
10002ab6:	bd10      	pop	{r4, pc}

10002ab8 <z_abort_timeout>:
{
10002ab8:	b510      	push	{r4, lr}
10002aba:	f3ef 8410 	mrs	r4, PRIMASK
10002abe:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10002ac0:	6803      	ldr	r3, [r0, #0]
10002ac2:	2b00      	cmp	r3, #0
10002ac4:	d008      	beq.n	10002ad8 <z_abort_timeout+0x20>
			remove_timeout(to);
10002ac6:	f7ff fad9 	bl	1000207c <remove_timeout>
			ret = 0;
10002aca:	2000      	movs	r0, #0
	if (key != 0U) {
10002acc:	2c00      	cmp	r4, #0
10002ace:	d102      	bne.n	10002ad6 <z_abort_timeout+0x1e>
	__asm__ volatile(
10002ad0:	b662      	cpsie	i
10002ad2:	f3bf 8f6f 	isb	sy
}
10002ad6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10002ad8:	2016      	movs	r0, #22
10002ada:	4240      	negs	r0, r0
10002adc:	e7f6      	b.n	10002acc <z_abort_timeout+0x14>

10002ade <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10002ade:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10002ae0:	f7ff fbc4 	bl	1000226c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10002ae4:	bd10      	pop	{r4, pc}
	...
