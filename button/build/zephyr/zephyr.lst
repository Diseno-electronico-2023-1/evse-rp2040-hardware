
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000ef8 100011f5 1000279b 100011b1     ... .....'......
	...
1000012c:	1000107d 00000000 00000000 1000101d     }...............
1000013c:	100014c1                                ....

10000140 <_irq_vector_table>:
10000140:	100010ed 100010ed 100010ed 100010ed     ................
10000150:	100010ed 100010ed 100010ed 100010ed     ................
10000160:	100010ed 100010ed 100010ed 100010ed     ................
10000170:	100010ed 100010ed 100010ed 100010ed     ................
10000180:	100010ed 100010ed 100010ed 100010ed     ................
10000190:	100010ed 100010ed 100010ed 100010ed     ................
100001a0:	100010ed 100010ed                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__aeabi_uldivmod>:
1000029c:	2b00      	cmp	r3, #0
1000029e:	d111      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a0:	2a00      	cmp	r2, #0
100002a2:	d10f      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a4:	2900      	cmp	r1, #0
100002a6:	d100      	bne.n	100002aa <__aeabi_uldivmod+0xe>
100002a8:	2800      	cmp	r0, #0
100002aa:	d002      	beq.n	100002b2 <__aeabi_uldivmod+0x16>
100002ac:	2100      	movs	r1, #0
100002ae:	43c9      	mvns	r1, r1
100002b0:	0008      	movs	r0, r1
100002b2:	b407      	push	{r0, r1, r2}
100002b4:	4802      	ldr	r0, [pc, #8]	; (100002c0 <__aeabi_uldivmod+0x24>)
100002b6:	a102      	add	r1, pc, #8	; (adr r1, 100002c0 <__aeabi_uldivmod+0x24>)
100002b8:	1840      	adds	r0, r0, r1
100002ba:	9002      	str	r0, [sp, #8]
100002bc:	bd03      	pop	{r0, r1, pc}
100002be:	46c0      	nop			; (mov r8, r8)
100002c0:	ffffff9d 	.word	0xffffff9d
100002c4:	b403      	push	{r0, r1}
100002c6:	4668      	mov	r0, sp
100002c8:	b501      	push	{r0, lr}
100002ca:	9802      	ldr	r0, [sp, #8]
100002cc:	f000 f84c 	bl	10000368 <__udivmoddi4>
100002d0:	9b01      	ldr	r3, [sp, #4]
100002d2:	469e      	mov	lr, r3
100002d4:	b002      	add	sp, #8
100002d6:	bc0c      	pop	{r2, r3}
100002d8:	4770      	bx	lr
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_llsr>:
100002dc:	40d0      	lsrs	r0, r2
100002de:	000b      	movs	r3, r1
100002e0:	40d1      	lsrs	r1, r2
100002e2:	469c      	mov	ip, r3
100002e4:	3a20      	subs	r2, #32
100002e6:	40d3      	lsrs	r3, r2
100002e8:	4318      	orrs	r0, r3
100002ea:	4252      	negs	r2, r2
100002ec:	4663      	mov	r3, ip
100002ee:	4093      	lsls	r3, r2
100002f0:	4318      	orrs	r0, r3
100002f2:	4770      	bx	lr

100002f4 <__aeabi_llsl>:
100002f4:	4091      	lsls	r1, r2
100002f6:	0003      	movs	r3, r0
100002f8:	4090      	lsls	r0, r2
100002fa:	469c      	mov	ip, r3
100002fc:	3a20      	subs	r2, #32
100002fe:	4093      	lsls	r3, r2
10000300:	4319      	orrs	r1, r3
10000302:	4252      	negs	r2, r2
10000304:	4663      	mov	r3, ip
10000306:	40d3      	lsrs	r3, r2
10000308:	4319      	orrs	r1, r3
1000030a:	4770      	bx	lr

1000030c <__clzdi2>:
1000030c:	b510      	push	{r4, lr}
1000030e:	2900      	cmp	r1, #0
10000310:	d103      	bne.n	1000031a <__clzdi2+0xe>
10000312:	f7ff ffa5 	bl	10000260 <__clzsi2>
10000316:	3020      	adds	r0, #32
10000318:	e002      	b.n	10000320 <__clzdi2+0x14>
1000031a:	0008      	movs	r0, r1
1000031c:	f7ff ffa0 	bl	10000260 <__clzsi2>
10000320:	bd10      	pop	{r4, pc}
10000322:	46c0      	nop			; (mov r8, r8)

10000324 <__aeabi_lmul>:
10000324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000326:	0c04      	lsrs	r4, r0, #16
10000328:	000d      	movs	r5, r1
1000032a:	b291      	uxth	r1, r2
1000032c:	000f      	movs	r7, r1
1000032e:	4361      	muls	r1, r4
10000330:	468c      	mov	ip, r1
10000332:	0006      	movs	r6, r0
10000334:	9301      	str	r3, [sp, #4]
10000336:	b283      	uxth	r3, r0
10000338:	0c10      	lsrs	r0, r2, #16
1000033a:	435f      	muls	r7, r3
1000033c:	4344      	muls	r4, r0
1000033e:	4358      	muls	r0, r3
10000340:	0c3b      	lsrs	r3, r7, #16
10000342:	4460      	add	r0, ip
10000344:	181b      	adds	r3, r3, r0
10000346:	4299      	cmp	r1, r3
10000348:	d902      	bls.n	10000350 <__aeabi_lmul+0x2c>
1000034a:	2180      	movs	r1, #128	; 0x80
1000034c:	0249      	lsls	r1, r1, #9
1000034e:	1864      	adds	r4, r4, r1
10000350:	9901      	ldr	r1, [sp, #4]
10000352:	4355      	muls	r5, r2
10000354:	4371      	muls	r1, r6
10000356:	0c18      	lsrs	r0, r3, #16
10000358:	1904      	adds	r4, r0, r4
1000035a:	041b      	lsls	r3, r3, #16
1000035c:	b2bf      	uxth	r7, r7
1000035e:	1949      	adds	r1, r1, r5
10000360:	19d8      	adds	r0, r3, r7
10000362:	1909      	adds	r1, r1, r4
10000364:	b003      	add	sp, #12
10000366:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000368 <__udivmoddi4>:
10000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000036a:	0006      	movs	r6, r0
1000036c:	000f      	movs	r7, r1
1000036e:	0015      	movs	r5, r2
10000370:	001c      	movs	r4, r3
10000372:	b085      	sub	sp, #20
10000374:	428b      	cmp	r3, r1
10000376:	d863      	bhi.n	10000440 <__udivmoddi4+0xd8>
10000378:	d101      	bne.n	1000037e <__udivmoddi4+0x16>
1000037a:	4282      	cmp	r2, r0
1000037c:	d860      	bhi.n	10000440 <__udivmoddi4+0xd8>
1000037e:	0021      	movs	r1, r4
10000380:	0028      	movs	r0, r5
10000382:	f7ff ffc3 	bl	1000030c <__clzdi2>
10000386:	0039      	movs	r1, r7
10000388:	9000      	str	r0, [sp, #0]
1000038a:	0030      	movs	r0, r6
1000038c:	f7ff ffbe 	bl	1000030c <__clzdi2>
10000390:	9b00      	ldr	r3, [sp, #0]
10000392:	0021      	movs	r1, r4
10000394:	1a1b      	subs	r3, r3, r0
10000396:	001a      	movs	r2, r3
10000398:	0028      	movs	r0, r5
1000039a:	9303      	str	r3, [sp, #12]
1000039c:	f7ff ffaa 	bl	100002f4 <__aeabi_llsl>
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	9101      	str	r1, [sp, #4]
100003a4:	42b9      	cmp	r1, r7
100003a6:	d845      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003a8:	d101      	bne.n	100003ae <__udivmoddi4+0x46>
100003aa:	42b0      	cmp	r0, r6
100003ac:	d842      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003ae:	9b00      	ldr	r3, [sp, #0]
100003b0:	9c01      	ldr	r4, [sp, #4]
100003b2:	2001      	movs	r0, #1
100003b4:	2100      	movs	r1, #0
100003b6:	9a03      	ldr	r2, [sp, #12]
100003b8:	1af6      	subs	r6, r6, r3
100003ba:	41a7      	sbcs	r7, r4
100003bc:	f7ff ff9a 	bl	100002f4 <__aeabi_llsl>
100003c0:	0004      	movs	r4, r0
100003c2:	000d      	movs	r5, r1
100003c4:	9b03      	ldr	r3, [sp, #12]
100003c6:	2b00      	cmp	r3, #0
100003c8:	d02b      	beq.n	10000422 <__udivmoddi4+0xba>
100003ca:	9b01      	ldr	r3, [sp, #4]
100003cc:	9a00      	ldr	r2, [sp, #0]
100003ce:	07db      	lsls	r3, r3, #31
100003d0:	0850      	lsrs	r0, r2, #1
100003d2:	4318      	orrs	r0, r3
100003d4:	9b01      	ldr	r3, [sp, #4]
100003d6:	0859      	lsrs	r1, r3, #1
100003d8:	9b03      	ldr	r3, [sp, #12]
100003da:	469c      	mov	ip, r3
100003dc:	42b9      	cmp	r1, r7
100003de:	d82c      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e0:	d101      	bne.n	100003e6 <__udivmoddi4+0x7e>
100003e2:	42b0      	cmp	r0, r6
100003e4:	d829      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e6:	0032      	movs	r2, r6
100003e8:	003b      	movs	r3, r7
100003ea:	1a12      	subs	r2, r2, r0
100003ec:	418b      	sbcs	r3, r1
100003ee:	2601      	movs	r6, #1
100003f0:	1892      	adds	r2, r2, r2
100003f2:	415b      	adcs	r3, r3
100003f4:	2700      	movs	r7, #0
100003f6:	18b6      	adds	r6, r6, r2
100003f8:	415f      	adcs	r7, r3
100003fa:	2301      	movs	r3, #1
100003fc:	425b      	negs	r3, r3
100003fe:	449c      	add	ip, r3
10000400:	4663      	mov	r3, ip
10000402:	2b00      	cmp	r3, #0
10000404:	d1ea      	bne.n	100003dc <__udivmoddi4+0x74>
10000406:	0030      	movs	r0, r6
10000408:	0039      	movs	r1, r7
1000040a:	9a03      	ldr	r2, [sp, #12]
1000040c:	f7ff ff66 	bl	100002dc <__aeabi_llsr>
10000410:	9a03      	ldr	r2, [sp, #12]
10000412:	19a4      	adds	r4, r4, r6
10000414:	417d      	adcs	r5, r7
10000416:	0006      	movs	r6, r0
10000418:	000f      	movs	r7, r1
1000041a:	f7ff ff6b 	bl	100002f4 <__aeabi_llsl>
1000041e:	1a24      	subs	r4, r4, r0
10000420:	418d      	sbcs	r5, r1
10000422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000424:	2b00      	cmp	r3, #0
10000426:	d001      	beq.n	1000042c <__udivmoddi4+0xc4>
10000428:	601e      	str	r6, [r3, #0]
1000042a:	605f      	str	r7, [r3, #4]
1000042c:	0020      	movs	r0, r4
1000042e:	0029      	movs	r1, r5
10000430:	b005      	add	sp, #20
10000432:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000434:	2400      	movs	r4, #0
10000436:	2500      	movs	r5, #0
10000438:	e7c4      	b.n	100003c4 <__udivmoddi4+0x5c>
1000043a:	19b6      	adds	r6, r6, r6
1000043c:	417f      	adcs	r7, r7
1000043e:	e7dc      	b.n	100003fa <__udivmoddi4+0x92>
10000440:	2400      	movs	r4, #0
10000442:	2500      	movs	r5, #0
10000444:	e7ed      	b.n	10000422 <__udivmoddi4+0xba>
	...

10000448 <button0_pressed>:
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led2), gpios,
						     {0});

void button0_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10000448:	b510      	push	{r4, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
1000044a:	f001 f8ef 	bl	1000162c <sys_clock_cycle_get_32>
	printk("Button0 pressed at %" PRIu32 "\n", k_cycle_get_32());
1000044e:	4b03      	ldr	r3, [pc, #12]	; (1000045c <button0_pressed+0x14>)
10000450:	0001      	movs	r1, r0
10000452:	0018      	movs	r0, r3
10000454:	f002 f918 	bl	10002688 <printk>
}
10000458:	bd10      	pop	{r4, pc}
1000045a:	46c0      	nop			; (mov r8, r8)
1000045c:	10003148 	.word	0x10003148

10000460 <button1_pressed>:

void button1_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10000460:	b510      	push	{r4, lr}
10000462:	f001 f8e3 	bl	1000162c <sys_clock_cycle_get_32>
	printk("Button1 pressed at %" PRIu32 "\n", k_cycle_get_32());
10000466:	4b03      	ldr	r3, [pc, #12]	; (10000474 <button1_pressed+0x14>)
10000468:	0001      	movs	r1, r0
1000046a:	0018      	movs	r0, r3
1000046c:	f002 f90c 	bl	10002688 <printk>
}
10000470:	bd10      	pop	{r4, pc}
10000472:	46c0      	nop			; (mov r8, r8)
10000474:	1000315f 	.word	0x1000315f

10000478 <button2_pressed>:

void button2_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10000478:	b510      	push	{r4, lr}
1000047a:	f001 f8d7 	bl	1000162c <sys_clock_cycle_get_32>
	printk("Button2 pressed at %" PRIu32 "\n", k_cycle_get_32());
1000047e:	4b03      	ldr	r3, [pc, #12]	; (1000048c <button2_pressed+0x14>)
10000480:	0001      	movs	r1, r0
10000482:	0018      	movs	r0, r3
10000484:	f002 f900 	bl	10002688 <printk>
}
10000488:	bd10      	pop	{r4, pc}
1000048a:	46c0      	nop			; (mov r8, r8)
1000048c:	10003176 	.word	0x10003176

10000490 <button3_pressed>:

void button3_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10000490:	b510      	push	{r4, lr}
10000492:	f001 f8cb 	bl	1000162c <sys_clock_cycle_get_32>
	printk("Button3 pressed at %" PRIu32 "\n", k_cycle_get_32());
10000496:	4b03      	ldr	r3, [pc, #12]	; (100004a4 <button3_pressed+0x14>)
10000498:	0001      	movs	r1, r0
1000049a:	0018      	movs	r0, r3
1000049c:	f002 f8f4 	bl	10002688 <printk>
}
100004a0:	bd10      	pop	{r4, pc}
100004a2:	46c0      	nop			; (mov r8, r8)
100004a4:	1000318d 	.word	0x1000318d

100004a8 <button4_pressed>:

void button4_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
100004a8:	b510      	push	{r4, lr}
100004aa:	f001 f8bf 	bl	1000162c <sys_clock_cycle_get_32>
	printk("Button4 pressed at %" PRIu32 "\n", k_cycle_get_32());
100004ae:	4b03      	ldr	r3, [pc, #12]	; (100004bc <button4_pressed+0x14>)
100004b0:	0001      	movs	r1, r0
100004b2:	0018      	movs	r0, r3
100004b4:	f002 f8e8 	bl	10002688 <printk>
}
100004b8:	bd10      	pop	{r4, pc}
100004ba:	46c0      	nop			; (mov r8, r8)
100004bc:	100031a4 	.word	0x100031a4

100004c0 <gpio_add_callback.constprop.0.isra.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
100004c0:	b510      	push	{r4, lr}
100004c2:	0001      	movs	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
100004c4:	4803      	ldr	r0, [pc, #12]	; (100004d4 <gpio_add_callback.constprop.0.isra.0+0x14>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
100004c6:	6883      	ldr	r3, [r0, #8]
100004c8:	69db      	ldr	r3, [r3, #28]
100004ca:	2b00      	cmp	r3, #0
100004cc:	d001      	beq.n	100004d2 <gpio_add_callback.constprop.0.isra.0+0x12>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
100004ce:	2201      	movs	r2, #1
100004d0:	4798      	blx	r3
}
100004d2:	bd10      	pop	{r4, pc}
100004d4:	10002f28 	.word	0x10002f28

100004d8 <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
100004d8:	b510      	push	{r4, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
100004da:	4a0b      	ldr	r2, [pc, #44]	; (10000508 <gpio_pin_set_dt.constprop.0.isra.0+0x30>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
100004dc:	0003      	movs	r3, r0
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100004de:	7911      	ldrb	r1, [r2, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
100004e0:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100004e2:	2201      	movs	r2, #1
100004e4:	0014      	movs	r4, r2
100004e6:	408c      	lsls	r4, r1
100004e8:	0021      	movs	r1, r4
100004ea:	6904      	ldr	r4, [r0, #16]
100004ec:	6824      	ldr	r4, [r4, #0]
100004ee:	420c      	tst	r4, r1
100004f0:	d000      	beq.n	100004f4 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
100004f2:	4053      	eors	r3, r2
	if (value != 0)	{
100004f4:	2b00      	cmp	r3, #0
100004f6:	d003      	beq.n	10000500 <gpio_pin_set_dt.constprop.0.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
100004f8:	6883      	ldr	r3, [r0, #8]
100004fa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100004fc:	4798      	blx	r3
}
100004fe:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10000500:	6883      	ldr	r3, [r0, #8]
10000502:	691b      	ldr	r3, [r3, #16]
10000504:	e7fa      	b.n	100004fc <gpio_pin_set_dt.constprop.0.isra.0+0x24>
10000506:	46c0      	nop			; (mov r8, r8)
10000508:	20000000 	.word	0x20000000

1000050c <main>:

void main(void)
{
1000050c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	if (!gpio_is_ready_dt(&button0)) {
1000050e:	4d91      	ldr	r5, [pc, #580]	; (10000754 <main+0x248>)
{
10000510:	b085      	sub	sp, #20
	if (!gpio_is_ready_dt(&button0)) {
10000512:	0028      	movs	r0, r5
10000514:	f002 f8b2 	bl	1000267c <gpio_is_ready_dt.isra.0>
		printk("Error: button0 device %s is not ready\n",
		       button0.port->name);
10000518:	682c      	ldr	r4, [r5, #0]
	if (!gpio_is_ready_dt(&button0)) {
1000051a:	2800      	cmp	r0, #0
1000051c:	d105      	bne.n	1000052a <main+0x1e>
		printk("Error: button0 device %s is not ready\n",
1000051e:	488e      	ldr	r0, [pc, #568]	; (10000758 <main+0x24c>)
		return;
	}
		if (!gpio_is_ready_dt(&button1)) {
		printk("Error: button1 device %s is not ready\n",
10000520:	0021      	movs	r1, r4
10000522:	f002 f8b1 	bl	10002688 <printk>


			k_msleep(SLEEP_TIME_MS);
		}
	}
}
10000526:	b005      	add	sp, #20
10000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!gpio_is_ready_dt(&button1)) {
1000052a:	0028      	movs	r0, r5
1000052c:	f002 f8a6 	bl	1000267c <gpio_is_ready_dt.isra.0>
10000530:	2800      	cmp	r0, #0
10000532:	d101      	bne.n	10000538 <main+0x2c>
		printk("Error: button1 device %s is not ready\n",
10000534:	4889      	ldr	r0, [pc, #548]	; (1000075c <main+0x250>)
10000536:	e7f3      	b.n	10000520 <main+0x14>
		if (!gpio_is_ready_dt(&button2)) {
10000538:	0028      	movs	r0, r5
1000053a:	f002 f89f 	bl	1000267c <gpio_is_ready_dt.isra.0>
1000053e:	2800      	cmp	r0, #0
10000540:	d101      	bne.n	10000546 <main+0x3a>
		printk("Error: button2 device %s is not ready\n",
10000542:	4887      	ldr	r0, [pc, #540]	; (10000760 <main+0x254>)
10000544:	e7ec      	b.n	10000520 <main+0x14>
		if (!gpio_is_ready_dt(&button3)) {
10000546:	0028      	movs	r0, r5
10000548:	f002 f898 	bl	1000267c <gpio_is_ready_dt.isra.0>
1000054c:	2800      	cmp	r0, #0
1000054e:	d101      	bne.n	10000554 <main+0x48>
		printk("Error: button3 device %s is not ready\n",
10000550:	4884      	ldr	r0, [pc, #528]	; (10000764 <main+0x258>)
10000552:	e7e5      	b.n	10000520 <main+0x14>
		if (!gpio_is_ready_dt(&button4)) {
10000554:	0028      	movs	r0, r5
10000556:	f002 f891 	bl	1000267c <gpio_is_ready_dt.isra.0>
1000055a:	2800      	cmp	r0, #0
1000055c:	d101      	bne.n	10000562 <main+0x56>
		printk("Error: button4 device %s is not ready\n",
1000055e:	4882      	ldr	r0, [pc, #520]	; (10000768 <main+0x25c>)
10000560:	e7de      	b.n	10000520 <main+0x14>
	ret = gpio_pin_configure_dt(&button0, GPIO_INPUT);
10000562:	2180      	movs	r1, #128	; 0x80
10000564:	4b81      	ldr	r3, [pc, #516]	; (1000076c <main+0x260>)
10000566:	0249      	lsls	r1, r1, #9
10000568:	0018      	movs	r0, r3
1000056a:	9300      	str	r3, [sp, #0]
1000056c:	f002 f83f 	bl	100025ee <gpio_pin_configure_dt>
10000570:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10000572:	487f      	ldr	r0, [pc, #508]	; (10000770 <main+0x264>)
	if (ret != 0) {
10000574:	d12f      	bne.n	100005d6 <main+0xca>
		ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
10000576:	2180      	movs	r1, #128	; 0x80
10000578:	4b7e      	ldr	r3, [pc, #504]	; (10000774 <main+0x268>)
1000057a:	0249      	lsls	r1, r1, #9
1000057c:	0018      	movs	r0, r3
1000057e:	9301      	str	r3, [sp, #4]
10000580:	f002 f835 	bl	100025ee <gpio_pin_configure_dt>
10000584:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10000586:	487a      	ldr	r0, [pc, #488]	; (10000770 <main+0x264>)
	if (ret != 0) {
10000588:	d12d      	bne.n	100005e6 <main+0xda>
	ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
1000058a:	2180      	movs	r1, #128	; 0x80
1000058c:	4e7a      	ldr	r6, [pc, #488]	; (10000778 <main+0x26c>)
1000058e:	0249      	lsls	r1, r1, #9
10000590:	0030      	movs	r0, r6
10000592:	f002 f82c 	bl	100025ee <gpio_pin_configure_dt>
10000596:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
10000598:	4875      	ldr	r0, [pc, #468]	; (10000770 <main+0x264>)
	if (ret != 0) {
1000059a:	d12c      	bne.n	100005f6 <main+0xea>
	ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);
1000059c:	2180      	movs	r1, #128	; 0x80
1000059e:	4f77      	ldr	r7, [pc, #476]	; (1000077c <main+0x270>)
100005a0:	0249      	lsls	r1, r1, #9
100005a2:	0038      	movs	r0, r7
100005a4:	f002 f823 	bl	100025ee <gpio_pin_configure_dt>
100005a8:	1e01      	subs	r1, r0, #0
		printk("Error %d: failed to configure %s pin %d\n",
100005aa:	4871      	ldr	r0, [pc, #452]	; (10000770 <main+0x264>)
	if (ret != 0) {
100005ac:	d12b      	bne.n	10000606 <main+0xfa>
	ret = gpio_pin_configure_dt(&button4, GPIO_INPUT);
100005ae:	2180      	movs	r1, #128	; 0x80
100005b0:	4d73      	ldr	r5, [pc, #460]	; (10000780 <main+0x274>)
100005b2:	0249      	lsls	r1, r1, #9
100005b4:	0028      	movs	r0, r5
100005b6:	f002 f81a 	bl	100025ee <gpio_pin_configure_dt>
100005ba:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
100005bc:	d005      	beq.n	100005ca <main+0xbe>
		printk("Error %d: failed to configure %s pin %d\n",
100005be:	230a      	movs	r3, #10
100005c0:	486b      	ldr	r0, [pc, #428]	; (10000770 <main+0x264>)
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
100005c2:	0022      	movs	r2, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
100005c4:	f002 f860 	bl	10002688 <printk>
		return;
100005c8:	e7ad      	b.n	10000526 <main+0x1a>
	ret = gpio_pin_interrupt_configure_dt(&button0,
100005ca:	9800      	ldr	r0, [sp, #0]
100005cc:	f002 f83c 	bl	10002648 <gpio_pin_interrupt_configure_dt.constprop.0>
100005d0:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
100005d2:	d002      	beq.n	100005da <main+0xce>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
100005d4:	486b      	ldr	r0, [pc, #428]	; (10000784 <main+0x278>)
100005d6:	2306      	movs	r3, #6
100005d8:	e7f3      	b.n	100005c2 <main+0xb6>
	ret = gpio_pin_interrupt_configure_dt(&button1,
100005da:	9801      	ldr	r0, [sp, #4]
100005dc:	f002 f834 	bl	10002648 <gpio_pin_interrupt_configure_dt.constprop.0>
100005e0:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
100005e2:	d002      	beq.n	100005ea <main+0xde>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
100005e4:	4867      	ldr	r0, [pc, #412]	; (10000784 <main+0x278>)
100005e6:	2307      	movs	r3, #7
100005e8:	e7eb      	b.n	100005c2 <main+0xb6>
	ret = gpio_pin_interrupt_configure_dt(&button2,
100005ea:	0030      	movs	r0, r6
100005ec:	f002 f82c 	bl	10002648 <gpio_pin_interrupt_configure_dt.constprop.0>
100005f0:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
100005f2:	d002      	beq.n	100005fa <main+0xee>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
100005f4:	4863      	ldr	r0, [pc, #396]	; (10000784 <main+0x278>)
100005f6:	2308      	movs	r3, #8
100005f8:	e7e3      	b.n	100005c2 <main+0xb6>
	ret = gpio_pin_interrupt_configure_dt(&button3,
100005fa:	0038      	movs	r0, r7
100005fc:	f002 f824 	bl	10002648 <gpio_pin_interrupt_configure_dt.constprop.0>
10000600:	1e01      	subs	r1, r0, #0
	if (ret != 0) {
10000602:	d002      	beq.n	1000060a <main+0xfe>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10000604:	485f      	ldr	r0, [pc, #380]	; (10000784 <main+0x278>)
10000606:	2309      	movs	r3, #9
10000608:	e7db      	b.n	100005c2 <main+0xb6>
	ret = gpio_pin_interrupt_configure_dt(&button4,
1000060a:	0028      	movs	r0, r5
1000060c:	f002 f81c 	bl	10002648 <gpio_pin_interrupt_configure_dt.constprop.0>
10000610:	1e05      	subs	r5, r0, #0
	if (ret != 0) {
10000612:	d004      	beq.n	1000061e <main+0x112>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
10000614:	230a      	movs	r3, #10
10000616:	0022      	movs	r2, r4
10000618:	0029      	movs	r1, r5
1000061a:	485a      	ldr	r0, [pc, #360]	; (10000784 <main+0x278>)
1000061c:	e7d2      	b.n	100005c4 <main+0xb8>
	callback->handler = handler;
1000061e:	485a      	ldr	r0, [pc, #360]	; (10000788 <main+0x27c>)
10000620:	4b5a      	ldr	r3, [pc, #360]	; (1000078c <main+0x280>)
10000622:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
10000624:	2340      	movs	r3, #64	; 0x40
10000626:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button0.port, &button0_cb_data);
10000628:	f7ff ff4a 	bl	100004c0 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button at %s pin %d\n", button0.port->name, button0.pin);
1000062c:	0021      	movs	r1, r4
1000062e:	2206      	movs	r2, #6
10000630:	4857      	ldr	r0, [pc, #348]	; (10000790 <main+0x284>)
10000632:	f002 f829 	bl	10002688 <printk>
	callback->handler = handler;
10000636:	4857      	ldr	r0, [pc, #348]	; (10000794 <main+0x288>)
10000638:	4b57      	ldr	r3, [pc, #348]	; (10000798 <main+0x28c>)
1000063a:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
1000063c:	2380      	movs	r3, #128	; 0x80
1000063e:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button1.port, &button1_cb_data);
10000640:	f7ff ff3e 	bl	100004c0 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button1 at %s pin %d\n", button1.port->name, button1.pin);
10000644:	0021      	movs	r1, r4
10000646:	2207      	movs	r2, #7
10000648:	4854      	ldr	r0, [pc, #336]	; (1000079c <main+0x290>)
1000064a:	f002 f81d 	bl	10002688 <printk>
	callback->handler = handler;
1000064e:	4854      	ldr	r0, [pc, #336]	; (100007a0 <main+0x294>)
10000650:	4b54      	ldr	r3, [pc, #336]	; (100007a4 <main+0x298>)
10000652:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
10000654:	2380      	movs	r3, #128	; 0x80
10000656:	005b      	lsls	r3, r3, #1
10000658:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button2.port, &button2_cb_data);
1000065a:	f7ff ff31 	bl	100004c0 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button2 at %s pin %d\n", button2.port->name, button2.pin);
1000065e:	0021      	movs	r1, r4
10000660:	2208      	movs	r2, #8
10000662:	4851      	ldr	r0, [pc, #324]	; (100007a8 <main+0x29c>)
10000664:	f002 f810 	bl	10002688 <printk>
	callback->handler = handler;
10000668:	4850      	ldr	r0, [pc, #320]	; (100007ac <main+0x2a0>)
1000066a:	4b51      	ldr	r3, [pc, #324]	; (100007b0 <main+0x2a4>)
1000066c:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
1000066e:	2380      	movs	r3, #128	; 0x80
10000670:	009b      	lsls	r3, r3, #2
10000672:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button3.port, &button3_cb_data);
10000674:	f7ff ff24 	bl	100004c0 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button3 at %s pin %d\n", button3.port->name, button3.pin);
10000678:	0021      	movs	r1, r4
1000067a:	2209      	movs	r2, #9
1000067c:	484d      	ldr	r0, [pc, #308]	; (100007b4 <main+0x2a8>)
1000067e:	f002 f803 	bl	10002688 <printk>
	callback->handler = handler;
10000682:	484d      	ldr	r0, [pc, #308]	; (100007b8 <main+0x2ac>)
10000684:	4b4d      	ldr	r3, [pc, #308]	; (100007bc <main+0x2b0>)
10000686:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
10000688:	2380      	movs	r3, #128	; 0x80
1000068a:	00db      	lsls	r3, r3, #3
1000068c:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button4.port, &button4_cb_data);
1000068e:	f7ff ff17 	bl	100004c0 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button4 at %s pin %d\n", button4.port->name, button4.pin);
10000692:	0021      	movs	r1, r4
10000694:	484a      	ldr	r0, [pc, #296]	; (100007c0 <main+0x2b4>)
10000696:	220a      	movs	r2, #10
10000698:	f001 fff6 	bl	10002688 <printk>
	if (led.port && !device_is_ready(led.port)) {
1000069c:	4c49      	ldr	r4, [pc, #292]	; (100007c4 <main+0x2b8>)
1000069e:	6820      	ldr	r0, [r4, #0]
100006a0:	2800      	cmp	r0, #0
100006a2:	d00a      	beq.n	100006ba <main+0x1ae>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100006a4:	f002 fb63 	bl	10002d6e <z_device_is_ready>
		       ret, led.port->name);
100006a8:	6823      	ldr	r3, [r4, #0]
100006aa:	1e07      	subs	r7, r0, #0
	if (led.port && !device_is_ready(led.port)) {
100006ac:	d12e      	bne.n	1000070c <main+0x200>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
100006ae:	0039      	movs	r1, r7
100006b0:	4845      	ldr	r0, [pc, #276]	; (100007c8 <main+0x2bc>)
100006b2:	681a      	ldr	r2, [r3, #0]
100006b4:	f001 ffe8 	bl	10002688 <printk>
		led.port = NULL;
100006b8:	6027      	str	r7, [r4, #0]
	printk("Press the button\n");
100006ba:	4844      	ldr	r0, [pc, #272]	; (100007cc <main+0x2c0>)
100006bc:	f001 ffe4 	bl	10002688 <printk>
	if (led.port) {
100006c0:	4b40      	ldr	r3, [pc, #256]	; (100007c4 <main+0x2b8>)
100006c2:	681b      	ldr	r3, [r3, #0]
100006c4:	2b00      	cmp	r3, #0
100006c6:	d100      	bne.n	100006ca <main+0x1be>
100006c8:	e72d      	b.n	10000526 <main+0x1a>
			val0 = gpio_pin_get_dt(&button0);
100006ca:	9800      	ldr	r0, [sp, #0]
100006cc:	f001 ffa8 	bl	10002620 <gpio_pin_get_dt>
100006d0:	0004      	movs	r4, r0
			val1 = gpio_pin_get_dt(&button1);
100006d2:	9801      	ldr	r0, [sp, #4]
100006d4:	f001 ffa4 	bl	10002620 <gpio_pin_get_dt>
100006d8:	0005      	movs	r5, r0
			val2 = gpio_pin_get_dt(&button2);
100006da:	0030      	movs	r0, r6
100006dc:	f001 ffa0 	bl	10002620 <gpio_pin_get_dt>
100006e0:	0007      	movs	r7, r0
			val3 = gpio_pin_get_dt(&button3);
100006e2:	4826      	ldr	r0, [pc, #152]	; (1000077c <main+0x270>)
100006e4:	f001 ff9c 	bl	10002620 <gpio_pin_get_dt>
100006e8:	9002      	str	r0, [sp, #8]
			val4 = gpio_pin_get_dt(&button4);
100006ea:	4825      	ldr	r0, [pc, #148]	; (10000780 <main+0x274>)
100006ec:	f001 ff98 	bl	10002620 <gpio_pin_get_dt>
100006f0:	9003      	str	r0, [sp, #12]
			gpio_pin_set_dt(&led, 1);
100006f2:	2001      	movs	r0, #1
100006f4:	f7ff fef0 	bl	100004d8 <gpio_pin_set_dt.constprop.0.isra.0>
			if (val0 == 0) {
100006f8:	2c00      	cmp	r4, #0
100006fa:	d11f      	bne.n	1000073c <main+0x230>
				gpio_pin_set_dt(&led, val0);
100006fc:	2000      	movs	r0, #0
100006fe:	f7ff feeb 	bl	100004d8 <gpio_pin_set_dt.constprop.0.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10000702:	2100      	movs	r1, #0
10000704:	200a      	movs	r0, #10
10000706:	f001 fd99 	bl	1000223c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
1000070a:	e7de      	b.n	100006ca <main+0x1be>
	if (led.port) {
1000070c:	2b00      	cmp	r3, #0
1000070e:	d0d4      	beq.n	100006ba <main+0x1ae>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
10000710:	2180      	movs	r1, #128	; 0x80
10000712:	0020      	movs	r0, r4
10000714:	0289      	lsls	r1, r1, #10
10000716:	f001 ff6a 	bl	100025ee <gpio_pin_configure_dt>
1000071a:	7923      	ldrb	r3, [r4, #4]
1000071c:	1e01      	subs	r1, r0, #0
		if (ret != 0) {
1000071e:	d006      	beq.n	1000072e <main+0x222>
			       ret, led.port->name, led.pin);
10000720:	6822      	ldr	r2, [r4, #0]
			printk("Error %d: failed to configure LED device %s pin %d\n",
10000722:	482b      	ldr	r0, [pc, #172]	; (100007d0 <main+0x2c4>)
10000724:	6812      	ldr	r2, [r2, #0]
10000726:	f001 ffaf 	bl	10002688 <printk>
			led.port = NULL;
1000072a:	6025      	str	r5, [r4, #0]
1000072c:	e7c5      	b.n	100006ba <main+0x1ae>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
1000072e:	6821      	ldr	r1, [r4, #0]
10000730:	001a      	movs	r2, r3
10000732:	4828      	ldr	r0, [pc, #160]	; (100007d4 <main+0x2c8>)
10000734:	6809      	ldr	r1, [r1, #0]
10000736:	f001 ffa7 	bl	10002688 <printk>
1000073a:	e7be      	b.n	100006ba <main+0x1ae>
			else if (val1 == 0) {
1000073c:	2d00      	cmp	r5, #0
1000073e:	d0dd      	beq.n	100006fc <main+0x1f0>
			else if (val2 == 0) {
10000740:	2f00      	cmp	r7, #0
10000742:	d0db      	beq.n	100006fc <main+0x1f0>
			else if (val3 == 0) {
10000744:	9b02      	ldr	r3, [sp, #8]
10000746:	2b00      	cmp	r3, #0
10000748:	d0d8      	beq.n	100006fc <main+0x1f0>
			else if (val4 == 0) {
1000074a:	9b03      	ldr	r3, [sp, #12]
1000074c:	2b00      	cmp	r3, #0
1000074e:	d1d8      	bne.n	10000702 <main+0x1f6>
10000750:	e7d4      	b.n	100006fc <main+0x1f0>
10000752:	46c0      	nop			; (mov r8, r8)
10000754:	10002f28 	.word	0x10002f28
10000758:	100031bb 	.word	0x100031bb
1000075c:	100031e2 	.word	0x100031e2
10000760:	10003209 	.word	0x10003209
10000764:	10003230 	.word	0x10003230
10000768:	10003257 	.word	0x10003257
1000076c:	10003060 	.word	0x10003060
10000770:	1000327e 	.word	0x1000327e
10000774:	10003058 	.word	0x10003058
10000778:	10003050 	.word	0x10003050
1000077c:	10003048 	.word	0x10003048
10000780:	10003040 	.word	0x10003040
10000784:	100032a7 	.word	0x100032a7
10000788:	20000160 	.word	0x20000160
1000078c:	10000449 	.word	0x10000449
10000790:	100032dd 	.word	0x100032dd
10000794:	20000154 	.word	0x20000154
10000798:	10000461 	.word	0x10000461
1000079c:	100032f9 	.word	0x100032f9
100007a0:	20000148 	.word	0x20000148
100007a4:	10000479 	.word	0x10000479
100007a8:	10003316 	.word	0x10003316
100007ac:	2000013c 	.word	0x2000013c
100007b0:	10000491 	.word	0x10000491
100007b4:	10003333 	.word	0x10003333
100007b8:	20000130 	.word	0x20000130
100007bc:	100004a9 	.word	0x100004a9
100007c0:	10003350 	.word	0x10003350
100007c4:	20000000 	.word	0x20000000
100007c8:	1000336d 	.word	0x1000336d
100007cc:	100033ed 	.word	0x100033ed
100007d0:	100033a0 	.word	0x100033a0
100007d4:	100033d4 	.word	0x100033d4

100007d8 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
100007d8:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
100007da:	4b02      	ldr	r3, [pc, #8]	; (100007e4 <char_out+0xc>)
100007dc:	681b      	ldr	r3, [r3, #0]
100007de:	4798      	blx	r3
}
100007e0:	bd10      	pop	{r4, pc}
100007e2:	46c0      	nop			; (mov r8, r8)
100007e4:	20000008 	.word	0x20000008

100007e8 <__printk_hook_install>:
	_char_out = fn;
100007e8:	4b01      	ldr	r3, [pc, #4]	; (100007f0 <__printk_hook_install+0x8>)
100007ea:	6018      	str	r0, [r3, #0]
}
100007ec:	4770      	bx	lr
100007ee:	46c0      	nop			; (mov r8, r8)
100007f0:	20000008 	.word	0x20000008

100007f4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100007f4:	b513      	push	{r0, r1, r4, lr}
100007f6:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100007f8:	2100      	movs	r1, #0
100007fa:	4c03      	ldr	r4, [pc, #12]	; (10000808 <vprintk+0x14>)
100007fc:	0002      	movs	r2, r0
100007fe:	9100      	str	r1, [sp, #0]
10000800:	0020      	movs	r0, r4
10000802:	f000 f803 	bl	1000080c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
10000806:	bd13      	pop	{r0, r1, r4, pc}
10000808:	100007d9 	.word	0x100007d9

1000080c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
1000080c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000080e:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000810:	2700      	movs	r7, #0
{
10000812:	b099      	sub	sp, #100	; 0x64
10000814:	9004      	str	r0, [sp, #16]
10000816:	9105      	str	r1, [sp, #20]
10000818:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
1000081a:	9b08      	ldr	r3, [sp, #32]
1000081c:	7818      	ldrb	r0, [r3, #0]
1000081e:	2800      	cmp	r0, #0
10000820:	d101      	bne.n	10000826 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000822:	0038      	movs	r0, r7
10000824:	e327      	b.n	10000e76 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
10000826:	9b08      	ldr	r3, [sp, #32]
10000828:	3301      	adds	r3, #1
1000082a:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
1000082c:	2825      	cmp	r0, #37	; 0x25
1000082e:	d007      	beq.n	10000840 <z_cbvprintf_impl+0x34>
			OUTC('%');
10000830:	9905      	ldr	r1, [sp, #20]
10000832:	9b04      	ldr	r3, [sp, #16]
10000834:	4798      	blx	r3
10000836:	2800      	cmp	r0, #0
10000838:	da00      	bge.n	1000083c <z_cbvprintf_impl+0x30>
1000083a:	e31c      	b.n	10000e76 <z_cbvprintf_impl+0x66a>
1000083c:	3701      	adds	r7, #1
		if (bps == NULL) {
1000083e:	e1e3      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		} state = {
10000840:	ad12      	add	r5, sp, #72	; 0x48
10000842:	2218      	movs	r2, #24
10000844:	2100      	movs	r1, #0
10000846:	0028      	movs	r0, r5
10000848:	f001 ffc9 	bl	100027de <memset>
	if (*sp == '%') {
1000084c:	9b08      	ldr	r3, [sp, #32]
1000084e:	785b      	ldrb	r3, [r3, #1]
10000850:	2b25      	cmp	r3, #37	; 0x25
10000852:	d114      	bne.n	1000087e <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000854:	9a08      	ldr	r2, [sp, #32]
10000856:	72eb      	strb	r3, [r5, #11]
10000858:	3202      	adds	r2, #2
1000085a:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
1000085c:	ab12      	add	r3, sp, #72	; 0x48
1000085e:	7a5a      	ldrb	r2, [r3, #9]
10000860:	07d1      	lsls	r1, r2, #31
10000862:	d400      	bmi.n	10000866 <z_cbvprintf_impl+0x5a>
10000864:	e17f      	b.n	10000b66 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10000866:	cc02      	ldmia	r4!, {r1}
10000868:	9103      	str	r1, [sp, #12]
			if (width < 0) {
1000086a:	2900      	cmp	r1, #0
1000086c:	db00      	blt.n	10000870 <z_cbvprintf_impl+0x64>
1000086e:	e17f      	b.n	10000b70 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000870:	2104      	movs	r1, #4
10000872:	7a18      	ldrb	r0, [r3, #8]
10000874:	4301      	orrs	r1, r0
10000876:	7219      	strb	r1, [r3, #8]
				width = -width;
10000878:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000087a:	425b      	negs	r3, r3
1000087c:	e177      	b.n	10000b6e <z_cbvprintf_impl+0x362>
1000087e:	2200      	movs	r2, #0
		switch (*sp) {
10000880:	2601      	movs	r6, #1
10000882:	0015      	movs	r5, r2
10000884:	0010      	movs	r0, r2
10000886:	4694      	mov	ip, r2
10000888:	9203      	str	r2, [sp, #12]
1000088a:	9b07      	ldr	r3, [sp, #28]
1000088c:	781b      	ldrb	r3, [r3, #0]
1000088e:	2b2b      	cmp	r3, #43	; 0x2b
10000890:	d06f      	beq.n	10000972 <z_cbvprintf_impl+0x166>
10000892:	d868      	bhi.n	10000966 <z_cbvprintf_impl+0x15a>
10000894:	2b20      	cmp	r3, #32
10000896:	d071      	beq.n	1000097c <z_cbvprintf_impl+0x170>
10000898:	2b23      	cmp	r3, #35	; 0x23
1000089a:	d071      	beq.n	10000980 <z_cbvprintf_impl+0x174>
1000089c:	2a00      	cmp	r2, #0
1000089e:	d005      	beq.n	100008ac <z_cbvprintf_impl+0xa0>
100008a0:	ae12      	add	r6, sp, #72	; 0x48
100008a2:	7a32      	ldrb	r2, [r6, #8]
100008a4:	0011      	movs	r1, r2
100008a6:	2240      	movs	r2, #64	; 0x40
100008a8:	430a      	orrs	r2, r1
100008aa:	7232      	strb	r2, [r6, #8]
100008ac:	2d00      	cmp	r5, #0
100008ae:	d004      	beq.n	100008ba <z_cbvprintf_impl+0xae>
100008b0:	2220      	movs	r2, #32
100008b2:	ad12      	add	r5, sp, #72	; 0x48
100008b4:	7a2e      	ldrb	r6, [r5, #8]
100008b6:	4332      	orrs	r2, r6
100008b8:	722a      	strb	r2, [r5, #8]
100008ba:	2800      	cmp	r0, #0
100008bc:	d004      	beq.n	100008c8 <z_cbvprintf_impl+0xbc>
100008be:	2210      	movs	r2, #16
100008c0:	a812      	add	r0, sp, #72	; 0x48
100008c2:	7a05      	ldrb	r5, [r0, #8]
100008c4:	432a      	orrs	r2, r5
100008c6:	7202      	strb	r2, [r0, #8]
100008c8:	9a03      	ldr	r2, [sp, #12]
100008ca:	2a00      	cmp	r2, #0
100008cc:	d004      	beq.n	100008d8 <z_cbvprintf_impl+0xcc>
100008ce:	2208      	movs	r2, #8
100008d0:	a912      	add	r1, sp, #72	; 0x48
100008d2:	7a08      	ldrb	r0, [r1, #8]
100008d4:	4302      	orrs	r2, r0
100008d6:	720a      	strb	r2, [r1, #8]
100008d8:	4662      	mov	r2, ip
100008da:	2a00      	cmp	r2, #0
100008dc:	d004      	beq.n	100008e8 <z_cbvprintf_impl+0xdc>
100008de:	2204      	movs	r2, #4
100008e0:	a912      	add	r1, sp, #72	; 0x48
100008e2:	7a08      	ldrb	r0, [r1, #8]
100008e4:	4302      	orrs	r2, r0
100008e6:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100008e8:	2144      	movs	r1, #68	; 0x44
100008ea:	a812      	add	r0, sp, #72	; 0x48
100008ec:	7a02      	ldrb	r2, [r0, #8]
100008ee:	4011      	ands	r1, r2
100008f0:	2944      	cmp	r1, #68	; 0x44
100008f2:	d102      	bne.n	100008fa <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100008f4:	2140      	movs	r1, #64	; 0x40
100008f6:	438a      	bics	r2, r1
100008f8:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100008fa:	2280      	movs	r2, #128	; 0x80
100008fc:	7a01      	ldrb	r1, [r0, #8]
100008fe:	4252      	negs	r2, r2
10000900:	430a      	orrs	r2, r1
10000902:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000904:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000906:	250a      	movs	r5, #10
10000908:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
1000090a:	2b2a      	cmp	r3, #42	; 0x2a
1000090c:	d140      	bne.n	10000990 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
1000090e:	7a41      	ldrb	r1, [r0, #9]
10000910:	3b29      	subs	r3, #41	; 0x29
10000912:	430b      	orrs	r3, r1
		return ++sp;
10000914:	3201      	adds	r2, #1
		conv->width_star = true;
10000916:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000918:	7815      	ldrb	r5, [r2, #0]
1000091a:	2602      	movs	r6, #2
1000091c:	0029      	movs	r1, r5
1000091e:	392e      	subs	r1, #46	; 0x2e
10000920:	424b      	negs	r3, r1
10000922:	4159      	adcs	r1, r3
10000924:	a812      	add	r0, sp, #72	; 0x48
10000926:	7a43      	ldrb	r3, [r0, #9]
10000928:	0049      	lsls	r1, r1, #1
1000092a:	43b3      	bics	r3, r6
1000092c:	430b      	orrs	r3, r1
1000092e:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10000930:	2d2e      	cmp	r5, #46	; 0x2e
10000932:	d145      	bne.n	100009c0 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10000934:	7853      	ldrb	r3, [r2, #1]
10000936:	2b2a      	cmp	r3, #42	; 0x2a
10000938:	d03d      	beq.n	100009b6 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
1000093a:	2300      	movs	r3, #0
	++sp;
1000093c:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
1000093e:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000940:	7811      	ldrb	r1, [r2, #0]
10000942:	1c55      	adds	r5, r2, #1
10000944:	0008      	movs	r0, r1
10000946:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
10000948:	2809      	cmp	r0, #9
1000094a:	d963      	bls.n	10000a14 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
1000094c:	a912      	add	r1, sp, #72	; 0x48
1000094e:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000950:	7a0d      	ldrb	r5, [r1, #8]
10000952:	07a8      	lsls	r0, r5, #30
10000954:	4318      	orrs	r0, r3
10000956:	2302      	movs	r3, #2
10000958:	439d      	bics	r5, r3
1000095a:	002b      	movs	r3, r5
1000095c:	0fc0      	lsrs	r0, r0, #31
1000095e:	0040      	lsls	r0, r0, #1
10000960:	4303      	orrs	r3, r0
10000962:	720b      	strb	r3, [r1, #8]
	return sp;
10000964:	e02c      	b.n	100009c0 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10000966:	2b2d      	cmp	r3, #45	; 0x2d
10000968:	d00c      	beq.n	10000984 <z_cbvprintf_impl+0x178>
1000096a:	2b30      	cmp	r3, #48	; 0x30
1000096c:	d196      	bne.n	1000089c <z_cbvprintf_impl+0x90>
1000096e:	0032      	movs	r2, r6
10000970:	e000      	b.n	10000974 <z_cbvprintf_impl+0x168>
10000972:	9603      	str	r6, [sp, #12]
			++sp;
10000974:	9b07      	ldr	r3, [sp, #28]
10000976:	3301      	adds	r3, #1
10000978:	9307      	str	r3, [sp, #28]
	} while (loop);
1000097a:	e786      	b.n	1000088a <z_cbvprintf_impl+0x7e>
		switch (*sp) {
1000097c:	0030      	movs	r0, r6
1000097e:	e7f9      	b.n	10000974 <z_cbvprintf_impl+0x168>
10000980:	0035      	movs	r5, r6
10000982:	e7f7      	b.n	10000974 <z_cbvprintf_impl+0x168>
10000984:	46b4      	mov	ip, r6
10000986:	e7f5      	b.n	10000974 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10000988:	0032      	movs	r2, r6
1000098a:	4369      	muls	r1, r5
1000098c:	3930      	subs	r1, #48	; 0x30
1000098e:	1859      	adds	r1, r3, r1
10000990:	7813      	ldrb	r3, [r2, #0]
10000992:	1c56      	adds	r6, r2, #1
10000994:	0018      	movs	r0, r3
10000996:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
10000998:	2809      	cmp	r0, #9
1000099a:	d9f5      	bls.n	10000988 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
1000099c:	9b07      	ldr	r3, [sp, #28]
1000099e:	4293      	cmp	r3, r2
100009a0:	d0ba      	beq.n	10000918 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
100009a2:	2502      	movs	r5, #2
		conv->width_value = width;
100009a4:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
100009a6:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
100009a8:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
100009aa:	0fc9      	lsrs	r1, r1, #31
100009ac:	0049      	lsls	r1, r1, #1
100009ae:	43a8      	bics	r0, r5
100009b0:	4301      	orrs	r1, r0
100009b2:	7219      	strb	r1, [r3, #8]
100009b4:	e7b0      	b.n	10000918 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
100009b6:	2304      	movs	r3, #4
100009b8:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
100009ba:	3202      	adds	r2, #2
		conv->prec_star = true;
100009bc:	430b      	orrs	r3, r1
100009be:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
100009c0:	7811      	ldrb	r1, [r2, #0]
100009c2:	ab12      	add	r3, sp, #72	; 0x48
100009c4:	296c      	cmp	r1, #108	; 0x6c
100009c6:	d045      	beq.n	10000a54 <z_cbvprintf_impl+0x248>
100009c8:	d829      	bhi.n	10000a1e <z_cbvprintf_impl+0x212>
100009ca:	2968      	cmp	r1, #104	; 0x68
100009cc:	d030      	beq.n	10000a30 <z_cbvprintf_impl+0x224>
100009ce:	296a      	cmp	r1, #106	; 0x6a
100009d0:	d04c      	beq.n	10000a6c <z_cbvprintf_impl+0x260>
100009d2:	294c      	cmp	r1, #76	; 0x4c
100009d4:	d054      	beq.n	10000a80 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
100009d6:	7811      	ldrb	r1, [r2, #0]
100009d8:	1c53      	adds	r3, r2, #1
100009da:	aa12      	add	r2, sp, #72	; 0x48
100009dc:	9307      	str	r3, [sp, #28]
100009de:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100009e0:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
100009e2:	2978      	cmp	r1, #120	; 0x78
100009e4:	d900      	bls.n	100009e8 <z_cbvprintf_impl+0x1dc>
100009e6:	e0b9      	b.n	10000b5c <z_cbvprintf_impl+0x350>
100009e8:	296d      	cmp	r1, #109	; 0x6d
100009ea:	d850      	bhi.n	10000a8e <z_cbvprintf_impl+0x282>
100009ec:	2969      	cmp	r1, #105	; 0x69
100009ee:	d900      	bls.n	100009f2 <z_cbvprintf_impl+0x1e6>
100009f0:	e0b4      	b.n	10000b5c <z_cbvprintf_impl+0x350>
100009f2:	2957      	cmp	r1, #87	; 0x57
100009f4:	d866      	bhi.n	10000ac4 <z_cbvprintf_impl+0x2b8>
100009f6:	2941      	cmp	r1, #65	; 0x41
100009f8:	d003      	beq.n	10000a02 <z_cbvprintf_impl+0x1f6>
100009fa:	3945      	subs	r1, #69	; 0x45
100009fc:	2902      	cmp	r1, #2
100009fe:	d900      	bls.n	10000a02 <z_cbvprintf_impl+0x1f6>
10000a00:	e0ac      	b.n	10000b5c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
10000a02:	2307      	movs	r3, #7
10000a04:	a912      	add	r1, sp, #72	; 0x48
10000a06:	7a8a      	ldrb	r2, [r1, #10]
10000a08:	439a      	bics	r2, r3
10000a0a:	3b03      	subs	r3, #3
10000a0c:	4313      	orrs	r3, r2
10000a0e:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10000a10:	2301      	movs	r3, #1
			break;
10000a12:	e073      	b.n	10000afc <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
10000a14:	4373      	muls	r3, r6
10000a16:	3b30      	subs	r3, #48	; 0x30
10000a18:	002a      	movs	r2, r5
10000a1a:	185b      	adds	r3, r3, r1
10000a1c:	e790      	b.n	10000940 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10000a1e:	2974      	cmp	r1, #116	; 0x74
10000a20:	d029      	beq.n	10000a76 <z_cbvprintf_impl+0x26a>
10000a22:	297a      	cmp	r1, #122	; 0x7a
10000a24:	d1d7      	bne.n	100009d6 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
10000a26:	2178      	movs	r1, #120	; 0x78
10000a28:	7a58      	ldrb	r0, [r3, #9]
10000a2a:	4388      	bics	r0, r1
10000a2c:	3948      	subs	r1, #72	; 0x48
10000a2e:	e00d      	b.n	10000a4c <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10000a30:	7850      	ldrb	r0, [r2, #1]
10000a32:	2178      	movs	r1, #120	; 0x78
10000a34:	2868      	cmp	r0, #104	; 0x68
10000a36:	d106      	bne.n	10000a46 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10000a38:	7a58      	ldrb	r0, [r3, #9]
10000a3a:	4388      	bics	r0, r1
10000a3c:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10000a3e:	4301      	orrs	r1, r0
10000a40:	7259      	strb	r1, [r3, #9]
			++sp;
10000a42:	3202      	adds	r2, #2
10000a44:	e7c7      	b.n	100009d6 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
10000a46:	7a58      	ldrb	r0, [r3, #9]
10000a48:	4388      	bics	r0, r1
10000a4a:	2110      	movs	r1, #16
10000a4c:	4301      	orrs	r1, r0
10000a4e:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000a50:	3201      	adds	r2, #1
10000a52:	e7c0      	b.n	100009d6 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000a54:	7850      	ldrb	r0, [r2, #1]
10000a56:	2178      	movs	r1, #120	; 0x78
10000a58:	286c      	cmp	r0, #108	; 0x6c
10000a5a:	d103      	bne.n	10000a64 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10000a5c:	7a58      	ldrb	r0, [r3, #9]
10000a5e:	4388      	bics	r0, r1
10000a60:	3958      	subs	r1, #88	; 0x58
10000a62:	e7ec      	b.n	10000a3e <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000a64:	7a58      	ldrb	r0, [r3, #9]
10000a66:	4388      	bics	r0, r1
10000a68:	2118      	movs	r1, #24
10000a6a:	e7ef      	b.n	10000a4c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10000a6c:	2178      	movs	r1, #120	; 0x78
10000a6e:	7a58      	ldrb	r0, [r3, #9]
10000a70:	4388      	bics	r0, r1
10000a72:	3950      	subs	r1, #80	; 0x50
10000a74:	e7ea      	b.n	10000a4c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10000a76:	2178      	movs	r1, #120	; 0x78
10000a78:	7a58      	ldrb	r0, [r3, #9]
10000a7a:	4388      	bics	r0, r1
10000a7c:	3940      	subs	r1, #64	; 0x40
10000a7e:	e7e5      	b.n	10000a4c <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000a80:	8918      	ldrh	r0, [r3, #8]
10000a82:	49a5      	ldr	r1, [pc, #660]	; (10000d18 <z_cbvprintf_impl+0x50c>)
10000a84:	4008      	ands	r0, r1
10000a86:	49a5      	ldr	r1, [pc, #660]	; (10000d1c <z_cbvprintf_impl+0x510>)
10000a88:	4301      	orrs	r1, r0
10000a8a:	8119      	strh	r1, [r3, #8]
		break;
10000a8c:	e7e0      	b.n	10000a50 <z_cbvprintf_impl+0x244>
10000a8e:	2001      	movs	r0, #1
10000a90:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000a92:	396e      	subs	r1, #110	; 0x6e
10000a94:	b2c9      	uxtb	r1, r1
10000a96:	408d      	lsls	r5, r1
10000a98:	0029      	movs	r1, r5
10000a9a:	4da1      	ldr	r5, [pc, #644]	; (10000d20 <z_cbvprintf_impl+0x514>)
10000a9c:	4229      	tst	r1, r5
10000a9e:	d138      	bne.n	10000b12 <z_cbvprintf_impl+0x306>
10000aa0:	2524      	movs	r5, #36	; 0x24
10000aa2:	4229      	tst	r1, r5
10000aa4:	d151      	bne.n	10000b4a <z_cbvprintf_impl+0x33e>
10000aa6:	4201      	tst	r1, r0
10000aa8:	d058      	beq.n	10000b5c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10000aaa:	2107      	movs	r1, #7
10000aac:	7a90      	ldrb	r0, [r2, #10]
10000aae:	4388      	bics	r0, r1
10000ab0:	3904      	subs	r1, #4
10000ab2:	4301      	orrs	r1, r0
10000ab4:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000ab6:	2278      	movs	r2, #120	; 0x78
10000ab8:	4013      	ands	r3, r2
10000aba:	3b40      	subs	r3, #64	; 0x40
10000abc:	425a      	negs	r2, r3
10000abe:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000ac0:	b2db      	uxtb	r3, r3
10000ac2:	e01b      	b.n	10000afc <z_cbvprintf_impl+0x2f0>
10000ac4:	2001      	movs	r0, #1
	switch (conv->specifier) {
10000ac6:	000d      	movs	r5, r1
10000ac8:	0006      	movs	r6, r0
10000aca:	3d58      	subs	r5, #88	; 0x58
10000acc:	b2ed      	uxtb	r5, r5
10000ace:	40ae      	lsls	r6, r5
10000ad0:	0035      	movs	r5, r6
10000ad2:	26e2      	movs	r6, #226	; 0xe2
10000ad4:	0236      	lsls	r6, r6, #8
10000ad6:	4235      	tst	r5, r6
10000ad8:	d193      	bne.n	10000a02 <z_cbvprintf_impl+0x1f6>
10000ada:	4e92      	ldr	r6, [pc, #584]	; (10000d24 <z_cbvprintf_impl+0x518>)
10000adc:	4235      	tst	r5, r6
10000ade:	d122      	bne.n	10000b26 <z_cbvprintf_impl+0x31a>
10000ae0:	2184      	movs	r1, #132	; 0x84
10000ae2:	0289      	lsls	r1, r1, #10
10000ae4:	420d      	tst	r5, r1
10000ae6:	d039      	beq.n	10000b5c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10000ae8:	2507      	movs	r5, #7
10000aea:	7a91      	ldrb	r1, [r2, #10]
10000aec:	43a9      	bics	r1, r5
10000aee:	4301      	orrs	r1, r0
10000af0:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000af2:	2178      	movs	r1, #120	; 0x78
10000af4:	400b      	ands	r3, r1
10000af6:	2b40      	cmp	r3, #64	; 0x40
10000af8:	d011      	beq.n	10000b1e <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10000afa:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10000afc:	aa12      	add	r2, sp, #72	; 0x48
10000afe:	7a11      	ldrb	r1, [r2, #8]
10000b00:	0788      	lsls	r0, r1, #30
10000b02:	0fc0      	lsrs	r0, r0, #31
10000b04:	4303      	orrs	r3, r0
10000b06:	2002      	movs	r0, #2
10000b08:	005b      	lsls	r3, r3, #1
10000b0a:	4381      	bics	r1, r0
10000b0c:	4319      	orrs	r1, r3
10000b0e:	7211      	strb	r1, [r2, #8]
	return sp;
10000b10:	e6a4      	b.n	1000085c <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
10000b12:	2107      	movs	r1, #7
10000b14:	7a95      	ldrb	r5, [r2, #10]
10000b16:	438d      	bics	r5, r1
10000b18:	3905      	subs	r1, #5
10000b1a:	4329      	orrs	r1, r5
10000b1c:	e7e8      	b.n	10000af0 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10000b1e:	7a13      	ldrb	r3, [r2, #8]
10000b20:	4303      	orrs	r3, r0
		conv->invalid = true;
10000b22:	7213      	strb	r3, [r2, #8]
		break;
10000b24:	e7e9      	b.n	10000afa <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
10000b26:	2507      	movs	r5, #7
10000b28:	7a96      	ldrb	r6, [r2, #10]
10000b2a:	43ae      	bics	r6, r5
10000b2c:	3d05      	subs	r5, #5
10000b2e:	4335      	orrs	r5, r6
10000b30:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000b32:	2578      	movs	r5, #120	; 0x78
10000b34:	402b      	ands	r3, r5
10000b36:	2b40      	cmp	r3, #64	; 0x40
10000b38:	d102      	bne.n	10000b40 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10000b3a:	7a15      	ldrb	r5, [r2, #8]
10000b3c:	4328      	orrs	r0, r5
10000b3e:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10000b40:	2963      	cmp	r1, #99	; 0x63
10000b42:	d1da      	bne.n	10000afa <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10000b44:	1e5a      	subs	r2, r3, #1
10000b46:	4193      	sbcs	r3, r2
10000b48:	e7ba      	b.n	10000ac0 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
10000b4a:	2107      	movs	r1, #7
10000b4c:	7a90      	ldrb	r0, [r2, #10]
10000b4e:	4388      	bics	r0, r1
10000b50:	3904      	subs	r1, #4
10000b52:	4301      	orrs	r1, r0
10000b54:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000b56:	2278      	movs	r2, #120	; 0x78
10000b58:	4013      	ands	r3, r2
10000b5a:	e7f3      	b.n	10000b44 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10000b5c:	2301      	movs	r3, #1
10000b5e:	aa12      	add	r2, sp, #72	; 0x48
10000b60:	7a11      	ldrb	r1, [r2, #8]
10000b62:	430b      	orrs	r3, r1
10000b64:	e7dd      	b.n	10000b22 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
10000b66:	7a19      	ldrb	r1, [r3, #8]
10000b68:	297f      	cmp	r1, #127	; 0x7f
10000b6a:	d90f      	bls.n	10000b8c <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10000b6c:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10000b6e:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000b70:	ab12      	add	r3, sp, #72	; 0x48
10000b72:	0751      	lsls	r1, r2, #29
10000b74:	d50c      	bpl.n	10000b90 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10000b76:	cc04      	ldmia	r4!, {r2}
10000b78:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10000b7a:	2a00      	cmp	r2, #0
10000b7c:	da0c      	bge.n	10000b98 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10000b7e:	2102      	movs	r1, #2
10000b80:	7a5a      	ldrb	r2, [r3, #9]
10000b82:	438a      	bics	r2, r1
10000b84:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10000b86:	2301      	movs	r3, #1
10000b88:	425b      	negs	r3, r3
10000b8a:	e004      	b.n	10000b96 <z_cbvprintf_impl+0x38a>
		int width = -1;
10000b8c:	2301      	movs	r3, #1
10000b8e:	e674      	b.n	1000087a <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10000b90:	0792      	lsls	r2, r2, #30
10000b92:	d5f8      	bpl.n	10000b86 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10000b94:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10000b96:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10000b98:	2500      	movs	r5, #0
10000b9a:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10000b9c:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
10000b9e:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10000ba0:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000ba2:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10000ba4:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000ba6:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10000ba8:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10000baa:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10000bac:	2b01      	cmp	r3, #1
10000bae:	d130      	bne.n	10000c12 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10000bb0:	1ed0      	subs	r0, r2, #3
10000bb2:	2804      	cmp	r0, #4
10000bb4:	d804      	bhi.n	10000bc0 <z_cbvprintf_impl+0x3b4>
10000bb6:	f7ff faf7 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000bba:	450e      	.short	0x450e
10000bbc:	0e45      	.short	0x0e45
10000bbe:	0e          	.byte	0x0e
10000bbf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10000bc0:	6823      	ldr	r3, [r4, #0]
10000bc2:	17d8      	asrs	r0, r3, #31
10000bc4:	9312      	str	r3, [sp, #72]	; 0x48
10000bc6:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10000bc8:	2a01      	cmp	r2, #1
10000bca:	d109      	bne.n	10000be0 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10000bcc:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
10000bce:	9312      	str	r3, [sp, #72]	; 0x48
10000bd0:	17db      	asrs	r3, r3, #31
10000bd2:	604b      	str	r3, [r1, #4]
10000bd4:	e006      	b.n	10000be4 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000bd6:	cc08      	ldmia	r4!, {r3}
10000bd8:	9312      	str	r3, [sp, #72]	; 0x48
10000bda:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
10000bdc:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
10000bde:	e002      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
10000be0:	2a02      	cmp	r2, #2
10000be2:	d014      	beq.n	10000c0e <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
10000be4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
10000be6:	a912      	add	r1, sp, #72	; 0x48
10000be8:	7a0b      	ldrb	r3, [r1, #8]
10000bea:	2003      	movs	r0, #3
10000bec:	001d      	movs	r5, r3
10000bee:	4005      	ands	r5, r0
10000bf0:	4203      	tst	r3, r0
10000bf2:	d045      	beq.n	10000c80 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
10000bf4:	9b07      	ldr	r3, [sp, #28]
10000bf6:	9a08      	ldr	r2, [sp, #32]
10000bf8:	9905      	ldr	r1, [sp, #20]
10000bfa:	9804      	ldr	r0, [sp, #16]
10000bfc:	f001 fda6 	bl	1000274c <outs>
10000c00:	2800      	cmp	r0, #0
10000c02:	da00      	bge.n	10000c06 <z_cbvprintf_impl+0x3fa>
10000c04:	e137      	b.n	10000e76 <z_cbvprintf_impl+0x66a>
10000c06:	183f      	adds	r7, r7, r0
			continue;
10000c08:	9b07      	ldr	r3, [sp, #28]
10000c0a:	9308      	str	r3, [sp, #32]
10000c0c:	e605      	b.n	1000081a <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10000c0e:	b21b      	sxth	r3, r3
10000c10:	e7dd      	b.n	10000bce <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000c12:	2b02      	cmp	r3, #2
10000c14:	d125      	bne.n	10000c62 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
10000c16:	1ed0      	subs	r0, r2, #3
10000c18:	2804      	cmp	r0, #4
10000c1a:	d804      	bhi.n	10000c26 <z_cbvprintf_impl+0x41a>
10000c1c:	f7ff fac4 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000c20:	1912120d 	.word	0x1912120d
10000c24:	19          	.byte	0x19
10000c25:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
10000c26:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10000c28:	2a01      	cmp	r2, #1
10000c2a:	d016      	beq.n	10000c5a <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10000c2c:	9312      	str	r3, [sp, #72]	; 0x48
10000c2e:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10000c30:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
10000c32:	2a02      	cmp	r2, #2
10000c34:	d1d7      	bne.n	10000be6 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000c36:	9312      	str	r3, [sp, #72]	; 0x48
10000c38:	e7d5      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10000c3a:	cc08      	ldmia	r4!, {r3}
10000c3c:	9312      	str	r3, [sp, #72]	; 0x48
10000c3e:	2300      	movs	r3, #0
10000c40:	9313      	str	r3, [sp, #76]	; 0x4c
10000c42:	e7d0      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10000c44:	2307      	movs	r3, #7
10000c46:	3407      	adds	r4, #7
10000c48:	439c      	bics	r4, r3
				value->uint =
10000c4a:	cc03      	ldmia	r4!, {r0, r1}
10000c4c:	9012      	str	r0, [sp, #72]	; 0x48
10000c4e:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10000c50:	e7c9      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10000c52:	cc08      	ldmia	r4!, {r3}
10000c54:	9312      	str	r3, [sp, #72]	; 0x48
10000c56:	2300      	movs	r3, #0
10000c58:	e7c0      	b.n	10000bdc <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10000c5a:	b2db      	uxtb	r3, r3
10000c5c:	9312      	str	r3, [sp, #72]	; 0x48
10000c5e:	604d      	str	r5, [r1, #4]
10000c60:	e7c1      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10000c62:	2b04      	cmp	r3, #4
10000c64:	d108      	bne.n	10000c78 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
10000c66:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10000c68:	3303      	adds	r3, #3
10000c6a:	439c      	bics	r4, r3
10000c6c:	6820      	ldr	r0, [r4, #0]
10000c6e:	6861      	ldr	r1, [r4, #4]
10000c70:	3408      	adds	r4, #8
10000c72:	9012      	str	r0, [sp, #72]	; 0x48
10000c74:	9113      	str	r1, [sp, #76]	; 0x4c
10000c76:	e7b6      	b.n	10000be6 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10000c78:	2b03      	cmp	r3, #3
10000c7a:	d1b4      	bne.n	10000be6 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000c7c:	cc08      	ldmia	r4!, {r3}
10000c7e:	e7da      	b.n	10000c36 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10000c80:	7ac8      	ldrb	r0, [r1, #11]
10000c82:	2878      	cmp	r0, #120	; 0x78
10000c84:	d8c0      	bhi.n	10000c08 <z_cbvprintf_impl+0x3fc>
10000c86:	2862      	cmp	r0, #98	; 0x62
10000c88:	d82b      	bhi.n	10000ce2 <z_cbvprintf_impl+0x4d6>
10000c8a:	2825      	cmp	r0, #37	; 0x25
10000c8c:	d100      	bne.n	10000c90 <z_cbvprintf_impl+0x484>
10000c8e:	e5cf      	b.n	10000830 <z_cbvprintf_impl+0x24>
10000c90:	2858      	cmp	r0, #88	; 0x58
10000c92:	d1b9      	bne.n	10000c08 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000c94:	9812      	ldr	r0, [sp, #72]	; 0x48
10000c96:	9913      	ldr	r1, [sp, #76]	; 0x4c
10000c98:	231e      	movs	r3, #30
10000c9a:	aa0a      	add	r2, sp, #40	; 0x28
10000c9c:	189b      	adds	r3, r3, r2
10000c9e:	9300      	str	r3, [sp, #0]
10000ca0:	aa14      	add	r2, sp, #80	; 0x50
10000ca2:	ab0c      	add	r3, sp, #48	; 0x30
10000ca4:	f001 fd05 	bl	100026b2 <encode_uint>
			if (precision >= 0) {
10000ca8:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10000caa:	0006      	movs	r6, r0
			if (precision >= 0) {
10000cac:	2b00      	cmp	r3, #0
10000cae:	db0d      	blt.n	10000ccc <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10000cb0:	231e      	movs	r3, #30
				conv->flag_zero = false;
10000cb2:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000cb4:	aa0a      	add	r2, sp, #40	; 0x28
10000cb6:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10000cb8:	aa12      	add	r2, sp, #72	; 0x48
10000cba:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10000cbc:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10000cbe:	4381      	bics	r1, r0
10000cc0:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000cc2:	9906      	ldr	r1, [sp, #24]
10000cc4:	4299      	cmp	r1, r3
10000cc6:	d901      	bls.n	10000ccc <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10000cc8:	1acb      	subs	r3, r1, r3
10000cca:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10000ccc:	2e00      	cmp	r6, #0
10000cce:	d09b      	beq.n	10000c08 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000cd0:	231e      	movs	r3, #30
10000cd2:	aa0a      	add	r2, sp, #40	; 0x28
10000cd4:	189b      	adds	r3, r3, r2
10000cd6:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10000cd8:	9306      	str	r3, [sp, #24]
10000cda:	2d00      	cmp	r5, #0
10000cdc:	d032      	beq.n	10000d44 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
10000cde:	3001      	adds	r0, #1
10000ce0:	e030      	b.n	10000d44 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
10000ce2:	3863      	subs	r0, #99	; 0x63
10000ce4:	2815      	cmp	r0, #21
10000ce6:	d88f      	bhi.n	10000c08 <z_cbvprintf_impl+0x3fc>
10000ce8:	f7ff fa68 	bl	100001bc <__gnu_thumb1_case_shi>
10000cec:	0068005e 	.word	0x0068005e
10000cf0:	ff8eff8e 	.word	0xff8eff8e
10000cf4:	ff8eff8e 	.word	0xff8eff8e
10000cf8:	ff8e0068 	.word	0xff8e0068
10000cfc:	ff8eff8e 	.word	0xff8eff8e
10000d00:	00a0ff8e 	.word	0x00a0ff8e
10000d04:	007c007a 	.word	0x007c007a
10000d08:	ff8eff8e 	.word	0xff8eff8e
10000d0c:	ff8e001e 	.word	0xff8e001e
10000d10:	ff8e007a 	.word	0xff8e007a
10000d14:	007aff8e 	.word	0x007aff8e
10000d18:	ffff87fd 	.word	0xffff87fd
10000d1c:	00004002 	.word	0x00004002
10000d20:	00000482 	.word	0x00000482
10000d24:	00000801 	.word	0x00000801
			if (precision >= 0) {
10000d28:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10000d2a:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10000d2c:	2b00      	cmp	r3, #0
10000d2e:	db37      	blt.n	10000da0 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10000d30:	0019      	movs	r1, r3
10000d32:	0030      	movs	r0, r6
10000d34:	f001 fd40 	bl	100027b8 <strnlen>
			bpe = bps + len;
10000d38:	1833      	adds	r3, r6, r0
		char sign = 0;
10000d3a:	2500      	movs	r5, #0
			bpe = bps + len;
10000d3c:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10000d3e:	2e00      	cmp	r6, #0
10000d40:	d100      	bne.n	10000d44 <z_cbvprintf_impl+0x538>
10000d42:	e761      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10000d44:	ab12      	add	r3, sp, #72	; 0x48
10000d46:	7a9b      	ldrb	r3, [r3, #10]
10000d48:	2210      	movs	r2, #16
10000d4a:	0019      	movs	r1, r3
10000d4c:	4011      	ands	r1, r2
10000d4e:	910b      	str	r1, [sp, #44]	; 0x2c
10000d50:	4213      	tst	r3, r2
10000d52:	d100      	bne.n	10000d56 <z_cbvprintf_impl+0x54a>
10000d54:	e085      	b.n	10000e62 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10000d56:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10000d58:	9a15      	ldr	r2, [sp, #84]	; 0x54
10000d5a:	920a      	str	r2, [sp, #40]	; 0x28
10000d5c:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10000d5e:	065b      	lsls	r3, r3, #25
10000d60:	d501      	bpl.n	10000d66 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10000d62:	9b16      	ldr	r3, [sp, #88]	; 0x58
10000d64:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10000d66:	9b03      	ldr	r3, [sp, #12]
10000d68:	2b00      	cmp	r3, #0
10000d6a:	dc00      	bgt.n	10000d6e <z_cbvprintf_impl+0x562>
10000d6c:	e094      	b.n	10000e98 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10000d6e:	1a1b      	subs	r3, r3, r0
10000d70:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10000d72:	ab12      	add	r3, sp, #72	; 0x48
10000d74:	7a1b      	ldrb	r3, [r3, #8]
10000d76:	075a      	lsls	r2, r3, #29
10000d78:	0fd1      	lsrs	r1, r2, #31
10000d7a:	9108      	str	r1, [sp, #32]
10000d7c:	2a00      	cmp	r2, #0
10000d7e:	da00      	bge.n	10000d82 <z_cbvprintf_impl+0x576>
10000d80:	e08a      	b.n	10000e98 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
10000d82:	065b      	lsls	r3, r3, #25
10000d84:	d400      	bmi.n	10000d88 <z_cbvprintf_impl+0x57c>
10000d86:	e078      	b.n	10000e7a <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10000d88:	2d00      	cmp	r5, #0
10000d8a:	d007      	beq.n	10000d9c <z_cbvprintf_impl+0x590>
						OUTC(sign);
10000d8c:	0028      	movs	r0, r5
10000d8e:	9905      	ldr	r1, [sp, #20]
10000d90:	9b04      	ldr	r3, [sp, #16]
10000d92:	4798      	blx	r3
10000d94:	2800      	cmp	r0, #0
10000d96:	db6e      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000d98:	9d08      	ldr	r5, [sp, #32]
10000d9a:	3701      	adds	r7, #1
					pad = '0';
10000d9c:	2330      	movs	r3, #48	; 0x30
10000d9e:	e06d      	b.n	10000e7c <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10000da0:	0030      	movs	r0, r6
10000da2:	f001 fd01 	bl	100027a8 <strlen>
10000da6:	e7c7      	b.n	10000d38 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10000da8:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000dac:	ae0c      	add	r6, sp, #48	; 0x30
10000dae:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10000db0:	aa0a      	add	r2, sp, #40	; 0x28
10000db2:	189b      	adds	r3, r3, r2
		char sign = 0;
10000db4:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10000db6:	2001      	movs	r0, #1
			bpe = buf + 1;
10000db8:	9306      	str	r3, [sp, #24]
10000dba:	e7c3      	b.n	10000d44 <z_cbvprintf_impl+0x538>
				sign = '+';
10000dbc:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000dbe:	071a      	lsls	r2, r3, #28
10000dc0:	d402      	bmi.n	10000dc8 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
10000dc2:	06db      	lsls	r3, r3, #27
10000dc4:	0fdb      	lsrs	r3, r3, #31
10000dc6:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10000dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000dca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10000dcc:	2b00      	cmp	r3, #0
10000dce:	db00      	blt.n	10000dd2 <z_cbvprintf_impl+0x5c6>
10000dd0:	e760      	b.n	10000c94 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
10000dd2:	2100      	movs	r1, #0
10000dd4:	4250      	negs	r0, r2
10000dd6:	4199      	sbcs	r1, r3
				sign = '-';
10000dd8:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000dda:	9012      	str	r0, [sp, #72]	; 0x48
10000ddc:	9113      	str	r1, [sp, #76]	; 0x4c
10000dde:	e759      	b.n	10000c94 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10000de0:	2500      	movs	r5, #0
10000de2:	e757      	b.n	10000c94 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10000de4:	9812      	ldr	r0, [sp, #72]	; 0x48
10000de6:	ad12      	add	r5, sp, #72	; 0x48
10000de8:	2800      	cmp	r0, #0
10000dea:	d034      	beq.n	10000e56 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000dec:	231e      	movs	r3, #30
10000dee:	aa0a      	add	r2, sp, #40	; 0x28
10000df0:	189b      	adds	r3, r3, r2
10000df2:	9300      	str	r3, [sp, #0]
10000df4:	aa14      	add	r2, sp, #80	; 0x50
10000df6:	ab0c      	add	r3, sp, #48	; 0x30
10000df8:	2100      	movs	r1, #0
10000dfa:	f001 fc5a 	bl	100026b2 <encode_uint>
				conv->altform_0c = true;
10000dfe:	23ef      	movs	r3, #239	; 0xef
10000e00:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000e02:	0006      	movs	r6, r0
				conv->altform_0c = true;
10000e04:	401a      	ands	r2, r3
10000e06:	4b48      	ldr	r3, [pc, #288]	; (10000f28 <z_cbvprintf_impl+0x71c>)
10000e08:	4313      	orrs	r3, r2
10000e0a:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000e0c:	2500      	movs	r5, #0
			if (precision >= 0) {
10000e0e:	9b06      	ldr	r3, [sp, #24]
10000e10:	42ab      	cmp	r3, r5
10000e12:	db00      	blt.n	10000e16 <z_cbvprintf_impl+0x60a>
10000e14:	e74c      	b.n	10000cb0 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
10000e16:	42a8      	cmp	r0, r5
10000e18:	d100      	bne.n	10000e1c <z_cbvprintf_impl+0x610>
10000e1a:	e6f5      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000e1c:	231e      	movs	r3, #30
10000e1e:	aa0a      	add	r2, sp, #40	; 0x28
10000e20:	189b      	adds	r3, r3, r2
10000e22:	1a18      	subs	r0, r3, r0
10000e24:	231e      	movs	r3, #30
10000e26:	189b      	adds	r3, r3, r2
10000e28:	9306      	str	r3, [sp, #24]
10000e2a:	e78b      	b.n	10000d44 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10000e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10000e2e:	2a07      	cmp	r2, #7
10000e30:	d900      	bls.n	10000e34 <z_cbvprintf_impl+0x628>
10000e32:	e6e9      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
10000e34:	0010      	movs	r0, r2
10000e36:	f7ff f9b7 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000e3a:	040c      	.short	0x040c
10000e3c:	08080c06 	.word	0x08080c06
10000e40:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10000e42:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10000e44:	e6e0      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10000e46:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10000e48:	e6de      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10000e4a:	17fa      	asrs	r2, r7, #31
10000e4c:	601f      	str	r7, [r3, #0]
10000e4e:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10000e50:	e6da      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000e52:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10000e54:	e6d8      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10000e56:	4b35      	ldr	r3, [pc, #212]	; (10000f2c <z_cbvprintf_impl+0x720>)
		char sign = 0;
10000e58:	0005      	movs	r5, r0
10000e5a:	4e35      	ldr	r6, [pc, #212]	; (10000f30 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10000e5c:	2005      	movs	r0, #5
			bpe = bps + 5;
10000e5e:	9306      	str	r3, [sp, #24]
10000e60:	e770      	b.n	10000d44 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10000e62:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000e64:	0fd2      	lsrs	r2, r2, #31
10000e66:	1880      	adds	r0, r0, r2
10000e68:	e776      	b.n	10000d58 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10000e6a:	9905      	ldr	r1, [sp, #20]
10000e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
10000e6e:	9b04      	ldr	r3, [sp, #16]
10000e70:	4798      	blx	r3
10000e72:	2800      	cmp	r0, #0
10000e74:	da05      	bge.n	10000e82 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10000e76:	b019      	add	sp, #100	; 0x64
10000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000e7a:	2320      	movs	r3, #32
					pad = '0';
10000e7c:	9309      	str	r3, [sp, #36]	; 0x24
10000e7e:	9b03      	ldr	r3, [sp, #12]
10000e80:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10000e82:	9b08      	ldr	r3, [sp, #32]
10000e84:	001a      	movs	r2, r3
10000e86:	3a01      	subs	r2, #1
10000e88:	9208      	str	r2, [sp, #32]
10000e8a:	2b00      	cmp	r3, #0
10000e8c:	dced      	bgt.n	10000e6a <z_cbvprintf_impl+0x65e>
10000e8e:	9a03      	ldr	r2, [sp, #12]
10000e90:	19d7      	adds	r7, r2, r7
10000e92:	1aff      	subs	r7, r7, r3
10000e94:	9b08      	ldr	r3, [sp, #32]
10000e96:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10000e98:	2d00      	cmp	r5, #0
10000e9a:	d006      	beq.n	10000eaa <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10000e9c:	0028      	movs	r0, r5
10000e9e:	9905      	ldr	r1, [sp, #20]
10000ea0:	9b04      	ldr	r3, [sp, #16]
10000ea2:	4798      	blx	r3
10000ea4:	2800      	cmp	r0, #0
10000ea6:	dbe6      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000ea8:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000eaa:	ab12      	add	r3, sp, #72	; 0x48
10000eac:	7a9b      	ldrb	r3, [r3, #10]
10000eae:	06da      	lsls	r2, r3, #27
10000eb0:	d401      	bmi.n	10000eb6 <z_cbvprintf_impl+0x6aa>
10000eb2:	071b      	lsls	r3, r3, #28
10000eb4:	d506      	bpl.n	10000ec4 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10000eb6:	2030      	movs	r0, #48	; 0x30
10000eb8:	9905      	ldr	r1, [sp, #20]
10000eba:	9b04      	ldr	r3, [sp, #16]
10000ebc:	4798      	blx	r3
10000ebe:	2800      	cmp	r0, #0
10000ec0:	dbd9      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000ec2:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000ec6:	2b00      	cmp	r3, #0
10000ec8:	d007      	beq.n	10000eda <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10000eca:	ab12      	add	r3, sp, #72	; 0x48
10000ecc:	7ad8      	ldrb	r0, [r3, #11]
10000ece:	9905      	ldr	r1, [sp, #20]
10000ed0:	9b04      	ldr	r3, [sp, #16]
10000ed2:	4798      	blx	r3
10000ed4:	2800      	cmp	r0, #0
10000ed6:	dbce      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000ed8:	3701      	adds	r7, #1
				while (width-- > 0) {
10000eda:	003d      	movs	r5, r7
10000edc:	e006      	b.n	10000eec <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10000ede:	2030      	movs	r0, #48	; 0x30
10000ee0:	9905      	ldr	r1, [sp, #20]
10000ee2:	9b04      	ldr	r3, [sp, #16]
10000ee4:	4798      	blx	r3
10000ee6:	2800      	cmp	r0, #0
10000ee8:	dbc5      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000eea:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10000eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000eee:	19db      	adds	r3, r3, r7
10000ef0:	1b5b      	subs	r3, r3, r5
10000ef2:	2b00      	cmp	r3, #0
10000ef4:	dcf3      	bgt.n	10000ede <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10000ef6:	0032      	movs	r2, r6
10000ef8:	9b06      	ldr	r3, [sp, #24]
10000efa:	9905      	ldr	r1, [sp, #20]
10000efc:	9804      	ldr	r0, [sp, #16]
10000efe:	f001 fc25 	bl	1000274c <outs>
10000f02:	2800      	cmp	r0, #0
10000f04:	dbb7      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000f06:	1947      	adds	r7, r0, r5
10000f08:	003d      	movs	r5, r7
		while (width > 0) {
10000f0a:	9b03      	ldr	r3, [sp, #12]
10000f0c:	195b      	adds	r3, r3, r5
10000f0e:	1bdb      	subs	r3, r3, r7
10000f10:	2b00      	cmp	r3, #0
10000f12:	dc00      	bgt.n	10000f16 <z_cbvprintf_impl+0x70a>
10000f14:	e678      	b.n	10000c08 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10000f16:	2020      	movs	r0, #32
10000f18:	9905      	ldr	r1, [sp, #20]
10000f1a:	9b04      	ldr	r3, [sp, #16]
10000f1c:	4798      	blx	r3
10000f1e:	2800      	cmp	r0, #0
10000f20:	dba9      	blt.n	10000e76 <z_cbvprintf_impl+0x66a>
10000f22:	3701      	adds	r7, #1
			--width;
10000f24:	e7f1      	b.n	10000f0a <z_cbvprintf_impl+0x6fe>
10000f26:	46c0      	nop			; (mov r8, r8)
10000f28:	00007810 	.word	0x00007810
10000f2c:	10003415 	.word	0x10003415
10000f30:	10003410 	.word	0x10003410

10000f34 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000f34:	4901      	ldr	r1, [pc, #4]	; (10000f3c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000f36:	2210      	movs	r2, #16
	str	r2, [r1]
10000f38:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000f3a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000f3c:	e000ed10 	.word	0xe000ed10

10000f40 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10000f40:	f3bf 8f4f 	dsb	sy
10000f44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000f46:	b662      	cpsie	i
	isb
10000f48:	f3bf 8f6f 	isb	sy

	bx	lr
10000f4c:	4770      	bx	lr
10000f4e:	46c0      	nop			; (mov r8, r8)

10000f50 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10000f50:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000f52:	0600      	lsls	r0, r0, #24
10000f54:	d405      	bmi.n	10000f62 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000f56:	221f      	movs	r2, #31
10000f58:	401a      	ands	r2, r3
10000f5a:	2301      	movs	r3, #1
10000f5c:	4093      	lsls	r3, r2
10000f5e:	4a01      	ldr	r2, [pc, #4]	; (10000f64 <arch_irq_enable+0x14>)
10000f60:	6013      	str	r3, [r2, #0]
}
10000f62:	4770      	bx	lr
10000f64:	e000e100 	.word	0xe000e100

10000f68 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000f68:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f6a:	25ff      	movs	r5, #255	; 0xff
10000f6c:	2203      	movs	r2, #3
10000f6e:	000b      	movs	r3, r1
10000f70:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000f72:	b240      	sxtb	r0, r0
10000f74:	4002      	ands	r2, r0
10000f76:	00d2      	lsls	r2, r2, #3
10000f78:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000f7a:	015b      	lsls	r3, r3, #5
10000f7c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f7e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000f80:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10000f82:	2800      	cmp	r0, #0
10000f84:	db0a      	blt.n	10000f9c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f86:	24c0      	movs	r4, #192	; 0xc0
10000f88:	4a0a      	ldr	r2, [pc, #40]	; (10000fb4 <z_arm_irq_priority_set+0x4c>)
10000f8a:	0880      	lsrs	r0, r0, #2
10000f8c:	0080      	lsls	r0, r0, #2
10000f8e:	1880      	adds	r0, r0, r2
10000f90:	00a4      	lsls	r4, r4, #2
10000f92:	5902      	ldr	r2, [r0, r4]
10000f94:	400a      	ands	r2, r1
10000f96:	4313      	orrs	r3, r2
10000f98:	5103      	str	r3, [r0, r4]
}
10000f9a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f9c:	220f      	movs	r2, #15
10000f9e:	4010      	ands	r0, r2
10000fa0:	3808      	subs	r0, #8
10000fa2:	4a05      	ldr	r2, [pc, #20]	; (10000fb8 <z_arm_irq_priority_set+0x50>)
10000fa4:	0880      	lsrs	r0, r0, #2
10000fa6:	0080      	lsls	r0, r0, #2
10000fa8:	1880      	adds	r0, r0, r2
10000faa:	69c2      	ldr	r2, [r0, #28]
10000fac:	4011      	ands	r1, r2
10000fae:	4319      	orrs	r1, r3
10000fb0:	61c1      	str	r1, [r0, #28]
10000fb2:	e7f2      	b.n	10000f9a <z_arm_irq_priority_set+0x32>
10000fb4:	e000e100 	.word	0xe000e100
10000fb8:	e000ed00 	.word	0xe000ed00

10000fbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000fbc:	bf30      	wfi
    b z_SysNmiOnReset
10000fbe:	e7fd      	b.n	10000fbc <z_SysNmiOnReset>

10000fc0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000fc0:	22ff      	movs	r2, #255	; 0xff
10000fc2:	4b08      	ldr	r3, [pc, #32]	; (10000fe4 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000fc4:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000fc6:	4393      	bics	r3, r2
10000fc8:	4a07      	ldr	r2, [pc, #28]	; (10000fe8 <z_arm_prep_c+0x28>)
10000fca:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000fcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000fd0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000fd4:	f000 fdee 	bl	10001bb4 <z_bss_zero>
	z_data_copy();
10000fd8:	f001 f9aa 	bl	10002330 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000fdc:	f000 f8f2 	bl	100011c4 <z_arm_interrupt_init>
	z_cstart();
10000fe0:	f000 fe28 	bl	10001c34 <z_cstart>
10000fe4:	10000100 	.word	0x10000100
10000fe8:	e000ed00 	.word	0xe000ed00

10000fec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000fec:	4a08      	ldr	r2, [pc, #32]	; (10001010 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000fee:	4909      	ldr	r1, [pc, #36]	; (10001014 <arch_swap+0x28>)
	_current->arch.basepri = key;
10000ff0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000ff2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000ff4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000ff6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000ff8:	2380      	movs	r3, #128	; 0x80
10000ffa:	4907      	ldr	r1, [pc, #28]	; (10001018 <arch_swap+0x2c>)
10000ffc:	055b      	lsls	r3, r3, #21
10000ffe:	6848      	ldr	r0, [r1, #4]
10001000:	4303      	orrs	r3, r0
10001002:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10001004:	b662      	cpsie	i
10001006:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
1000100a:	6893      	ldr	r3, [r2, #8]
1000100c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
1000100e:	4770      	bx	lr
10001010:	200001bc 	.word	0x200001bc
10001014:	1000312c 	.word	0x1000312c
10001018:	e000ed00 	.word	0xe000ed00

1000101c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
1000101c:	4913      	ldr	r1, [pc, #76]	; (1000106c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
1000101e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10001020:	4813      	ldr	r0, [pc, #76]	; (10001070 <_thread_irq_disabled+0x22>)
    add r0, r2
10001022:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10001024:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10001028:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
1000102a:	4643      	mov	r3, r8
    mov r4, r9
1000102c:	464c      	mov	r4, r9
    mov r5, r10
1000102e:	4655      	mov	r5, sl
    mov r6, r11
10001030:	465e      	mov	r6, fp
    mov r7, ip
10001032:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10001034:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10001036:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10001038:	4f0e      	ldr	r7, [pc, #56]	; (10001074 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
1000103a:	4e0f      	ldr	r6, [pc, #60]	; (10001078 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
1000103c:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
1000103e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10001040:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10001042:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10001044:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10001046:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10001048:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
1000104a:	d100      	bne.n	1000104e <_thread_irq_disabled>
    cpsie i
1000104c:	b662      	cpsie	i

1000104e <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
1000104e:	4c08      	ldr	r4, [pc, #32]	; (10001070 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10001050:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10001052:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10001054:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10001056:	4698      	mov	r8, r3
    mov r9, r4
10001058:	46a1      	mov	r9, r4
    mov r10, r5
1000105a:	46aa      	mov	sl, r5
    mov r11, r6
1000105c:	46b3      	mov	fp, r6
    mov ip, r7
1000105e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10001060:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10001062:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10001064:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10001068:	4770      	bx	lr
1000106a:	0000      	.short	0x0000
    ldr r1, =_kernel
1000106c:	200001bc 	.word	0x200001bc
    ldr r0, =_thread_offset_to_callee_saved
10001070:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10001074:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10001078:	08000000 	.word	0x08000000

1000107c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
1000107c:	2004      	movs	r0, #4
  mov r1, lr
1000107e:	4671      	mov	r1, lr
  tst r1, r0
10001080:	4201      	tst	r1, r0
  beq _stack_frame_msp
10001082:	d002      	beq.n	1000108a <_stack_frame_msp>
  mrs r0, PSP
10001084:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10001088:	d101      	bne.n	1000108e <_stack_frame_endif>

1000108a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
1000108a:	f3ef 8008 	mrs	r0, MSP

1000108e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
1000108e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10001090:	3902      	subs	r1, #2
    ldrb r1, [r1]
10001092:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10001094:	2902      	cmp	r1, #2
    beq _oops
10001096:	d0ff      	beq.n	10001098 <_oops>

10001098 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10001098:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
1000109a:	f001 fb72 	bl	10002782 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
1000109e:	bd01      	pop	{r0, pc}

100010a0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
100010a0:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
100010a2:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
100010a4:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
100010a6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
100010a8:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
100010aa:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
100010ac:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
100010ae:	4906      	ldr	r1, [pc, #24]	; (100010c8 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
100010b0:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
100010b2:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
100010b4:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
100010b6:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
100010b8:	2380      	movs	r3, #128	; 0x80
100010ba:	045b      	lsls	r3, r3, #17
100010bc:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
100010be:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
100010c0:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
100010c2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
100010c4:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
100010c6:	bd10      	pop	{r4, pc}
100010c8:	1000269f 	.word	0x1000269f

100010cc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100010cc:	4b06      	ldr	r3, [pc, #24]	; (100010e8 <arch_switch_to_main_thread+0x1c>)
100010ce:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100010d0:	1c10      	adds	r0, r2, #0
100010d2:	f381 8809 	msr	PSP, r1
100010d6:	2100      	movs	r1, #0
100010d8:	b662      	cpsie	i
100010da:	f3bf 8f6f 	isb	sy
100010de:	2200      	movs	r2, #0
100010e0:	2300      	movs	r3, #0
100010e2:	f001 fadc 	bl	1000269e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
100010e6:	46c0      	nop			; (mov r8, r8)
100010e8:	200001bc 	.word	0x200001bc

100010ec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
100010ec:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
100010ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
100010f2:	4905      	ldr	r1, [pc, #20]	; (10001108 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
100010f4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
100010f6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
100010f8:	4904      	ldr	r1, [pc, #16]	; (1000110c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
100010fa:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
100010fc:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
100010fe:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10001100:	bc09      	pop	{r0, r3}
	mov lr, r3
10001102:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10001104:	4902      	ldr	r1, [pc, #8]	; (10001110 <_isr_wrapper+0x24>)
	bx r1
10001106:	4708      	bx	r1
	ldr r1, =16
10001108:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
1000110c:	10002f40 	.word	0x10002f40
	ldr r1, =z_arm_int_exit
10001110:	10001115 	.word	0x10001115

10001114 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10001114:	4b04      	ldr	r3, [pc, #16]	; (10001128 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10001116:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10001118:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
1000111a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
1000111c:	d002      	beq.n	10001124 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000111e:	4903      	ldr	r1, [pc, #12]	; (1000112c <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10001120:	4a03      	ldr	r2, [pc, #12]	; (10001130 <_EXIT_EXC+0xc>)
	str r2, [r1]
10001122:	600a      	str	r2, [r1, #0]

10001124 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10001124:	4770      	bx	lr
10001126:	0000      	.short	0x0000
	ldr r3, =_kernel
10001128:	200001bc 	.word	0x200001bc
	ldr r1, =_SCS_ICSR
1000112c:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10001130:	10000000 	.word	0x10000000

10001134 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10001134:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10001136:	4b1b      	ldr	r3, [pc, #108]	; (100011a4 <z_arm_fault+0x70>)
{
10001138:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000113a:	685b      	ldr	r3, [r3, #4]
{
1000113c:	b088      	sub	sp, #32
1000113e:	05db      	lsls	r3, r3, #23
10001140:	0ddb      	lsrs	r3, r3, #23
10001142:	b662      	cpsie	i
10001144:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10001148:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000114a:	0e16      	lsrs	r6, r2, #24
		return NULL;
1000114c:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000114e:	2eff      	cmp	r6, #255	; 0xff
10001150:	d109      	bne.n	10001166 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10001152:	3ef3      	subs	r6, #243	; 0xf3
10001154:	4016      	ands	r6, r2
10001156:	2e08      	cmp	r6, #8
10001158:	d005      	beq.n	10001166 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
1000115a:	0001      	movs	r1, r0
			*nested_exc = true;
1000115c:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
1000115e:	0712      	lsls	r2, r2, #28
10001160:	d501      	bpl.n	10001166 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10001162:	0021      	movs	r1, r4
	*nested_exc = false;
10001164:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10001166:	2400      	movs	r4, #0
	switch (fault) {
10001168:	2b03      	cmp	r3, #3
1000116a:	d106      	bne.n	1000117a <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
1000116c:	698b      	ldr	r3, [r1, #24]
1000116e:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10001170:	881a      	ldrh	r2, [r3, #0]
10001172:	4b0d      	ldr	r3, [pc, #52]	; (100011a8 <z_arm_fault+0x74>)
10001174:	429a      	cmp	r2, r3
10001176:	d100      	bne.n	1000117a <z_arm_fault+0x46>
		reason = esf->basic.r0;
10001178:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
1000117a:	2220      	movs	r2, #32
1000117c:	4668      	mov	r0, sp
1000117e:	f001 fb25 	bl	100027cc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10001182:	9b07      	ldr	r3, [sp, #28]
10001184:	2d00      	cmp	r5, #0
10001186:	d00a      	beq.n	1000119e <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10001188:	05da      	lsls	r2, r3, #23
1000118a:	d102      	bne.n	10001192 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
1000118c:	4a07      	ldr	r2, [pc, #28]	; (100011ac <z_arm_fault+0x78>)
1000118e:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10001190:	9307      	str	r3, [sp, #28]

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10001192:	4669      	mov	r1, sp
10001194:	0020      	movs	r0, r4
10001196:	f001 faf0 	bl	1000277a <z_arm_fatal_error>
}
1000119a:	b008      	add	sp, #32
1000119c:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
1000119e:	0a5b      	lsrs	r3, r3, #9
100011a0:	025b      	lsls	r3, r3, #9
100011a2:	e7f5      	b.n	10001190 <z_arm_fault+0x5c>
100011a4:	e000ed00 	.word	0xe000ed00
100011a8:	0000df02 	.word	0x0000df02
100011ac:	000001ff 	.word	0x000001ff

100011b0 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
100011b0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
100011b4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
100011b8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
100011ba:	4672      	mov	r2, lr
	bl z_arm_fault
100011bc:	f7ff ffba 	bl	10001134 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100011c0:	bd01      	pop	{r0, pc}
100011c2:	46c0      	nop			; (mov r8, r8)

100011c4 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
100011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100011c6:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100011c8:	2200      	movs	r2, #0
100011ca:	2603      	movs	r6, #3
100011cc:	25ff      	movs	r5, #255	; 0xff
100011ce:	00a4      	lsls	r4, r4, #2
100011d0:	0010      	movs	r0, r2
100011d2:	002f      	movs	r7, r5
100011d4:	4030      	ands	r0, r6
100011d6:	00c0      	lsls	r0, r0, #3
100011d8:	4087      	lsls	r7, r0
100011da:	4905      	ldr	r1, [pc, #20]	; (100011f0 <z_arm_interrupt_init+0x2c>)
100011dc:	0893      	lsrs	r3, r2, #2
100011de:	009b      	lsls	r3, r3, #2
100011e0:	185b      	adds	r3, r3, r1
100011e2:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
100011e4:	3201      	adds	r2, #1
100011e6:	43b9      	bics	r1, r7
100011e8:	5119      	str	r1, [r3, r4]
100011ea:	2a1a      	cmp	r2, #26
100011ec:	d1f0      	bne.n	100011d0 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
100011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100011f0:	e000e100 	.word	0xe000e100

100011f4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100011f4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
100011f6:	4807      	ldr	r0, [pc, #28]	; (10001214 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100011f8:	4907      	ldr	r1, [pc, #28]	; (10001218 <__start+0x24>)
    adds r0, r0, r1
100011fa:	1840      	adds	r0, r0, r1
    msr PSP, r0
100011fc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10001200:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10001204:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10001206:	4308      	orrs	r0, r1
    msr CONTROL, r0
10001208:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
1000120c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10001210:	f7ff fed6 	bl	10000fc0 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10001214:	200001f8 	.word	0x200001f8
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001218:	00000800 	.word	0x00000800

1000121c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
1000121c:	b510      	push	{r4, lr}
	if (_current == thread) {
1000121e:	4b0a      	ldr	r3, [pc, #40]	; (10001248 <z_impl_k_thread_abort+0x2c>)
10001220:	689b      	ldr	r3, [r3, #8]
10001222:	4283      	cmp	r3, r0
10001224:	d10d      	bne.n	10001242 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001226:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
1000122a:	2b00      	cmp	r3, #0
1000122c:	d009      	beq.n	10001242 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000122e:	2280      	movs	r2, #128	; 0x80
10001230:	4b06      	ldr	r3, [pc, #24]	; (1000124c <z_impl_k_thread_abort+0x30>)
10001232:	0552      	lsls	r2, r2, #21
10001234:	6859      	ldr	r1, [r3, #4]
10001236:	430a      	orrs	r2, r1
10001238:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
1000123a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000123c:	4904      	ldr	r1, [pc, #16]	; (10001250 <z_impl_k_thread_abort+0x34>)
1000123e:	400a      	ands	r2, r1
10001240:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10001242:	f001 f819 	bl	10002278 <z_thread_abort>
}
10001246:	bd10      	pop	{r4, pc}
10001248:	200001bc 	.word	0x200001bc
1000124c:	e000ed00 	.word	0xe000ed00
10001250:	ffff7fff 	.word	0xffff7fff

10001254 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10001254:	4b01      	ldr	r3, [pc, #4]	; (1000125c <__stdout_hook_install+0x8>)
10001256:	6018      	str	r0, [r3, #0]
}
10001258:	4770      	bx	lr
1000125a:	46c0      	nop			; (mov r8, r8)
1000125c:	2000000c 	.word	0x2000000c

10001260 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001260:	4b0e      	ldr	r3, [pc, #56]	; (1000129c <rp2040_init+0x3c>)
10001262:	4a0f      	ldr	r2, [pc, #60]	; (100012a0 <rp2040_init+0x40>)
#include <hardware/resets.h>

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(void)
{
10001264:	b570      	push	{r4, r5, r6, lr}
10001266:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001268:	4d0e      	ldr	r5, [pc, #56]	; (100012a4 <rp2040_init+0x44>)
1000126a:	4b0f      	ldr	r3, [pc, #60]	; (100012a8 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
1000126c:	4c0f      	ldr	r4, [pc, #60]	; (100012ac <rp2040_init+0x4c>)
1000126e:	602b      	str	r3, [r5, #0]
10001270:	0019      	movs	r1, r3
10001272:	68a2      	ldr	r2, [r4, #8]
10001274:	4391      	bics	r1, r2
10001276:	d1fb      	bne.n	10001270 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10001278:	f000 fa5e 	bl	10001738 <clocks_init>
1000127c:	4b0c      	ldr	r3, [pc, #48]	; (100012b0 <rp2040_init+0x50>)
1000127e:	602b      	str	r3, [r5, #0]
10001280:	68a3      	ldr	r3, [r4, #8]
10001282:	01db      	lsls	r3, r3, #7
10001284:	3380      	adds	r3, #128	; 0x80
10001286:	d1fb      	bne.n	10001280 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10001288:	f3ef 8310 	mrs	r3, PRIMASK
1000128c:	b672      	cpsid	i
	if (key != 0U) {
1000128e:	2b00      	cmp	r3, #0
10001290:	d102      	bne.n	10001298 <rp2040_init+0x38>
	__asm__ volatile(
10001292:	b662      	cpsie	i
10001294:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10001298:	2000      	movs	r0, #0
1000129a:	bd70      	pop	{r4, r5, r6, pc}
1000129c:	4000e000 	.word	0x4000e000
100012a0:	ffffcdbf 	.word	0xffffcdbf
100012a4:	4000f000 	.word	0x4000f000
100012a8:	003c3ffe 	.word	0x003c3ffe
100012ac:	4000c000 	.word	0x4000c000
100012b0:	01ffffff 	.word	0x01ffffff

100012b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
100012b4:	b510      	push	{r4, lr}
100012b6:	4808      	ldr	r0, [pc, #32]	; (100012d8 <uart_console_init+0x24>)
100012b8:	f001 fd59 	bl	10002d6e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
100012bc:	2800      	cmp	r0, #0
100012be:	d008      	beq.n	100012d2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
100012c0:	4c06      	ldr	r4, [pc, #24]	; (100012dc <uart_console_init+0x28>)
100012c2:	0020      	movs	r0, r4
100012c4:	f7ff ffc6 	bl	10001254 <__stdout_hook_install>
	__printk_hook_install(console_out);
100012c8:	0020      	movs	r0, r4
100012ca:	f7ff fa8d 	bl	100007e8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100012ce:	2000      	movs	r0, #0
}
100012d0:	bd10      	pop	{r4, pc}
		return -ENODEV;
100012d2:	2013      	movs	r0, #19
100012d4:	4240      	negs	r0, r0
100012d6:	e7fb      	b.n	100012d0 <uart_console_init+0x1c>
100012d8:	10002f10 	.word	0x10002f10
100012dc:	100012e1 	.word	0x100012e1

100012e0 <console_out>:
{
100012e0:	b570      	push	{r4, r5, r6, lr}
100012e2:	0004      	movs	r4, r0
100012e4:	4d07      	ldr	r5, [pc, #28]	; (10001304 <console_out+0x24>)
	if ('\n' == c) {
100012e6:	280a      	cmp	r0, #10
100012e8:	d104      	bne.n	100012f4 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100012ea:	68ab      	ldr	r3, [r5, #8]
100012ec:	210d      	movs	r1, #13
100012ee:	0028      	movs	r0, r5
100012f0:	685b      	ldr	r3, [r3, #4]
100012f2:	4798      	blx	r3
100012f4:	68ab      	ldr	r3, [r5, #8]
100012f6:	0028      	movs	r0, r5
100012f8:	685b      	ldr	r3, [r3, #4]
100012fa:	b2e1      	uxtb	r1, r4
100012fc:	4798      	blx	r3
}
100012fe:	0020      	movs	r0, r4
10001300:	bd70      	pop	{r4, r5, r6, pc}
10001302:	46c0      	nop			; (mov r8, r8)
10001304:	10002f10 	.word	0x10002f10

10001308 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10001308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000130a:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000130c:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
1000130e:	6903      	ldr	r3, [r0, #16]
10001310:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10001312:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001314:	4a14      	ldr	r2, [pc, #80]	; (10001368 <gpio_rpi_isr+0x60>)
10001316:	3308      	adds	r3, #8
10001318:	009b      	lsls	r3, r3, #2
1000131a:	589b      	ldr	r3, [r3, r2]
1000131c:	2207      	movs	r2, #7
1000131e:	4022      	ands	r2, r4
10001320:	0092      	lsls	r2, r2, #2
10001322:	40d3      	lsrs	r3, r2
		if (events) {
10001324:	220f      	movs	r2, #15
10001326:	4213      	tst	r3, r2
10001328:	d103      	bne.n	10001332 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000132a:	3401      	adds	r4, #1
1000132c:	2c1e      	cmp	r4, #30
1000132e:	d1f0      	bne.n	10001312 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10001330:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10001332:	210f      	movs	r1, #15
10001334:	0020      	movs	r0, r4
10001336:	f000 fb45 	bl	100019c4 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
1000133a:	9b01      	ldr	r3, [sp, #4]
1000133c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000133e:	2900      	cmp	r1, #0
10001340:	d0f3      	beq.n	1000132a <gpio_rpi_isr+0x22>
10001342:	2701      	movs	r7, #1
10001344:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10001346:	680d      	ldr	r5, [r1, #0]
10001348:	2900      	cmp	r1, #0
1000134a:	d0ee      	beq.n	1000132a <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
1000134c:	688b      	ldr	r3, [r1, #8]
1000134e:	001a      	movs	r2, r3
10001350:	403a      	ands	r2, r7
10001352:	423b      	tst	r3, r7
10001354:	d002      	beq.n	1000135c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10001356:	0030      	movs	r0, r6
10001358:	684b      	ldr	r3, [r1, #4]
1000135a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000135c:	1e2b      	subs	r3, r5, #0
1000135e:	d000      	beq.n	10001362 <gpio_rpi_isr+0x5a>
10001360:	682b      	ldr	r3, [r5, #0]
10001362:	0029      	movs	r1, r5
10001364:	001d      	movs	r5, r3
10001366:	e7ef      	b.n	10001348 <gpio_rpi_isr+0x40>
10001368:	40014100 	.word	0x40014100

1000136c <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
1000136c:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000136e:	4903      	ldr	r1, [pc, #12]	; (1000137c <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10001370:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001372:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001374:	400b      	ands	r3, r1
10001376:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10001378:	4770      	bx	lr
1000137a:	46c0      	nop			; (mov r8, r8)
1000137c:	fffff83f 	.word	0xfffff83f

10001380 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10001380:	b510      	push	{r4, lr}
10001382:	2b03      	cmp	r3, #3
10001384:	d823      	bhi.n	100013ce <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10001386:	2a01      	cmp	r2, #1
10001388:	d002      	beq.n	10001390 <uart_rpi_set_format.isra.0+0x10>
1000138a:	2a03      	cmp	r2, #3
1000138c:	d11f      	bne.n	100013ce <uart_rpi_set_format.isra.0+0x4e>
1000138e:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10001390:	2902      	cmp	r1, #2
10001392:	d81c      	bhi.n	100013ce <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10001394:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001396:	3a01      	subs	r2, #1
10001398:	480e      	ldr	r0, [pc, #56]	; (100013d4 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000139a:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000139c:	00d2      	lsls	r2, r2, #3
1000139e:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
100013a0:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100013a2:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100013a4:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100013a6:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
100013a8:	4299      	cmp	r1, r3
100013aa:	d005      	beq.n	100013b8 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100013ac:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100013ae:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100013b0:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100013b2:	424b      	negs	r3, r1
100013b4:	4159      	adcs	r1, r3
100013b6:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100013b8:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013ba:	236e      	movs	r3, #110	; 0x6e
100013bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
100013be:	404a      	eors	r2, r1
100013c0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013c2:	2380      	movs	r3, #128	; 0x80
100013c4:	015b      	lsls	r3, r3, #5
100013c6:	4303      	orrs	r3, r0
	return 0;
100013c8:	2000      	movs	r0, #0
100013ca:	601a      	str	r2, [r3, #0]
}
100013cc:	bd10      	pop	{r4, pc}
		return -EINVAL;
100013ce:	2016      	movs	r0, #22
100013d0:	4240      	negs	r0, r0
100013d2:	e7fb      	b.n	100013cc <uart_rpi_set_format.isra.0+0x4c>
100013d4:	10003442 	.word	0x10003442

100013d8 <uart_rpi_init>:
{
100013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
100013da:	6845      	ldr	r5, [r0, #4]
{
100013dc:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
100013de:	682b      	ldr	r3, [r5, #0]
{
100013e0:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
100013e2:	6906      	ldr	r6, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100013e4:	2100      	movs	r1, #0
100013e6:	68a8      	ldr	r0, [r5, #8]
100013e8:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
100013ea:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100013ec:	9301      	str	r3, [sp, #4]
100013ee:	f001 fb09 	bl	10002a04 <pinctrl_lookup_state>
	if (ret < 0) {
100013f2:	2800      	cmp	r0, #0
100013f4:	db23      	blt.n	1000143e <uart_rpi_init+0x66>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100013f6:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100013f8:	2200      	movs	r2, #0
100013fa:	7919      	ldrb	r1, [r3, #4]
100013fc:	6818      	ldr	r0, [r3, #0]
100013fe:	f001 fb14 	bl	10002a2a <pinctrl_configure_pins>
	if (ret < 0) {
10001402:	2800      	cmp	r0, #0
10001404:	db1b      	blt.n	1000143e <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
10001406:	6831      	ldr	r1, [r6, #0]
10001408:	9801      	ldr	r0, [sp, #4]
1000140a:	f000 fb45 	bl	10001a98 <uart_init>
	if (baudrate == 0) {
1000140e:	2800      	cmp	r0, #0
10001410:	d017      	beq.n	10001442 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10001412:	4b0d      	ldr	r3, [pc, #52]	; (10001448 <uart_rpi_init+0x70>)
10001414:	6030      	str	r0, [r6, #0]
10001416:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10001418:	2201      	movs	r2, #1
1000141a:	2303      	movs	r3, #3
1000141c:	2100      	movs	r1, #0
1000141e:	6860      	ldr	r0, [r4, #4]
10001420:	f7ff ffae 	bl	10001380 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10001424:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001426:	23c0      	movs	r3, #192	; 0xc0
10001428:	322c      	adds	r2, #44	; 0x2c
1000142a:	019b      	lsls	r3, r3, #6
1000142c:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
1000142e:	2600      	movs	r6, #0
10001430:	2210      	movs	r2, #16
10001432:	601a      	str	r2, [r3, #0]
10001434:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
10001436:	0020      	movs	r0, r4
10001438:	696b      	ldr	r3, [r5, #20]
1000143a:	4798      	blx	r3
	return 0;
1000143c:	0030      	movs	r0, r6
}
1000143e:	b005      	add	sp, #20
10001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10001442:	2016      	movs	r0, #22
10001444:	4240      	negs	r0, r0
10001446:	e7fa      	b.n	1000143e <uart_rpi_init+0x66>
10001448:	00030100 	.word	0x00030100

1000144c <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
1000144c:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
1000144e:	4b0a      	ldr	r3, [pc, #40]	; (10001478 <elapsed+0x2c>)
10001450:	4a0a      	ldr	r2, [pc, #40]	; (1000147c <elapsed+0x30>)
10001452:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001454:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10001456:	4d0a      	ldr	r5, [pc, #40]	; (10001480 <elapsed+0x34>)
10001458:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000145a:	03c9      	lsls	r1, r1, #15
1000145c:	d401      	bmi.n	10001462 <elapsed+0x16>
	    || (val1 < val2)) {
1000145e:	42a0      	cmp	r0, r4
10001460:	d204      	bcs.n	1000146c <elapsed+0x20>
		overflow_cyc += last_load;
10001462:	6811      	ldr	r1, [r2, #0]
10001464:	6828      	ldr	r0, [r5, #0]
10001466:	1809      	adds	r1, r1, r0
10001468:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
1000146a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
1000146c:	682b      	ldr	r3, [r5, #0]
1000146e:	6810      	ldr	r0, [r2, #0]
10001470:	18c0      	adds	r0, r0, r3
10001472:	1b00      	subs	r0, r0, r4
}
10001474:	bd30      	pop	{r4, r5, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	e000e010 	.word	0xe000e010
1000147c:	20000184 	.word	0x20000184
10001480:	20000190 	.word	0x20000190

10001484 <sys_clock_driver_init>:
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10001484:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001486:	4a09      	ldr	r2, [pc, #36]	; (100014ac <sys_clock_driver_init+0x28>)
10001488:	6a13      	ldr	r3, [r2, #32]
1000148a:	021b      	lsls	r3, r3, #8
1000148c:	0a1b      	lsrs	r3, r3, #8
1000148e:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10001490:	4b07      	ldr	r3, [pc, #28]	; (100014b0 <sys_clock_driver_init+0x2c>)
10001492:	4a08      	ldr	r2, [pc, #32]	; (100014b4 <sys_clock_driver_init+0x30>)
10001494:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10001496:	4b08      	ldr	r3, [pc, #32]	; (100014b8 <sys_clock_driver_init+0x34>)
10001498:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
1000149a:	4b08      	ldr	r3, [pc, #32]	; (100014bc <sys_clock_driver_init+0x38>)
1000149c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000149e:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
100014a0:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100014a2:	6819      	ldr	r1, [r3, #0]
100014a4:	430a      	orrs	r2, r1
100014a6:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100014a8:	4770      	bx	lr
100014aa:	46c0      	nop			; (mov r8, r8)
100014ac:	e000ed00 	.word	0xe000ed00
100014b0:	20000190 	.word	0x20000190
100014b4:	000030d3 	.word	0x000030d3
100014b8:	20000184 	.word	0x20000184
100014bc:	e000e010 	.word	0xe000e010

100014c0 <sys_clock_isr>:
{
100014c0:	b570      	push	{r4, r5, r6, lr}
	elapsed();
100014c2:	f7ff ffc3 	bl	1000144c <elapsed>
	cycle_count += overflow_cyc;
100014c6:	4b0b      	ldr	r3, [pc, #44]	; (100014f4 <sys_clock_isr+0x34>)
100014c8:	4a0b      	ldr	r2, [pc, #44]	; (100014f8 <sys_clock_isr+0x38>)
100014ca:	6818      	ldr	r0, [r3, #0]
100014cc:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014ce:	4c0b      	ldr	r4, [pc, #44]	; (100014fc <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
100014d0:	1840      	adds	r0, r0, r1
100014d2:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
100014d4:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014d6:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
100014d8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014da:	4909      	ldr	r1, [pc, #36]	; (10001500 <sys_clock_isr+0x40>)
100014dc:	1b40      	subs	r0, r0, r5
100014de:	f7fe fe77 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100014e2:	4b07      	ldr	r3, [pc, #28]	; (10001500 <sys_clock_isr+0x40>)
100014e4:	4343      	muls	r3, r0
100014e6:	195b      	adds	r3, r3, r5
100014e8:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
100014ea:	f000 fff3 	bl	100024d4 <sys_clock_announce>
	z_arm_int_exit();
100014ee:	f7ff fe11 	bl	10001114 <z_arm_exc_exit>
}
100014f2:	bd70      	pop	{r4, r5, r6, pc}
100014f4:	20000184 	.word	0x20000184
100014f8:	2000018c 	.word	0x2000018c
100014fc:	20000188 	.word	0x20000188
10001500:	000030d4 	.word	0x000030d4

10001504 <sys_clock_set_timeout>:
{
10001504:	b5f0      	push	{r4, r5, r6, r7, lr}
10001506:	4d32      	ldr	r5, [pc, #200]	; (100015d0 <sys_clock_set_timeout+0xcc>)
10001508:	4f32      	ldr	r7, [pc, #200]	; (100015d4 <sys_clock_set_timeout+0xd0>)
1000150a:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
1000150c:	2900      	cmp	r1, #0
1000150e:	d054      	beq.n	100015ba <sys_clock_set_timeout+0xb6>
10001510:	1c43      	adds	r3, r0, #1
10001512:	d108      	bne.n	10001526 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10001514:	2201      	movs	r2, #1
10001516:	682b      	ldr	r3, [r5, #0]
10001518:	4393      	bics	r3, r2
1000151a:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
1000151c:	23ff      	movs	r3, #255	; 0xff
1000151e:	061b      	lsls	r3, r3, #24
10001520:	603b      	str	r3, [r7, #0]
}
10001522:	b005      	add	sp, #20
10001524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10001526:	683b      	ldr	r3, [r7, #0]
10001528:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
1000152a:	2600      	movs	r6, #0
1000152c:	2801      	cmp	r0, #1
1000152e:	dd04      	ble.n	1000153a <sys_clock_set_timeout+0x36>
10001530:	4b29      	ldr	r3, [pc, #164]	; (100015d8 <sys_clock_set_timeout+0xd4>)
10001532:	001e      	movs	r6, r3
10001534:	4298      	cmp	r0, r3
10001536:	dc00      	bgt.n	1000153a <sys_clock_set_timeout+0x36>
10001538:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
1000153a:	f3ef 8310 	mrs	r3, PRIMASK
1000153e:	b672      	cpsid	i
10001540:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10001542:	f7ff ff83 	bl	1000144c <elapsed>
	overflow_cyc = 0U;
10001546:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10001548:	68ab      	ldr	r3, [r5, #8]
1000154a:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
1000154c:	4b23      	ldr	r3, [pc, #140]	; (100015dc <sys_clock_set_timeout+0xd8>)
1000154e:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10001550:	4b23      	ldr	r3, [pc, #140]	; (100015e0 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10001552:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10001554:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10001556:	4b23      	ldr	r3, [pc, #140]	; (100015e4 <sys_clock_set_timeout+0xe0>)
10001558:	681b      	ldr	r3, [r3, #0]
1000155a:	9300      	str	r3, [sp, #0]
1000155c:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
1000155e:	4290      	cmp	r0, r2
10001560:	db31      	blt.n	100015c6 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10001562:	4b21      	ldr	r3, [pc, #132]	; (100015e8 <sys_clock_set_timeout+0xe4>)
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
10001564:	4a21      	ldr	r2, [pc, #132]	; (100015ec <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10001566:	435e      	muls	r6, r3
		delay += unannounced;
10001568:	1980      	adds	r0, r0, r6
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
1000156a:	0019      	movs	r1, r3
1000156c:	1880      	adds	r0, r0, r2
1000156e:	f7fe fe2f 	bl	100001d0 <__udivsi3>
10001572:	4b1d      	ldr	r3, [pc, #116]	; (100015e8 <sys_clock_set_timeout+0xe4>)
10001574:	4358      	muls	r0, r3
		delay -= unannounced;
10001576:	9b00      	ldr	r3, [sp, #0]
10001578:	1b1b      	subs	r3, r3, r4
1000157a:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
1000157c:	2380      	movs	r3, #128	; 0x80
1000157e:	00db      	lsls	r3, r3, #3
10001580:	4298      	cmp	r0, r3
10001582:	d923      	bls.n	100015cc <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10001584:	4b1a      	ldr	r3, [pc, #104]	; (100015f0 <sys_clock_set_timeout+0xec>)
10001586:	4298      	cmp	r0, r3
10001588:	d820      	bhi.n	100015cc <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
1000158a:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
1000158c:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
1000158e:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10001590:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10001592:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001594:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10001596:	9b02      	ldr	r3, [sp, #8]
10001598:	9802      	ldr	r0, [sp, #8]
1000159a:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
1000159c:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
1000159e:	4288      	cmp	r0, r1
100015a0:	d202      	bcs.n	100015a8 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
100015a2:	9a01      	ldr	r2, [sp, #4]
100015a4:	189b      	adds	r3, r3, r2
100015a6:	191a      	adds	r2, r3, r4
100015a8:	4b0c      	ldr	r3, [pc, #48]	; (100015dc <sys_clock_set_timeout+0xd8>)
100015aa:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
100015ac:	9b03      	ldr	r3, [sp, #12]
100015ae:	2b00      	cmp	r3, #0
100015b0:	d1b7      	bne.n	10001522 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
100015b2:	b662      	cpsie	i
100015b4:	f3bf 8f6f 	isb	sy
100015b8:	e7b3      	b.n	10001522 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
100015ba:	683b      	ldr	r3, [r7, #0]
100015bc:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
100015be:	1c43      	adds	r3, r0, #1
100015c0:	d1b3      	bne.n	1000152a <sys_clock_set_timeout+0x26>
100015c2:	4805      	ldr	r0, [pc, #20]	; (100015d8 <sys_clock_set_timeout+0xd4>)
100015c4:	e7b8      	b.n	10001538 <sys_clock_set_timeout+0x34>
100015c6:	2080      	movs	r0, #128	; 0x80
100015c8:	00c0      	lsls	r0, r0, #3
100015ca:	e7de      	b.n	1000158a <sys_clock_set_timeout+0x86>
100015cc:	0018      	movs	r0, r3
100015ce:	e7dc      	b.n	1000158a <sys_clock_set_timeout+0x86>
100015d0:	e000e010 	.word	0xe000e010
100015d4:	20000190 	.word	0x20000190
100015d8:	0000053d 	.word	0x0000053d
100015dc:	2000018c 	.word	0x2000018c
100015e0:	20000184 	.word	0x20000184
100015e4:	20000188 	.word	0x20000188
100015e8:	000030d4 	.word	0x000030d4
100015ec:	000030d3 	.word	0x000030d3
100015f0:	00ffc684 	.word	0x00ffc684

100015f4 <sys_clock_elapsed>:
{
100015f4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100015f6:	f3ef 8410 	mrs	r4, PRIMASK
100015fa:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100015fc:	f7ff ff26 	bl	1000144c <elapsed>
10001600:	4b07      	ldr	r3, [pc, #28]	; (10001620 <sys_clock_elapsed+0x2c>)
10001602:	4a08      	ldr	r2, [pc, #32]	; (10001624 <sys_clock_elapsed+0x30>)
10001604:	681b      	ldr	r3, [r3, #0]
10001606:	6812      	ldr	r2, [r2, #0]
10001608:	1a9b      	subs	r3, r3, r2
1000160a:	1818      	adds	r0, r3, r0
	if (key != 0U) {
1000160c:	2c00      	cmp	r4, #0
1000160e:	d102      	bne.n	10001616 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10001610:	b662      	cpsie	i
10001612:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10001616:	4904      	ldr	r1, [pc, #16]	; (10001628 <sys_clock_elapsed+0x34>)
10001618:	f7fe fdda 	bl	100001d0 <__udivsi3>
}
1000161c:	bd10      	pop	{r4, pc}
1000161e:	46c0      	nop			; (mov r8, r8)
10001620:	2000018c 	.word	0x2000018c
10001624:	20000188 	.word	0x20000188
10001628:	000030d4 	.word	0x000030d4

1000162c <sys_clock_cycle_get_32>:
{
1000162c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000162e:	f3ef 8410 	mrs	r4, PRIMASK
10001632:	b672      	cpsid	i
	uint32_t ret = elapsed() + cycle_count;
10001634:	f7ff ff0a 	bl	1000144c <elapsed>
10001638:	4b04      	ldr	r3, [pc, #16]	; (1000164c <sys_clock_cycle_get_32+0x20>)
1000163a:	681b      	ldr	r3, [r3, #0]
1000163c:	18c0      	adds	r0, r0, r3
	if (key != 0U) {
1000163e:	2c00      	cmp	r4, #0
10001640:	d102      	bne.n	10001648 <sys_clock_cycle_get_32+0x1c>
	__asm__ volatile(
10001642:	b662      	cpsie	i
10001644:	f3bf 8f6f 	isb	sy
}
10001648:	bd10      	pop	{r4, pc}
1000164a:	46c0      	nop			; (mov r8, r8)
1000164c:	2000018c 	.word	0x2000018c

10001650 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001650:	b5f0      	push	{r4, r5, r6, r7, lr}
10001652:	b085      	sub	sp, #20
10001654:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001658:	0005      	movs	r5, r0
1000165a:	000f      	movs	r7, r1
        return false;
1000165c:	2000      	movs	r0, #0
    if (freq > src_freq)
1000165e:	429a      	cmp	r2, r3
10001660:	d863      	bhi.n	1000172a <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001662:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001664:	0e1a      	lsrs	r2, r3, #24
10001666:	021b      	lsls	r3, r3, #8
10001668:	9203      	str	r2, [sp, #12]
1000166a:	9302      	str	r3, [sp, #8]
1000166c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000166e:	0003      	movs	r3, r0
10001670:	9903      	ldr	r1, [sp, #12]
10001672:	9802      	ldr	r0, [sp, #8]
10001674:	f7fe fe12 	bl	1000029c <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001678:	436c      	muls	r4, r5
1000167a:	4b2d      	ldr	r3, [pc, #180]	; (10001730 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000167c:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000167e:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001680:	6863      	ldr	r3, [r4, #4]
10001682:	4283      	cmp	r3, r0
10001684:	d200      	bcs.n	10001688 <clock_configure+0x38>
        clock->div = div;
10001686:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10001688:	1f2b      	subs	r3, r5, #4
1000168a:	b2db      	uxtb	r3, r3
1000168c:	9300      	str	r3, [sp, #0]
1000168e:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001690:	9a00      	ldr	r2, [sp, #0]
10001692:	019b      	lsls	r3, r3, #6
10001694:	4323      	orrs	r3, r4
10001696:	2a01      	cmp	r2, #1
10001698:	d81b      	bhi.n	100016d2 <clock_configure+0x82>
1000169a:	2f01      	cmp	r7, #1
1000169c:	d119      	bne.n	100016d2 <clock_configure+0x82>
1000169e:	2203      	movs	r2, #3
100016a0:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
100016a2:	68a3      	ldr	r3, [r4, #8]
100016a4:	423b      	tst	r3, r7
100016a6:	d0fc      	beq.n	100016a2 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100016a8:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016aa:	6823      	ldr	r3, [r4, #0]
100016ac:	0152      	lsls	r2, r2, #5
100016ae:	405a      	eors	r2, r3
100016b0:	23e0      	movs	r3, #224	; 0xe0
100016b2:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016b4:	2380      	movs	r3, #128	; 0x80
100016b6:	015b      	lsls	r3, r3, #5
100016b8:	4323      	orrs	r3, r4
100016ba:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016bc:	2103      	movs	r1, #3
100016be:	6822      	ldr	r2, [r4, #0]
100016c0:	407a      	eors	r2, r7
100016c2:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016c4:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
100016c6:	2301      	movs	r3, #1
100016c8:	40bb      	lsls	r3, r7
100016ca:	68a2      	ldr	r2, [r4, #8]
100016cc:	4213      	tst	r3, r2
100016ce:	d0fc      	beq.n	100016ca <clock_configure+0x7a>
100016d0:	e01a      	b.n	10001708 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016d2:	2280      	movs	r2, #128	; 0x80
100016d4:	0112      	lsls	r2, r2, #4
100016d6:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
100016d8:	4b16      	ldr	r3, [pc, #88]	; (10001734 <clock_configure+0xe4>)
100016da:	00aa      	lsls	r2, r5, #2
100016dc:	58d1      	ldr	r1, [r2, r3]
100016de:	2900      	cmp	r1, #0
100016e0:	d005      	beq.n	100016ee <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100016e2:	6958      	ldr	r0, [r3, #20]
100016e4:	f7fe fd74 	bl	100001d0 <__udivsi3>
100016e8:	3001      	adds	r0, #1
            asm volatile (
100016ea:	3801      	subs	r0, #1
100016ec:	d1fd      	bne.n	100016ea <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
100016ee:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016f0:	6823      	ldr	r3, [r4, #0]
100016f2:	0152      	lsls	r2, r2, #5
100016f4:	405a      	eors	r2, r3
100016f6:	23e0      	movs	r3, #224	; 0xe0
100016f8:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016fa:	2380      	movs	r3, #128	; 0x80
100016fc:	015b      	lsls	r3, r3, #5
100016fe:	4323      	orrs	r3, r4
10001700:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10001702:	9a00      	ldr	r2, [sp, #0]
10001704:	2a01      	cmp	r2, #1
10001706:	d9d9      	bls.n	100016bc <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001708:	2380      	movs	r3, #128	; 0x80
1000170a:	2280      	movs	r2, #128	; 0x80
1000170c:	019b      	lsls	r3, r3, #6
1000170e:	4323      	orrs	r3, r4
10001710:	0112      	lsls	r2, r2, #4
10001712:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001714:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10001716:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001718:	0032      	movs	r2, r6
1000171a:	2300      	movs	r3, #0
1000171c:	9903      	ldr	r1, [sp, #12]
1000171e:	f7fe fdbd 	bl	1000029c <__aeabi_uldivmod>
10001722:	4c04      	ldr	r4, [pc, #16]	; (10001734 <clock_configure+0xe4>)
10001724:	00ad      	lsls	r5, r5, #2
10001726:	5160      	str	r0, [r4, r5]
10001728:	2001      	movs	r0, #1

    return true;
}
1000172a:	b005      	add	sp, #20
1000172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000172e:	46c0      	nop			; (mov r8, r8)
10001730:	40008000 	.word	0x40008000
10001734:	20000194 	.word	0x20000194

10001738 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10001738:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000173a:	200c      	movs	r0, #12
1000173c:	f000 f8de 	bl	100018fc <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001740:	f000 f8e4 	bl	1000190c <running_on_fpga>
10001744:	2800      	cmp	r0, #0
10001746:	d00a      	beq.n	1000175e <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10001748:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
1000174a:	4a2c      	ldr	r2, [pc, #176]	; (100017fc <clocks_init+0xc4>)
1000174c:	482c      	ldr	r0, [pc, #176]	; (10001800 <clocks_init+0xc8>)
1000174e:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10001750:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10001752:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10001754:	2b0a      	cmp	r3, #10
10001756:	d1fa      	bne.n	1000174e <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10001758:	4b2a      	ldr	r3, [pc, #168]	; (10001804 <clocks_init+0xcc>)
1000175a:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
1000175c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
1000175e:	4d2a      	ldr	r5, [pc, #168]	; (10001808 <clocks_init+0xd0>)
10001760:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10001762:	f000 f8b7 	bl	100018d4 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001766:	2201      	movs	r2, #1
10001768:	4b28      	ldr	r3, [pc, #160]	; (1000180c <clocks_init+0xd4>)
1000176a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
1000176c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000176e:	2b01      	cmp	r3, #1
10001770:	d1fc      	bne.n	1000176c <clocks_init+0x34>
10001772:	2203      	movs	r2, #3
10001774:	4b26      	ldr	r3, [pc, #152]	; (10001810 <clocks_init+0xd8>)
10001776:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001778:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000177a:	2c01      	cmp	r4, #1
1000177c:	d1fc      	bne.n	10001778 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000177e:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10001780:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10001782:	0021      	movs	r1, r4
10001784:	9500      	str	r5, [sp, #0]
10001786:	2306      	movs	r3, #6
10001788:	4a22      	ldr	r2, [pc, #136]	; (10001814 <clocks_init+0xdc>)
1000178a:	4823      	ldr	r0, [pc, #140]	; (10001818 <clocks_init+0xe0>)
1000178c:	f000 f854 	bl	10001838 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
10001790:	0033      	movs	r3, r6
10001792:	0021      	movs	r1, r4
10001794:	4a21      	ldr	r2, [pc, #132]	; (1000181c <clocks_init+0xe4>)
10001796:	4822      	ldr	r0, [pc, #136]	; (10001820 <clocks_init+0xe8>)
10001798:	9600      	str	r6, [sp, #0]
1000179a:	f000 f84d 	bl	10001838 <pll_init>
    clock_configure(clk_ref,
1000179e:	4b21      	ldr	r3, [pc, #132]	; (10001824 <clocks_init+0xec>)
100017a0:	0029      	movs	r1, r5
    clock_configure(clk_sys,
100017a2:	4d21      	ldr	r5, [pc, #132]	; (10001828 <clocks_init+0xf0>)
    clock_configure(clk_ref,
100017a4:	9300      	str	r3, [sp, #0]
100017a6:	2200      	movs	r2, #0
100017a8:	2004      	movs	r0, #4
100017aa:	f7ff ff51 	bl	10001650 <clock_configure>
    clock_configure(clk_sys,
100017ae:	002b      	movs	r3, r5
100017b0:	0021      	movs	r1, r4
100017b2:	2200      	movs	r2, #0
100017b4:	0030      	movs	r0, r6
100017b6:	9500      	str	r5, [sp, #0]
100017b8:	f7ff ff4a 	bl	10001650 <clock_configure>
    clock_configure(clk_usb,
100017bc:	2200      	movs	r2, #0
100017be:	4c10      	ldr	r4, [pc, #64]	; (10001800 <clocks_init+0xc8>)
100017c0:	0011      	movs	r1, r2
100017c2:	0023      	movs	r3, r4
100017c4:	9400      	str	r4, [sp, #0]
100017c6:	2007      	movs	r0, #7
100017c8:	f7ff ff42 	bl	10001650 <clock_configure>
    clock_configure(clk_adc,
100017cc:	2200      	movs	r2, #0
100017ce:	0023      	movs	r3, r4
100017d0:	0011      	movs	r1, r2
100017d2:	9400      	str	r4, [sp, #0]
100017d4:	2008      	movs	r0, #8
100017d6:	f7ff ff3b 	bl	10001650 <clock_configure>
    clock_configure(clk_rtc,
100017da:	2200      	movs	r2, #0
100017dc:	4b09      	ldr	r3, [pc, #36]	; (10001804 <clocks_init+0xcc>)
100017de:	0011      	movs	r1, r2
100017e0:	9300      	str	r3, [sp, #0]
100017e2:	2009      	movs	r0, #9
100017e4:	0023      	movs	r3, r4
100017e6:	f7ff ff33 	bl	10001650 <clock_configure>
    clock_configure(clk_peri,
100017ea:	2200      	movs	r2, #0
100017ec:	002b      	movs	r3, r5
100017ee:	0011      	movs	r1, r2
100017f0:	9500      	str	r5, [sp, #0]
100017f2:	2006      	movs	r0, #6
100017f4:	f7ff ff2c 	bl	10001650 <clock_configure>
100017f8:	e7b0      	b.n	1000175c <clocks_init+0x24>
100017fa:	46c0      	nop			; (mov r8, r8)
100017fc:	20000194 	.word	0x20000194
10001800:	02dc6c00 	.word	0x02dc6c00
10001804:	0000b71b 	.word	0x0000b71b
10001808:	40008000 	.word	0x40008000
1000180c:	4000b03c 	.word	0x4000b03c
10001810:	4000b030 	.word	0x4000b030
10001814:	59682f00 	.word	0x59682f00
10001818:	40028000 	.word	0x40028000
1000181c:	47868c00 	.word	0x47868c00
10001820:	4002c000 	.word	0x4002c000
10001824:	00b71b00 	.word	0x00b71b00
10001828:	07735940 	.word	0x07735940

1000182c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
1000182c:	4b01      	ldr	r3, [pc, #4]	; (10001834 <clock_get_hz+0x8>)
1000182e:	0080      	lsls	r0, r0, #2
10001830:	58c0      	ldr	r0, [r0, r3]
}
10001832:	4770      	bx	lr
10001834:	20000194 	.word	0x20000194

10001838 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000183a:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000183c:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000183e:	0017      	movs	r7, r2
10001840:	001e      	movs	r6, r3
10001842:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001844:	f7fe fcc4 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10001848:	491d      	ldr	r1, [pc, #116]	; (100018c0 <pll_init+0x88>)
1000184a:	4341      	muls	r1, r0
1000184c:	0038      	movs	r0, r7
1000184e:	f7fe fcbf 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001852:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001854:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001856:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001858:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000185a:	6822      	ldr	r2, [r4, #0]
1000185c:	2a00      	cmp	r2, #0
1000185e:	da0f      	bge.n	10001880 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001860:	213f      	movs	r1, #63	; 0x3f
10001862:	6822      	ldr	r2, [r4, #0]
10001864:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001866:	42aa      	cmp	r2, r5
10001868:	d10a      	bne.n	10001880 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000186a:	68a2      	ldr	r2, [r4, #8]
1000186c:	0512      	lsls	r2, r2, #20
1000186e:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001870:	4282      	cmp	r2, r0
10001872:	d105      	bne.n	10001880 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10001874:	21ee      	movs	r1, #238	; 0xee
10001876:	68e2      	ldr	r2, [r4, #12]
10001878:	02c9      	lsls	r1, r1, #11
1000187a:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000187c:	429a      	cmp	r2, r3
1000187e:	d01b      	beq.n	100018b8 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001880:	4a10      	ldr	r2, [pc, #64]	; (100018c4 <pll_init+0x8c>)
10001882:	4294      	cmp	r4, r2
10001884:	d019      	beq.n	100018ba <pll_init+0x82>
10001886:	2280      	movs	r2, #128	; 0x80
10001888:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000188a:	490f      	ldr	r1, [pc, #60]	; (100018c8 <pll_init+0x90>)
1000188c:	4e0f      	ldr	r6, [pc, #60]	; (100018cc <pll_init+0x94>)
1000188e:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001890:	490f      	ldr	r1, [pc, #60]	; (100018d0 <pll_init+0x98>)
10001892:	600a      	str	r2, [r1, #0]
10001894:	0017      	movs	r7, r2
10001896:	68b1      	ldr	r1, [r6, #8]
10001898:	438f      	bics	r7, r1
1000189a:	d1fb      	bne.n	10001894 <pll_init+0x5c>
1000189c:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000189e:	1d21      	adds	r1, r4, #4
100018a0:	0192      	lsls	r2, r2, #6
100018a2:	430a      	orrs	r2, r1
100018a4:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
100018a6:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
100018a8:	60a0      	str	r0, [r4, #8]
100018aa:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100018ac:	6821      	ldr	r1, [r4, #0]
100018ae:	2900      	cmp	r1, #0
100018b0:	dafc      	bge.n	100018ac <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
100018b2:	60e3      	str	r3, [r4, #12]
100018b4:	2308      	movs	r3, #8
100018b6:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100018ba:	2280      	movs	r2, #128	; 0x80
100018bc:	0192      	lsls	r2, r2, #6
100018be:	e7e4      	b.n	1000188a <pll_init+0x52>
100018c0:	000f4240 	.word	0x000f4240
100018c4:	4002c000 	.word	0x4002c000
100018c8:	4000e000 	.word	0x4000e000
100018cc:	4000c000 	.word	0x4000c000
100018d0:	4000f000 	.word	0x4000f000

100018d4 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100018d4:	22aa      	movs	r2, #170	; 0xaa
100018d6:	4b06      	ldr	r3, [pc, #24]	; (100018f0 <xosc_init+0x1c>)
100018d8:	0112      	lsls	r2, r2, #4
100018da:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100018dc:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018de:	4905      	ldr	r1, [pc, #20]	; (100018f4 <xosc_init+0x20>)
100018e0:	60da      	str	r2, [r3, #12]
100018e2:	4a05      	ldr	r2, [pc, #20]	; (100018f8 <xosc_init+0x24>)
100018e4:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100018e6:	685a      	ldr	r2, [r3, #4]
100018e8:	2a00      	cmp	r2, #0
100018ea:	dafc      	bge.n	100018e6 <xosc_init+0x12>
}
100018ec:	4770      	bx	lr
100018ee:	46c0      	nop			; (mov r8, r8)
100018f0:	40024000 	.word	0x40024000
100018f4:	00fab000 	.word	0x00fab000
100018f8:	40026000 	.word	0x40026000

100018fc <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100018fc:	2380      	movs	r3, #128	; 0x80
100018fe:	4a02      	ldr	r2, [pc, #8]	; (10001908 <watchdog_start_tick+0xc>)
10001900:	009b      	lsls	r3, r3, #2
10001902:	4303      	orrs	r3, r0
10001904:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001906:	4770      	bx	lr
10001908:	40058000 	.word	0x40058000

1000190c <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000190c:	4b02      	ldr	r3, [pc, #8]	; (10001918 <running_on_fpga+0xc>)
1000190e:	6818      	ldr	r0, [r3, #0]
10001910:	0780      	lsls	r0, r0, #30
10001912:	0fc0      	lsrs	r0, r0, #31
}
10001914:	4770      	bx	lr
10001916:	46c0      	nop			; (mov r8, r8)
10001918:	4006c000 	.word	0x4006c000

1000191c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
1000191c:	4b08      	ldr	r3, [pc, #32]	; (10001940 <gpio_set_function+0x24>)
1000191e:	0082      	lsls	r2, r0, #2
10001920:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001922:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10001924:	b510      	push	{r4, lr}
10001926:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001928:	00c0      	lsls	r0, r0, #3
1000192a:	4063      	eors	r3, r4
1000192c:	24c0      	movs	r4, #192	; 0xc0
1000192e:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001930:	2480      	movs	r4, #128	; 0x80
10001932:	0164      	lsls	r4, r4, #5
10001934:	4322      	orrs	r2, r4
10001936:	6013      	str	r3, [r2, #0]
10001938:	4b02      	ldr	r3, [pc, #8]	; (10001944 <gpio_set_function+0x28>)
1000193a:	18c0      	adds	r0, r0, r3
1000193c:	6041      	str	r1, [r0, #4]
}
1000193e:	bd10      	pop	{r4, pc}
10001940:	4001c004 	.word	0x4001c004
10001944:	40014000 	.word	0x40014000

10001948 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
10001948:	4b07      	ldr	r3, [pc, #28]	; (10001968 <gpio_set_pulls+0x20>)
1000194a:	0080      	lsls	r0, r0, #2
1000194c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000194e:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001950:	00c9      	lsls	r1, r1, #3
10001952:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10001954:	430a      	orrs	r2, r1
10001956:	405a      	eors	r2, r3
10001958:	230c      	movs	r3, #12
1000195a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000195c:	2380      	movs	r3, #128	; 0x80
1000195e:	015b      	lsls	r3, r3, #5
10001960:	4303      	orrs	r3, r0
10001962:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001964:	4770      	bx	lr
10001966:	46c0      	nop			; (mov r8, r8)
10001968:	4001c004 	.word	0x4001c004

1000196c <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
1000196c:	4b05      	ldr	r3, [pc, #20]	; (10001984 <gpio_set_input_hysteresis_enabled+0x18>)
1000196e:	0080      	lsls	r0, r0, #2
10001970:	18c0      	adds	r0, r0, r3
10001972:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001974:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001976:	2900      	cmp	r1, #0
10001978:	d100      	bne.n	1000197c <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000197a:	23c0      	movs	r3, #192	; 0xc0
1000197c:	019b      	lsls	r3, r3, #6
1000197e:	4303      	orrs	r3, r0
10001980:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10001982:	4770      	bx	lr
10001984:	4001c004 	.word	0x4001c004

10001988 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001988:	4b05      	ldr	r3, [pc, #20]	; (100019a0 <gpio_set_slew_rate+0x18>)
1000198a:	0080      	lsls	r0, r0, #2
1000198c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000198e:	6803      	ldr	r3, [r0, #0]
10001990:	4059      	eors	r1, r3
10001992:	2301      	movs	r3, #1
10001994:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001996:	2380      	movs	r3, #128	; 0x80
10001998:	015b      	lsls	r3, r3, #5
1000199a:	4303      	orrs	r3, r0
1000199c:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000199e:	4770      	bx	lr
100019a0:	4001c004 	.word	0x4001c004

100019a4 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100019a4:	4b06      	ldr	r3, [pc, #24]	; (100019c0 <gpio_set_drive_strength+0x1c>)
100019a6:	0080      	lsls	r0, r0, #2
100019a8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100019aa:	6803      	ldr	r3, [r0, #0]
100019ac:	0109      	lsls	r1, r1, #4
100019ae:	4059      	eors	r1, r3
100019b0:	2330      	movs	r3, #48	; 0x30
100019b2:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100019b4:	2380      	movs	r3, #128	; 0x80
100019b6:	015b      	lsls	r3, r3, #5
100019b8:	4303      	orrs	r3, r0
100019ba:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
100019bc:	4770      	bx	lr
100019be:	46c0      	nop			; (mov r8, r8)
100019c0:	4001c004 	.word	0x4001c004

100019c4 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
100019c4:	2207      	movs	r2, #7
100019c6:	08c3      	lsrs	r3, r0, #3
100019c8:	4010      	ands	r0, r2
100019ca:	0080      	lsls	r0, r0, #2
100019cc:	4081      	lsls	r1, r0
100019ce:	4a02      	ldr	r2, [pc, #8]	; (100019d8 <gpio_acknowledge_irq+0x14>)
100019d0:	333c      	adds	r3, #60	; 0x3c
100019d2:	009b      	lsls	r3, r3, #2
100019d4:	5099      	str	r1, [r3, r2]
}
100019d6:	4770      	bx	lr
100019d8:	40014000 	.word	0x40014000

100019dc <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100019de:	23d0      	movs	r3, #208	; 0xd0
100019e0:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019e2:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019e4:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019e6:	4263      	negs	r3, r4
100019e8:	415c      	adcs	r4, r3
100019ea:	232f      	movs	r3, #47	; 0x2f
100019ec:	4264      	negs	r4, r4
100019ee:	439c      	bics	r4, r3
100019f0:	4b0a      	ldr	r3, [pc, #40]	; (10001a1c <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019f2:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019f4:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019f6:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
100019f8:	f7ff ffe4 	bl	100019c4 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
100019fc:	2307      	movs	r3, #7
100019fe:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001a00:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10001a02:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001a04:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10001a06:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001a08:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001a0a:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001a0c:	2e00      	cmp	r6, #0
10001a0e:	d100      	bne.n	10001a12 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001a10:	23c0      	movs	r3, #192	; 0xc0
10001a12:	019b      	lsls	r3, r3, #6
10001a14:	4323      	orrs	r3, r4
10001a16:	601f      	str	r7, [r3, #0]
}
10001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001a1a:	46c0      	nop			; (mov r8, r8)
10001a1c:	40014130 	.word	0x40014130

10001a20 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001a20:	4b05      	ldr	r3, [pc, #20]	; (10001a38 <gpio_set_input_enabled+0x18>)
10001a22:	0080      	lsls	r0, r0, #2
10001a24:	18c0      	adds	r0, r0, r3
10001a26:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001a28:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001a2a:	2900      	cmp	r1, #0
10001a2c:	d100      	bne.n	10001a30 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001a2e:	23c0      	movs	r3, #192	; 0xc0
10001a30:	019b      	lsls	r3, r3, #6
10001a32:	4303      	orrs	r3, r0
10001a34:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10001a36:	4770      	bx	lr
10001a38:	4001c004 	.word	0x4001c004

10001a3c <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001a3c:	b570      	push	{r4, r5, r6, lr}
10001a3e:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001a40:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001a42:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001a44:	f7ff fef2 	bl	1000182c <clock_get_hz>
10001a48:	0021      	movs	r1, r4
10001a4a:	00c0      	lsls	r0, r0, #3
10001a4c:	f7fe fbc0 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10001a50:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001a52:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10001a54:	d007      	beq.n	10001a66 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10001a56:	4b0e      	ldr	r3, [pc, #56]	; (10001a90 <uart_set_baudrate+0x54>)
10001a58:	429d      	cmp	r5, r3
10001a5a:	d815      	bhi.n	10001a88 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001a5c:	237f      	movs	r3, #127	; 0x7f
10001a5e:	4018      	ands	r0, r3
10001a60:	1900      	adds	r0, r0, r4
10001a62:	002c      	movs	r4, r5
10001a64:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001a66:	2380      	movs	r3, #128	; 0x80
10001a68:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10001a6a:	6274      	str	r4, [r6, #36]	; 0x24
10001a6c:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10001a6e:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001a70:	362c      	adds	r6, #44	; 0x2c
10001a72:	4333      	orrs	r3, r6
10001a74:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001a76:	2006      	movs	r0, #6
10001a78:	f7ff fed8 	bl	1000182c <clock_get_hz>
10001a7c:	01a1      	lsls	r1, r4, #6
10001a7e:	1949      	adds	r1, r1, r5
10001a80:	0080      	lsls	r0, r0, #2
10001a82:	f7fe fba5 	bl	100001d0 <__udivsi3>
}
10001a86:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001a88:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10001a8a:	4c02      	ldr	r4, [pc, #8]	; (10001a94 <uart_set_baudrate+0x58>)
10001a8c:	e7eb      	b.n	10001a66 <uart_set_baudrate+0x2a>
10001a8e:	46c0      	nop			; (mov r8, r8)
10001a90:	0000fffe 	.word	0x0000fffe
10001a94:	0000ffff 	.word	0x0000ffff

10001a98 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001a98:	b570      	push	{r4, r5, r6, lr}
10001a9a:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10001a9c:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001a9e:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10001aa0:	f7ff fec4 	bl	1000182c <clock_get_hz>
10001aa4:	2800      	cmp	r0, #0
10001aa6:	d02e      	beq.n	10001b06 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001aa8:	4b19      	ldr	r3, [pc, #100]	; (10001b10 <uart_init+0x78>)
10001aaa:	429c      	cmp	r4, r3
10001aac:	d02c      	beq.n	10001b08 <uart_init+0x70>
10001aae:	2380      	movs	r3, #128	; 0x80
10001ab0:	03db      	lsls	r3, r3, #15
10001ab2:	4a18      	ldr	r2, [pc, #96]	; (10001b14 <uart_init+0x7c>)
10001ab4:	4918      	ldr	r1, [pc, #96]	; (10001b18 <uart_init+0x80>)
10001ab6:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001ab8:	4a18      	ldr	r2, [pc, #96]	; (10001b1c <uart_init+0x84>)
10001aba:	6013      	str	r3, [r2, #0]
10001abc:	0018      	movs	r0, r3
10001abe:	688a      	ldr	r2, [r1, #8]
10001ac0:	4390      	bics	r0, r2
10001ac2:	d1fb      	bne.n	10001abc <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10001ac4:	4b16      	ldr	r3, [pc, #88]	; (10001b20 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001ac6:	4a17      	ldr	r2, [pc, #92]	; (10001b24 <uart_init+0x8c>)
10001ac8:	18e3      	adds	r3, r4, r3
10001aca:	4259      	negs	r1, r3
10001acc:	414b      	adcs	r3, r1
10001ace:	2180      	movs	r1, #128	; 0x80
10001ad0:	005b      	lsls	r3, r3, #1
10001ad2:	0049      	lsls	r1, r1, #1
10001ad4:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10001ad6:	0020      	movs	r0, r4
10001ad8:	0029      	movs	r1, r5
10001ada:	f7ff ffaf 	bl	10001a3c <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001ade:	2360      	movs	r3, #96	; 0x60
10001ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001ae2:	0021      	movs	r1, r4
10001ae4:	4053      	eors	r3, r2
10001ae6:	226e      	movs	r2, #110	; 0x6e
10001ae8:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001aea:	2280      	movs	r2, #128	; 0x80
10001aec:	312c      	adds	r1, #44	; 0x2c
10001aee:	0152      	lsls	r2, r2, #5
10001af0:	430a      	orrs	r2, r1
10001af2:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001af4:	4b0c      	ldr	r3, [pc, #48]	; (10001b28 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001af6:	2210      	movs	r2, #16
10001af8:	6323      	str	r3, [r4, #48]	; 0x30
10001afa:	2380      	movs	r3, #128	; 0x80
10001afc:	019b      	lsls	r3, r3, #6
10001afe:	430b      	orrs	r3, r1
10001b00:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10001b02:	2303      	movs	r3, #3
10001b04:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001b06:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001b08:	2380      	movs	r3, #128	; 0x80
10001b0a:	041b      	lsls	r3, r3, #16
10001b0c:	e7d1      	b.n	10001ab2 <uart_init+0x1a>
10001b0e:	46c0      	nop			; (mov r8, r8)
10001b10:	40038000 	.word	0x40038000
10001b14:	4000e000 	.word	0x4000e000
10001b18:	4000c000 	.word	0x4000c000
10001b1c:	4000f000 	.word	0x4000f000
10001b20:	bffc8000 	.word	0xbffc8000
10001b24:	200001ec 	.word	0x200001ec
10001b28:	00000301 	.word	0x00000301

10001b2c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
10001b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					}
					dev->state->init_res = rc;
				}
			}

			dev->state->initialized = true;
10001b2e:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001b30:	4e12      	ldr	r6, [pc, #72]	; (10001b7c <z_sys_init_run_level+0x50>)
10001b32:	0083      	lsls	r3, r0, #2
10001b34:	3001      	adds	r0, #1
10001b36:	599c      	ldr	r4, [r3, r6]
10001b38:	0083      	lsls	r3, r0, #2
10001b3a:	9301      	str	r3, [sp, #4]
10001b3c:	9b01      	ldr	r3, [sp, #4]
10001b3e:	58f3      	ldr	r3, [r6, r3]
10001b40:	42a3      	cmp	r3, r4
10001b42:	d800      	bhi.n	10001b46 <z_sys_init_run_level+0x1a>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
10001b44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10001b46:	6865      	ldr	r5, [r4, #4]
			if (entry->init_fn.dev != NULL) {
10001b48:	6823      	ldr	r3, [r4, #0]
		if (dev != NULL) {
10001b4a:	2d00      	cmp	r5, #0
10001b4c:	d013      	beq.n	10001b76 <z_sys_init_run_level+0x4a>
			if (entry->init_fn.dev != NULL) {
10001b4e:	2b00      	cmp	r3, #0
10001b50:	d00b      	beq.n	10001b6a <z_sys_init_run_level+0x3e>
				rc = entry->init_fn.dev(dev);
10001b52:	0028      	movs	r0, r5
10001b54:	4798      	blx	r3
				if (rc != 0) {
10001b56:	2800      	cmp	r0, #0
10001b58:	d007      	beq.n	10001b6a <z_sys_init_run_level+0x3e>
					if (rc < 0) {
10001b5a:	17c2      	asrs	r2, r0, #31
10001b5c:	1880      	adds	r0, r0, r2
					dev->state->init_res = rc;
10001b5e:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
10001b60:	4050      	eors	r0, r2
					if (rc > UINT8_MAX) {
10001b62:	28ff      	cmp	r0, #255	; 0xff
10001b64:	dd00      	ble.n	10001b68 <z_sys_init_run_level+0x3c>
10001b66:	20ff      	movs	r0, #255	; 0xff
					dev->state->init_res = rc;
10001b68:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001b6a:	68ea      	ldr	r2, [r5, #12]
10001b6c:	7853      	ldrb	r3, [r2, #1]
10001b6e:	433b      	orrs	r3, r7
10001b70:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001b72:	3408      	adds	r4, #8
10001b74:	e7e2      	b.n	10001b3c <z_sys_init_run_level+0x10>
			(void)entry->init_fn.sys();
10001b76:	4798      	blx	r3
10001b78:	e7fb      	b.n	10001b72 <z_sys_init_run_level+0x46>
10001b7a:	46c0      	nop			; (mov r8, r8)
10001b7c:	10003130 	.word	0x10003130

10001b80 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001b80:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10001b82:	2401      	movs	r4, #1
10001b84:	4b09      	ldr	r3, [pc, #36]	; (10001bac <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10001b86:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10001b88:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10001b8a:	f7ff ffcf 	bl	10001b2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001b8e:	f000 fd25 	bl	100025dc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10001b92:	2004      	movs	r0, #4
10001b94:	f7ff ffca 	bl	10001b2c <z_sys_init_run_level>

	z_init_static_threads();
10001b98:	f000 f8ce 	bl	10001d38 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
10001b9c:	f7fe fcb6 	bl	1000050c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001ba0:	4a03      	ldr	r2, [pc, #12]	; (10001bb0 <bg_thread_main+0x30>)
10001ba2:	7b13      	ldrb	r3, [r2, #12]
10001ba4:	43a3      	bics	r3, r4
10001ba6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10001ba8:	bd10      	pop	{r4, pc}
10001baa:	46c0      	nop			; (mov r8, r8)
10001bac:	200001f0 	.word	0x200001f0
10001bb0:	200000a0 	.word	0x200000a0

10001bb4 <z_bss_zero>:
{
10001bb4:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10001bb6:	4a03      	ldr	r2, [pc, #12]	; (10001bc4 <z_bss_zero+0x10>)
10001bb8:	4803      	ldr	r0, [pc, #12]	; (10001bc8 <z_bss_zero+0x14>)
10001bba:	2100      	movs	r1, #0
10001bbc:	1a12      	subs	r2, r2, r0
10001bbe:	f001 f900 	bl	10002dc2 <z_early_memset>
}
10001bc2:	bd10      	pop	{r4, pc}
10001bc4:	200001f4 	.word	0x200001f4
10001bc8:	20000030 	.word	0x20000030

10001bcc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001bcc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001bce:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10001bd0:	2501      	movs	r5, #1
{
10001bd2:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10001bd4:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10001bd6:	0201      	lsls	r1, r0, #8
10001bd8:	4811      	ldr	r0, [pc, #68]	; (10001c20 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10001bda:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10001bdc:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10001bde:	2000      	movs	r0, #0
{
10001be0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10001be2:	9504      	str	r5, [sp, #16]
10001be4:	350e      	adds	r5, #14
10001be6:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001be8:	3505      	adds	r5, #5
10001bea:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10001bec:	4b0d      	ldr	r3, [pc, #52]	; (10001c24 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10001bee:	9005      	str	r0, [sp, #20]
10001bf0:	9002      	str	r0, [sp, #8]
10001bf2:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001bf4:	480c      	ldr	r0, [pc, #48]	; (10001c28 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
10001bf6:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001bf8:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10001bfa:	4b0c      	ldr	r3, [pc, #48]	; (10001c2c <z_init_cpu+0x60>)
10001bfc:	0030      	movs	r0, r6
10001bfe:	9500      	str	r5, [sp, #0]
10001c00:	0052      	lsls	r2, r2, #1
10001c02:	f000 f86f 	bl	10001ce4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001c06:	2204      	movs	r2, #4
10001c08:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10001c0a:	742c      	strb	r4, [r5, #16]
10001c0c:	4393      	bics	r3, r2
10001c0e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001c10:	3401      	adds	r4, #1
10001c12:	4b07      	ldr	r3, [pc, #28]	; (10001c30 <z_init_cpu+0x64>)
10001c14:	02e4      	lsls	r4, r4, #11
10001c16:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10001c18:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10001c1a:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10001c1c:	b006      	add	sp, #24
10001c1e:	bd70      	pop	{r4, r5, r6, pc}
10001c20:	200009f8 	.word	0x200009f8
10001c24:	20000030 	.word	0x20000030
10001c28:	200001bc 	.word	0x200001bc
10001c2c:	10002dd3 	.word	0x10002dd3
10001c30:	200001f8 	.word	0x200001f8

10001c34 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
10001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10001c36:	2000      	movs	r0, #0
{
10001c38:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10001c3a:	f7ff ff77 	bl	10001b2c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10001c3e:	4b21      	ldr	r3, [pc, #132]	; (10001cc4 <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10001c40:	f383 8808 	msr	MSP, r3
10001c44:	4920      	ldr	r1, [pc, #128]	; (10001cc8 <z_cstart+0x94>)
10001c46:	4b21      	ldr	r3, [pc, #132]	; (10001ccc <z_cstart+0x98>)
10001c48:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10001c4a:	2500      	movs	r5, #0
10001c4c:	401a      	ands	r2, r3
10001c4e:	23e0      	movs	r3, #224	; 0xe0
10001c50:	041b      	lsls	r3, r3, #16
10001c52:	4313      	orrs	r3, r2
10001c54:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10001c56:	f000 fda6 	bl	100027a6 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10001c5a:	f7ff f96b 	bl	10000f34 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10001c5e:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10001c60:	4e1b      	ldr	r6, [pc, #108]	; (10001cd0 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10001c62:	ab06      	add	r3, sp, #24
10001c64:	32ff      	adds	r2, #255	; 0xff
10001c66:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001c68:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001c6a:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001c6c:	f001 f87e 	bl	10002d6c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10001c70:	2001      	movs	r0, #1
10001c72:	f7ff ff5b 	bl	10001b2c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10001c76:	2002      	movs	r0, #2
10001c78:	f7ff ff58 	bl	10001b2c <z_sys_init_run_level>
	z_sched_init();
10001c7c:	f000 fa52 	bl	10002124 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001c80:	4c14      	ldr	r4, [pc, #80]	; (10001cd4 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001c82:	4b15      	ldr	r3, [pc, #84]	; (10001cd8 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10001c84:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001c86:	2280      	movs	r2, #128	; 0x80
10001c88:	9305      	str	r3, [sp, #20]
10001c8a:	2301      	movs	r3, #1
10001c8c:	4e13      	ldr	r6, [pc, #76]	; (10001cdc <z_cstart+0xa8>)
10001c8e:	4914      	ldr	r1, [pc, #80]	; (10001ce0 <z_cstart+0xac>)
10001c90:	9304      	str	r3, [sp, #16]
10001c92:	00d2      	lsls	r2, r2, #3
10001c94:	0033      	movs	r3, r6
10001c96:	0020      	movs	r0, r4
10001c98:	9503      	str	r5, [sp, #12]
10001c9a:	9502      	str	r5, [sp, #8]
10001c9c:	9501      	str	r5, [sp, #4]
10001c9e:	9500      	str	r5, [sp, #0]
10001ca0:	f000 f820 	bl	10001ce4 <z_setup_new_thread>
10001ca4:	2204      	movs	r2, #4
10001ca6:	0007      	movs	r7, r0
10001ca8:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10001caa:	0020      	movs	r0, r4
10001cac:	4393      	bics	r3, r2
10001cae:	7363      	strb	r3, [r4, #13]
10001cb0:	f001 f8a9 	bl	10002e06 <z_ready_thread>
	z_init_cpu(0);
10001cb4:	0028      	movs	r0, r5
10001cb6:	f7ff ff89 	bl	10001bcc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001cba:	0032      	movs	r2, r6
10001cbc:	0039      	movs	r1, r7
10001cbe:	0020      	movs	r0, r4
10001cc0:	f7ff fa04 	bl	100010cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10001cc4:	200009f8 	.word	0x200009f8
10001cc8:	e000ed00 	.word	0xe000ed00
10001ccc:	ff00ffff 	.word	0xff00ffff
10001cd0:	200001bc 	.word	0x200001bc
10001cd4:	200000a0 	.word	0x200000a0
10001cd8:	10003453 	.word	0x10003453
10001cdc:	10001b81 	.word	0x10001b81
10001ce0:	20000af8 	.word	0x20000af8

10001ce4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10001ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10001ce6:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001ce8:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001cea:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001cec:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001cee:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001cf0:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001cf2:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001cf4:	2004      	movs	r0, #4
10001cf6:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10001cf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001cfa:	3207      	adds	r2, #7
	thread_base->prio = priority;
10001cfc:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001cfe:	2007      	movs	r0, #7
10001d00:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10001d02:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10001d06:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001d08:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001d0a:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001d0c:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001d0e:	9202      	str	r2, [sp, #8]
10001d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001d12:	0020      	movs	r0, r4
10001d14:	9201      	str	r2, [sp, #4]
10001d16:	9a08      	ldr	r2, [sp, #32]
10001d18:	9200      	str	r2, [sp, #0]
10001d1a:	002a      	movs	r2, r5
10001d1c:	f7ff f9c0 	bl	100010a0 <arch_new_thread>
	if (!_current) {
10001d20:	4b04      	ldr	r3, [pc, #16]	; (10001d34 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001d22:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001d24:	689b      	ldr	r3, [r3, #8]
10001d26:	42b3      	cmp	r3, r6
10001d28:	d000      	beq.n	10001d2c <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001d2c:	0028      	movs	r0, r5
10001d2e:	6663      	str	r3, [r4, #100]	; 0x64
10001d30:	b004      	add	sp, #16
10001d32:	bd70      	pop	{r4, r5, r6, pc}
10001d34:	200001bc 	.word	0x200001bc

10001d38 <z_init_static_threads>:
{
10001d38:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001d3a:	4c20      	ldr	r4, [pc, #128]	; (10001dbc <z_init_static_threads+0x84>)
{
10001d3c:	b086      	sub	sp, #24
10001d3e:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001d40:	4d1f      	ldr	r5, [pc, #124]	; (10001dc0 <z_init_static_threads+0x88>)
10001d42:	42ac      	cmp	r4, r5
10001d44:	d308      	bcc.n	10001d58 <z_init_static_threads+0x20>
	k_sched_lock();
10001d46:	f000 f9c7 	bl	100020d8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001d4a:	0034      	movs	r4, r6
10001d4c:	42ac      	cmp	r4, r5
10001d4e:	d319      	bcc.n	10001d84 <z_init_static_threads+0x4c>
	k_sched_unlock();
10001d50:	f000 f9d2 	bl	100020f8 <k_sched_unlock>
}
10001d54:	b006      	add	sp, #24
10001d56:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001d58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001d5a:	9305      	str	r3, [sp, #20]
10001d5c:	6a23      	ldr	r3, [r4, #32]
10001d5e:	9304      	str	r3, [sp, #16]
10001d60:	69e3      	ldr	r3, [r4, #28]
10001d62:	9303      	str	r3, [sp, #12]
10001d64:	69a3      	ldr	r3, [r4, #24]
10001d66:	9302      	str	r3, [sp, #8]
10001d68:	6963      	ldr	r3, [r4, #20]
10001d6a:	9301      	str	r3, [sp, #4]
10001d6c:	6923      	ldr	r3, [r4, #16]
10001d6e:	9300      	str	r3, [sp, #0]
10001d70:	68e3      	ldr	r3, [r4, #12]
10001d72:	68a2      	ldr	r2, [r4, #8]
10001d74:	6861      	ldr	r1, [r4, #4]
10001d76:	6820      	ldr	r0, [r4, #0]
10001d78:	f7ff ffb4 	bl	10001ce4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001d7c:	6823      	ldr	r3, [r4, #0]
10001d7e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001d80:	342c      	adds	r4, #44	; 0x2c
10001d82:	e7dd      	b.n	10001d40 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
10001d86:	1c5a      	adds	r2, r3, #1
10001d88:	d00f      	beq.n	10001daa <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001d8a:	43d8      	mvns	r0, r3
10001d8c:	17c0      	asrs	r0, r0, #31
10001d8e:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001d90:	220a      	movs	r2, #10
10001d92:	2300      	movs	r3, #0
10001d94:	17c1      	asrs	r1, r0, #31
10001d96:	f7fe fac5 	bl	10000324 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001d9a:	6826      	ldr	r6, [r4, #0]
10001d9c:	000b      	movs	r3, r1
10001d9e:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001da0:	4301      	orrs	r1, r0
10001da2:	d104      	bne.n	10001dae <z_init_static_threads+0x76>
	z_sched_start(thread);
10001da4:	0030      	movs	r0, r6
10001da6:	f000 f951 	bl	1000204c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001daa:	342c      	adds	r4, #44	; 0x2c
10001dac:	e7ce      	b.n	10001d4c <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001dae:	0030      	movs	r0, r6
10001db0:	4904      	ldr	r1, [pc, #16]	; (10001dc4 <z_init_static_threads+0x8c>)
10001db2:	3018      	adds	r0, #24
10001db4:	f000 fb20 	bl	100023f8 <z_add_timeout>
10001db8:	e7f7      	b.n	10001daa <z_init_static_threads+0x72>
10001dba:	46c0      	nop			; (mov r8, r8)
10001dbc:	10003010 	.word	0x10003010
10001dc0:	10003010 	.word	0x10003010
10001dc4:	10002e5d 	.word	0x10002e5d

10001dc8 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
10001dc8:	89c2      	ldrh	r2, [r0, #14]
{
10001dca:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
10001dcc:	2000      	movs	r0, #0
10001dce:	2a7f      	cmp	r2, #127	; 0x7f
10001dd0:	d811      	bhi.n	10001df6 <sliceable+0x2e>
	int ret = slice_ticks;
10001dd2:	4a0a      	ldr	r2, [pc, #40]	; (10001dfc <sliceable+0x34>)
10001dd4:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
10001dd6:	2800      	cmp	r0, #0
10001dd8:	d00d      	beq.n	10001df6 <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001dda:	210e      	movs	r1, #14
10001ddc:	4a08      	ldr	r2, [pc, #32]	; (10001e00 <sliceable+0x38>)
10001dde:	5659      	ldrsb	r1, [r3, r1]
10001de0:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
10001de2:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001de4:	4291      	cmp	r1, r2
10001de6:	db06      	blt.n	10001df6 <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
10001de8:	7b5a      	ldrb	r2, [r3, #13]
10001dea:	06d2      	lsls	r2, r2, #27
10001dec:	d103      	bne.n	10001df6 <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
10001dee:	4805      	ldr	r0, [pc, #20]	; (10001e04 <sliceable+0x3c>)
10001df0:	1a18      	subs	r0, r3, r0
10001df2:	1e43      	subs	r3, r0, #1
10001df4:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
10001df6:	2301      	movs	r3, #1
10001df8:	4018      	ands	r0, r3
}
10001dfa:	4770      	bx	lr
10001dfc:	200001e4 	.word	0x200001e4
10001e00:	200001e0 	.word	0x200001e0
10001e04:	20000030 	.word	0x20000030

10001e08 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10001e08:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001e0a:	4b04      	ldr	r3, [pc, #16]	; (10001e1c <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10001e0c:	4a04      	ldr	r2, [pc, #16]	; (10001e20 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001e0e:	1ac0      	subs	r0, r0, r3
10001e10:	4b04      	ldr	r3, [pc, #16]	; (10001e24 <slice_timeout+0x1c>)
10001e12:	10c0      	asrs	r0, r0, #3
10001e14:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10001e16:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10001e18:	4770      	bx	lr
10001e1a:	46c0      	nop			; (mov r8, r8)
10001e1c:	20000110 	.word	0x20000110
10001e20:	200001f1 	.word	0x200001f1
10001e24:	aaaaaaab 	.word	0xaaaaaaab

10001e28 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10001e28:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10001e2a:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10001e2c:	4b0c      	ldr	r3, [pc, #48]	; (10001e60 <z_reset_time_slice+0x38>)
{
10001e2e:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
10001e30:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10001e32:	4b0c      	ldr	r3, [pc, #48]	; (10001e64 <z_reset_time_slice+0x3c>)
10001e34:	4374      	muls	r4, r6
10001e36:	18e4      	adds	r4, r4, r3
10001e38:	0020      	movs	r0, r4
10001e3a:	f001 f82a 	bl	10002e92 <z_abort_timeout>
	slice_expired[cpu] = false;
10001e3e:	2200      	movs	r2, #0
10001e40:	4b09      	ldr	r3, [pc, #36]	; (10001e68 <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
10001e42:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
10001e44:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
10001e46:	f7ff ffbf 	bl	10001dc8 <sliceable>
10001e4a:	2800      	cmp	r0, #0
10001e4c:	d007      	beq.n	10001e5e <z_reset_time_slice+0x36>
	int ret = slice_ticks;
10001e4e:	4b07      	ldr	r3, [pc, #28]	; (10001e6c <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001e50:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
10001e52:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001e54:	4906      	ldr	r1, [pc, #24]	; (10001e70 <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
10001e56:	3a01      	subs	r2, #1
10001e58:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001e5a:	f000 facd 	bl	100023f8 <z_add_timeout>
	}
}
10001e5e:	bd70      	pop	{r4, r5, r6, pc}
10001e60:	200001bc 	.word	0x200001bc
10001e64:	20000110 	.word	0x20000110
10001e68:	200001f1 	.word	0x200001f1
10001e6c:	200001e4 	.word	0x200001e4
10001e70:	10001e09 	.word	0x10001e09

10001e74 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10001e74:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10001e76:	4d0e      	ldr	r5, [pc, #56]	; (10001eb0 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e78:	4b0e      	ldr	r3, [pc, #56]	; (10001eb4 <update_cache+0x40>)
	return list->head == list;
10001e7a:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e7c:	429c      	cmp	r4, r3
10001e7e:	d001      	beq.n	10001e84 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10001e80:	2c00      	cmp	r4, #0
10001e82:	d100      	bne.n	10001e86 <update_cache+0x12>
10001e84:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10001e86:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10001e88:	2800      	cmp	r0, #0
10001e8a:	d108      	bne.n	10001e9e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10001e8c:	7b5a      	ldrb	r2, [r3, #13]
10001e8e:	06d2      	lsls	r2, r2, #27
10001e90:	d105      	bne.n	10001e9e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10001e92:	69a2      	ldr	r2, [r4, #24]
10001e94:	2a00      	cmp	r2, #0
10001e96:	d102      	bne.n	10001e9e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10001e98:	89da      	ldrh	r2, [r3, #14]
10001e9a:	2a7f      	cmp	r2, #127	; 0x7f
10001e9c:	d805      	bhi.n	10001eaa <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10001e9e:	429c      	cmp	r4, r3
10001ea0:	d002      	beq.n	10001ea8 <update_cache+0x34>
			z_reset_time_slice(thread);
10001ea2:	0020      	movs	r0, r4
10001ea4:	f7ff ffc0 	bl	10001e28 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10001ea8:	0023      	movs	r3, r4
10001eaa:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10001eac:	bd70      	pop	{r4, r5, r6, pc}
10001eae:	46c0      	nop			; (mov r8, r8)
10001eb0:	200001bc 	.word	0x200001bc
10001eb4:	200001d4 	.word	0x200001d4

10001eb8 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10001eb8:	220d      	movs	r2, #13
{
10001eba:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10001ebc:	5682      	ldrsb	r2, [r0, r2]
{
10001ebe:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001ec0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001ec2:	2a00      	cmp	r2, #0
10001ec4:	da04      	bge.n	10001ed0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001ec6:	227f      	movs	r2, #127	; 0x7f
10001ec8:	4013      	ands	r3, r2
10001eca:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10001ecc:	f000 ff88 	bl	10002de0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001ed0:	2380      	movs	r3, #128	; 0x80
10001ed2:	7b62      	ldrb	r2, [r4, #13]
10001ed4:	425b      	negs	r3, r3
10001ed6:	4313      	orrs	r3, r2
	return list->head == list;
10001ed8:	4a13      	ldr	r2, [pc, #76]	; (10001f28 <move_thread_to_end_of_prio_q+0x70>)
10001eda:	7363      	strb	r3, [r4, #13]
10001edc:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001ede:	4813      	ldr	r0, [pc, #76]	; (10001f2c <move_thread_to_end_of_prio_q+0x74>)
10001ee0:	4283      	cmp	r3, r0
10001ee2:	d100      	bne.n	10001ee6 <move_thread_to_end_of_prio_q+0x2e>
10001ee4:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10001ee6:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001ee8:	2b00      	cmp	r3, #0
10001eea:	d104      	bne.n	10001ef6 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10001eec:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10001eee:	6061      	str	r1, [r4, #4]

	tail->next = node;
10001ef0:	600c      	str	r4, [r1, #0]
	list->tail = node;
10001ef2:	61d4      	str	r4, [r2, #28]
}
10001ef4:	e00c      	b.n	10001f10 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10001ef6:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001ef8:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001efa:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10001efc:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001efe:	42b5      	cmp	r5, r6
10001f00:	d00d      	beq.n	10001f1e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001f02:	42ae      	cmp	r6, r5
10001f04:	dd0b      	ble.n	10001f1e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10001f06:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10001f08:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10001f0a:	6061      	str	r1, [r4, #4]
	prev->next = node;
10001f0c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10001f0e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10001f10:	6890      	ldr	r0, [r2, #8]
10001f12:	1b00      	subs	r0, r0, r4
10001f14:	4243      	negs	r3, r0
10001f16:	4158      	adcs	r0, r3
10001f18:	f7ff ffac 	bl	10001e74 <update_cache>
}
10001f1c:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001f1e:	4299      	cmp	r1, r3
10001f20:	d0e4      	beq.n	10001eec <move_thread_to_end_of_prio_q+0x34>
10001f22:	681b      	ldr	r3, [r3, #0]
10001f24:	e7e0      	b.n	10001ee8 <move_thread_to_end_of_prio_q+0x30>
10001f26:	46c0      	nop			; (mov r8, r8)
10001f28:	200001bc 	.word	0x200001bc
10001f2c:	200001d4 	.word	0x200001d4

10001f30 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001f30:	230d      	movs	r3, #13
{
10001f32:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001f34:	56c3      	ldrsb	r3, [r0, r3]
10001f36:	7b41      	ldrb	r1, [r0, #13]
10001f38:	2b00      	cmp	r3, #0
10001f3a:	db26      	blt.n	10001f8a <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10001f3c:	06cb      	lsls	r3, r1, #27
10001f3e:	d124      	bne.n	10001f8a <ready_thread+0x5a>
	return node->next != NULL;
10001f40:	6983      	ldr	r3, [r0, #24]
10001f42:	2b00      	cmp	r3, #0
10001f44:	d121      	bne.n	10001f8a <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10001f46:	2280      	movs	r2, #128	; 0x80
10001f48:	4252      	negs	r2, r2
10001f4a:	430a      	orrs	r2, r1
10001f4c:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10001f4e:	4a11      	ldr	r2, [pc, #68]	; (10001f94 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001f50:	4c11      	ldr	r4, [pc, #68]	; (10001f98 <ready_thread+0x68>)
	return list->head == list;
10001f52:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001f54:	42a1      	cmp	r1, r4
10001f56:	d000      	beq.n	10001f5a <ready_thread+0x2a>
10001f58:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10001f5a:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001f5c:	2b00      	cmp	r3, #0
10001f5e:	d104      	bne.n	10001f6a <ready_thread+0x3a>
	node->next = list;
10001f60:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10001f62:	6041      	str	r1, [r0, #4]
	tail->next = node;
10001f64:	6008      	str	r0, [r1, #0]
	list->tail = node;
10001f66:	61d0      	str	r0, [r2, #28]
}
10001f68:	e00c      	b.n	10001f84 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10001f6a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001f6c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001f6e:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10001f70:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001f72:	42b5      	cmp	r5, r6
10001f74:	d00a      	beq.n	10001f8c <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001f76:	42ae      	cmp	r6, r5
10001f78:	dd08      	ble.n	10001f8c <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10001f7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10001f7c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10001f7e:	6042      	str	r2, [r0, #4]
	prev->next = node;
10001f80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10001f82:	6058      	str	r0, [r3, #4]
		update_cache(0);
10001f84:	2000      	movs	r0, #0
10001f86:	f7ff ff75 	bl	10001e74 <update_cache>
}
10001f8a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001f8c:	428b      	cmp	r3, r1
10001f8e:	d0e7      	beq.n	10001f60 <ready_thread+0x30>
10001f90:	681b      	ldr	r3, [r3, #0]
10001f92:	e7e3      	b.n	10001f5c <ready_thread+0x2c>
10001f94:	200001bc 	.word	0x200001bc
10001f98:	200001d4 	.word	0x200001d4

10001f9c <unready_thread>:
	if (z_is_thread_queued(thread)) {
10001f9c:	220d      	movs	r2, #13
{
10001f9e:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10001fa0:	5682      	ldrsb	r2, [r0, r2]
{
10001fa2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001fa4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001fa6:	2a00      	cmp	r2, #0
10001fa8:	da04      	bge.n	10001fb4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001faa:	227f      	movs	r2, #127	; 0x7f
10001fac:	4013      	ands	r3, r2
10001fae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001fb0:	f000 ff16 	bl	10002de0 <sys_dlist_remove>
	update_cache(thread == _current);
10001fb4:	4b03      	ldr	r3, [pc, #12]	; (10001fc4 <unready_thread+0x28>)
10001fb6:	6898      	ldr	r0, [r3, #8]
10001fb8:	1b00      	subs	r0, r0, r4
10001fba:	4243      	negs	r3, r0
10001fbc:	4158      	adcs	r0, r3
10001fbe:	f7ff ff59 	bl	10001e74 <update_cache>
}
10001fc2:	bd10      	pop	{r4, pc}
10001fc4:	200001bc 	.word	0x200001bc

10001fc8 <z_time_slice>:
{
10001fc8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001fca:	f3ef 8510 	mrs	r5, PRIMASK
10001fce:	b672      	cpsid	i
	struct k_thread *curr = _current;
10001fd0:	4a10      	ldr	r2, [pc, #64]	; (10002014 <z_time_slice+0x4c>)
	if (pending_current == curr) {
10001fd2:	4b11      	ldr	r3, [pc, #68]	; (10002018 <z_time_slice+0x50>)
	struct k_thread *curr = _current;
10001fd4:	6894      	ldr	r4, [r2, #8]
	if (pending_current == curr) {
10001fd6:	6818      	ldr	r0, [r3, #0]
10001fd8:	42a0      	cmp	r0, r4
10001fda:	d107      	bne.n	10001fec <z_time_slice+0x24>
		z_reset_time_slice(curr);
10001fdc:	f7ff ff24 	bl	10001e28 <z_reset_time_slice>
	if (key != 0U) {
10001fe0:	2d00      	cmp	r5, #0
10001fe2:	d102      	bne.n	10001fea <z_time_slice+0x22>
	__asm__ volatile(
10001fe4:	b662      	cpsie	i
10001fe6:	f3bf 8f6f 	isb	sy
}
10001fea:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10001fec:	2100      	movs	r1, #0
10001fee:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
10001ff0:	7c12      	ldrb	r2, [r2, #16]
10001ff2:	4b0a      	ldr	r3, [pc, #40]	; (1000201c <z_time_slice+0x54>)
10001ff4:	5c9b      	ldrb	r3, [r3, r2]
10001ff6:	428b      	cmp	r3, r1
10001ff8:	d0f2      	beq.n	10001fe0 <z_time_slice+0x18>
10001ffa:	0020      	movs	r0, r4
10001ffc:	f7ff fee4 	bl	10001dc8 <sliceable>
10002000:	2800      	cmp	r0, #0
10002002:	d0ed      	beq.n	10001fe0 <z_time_slice+0x18>
		if (!z_is_thread_prevented_from_running(curr)) {
10002004:	7b63      	ldrb	r3, [r4, #13]
10002006:	06db      	lsls	r3, r3, #27
10002008:	d102      	bne.n	10002010 <z_time_slice+0x48>
			move_thread_to_end_of_prio_q(curr);
1000200a:	0020      	movs	r0, r4
1000200c:	f7ff ff54 	bl	10001eb8 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
10002010:	0020      	movs	r0, r4
10002012:	e7e3      	b.n	10001fdc <z_time_slice+0x14>
10002014:	200001bc 	.word	0x200001bc
10002018:	200001dc 	.word	0x200001dc
1000201c:	200001f1 	.word	0x200001f1

10002020 <z_reschedule>:
{
10002020:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002022:	2900      	cmp	r1, #0
10002024:	d10a      	bne.n	1000203c <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10002026:	f3ef 8005 	mrs	r0, IPSR
1000202a:	2800      	cmp	r0, #0
1000202c:	d107      	bne.n	1000203e <z_reschedule+0x1e>
	return new_thread != _current;
1000202e:	4b06      	ldr	r3, [pc, #24]	; (10002048 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10002030:	689a      	ldr	r2, [r3, #8]
10002032:	695b      	ldr	r3, [r3, #20]
10002034:	429a      	cmp	r2, r3
10002036:	d002      	beq.n	1000203e <z_reschedule+0x1e>
	ret = arch_swap(key);
10002038:	f7fe ffd8 	bl	10000fec <arch_swap>
}
1000203c:	bd10      	pop	{r4, pc}
1000203e:	b662      	cpsie	i
10002040:	f3bf 8f6f 	isb	sy
10002044:	e7fa      	b.n	1000203c <z_reschedule+0x1c>
10002046:	46c0      	nop			; (mov r8, r8)
10002048:	200001bc 	.word	0x200001bc

1000204c <z_sched_start>:
{
1000204c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000204e:	f3ef 8410 	mrs	r4, PRIMASK
10002052:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10002054:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10002056:	7b43      	ldrb	r3, [r0, #13]
10002058:	4213      	tst	r3, r2
1000205a:	d105      	bne.n	10002068 <z_sched_start+0x1c>
	if (key != 0U) {
1000205c:	2c00      	cmp	r4, #0
1000205e:	d102      	bne.n	10002066 <z_sched_start+0x1a>
	__asm__ volatile(
10002060:	b662      	cpsie	i
10002062:	f3bf 8f6f 	isb	sy
}
10002066:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002068:	4393      	bics	r3, r2
1000206a:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
1000206c:	f7ff ff60 	bl	10001f30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10002070:	0021      	movs	r1, r4
10002072:	4802      	ldr	r0, [pc, #8]	; (1000207c <z_sched_start+0x30>)
10002074:	f7ff ffd4 	bl	10002020 <z_reschedule>
10002078:	e7f5      	b.n	10002066 <z_sched_start+0x1a>
1000207a:	46c0      	nop			; (mov r8, r8)
1000207c:	200001f2 	.word	0x200001f2

10002080 <z_impl_k_thread_suspend>:
{
10002080:	b570      	push	{r4, r5, r6, lr}
10002082:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10002084:	3018      	adds	r0, #24
10002086:	f000 ff04 	bl	10002e92 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
1000208a:	f3ef 8610 	mrs	r6, PRIMASK
1000208e:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10002090:	220d      	movs	r2, #13
10002092:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10002094:	7b63      	ldrb	r3, [r4, #13]
10002096:	2a00      	cmp	r2, #0
10002098:	da05      	bge.n	100020a6 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000209a:	227f      	movs	r2, #127	; 0x7f
1000209c:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
1000209e:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100020a0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100020a2:	f000 fe9d 	bl	10002de0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100020a6:	2310      	movs	r3, #16
		update_cache(thread == _current);
100020a8:	4d0a      	ldr	r5, [pc, #40]	; (100020d4 <z_impl_k_thread_suspend+0x54>)
100020aa:	7b62      	ldrb	r2, [r4, #13]
100020ac:	68a8      	ldr	r0, [r5, #8]
100020ae:	4313      	orrs	r3, r2
100020b0:	1b00      	subs	r0, r0, r4
100020b2:	7363      	strb	r3, [r4, #13]
100020b4:	4243      	negs	r3, r0
100020b6:	4158      	adcs	r0, r3
100020b8:	f7ff fedc 	bl	10001e74 <update_cache>
	if (key != 0U) {
100020bc:	2e00      	cmp	r6, #0
100020be:	d102      	bne.n	100020c6 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
100020c0:	b662      	cpsie	i
100020c2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
100020c6:	68ab      	ldr	r3, [r5, #8]
100020c8:	42a3      	cmp	r3, r4
100020ca:	d101      	bne.n	100020d0 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
100020cc:	f000 feda 	bl	10002e84 <z_reschedule_unlocked>
}
100020d0:	bd70      	pop	{r4, r5, r6, pc}
100020d2:	46c0      	nop			; (mov r8, r8)
100020d4:	200001bc 	.word	0x200001bc

100020d8 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
100020d8:	f3ef 8110 	mrs	r1, PRIMASK
100020dc:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
100020de:	4b05      	ldr	r3, [pc, #20]	; (100020f4 <k_sched_lock+0x1c>)
100020e0:	689a      	ldr	r2, [r3, #8]
100020e2:	7bd3      	ldrb	r3, [r2, #15]
100020e4:	3b01      	subs	r3, #1
100020e6:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
100020e8:	2900      	cmp	r1, #0
100020ea:	d102      	bne.n	100020f2 <k_sched_lock+0x1a>
	__asm__ volatile(
100020ec:	b662      	cpsie	i
100020ee:	f3bf 8f6f 	isb	sy
}
100020f2:	4770      	bx	lr
100020f4:	200001bc 	.word	0x200001bc

100020f8 <k_sched_unlock>:
{
100020f8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100020fa:	f3ef 8410 	mrs	r4, PRIMASK
100020fe:	b672      	cpsid	i
		++_current->base.sched_locked;
10002100:	4b07      	ldr	r3, [pc, #28]	; (10002120 <k_sched_unlock+0x28>)
		update_cache(0);
10002102:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10002104:	689a      	ldr	r2, [r3, #8]
10002106:	7bd3      	ldrb	r3, [r2, #15]
10002108:	3301      	adds	r3, #1
1000210a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
1000210c:	f7ff feb2 	bl	10001e74 <update_cache>
	if (key != 0U) {
10002110:	2c00      	cmp	r4, #0
10002112:	d102      	bne.n	1000211a <k_sched_unlock+0x22>
	__asm__ volatile(
10002114:	b662      	cpsie	i
10002116:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
1000211a:	f000 feb3 	bl	10002e84 <z_reschedule_unlocked>
}
1000211e:	bd10      	pop	{r4, pc}
10002120:	200001bc 	.word	0x200001bc

10002124 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
10002124:	4b02      	ldr	r3, [pc, #8]	; (10002130 <z_sched_init+0xc>)
10002126:	4a03      	ldr	r2, [pc, #12]	; (10002134 <z_sched_init+0x10>)
10002128:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
1000212a:	61da      	str	r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
1000212c:	4770      	bx	lr
1000212e:	46c0      	nop			; (mov r8, r8)
10002130:	200001bc 	.word	0x200001bc
10002134:	200001d4 	.word	0x200001d4

10002138 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000213a:	f3ef 8510 	mrs	r5, PRIMASK
1000213e:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002140:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10002142:	4c19      	ldr	r4, [pc, #100]	; (100021a8 <z_impl_k_yield+0x70>)
10002144:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002146:	7b43      	ldrb	r3, [r0, #13]
10002148:	4013      	ands	r3, r2
1000214a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000214c:	f000 fe48 	bl	10002de0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10002150:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10002152:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10002154:	4252      	negs	r2, r2
10002156:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002158:	4814      	ldr	r0, [pc, #80]	; (100021ac <z_impl_k_yield+0x74>)
1000215a:	430a      	orrs	r2, r1
1000215c:	735a      	strb	r2, [r3, #13]
	return list->head == list;
1000215e:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002160:	4282      	cmp	r2, r0
10002162:	d100      	bne.n	10002166 <z_impl_k_yield+0x2e>
10002164:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10002166:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002168:	2a00      	cmp	r2, #0
1000216a:	d104      	bne.n	10002176 <z_impl_k_yield+0x3e>
	node->next = list;
1000216c:	6018      	str	r0, [r3, #0]
	node->prev = tail;
1000216e:	6059      	str	r1, [r3, #4]
	tail->next = node;
10002170:	600b      	str	r3, [r1, #0]
	list->tail = node;
10002172:	61e3      	str	r3, [r4, #28]
}
10002174:	e00c      	b.n	10002190 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10002176:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10002178:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
1000217a:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
1000217c:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
1000217e:	42be      	cmp	r6, r7
10002180:	d00d      	beq.n	1000219e <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002182:	42b7      	cmp	r7, r6
10002184:	dd0b      	ble.n	1000219e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10002186:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10002188:	601a      	str	r2, [r3, #0]
	node->prev = prev;
1000218a:	6059      	str	r1, [r3, #4]
	prev->next = node;
1000218c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
1000218e:	6053      	str	r3, [r2, #4]
	update_cache(1);
10002190:	2001      	movs	r0, #1
10002192:	f7ff fe6f 	bl	10001e74 <update_cache>
10002196:	0028      	movs	r0, r5
10002198:	f7fe ff28 	bl	10000fec <arch_swap>
	z_swap(&sched_spinlock, key);
}
1000219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
1000219e:	428a      	cmp	r2, r1
100021a0:	d0e4      	beq.n	1000216c <z_impl_k_yield+0x34>
100021a2:	6812      	ldr	r2, [r2, #0]
100021a4:	e7e0      	b.n	10002168 <z_impl_k_yield+0x30>
100021a6:	46c0      	nop			; (mov r8, r8)
100021a8:	200001bc 	.word	0x200001bc
100021ac:	200001d4 	.word	0x200001d4

100021b0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
100021b0:	0003      	movs	r3, r0
{
100021b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
100021b4:	430b      	orrs	r3, r1
{
100021b6:	0004      	movs	r4, r0
100021b8:	000d      	movs	r5, r1
	if (ticks == 0) {
100021ba:	2b00      	cmp	r3, #0
100021bc:	d103      	bne.n	100021c6 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
100021be:	f7ff ffbb 	bl	10002138 <z_impl_k_yield>
		k_yield();
		return 0;
100021c2:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
100021c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
100021c6:	1c4b      	adds	r3, r1, #1
100021c8:	db2e      	blt.n	10002228 <z_tick_sleep+0x78>
100021ca:	1c4b      	adds	r3, r1, #1
100021cc:	d101      	bne.n	100021d2 <z_tick_sleep+0x22>
100021ce:	1c83      	adds	r3, r0, #2
100021d0:	d32a      	bcc.n	10002228 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
100021d2:	f000 fe71 	bl	10002eb8 <sys_clock_tick_get_32>
100021d6:	1827      	adds	r7, r4, r0
100021d8:	f3ef 8310 	mrs	r3, PRIMASK
100021dc:	b672      	cpsid	i
	pending_current = _current;
100021de:	4e14      	ldr	r6, [pc, #80]	; (10002230 <z_tick_sleep+0x80>)
100021e0:	9301      	str	r3, [sp, #4]
100021e2:	68b0      	ldr	r0, [r6, #8]
100021e4:	4b13      	ldr	r3, [pc, #76]	; (10002234 <z_tick_sleep+0x84>)
100021e6:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
100021e8:	f7ff fed8 	bl	10001f9c <unready_thread>
	z_add_thread_timeout(_current, timeout);
100021ec:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100021ee:	0022      	movs	r2, r4
100021f0:	002b      	movs	r3, r5
100021f2:	4911      	ldr	r1, [pc, #68]	; (10002238 <z_tick_sleep+0x88>)
100021f4:	3018      	adds	r0, #24
100021f6:	f000 f8ff 	bl	100023f8 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100021fa:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
100021fc:	68b2      	ldr	r2, [r6, #8]
100021fe:	9801      	ldr	r0, [sp, #4]
10002200:	7b51      	ldrb	r1, [r2, #13]
10002202:	430b      	orrs	r3, r1
10002204:	7353      	strb	r3, [r2, #13]
10002206:	f7fe fef1 	bl	10000fec <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
1000220a:	f000 fe55 	bl	10002eb8 <sys_clock_tick_get_32>
1000220e:	2300      	movs	r3, #0
10002210:	003a      	movs	r2, r7
10002212:	0004      	movs	r4, r0
10002214:	001d      	movs	r5, r3
10002216:	1b12      	subs	r2, r2, r4
10002218:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
1000221a:	42ab      	cmp	r3, r5
1000221c:	dc02      	bgt.n	10002224 <z_tick_sleep+0x74>
1000221e:	d1d0      	bne.n	100021c2 <z_tick_sleep+0x12>
10002220:	42aa      	cmp	r2, r5
10002222:	d0ce      	beq.n	100021c2 <z_tick_sleep+0x12>
		return ticks;
10002224:	0010      	movs	r0, r2
10002226:	e7cd      	b.n	100021c4 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10002228:	2702      	movs	r7, #2
1000222a:	427f      	negs	r7, r7
1000222c:	1b3f      	subs	r7, r7, r4
1000222e:	e7d3      	b.n	100021d8 <z_tick_sleep+0x28>
10002230:	200001bc 	.word	0x200001bc
10002234:	200001dc 	.word	0x200001dc
10002238:	10002e5d 	.word	0x10002e5d

1000223c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
1000223c:	b510      	push	{r4, lr}
1000223e:	000b      	movs	r3, r1
10002240:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002242:	1c42      	adds	r2, r0, #1
10002244:	d107      	bne.n	10002256 <z_impl_k_sleep+0x1a>
10002246:	3301      	adds	r3, #1
10002248:	d105      	bne.n	10002256 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
1000224a:	4b07      	ldr	r3, [pc, #28]	; (10002268 <z_impl_k_sleep+0x2c>)
1000224c:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
1000224e:	f7ff ff17 	bl	10002080 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10002252:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10002254:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10002256:	0021      	movs	r1, r4
10002258:	f7ff ffaa 	bl	100021b0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
1000225c:	220a      	movs	r2, #10
1000225e:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10002260:	17c1      	asrs	r1, r0, #31
10002262:	f7fe f81b 	bl	1000029c <__aeabi_uldivmod>
	return ret;
10002266:	e7f5      	b.n	10002254 <z_impl_k_sleep+0x18>
10002268:	200001bc 	.word	0x200001bc

1000226c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
1000226c:	4b01      	ldr	r3, [pc, #4]	; (10002274 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000226e:	6898      	ldr	r0, [r3, #8]
}
10002270:	4770      	bx	lr
10002272:	46c0      	nop			; (mov r8, r8)
10002274:	200001bc 	.word	0x200001bc

10002278 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10002278:	b570      	push	{r4, r5, r6, lr}
1000227a:	0004      	movs	r4, r0
1000227c:	f3ef 8610 	mrs	r6, PRIMASK
10002280:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10002282:	7b03      	ldrb	r3, [r0, #12]
10002284:	07db      	lsls	r3, r3, #31
10002286:	d508      	bpl.n	1000229a <z_thread_abort+0x22>
	if (key != 0U) {
10002288:	2e00      	cmp	r6, #0
1000228a:	d102      	bne.n	10002292 <z_thread_abort+0x1a>
	__asm__ volatile(
1000228c:	b662      	cpsie	i
1000228e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10002292:	2004      	movs	r0, #4
10002294:	b662      	cpsie	i
10002296:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10002298:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000229a:	2308      	movs	r3, #8
1000229c:	7b42      	ldrb	r2, [r0, #13]
1000229e:	421a      	tst	r2, r3
100022a0:	d005      	beq.n	100022ae <z_thread_abort+0x36>
	if (key != 0U) {
100022a2:	2e00      	cmp	r6, #0
100022a4:	d1f8      	bne.n	10002298 <z_thread_abort+0x20>
	__asm__ volatile(
100022a6:	b662      	cpsie	i
100022a8:	f3bf 8f6f 	isb	sy
100022ac:	e7f4      	b.n	10002298 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100022ae:	2120      	movs	r1, #32
100022b0:	0010      	movs	r0, r2
100022b2:	4388      	bics	r0, r1
100022b4:	0001      	movs	r1, r0
100022b6:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
100022b8:	b248      	sxtb	r0, r1
100022ba:	2800      	cmp	r0, #0
100022bc:	db20      	blt.n	10002300 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100022be:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
100022c0:	68a3      	ldr	r3, [r4, #8]
100022c2:	2b00      	cmp	r3, #0
100022c4:	d002      	beq.n	100022cc <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
100022c6:	0020      	movs	r0, r4
100022c8:	f000 fd92 	bl	10002df0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
100022cc:	0020      	movs	r0, r4
100022ce:	3018      	adds	r0, #24
100022d0:	f000 fddf 	bl	10002e92 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100022d4:	0023      	movs	r3, r4
	return list->head == list;
100022d6:	6da5      	ldr	r5, [r4, #88]	; 0x58
100022d8:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022da:	429d      	cmp	r5, r3
100022dc:	d001      	beq.n	100022e2 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100022de:	2d00      	cmp	r5, #0
100022e0:	d116      	bne.n	10002310 <z_thread_abort+0x98>
		update_cache(1);
100022e2:	2001      	movs	r0, #1
100022e4:	f7ff fdc6 	bl	10001e74 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100022e8:	4b10      	ldr	r3, [pc, #64]	; (1000232c <z_thread_abort+0xb4>)
100022ea:	689b      	ldr	r3, [r3, #8]
100022ec:	42a3      	cmp	r3, r4
100022ee:	d1d8      	bne.n	100022a2 <z_thread_abort+0x2a>
100022f0:	f3ef 8305 	mrs	r3, IPSR
100022f4:	2b00      	cmp	r3, #0
100022f6:	d1d4      	bne.n	100022a2 <z_thread_abort+0x2a>
100022f8:	0030      	movs	r0, r6
100022fa:	f7fe fe77 	bl	10000fec <arch_swap>
	return ret;
100022fe:	e7d0      	b.n	100022a2 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002300:	215f      	movs	r1, #95	; 0x5f
10002302:	400a      	ands	r2, r1
10002304:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10002306:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002308:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000230a:	f000 fd69 	bl	10002de0 <sys_dlist_remove>
}
1000230e:	e7d7      	b.n	100022c0 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10002310:	0028      	movs	r0, r5
10002312:	f000 fd6d 	bl	10002df0 <unpend_thread_no_timeout>
10002316:	0028      	movs	r0, r5
10002318:	3018      	adds	r0, #24
1000231a:	f000 fdba 	bl	10002e92 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
1000231e:	2300      	movs	r3, #0
		ready_thread(thread);
10002320:	0028      	movs	r0, r5
10002322:	66eb      	str	r3, [r5, #108]	; 0x6c
10002324:	f7ff fe04 	bl	10001f30 <ready_thread>
10002328:	e7d4      	b.n	100022d4 <z_thread_abort+0x5c>
1000232a:	46c0      	nop			; (mov r8, r8)
1000232c:	200001bc 	.word	0x200001bc

10002330 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10002330:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10002332:	4806      	ldr	r0, [pc, #24]	; (1000234c <z_data_copy+0x1c>)
10002334:	4a06      	ldr	r2, [pc, #24]	; (10002350 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002336:	4907      	ldr	r1, [pc, #28]	; (10002354 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10002338:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000233a:	f000 fd46 	bl	10002dca <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
1000233e:	4a06      	ldr	r2, [pc, #24]	; (10002358 <z_data_copy+0x28>)
10002340:	4906      	ldr	r1, [pc, #24]	; (1000235c <z_data_copy+0x2c>)
10002342:	4807      	ldr	r0, [pc, #28]	; (10002360 <z_data_copy+0x30>)
10002344:	f000 fd41 	bl	10002dca <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002348:	bd10      	pop	{r4, pc}
1000234a:	46c0      	nop			; (mov r8, r8)
1000234c:	20000000 	.word	0x20000000
10002350:	2000002e 	.word	0x2000002e
10002354:	100034a0 	.word	0x100034a0
10002358:	00000000 	.word	0x00000000
1000235c:	100034a0 	.word	0x100034a0
10002360:	20000000 	.word	0x20000000

10002364 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002364:	2000      	movs	r0, #0
{
10002366:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002368:	4b03      	ldr	r3, [pc, #12]	; (10002378 <elapsed+0x14>)
1000236a:	681b      	ldr	r3, [r3, #0]
1000236c:	4283      	cmp	r3, r0
1000236e:	d101      	bne.n	10002374 <elapsed+0x10>
10002370:	f7ff f940 	bl	100015f4 <sys_clock_elapsed>
}
10002374:	bd10      	pop	{r4, pc}
10002376:	46c0      	nop			; (mov r8, r8)
10002378:	200001e8 	.word	0x200001e8

1000237c <next_timeout>:

static int32_t next_timeout(void)
{
1000237c:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
1000237e:	4b0e      	ldr	r3, [pc, #56]	; (100023b8 <next_timeout+0x3c>)
10002380:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002382:	429e      	cmp	r6, r3
10002384:	d103      	bne.n	1000238e <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10002386:	f7ff ffed 	bl	10002364 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
1000238a:	480c      	ldr	r0, [pc, #48]	; (100023bc <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
1000238c:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
1000238e:	f7ff ffe9 	bl	10002364 <elapsed>
	if ((to == NULL) ||
10002392:	2e00      	cmp	r6, #0
10002394:	d0f9      	beq.n	1000238a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002396:	6932      	ldr	r2, [r6, #16]
10002398:	6973      	ldr	r3, [r6, #20]
1000239a:	0004      	movs	r4, r0
1000239c:	17c5      	asrs	r5, r0, #31
1000239e:	1b12      	subs	r2, r2, r4
100023a0:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
100023a2:	2b00      	cmp	r3, #0
100023a4:	dcf1      	bgt.n	1000238a <next_timeout+0xe>
100023a6:	d103      	bne.n	100023b0 <next_timeout+0x34>
100023a8:	2180      	movs	r1, #128	; 0x80
100023aa:	0609      	lsls	r1, r1, #24
100023ac:	428a      	cmp	r2, r1
100023ae:	d2ec      	bcs.n	1000238a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
100023b0:	43d8      	mvns	r0, r3
100023b2:	17c0      	asrs	r0, r0, #31
100023b4:	4010      	ands	r0, r2
	return ret;
100023b6:	e7e9      	b.n	1000238c <next_timeout+0x10>
100023b8:	20000020 	.word	0x20000020
100023bc:	7fffffff 	.word	0x7fffffff

100023c0 <remove_timeout>:
{
100023c0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
100023c2:	2800      	cmp	r0, #0
100023c4:	d00e      	beq.n	100023e4 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
100023c6:	4b0b      	ldr	r3, [pc, #44]	; (100023f4 <remove_timeout+0x34>)
100023c8:	685b      	ldr	r3, [r3, #4]
100023ca:	4298      	cmp	r0, r3
100023cc:	d00a      	beq.n	100023e4 <remove_timeout+0x24>
100023ce:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
100023d0:	2900      	cmp	r1, #0
100023d2:	d007      	beq.n	100023e4 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
100023d4:	690a      	ldr	r2, [r1, #16]
100023d6:	694b      	ldr	r3, [r1, #20]
100023d8:	6904      	ldr	r4, [r0, #16]
100023da:	6945      	ldr	r5, [r0, #20]
100023dc:	1912      	adds	r2, r2, r4
100023de:	416b      	adcs	r3, r5
100023e0:	610a      	str	r2, [r1, #16]
100023e2:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
100023e4:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100023e6:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
100023e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100023ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100023ec:	2300      	movs	r3, #0
100023ee:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100023f0:	6043      	str	r3, [r0, #4]
}
100023f2:	bd30      	pop	{r4, r5, pc}
100023f4:	20000020 	.word	0x20000020

100023f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100023f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100023fa:	0004      	movs	r4, r0
100023fc:	0016      	movs	r6, r2
100023fe:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002400:	1c53      	adds	r3, r2, #1
10002402:	d101      	bne.n	10002408 <z_add_timeout+0x10>
10002404:	1c7b      	adds	r3, r7, #1
10002406:	d057      	beq.n	100024b8 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10002408:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
1000240a:	f3ef 8310 	mrs	r3, PRIMASK
1000240e:	b672      	cpsid	i
10002410:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10002412:	2f00      	cmp	r7, #0
10002414:	da23      	bge.n	1000245e <z_add_timeout+0x66>
10002416:	1c7b      	adds	r3, r7, #1
10002418:	d101      	bne.n	1000241e <z_add_timeout+0x26>
1000241a:	1cb3      	adds	r3, r6, #2
1000241c:	d81f      	bhi.n	1000245e <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
1000241e:	4b2b      	ldr	r3, [pc, #172]	; (100024cc <z_add_timeout+0xd4>)
10002420:	6818      	ldr	r0, [r3, #0]
10002422:	6859      	ldr	r1, [r3, #4]
10002424:	2202      	movs	r2, #2
10002426:	4252      	negs	r2, r2
10002428:	17d3      	asrs	r3, r2, #31
1000242a:	1a12      	subs	r2, r2, r0
1000242c:	418b      	sbcs	r3, r1
1000242e:	1b92      	subs	r2, r2, r6
10002430:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10002432:	2b00      	cmp	r3, #0
10002434:	dc04      	bgt.n	10002440 <z_add_timeout+0x48>
10002436:	d101      	bne.n	1000243c <z_add_timeout+0x44>
10002438:	2a00      	cmp	r2, #0
1000243a:	d101      	bne.n	10002440 <z_add_timeout+0x48>
1000243c:	2201      	movs	r2, #1
1000243e:	2300      	movs	r3, #0
	return list->head == list;
10002440:	4f23      	ldr	r7, [pc, #140]	; (100024d0 <z_add_timeout+0xd8>)
10002442:	6122      	str	r2, [r4, #16]
10002444:	6163      	str	r3, [r4, #20]
10002446:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002448:	42bd      	cmp	r5, r7
1000244a:	d100      	bne.n	1000244e <z_add_timeout+0x56>
1000244c:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
1000244e:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10002450:	2d00      	cmp	r5, #0
10002452:	d10f      	bne.n	10002474 <z_add_timeout+0x7c>
	node->next = list;
10002454:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002456:	6066      	str	r6, [r4, #4]
	tail->next = node;
10002458:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000245a:	607c      	str	r4, [r7, #4]
}
1000245c:	e01c      	b.n	10002498 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
1000245e:	f7ff ff81 	bl	10002364 <elapsed>
10002462:	2201      	movs	r2, #1
10002464:	2300      	movs	r3, #0
10002466:	1992      	adds	r2, r2, r6
10002468:	417b      	adcs	r3, r7
1000246a:	0006      	movs	r6, r0
1000246c:	17c7      	asrs	r7, r0, #31
1000246e:	1992      	adds	r2, r2, r6
10002470:	417b      	adcs	r3, r7
10002472:	e7e5      	b.n	10002440 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10002474:	6928      	ldr	r0, [r5, #16]
10002476:	6969      	ldr	r1, [r5, #20]
10002478:	6922      	ldr	r2, [r4, #16]
1000247a:	6963      	ldr	r3, [r4, #20]
1000247c:	4299      	cmp	r1, r3
1000247e:	dc02      	bgt.n	10002486 <z_add_timeout+0x8e>
10002480:	d11b      	bne.n	100024ba <z_add_timeout+0xc2>
10002482:	4290      	cmp	r0, r2
10002484:	d919      	bls.n	100024ba <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10002486:	1a80      	subs	r0, r0, r2
10002488:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
1000248a:	686b      	ldr	r3, [r5, #4]
1000248c:	6128      	str	r0, [r5, #16]
1000248e:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10002490:	6063      	str	r3, [r4, #4]
	node->next = successor;
10002492:	6025      	str	r5, [r4, #0]
	prev->next = node;
10002494:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002496:	606c      	str	r4, [r5, #4]
	return list->head == list;
10002498:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000249a:	42bb      	cmp	r3, r7
1000249c:	d006      	beq.n	100024ac <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
1000249e:	429c      	cmp	r4, r3
100024a0:	d104      	bne.n	100024ac <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
100024a2:	f7ff ff6b 	bl	1000237c <next_timeout>
100024a6:	2100      	movs	r1, #0
100024a8:	f7ff f82c 	bl	10001504 <sys_clock_set_timeout>
	if (key != 0U) {
100024ac:	9b01      	ldr	r3, [sp, #4]
100024ae:	2b00      	cmp	r3, #0
100024b0:	d102      	bne.n	100024b8 <z_add_timeout+0xc0>
	__asm__ volatile(
100024b2:	b662      	cpsie	i
100024b4:	f3bf 8f6f 	isb	sy
		}
	}
}
100024b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
100024ba:	1a12      	subs	r2, r2, r0
100024bc:	418b      	sbcs	r3, r1
100024be:	6122      	str	r2, [r4, #16]
100024c0:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
100024c2:	42b5      	cmp	r5, r6
100024c4:	d0c6      	beq.n	10002454 <z_add_timeout+0x5c>
100024c6:	682d      	ldr	r5, [r5, #0]
100024c8:	e7c2      	b.n	10002450 <z_add_timeout+0x58>
100024ca:	46c0      	nop			; (mov r8, r8)
100024cc:	20000128 	.word	0x20000128
100024d0:	20000020 	.word	0x20000020

100024d4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
100024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100024d6:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
100024d8:	f3ef 8310 	mrs	r3, PRIMASK
100024dc:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
100024de:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
100024e0:	4b30      	ldr	r3, [pc, #192]	; (100025a4 <sys_clock_announce+0xd0>)
100024e2:	6018      	str	r0, [r3, #0]
	return list->head == list;
100024e4:	4b30      	ldr	r3, [pc, #192]	; (100025a8 <sys_clock_announce+0xd4>)
100024e6:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100024e8:	429c      	cmp	r4, r3
100024ea:	d100      	bne.n	100024ee <sys_clock_announce+0x1a>
100024ec:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
100024ee:	4b2f      	ldr	r3, [pc, #188]	; (100025ac <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
100024f0:	4d2c      	ldr	r5, [pc, #176]	; (100025a4 <sys_clock_announce+0xd0>)
		curr_tick += dt;
100024f2:	9303      	str	r3, [sp, #12]
100024f4:	6818      	ldr	r0, [r3, #0]
100024f6:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
100024f8:	682b      	ldr	r3, [r5, #0]
100024fa:	469c      	mov	ip, r3
100024fc:	2c00      	cmp	r4, #0
100024fe:	d039      	beq.n	10002574 <sys_clock_announce+0xa0>
10002500:	6962      	ldr	r2, [r4, #20]
10002502:	6926      	ldr	r6, [r4, #16]
10002504:	17db      	asrs	r3, r3, #31
10002506:	429a      	cmp	r2, r3
10002508:	dc02      	bgt.n	10002510 <sys_clock_announce+0x3c>
1000250a:	d10a      	bne.n	10002522 <sys_clock_announce+0x4e>
1000250c:	4566      	cmp	r6, ip
1000250e:	d908      	bls.n	10002522 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10002510:	001f      	movs	r7, r3
10002512:	6922      	ldr	r2, [r4, #16]
10002514:	6963      	ldr	r3, [r4, #20]
10002516:	4666      	mov	r6, ip
10002518:	1b92      	subs	r2, r2, r6
1000251a:	41bb      	sbcs	r3, r7
1000251c:	6122      	str	r2, [r4, #16]
1000251e:	6163      	str	r3, [r4, #20]
10002520:	e028      	b.n	10002574 <sys_clock_announce+0xa0>
		curr_tick += dt;
10002522:	17f3      	asrs	r3, r6, #31
10002524:	9600      	str	r6, [sp, #0]
10002526:	9301      	str	r3, [sp, #4]
10002528:	9a00      	ldr	r2, [sp, #0]
1000252a:	9b01      	ldr	r3, [sp, #4]
1000252c:	1880      	adds	r0, r0, r2
1000252e:	4159      	adcs	r1, r3
		t->dticks = 0;
10002530:	2300      	movs	r3, #0
10002532:	2200      	movs	r2, #0
		curr_tick += dt;
10002534:	4f1d      	ldr	r7, [pc, #116]	; (100025ac <sys_clock_announce+0xd8>)
		t->dticks = 0;
10002536:	6122      	str	r2, [r4, #16]
10002538:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
1000253a:	6038      	str	r0, [r7, #0]
1000253c:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
1000253e:	0020      	movs	r0, r4
10002540:	f7ff ff3e 	bl	100023c0 <remove_timeout>
	if (key != 0U) {
10002544:	9b02      	ldr	r3, [sp, #8]
10002546:	2b00      	cmp	r3, #0
10002548:	d102      	bne.n	10002550 <sys_clock_announce+0x7c>
	__asm__ volatile(
1000254a:	b662      	cpsie	i
1000254c:	f3bf 8f6f 	isb	sy
		t->fn(t);
10002550:	0020      	movs	r0, r4
10002552:	68a3      	ldr	r3, [r4, #8]
10002554:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002556:	f3ef 8310 	mrs	r3, PRIMASK
1000255a:	b672      	cpsid	i
1000255c:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
1000255e:	4b11      	ldr	r3, [pc, #68]	; (100025a4 <sys_clock_announce+0xd0>)
10002560:	681a      	ldr	r2, [r3, #0]
10002562:	1b92      	subs	r2, r2, r6
10002564:	601a      	str	r2, [r3, #0]
	return list->head == list;
10002566:	4b10      	ldr	r3, [pc, #64]	; (100025a8 <sys_clock_announce+0xd4>)
10002568:	4694      	mov	ip, r2
1000256a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000256c:	429c      	cmp	r4, r3
1000256e:	d1be      	bne.n	100024ee <sys_clock_announce+0x1a>
		curr_tick += dt;
10002570:	6838      	ldr	r0, [r7, #0]
10002572:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10002574:	4662      	mov	r2, ip
10002576:	17d3      	asrs	r3, r2, #31
10002578:	1812      	adds	r2, r2, r0
1000257a:	414b      	adcs	r3, r1
	announce_remaining = 0;
1000257c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000257e:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
10002580:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
10002582:	600a      	str	r2, [r1, #0]
10002584:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
10002586:	f7ff fef9 	bl	1000237c <next_timeout>
1000258a:	0021      	movs	r1, r4
1000258c:	f7fe ffba 	bl	10001504 <sys_clock_set_timeout>
	if (key != 0U) {
10002590:	9b02      	ldr	r3, [sp, #8]
10002592:	42a3      	cmp	r3, r4
10002594:	d102      	bne.n	1000259c <sys_clock_announce+0xc8>
	__asm__ volatile(
10002596:	b662      	cpsie	i
10002598:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
1000259c:	f7ff fd14 	bl	10001fc8 <z_time_slice>
#endif
}
100025a0:	b005      	add	sp, #20
100025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100025a4:	200001e8 	.word	0x200001e8
100025a8:	20000020 	.word	0x20000020
100025ac:	20000128 	.word	0x20000128

100025b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100025b0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100025b2:	f3ef 8410 	mrs	r4, PRIMASK
100025b6:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
100025b8:	f7ff fed4 	bl	10002364 <elapsed>
100025bc:	0002      	movs	r2, r0
100025be:	4906      	ldr	r1, [pc, #24]	; (100025d8 <sys_clock_tick_get+0x28>)
100025c0:	17c3      	asrs	r3, r0, #31
100025c2:	6808      	ldr	r0, [r1, #0]
100025c4:	6849      	ldr	r1, [r1, #4]
100025c6:	1880      	adds	r0, r0, r2
100025c8:	4159      	adcs	r1, r3
	if (key != 0U) {
100025ca:	2c00      	cmp	r4, #0
100025cc:	d102      	bne.n	100025d4 <sys_clock_tick_get+0x24>
	__asm__ volatile(
100025ce:	b662      	cpsie	i
100025d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
100025d4:	bd10      	pop	{r4, pc}
100025d6:	46c0      	nop			; (mov r8, r8)
100025d8:	20000128 	.word	0x20000128

100025dc <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
100025dc:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
100025de:	4802      	ldr	r0, [pc, #8]	; (100025e8 <boot_banner+0xc>)
100025e0:	f000 f852 	bl	10002688 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
100025e4:	bd10      	pop	{r4, pc}
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	1000345b 	.word	0x1000345b

100025ec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100025ec:	4770      	bx	lr

100025ee <gpio_pin_configure_dt>:
{
100025ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100025f0:	0003      	movs	r3, r0
100025f2:	000c      	movs	r4, r1
				  spec->dt_flags | extra_flags);
100025f4:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
100025f6:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
100025f8:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
100025fa:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
100025fc:	2701      	movs	r7, #1
100025fe:	003e      	movs	r6, r7
	const struct gpio_driver_api *api =
10002600:	6883      	ldr	r3, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002602:	408e      	lsls	r6, r1
	const struct gpio_driver_api *api =
10002604:	469c      	mov	ip, r3
	struct gpio_driver_data *data =
10002606:	6903      	ldr	r3, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10002608:	681d      	ldr	r5, [r3, #0]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000260a:	002c      	movs	r4, r5
1000260c:	43b4      	bics	r4, r6
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
1000260e:	423a      	tst	r2, r7
10002610:	d001      	beq.n	10002616 <gpio_pin_configure_dt+0x28>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002612:	0034      	movs	r4, r6
10002614:	432c      	orrs	r4, r5
10002616:	601c      	str	r4, [r3, #0]
	return api->pin_configure(port, pin, flags);
10002618:	4663      	mov	r3, ip
1000261a:	681b      	ldr	r3, [r3, #0]
1000261c:	4798      	blx	r3
}
1000261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10002620 <gpio_pin_get_dt>:
{
10002620:	0003      	movs	r3, r0
10002622:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spec->port, spec->pin);
10002624:	6800      	ldr	r0, [r0, #0]
10002626:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
10002628:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
1000262a:	6883      	ldr	r3, [r0, #8]
1000262c:	a901      	add	r1, sp, #4
1000262e:	685b      	ldr	r3, [r3, #4]
10002630:	4798      	blx	r3
	if (ret == 0) {
10002632:	2800      	cmp	r0, #0
10002634:	d107      	bne.n	10002646 <gpio_pin_get_dt+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
10002636:	3001      	adds	r0, #1
10002638:	40a0      	lsls	r0, r4
		*value ^= data->invert;
1000263a:	9b01      	ldr	r3, [sp, #4]
1000263c:	682a      	ldr	r2, [r5, #0]
1000263e:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
10002640:	4018      	ands	r0, r3
10002642:	1e43      	subs	r3, r0, #1
10002644:	4198      	sbcs	r0, r3
}
10002646:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

10002648 <gpio_pin_interrupt_configure_dt.constprop.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
10002648:	0003      	movs	r3, r0
1000264a:	b510      	push	{r4, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
1000264c:	6800      	ldr	r0, [r0, #0]
1000264e:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
10002650:	2401      	movs	r4, #1
10002652:	408c      	lsls	r4, r1
10002654:	6903      	ldr	r3, [r0, #16]
	const struct gpio_driver_api *api =
10002656:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
10002658:	681b      	ldr	r3, [r3, #0]
1000265a:	4023      	ands	r3, r4
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
1000265c:	1e5c      	subs	r4, r3, #1
1000265e:	41a3      	sbcs	r3, r4
10002660:	24b8      	movs	r4, #184	; 0xb8
10002662:	425b      	negs	r3, r3
10002664:	0e5b      	lsrs	r3, r3, #25
10002666:	04e4      	lsls	r4, r4, #19
10002668:	065b      	lsls	r3, r3, #25
1000266a:	191b      	adds	r3, r3, r4
	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
1000266c:	24c0      	movs	r4, #192	; 0xc0
1000266e:	04e4      	lsls	r4, r4, #19
10002670:	4023      	ands	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
10002672:	6994      	ldr	r4, [r2, #24]
10002674:	22a0      	movs	r2, #160	; 0xa0
10002676:	0452      	lsls	r2, r2, #17
10002678:	47a0      	blx	r4
}
1000267a:	bd10      	pop	{r4, pc}

1000267c <gpio_is_ready_dt.isra.0>:
static inline bool gpio_is_ready_dt(const struct gpio_dt_spec *spec)
1000267c:	b510      	push	{r4, lr}
1000267e:	f000 fb76 	bl	10002d6e <z_device_is_ready>
}
10002682:	bd10      	pop	{r4, pc}

10002684 <arch_printk_char_out>:
}
10002684:	2000      	movs	r0, #0
10002686:	4770      	bx	lr

10002688 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10002688:	b40f      	push	{r0, r1, r2, r3}
1000268a:	b507      	push	{r0, r1, r2, lr}
1000268c:	a904      	add	r1, sp, #16
1000268e:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10002690:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10002692:	f7fe f8af 	bl	100007f4 <vprintk>

	va_end(ap);
}
10002696:	b003      	add	sp, #12
10002698:	bc08      	pop	{r3}
1000269a:	b004      	add	sp, #16
1000269c:	4718      	bx	r3

1000269e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
1000269e:	b510      	push	{r4, lr}
100026a0:	0004      	movs	r4, r0
100026a2:	0008      	movs	r0, r1
100026a4:	0011      	movs	r1, r2
100026a6:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100026a8:	47a0      	blx	r4
	return z_impl_z_current_get();
100026aa:	f7ff fddf 	bl	1000226c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100026ae:	f7fe fdb5 	bl	1000121c <z_impl_k_thread_abort>

100026b2 <encode_uint>:
{
100026b2:	b5f0      	push	{r4, r5, r6, r7, lr}
100026b4:	b085      	sub	sp, #20
100026b6:	9001      	str	r0, [sp, #4]
100026b8:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier) != 0;
100026ba:	78d3      	ldrb	r3, [r2, #3]
{
100026bc:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
100026be:	001a      	movs	r2, r3
100026c0:	3a41      	subs	r2, #65	; 0x41
100026c2:	000f      	movs	r7, r1
	switch (specifier) {
100026c4:	2408      	movs	r4, #8
100026c6:	9202      	str	r2, [sp, #8]
100026c8:	2b6f      	cmp	r3, #111	; 0x6f
100026ca:	d00a      	beq.n	100026e2 <encode_uint+0x30>
100026cc:	d804      	bhi.n	100026d8 <encode_uint+0x26>
		return 16;
100026ce:	1924      	adds	r4, r4, r4
	switch (specifier) {
100026d0:	2b58      	cmp	r3, #88	; 0x58
100026d2:	d006      	beq.n	100026e2 <encode_uint+0x30>
		return 10;
100026d4:	3c06      	subs	r4, #6
100026d6:	e004      	b.n	100026e2 <encode_uint+0x30>
	switch (specifier) {
100026d8:	2208      	movs	r2, #8
		return 16;
100026da:	2410      	movs	r4, #16
	switch (specifier) {
100026dc:	4393      	bics	r3, r2
100026de:	2b70      	cmp	r3, #112	; 0x70
100026e0:	d1f8      	bne.n	100026d4 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
100026e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
100026e4:	0022      	movs	r2, r4
100026e6:	2300      	movs	r3, #0
100026e8:	0039      	movs	r1, r7
100026ea:	9801      	ldr	r0, [sp, #4]
100026ec:	f7fd fdd6 	bl	1000029c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100026f0:	0013      	movs	r3, r2
100026f2:	468c      	mov	ip, r1
100026f4:	b2d2      	uxtb	r2, r2
100026f6:	2b09      	cmp	r3, #9
100026f8:	d81a      	bhi.n	10002730 <encode_uint+0x7e>
100026fa:	3230      	adds	r2, #48	; 0x30
100026fc:	b2d3      	uxtb	r3, r2
100026fe:	3e01      	subs	r6, #1
10002700:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10002702:	2300      	movs	r3, #0
10002704:	42bb      	cmp	r3, r7
10002706:	d102      	bne.n	1000270e <encode_uint+0x5c>
10002708:	9b01      	ldr	r3, [sp, #4]
1000270a:	429c      	cmp	r4, r3
1000270c:	d802      	bhi.n	10002714 <encode_uint+0x62>
1000270e:	9b03      	ldr	r3, [sp, #12]
10002710:	429e      	cmp	r6, r3
10002712:	d80a      	bhi.n	1000272a <encode_uint+0x78>
	if (conv->flag_hash) {
10002714:	782b      	ldrb	r3, [r5, #0]
10002716:	069b      	lsls	r3, r3, #26
10002718:	d504      	bpl.n	10002724 <encode_uint+0x72>
		if (radix == 8) {
1000271a:	2c08      	cmp	r4, #8
1000271c:	d110      	bne.n	10002740 <encode_uint+0x8e>
			conv->altform_0 = true;
1000271e:	78ab      	ldrb	r3, [r5, #2]
10002720:	4323      	orrs	r3, r4
10002722:	70ab      	strb	r3, [r5, #2]
}
10002724:	0030      	movs	r0, r6
10002726:	b005      	add	sp, #20
10002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
1000272a:	4667      	mov	r7, ip
1000272c:	9001      	str	r0, [sp, #4]
1000272e:	e7d9      	b.n	100026e4 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002730:	0013      	movs	r3, r2
10002732:	9902      	ldr	r1, [sp, #8]
10002734:	3357      	adds	r3, #87	; 0x57
10002736:	b2db      	uxtb	r3, r3
10002738:	2919      	cmp	r1, #25
1000273a:	d8e0      	bhi.n	100026fe <encode_uint+0x4c>
1000273c:	3237      	adds	r2, #55	; 0x37
1000273e:	e7dd      	b.n	100026fc <encode_uint+0x4a>
		} else if (radix == 16) {
10002740:	2c10      	cmp	r4, #16
10002742:	d1ef      	bne.n	10002724 <encode_uint+0x72>
			conv->altform_0c = true;
10002744:	78ab      	ldrb	r3, [r5, #2]
10002746:	431c      	orrs	r4, r3
10002748:	70ac      	strb	r4, [r5, #2]
	return bp;
1000274a:	e7eb      	b.n	10002724 <encode_uint+0x72>

1000274c <outs>:
{
1000274c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000274e:	0007      	movs	r7, r0
10002750:	0015      	movs	r5, r2
10002752:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002754:	0014      	movs	r4, r2
{
10002756:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002758:	42a6      	cmp	r6, r4
1000275a:	d806      	bhi.n	1000276a <outs+0x1e>
1000275c:	2e00      	cmp	r6, #0
1000275e:	d001      	beq.n	10002764 <outs+0x18>
	return (int)count;
10002760:	1b60      	subs	r0, r4, r5
10002762:	e008      	b.n	10002776 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002764:	7823      	ldrb	r3, [r4, #0]
10002766:	2b00      	cmp	r3, #0
10002768:	d0fa      	beq.n	10002760 <outs+0x14>
		int rc = out((int)*sp++, ctx);
1000276a:	7820      	ldrb	r0, [r4, #0]
1000276c:	9901      	ldr	r1, [sp, #4]
1000276e:	47b8      	blx	r7
		if (rc < 0) {
10002770:	3401      	adds	r4, #1
10002772:	2800      	cmp	r0, #0
10002774:	daf0      	bge.n	10002758 <outs+0xc>
}
10002776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10002778 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10002778:	4770      	bx	lr

1000277a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
1000277a:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
1000277c:	f000 fb0b 	bl	10002d96 <z_fatal_error>
}
10002780:	bd10      	pop	{r4, pc}

10002782 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10002782:	b510      	push	{r4, lr}
10002784:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
10002786:	6800      	ldr	r0, [r0, #0]
10002788:	f000 fb05 	bl	10002d96 <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
1000278c:	bd10      	pop	{r4, pc}

1000278e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
1000278e:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10002790:	2100      	movs	r1, #0
10002792:	2001      	movs	r0, #1
10002794:	f7ff fff1 	bl	1000277a <z_arm_fatal_error>
}
10002798:	bd10      	pop	{r4, pc}

1000279a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
1000279a:	b510      	push	{r4, lr}
	handler();
1000279c:	f7fe fc0e 	bl	10000fbc <z_SysNmiOnReset>
	z_arm_int_exit();
100027a0:	f7fe fcb8 	bl	10001114 <z_arm_exc_exit>
}
100027a4:	bd10      	pop	{r4, pc}

100027a6 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
100027a6:	4770      	bx	lr

100027a8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100027a8:	0003      	movs	r3, r0
	size_t n = 0;
100027aa:	2000      	movs	r0, #0

	while (*s != '\0') {
100027ac:	5c1a      	ldrb	r2, [r3, r0]
100027ae:	2a00      	cmp	r2, #0
100027b0:	d100      	bne.n	100027b4 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
100027b2:	4770      	bx	lr
		n++;
100027b4:	3001      	adds	r0, #1
100027b6:	e7f9      	b.n	100027ac <strlen+0x4>

100027b8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
100027b8:	0003      	movs	r3, r0
	size_t n = 0;
100027ba:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
100027bc:	5c1a      	ldrb	r2, [r3, r0]
100027be:	2a00      	cmp	r2, #0
100027c0:	d001      	beq.n	100027c6 <strnlen+0xe>
100027c2:	4288      	cmp	r0, r1
100027c4:	d100      	bne.n	100027c8 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
100027c6:	4770      	bx	lr
		n++;
100027c8:	3001      	adds	r0, #1
100027ca:	e7f7      	b.n	100027bc <strnlen+0x4>

100027cc <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
100027cc:	2300      	movs	r3, #0
{
100027ce:	b510      	push	{r4, lr}
	while (n > 0) {
100027d0:	429a      	cmp	r2, r3
100027d2:	d100      	bne.n	100027d6 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
100027d4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
100027d6:	5ccc      	ldrb	r4, [r1, r3]
100027d8:	54c4      	strb	r4, [r0, r3]
		n--;
100027da:	3301      	adds	r3, #1
100027dc:	e7f8      	b.n	100027d0 <memcpy+0x4>

100027de <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
100027de:	0003      	movs	r3, r0
100027e0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
100027e2:	1882      	adds	r2, r0, r2
100027e4:	4293      	cmp	r3, r2
100027e6:	d100      	bne.n	100027ea <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
100027e8:	4770      	bx	lr
		*(d_byte++) = c_byte;
100027ea:	7019      	strb	r1, [r3, #0]
		n--;
100027ec:	3301      	adds	r3, #1
100027ee:	e7f9      	b.n	100027e4 <memset+0x6>

100027f0 <_stdout_hook_default>:
	return EOF;
100027f0:	2001      	movs	r0, #1
}
100027f2:	4240      	negs	r0, r0
100027f4:	4770      	bx	lr

100027f6 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
100027f6:	23d0      	movs	r3, #208	; 0xd0
100027f8:	061b      	lsls	r3, r3, #24
100027fa:	685b      	ldr	r3, [r3, #4]
}
100027fc:	2000      	movs	r0, #0
	*value = gpio_get_all();
100027fe:	600b      	str	r3, [r1, #0]
}
10002800:	4770      	bx	lr

10002802 <gpio_rpi_port_set_bits_raw>:
{
10002802:	000a      	movs	r2, r1
10002804:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10002806:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10002808:	0010      	movs	r0, r2
1000280a:	6919      	ldr	r1, [r3, #16]
1000280c:	4388      	bics	r0, r1
1000280e:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10002810:	20d0      	movs	r0, #208	; 0xd0
10002812:	0600      	lsls	r0, r0, #24
10002814:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
10002816:	691c      	ldr	r4, [r3, #16]
10002818:	6959      	ldr	r1, [r3, #20]
1000281a:	4021      	ands	r1, r4
1000281c:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
1000281e:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10002820:	6919      	ldr	r1, [r3, #16]
10002822:	695b      	ldr	r3, [r3, #20]
10002824:	4011      	ands	r1, r2
10002826:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10002828:	6241      	str	r1, [r0, #36]	; 0x24
}
1000282a:	2000      	movs	r0, #0
1000282c:	bd10      	pop	{r4, pc}

1000282e <gpio_rpi_port_clear_bits_raw>:
{
1000282e:	000a      	movs	r2, r1
10002830:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10002832:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
10002834:	0010      	movs	r0, r2
10002836:	6919      	ldr	r1, [r3, #16]
10002838:	4388      	bics	r0, r1
1000283a:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
1000283c:	20d0      	movs	r0, #208	; 0xd0
1000283e:	0600      	lsls	r0, r0, #24
10002840:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
10002842:	691c      	ldr	r4, [r3, #16]
10002844:	6959      	ldr	r1, [r3, #20]
10002846:	4021      	ands	r1, r4
10002848:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
1000284a:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
1000284c:	6919      	ldr	r1, [r3, #16]
1000284e:	695b      	ldr	r3, [r3, #20]
10002850:	4011      	ands	r1, r2
10002852:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
10002854:	6281      	str	r1, [r0, #40]	; 0x28
}
10002856:	2000      	movs	r0, #0
10002858:	bd10      	pop	{r4, pc}

1000285a <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
1000285a:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
1000285c:	0008      	movs	r0, r1
1000285e:	691a      	ldr	r2, [r3, #16]
10002860:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
10002862:	22d0      	movs	r2, #208	; 0xd0
10002864:	0612      	lsls	r2, r2, #24
10002866:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10002868:	691b      	ldr	r3, [r3, #16]
}
1000286a:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000286c:	400b      	ands	r3, r1
1000286e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002870:	4770      	bx	lr

10002872 <gpio_rpi_manage_callback>:
{
10002872:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10002874:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10002876:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10002878:	2800      	cmp	r0, #0
1000287a:	d021      	beq.n	100028c0 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000287c:	4288      	cmp	r0, r1
1000287e:	d11b      	bne.n	100028b8 <gpio_rpi_manage_callback+0x46>
	return node->next;
10002880:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10002882:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10002884:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10002886:	42a1      	cmp	r1, r4
10002888:	d100      	bne.n	1000288c <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
1000288a:	6098      	str	r0, [r3, #8]
	parent->next = child;
1000288c:	2000      	movs	r0, #0
1000288e:	6008      	str	r0, [r1, #0]
	if (set) {
10002890:	4282      	cmp	r2, r0
10002892:	d006      	beq.n	100028a2 <gpio_rpi_manage_callback+0x30>
	return list->head;
10002894:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10002896:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10002898:	689a      	ldr	r2, [r3, #8]
	list->head = node;
1000289a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000289c:	2a00      	cmp	r2, #0
1000289e:	d100      	bne.n	100028a2 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
100028a0:	6099      	str	r1, [r3, #8]
	return 0;
100028a2:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
100028a4:	e010      	b.n	100028c8 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100028a6:	4281      	cmp	r1, r0
100028a8:	d106      	bne.n	100028b8 <gpio_rpi_manage_callback+0x46>
	return node->next;
100028aa:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
100028ac:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100028ae:	6898      	ldr	r0, [r3, #8]
100028b0:	4281      	cmp	r1, r0
100028b2:	d1eb      	bne.n	1000288c <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100028b4:	609c      	str	r4, [r3, #8]
}
100028b6:	e7e9      	b.n	1000288c <gpio_rpi_manage_callback+0x1a>
	return node->next;
100028b8:	0004      	movs	r4, r0
100028ba:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100028bc:	2800      	cmp	r0, #0
100028be:	d1f2      	bne.n	100028a6 <gpio_rpi_manage_callback+0x34>
			if (!set) {
100028c0:	2a00      	cmp	r2, #0
100028c2:	d1e7      	bne.n	10002894 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
100028c4:	2016      	movs	r0, #22
100028c6:	4240      	negs	r0, r0
}
100028c8:	bd10      	pop	{r4, pc}

100028ca <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
100028ca:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
100028cc:	6843      	ldr	r3, [r0, #4]
100028ce:	685b      	ldr	r3, [r3, #4]
100028d0:	4798      	blx	r3
	return 0;
}
100028d2:	2000      	movs	r0, #0
100028d4:	bd10      	pop	{r4, pc}

100028d6 <gpio_rpi_pin_interrupt_configure>:
{
100028d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100028d8:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
100028da:	6907      	ldr	r7, [r0, #16]
{
100028dc:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
100028de:	210f      	movs	r1, #15
100028e0:	2200      	movs	r2, #0
100028e2:	0028      	movs	r0, r5
{
100028e4:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
100028e6:	f7ff f879 	bl	100019dc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100028ea:	2201      	movs	r2, #1
100028ec:	0013      	movs	r3, r2
100028ee:	40ab      	lsls	r3, r5
100028f0:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
100028f2:	2380      	movs	r3, #128	; 0x80
100028f4:	039b      	lsls	r3, r3, #14
100028f6:	429e      	cmp	r6, r3
100028f8:	d105      	bne.n	10002906 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100028fa:	68fb      	ldr	r3, [r7, #12]
100028fc:	9a01      	ldr	r2, [sp, #4]
100028fe:	4393      	bics	r3, r2
}
10002900:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002902:	60fb      	str	r3, [r7, #12]
}
10002904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
10002906:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10002908:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
1000290a:	04db      	lsls	r3, r3, #19
1000290c:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
1000290e:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10002910:	01f6      	lsls	r6, r6, #7
10002912:	d50d      	bpl.n	10002930 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10002914:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
10002916:	2b00      	cmp	r3, #0
10002918:	d001      	beq.n	1000291e <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
1000291a:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
1000291c:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
1000291e:	2201      	movs	r2, #1
10002920:	0028      	movs	r0, r5
10002922:	f7ff f85b 	bl	100019dc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002926:	68fb      	ldr	r3, [r7, #12]
10002928:	9a01      	ldr	r2, [sp, #4]
1000292a:	431a      	orrs	r2, r3
1000292c:	0013      	movs	r3, r2
1000292e:	e7e7      	b.n	10002900 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10002930:	2b00      	cmp	r3, #0
10002932:	d0f4      	beq.n	1000291e <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
10002934:	2302      	movs	r3, #2
10002936:	e7f1      	b.n	1000291c <gpio_rpi_pin_interrupt_configure+0x46>

10002938 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10002938:	b510      	push	{r4, lr}
1000293a:	2200      	movs	r2, #0
1000293c:	2103      	movs	r1, #3
1000293e:	200d      	movs	r0, #13
10002940:	f7fe fb12 	bl	10000f68 <z_arm_irq_priority_set>
10002944:	200d      	movs	r0, #13
10002946:	f7fe fb03 	bl	10000f50 <arch_irq_enable>
1000294a:	bd10      	pop	{r4, pc}

1000294c <gpio_rpi_port_set_masked_raw>:
{
1000294c:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
1000294e:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002950:	20d0      	movs	r0, #208	; 0xd0
10002952:	0600      	lsls	r0, r0, #24
10002954:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
10002956:	6925      	ldr	r5, [r4, #16]
10002958:	4053      	eors	r3, r2
1000295a:	400b      	ands	r3, r1
1000295c:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000295e:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002960:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10002962:	6a03      	ldr	r3, [r0, #32]
10002964:	4053      	eors	r3, r2
10002966:	439d      	bics	r5, r3
10002968:	002b      	movs	r3, r5
1000296a:	6925      	ldr	r5, [r4, #16]
1000296c:	401d      	ands	r5, r3
1000296e:	6963      	ldr	r3, [r4, #20]
10002970:	402b      	ands	r3, r5
10002972:	62c3      	str	r3, [r0, #44]	; 0x2c
10002974:	6a03      	ldr	r3, [r0, #32]
10002976:	405a      	eors	r2, r3
10002978:	400a      	ands	r2, r1
1000297a:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
1000297c:	6963      	ldr	r3, [r4, #20]
1000297e:	4011      	ands	r1, r2
10002980:	4399      	bics	r1, r3
10002982:	62c1      	str	r1, [r0, #44]	; 0x2c
}
10002984:	2000      	movs	r0, #0
10002986:	bd30      	pop	{r4, r5, pc}

10002988 <gpio_rpi_configure>:
{
10002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000298a:	0015      	movs	r5, r2
1000298c:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
1000298e:	2401      	movs	r4, #1
10002990:	0952      	lsrs	r2, r2, #5
10002992:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
10002994:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
10002996:	4021      	ands	r1, r4
10002998:	0038      	movs	r0, r7
1000299a:	4022      	ands	r2, r4
1000299c:	f7fe ffd4 	bl	10001948 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100029a0:	2105      	movs	r1, #5
100029a2:	0038      	movs	r0, r7
100029a4:	f7fe ffba 	bl	1000191c <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100029a8:	03ab      	lsls	r3, r5, #14
100029aa:	d525      	bpl.n	100029f8 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
100029ac:	40bc      	lsls	r4, r7
100029ae:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
100029b0:	07a9      	lsls	r1, r5, #30
100029b2:	d515      	bpl.n	100029e0 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
100029b4:	4322      	orrs	r2, r4
100029b6:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100029b8:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
100029ba:	6971      	ldr	r1, [r6, #20]
100029bc:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100029be:	0768      	lsls	r0, r5, #29
100029c0:	d507      	bpl.n	100029d2 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
100029c2:	4321      	orrs	r1, r4
100029c4:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
100029c6:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
100029c8:	036d      	lsls	r5, r5, #13
100029ca:	d507      	bpl.n	100029dc <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
100029cc:	6254      	str	r4, [r2, #36]	; 0x24
}
100029ce:	2000      	movs	r0, #0
100029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
100029d2:	43a1      	bics	r1, r4
100029d4:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
100029d6:	6154      	str	r4, [r2, #20]
    if (out)
100029d8:	032d      	lsls	r5, r5, #12
100029da:	d4f7      	bmi.n	100029cc <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
100029dc:	6294      	str	r4, [r2, #40]	; 0x28
}
100029de:	e7f6      	b.n	100029ce <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
100029e0:	43a2      	bics	r2, r4
100029e2:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
100029e4:	22d0      	movs	r2, #208	; 0xd0
100029e6:	0612      	lsls	r2, r2, #24
100029e8:	0329      	lsls	r1, r5, #12
100029ea:	d501      	bpl.n	100029f0 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
100029ec:	6154      	str	r4, [r2, #20]
}
100029ee:	e7ed      	b.n	100029cc <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
100029f0:	036d      	lsls	r5, r5, #13
100029f2:	d5eb      	bpl.n	100029cc <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
100029f4:	6194      	str	r4, [r2, #24]
}
100029f6:	e7e9      	b.n	100029cc <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
100029f8:	03ed      	lsls	r5, r5, #15
100029fa:	d5e8      	bpl.n	100029ce <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
100029fc:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100029fe:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
10002a00:	0612      	lsls	r2, r2, #24
10002a02:	e7eb      	b.n	100029dc <gpio_rpi_configure+0x54>

10002a04 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10002a04:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10002a06:	6803      	ldr	r3, [r0, #0]
10002a08:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10002a0a:	7905      	ldrb	r5, [r0, #4]
10002a0c:	6804      	ldr	r4, [r0, #0]
10002a0e:	00ed      	lsls	r5, r5, #3
10002a10:	1964      	adds	r4, r4, r5
10002a12:	42a3      	cmp	r3, r4
10002a14:	d302      	bcc.n	10002a1c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
10002a16:	2002      	movs	r0, #2
10002a18:	4240      	negs	r0, r0
}
10002a1a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10002a1c:	795c      	ldrb	r4, [r3, #5]
10002a1e:	428c      	cmp	r4, r1
10002a20:	d001      	beq.n	10002a26 <pinctrl_lookup_state+0x22>
		(*state)++;
10002a22:	3308      	adds	r3, #8
10002a24:	e7f0      	b.n	10002a08 <pinctrl_lookup_state+0x4>
			return 0;
10002a26:	2000      	movs	r0, #0
10002a28:	e7f7      	b.n	10002a1a <pinctrl_lookup_state+0x16>

10002a2a <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10002a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a2c:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002a2e:	2601      	movs	r6, #1
10002a30:	008d      	lsls	r5, r1, #2
10002a32:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10002a34:	42ac      	cmp	r4, r5
10002a36:	d101      	bne.n	10002a3c <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10002a38:	2000      	movs	r0, #0
10002a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10002a3c:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10002a3e:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10002a40:	06c0      	lsls	r0, r0, #27
10002a42:	0ec0      	lsrs	r0, r0, #27
10002a44:	f000 f987 	bl	10002d56 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10002a48:	8821      	ldrh	r1, [r4, #0]
10002a4a:	7820      	ldrb	r0, [r4, #0]
10002a4c:	05c9      	lsls	r1, r1, #23
10002a4e:	06c0      	lsls	r0, r0, #27
10002a50:	0f09      	lsrs	r1, r1, #28
10002a52:	0ec0      	lsrs	r0, r0, #27
10002a54:	f7fe ff62 	bl	1000191c <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10002a58:	7861      	ldrb	r1, [r4, #1]
10002a5a:	7820      	ldrb	r0, [r4, #0]
10002a5c:	09ca      	lsrs	r2, r1, #7
10002a5e:	06c0      	lsls	r0, r0, #27
10002a60:	0649      	lsls	r1, r1, #25
10002a62:	0fc9      	lsrs	r1, r1, #31
10002a64:	0ec0      	lsrs	r0, r0, #27
10002a66:	f7fe ff6f 	bl	10001948 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10002a6a:	7861      	ldrb	r1, [r4, #1]
10002a6c:	7820      	ldrb	r0, [r4, #0]
10002a6e:	06c9      	lsls	r1, r1, #27
10002a70:	06c0      	lsls	r0, r0, #27
10002a72:	0f09      	lsrs	r1, r1, #28
10002a74:	0ec0      	lsrs	r0, r0, #27
10002a76:	f7fe ff95 	bl	100019a4 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002a7a:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002a7c:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002a7e:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002a80:	06c0      	lsls	r0, r0, #27
10002a82:	4031      	ands	r1, r6
10002a84:	0ec0      	lsrs	r0, r0, #27
10002a86:	f7fe ff7f 	bl	10001988 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10002a8a:	78a1      	ldrb	r1, [r4, #2]
10002a8c:	7820      	ldrb	r0, [r4, #0]
10002a8e:	0789      	lsls	r1, r1, #30
10002a90:	06c0      	lsls	r0, r0, #27
10002a92:	0fc9      	lsrs	r1, r1, #31
10002a94:	0ec0      	lsrs	r0, r0, #27
10002a96:	f7fe ff69 	bl	1000196c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10002a9a:	78a1      	ldrb	r1, [r4, #2]
10002a9c:	7820      	ldrb	r0, [r4, #0]
10002a9e:	07c9      	lsls	r1, r1, #31
10002aa0:	06c0      	lsls	r0, r0, #27
10002aa2:	0fc9      	lsrs	r1, r1, #31
10002aa4:	0ec0      	lsrs	r0, r0, #27
10002aa6:	f7fe ffbb 	bl	10001a20 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10002aaa:	003c      	movs	r4, r7
10002aac:	e7c2      	b.n	10002a34 <pinctrl_configure_pins+0xa>

10002aae <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10002aae:	2000      	movs	r0, #0
10002ab0:	4770      	bx	lr

10002ab2 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10002ab2:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10002ab4:	7900      	ldrb	r0, [r0, #4]
10002ab6:	2802      	cmp	r0, #2
10002ab8:	d009      	beq.n	10002ace <reset_rpi_read_register.isra.0+0x1c>
10002aba:	2804      	cmp	r0, #4
10002abc:	d00b      	beq.n	10002ad6 <reset_rpi_read_register.isra.0+0x24>
10002abe:	2801      	cmp	r0, #1
10002ac0:	d10c      	bne.n	10002adc <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
10002ac2:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
10002ac4:	780b      	ldrb	r3, [r1, #0]
10002ac6:	b2db      	uxtb	r3, r3
	return 0;
10002ac8:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10002aca:	6013      	str	r3, [r2, #0]
}
10002acc:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10002ace:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
10002ad0:	880b      	ldrh	r3, [r1, #0]
10002ad2:	b29b      	uxth	r3, r3
		break;
10002ad4:	e7f8      	b.n	10002ac8 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10002ad6:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10002ad8:	680b      	ldr	r3, [r1, #0]
		break;
10002ada:	e7f5      	b.n	10002ac8 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10002adc:	2016      	movs	r0, #22
10002ade:	4240      	negs	r0, r0
10002ae0:	e7f4      	b.n	10002acc <reset_rpi_read_register.isra.0+0x1a>

10002ae2 <reset_rpi_update>:
{
10002ae2:	0003      	movs	r3, r0
10002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ae6:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10002ae8:	685f      	ldr	r7, [r3, #4]
{
10002aea:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10002aec:	793e      	ldrb	r6, [r7, #4]
{
10002aee:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002af0:	00f1      	lsls	r1, r6, #3
10002af2:	f7fd fba9 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10002af6:	aa03      	add	r2, sp, #12
10002af8:	0004      	movs	r4, r0
10002afa:	000d      	movs	r5, r1
10002afc:	b281      	uxth	r1, r0
10002afe:	0038      	movs	r0, r7
10002b00:	f7ff ffd7 	bl	10002ab2 <reset_rpi_read_register.isra.0>
	if (ret) {
10002b04:	2800      	cmp	r0, #0
10002b06:	d117      	bne.n	10002b38 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10002b08:	2201      	movs	r2, #1
10002b0a:	9903      	ldr	r1, [sp, #12]
10002b0c:	b2ed      	uxtb	r5, r5
10002b0e:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
10002b10:	000b      	movs	r3, r1
		value |= BIT(regbit);
10002b12:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
10002b14:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10002b16:	797d      	ldrb	r5, [r7, #5]
10002b18:	9a01      	ldr	r2, [sp, #4]
10002b1a:	4295      	cmp	r5, r2
10002b1c:	d001      	beq.n	10002b22 <reset_rpi_update+0x40>
		value |= BIT(regbit);
10002b1e:	4663      	mov	r3, ip
10002b20:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10002b22:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
10002b24:	2e02      	cmp	r6, #2
10002b26:	d009      	beq.n	10002b3c <reset_rpi_update+0x5a>
10002b28:	2e04      	cmp	r6, #4
10002b2a:	d00c      	beq.n	10002b46 <reset_rpi_update+0x64>
10002b2c:	2e01      	cmp	r6, #1
10002b2e:	d10e      	bne.n	10002b4e <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
10002b30:	b2a4      	uxth	r4, r4
10002b32:	b2db      	uxtb	r3, r3
10002b34:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10002b36:	7023      	strb	r3, [r4, #0]
}
10002b38:	b005      	add	sp, #20
10002b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10002b3c:	b2a4      	uxth	r4, r4
10002b3e:	b29b      	uxth	r3, r3
10002b40:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10002b42:	8023      	strh	r3, [r4, #0]
}
10002b44:	e7f8      	b.n	10002b38 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10002b46:	b2a4      	uxth	r4, r4
10002b48:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002b4a:	6023      	str	r3, [r4, #0]
}
10002b4c:	e7f4      	b.n	10002b38 <reset_rpi_update+0x56>
	switch (config->reg_width) {
10002b4e:	2016      	movs	r0, #22
10002b50:	4240      	negs	r0, r0
10002b52:	e7f1      	b.n	10002b38 <reset_rpi_update+0x56>

10002b54 <reset_rpi_line_assert>:
{
10002b54:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10002b56:	2201      	movs	r2, #1
10002b58:	f7ff ffc3 	bl	10002ae2 <reset_rpi_update>
}
10002b5c:	bd10      	pop	{r4, pc}

10002b5e <reset_rpi_line_deassert>:
{
10002b5e:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10002b60:	2200      	movs	r2, #0
10002b62:	f7ff ffbe 	bl	10002ae2 <reset_rpi_update>
}
10002b66:	bd10      	pop	{r4, pc}

10002b68 <reset_rpi_line_toggle>:
{
10002b68:	b570      	push	{r4, r5, r6, lr}
10002b6a:	0004      	movs	r4, r0
10002b6c:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10002b6e:	f7ff fff1 	bl	10002b54 <reset_rpi_line_assert>
	if (ret) {
10002b72:	2800      	cmp	r0, #0
10002b74:	d103      	bne.n	10002b7e <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10002b76:	0029      	movs	r1, r5
10002b78:	0020      	movs	r0, r4
10002b7a:	f7ff fff0 	bl	10002b5e <reset_rpi_line_deassert>
}
10002b7e:	bd70      	pop	{r4, r5, r6, pc}

10002b80 <reset_rpi_status>:
{
10002b80:	0003      	movs	r3, r0
10002b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10002b84:	685e      	ldr	r6, [r3, #4]
{
10002b86:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002b88:	7931      	ldrb	r1, [r6, #4]
{
10002b8a:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10002b8c:	00c9      	lsls	r1, r1, #3
10002b8e:	f7fd fb5b 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10002b92:	aa01      	add	r2, sp, #4
10002b94:	000d      	movs	r5, r1
10002b96:	b281      	uxth	r1, r0
10002b98:	0030      	movs	r0, r6
10002b9a:	f7ff ff8a 	bl	10002ab2 <reset_rpi_read_register.isra.0>
	if (ret) {
10002b9e:	2800      	cmp	r0, #0
10002ba0:	d109      	bne.n	10002bb6 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10002ba2:	9b01      	ldr	r3, [sp, #4]
10002ba4:	b2ed      	uxtb	r5, r5
10002ba6:	40eb      	lsrs	r3, r5
10002ba8:	2201      	movs	r2, #1
10002baa:	439a      	bics	r2, r3
10002bac:	7973      	ldrb	r3, [r6, #5]
10002bae:	4259      	negs	r1, r3
10002bb0:	414b      	adcs	r3, r1
10002bb2:	4053      	eors	r3, r2
10002bb4:	7023      	strb	r3, [r4, #0]
}
10002bb6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10002bb8 <uart_rpi_poll_in>:
{
10002bb8:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10002bba:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10002bbc:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002bbe:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10002bc0:	699c      	ldr	r4, [r3, #24]
10002bc2:	0020      	movs	r0, r4
10002bc4:	4010      	ands	r0, r2
10002bc6:	4214      	tst	r4, r2
10002bc8:	d102      	bne.n	10002bd0 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10002bca:	681b      	ldr	r3, [r3, #0]
10002bcc:	700b      	strb	r3, [r1, #0]
}
10002bce:	bd10      	pop	{r4, pc}
		return -1;
10002bd0:	2001      	movs	r0, #1
10002bd2:	4240      	negs	r0, r0
10002bd4:	e7fb      	b.n	10002bce <uart_rpi_poll_in+0x16>

10002bd6 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002bd6:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002bd8:	6843      	ldr	r3, [r0, #4]
10002bda:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002bdc:	6998      	ldr	r0, [r3, #24]
10002bde:	4210      	tst	r0, r2
10002be0:	d1fc      	bne.n	10002bdc <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10002be2:	6019      	str	r1, [r3, #0]
}
10002be4:	4770      	bx	lr

10002be6 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002be6:	6843      	ldr	r3, [r0, #4]
10002be8:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10002bea:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10002bec:	0518      	lsls	r0, r3, #20
10002bee:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10002bf0:	055a      	lsls	r2, r3, #21
10002bf2:	d501      	bpl.n	10002bf8 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10002bf4:	2208      	movs	r2, #8
10002bf6:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10002bf8:	059a      	lsls	r2, r3, #22
10002bfa:	d501      	bpl.n	10002c00 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10002bfc:	2202      	movs	r2, #2
10002bfe:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10002c00:	05db      	lsls	r3, r3, #23
10002c02:	d501      	bpl.n	10002c08 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10002c04:	2304      	movs	r3, #4
10002c06:	4318      	orrs	r0, r3
}
10002c08:	4770      	bx	lr

10002c0a <uart_rpi_fifo_fill>:
{
10002c0a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002c0c:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002c0e:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002c10:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002c12:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002c14:	699c      	ldr	r4, [r3, #24]
10002c16:	422c      	tst	r4, r5
10002c18:	d102      	bne.n	10002c20 <uart_rpi_fifo_fill+0x16>
10002c1a:	1a14      	subs	r4, r2, r0
10002c1c:	2c00      	cmp	r4, #0
10002c1e:	dc00      	bgt.n	10002c22 <uart_rpi_fifo_fill+0x18>
}
10002c20:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10002c22:	5c0c      	ldrb	r4, [r1, r0]
10002c24:	3001      	adds	r0, #1
10002c26:	601c      	str	r4, [r3, #0]
10002c28:	e7f4      	b.n	10002c14 <uart_rpi_fifo_fill+0xa>

10002c2a <uart_rpi_fifo_read>:
{
10002c2a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002c2c:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002c2e:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002c30:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002c32:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002c34:	699c      	ldr	r4, [r3, #24]
10002c36:	422c      	tst	r4, r5
10002c38:	d102      	bne.n	10002c40 <uart_rpi_fifo_read+0x16>
10002c3a:	1a14      	subs	r4, r2, r0
10002c3c:	2c00      	cmp	r4, #0
10002c3e:	dc00      	bgt.n	10002c42 <uart_rpi_fifo_read+0x18>
}
10002c40:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10002c42:	681c      	ldr	r4, [r3, #0]
10002c44:	540c      	strb	r4, [r1, r0]
10002c46:	3001      	adds	r0, #1
10002c48:	e7f4      	b.n	10002c34 <uart_rpi_fifo_read+0xa>

10002c4a <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002c4a:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002c4c:	6843      	ldr	r3, [r0, #4]
10002c4e:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002c50:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002c52:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002c54:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002c56:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002c5a:	438a      	bics	r2, r1
10002c5c:	635a      	str	r2, [r3, #52]	; 0x34
}
10002c5e:	4770      	bx	lr

10002c60 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002c60:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002c62:	6843      	ldr	r3, [r0, #4]
10002c64:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002c66:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002c68:	438b      	bics	r3, r1
10002c6a:	6393      	str	r3, [r2, #56]	; 0x38
}
10002c6c:	4770      	bx	lr

10002c6e <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002c6e:	6843      	ldr	r3, [r0, #4]
10002c70:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10002c72:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002c74:	0680      	lsls	r0, r0, #26
10002c76:	0fc0      	lsrs	r0, r0, #31
}
10002c78:	4770      	bx	lr

10002c7a <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002c7a:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002c7c:	6843      	ldr	r3, [r0, #4]
10002c7e:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002c80:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002c82:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002c84:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002c86:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002c8a:	438a      	bics	r2, r1
10002c8c:	635a      	str	r2, [r3, #52]	; 0x34
}
10002c8e:	4770      	bx	lr

10002c90 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002c90:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002c92:	6843      	ldr	r3, [r0, #4]
10002c94:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002c96:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002c98:	438b      	bics	r3, r1
10002c9a:	6393      	str	r3, [r2, #56]	; 0x38
}
10002c9c:	4770      	bx	lr

10002c9e <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002c9e:	6843      	ldr	r3, [r0, #4]
10002ca0:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10002ca2:	6998      	ldr	r0, [r3, #24]
10002ca4:	0600      	lsls	r0, r0, #24
10002ca6:	0fc0      	lsrs	r0, r0, #31
}
10002ca8:	4770      	bx	lr

10002caa <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002caa:	6843      	ldr	r3, [r0, #4]
10002cac:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10002cae:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002cb0:	06c0      	lsls	r0, r0, #27
10002cb2:	0fc0      	lsrs	r0, r0, #31
}
10002cb4:	4770      	bx	lr

10002cb6 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002cb6:	6843      	ldr	r3, [r0, #4]
10002cb8:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10002cba:	23f8      	movs	r3, #248	; 0xf8
10002cbc:	6b91      	ldr	r1, [r2, #56]	; 0x38
10002cbe:	00db      	lsls	r3, r3, #3
10002cc0:	430b      	orrs	r3, r1
10002cc2:	6393      	str	r3, [r2, #56]	; 0x38
}
10002cc4:	4770      	bx	lr

10002cc6 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10002cc6:	b510      	push	{r4, lr}
10002cc8:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10002cca:	f7ff ffee 	bl	10002caa <uart_rpi_irq_rx_ready>
10002cce:	0003      	movs	r3, r0
10002cd0:	2001      	movs	r0, #1
10002cd2:	2b00      	cmp	r3, #0
10002cd4:	d104      	bne.n	10002ce0 <uart_rpi_irq_is_pending+0x1a>
10002cd6:	0020      	movs	r0, r4
10002cd8:	f7ff ffc9 	bl	10002c6e <uart_rpi_irq_tx_ready>
10002cdc:	1e43      	subs	r3, r0, #1
10002cde:	4198      	sbcs	r0, r3
}
10002ce0:	bd10      	pop	{r4, pc}

10002ce2 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10002ce2:	2001      	movs	r0, #1
10002ce4:	4770      	bx	lr

10002ce6 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10002ce6:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10002ce8:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10002cea:	60da      	str	r2, [r3, #12]
}
10002cec:	4770      	bx	lr

10002cee <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10002cee:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10002cf0:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10002cf2:	6893      	ldr	r3, [r2, #8]
10002cf4:	2b00      	cmp	r3, #0
10002cf6:	d001      	beq.n	10002cfc <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10002cf8:	68d1      	ldr	r1, [r2, #12]
10002cfa:	4798      	blx	r3
	}
}
10002cfc:	bd10      	pop	{r4, pc}

10002cfe <uart_rpi_config_get>:
{
10002cfe:	0003      	movs	r3, r0
10002d00:	b510      	push	{r4, lr}
10002d02:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
10002d04:	2208      	movs	r2, #8
10002d06:	6919      	ldr	r1, [r3, #16]
10002d08:	f7ff fd60 	bl	100027cc <memcpy>
}
10002d0c:	2000      	movs	r0, #0
10002d0e:	bd10      	pop	{r4, pc}

10002d10 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10002d10:	b510      	push	{r4, lr}
10002d12:	2200      	movs	r2, #0
10002d14:	2103      	movs	r1, #3
10002d16:	2014      	movs	r0, #20
10002d18:	f7fe f926 	bl	10000f68 <z_arm_irq_priority_set>
10002d1c:	2014      	movs	r0, #20
10002d1e:	f7fe f917 	bl	10000f50 <arch_irq_enable>
10002d22:	bd10      	pop	{r4, pc}

10002d24 <uart_rpi_configure>:
{
10002d24:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10002d26:	6843      	ldr	r3, [r0, #4]
{
10002d28:	0006      	movs	r6, r0
10002d2a:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10002d2c:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10002d2e:	6809      	ldr	r1, [r1, #0]
10002d30:	6818      	ldr	r0, [r3, #0]
10002d32:	f7fe fe83 	bl	10001a3c <uart_set_baudrate>
	if (baudrate == 0) {
10002d36:	2800      	cmp	r0, #0
10002d38:	d102      	bne.n	10002d40 <uart_rpi_configure+0x1c>
		return -EINVAL;
10002d3a:	2016      	movs	r0, #22
10002d3c:	4240      	negs	r0, r0
}
10002d3e:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10002d40:	79a3      	ldrb	r3, [r4, #6]
10002d42:	7962      	ldrb	r2, [r4, #5]
10002d44:	7921      	ldrb	r1, [r4, #4]
10002d46:	6870      	ldr	r0, [r6, #4]
10002d48:	f7fe fb1a 	bl	10001380 <uart_rpi_set_format.isra.0>
10002d4c:	2800      	cmp	r0, #0
10002d4e:	d1f4      	bne.n	10002d3a <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10002d50:	cc06      	ldmia	r4!, {r1, r2}
10002d52:	c506      	stmia	r5!, {r1, r2}
	return 0;
10002d54:	e7f3      	b.n	10002d3e <uart_rpi_configure+0x1a>

10002d56 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002d56:	2301      	movs	r3, #1
10002d58:	22d0      	movs	r2, #208	; 0xd0
10002d5a:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10002d5c:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002d5e:	0612      	lsls	r2, r2, #24
10002d60:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002d62:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10002d64:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002d66:	f7fe fdd9 	bl	1000191c <gpio_set_function>
}
10002d6a:	bd10      	pop	{r4, pc}

10002d6c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10002d6c:	4770      	bx	lr

10002d6e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10002d6e:	2800      	cmp	r0, #0
10002d70:	d009      	beq.n	10002d86 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10002d72:	2301      	movs	r3, #1
10002d74:	68c2      	ldr	r2, [r0, #12]
10002d76:	2000      	movs	r0, #0
10002d78:	7851      	ldrb	r1, [r2, #1]
10002d7a:	4219      	tst	r1, r3
10002d7c:	d002      	beq.n	10002d84 <z_device_is_ready+0x16>
10002d7e:	7810      	ldrb	r0, [r2, #0]
10002d80:	4242      	negs	r2, r0
10002d82:	4150      	adcs	r0, r2
10002d84:	4018      	ands	r0, r3
}
10002d86:	4770      	bx	lr

10002d88 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10002d88:	f3ef 8310 	mrs	r3, PRIMASK
10002d8c:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10002d8e:	e7fe      	b.n	10002d8e <arch_system_halt+0x6>

10002d90 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10002d90:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10002d92:	f7ff fff9 	bl	10002d88 <arch_system_halt>

10002d96 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002d98:	0005      	movs	r5, r0
10002d9a:	000e      	movs	r6, r1
10002d9c:	f3ef 8710 	mrs	r7, PRIMASK
10002da0:	b672      	cpsid	i
	return z_impl_z_current_get();
10002da2:	f7ff fa63 	bl	1000226c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10002da6:	0031      	movs	r1, r6
10002da8:	0004      	movs	r4, r0
10002daa:	0028      	movs	r0, r5
10002dac:	f7ff fff0 	bl	10002d90 <k_sys_fatal_error_handler>
	if (key != 0U) {
10002db0:	2f00      	cmp	r7, #0
10002db2:	d102      	bne.n	10002dba <z_fatal_error+0x24>
	__asm__ volatile(
10002db4:	b662      	cpsie	i
10002db6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10002dba:	0020      	movs	r0, r4
10002dbc:	f7fe fa2e 	bl	1000121c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10002dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10002dc2 <z_early_memset>:
{
10002dc2:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10002dc4:	f7ff fd0b 	bl	100027de <memset>
}
10002dc8:	bd10      	pop	{r4, pc}

10002dca <z_early_memcpy>:
{
10002dca:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10002dcc:	f7ff fcfe 	bl	100027cc <memcpy>
}
10002dd0:	bd10      	pop	{r4, pc}

10002dd2 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10002dd2:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002dd4:	f3ef 8310 	mrs	r3, PRIMASK
10002dd8:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10002dda:	f7fe f8b1 	bl	10000f40 <arch_cpu_idle>
10002dde:	e7f9      	b.n	10002dd4 <idle+0x2>

10002de0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10002de0:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002de2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10002de4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002de6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002de8:	2300      	movs	r3, #0
10002dea:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002dec:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10002dee:	4770      	bx	lr

10002df0 <unpend_thread_no_timeout>:
{
10002df0:	b510      	push	{r4, lr}
10002df2:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10002df4:	f7ff fff4 	bl	10002de0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10002df8:	2202      	movs	r2, #2
10002dfa:	7b63      	ldrb	r3, [r4, #13]
10002dfc:	4393      	bics	r3, r2
10002dfe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10002e00:	2300      	movs	r3, #0
10002e02:	60a3      	str	r3, [r4, #8]
}
10002e04:	bd10      	pop	{r4, pc}

10002e06 <z_ready_thread>:
{
10002e06:	b510      	push	{r4, lr}
10002e08:	f3ef 8410 	mrs	r4, PRIMASK
10002e0c:	b672      	cpsid	i
			ready_thread(thread);
10002e0e:	f7ff f88f 	bl	10001f30 <ready_thread>
	if (key != 0U) {
10002e12:	2c00      	cmp	r4, #0
10002e14:	d102      	bne.n	10002e1c <z_ready_thread+0x16>
	__asm__ volatile(
10002e16:	b662      	cpsie	i
10002e18:	f3bf 8f6f 	isb	sy
}
10002e1c:	bd10      	pop	{r4, pc}

10002e1e <z_sched_wake_thread>:
{
10002e1e:	b570      	push	{r4, r5, r6, lr}
10002e20:	0004      	movs	r4, r0
10002e22:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10002e24:	f3ef 8510 	mrs	r5, PRIMASK
10002e28:	b672      	cpsid	i
		if (!killed) {
10002e2a:	2328      	movs	r3, #40	; 0x28
10002e2c:	7b42      	ldrb	r2, [r0, #13]
10002e2e:	421a      	tst	r2, r3
10002e30:	d10e      	bne.n	10002e50 <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10002e32:	6883      	ldr	r3, [r0, #8]
10002e34:	2b00      	cmp	r3, #0
10002e36:	d001      	beq.n	10002e3c <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10002e38:	f7ff ffda 	bl	10002df0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002e3c:	2204      	movs	r2, #4
10002e3e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10002e40:	2e00      	cmp	r6, #0
10002e42:	d000      	beq.n	10002e46 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10002e44:	2214      	movs	r2, #20
10002e46:	4393      	bics	r3, r2
			ready_thread(thread);
10002e48:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002e4a:	7363      	strb	r3, [r4, #13]
10002e4c:	f7ff f870 	bl	10001f30 <ready_thread>
	if (key != 0U) {
10002e50:	2d00      	cmp	r5, #0
10002e52:	d102      	bne.n	10002e5a <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10002e54:	b662      	cpsie	i
10002e56:	f3bf 8f6f 	isb	sy
}
10002e5a:	bd70      	pop	{r4, r5, r6, pc}

10002e5c <z_thread_timeout>:
{
10002e5c:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10002e5e:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10002e60:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10002e62:	f7ff ffdc 	bl	10002e1e <z_sched_wake_thread>
}
10002e66:	bd10      	pop	{r4, pc}

10002e68 <z_reschedule_irqlock>:
{
10002e68:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002e6a:	2800      	cmp	r0, #0
10002e6c:	d105      	bne.n	10002e7a <z_reschedule_irqlock+0x12>
10002e6e:	f3ef 8005 	mrs	r0, IPSR
10002e72:	2800      	cmp	r0, #0
10002e74:	d102      	bne.n	10002e7c <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10002e76:	f7fe f8b9 	bl	10000fec <arch_swap>
}
10002e7a:	bd10      	pop	{r4, pc}
10002e7c:	b662      	cpsie	i
10002e7e:	f3bf 8f6f 	isb	sy
10002e82:	e7fa      	b.n	10002e7a <z_reschedule_irqlock+0x12>

10002e84 <z_reschedule_unlocked>:
{
10002e84:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002e86:	f3ef 8010 	mrs	r0, PRIMASK
10002e8a:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002e8c:	f7ff ffec 	bl	10002e68 <z_reschedule_irqlock>
}
10002e90:	bd10      	pop	{r4, pc}

10002e92 <z_abort_timeout>:
{
10002e92:	b510      	push	{r4, lr}
10002e94:	f3ef 8410 	mrs	r4, PRIMASK
10002e98:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10002e9a:	6803      	ldr	r3, [r0, #0]
10002e9c:	2b00      	cmp	r3, #0
10002e9e:	d008      	beq.n	10002eb2 <z_abort_timeout+0x20>
			remove_timeout(to);
10002ea0:	f7ff fa8e 	bl	100023c0 <remove_timeout>
			ret = 0;
10002ea4:	2000      	movs	r0, #0
	if (key != 0U) {
10002ea6:	2c00      	cmp	r4, #0
10002ea8:	d102      	bne.n	10002eb0 <z_abort_timeout+0x1e>
	__asm__ volatile(
10002eaa:	b662      	cpsie	i
10002eac:	f3bf 8f6f 	isb	sy
}
10002eb0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10002eb2:	2016      	movs	r0, #22
10002eb4:	4240      	negs	r0, r0
10002eb6:	e7f6      	b.n	10002ea6 <z_abort_timeout+0x14>

10002eb8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10002eb8:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10002eba:	f7ff fb79 	bl	100025b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10002ebe:	bd10      	pop	{r4, pc}
