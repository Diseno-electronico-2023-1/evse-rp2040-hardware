
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000eb0 10000ef9 10002441 10000eb5     ... ....A$......
	...
1000012c:	10000d81 00000000 00000000 10000d21     ............!...
1000013c:	10001205                                ....

10000140 <_irq_vector_table>:
10000140:	10000df1 10000df1 10000df1 10000df1     ................
10000150:	10000df1 10000df1 10000df1 10000df1     ................
10000160:	10000df1 10000df1 10000df1 10000df1     ................
10000170:	10000df1 10000df1 10000df1 10000df1     ................
10000180:	10000df1 10000df1 10000df1 10000df1     ................
10000190:	10000df1 10000df1 10000df1 10000df1     ................
100001a0:	10000df1 10000df1                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__aeabi_uldivmod>:
1000029c:	2b00      	cmp	r3, #0
1000029e:	d111      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a0:	2a00      	cmp	r2, #0
100002a2:	d10f      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a4:	2900      	cmp	r1, #0
100002a6:	d100      	bne.n	100002aa <__aeabi_uldivmod+0xe>
100002a8:	2800      	cmp	r0, #0
100002aa:	d002      	beq.n	100002b2 <__aeabi_uldivmod+0x16>
100002ac:	2100      	movs	r1, #0
100002ae:	43c9      	mvns	r1, r1
100002b0:	0008      	movs	r0, r1
100002b2:	b407      	push	{r0, r1, r2}
100002b4:	4802      	ldr	r0, [pc, #8]	; (100002c0 <__aeabi_uldivmod+0x24>)
100002b6:	a102      	add	r1, pc, #8	; (adr r1, 100002c0 <__aeabi_uldivmod+0x24>)
100002b8:	1840      	adds	r0, r0, r1
100002ba:	9002      	str	r0, [sp, #8]
100002bc:	bd03      	pop	{r0, r1, pc}
100002be:	46c0      	nop			; (mov r8, r8)
100002c0:	ffffff9d 	.word	0xffffff9d
100002c4:	b403      	push	{r0, r1}
100002c6:	4668      	mov	r0, sp
100002c8:	b501      	push	{r0, lr}
100002ca:	9802      	ldr	r0, [sp, #8]
100002cc:	f000 f84c 	bl	10000368 <__udivmoddi4>
100002d0:	9b01      	ldr	r3, [sp, #4]
100002d2:	469e      	mov	lr, r3
100002d4:	b002      	add	sp, #8
100002d6:	bc0c      	pop	{r2, r3}
100002d8:	4770      	bx	lr
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_llsr>:
100002dc:	40d0      	lsrs	r0, r2
100002de:	000b      	movs	r3, r1
100002e0:	40d1      	lsrs	r1, r2
100002e2:	469c      	mov	ip, r3
100002e4:	3a20      	subs	r2, #32
100002e6:	40d3      	lsrs	r3, r2
100002e8:	4318      	orrs	r0, r3
100002ea:	4252      	negs	r2, r2
100002ec:	4663      	mov	r3, ip
100002ee:	4093      	lsls	r3, r2
100002f0:	4318      	orrs	r0, r3
100002f2:	4770      	bx	lr

100002f4 <__aeabi_llsl>:
100002f4:	4091      	lsls	r1, r2
100002f6:	0003      	movs	r3, r0
100002f8:	4090      	lsls	r0, r2
100002fa:	469c      	mov	ip, r3
100002fc:	3a20      	subs	r2, #32
100002fe:	4093      	lsls	r3, r2
10000300:	4319      	orrs	r1, r3
10000302:	4252      	negs	r2, r2
10000304:	4663      	mov	r3, ip
10000306:	40d3      	lsrs	r3, r2
10000308:	4319      	orrs	r1, r3
1000030a:	4770      	bx	lr

1000030c <__clzdi2>:
1000030c:	b510      	push	{r4, lr}
1000030e:	2900      	cmp	r1, #0
10000310:	d103      	bne.n	1000031a <__clzdi2+0xe>
10000312:	f7ff ffa5 	bl	10000260 <__clzsi2>
10000316:	3020      	adds	r0, #32
10000318:	e002      	b.n	10000320 <__clzdi2+0x14>
1000031a:	0008      	movs	r0, r1
1000031c:	f7ff ffa0 	bl	10000260 <__clzsi2>
10000320:	bd10      	pop	{r4, pc}
10000322:	46c0      	nop			; (mov r8, r8)

10000324 <__aeabi_lmul>:
10000324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000326:	0c04      	lsrs	r4, r0, #16
10000328:	000d      	movs	r5, r1
1000032a:	b291      	uxth	r1, r2
1000032c:	000f      	movs	r7, r1
1000032e:	4361      	muls	r1, r4
10000330:	468c      	mov	ip, r1
10000332:	0006      	movs	r6, r0
10000334:	9301      	str	r3, [sp, #4]
10000336:	b283      	uxth	r3, r0
10000338:	0c10      	lsrs	r0, r2, #16
1000033a:	435f      	muls	r7, r3
1000033c:	4344      	muls	r4, r0
1000033e:	4358      	muls	r0, r3
10000340:	0c3b      	lsrs	r3, r7, #16
10000342:	4460      	add	r0, ip
10000344:	181b      	adds	r3, r3, r0
10000346:	4299      	cmp	r1, r3
10000348:	d902      	bls.n	10000350 <__aeabi_lmul+0x2c>
1000034a:	2180      	movs	r1, #128	; 0x80
1000034c:	0249      	lsls	r1, r1, #9
1000034e:	1864      	adds	r4, r4, r1
10000350:	9901      	ldr	r1, [sp, #4]
10000352:	4355      	muls	r5, r2
10000354:	4371      	muls	r1, r6
10000356:	0c18      	lsrs	r0, r3, #16
10000358:	1904      	adds	r4, r0, r4
1000035a:	041b      	lsls	r3, r3, #16
1000035c:	b2bf      	uxth	r7, r7
1000035e:	1949      	adds	r1, r1, r5
10000360:	19d8      	adds	r0, r3, r7
10000362:	1909      	adds	r1, r1, r4
10000364:	b003      	add	sp, #12
10000366:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000368 <__udivmoddi4>:
10000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000036a:	0006      	movs	r6, r0
1000036c:	000f      	movs	r7, r1
1000036e:	0015      	movs	r5, r2
10000370:	001c      	movs	r4, r3
10000372:	b085      	sub	sp, #20
10000374:	428b      	cmp	r3, r1
10000376:	d863      	bhi.n	10000440 <__udivmoddi4+0xd8>
10000378:	d101      	bne.n	1000037e <__udivmoddi4+0x16>
1000037a:	4282      	cmp	r2, r0
1000037c:	d860      	bhi.n	10000440 <__udivmoddi4+0xd8>
1000037e:	0021      	movs	r1, r4
10000380:	0028      	movs	r0, r5
10000382:	f7ff ffc3 	bl	1000030c <__clzdi2>
10000386:	0039      	movs	r1, r7
10000388:	9000      	str	r0, [sp, #0]
1000038a:	0030      	movs	r0, r6
1000038c:	f7ff ffbe 	bl	1000030c <__clzdi2>
10000390:	9b00      	ldr	r3, [sp, #0]
10000392:	0021      	movs	r1, r4
10000394:	1a1b      	subs	r3, r3, r0
10000396:	001a      	movs	r2, r3
10000398:	0028      	movs	r0, r5
1000039a:	9303      	str	r3, [sp, #12]
1000039c:	f7ff ffaa 	bl	100002f4 <__aeabi_llsl>
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	9101      	str	r1, [sp, #4]
100003a4:	42b9      	cmp	r1, r7
100003a6:	d845      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003a8:	d101      	bne.n	100003ae <__udivmoddi4+0x46>
100003aa:	42b0      	cmp	r0, r6
100003ac:	d842      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003ae:	9b00      	ldr	r3, [sp, #0]
100003b0:	9c01      	ldr	r4, [sp, #4]
100003b2:	2001      	movs	r0, #1
100003b4:	2100      	movs	r1, #0
100003b6:	9a03      	ldr	r2, [sp, #12]
100003b8:	1af6      	subs	r6, r6, r3
100003ba:	41a7      	sbcs	r7, r4
100003bc:	f7ff ff9a 	bl	100002f4 <__aeabi_llsl>
100003c0:	0004      	movs	r4, r0
100003c2:	000d      	movs	r5, r1
100003c4:	9b03      	ldr	r3, [sp, #12]
100003c6:	2b00      	cmp	r3, #0
100003c8:	d02b      	beq.n	10000422 <__udivmoddi4+0xba>
100003ca:	9b01      	ldr	r3, [sp, #4]
100003cc:	9a00      	ldr	r2, [sp, #0]
100003ce:	07db      	lsls	r3, r3, #31
100003d0:	0850      	lsrs	r0, r2, #1
100003d2:	4318      	orrs	r0, r3
100003d4:	9b01      	ldr	r3, [sp, #4]
100003d6:	0859      	lsrs	r1, r3, #1
100003d8:	9b03      	ldr	r3, [sp, #12]
100003da:	469c      	mov	ip, r3
100003dc:	42b9      	cmp	r1, r7
100003de:	d82c      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e0:	d101      	bne.n	100003e6 <__udivmoddi4+0x7e>
100003e2:	42b0      	cmp	r0, r6
100003e4:	d829      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e6:	0032      	movs	r2, r6
100003e8:	003b      	movs	r3, r7
100003ea:	1a12      	subs	r2, r2, r0
100003ec:	418b      	sbcs	r3, r1
100003ee:	2601      	movs	r6, #1
100003f0:	1892      	adds	r2, r2, r2
100003f2:	415b      	adcs	r3, r3
100003f4:	2700      	movs	r7, #0
100003f6:	18b6      	adds	r6, r6, r2
100003f8:	415f      	adcs	r7, r3
100003fa:	2301      	movs	r3, #1
100003fc:	425b      	negs	r3, r3
100003fe:	449c      	add	ip, r3
10000400:	4663      	mov	r3, ip
10000402:	2b00      	cmp	r3, #0
10000404:	d1ea      	bne.n	100003dc <__udivmoddi4+0x74>
10000406:	0030      	movs	r0, r6
10000408:	0039      	movs	r1, r7
1000040a:	9a03      	ldr	r2, [sp, #12]
1000040c:	f7ff ff66 	bl	100002dc <__aeabi_llsr>
10000410:	9a03      	ldr	r2, [sp, #12]
10000412:	19a4      	adds	r4, r4, r6
10000414:	417d      	adcs	r5, r7
10000416:	0006      	movs	r6, r0
10000418:	000f      	movs	r7, r1
1000041a:	f7ff ff6b 	bl	100002f4 <__aeabi_llsl>
1000041e:	1a24      	subs	r4, r4, r0
10000420:	418d      	sbcs	r5, r1
10000422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000424:	2b00      	cmp	r3, #0
10000426:	d001      	beq.n	1000042c <__udivmoddi4+0xc4>
10000428:	601e      	str	r6, [r3, #0]
1000042a:	605f      	str	r7, [r3, #4]
1000042c:	0020      	movs	r0, r4
1000042e:	0029      	movs	r1, r5
10000430:	b005      	add	sp, #20
10000432:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000434:	2400      	movs	r4, #0
10000436:	2500      	movs	r5, #0
10000438:	e7c4      	b.n	100003c4 <__udivmoddi4+0x5c>
1000043a:	19b6      	adds	r6, r6, r6
1000043c:	417f      	adcs	r7, r7
1000043e:	e7dc      	b.n	100003fa <__udivmoddi4+0x92>
10000440:	2400      	movs	r4, #0
10000442:	2500      	movs	r5, #0
10000444:	e7ed      	b.n	10000422 <__udivmoddi4+0xba>
	...

10000448 <main>:

static const struct gpio_dt_spec load_switch =
	GPIO_DT_SPEC_GET_OR(DT_NODELABEL(load_switch), gpios, {0});

void main(void)
{
10000448:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000044a:	4c1b      	ldr	r4, [pc, #108]	; (100004b8 <main+0x70>)
1000044c:	0020      	movs	r0, r4
1000044e:	f002 fae5 	bl	10002a1c <z_device_is_ready>
	int err;

	if (!gpio_is_ready_dt(&load_switch)) {
10000452:	2800      	cmp	r0, #0
10000454:	d103      	bne.n	1000045e <main+0x16>
		printf("The load switch pin GPIO port is not ready.\n");
10000456:	4819      	ldr	r0, [pc, #100]	; (100004bc <main+0x74>)
10000458:	f000 fd92 	bl	10000f80 <printf>

	err = gpio_pin_set_dt(&load_switch, 1);
	if (err != 0) {
		printf("Setting GPIO pin level failed: %d\n", err);
	}
}
1000045c:	bd70      	pop	{r4, r5, r6, pc}
	printf("Initializing pin with inactive level.\n");
1000045e:	4818      	ldr	r0, [pc, #96]	; (100004c0 <main+0x78>)
10000460:	f000 fd8e 	bl	10000f80 <printf>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
10000464:	6926      	ldr	r6, [r4, #16]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000466:	4a17      	ldr	r2, [pc, #92]	; (100004c4 <main+0x7c>)
10000468:	6833      	ldr	r3, [r6, #0]
	const struct gpio_driver_api *api =
1000046a:	68a5      	ldr	r5, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000046c:	4013      	ands	r3, r2
	}

	return api->pin_configure(port, pin, flags);
1000046e:	22c0      	movs	r2, #192	; 0xc0
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000470:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
10000472:	2119      	movs	r1, #25
10000474:	0020      	movs	r0, r4
10000476:	682b      	ldr	r3, [r5, #0]
10000478:	02d2      	lsls	r2, r2, #11
1000047a:	4798      	blx	r3
1000047c:	1e01      	subs	r1, r0, #0
		printf("Configuring GPIO pin failed: %d\n", err);
1000047e:	4812      	ldr	r0, [pc, #72]	; (100004c8 <main+0x80>)
	if (err != 0) {
10000480:	d114      	bne.n	100004ac <main+0x64>
	printf("Waiting one second.\n");
10000482:	4812      	ldr	r0, [pc, #72]	; (100004cc <main+0x84>)
10000484:	f000 fd7c 	bl	10000f80 <printf>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10000488:	2100      	movs	r1, #0
1000048a:	4811      	ldr	r0, [pc, #68]	; (100004d0 <main+0x88>)
1000048c:	f001 fd74 	bl	10001f78 <z_impl_k_sleep>
	printf("Setting pin to active level.\n");
10000490:	4810      	ldr	r0, [pc, #64]	; (100004d4 <main+0x8c>)
10000492:	f000 fd75 	bl	10000f80 <printf>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10000496:	2180      	movs	r1, #128	; 0x80
10000498:	6833      	ldr	r3, [r6, #0]
1000049a:	0489      	lsls	r1, r1, #18
1000049c:	420b      	tst	r3, r1
1000049e:	d108      	bne.n	100004b2 <main+0x6a>
	return api->port_set_bits_raw(port, pins);
100004a0:	68eb      	ldr	r3, [r5, #12]
	return api->port_clear_bits_raw(port, pins);
100004a2:	0020      	movs	r0, r4
100004a4:	4798      	blx	r3
100004a6:	1e01      	subs	r1, r0, #0
	if (err != 0) {
100004a8:	d0d8      	beq.n	1000045c <main+0x14>
		printf("Setting GPIO pin level failed: %d\n", err);
100004aa:	480b      	ldr	r0, [pc, #44]	; (100004d8 <main+0x90>)
100004ac:	f000 fd68 	bl	10000f80 <printf>
100004b0:	e7d4      	b.n	1000045c <main+0x14>
100004b2:	692b      	ldr	r3, [r5, #16]
100004b4:	e7f5      	b.n	100004a2 <main+0x5a>
100004b6:	46c0      	nop			; (mov r8, r8)
100004b8:	10002bd8 	.word	0x10002bd8
100004bc:	10002dd0 	.word	0x10002dd0
100004c0:	10002dfd 	.word	0x10002dfd
100004c4:	fdffffff 	.word	0xfdffffff
100004c8:	10002e24 	.word	0x10002e24
100004cc:	10002e45 	.word	0x10002e45
100004d0:	00002710 	.word	0x00002710
100004d4:	10002e5a 	.word	0x10002e5a
100004d8:	10002e78 	.word	0x10002e78

100004dc <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
100004dc:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
100004de:	4b02      	ldr	r3, [pc, #8]	; (100004e8 <char_out+0xc>)
100004e0:	681b      	ldr	r3, [r3, #0]
100004e2:	4798      	blx	r3
}
100004e4:	bd10      	pop	{r4, pc}
100004e6:	46c0      	nop			; (mov r8, r8)
100004e8:	20000000 	.word	0x20000000

100004ec <__printk_hook_install>:
	_char_out = fn;
100004ec:	4b01      	ldr	r3, [pc, #4]	; (100004f4 <__printk_hook_install+0x8>)
100004ee:	6018      	str	r0, [r3, #0]
}
100004f0:	4770      	bx	lr
100004f2:	46c0      	nop			; (mov r8, r8)
100004f4:	20000000 	.word	0x20000000

100004f8 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100004f8:	b513      	push	{r0, r1, r4, lr}
100004fa:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100004fc:	2100      	movs	r1, #0
100004fe:	4c03      	ldr	r4, [pc, #12]	; (1000050c <vprintk+0x14>)
10000500:	0002      	movs	r2, r0
10000502:	9100      	str	r1, [sp, #0]
10000504:	0020      	movs	r0, r4
10000506:	f000 f803 	bl	10000510 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
1000050a:	bd13      	pop	{r0, r1, r4, pc}
1000050c:	100004dd 	.word	0x100004dd

10000510 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10000510:	b5f0      	push	{r4, r5, r6, r7, lr}
10000512:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000514:	2700      	movs	r7, #0
{
10000516:	b099      	sub	sp, #100	; 0x64
10000518:	9004      	str	r0, [sp, #16]
1000051a:	9105      	str	r1, [sp, #20]
1000051c:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
1000051e:	9b08      	ldr	r3, [sp, #32]
10000520:	7818      	ldrb	r0, [r3, #0]
10000522:	2800      	cmp	r0, #0
10000524:	d101      	bne.n	1000052a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000526:	0038      	movs	r0, r7
10000528:	e327      	b.n	10000b7a <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
1000052a:	9b08      	ldr	r3, [sp, #32]
1000052c:	3301      	adds	r3, #1
1000052e:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000530:	2825      	cmp	r0, #37	; 0x25
10000532:	d007      	beq.n	10000544 <z_cbvprintf_impl+0x34>
			OUTC('%');
10000534:	9905      	ldr	r1, [sp, #20]
10000536:	9b04      	ldr	r3, [sp, #16]
10000538:	4798      	blx	r3
1000053a:	2800      	cmp	r0, #0
1000053c:	da00      	bge.n	10000540 <z_cbvprintf_impl+0x30>
1000053e:	e31c      	b.n	10000b7a <z_cbvprintf_impl+0x66a>
10000540:	3701      	adds	r7, #1
		if (bps == NULL) {
10000542:	e1e3      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		} state = {
10000544:	ad12      	add	r5, sp, #72	; 0x48
10000546:	2218      	movs	r2, #24
10000548:	2100      	movs	r1, #0
1000054a:	0028      	movs	r0, r5
1000054c:	f001 ff9a 	bl	10002484 <memset>
	if (*sp == '%') {
10000550:	9b08      	ldr	r3, [sp, #32]
10000552:	785b      	ldrb	r3, [r3, #1]
10000554:	2b25      	cmp	r3, #37	; 0x25
10000556:	d114      	bne.n	10000582 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000558:	9a08      	ldr	r2, [sp, #32]
1000055a:	72eb      	strb	r3, [r5, #11]
1000055c:	3202      	adds	r2, #2
1000055e:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000560:	ab12      	add	r3, sp, #72	; 0x48
10000562:	7a5a      	ldrb	r2, [r3, #9]
10000564:	07d1      	lsls	r1, r2, #31
10000566:	d400      	bmi.n	1000056a <z_cbvprintf_impl+0x5a>
10000568:	e17f      	b.n	1000086a <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
1000056a:	cc02      	ldmia	r4!, {r1}
1000056c:	9103      	str	r1, [sp, #12]
			if (width < 0) {
1000056e:	2900      	cmp	r1, #0
10000570:	db00      	blt.n	10000574 <z_cbvprintf_impl+0x64>
10000572:	e17f      	b.n	10000874 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000574:	2104      	movs	r1, #4
10000576:	7a18      	ldrb	r0, [r3, #8]
10000578:	4301      	orrs	r1, r0
1000057a:	7219      	strb	r1, [r3, #8]
				width = -width;
1000057c:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000057e:	425b      	negs	r3, r3
10000580:	e177      	b.n	10000872 <z_cbvprintf_impl+0x362>
10000582:	2200      	movs	r2, #0
		switch (*sp) {
10000584:	2601      	movs	r6, #1
10000586:	0015      	movs	r5, r2
10000588:	0010      	movs	r0, r2
1000058a:	4694      	mov	ip, r2
1000058c:	9203      	str	r2, [sp, #12]
1000058e:	9b07      	ldr	r3, [sp, #28]
10000590:	781b      	ldrb	r3, [r3, #0]
10000592:	2b2b      	cmp	r3, #43	; 0x2b
10000594:	d06f      	beq.n	10000676 <z_cbvprintf_impl+0x166>
10000596:	d868      	bhi.n	1000066a <z_cbvprintf_impl+0x15a>
10000598:	2b20      	cmp	r3, #32
1000059a:	d071      	beq.n	10000680 <z_cbvprintf_impl+0x170>
1000059c:	2b23      	cmp	r3, #35	; 0x23
1000059e:	d071      	beq.n	10000684 <z_cbvprintf_impl+0x174>
100005a0:	2a00      	cmp	r2, #0
100005a2:	d005      	beq.n	100005b0 <z_cbvprintf_impl+0xa0>
100005a4:	ae12      	add	r6, sp, #72	; 0x48
100005a6:	7a32      	ldrb	r2, [r6, #8]
100005a8:	0011      	movs	r1, r2
100005aa:	2240      	movs	r2, #64	; 0x40
100005ac:	430a      	orrs	r2, r1
100005ae:	7232      	strb	r2, [r6, #8]
100005b0:	2d00      	cmp	r5, #0
100005b2:	d004      	beq.n	100005be <z_cbvprintf_impl+0xae>
100005b4:	2220      	movs	r2, #32
100005b6:	ad12      	add	r5, sp, #72	; 0x48
100005b8:	7a2e      	ldrb	r6, [r5, #8]
100005ba:	4332      	orrs	r2, r6
100005bc:	722a      	strb	r2, [r5, #8]
100005be:	2800      	cmp	r0, #0
100005c0:	d004      	beq.n	100005cc <z_cbvprintf_impl+0xbc>
100005c2:	2210      	movs	r2, #16
100005c4:	a812      	add	r0, sp, #72	; 0x48
100005c6:	7a05      	ldrb	r5, [r0, #8]
100005c8:	432a      	orrs	r2, r5
100005ca:	7202      	strb	r2, [r0, #8]
100005cc:	9a03      	ldr	r2, [sp, #12]
100005ce:	2a00      	cmp	r2, #0
100005d0:	d004      	beq.n	100005dc <z_cbvprintf_impl+0xcc>
100005d2:	2208      	movs	r2, #8
100005d4:	a912      	add	r1, sp, #72	; 0x48
100005d6:	7a08      	ldrb	r0, [r1, #8]
100005d8:	4302      	orrs	r2, r0
100005da:	720a      	strb	r2, [r1, #8]
100005dc:	4662      	mov	r2, ip
100005de:	2a00      	cmp	r2, #0
100005e0:	d004      	beq.n	100005ec <z_cbvprintf_impl+0xdc>
100005e2:	2204      	movs	r2, #4
100005e4:	a912      	add	r1, sp, #72	; 0x48
100005e6:	7a08      	ldrb	r0, [r1, #8]
100005e8:	4302      	orrs	r2, r0
100005ea:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100005ec:	2144      	movs	r1, #68	; 0x44
100005ee:	a812      	add	r0, sp, #72	; 0x48
100005f0:	7a02      	ldrb	r2, [r0, #8]
100005f2:	4011      	ands	r1, r2
100005f4:	2944      	cmp	r1, #68	; 0x44
100005f6:	d102      	bne.n	100005fe <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100005f8:	2140      	movs	r1, #64	; 0x40
100005fa:	438a      	bics	r2, r1
100005fc:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100005fe:	2280      	movs	r2, #128	; 0x80
10000600:	7a01      	ldrb	r1, [r0, #8]
10000602:	4252      	negs	r2, r2
10000604:	430a      	orrs	r2, r1
10000606:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000608:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
1000060a:	250a      	movs	r5, #10
1000060c:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
1000060e:	2b2a      	cmp	r3, #42	; 0x2a
10000610:	d140      	bne.n	10000694 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10000612:	7a41      	ldrb	r1, [r0, #9]
10000614:	3b29      	subs	r3, #41	; 0x29
10000616:	430b      	orrs	r3, r1
		return ++sp;
10000618:	3201      	adds	r2, #1
		conv->width_star = true;
1000061a:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
1000061c:	7815      	ldrb	r5, [r2, #0]
1000061e:	2602      	movs	r6, #2
10000620:	0029      	movs	r1, r5
10000622:	392e      	subs	r1, #46	; 0x2e
10000624:	424b      	negs	r3, r1
10000626:	4159      	adcs	r1, r3
10000628:	a812      	add	r0, sp, #72	; 0x48
1000062a:	7a43      	ldrb	r3, [r0, #9]
1000062c:	0049      	lsls	r1, r1, #1
1000062e:	43b3      	bics	r3, r6
10000630:	430b      	orrs	r3, r1
10000632:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10000634:	2d2e      	cmp	r5, #46	; 0x2e
10000636:	d145      	bne.n	100006c4 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10000638:	7853      	ldrb	r3, [r2, #1]
1000063a:	2b2a      	cmp	r3, #42	; 0x2a
1000063c:	d03d      	beq.n	100006ba <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
1000063e:	2300      	movs	r3, #0
	++sp;
10000640:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000642:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000644:	7811      	ldrb	r1, [r2, #0]
10000646:	1c55      	adds	r5, r2, #1
10000648:	0008      	movs	r0, r1
1000064a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000064c:	2809      	cmp	r0, #9
1000064e:	d963      	bls.n	10000718 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10000650:	a912      	add	r1, sp, #72	; 0x48
10000652:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000654:	7a0d      	ldrb	r5, [r1, #8]
10000656:	07a8      	lsls	r0, r5, #30
10000658:	4318      	orrs	r0, r3
1000065a:	2302      	movs	r3, #2
1000065c:	439d      	bics	r5, r3
1000065e:	002b      	movs	r3, r5
10000660:	0fc0      	lsrs	r0, r0, #31
10000662:	0040      	lsls	r0, r0, #1
10000664:	4303      	orrs	r3, r0
10000666:	720b      	strb	r3, [r1, #8]
	return sp;
10000668:	e02c      	b.n	100006c4 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
1000066a:	2b2d      	cmp	r3, #45	; 0x2d
1000066c:	d00c      	beq.n	10000688 <z_cbvprintf_impl+0x178>
1000066e:	2b30      	cmp	r3, #48	; 0x30
10000670:	d196      	bne.n	100005a0 <z_cbvprintf_impl+0x90>
10000672:	0032      	movs	r2, r6
10000674:	e000      	b.n	10000678 <z_cbvprintf_impl+0x168>
10000676:	9603      	str	r6, [sp, #12]
			++sp;
10000678:	9b07      	ldr	r3, [sp, #28]
1000067a:	3301      	adds	r3, #1
1000067c:	9307      	str	r3, [sp, #28]
	} while (loop);
1000067e:	e786      	b.n	1000058e <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10000680:	0030      	movs	r0, r6
10000682:	e7f9      	b.n	10000678 <z_cbvprintf_impl+0x168>
10000684:	0035      	movs	r5, r6
10000686:	e7f7      	b.n	10000678 <z_cbvprintf_impl+0x168>
10000688:	46b4      	mov	ip, r6
1000068a:	e7f5      	b.n	10000678 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
1000068c:	0032      	movs	r2, r6
1000068e:	4369      	muls	r1, r5
10000690:	3930      	subs	r1, #48	; 0x30
10000692:	1859      	adds	r1, r3, r1
10000694:	7813      	ldrb	r3, [r2, #0]
10000696:	1c56      	adds	r6, r2, #1
10000698:	0018      	movs	r0, r3
1000069a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000069c:	2809      	cmp	r0, #9
1000069e:	d9f5      	bls.n	1000068c <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
100006a0:	9b07      	ldr	r3, [sp, #28]
100006a2:	4293      	cmp	r3, r2
100006a4:	d0ba      	beq.n	1000061c <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
100006a6:	2502      	movs	r5, #2
		conv->width_value = width;
100006a8:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
100006aa:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
100006ac:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
100006ae:	0fc9      	lsrs	r1, r1, #31
100006b0:	0049      	lsls	r1, r1, #1
100006b2:	43a8      	bics	r0, r5
100006b4:	4301      	orrs	r1, r0
100006b6:	7219      	strb	r1, [r3, #8]
100006b8:	e7b0      	b.n	1000061c <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
100006ba:	2304      	movs	r3, #4
100006bc:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
100006be:	3202      	adds	r2, #2
		conv->prec_star = true;
100006c0:	430b      	orrs	r3, r1
100006c2:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
100006c4:	7811      	ldrb	r1, [r2, #0]
100006c6:	ab12      	add	r3, sp, #72	; 0x48
100006c8:	296c      	cmp	r1, #108	; 0x6c
100006ca:	d045      	beq.n	10000758 <z_cbvprintf_impl+0x248>
100006cc:	d829      	bhi.n	10000722 <z_cbvprintf_impl+0x212>
100006ce:	2968      	cmp	r1, #104	; 0x68
100006d0:	d030      	beq.n	10000734 <z_cbvprintf_impl+0x224>
100006d2:	296a      	cmp	r1, #106	; 0x6a
100006d4:	d04c      	beq.n	10000770 <z_cbvprintf_impl+0x260>
100006d6:	294c      	cmp	r1, #76	; 0x4c
100006d8:	d054      	beq.n	10000784 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
100006da:	7811      	ldrb	r1, [r2, #0]
100006dc:	1c53      	adds	r3, r2, #1
100006de:	aa12      	add	r2, sp, #72	; 0x48
100006e0:	9307      	str	r3, [sp, #28]
100006e2:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100006e4:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
100006e6:	2978      	cmp	r1, #120	; 0x78
100006e8:	d900      	bls.n	100006ec <z_cbvprintf_impl+0x1dc>
100006ea:	e0b9      	b.n	10000860 <z_cbvprintf_impl+0x350>
100006ec:	296d      	cmp	r1, #109	; 0x6d
100006ee:	d850      	bhi.n	10000792 <z_cbvprintf_impl+0x282>
100006f0:	2969      	cmp	r1, #105	; 0x69
100006f2:	d900      	bls.n	100006f6 <z_cbvprintf_impl+0x1e6>
100006f4:	e0b4      	b.n	10000860 <z_cbvprintf_impl+0x350>
100006f6:	2957      	cmp	r1, #87	; 0x57
100006f8:	d866      	bhi.n	100007c8 <z_cbvprintf_impl+0x2b8>
100006fa:	2941      	cmp	r1, #65	; 0x41
100006fc:	d003      	beq.n	10000706 <z_cbvprintf_impl+0x1f6>
100006fe:	3945      	subs	r1, #69	; 0x45
10000700:	2902      	cmp	r1, #2
10000702:	d900      	bls.n	10000706 <z_cbvprintf_impl+0x1f6>
10000704:	e0ac      	b.n	10000860 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
10000706:	2307      	movs	r3, #7
10000708:	a912      	add	r1, sp, #72	; 0x48
1000070a:	7a8a      	ldrb	r2, [r1, #10]
1000070c:	439a      	bics	r2, r3
1000070e:	3b03      	subs	r3, #3
10000710:	4313      	orrs	r3, r2
10000712:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10000714:	2301      	movs	r3, #1
			break;
10000716:	e073      	b.n	10000800 <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
10000718:	4373      	muls	r3, r6
1000071a:	3b30      	subs	r3, #48	; 0x30
1000071c:	002a      	movs	r2, r5
1000071e:	185b      	adds	r3, r3, r1
10000720:	e790      	b.n	10000644 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10000722:	2974      	cmp	r1, #116	; 0x74
10000724:	d029      	beq.n	1000077a <z_cbvprintf_impl+0x26a>
10000726:	297a      	cmp	r1, #122	; 0x7a
10000728:	d1d7      	bne.n	100006da <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
1000072a:	2178      	movs	r1, #120	; 0x78
1000072c:	7a58      	ldrb	r0, [r3, #9]
1000072e:	4388      	bics	r0, r1
10000730:	3948      	subs	r1, #72	; 0x48
10000732:	e00d      	b.n	10000750 <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10000734:	7850      	ldrb	r0, [r2, #1]
10000736:	2178      	movs	r1, #120	; 0x78
10000738:	2868      	cmp	r0, #104	; 0x68
1000073a:	d106      	bne.n	1000074a <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
1000073c:	7a58      	ldrb	r0, [r3, #9]
1000073e:	4388      	bics	r0, r1
10000740:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10000742:	4301      	orrs	r1, r0
10000744:	7259      	strb	r1, [r3, #9]
			++sp;
10000746:	3202      	adds	r2, #2
10000748:	e7c7      	b.n	100006da <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
1000074a:	7a58      	ldrb	r0, [r3, #9]
1000074c:	4388      	bics	r0, r1
1000074e:	2110      	movs	r1, #16
10000750:	4301      	orrs	r1, r0
10000752:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000754:	3201      	adds	r2, #1
10000756:	e7c0      	b.n	100006da <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000758:	7850      	ldrb	r0, [r2, #1]
1000075a:	2178      	movs	r1, #120	; 0x78
1000075c:	286c      	cmp	r0, #108	; 0x6c
1000075e:	d103      	bne.n	10000768 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10000760:	7a58      	ldrb	r0, [r3, #9]
10000762:	4388      	bics	r0, r1
10000764:	3958      	subs	r1, #88	; 0x58
10000766:	e7ec      	b.n	10000742 <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000768:	7a58      	ldrb	r0, [r3, #9]
1000076a:	4388      	bics	r0, r1
1000076c:	2118      	movs	r1, #24
1000076e:	e7ef      	b.n	10000750 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10000770:	2178      	movs	r1, #120	; 0x78
10000772:	7a58      	ldrb	r0, [r3, #9]
10000774:	4388      	bics	r0, r1
10000776:	3950      	subs	r1, #80	; 0x50
10000778:	e7ea      	b.n	10000750 <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
1000077a:	2178      	movs	r1, #120	; 0x78
1000077c:	7a58      	ldrb	r0, [r3, #9]
1000077e:	4388      	bics	r0, r1
10000780:	3940      	subs	r1, #64	; 0x40
10000782:	e7e5      	b.n	10000750 <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000784:	8918      	ldrh	r0, [r3, #8]
10000786:	49a5      	ldr	r1, [pc, #660]	; (10000a1c <z_cbvprintf_impl+0x50c>)
10000788:	4008      	ands	r0, r1
1000078a:	49a5      	ldr	r1, [pc, #660]	; (10000a20 <z_cbvprintf_impl+0x510>)
1000078c:	4301      	orrs	r1, r0
1000078e:	8119      	strh	r1, [r3, #8]
		break;
10000790:	e7e0      	b.n	10000754 <z_cbvprintf_impl+0x244>
10000792:	2001      	movs	r0, #1
10000794:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000796:	396e      	subs	r1, #110	; 0x6e
10000798:	b2c9      	uxtb	r1, r1
1000079a:	408d      	lsls	r5, r1
1000079c:	0029      	movs	r1, r5
1000079e:	4da1      	ldr	r5, [pc, #644]	; (10000a24 <z_cbvprintf_impl+0x514>)
100007a0:	4229      	tst	r1, r5
100007a2:	d138      	bne.n	10000816 <z_cbvprintf_impl+0x306>
100007a4:	2524      	movs	r5, #36	; 0x24
100007a6:	4229      	tst	r1, r5
100007a8:	d151      	bne.n	1000084e <z_cbvprintf_impl+0x33e>
100007aa:	4201      	tst	r1, r0
100007ac:	d058      	beq.n	10000860 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
100007ae:	2107      	movs	r1, #7
100007b0:	7a90      	ldrb	r0, [r2, #10]
100007b2:	4388      	bics	r0, r1
100007b4:	3904      	subs	r1, #4
100007b6:	4301      	orrs	r1, r0
100007b8:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100007ba:	2278      	movs	r2, #120	; 0x78
100007bc:	4013      	ands	r3, r2
100007be:	3b40      	subs	r3, #64	; 0x40
100007c0:	425a      	negs	r2, r3
100007c2:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
100007c4:	b2db      	uxtb	r3, r3
100007c6:	e01b      	b.n	10000800 <z_cbvprintf_impl+0x2f0>
100007c8:	2001      	movs	r0, #1
	switch (conv->specifier) {
100007ca:	000d      	movs	r5, r1
100007cc:	0006      	movs	r6, r0
100007ce:	3d58      	subs	r5, #88	; 0x58
100007d0:	b2ed      	uxtb	r5, r5
100007d2:	40ae      	lsls	r6, r5
100007d4:	0035      	movs	r5, r6
100007d6:	26e2      	movs	r6, #226	; 0xe2
100007d8:	0236      	lsls	r6, r6, #8
100007da:	4235      	tst	r5, r6
100007dc:	d193      	bne.n	10000706 <z_cbvprintf_impl+0x1f6>
100007de:	4e92      	ldr	r6, [pc, #584]	; (10000a28 <z_cbvprintf_impl+0x518>)
100007e0:	4235      	tst	r5, r6
100007e2:	d122      	bne.n	1000082a <z_cbvprintf_impl+0x31a>
100007e4:	2184      	movs	r1, #132	; 0x84
100007e6:	0289      	lsls	r1, r1, #10
100007e8:	420d      	tst	r5, r1
100007ea:	d039      	beq.n	10000860 <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
100007ec:	2507      	movs	r5, #7
100007ee:	7a91      	ldrb	r1, [r2, #10]
100007f0:	43a9      	bics	r1, r5
100007f2:	4301      	orrs	r1, r0
100007f4:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100007f6:	2178      	movs	r1, #120	; 0x78
100007f8:	400b      	ands	r3, r1
100007fa:	2b40      	cmp	r3, #64	; 0x40
100007fc:	d011      	beq.n	10000822 <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100007fe:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10000800:	aa12      	add	r2, sp, #72	; 0x48
10000802:	7a11      	ldrb	r1, [r2, #8]
10000804:	0788      	lsls	r0, r1, #30
10000806:	0fc0      	lsrs	r0, r0, #31
10000808:	4303      	orrs	r3, r0
1000080a:	2002      	movs	r0, #2
1000080c:	005b      	lsls	r3, r3, #1
1000080e:	4381      	bics	r1, r0
10000810:	4319      	orrs	r1, r3
10000812:	7211      	strb	r1, [r2, #8]
	return sp;
10000814:	e6a4      	b.n	10000560 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
10000816:	2107      	movs	r1, #7
10000818:	7a95      	ldrb	r5, [r2, #10]
1000081a:	438d      	bics	r5, r1
1000081c:	3905      	subs	r1, #5
1000081e:	4329      	orrs	r1, r5
10000820:	e7e8      	b.n	100007f4 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10000822:	7a13      	ldrb	r3, [r2, #8]
10000824:	4303      	orrs	r3, r0
		conv->invalid = true;
10000826:	7213      	strb	r3, [r2, #8]
		break;
10000828:	e7e9      	b.n	100007fe <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
1000082a:	2507      	movs	r5, #7
1000082c:	7a96      	ldrb	r6, [r2, #10]
1000082e:	43ae      	bics	r6, r5
10000830:	3d05      	subs	r5, #5
10000832:	4335      	orrs	r5, r6
10000834:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000836:	2578      	movs	r5, #120	; 0x78
10000838:	402b      	ands	r3, r5
1000083a:	2b40      	cmp	r3, #64	; 0x40
1000083c:	d102      	bne.n	10000844 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
1000083e:	7a15      	ldrb	r5, [r2, #8]
10000840:	4328      	orrs	r0, r5
10000842:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10000844:	2963      	cmp	r1, #99	; 0x63
10000846:	d1da      	bne.n	100007fe <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10000848:	1e5a      	subs	r2, r3, #1
1000084a:	4193      	sbcs	r3, r2
1000084c:	e7ba      	b.n	100007c4 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
1000084e:	2107      	movs	r1, #7
10000850:	7a90      	ldrb	r0, [r2, #10]
10000852:	4388      	bics	r0, r1
10000854:	3904      	subs	r1, #4
10000856:	4301      	orrs	r1, r0
10000858:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000085a:	2278      	movs	r2, #120	; 0x78
1000085c:	4013      	ands	r3, r2
1000085e:	e7f3      	b.n	10000848 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10000860:	2301      	movs	r3, #1
10000862:	aa12      	add	r2, sp, #72	; 0x48
10000864:	7a11      	ldrb	r1, [r2, #8]
10000866:	430b      	orrs	r3, r1
10000868:	e7dd      	b.n	10000826 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
1000086a:	7a19      	ldrb	r1, [r3, #8]
1000086c:	297f      	cmp	r1, #127	; 0x7f
1000086e:	d90f      	bls.n	10000890 <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10000870:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10000872:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000874:	ab12      	add	r3, sp, #72	; 0x48
10000876:	0751      	lsls	r1, r2, #29
10000878:	d50c      	bpl.n	10000894 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
1000087a:	cc04      	ldmia	r4!, {r2}
1000087c:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
1000087e:	2a00      	cmp	r2, #0
10000880:	da0c      	bge.n	1000089c <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10000882:	2102      	movs	r1, #2
10000884:	7a5a      	ldrb	r2, [r3, #9]
10000886:	438a      	bics	r2, r1
10000888:	725a      	strb	r2, [r3, #9]
		int precision = -1;
1000088a:	2301      	movs	r3, #1
1000088c:	425b      	negs	r3, r3
1000088e:	e004      	b.n	1000089a <z_cbvprintf_impl+0x38a>
		int width = -1;
10000890:	2301      	movs	r3, #1
10000892:	e674      	b.n	1000057e <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10000894:	0792      	lsls	r2, r2, #30
10000896:	d5f8      	bpl.n	1000088a <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10000898:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
1000089a:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
1000089c:	2500      	movs	r5, #0
1000089e:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
100008a0:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
100008a2:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100008a4:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100008a6:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
100008a8:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100008aa:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
100008ac:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
100008ae:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
100008b0:	2b01      	cmp	r3, #1
100008b2:	d130      	bne.n	10000916 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
100008b4:	1ed0      	subs	r0, r2, #3
100008b6:	2804      	cmp	r0, #4
100008b8:	d804      	bhi.n	100008c4 <z_cbvprintf_impl+0x3b4>
100008ba:	f7ff fc75 	bl	100001a8 <__gnu_thumb1_case_uqi>
100008be:	450e      	.short	0x450e
100008c0:	0e45      	.short	0x0e45
100008c2:	0e          	.byte	0x0e
100008c3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
100008c4:	6823      	ldr	r3, [r4, #0]
100008c6:	17d8      	asrs	r0, r3, #31
100008c8:	9312      	str	r3, [sp, #72]	; 0x48
100008ca:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
100008cc:	2a01      	cmp	r2, #1
100008ce:	d109      	bne.n	100008e4 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
100008d0:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
100008d2:	9312      	str	r3, [sp, #72]	; 0x48
100008d4:	17db      	asrs	r3, r3, #31
100008d6:	604b      	str	r3, [r1, #4]
100008d8:	e006      	b.n	100008e8 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100008da:	cc08      	ldmia	r4!, {r3}
100008dc:	9312      	str	r3, [sp, #72]	; 0x48
100008de:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100008e0:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100008e2:	e002      	b.n	100008ea <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
100008e4:	2a02      	cmp	r2, #2
100008e6:	d014      	beq.n	10000912 <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
100008e8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100008ea:	a912      	add	r1, sp, #72	; 0x48
100008ec:	7a0b      	ldrb	r3, [r1, #8]
100008ee:	2003      	movs	r0, #3
100008f0:	001d      	movs	r5, r3
100008f2:	4005      	ands	r5, r0
100008f4:	4203      	tst	r3, r0
100008f6:	d045      	beq.n	10000984 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100008f8:	9b07      	ldr	r3, [sp, #28]
100008fa:	9a08      	ldr	r2, [sp, #32]
100008fc:	9905      	ldr	r1, [sp, #20]
100008fe:	9804      	ldr	r0, [sp, #16]
10000900:	f001 fd77 	bl	100023f2 <outs>
10000904:	2800      	cmp	r0, #0
10000906:	da00      	bge.n	1000090a <z_cbvprintf_impl+0x3fa>
10000908:	e137      	b.n	10000b7a <z_cbvprintf_impl+0x66a>
1000090a:	183f      	adds	r7, r7, r0
			continue;
1000090c:	9b07      	ldr	r3, [sp, #28]
1000090e:	9308      	str	r3, [sp, #32]
10000910:	e605      	b.n	1000051e <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10000912:	b21b      	sxth	r3, r3
10000914:	e7dd      	b.n	100008d2 <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000916:	2b02      	cmp	r3, #2
10000918:	d125      	bne.n	10000966 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
1000091a:	1ed0      	subs	r0, r2, #3
1000091c:	2804      	cmp	r0, #4
1000091e:	d804      	bhi.n	1000092a <z_cbvprintf_impl+0x41a>
10000920:	f7ff fc42 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000924:	1912120d 	.word	0x1912120d
10000928:	19          	.byte	0x19
10000929:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000092a:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
1000092c:	2a01      	cmp	r2, #1
1000092e:	d016      	beq.n	1000095e <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10000930:	9312      	str	r3, [sp, #72]	; 0x48
10000932:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10000934:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
10000936:	2a02      	cmp	r2, #2
10000938:	d1d7      	bne.n	100008ea <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
1000093a:	9312      	str	r3, [sp, #72]	; 0x48
1000093c:	e7d5      	b.n	100008ea <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
1000093e:	cc08      	ldmia	r4!, {r3}
10000940:	9312      	str	r3, [sp, #72]	; 0x48
10000942:	2300      	movs	r3, #0
10000944:	9313      	str	r3, [sp, #76]	; 0x4c
10000946:	e7d0      	b.n	100008ea <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10000948:	2307      	movs	r3, #7
1000094a:	3407      	adds	r4, #7
1000094c:	439c      	bics	r4, r3
				value->uint =
1000094e:	cc03      	ldmia	r4!, {r0, r1}
10000950:	9012      	str	r0, [sp, #72]	; 0x48
10000952:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10000954:	e7c9      	b.n	100008ea <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10000956:	cc08      	ldmia	r4!, {r3}
10000958:	9312      	str	r3, [sp, #72]	; 0x48
1000095a:	2300      	movs	r3, #0
1000095c:	e7c0      	b.n	100008e0 <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
1000095e:	b2db      	uxtb	r3, r3
10000960:	9312      	str	r3, [sp, #72]	; 0x48
10000962:	604d      	str	r5, [r1, #4]
10000964:	e7c1      	b.n	100008ea <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10000966:	2b04      	cmp	r3, #4
10000968:	d108      	bne.n	1000097c <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
1000096a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
1000096c:	3303      	adds	r3, #3
1000096e:	439c      	bics	r4, r3
10000970:	6820      	ldr	r0, [r4, #0]
10000972:	6861      	ldr	r1, [r4, #4]
10000974:	3408      	adds	r4, #8
10000976:	9012      	str	r0, [sp, #72]	; 0x48
10000978:	9113      	str	r1, [sp, #76]	; 0x4c
1000097a:	e7b6      	b.n	100008ea <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
1000097c:	2b03      	cmp	r3, #3
1000097e:	d1b4      	bne.n	100008ea <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000980:	cc08      	ldmia	r4!, {r3}
10000982:	e7da      	b.n	1000093a <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10000984:	7ac8      	ldrb	r0, [r1, #11]
10000986:	2878      	cmp	r0, #120	; 0x78
10000988:	d8c0      	bhi.n	1000090c <z_cbvprintf_impl+0x3fc>
1000098a:	2862      	cmp	r0, #98	; 0x62
1000098c:	d82b      	bhi.n	100009e6 <z_cbvprintf_impl+0x4d6>
1000098e:	2825      	cmp	r0, #37	; 0x25
10000990:	d100      	bne.n	10000994 <z_cbvprintf_impl+0x484>
10000992:	e5cf      	b.n	10000534 <z_cbvprintf_impl+0x24>
10000994:	2858      	cmp	r0, #88	; 0x58
10000996:	d1b9      	bne.n	1000090c <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000998:	9812      	ldr	r0, [sp, #72]	; 0x48
1000099a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000099c:	231e      	movs	r3, #30
1000099e:	aa0a      	add	r2, sp, #40	; 0x28
100009a0:	189b      	adds	r3, r3, r2
100009a2:	9300      	str	r3, [sp, #0]
100009a4:	aa14      	add	r2, sp, #80	; 0x50
100009a6:	ab0c      	add	r3, sp, #48	; 0x30
100009a8:	f001 fcd6 	bl	10002358 <encode_uint>
			if (precision >= 0) {
100009ac:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
100009ae:	0006      	movs	r6, r0
			if (precision >= 0) {
100009b0:	2b00      	cmp	r3, #0
100009b2:	db0d      	blt.n	100009d0 <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
100009b4:	231e      	movs	r3, #30
				conv->flag_zero = false;
100009b6:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
100009b8:	aa0a      	add	r2, sp, #40	; 0x28
100009ba:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
100009bc:	aa12      	add	r2, sp, #72	; 0x48
100009be:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
100009c0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
100009c2:	4381      	bics	r1, r0
100009c4:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
100009c6:	9906      	ldr	r1, [sp, #24]
100009c8:	4299      	cmp	r1, r3
100009ca:	d901      	bls.n	100009d0 <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
100009cc:	1acb      	subs	r3, r1, r3
100009ce:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
100009d0:	2e00      	cmp	r6, #0
100009d2:	d09b      	beq.n	1000090c <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
100009d4:	231e      	movs	r3, #30
100009d6:	aa0a      	add	r2, sp, #40	; 0x28
100009d8:	189b      	adds	r3, r3, r2
100009da:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
100009dc:	9306      	str	r3, [sp, #24]
100009de:	2d00      	cmp	r5, #0
100009e0:	d032      	beq.n	10000a48 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
100009e2:	3001      	adds	r0, #1
100009e4:	e030      	b.n	10000a48 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
100009e6:	3863      	subs	r0, #99	; 0x63
100009e8:	2815      	cmp	r0, #21
100009ea:	d88f      	bhi.n	1000090c <z_cbvprintf_impl+0x3fc>
100009ec:	f7ff fbe6 	bl	100001bc <__gnu_thumb1_case_shi>
100009f0:	0068005e 	.word	0x0068005e
100009f4:	ff8eff8e 	.word	0xff8eff8e
100009f8:	ff8eff8e 	.word	0xff8eff8e
100009fc:	ff8e0068 	.word	0xff8e0068
10000a00:	ff8eff8e 	.word	0xff8eff8e
10000a04:	00a0ff8e 	.word	0x00a0ff8e
10000a08:	007c007a 	.word	0x007c007a
10000a0c:	ff8eff8e 	.word	0xff8eff8e
10000a10:	ff8e001e 	.word	0xff8e001e
10000a14:	ff8e007a 	.word	0xff8e007a
10000a18:	007aff8e 	.word	0x007aff8e
10000a1c:	ffff87fd 	.word	0xffff87fd
10000a20:	00004002 	.word	0x00004002
10000a24:	00000482 	.word	0x00000482
10000a28:	00000801 	.word	0x00000801
			if (precision >= 0) {
10000a2c:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10000a2e:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10000a30:	2b00      	cmp	r3, #0
10000a32:	db37      	blt.n	10000aa4 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10000a34:	0019      	movs	r1, r3
10000a36:	0030      	movs	r0, r6
10000a38:	f001 fd11 	bl	1000245e <strnlen>
			bpe = bps + len;
10000a3c:	1833      	adds	r3, r6, r0
		char sign = 0;
10000a3e:	2500      	movs	r5, #0
			bpe = bps + len;
10000a40:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10000a42:	2e00      	cmp	r6, #0
10000a44:	d100      	bne.n	10000a48 <z_cbvprintf_impl+0x538>
10000a46:	e761      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10000a48:	ab12      	add	r3, sp, #72	; 0x48
10000a4a:	7a9b      	ldrb	r3, [r3, #10]
10000a4c:	2210      	movs	r2, #16
10000a4e:	0019      	movs	r1, r3
10000a50:	4011      	ands	r1, r2
10000a52:	910b      	str	r1, [sp, #44]	; 0x2c
10000a54:	4213      	tst	r3, r2
10000a56:	d100      	bne.n	10000a5a <z_cbvprintf_impl+0x54a>
10000a58:	e085      	b.n	10000b66 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10000a5a:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10000a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
10000a5e:	920a      	str	r2, [sp, #40]	; 0x28
10000a60:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10000a62:	065b      	lsls	r3, r3, #25
10000a64:	d501      	bpl.n	10000a6a <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10000a66:	9b16      	ldr	r3, [sp, #88]	; 0x58
10000a68:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10000a6a:	9b03      	ldr	r3, [sp, #12]
10000a6c:	2b00      	cmp	r3, #0
10000a6e:	dc00      	bgt.n	10000a72 <z_cbvprintf_impl+0x562>
10000a70:	e094      	b.n	10000b9c <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10000a72:	1a1b      	subs	r3, r3, r0
10000a74:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10000a76:	ab12      	add	r3, sp, #72	; 0x48
10000a78:	7a1b      	ldrb	r3, [r3, #8]
10000a7a:	075a      	lsls	r2, r3, #29
10000a7c:	0fd1      	lsrs	r1, r2, #31
10000a7e:	9108      	str	r1, [sp, #32]
10000a80:	2a00      	cmp	r2, #0
10000a82:	da00      	bge.n	10000a86 <z_cbvprintf_impl+0x576>
10000a84:	e08a      	b.n	10000b9c <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
10000a86:	065b      	lsls	r3, r3, #25
10000a88:	d400      	bmi.n	10000a8c <z_cbvprintf_impl+0x57c>
10000a8a:	e078      	b.n	10000b7e <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10000a8c:	2d00      	cmp	r5, #0
10000a8e:	d007      	beq.n	10000aa0 <z_cbvprintf_impl+0x590>
						OUTC(sign);
10000a90:	0028      	movs	r0, r5
10000a92:	9905      	ldr	r1, [sp, #20]
10000a94:	9b04      	ldr	r3, [sp, #16]
10000a96:	4798      	blx	r3
10000a98:	2800      	cmp	r0, #0
10000a9a:	db6e      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000a9c:	9d08      	ldr	r5, [sp, #32]
10000a9e:	3701      	adds	r7, #1
					pad = '0';
10000aa0:	2330      	movs	r3, #48	; 0x30
10000aa2:	e06d      	b.n	10000b80 <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10000aa4:	0030      	movs	r0, r6
10000aa6:	f001 fcd2 	bl	1000244e <strlen>
10000aaa:	e7c7      	b.n	10000a3c <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10000aac:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000ab0:	ae0c      	add	r6, sp, #48	; 0x30
10000ab2:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10000ab4:	aa0a      	add	r2, sp, #40	; 0x28
10000ab6:	189b      	adds	r3, r3, r2
		char sign = 0;
10000ab8:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10000aba:	2001      	movs	r0, #1
			bpe = buf + 1;
10000abc:	9306      	str	r3, [sp, #24]
10000abe:	e7c3      	b.n	10000a48 <z_cbvprintf_impl+0x538>
				sign = '+';
10000ac0:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000ac2:	071a      	lsls	r2, r3, #28
10000ac4:	d402      	bmi.n	10000acc <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
10000ac6:	06db      	lsls	r3, r3, #27
10000ac8:	0fdb      	lsrs	r3, r3, #31
10000aca:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10000acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10000ad0:	2b00      	cmp	r3, #0
10000ad2:	db00      	blt.n	10000ad6 <z_cbvprintf_impl+0x5c6>
10000ad4:	e760      	b.n	10000998 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
10000ad6:	2100      	movs	r1, #0
10000ad8:	4250      	negs	r0, r2
10000ada:	4199      	sbcs	r1, r3
				sign = '-';
10000adc:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000ade:	9012      	str	r0, [sp, #72]	; 0x48
10000ae0:	9113      	str	r1, [sp, #76]	; 0x4c
10000ae2:	e759      	b.n	10000998 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10000ae4:	2500      	movs	r5, #0
10000ae6:	e757      	b.n	10000998 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10000ae8:	9812      	ldr	r0, [sp, #72]	; 0x48
10000aea:	ad12      	add	r5, sp, #72	; 0x48
10000aec:	2800      	cmp	r0, #0
10000aee:	d034      	beq.n	10000b5a <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000af0:	231e      	movs	r3, #30
10000af2:	aa0a      	add	r2, sp, #40	; 0x28
10000af4:	189b      	adds	r3, r3, r2
10000af6:	9300      	str	r3, [sp, #0]
10000af8:	aa14      	add	r2, sp, #80	; 0x50
10000afa:	ab0c      	add	r3, sp, #48	; 0x30
10000afc:	2100      	movs	r1, #0
10000afe:	f001 fc2b 	bl	10002358 <encode_uint>
				conv->altform_0c = true;
10000b02:	23ef      	movs	r3, #239	; 0xef
10000b04:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000b06:	0006      	movs	r6, r0
				conv->altform_0c = true;
10000b08:	401a      	ands	r2, r3
10000b0a:	4b48      	ldr	r3, [pc, #288]	; (10000c2c <z_cbvprintf_impl+0x71c>)
10000b0c:	4313      	orrs	r3, r2
10000b0e:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000b10:	2500      	movs	r5, #0
			if (precision >= 0) {
10000b12:	9b06      	ldr	r3, [sp, #24]
10000b14:	42ab      	cmp	r3, r5
10000b16:	db00      	blt.n	10000b1a <z_cbvprintf_impl+0x60a>
10000b18:	e74c      	b.n	100009b4 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
10000b1a:	42a8      	cmp	r0, r5
10000b1c:	d100      	bne.n	10000b20 <z_cbvprintf_impl+0x610>
10000b1e:	e6f5      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000b20:	231e      	movs	r3, #30
10000b22:	aa0a      	add	r2, sp, #40	; 0x28
10000b24:	189b      	adds	r3, r3, r2
10000b26:	1a18      	subs	r0, r3, r0
10000b28:	231e      	movs	r3, #30
10000b2a:	189b      	adds	r3, r3, r2
10000b2c:	9306      	str	r3, [sp, #24]
10000b2e:	e78b      	b.n	10000a48 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10000b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10000b32:	2a07      	cmp	r2, #7
10000b34:	d900      	bls.n	10000b38 <z_cbvprintf_impl+0x628>
10000b36:	e6e9      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
10000b38:	0010      	movs	r0, r2
10000b3a:	f7ff fb35 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000b3e:	040c      	.short	0x040c
10000b40:	08080c06 	.word	0x08080c06
10000b44:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10000b46:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10000b48:	e6e0      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10000b4a:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10000b4c:	e6de      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10000b4e:	17fa      	asrs	r2, r7, #31
10000b50:	601f      	str	r7, [r3, #0]
10000b52:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10000b54:	e6da      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000b56:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10000b58:	e6d8      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10000b5a:	4b35      	ldr	r3, [pc, #212]	; (10000c30 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10000b5c:	0005      	movs	r5, r0
10000b5e:	4e35      	ldr	r6, [pc, #212]	; (10000c34 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10000b60:	2005      	movs	r0, #5
			bpe = bps + 5;
10000b62:	9306      	str	r3, [sp, #24]
10000b64:	e770      	b.n	10000a48 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10000b66:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000b68:	0fd2      	lsrs	r2, r2, #31
10000b6a:	1880      	adds	r0, r0, r2
10000b6c:	e776      	b.n	10000a5c <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10000b6e:	9905      	ldr	r1, [sp, #20]
10000b70:	9809      	ldr	r0, [sp, #36]	; 0x24
10000b72:	9b04      	ldr	r3, [sp, #16]
10000b74:	4798      	blx	r3
10000b76:	2800      	cmp	r0, #0
10000b78:	da05      	bge.n	10000b86 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10000b7a:	b019      	add	sp, #100	; 0x64
10000b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000b7e:	2320      	movs	r3, #32
					pad = '0';
10000b80:	9309      	str	r3, [sp, #36]	; 0x24
10000b82:	9b03      	ldr	r3, [sp, #12]
10000b84:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10000b86:	9b08      	ldr	r3, [sp, #32]
10000b88:	001a      	movs	r2, r3
10000b8a:	3a01      	subs	r2, #1
10000b8c:	9208      	str	r2, [sp, #32]
10000b8e:	2b00      	cmp	r3, #0
10000b90:	dced      	bgt.n	10000b6e <z_cbvprintf_impl+0x65e>
10000b92:	9a03      	ldr	r2, [sp, #12]
10000b94:	19d7      	adds	r7, r2, r7
10000b96:	1aff      	subs	r7, r7, r3
10000b98:	9b08      	ldr	r3, [sp, #32]
10000b9a:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10000b9c:	2d00      	cmp	r5, #0
10000b9e:	d006      	beq.n	10000bae <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10000ba0:	0028      	movs	r0, r5
10000ba2:	9905      	ldr	r1, [sp, #20]
10000ba4:	9b04      	ldr	r3, [sp, #16]
10000ba6:	4798      	blx	r3
10000ba8:	2800      	cmp	r0, #0
10000baa:	dbe6      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000bac:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000bae:	ab12      	add	r3, sp, #72	; 0x48
10000bb0:	7a9b      	ldrb	r3, [r3, #10]
10000bb2:	06da      	lsls	r2, r3, #27
10000bb4:	d401      	bmi.n	10000bba <z_cbvprintf_impl+0x6aa>
10000bb6:	071b      	lsls	r3, r3, #28
10000bb8:	d506      	bpl.n	10000bc8 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10000bba:	2030      	movs	r0, #48	; 0x30
10000bbc:	9905      	ldr	r1, [sp, #20]
10000bbe:	9b04      	ldr	r3, [sp, #16]
10000bc0:	4798      	blx	r3
10000bc2:	2800      	cmp	r0, #0
10000bc4:	dbd9      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000bc6:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000bca:	2b00      	cmp	r3, #0
10000bcc:	d007      	beq.n	10000bde <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10000bce:	ab12      	add	r3, sp, #72	; 0x48
10000bd0:	7ad8      	ldrb	r0, [r3, #11]
10000bd2:	9905      	ldr	r1, [sp, #20]
10000bd4:	9b04      	ldr	r3, [sp, #16]
10000bd6:	4798      	blx	r3
10000bd8:	2800      	cmp	r0, #0
10000bda:	dbce      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000bdc:	3701      	adds	r7, #1
				while (width-- > 0) {
10000bde:	003d      	movs	r5, r7
10000be0:	e006      	b.n	10000bf0 <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10000be2:	2030      	movs	r0, #48	; 0x30
10000be4:	9905      	ldr	r1, [sp, #20]
10000be6:	9b04      	ldr	r3, [sp, #16]
10000be8:	4798      	blx	r3
10000bea:	2800      	cmp	r0, #0
10000bec:	dbc5      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000bee:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10000bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000bf2:	19db      	adds	r3, r3, r7
10000bf4:	1b5b      	subs	r3, r3, r5
10000bf6:	2b00      	cmp	r3, #0
10000bf8:	dcf3      	bgt.n	10000be2 <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10000bfa:	0032      	movs	r2, r6
10000bfc:	9b06      	ldr	r3, [sp, #24]
10000bfe:	9905      	ldr	r1, [sp, #20]
10000c00:	9804      	ldr	r0, [sp, #16]
10000c02:	f001 fbf6 	bl	100023f2 <outs>
10000c06:	2800      	cmp	r0, #0
10000c08:	dbb7      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000c0a:	1947      	adds	r7, r0, r5
10000c0c:	003d      	movs	r5, r7
		while (width > 0) {
10000c0e:	9b03      	ldr	r3, [sp, #12]
10000c10:	195b      	adds	r3, r3, r5
10000c12:	1bdb      	subs	r3, r3, r7
10000c14:	2b00      	cmp	r3, #0
10000c16:	dc00      	bgt.n	10000c1a <z_cbvprintf_impl+0x70a>
10000c18:	e678      	b.n	1000090c <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10000c1a:	2020      	movs	r0, #32
10000c1c:	9905      	ldr	r1, [sp, #20]
10000c1e:	9b04      	ldr	r3, [sp, #16]
10000c20:	4798      	blx	r3
10000c22:	2800      	cmp	r0, #0
10000c24:	dba9      	blt.n	10000b7a <z_cbvprintf_impl+0x66a>
10000c26:	3701      	adds	r7, #1
			--width;
10000c28:	e7f1      	b.n	10000c0e <z_cbvprintf_impl+0x6fe>
10000c2a:	46c0      	nop			; (mov r8, r8)
10000c2c:	00007810 	.word	0x00007810
10000c30:	10002eb1 	.word	0x10002eb1
10000c34:	10002eac 	.word	0x10002eac

10000c38 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000c38:	4901      	ldr	r1, [pc, #4]	; (10000c40 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000c3a:	2210      	movs	r2, #16
	str	r2, [r1]
10000c3c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000c3e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000c40:	e000ed10 	.word	0xe000ed10

10000c44 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10000c44:	f3bf 8f4f 	dsb	sy
10000c48:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000c4a:	b662      	cpsie	i
	isb
10000c4c:	f3bf 8f6f 	isb	sy

	bx	lr
10000c50:	4770      	bx	lr
10000c52:	46c0      	nop			; (mov r8, r8)

10000c54 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10000c54:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000c56:	0600      	lsls	r0, r0, #24
10000c58:	d405      	bmi.n	10000c66 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000c5a:	221f      	movs	r2, #31
10000c5c:	401a      	ands	r2, r3
10000c5e:	2301      	movs	r3, #1
10000c60:	4093      	lsls	r3, r2
10000c62:	4a01      	ldr	r2, [pc, #4]	; (10000c68 <arch_irq_enable+0x14>)
10000c64:	6013      	str	r3, [r2, #0]
}
10000c66:	4770      	bx	lr
10000c68:	e000e100 	.word	0xe000e100

10000c6c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000c6c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c6e:	25ff      	movs	r5, #255	; 0xff
10000c70:	2203      	movs	r2, #3
10000c72:	000b      	movs	r3, r1
10000c74:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000c76:	b240      	sxtb	r0, r0
10000c78:	4002      	ands	r2, r0
10000c7a:	00d2      	lsls	r2, r2, #3
10000c7c:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c7e:	015b      	lsls	r3, r3, #5
10000c80:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c82:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c84:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10000c86:	2800      	cmp	r0, #0
10000c88:	db0a      	blt.n	10000ca0 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c8a:	24c0      	movs	r4, #192	; 0xc0
10000c8c:	4a0a      	ldr	r2, [pc, #40]	; (10000cb8 <z_arm_irq_priority_set+0x4c>)
10000c8e:	0880      	lsrs	r0, r0, #2
10000c90:	0080      	lsls	r0, r0, #2
10000c92:	1880      	adds	r0, r0, r2
10000c94:	00a4      	lsls	r4, r4, #2
10000c96:	5902      	ldr	r2, [r0, r4]
10000c98:	400a      	ands	r2, r1
10000c9a:	4313      	orrs	r3, r2
10000c9c:	5103      	str	r3, [r0, r4]
}
10000c9e:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000ca0:	220f      	movs	r2, #15
10000ca2:	4010      	ands	r0, r2
10000ca4:	3808      	subs	r0, #8
10000ca6:	4a05      	ldr	r2, [pc, #20]	; (10000cbc <z_arm_irq_priority_set+0x50>)
10000ca8:	0880      	lsrs	r0, r0, #2
10000caa:	0080      	lsls	r0, r0, #2
10000cac:	1880      	adds	r0, r0, r2
10000cae:	69c2      	ldr	r2, [r0, #28]
10000cb0:	4011      	ands	r1, r2
10000cb2:	4319      	orrs	r1, r3
10000cb4:	61c1      	str	r1, [r0, #28]
10000cb6:	e7f2      	b.n	10000c9e <z_arm_irq_priority_set+0x32>
10000cb8:	e000e100 	.word	0xe000e100
10000cbc:	e000ed00 	.word	0xe000ed00

10000cc0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000cc0:	bf30      	wfi
    b z_SysNmiOnReset
10000cc2:	e7fd      	b.n	10000cc0 <z_SysNmiOnReset>

10000cc4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000cc4:	22ff      	movs	r2, #255	; 0xff
10000cc6:	4b08      	ldr	r3, [pc, #32]	; (10000ce8 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000cc8:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000cca:	4393      	bics	r3, r2
10000ccc:	4a07      	ldr	r2, [pc, #28]	; (10000cec <z_arm_prep_c+0x28>)
10000cce:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000cd4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000cd8:	f000 fdf8 	bl	100018cc <z_bss_zero>
	z_data_copy();
10000cdc:	f001 f9c6 	bl	1000206c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000ce0:	f000 f8f2 	bl	10000ec8 <z_arm_interrupt_init>
	z_cstart();
10000ce4:	f000 fe32 	bl	1000194c <z_cstart>
10000ce8:	10000100 	.word	0x10000100
10000cec:	e000ed00 	.word	0xe000ed00

10000cf0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000cf0:	4a08      	ldr	r2, [pc, #32]	; (10000d14 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000cf2:	4909      	ldr	r1, [pc, #36]	; (10000d18 <arch_swap+0x28>)
	_current->arch.basepri = key;
10000cf4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000cf6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000cf8:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000cfa:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000cfc:	2380      	movs	r3, #128	; 0x80
10000cfe:	4907      	ldr	r1, [pc, #28]	; (10000d1c <arch_swap+0x2c>)
10000d00:	055b      	lsls	r3, r3, #21
10000d02:	6848      	ldr	r0, [r1, #4]
10000d04:	4303      	orrs	r3, r0
10000d06:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10000d08:	b662      	cpsie	i
10000d0a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10000d0e:	6893      	ldr	r3, [r2, #8]
10000d10:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10000d12:	4770      	bx	lr
10000d14:	20000178 	.word	0x20000178
10000d18:	10002db4 	.word	0x10002db4
10000d1c:	e000ed00 	.word	0xe000ed00

10000d20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10000d20:	4913      	ldr	r1, [pc, #76]	; (10000d70 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10000d22:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10000d24:	4813      	ldr	r0, [pc, #76]	; (10000d74 <_thread_irq_disabled+0x22>)
    add r0, r2
10000d26:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10000d28:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10000d2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10000d2e:	4643      	mov	r3, r8
    mov r4, r9
10000d30:	464c      	mov	r4, r9
    mov r5, r10
10000d32:	4655      	mov	r5, sl
    mov r6, r11
10000d34:	465e      	mov	r6, fp
    mov r7, ip
10000d36:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10000d38:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000d3a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10000d3c:	4f0e      	ldr	r7, [pc, #56]	; (10000d78 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10000d3e:	4e0f      	ldr	r6, [pc, #60]	; (10000d7c <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10000d40:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10000d42:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10000d44:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10000d46:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10000d48:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10000d4a:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10000d4c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10000d4e:	d100      	bne.n	10000d52 <_thread_irq_disabled>
    cpsie i
10000d50:	b662      	cpsie	i

10000d52 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10000d52:	4c08      	ldr	r4, [pc, #32]	; (10000d74 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10000d54:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10000d56:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10000d58:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10000d5a:	4698      	mov	r8, r3
    mov r9, r4
10000d5c:	46a1      	mov	r9, r4
    mov r10, r5
10000d5e:	46aa      	mov	sl, r5
    mov r11, r6
10000d60:	46b3      	mov	fp, r6
    mov ip, r7
10000d62:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10000d64:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10000d66:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10000d68:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10000d6c:	4770      	bx	lr
10000d6e:	0000      	.short	0x0000
    ldr r1, =_kernel
10000d70:	20000178 	.word	0x20000178
    ldr r0, =_thread_offset_to_callee_saved
10000d74:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10000d78:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10000d7c:	08000000 	.word	0x08000000

10000d80 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10000d80:	2004      	movs	r0, #4
  mov r1, lr
10000d82:	4671      	mov	r1, lr
  tst r1, r0
10000d84:	4201      	tst	r1, r0
  beq _stack_frame_msp
10000d86:	d002      	beq.n	10000d8e <_stack_frame_msp>
  mrs r0, PSP
10000d88:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10000d8c:	d101      	bne.n	10000d92 <_stack_frame_endif>

10000d8e <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10000d8e:	f3ef 8008 	mrs	r0, MSP

10000d92 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10000d92:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10000d94:	3902      	subs	r1, #2
    ldrb r1, [r1]
10000d96:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10000d98:	2902      	cmp	r1, #2
    beq _oops
10000d9a:	d0ff      	beq.n	10000d9c <_oops>

10000d9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10000d9c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10000d9e:	f001 fb43 	bl	10002428 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10000da2:	bd01      	pop	{r0, pc}

10000da4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10000da4:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10000da6:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10000da8:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10000daa:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10000dac:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10000dae:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10000db0:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10000db2:	4906      	ldr	r1, [pc, #24]	; (10000dcc <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10000db4:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10000db6:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10000db8:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10000dba:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10000dbc:	2380      	movs	r3, #128	; 0x80
10000dbe:	045b      	lsls	r3, r3, #17
10000dc0:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10000dc2:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10000dc4:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10000dc6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10000dc8:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10000dca:	bd10      	pop	{r4, pc}
10000dcc:	10002345 	.word	0x10002345

10000dd0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10000dd0:	4b06      	ldr	r3, [pc, #24]	; (10000dec <arch_switch_to_main_thread+0x1c>)
10000dd2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10000dd4:	1c10      	adds	r0, r2, #0
10000dd6:	f381 8809 	msr	PSP, r1
10000dda:	2100      	movs	r1, #0
10000ddc:	b662      	cpsie	i
10000dde:	f3bf 8f6f 	isb	sy
10000de2:	2200      	movs	r2, #0
10000de4:	2300      	movs	r3, #0
10000de6:	f001 faad 	bl	10002344 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10000dea:	46c0      	nop			; (mov r8, r8)
10000dec:	20000178 	.word	0x20000178

10000df0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10000df0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10000df2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10000df6:	4905      	ldr	r1, [pc, #20]	; (10000e0c <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10000df8:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10000dfa:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10000dfc:	4904      	ldr	r1, [pc, #16]	; (10000e10 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10000dfe:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10000e00:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10000e02:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10000e04:	bc09      	pop	{r0, r3}
	mov lr, r3
10000e06:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10000e08:	4902      	ldr	r1, [pc, #8]	; (10000e14 <_isr_wrapper+0x24>)
	bx r1
10000e0a:	4708      	bx	r1
	ldr r1, =16
10000e0c:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10000e10:	10002bf0 	.word	0x10002bf0
	ldr r1, =z_arm_int_exit
10000e14:	10000e19 	.word	0x10000e19

10000e18 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10000e18:	4b04      	ldr	r3, [pc, #16]	; (10000e2c <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10000e1a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10000e1c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
10000e1e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10000e20:	d002      	beq.n	10000e28 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10000e22:	4903      	ldr	r1, [pc, #12]	; (10000e30 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10000e24:	4a03      	ldr	r2, [pc, #12]	; (10000e34 <_EXIT_EXC+0xc>)
	str r2, [r1]
10000e26:	600a      	str	r2, [r1, #0]

10000e28 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10000e28:	4770      	bx	lr
10000e2a:	0000      	.short	0x0000
	ldr r3, =_kernel
10000e2c:	20000178 	.word	0x20000178
	ldr r1, =_SCS_ICSR
10000e30:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10000e34:	10000000 	.word	0x10000000

10000e38 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10000e38:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000e3a:	4b1b      	ldr	r3, [pc, #108]	; (10000ea8 <z_arm_fault+0x70>)
{
10000e3c:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000e3e:	685b      	ldr	r3, [r3, #4]
{
10000e40:	b088      	sub	sp, #32
10000e42:	05db      	lsls	r3, r3, #23
10000e44:	0ddb      	lsrs	r3, r3, #23
10000e46:	b662      	cpsie	i
10000e48:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10000e4c:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e4e:	0e16      	lsrs	r6, r2, #24
		return NULL;
10000e50:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e52:	2eff      	cmp	r6, #255	; 0xff
10000e54:	d109      	bne.n	10000e6a <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10000e56:	3ef3      	subs	r6, #243	; 0xf3
10000e58:	4016      	ands	r6, r2
10000e5a:	2e08      	cmp	r6, #8
10000e5c:	d005      	beq.n	10000e6a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10000e5e:	0001      	movs	r1, r0
			*nested_exc = true;
10000e60:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10000e62:	0712      	lsls	r2, r2, #28
10000e64:	d501      	bpl.n	10000e6a <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10000e66:	0021      	movs	r1, r4
	*nested_exc = false;
10000e68:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10000e6a:	2400      	movs	r4, #0
	switch (fault) {
10000e6c:	2b03      	cmp	r3, #3
10000e6e:	d106      	bne.n	10000e7e <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10000e70:	698b      	ldr	r3, [r1, #24]
10000e72:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10000e74:	881a      	ldrh	r2, [r3, #0]
10000e76:	4b0d      	ldr	r3, [pc, #52]	; (10000eac <z_arm_fault+0x74>)
10000e78:	429a      	cmp	r2, r3
10000e7a:	d100      	bne.n	10000e7e <z_arm_fault+0x46>
		reason = esf->basic.r0;
10000e7c:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10000e7e:	2220      	movs	r2, #32
10000e80:	4668      	mov	r0, sp
10000e82:	f001 faf6 	bl	10002472 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10000e86:	9b07      	ldr	r3, [sp, #28]
10000e88:	2d00      	cmp	r5, #0
10000e8a:	d00a      	beq.n	10000ea2 <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10000e8c:	05da      	lsls	r2, r3, #23
10000e8e:	d102      	bne.n	10000e96 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10000e90:	4a07      	ldr	r2, [pc, #28]	; (10000eb0 <z_arm_fault+0x78>)
10000e92:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000e94:	9307      	str	r3, [sp, #28]

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10000e96:	4669      	mov	r1, sp
10000e98:	0020      	movs	r0, r4
10000e9a:	f001 fac1 	bl	10002420 <z_arm_fatal_error>
}
10000e9e:	b008      	add	sp, #32
10000ea0:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000ea2:	0a5b      	lsrs	r3, r3, #9
10000ea4:	025b      	lsls	r3, r3, #9
10000ea6:	e7f5      	b.n	10000e94 <z_arm_fault+0x5c>
10000ea8:	e000ed00 	.word	0xe000ed00
10000eac:	0000df02 	.word	0x0000df02
10000eb0:	000001ff 	.word	0x000001ff

10000eb4 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10000eb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10000eb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10000ebc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10000ebe:	4672      	mov	r2, lr
	bl z_arm_fault
10000ec0:	f7ff ffba 	bl	10000e38 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10000ec4:	bd01      	pop	{r0, pc}
10000ec6:	46c0      	nop			; (mov r8, r8)

10000ec8 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000eca:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10000ecc:	2200      	movs	r2, #0
10000ece:	2603      	movs	r6, #3
10000ed0:	25ff      	movs	r5, #255	; 0xff
10000ed2:	00a4      	lsls	r4, r4, #2
10000ed4:	0010      	movs	r0, r2
10000ed6:	002f      	movs	r7, r5
10000ed8:	4030      	ands	r0, r6
10000eda:	00c0      	lsls	r0, r0, #3
10000edc:	4087      	lsls	r7, r0
10000ede:	4905      	ldr	r1, [pc, #20]	; (10000ef4 <z_arm_interrupt_init+0x2c>)
10000ee0:	0893      	lsrs	r3, r2, #2
10000ee2:	009b      	lsls	r3, r3, #2
10000ee4:	185b      	adds	r3, r3, r1
10000ee6:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10000ee8:	3201      	adds	r2, #1
10000eea:	43b9      	bics	r1, r7
10000eec:	5119      	str	r1, [r3, r4]
10000eee:	2a1a      	cmp	r2, #26
10000ef0:	d1f0      	bne.n	10000ed4 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000ef4:	e000e100 	.word	0xe000e100

10000ef8 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000ef8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10000efa:	4807      	ldr	r0, [pc, #28]	; (10000f18 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000efc:	4907      	ldr	r1, [pc, #28]	; (10000f1c <__start+0x24>)
    adds r0, r0, r1
10000efe:	1840      	adds	r0, r0, r1
    msr PSP, r0
10000f00:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10000f04:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10000f08:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10000f0a:	4308      	orrs	r0, r1
    msr CONTROL, r0
10000f0c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10000f10:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10000f14:	f7ff fed6 	bl	10000cc4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10000f18:	200001b0 	.word	0x200001b0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000f1c:	00000800 	.word	0x00000800

10000f20 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10000f20:	b510      	push	{r4, lr}
	if (_current == thread) {
10000f22:	4b0a      	ldr	r3, [pc, #40]	; (10000f4c <z_impl_k_thread_abort+0x2c>)
10000f24:	689b      	ldr	r3, [r3, #8]
10000f26:	4283      	cmp	r3, r0
10000f28:	d10d      	bne.n	10000f46 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10000f2a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10000f2e:	2b00      	cmp	r3, #0
10000f30:	d009      	beq.n	10000f46 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000f32:	2280      	movs	r2, #128	; 0x80
10000f34:	4b06      	ldr	r3, [pc, #24]	; (10000f50 <z_impl_k_thread_abort+0x30>)
10000f36:	0552      	lsls	r2, r2, #21
10000f38:	6859      	ldr	r1, [r3, #4]
10000f3a:	430a      	orrs	r2, r1
10000f3c:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10000f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000f40:	4904      	ldr	r1, [pc, #16]	; (10000f54 <z_impl_k_thread_abort+0x34>)
10000f42:	400a      	ands	r2, r1
10000f44:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10000f46:	f001 f835 	bl	10001fb4 <z_thread_abort>
}
10000f4a:	bd10      	pop	{r4, pc}
10000f4c:	20000178 	.word	0x20000178
10000f50:	e000ed00 	.word	0xe000ed00
10000f54:	ffff7fff 	.word	0xffff7fff

10000f58 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10000f58:	4b01      	ldr	r3, [pc, #4]	; (10000f60 <__stdout_hook_install+0x8>)
10000f5a:	6018      	str	r0, [r3, #0]
}
10000f5c:	4770      	bx	lr
10000f5e:	46c0      	nop			; (mov r8, r8)
10000f60:	20000004 	.word	0x20000004

10000f64 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10000f64:	3902      	subs	r1, #2
{
10000f66:	b510      	push	{r4, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10000f68:	2901      	cmp	r1, #1
10000f6a:	d803      	bhi.n	10000f74 <z_impl_zephyr_fputc+0x10>
10000f6c:	4b03      	ldr	r3, [pc, #12]	; (10000f7c <z_impl_zephyr_fputc+0x18>)
10000f6e:	681b      	ldr	r3, [r3, #0]
10000f70:	4798      	blx	r3
}
10000f72:	bd10      	pop	{r4, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
10000f74:	2001      	movs	r0, #1
10000f76:	4240      	negs	r0, r0
10000f78:	e7fb      	b.n	10000f72 <z_impl_zephyr_fputc+0xe>
10000f7a:	46c0      	nop			; (mov r8, r8)
10000f7c:	20000004 	.word	0x20000004

10000f80 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
10000f80:	b40f      	push	{r0, r1, r2, r3}
10000f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000f84:	2100      	movs	r1, #0
10000f86:	ab06      	add	r3, sp, #24
10000f88:	cb04      	ldmia	r3!, {r2}
10000f8a:	4805      	ldr	r0, [pc, #20]	; (10000fa0 <printf+0x20>)
10000f8c:	9100      	str	r1, [sp, #0]
10000f8e:	3102      	adds	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
10000f90:	9303      	str	r3, [sp, #12]
10000f92:	f7ff fabd 	bl	10000510 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
10000f96:	b005      	add	sp, #20
10000f98:	bc08      	pop	{r3}
10000f9a:	b004      	add	sp, #16
10000f9c:	4718      	bx	r3
10000f9e:	46c0      	nop			; (mov r8, r8)
10000fa0:	1000249d 	.word	0x1000249d

10000fa4 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000fa4:	4b0e      	ldr	r3, [pc, #56]	; (10000fe0 <rp2040_init+0x3c>)
10000fa6:	4a0f      	ldr	r2, [pc, #60]	; (10000fe4 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10000fa8:	b570      	push	{r4, r5, r6, lr}
10000faa:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000fac:	4d0e      	ldr	r5, [pc, #56]	; (10000fe8 <rp2040_init+0x44>)
10000fae:	4b0f      	ldr	r3, [pc, #60]	; (10000fec <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000fb0:	4c0f      	ldr	r4, [pc, #60]	; (10000ff0 <rp2040_init+0x4c>)
10000fb2:	602b      	str	r3, [r5, #0]
10000fb4:	0019      	movs	r1, r3
10000fb6:	68a2      	ldr	r2, [r4, #8]
10000fb8:	4391      	bics	r1, r2
10000fba:	d1fb      	bne.n	10000fb4 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10000fbc:	f000 fa4c 	bl	10001458 <clocks_init>
10000fc0:	4b0c      	ldr	r3, [pc, #48]	; (10000ff4 <rp2040_init+0x50>)
10000fc2:	602b      	str	r3, [r5, #0]
10000fc4:	68a3      	ldr	r3, [r4, #8]
10000fc6:	01db      	lsls	r3, r3, #7
10000fc8:	3380      	adds	r3, #128	; 0x80
10000fca:	d1fb      	bne.n	10000fc4 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10000fcc:	f3ef 8310 	mrs	r3, PRIMASK
10000fd0:	b672      	cpsid	i
	if (key != 0U) {
10000fd2:	2b00      	cmp	r3, #0
10000fd4:	d102      	bne.n	10000fdc <rp2040_init+0x38>
	__asm__ volatile(
10000fd6:	b662      	cpsie	i
10000fd8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10000fdc:	2000      	movs	r0, #0
10000fde:	bd70      	pop	{r4, r5, r6, pc}
10000fe0:	4000e000 	.word	0x4000e000
10000fe4:	ffffcdbf 	.word	0xffffcdbf
10000fe8:	4000f000 	.word	0x4000f000
10000fec:	003c3ffe 	.word	0x003c3ffe
10000ff0:	4000c000 	.word	0x4000c000
10000ff4:	01ffffff 	.word	0x01ffffff

10000ff8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10000ff8:	b510      	push	{r4, lr}
10000ffa:	4808      	ldr	r0, [pc, #32]	; (1000101c <uart_console_init+0x24>)
10000ffc:	f001 fd0e 	bl	10002a1c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
10001000:	2800      	cmp	r0, #0
10001002:	d008      	beq.n	10001016 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10001004:	4c06      	ldr	r4, [pc, #24]	; (10001020 <uart_console_init+0x28>)
10001006:	0020      	movs	r0, r4
10001008:	f7ff ffa6 	bl	10000f58 <__stdout_hook_install>
	__printk_hook_install(console_out);
1000100c:	0020      	movs	r0, r4
1000100e:	f7ff fa6d 	bl	100004ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10001012:	2000      	movs	r0, #0
}
10001014:	bd10      	pop	{r4, pc}
		return -ENODEV;
10001016:	2013      	movs	r0, #19
10001018:	4240      	negs	r0, r0
1000101a:	e7fb      	b.n	10001014 <uart_console_init+0x1c>
1000101c:	10002bc0 	.word	0x10002bc0
10001020:	10001025 	.word	0x10001025

10001024 <console_out>:
{
10001024:	b570      	push	{r4, r5, r6, lr}
10001026:	0004      	movs	r4, r0
10001028:	4d07      	ldr	r5, [pc, #28]	; (10001048 <console_out+0x24>)
	if ('\n' == c) {
1000102a:	280a      	cmp	r0, #10
1000102c:	d104      	bne.n	10001038 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
1000102e:	68ab      	ldr	r3, [r5, #8]
10001030:	210d      	movs	r1, #13
10001032:	0028      	movs	r0, r5
10001034:	685b      	ldr	r3, [r3, #4]
10001036:	4798      	blx	r3
10001038:	68ab      	ldr	r3, [r5, #8]
1000103a:	0028      	movs	r0, r5
1000103c:	685b      	ldr	r3, [r3, #4]
1000103e:	b2e1      	uxtb	r1, r4
10001040:	4798      	blx	r3
}
10001042:	0020      	movs	r0, r4
10001044:	bd70      	pop	{r4, r5, r6, pc}
10001046:	46c0      	nop			; (mov r8, r8)
10001048:	10002bc0 	.word	0x10002bc0

1000104c <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
1000104c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000104e:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10001050:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10001052:	6903      	ldr	r3, [r0, #16]
10001054:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10001056:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001058:	4a14      	ldr	r2, [pc, #80]	; (100010ac <gpio_rpi_isr+0x60>)
1000105a:	3308      	adds	r3, #8
1000105c:	009b      	lsls	r3, r3, #2
1000105e:	589b      	ldr	r3, [r3, r2]
10001060:	2207      	movs	r2, #7
10001062:	4022      	ands	r2, r4
10001064:	0092      	lsls	r2, r2, #2
10001066:	40d3      	lsrs	r3, r2
		if (events) {
10001068:	220f      	movs	r2, #15
1000106a:	4213      	tst	r3, r2
1000106c:	d103      	bne.n	10001076 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000106e:	3401      	adds	r4, #1
10001070:	2c1e      	cmp	r4, #30
10001072:	d1f0      	bne.n	10001056 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10001074:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10001076:	210f      	movs	r1, #15
10001078:	0020      	movs	r0, r4
1000107a:	f000 fb33 	bl	100016e4 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
1000107e:	9b01      	ldr	r3, [sp, #4]
10001080:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10001082:	2900      	cmp	r1, #0
10001084:	d0f3      	beq.n	1000106e <gpio_rpi_isr+0x22>
10001086:	2701      	movs	r7, #1
10001088:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
1000108a:	680d      	ldr	r5, [r1, #0]
1000108c:	2900      	cmp	r1, #0
1000108e:	d0ee      	beq.n	1000106e <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10001090:	688b      	ldr	r3, [r1, #8]
10001092:	001a      	movs	r2, r3
10001094:	403a      	ands	r2, r7
10001096:	423b      	tst	r3, r7
10001098:	d002      	beq.n	100010a0 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
1000109a:	0030      	movs	r0, r6
1000109c:	684b      	ldr	r3, [r1, #4]
1000109e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100010a0:	1e2b      	subs	r3, r5, #0
100010a2:	d000      	beq.n	100010a6 <gpio_rpi_isr+0x5a>
100010a4:	682b      	ldr	r3, [r5, #0]
100010a6:	0029      	movs	r1, r5
100010a8:	001d      	movs	r5, r3
100010aa:	e7ef      	b.n	1000108c <gpio_rpi_isr+0x40>
100010ac:	40014100 	.word	0x40014100

100010b0 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
100010b0:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
100010b2:	4903      	ldr	r1, [pc, #12]	; (100010c0 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
100010b4:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
100010b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
100010b8:	400b      	ands	r3, r1
100010ba:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
100010bc:	4770      	bx	lr
100010be:	46c0      	nop			; (mov r8, r8)
100010c0:	fffff83f 	.word	0xfffff83f

100010c4 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
100010c4:	b510      	push	{r4, lr}
100010c6:	2b03      	cmp	r3, #3
100010c8:	d823      	bhi.n	10001112 <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
100010ca:	2a01      	cmp	r2, #1
100010cc:	d002      	beq.n	100010d4 <uart_rpi_set_format.isra.0+0x10>
100010ce:	2a03      	cmp	r2, #3
100010d0:	d11f      	bne.n	10001112 <uart_rpi_set_format.isra.0+0x4e>
100010d2:	3a01      	subs	r2, #1
	switch (cfg->parity) {
100010d4:	2902      	cmp	r1, #2
100010d6:	d81c      	bhi.n	10001112 <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
100010d8:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100010da:	3a01      	subs	r2, #1
100010dc:	480e      	ldr	r0, [pc, #56]	; (10001118 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
100010de:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100010e0:	00d2      	lsls	r2, r2, #3
100010e2:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
100010e4:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100010e6:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100010e8:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100010ea:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
100010ec:	4299      	cmp	r1, r3
100010ee:	d005      	beq.n	100010fc <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100010f0:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100010f2:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
100010f4:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
100010f6:	424b      	negs	r3, r1
100010f8:	4159      	adcs	r1, r3
100010fa:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100010fc:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100010fe:	236e      	movs	r3, #110	; 0x6e
10001100:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10001102:	404a      	eors	r2, r1
10001104:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001106:	2380      	movs	r3, #128	; 0x80
10001108:	015b      	lsls	r3, r3, #5
1000110a:	4303      	orrs	r3, r0
	return 0;
1000110c:	2000      	movs	r0, #0
1000110e:	601a      	str	r2, [r3, #0]
}
10001110:	bd10      	pop	{r4, pc}
		return -EINVAL;
10001112:	2016      	movs	r0, #22
10001114:	4240      	negs	r0, r0
10001116:	e7fb      	b.n	10001110 <uart_rpi_set_format.isra.0+0x4c>
10001118:	10002ede 	.word	0x10002ede

1000111c <uart_rpi_init>:
{
1000111c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
1000111e:	6845      	ldr	r5, [r0, #4]
{
10001120:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10001122:	682b      	ldr	r3, [r5, #0]
{
10001124:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10001126:	6906      	ldr	r6, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10001128:	2100      	movs	r1, #0
1000112a:	68a8      	ldr	r0, [r5, #8]
1000112c:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
1000112e:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10001130:	9301      	str	r3, [sp, #4]
10001132:	f001 fabe 	bl	100026b2 <pinctrl_lookup_state>
	if (ret < 0) {
10001136:	2800      	cmp	r0, #0
10001138:	db23      	blt.n	10001182 <uart_rpi_init+0x66>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
1000113a:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
1000113c:	2200      	movs	r2, #0
1000113e:	7919      	ldrb	r1, [r3, #4]
10001140:	6818      	ldr	r0, [r3, #0]
10001142:	f001 fac9 	bl	100026d8 <pinctrl_configure_pins>
	if (ret < 0) {
10001146:	2800      	cmp	r0, #0
10001148:	db1b      	blt.n	10001182 <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
1000114a:	6831      	ldr	r1, [r6, #0]
1000114c:	9801      	ldr	r0, [sp, #4]
1000114e:	f000 fb33 	bl	100017b8 <uart_init>
	if (baudrate == 0) {
10001152:	2800      	cmp	r0, #0
10001154:	d017      	beq.n	10001186 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
10001156:	4b0d      	ldr	r3, [pc, #52]	; (1000118c <uart_rpi_init+0x70>)
10001158:	6030      	str	r0, [r6, #0]
1000115a:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
1000115c:	2201      	movs	r2, #1
1000115e:	2303      	movs	r3, #3
10001160:	2100      	movs	r1, #0
10001162:	6860      	ldr	r0, [r4, #4]
10001164:	f7ff ffae 	bl	100010c4 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10001168:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000116a:	23c0      	movs	r3, #192	; 0xc0
1000116c:	322c      	adds	r2, #44	; 0x2c
1000116e:	019b      	lsls	r3, r3, #6
10001170:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10001172:	2600      	movs	r6, #0
10001174:	2210      	movs	r2, #16
10001176:	601a      	str	r2, [r3, #0]
10001178:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
1000117a:	0020      	movs	r0, r4
1000117c:	696b      	ldr	r3, [r5, #20]
1000117e:	4798      	blx	r3
	return 0;
10001180:	0030      	movs	r0, r6
}
10001182:	b005      	add	sp, #20
10001184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10001186:	2016      	movs	r0, #22
10001188:	4240      	negs	r0, r0
1000118a:	e7fa      	b.n	10001182 <uart_rpi_init+0x66>
1000118c:	00030100 	.word	0x00030100

10001190 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
10001190:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10001192:	4b0a      	ldr	r3, [pc, #40]	; (100011bc <elapsed+0x2c>)
10001194:	4a0a      	ldr	r2, [pc, #40]	; (100011c0 <elapsed+0x30>)
10001196:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001198:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
1000119a:	4d0a      	ldr	r5, [pc, #40]	; (100011c4 <elapsed+0x34>)
1000119c:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000119e:	03c9      	lsls	r1, r1, #15
100011a0:	d401      	bmi.n	100011a6 <elapsed+0x16>
	    || (val1 < val2)) {
100011a2:	42a0      	cmp	r0, r4
100011a4:	d204      	bcs.n	100011b0 <elapsed+0x20>
		overflow_cyc += last_load;
100011a6:	6811      	ldr	r1, [r2, #0]
100011a8:	6828      	ldr	r0, [r5, #0]
100011aa:	1809      	adds	r1, r1, r0
100011ac:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
100011ae:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
100011b0:	682b      	ldr	r3, [r5, #0]
100011b2:	6810      	ldr	r0, [r2, #0]
100011b4:	18c0      	adds	r0, r0, r3
100011b6:	1b00      	subs	r0, r0, r4
}
100011b8:	bd30      	pop	{r4, r5, pc}
100011ba:	46c0      	nop			; (mov r8, r8)
100011bc:	e000e010 	.word	0xe000e010
100011c0:	20000140 	.word	0x20000140
100011c4:	2000014c 	.word	0x2000014c

100011c8 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
100011c8:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100011ca:	4a09      	ldr	r2, [pc, #36]	; (100011f0 <sys_clock_driver_init+0x28>)
100011cc:	6a13      	ldr	r3, [r2, #32]
100011ce:	021b      	lsls	r3, r3, #8
100011d0:	0a1b      	lsrs	r3, r3, #8
100011d2:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
100011d4:	4b07      	ldr	r3, [pc, #28]	; (100011f4 <sys_clock_driver_init+0x2c>)
100011d6:	4a08      	ldr	r2, [pc, #32]	; (100011f8 <sys_clock_driver_init+0x30>)
100011d8:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
100011da:	4b08      	ldr	r3, [pc, #32]	; (100011fc <sys_clock_driver_init+0x34>)
100011dc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
100011de:	4b08      	ldr	r3, [pc, #32]	; (10001200 <sys_clock_driver_init+0x38>)
100011e0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100011e2:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
100011e4:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100011e6:	6819      	ldr	r1, [r3, #0]
100011e8:	430a      	orrs	r2, r1
100011ea:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100011ec:	4770      	bx	lr
100011ee:	46c0      	nop			; (mov r8, r8)
100011f0:	e000ed00 	.word	0xe000ed00
100011f4:	2000014c 	.word	0x2000014c
100011f8:	000030d3 	.word	0x000030d3
100011fc:	20000140 	.word	0x20000140
10001200:	e000e010 	.word	0xe000e010

10001204 <sys_clock_isr>:
{
10001204:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10001206:	f7ff ffc3 	bl	10001190 <elapsed>
	cycle_count += overflow_cyc;
1000120a:	4b0b      	ldr	r3, [pc, #44]	; (10001238 <sys_clock_isr+0x34>)
1000120c:	4a0b      	ldr	r2, [pc, #44]	; (1000123c <sys_clock_isr+0x38>)
1000120e:	6818      	ldr	r0, [r3, #0]
10001210:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10001212:	4c0b      	ldr	r4, [pc, #44]	; (10001240 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10001214:	1840      	adds	r0, r0, r1
10001216:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10001218:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000121a:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
1000121c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000121e:	4909      	ldr	r1, [pc, #36]	; (10001244 <sys_clock_isr+0x40>)
10001220:	1b40      	subs	r0, r0, r5
10001222:	f7fe ffd5 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10001226:	4b07      	ldr	r3, [pc, #28]	; (10001244 <sys_clock_isr+0x40>)
10001228:	4343      	muls	r3, r0
1000122a:	195b      	adds	r3, r3, r5
1000122c:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
1000122e:	f000 ffef 	bl	10002210 <sys_clock_announce>
	z_arm_int_exit();
10001232:	f7ff fdf1 	bl	10000e18 <z_arm_exc_exit>
}
10001236:	bd70      	pop	{r4, r5, r6, pc}
10001238:	20000140 	.word	0x20000140
1000123c:	20000148 	.word	0x20000148
10001240:	20000144 	.word	0x20000144
10001244:	000030d4 	.word	0x000030d4

10001248 <sys_clock_set_timeout>:
{
10001248:	b5f0      	push	{r4, r5, r6, r7, lr}
1000124a:	4d32      	ldr	r5, [pc, #200]	; (10001314 <sys_clock_set_timeout+0xcc>)
1000124c:	4f32      	ldr	r7, [pc, #200]	; (10001318 <sys_clock_set_timeout+0xd0>)
1000124e:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10001250:	2900      	cmp	r1, #0
10001252:	d054      	beq.n	100012fe <sys_clock_set_timeout+0xb6>
10001254:	1c43      	adds	r3, r0, #1
10001256:	d108      	bne.n	1000126a <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10001258:	2201      	movs	r2, #1
1000125a:	682b      	ldr	r3, [r5, #0]
1000125c:	4393      	bics	r3, r2
1000125e:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10001260:	23ff      	movs	r3, #255	; 0xff
10001262:	061b      	lsls	r3, r3, #24
10001264:	603b      	str	r3, [r7, #0]
}
10001266:	b005      	add	sp, #20
10001268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
1000126a:	683b      	ldr	r3, [r7, #0]
1000126c:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
1000126e:	2600      	movs	r6, #0
10001270:	2801      	cmp	r0, #1
10001272:	dd04      	ble.n	1000127e <sys_clock_set_timeout+0x36>
10001274:	4b29      	ldr	r3, [pc, #164]	; (1000131c <sys_clock_set_timeout+0xd4>)
10001276:	001e      	movs	r6, r3
10001278:	4298      	cmp	r0, r3
1000127a:	dc00      	bgt.n	1000127e <sys_clock_set_timeout+0x36>
1000127c:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
1000127e:	f3ef 8310 	mrs	r3, PRIMASK
10001282:	b672      	cpsid	i
10001284:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10001286:	f7ff ff83 	bl	10001190 <elapsed>
	overflow_cyc = 0U;
1000128a:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
1000128c:	68ab      	ldr	r3, [r5, #8]
1000128e:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
10001290:	4b23      	ldr	r3, [pc, #140]	; (10001320 <sys_clock_set_timeout+0xd8>)
10001292:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10001294:	4b23      	ldr	r3, [pc, #140]	; (10001324 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10001296:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10001298:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
1000129a:	4b23      	ldr	r3, [pc, #140]	; (10001328 <sys_clock_set_timeout+0xe0>)
1000129c:	681b      	ldr	r3, [r3, #0]
1000129e:	9300      	str	r3, [sp, #0]
100012a0:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
100012a2:	4290      	cmp	r0, r2
100012a4:	db31      	blt.n	1000130a <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
100012a6:	4b21      	ldr	r3, [pc, #132]	; (1000132c <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100012a8:	4a21      	ldr	r2, [pc, #132]	; (10001330 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
100012aa:	435e      	muls	r6, r3
		delay += unannounced;
100012ac:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100012ae:	0019      	movs	r1, r3
100012b0:	1880      	adds	r0, r0, r2
100012b2:	f7fe ff8d 	bl	100001d0 <__udivsi3>
		delay =
100012b6:	4b1d      	ldr	r3, [pc, #116]	; (1000132c <sys_clock_set_timeout+0xe4>)
100012b8:	4358      	muls	r0, r3
		delay -= unannounced;
100012ba:	9b00      	ldr	r3, [sp, #0]
100012bc:	1b1b      	subs	r3, r3, r4
100012be:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
100012c0:	2380      	movs	r3, #128	; 0x80
100012c2:	00db      	lsls	r3, r3, #3
100012c4:	4298      	cmp	r0, r3
100012c6:	d923      	bls.n	10001310 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
100012c8:	4b1a      	ldr	r3, [pc, #104]	; (10001334 <sys_clock_set_timeout+0xec>)
100012ca:	4298      	cmp	r0, r3
100012cc:	d820      	bhi.n	10001310 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
100012ce:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
100012d0:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
100012d2:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
100012d4:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
100012d6:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
100012d8:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
100012da:	9b02      	ldr	r3, [sp, #8]
100012dc:	9802      	ldr	r0, [sp, #8]
100012de:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
100012e0:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
100012e2:	4288      	cmp	r0, r1
100012e4:	d202      	bcs.n	100012ec <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
100012e6:	9a01      	ldr	r2, [sp, #4]
100012e8:	189b      	adds	r3, r3, r2
100012ea:	191a      	adds	r2, r3, r4
100012ec:	4b0c      	ldr	r3, [pc, #48]	; (10001320 <sys_clock_set_timeout+0xd8>)
100012ee:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
100012f0:	9b03      	ldr	r3, [sp, #12]
100012f2:	2b00      	cmp	r3, #0
100012f4:	d1b7      	bne.n	10001266 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
100012f6:	b662      	cpsie	i
100012f8:	f3bf 8f6f 	isb	sy
100012fc:	e7b3      	b.n	10001266 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
100012fe:	683b      	ldr	r3, [r7, #0]
10001300:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10001302:	1c43      	adds	r3, r0, #1
10001304:	d1b3      	bne.n	1000126e <sys_clock_set_timeout+0x26>
10001306:	4805      	ldr	r0, [pc, #20]	; (1000131c <sys_clock_set_timeout+0xd4>)
10001308:	e7b8      	b.n	1000127c <sys_clock_set_timeout+0x34>
1000130a:	2080      	movs	r0, #128	; 0x80
1000130c:	00c0      	lsls	r0, r0, #3
1000130e:	e7de      	b.n	100012ce <sys_clock_set_timeout+0x86>
10001310:	0018      	movs	r0, r3
10001312:	e7dc      	b.n	100012ce <sys_clock_set_timeout+0x86>
10001314:	e000e010 	.word	0xe000e010
10001318:	2000014c 	.word	0x2000014c
1000131c:	0000053d 	.word	0x0000053d
10001320:	20000148 	.word	0x20000148
10001324:	20000140 	.word	0x20000140
10001328:	20000144 	.word	0x20000144
1000132c:	000030d4 	.word	0x000030d4
10001330:	000030d3 	.word	0x000030d3
10001334:	00ffc684 	.word	0x00ffc684

10001338 <sys_clock_elapsed>:
{
10001338:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000133a:	f3ef 8410 	mrs	r4, PRIMASK
1000133e:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10001340:	f7ff ff26 	bl	10001190 <elapsed>
10001344:	4b07      	ldr	r3, [pc, #28]	; (10001364 <sys_clock_elapsed+0x2c>)
10001346:	4a08      	ldr	r2, [pc, #32]	; (10001368 <sys_clock_elapsed+0x30>)
10001348:	681b      	ldr	r3, [r3, #0]
1000134a:	6812      	ldr	r2, [r2, #0]
1000134c:	1a9b      	subs	r3, r3, r2
1000134e:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10001350:	2c00      	cmp	r4, #0
10001352:	d102      	bne.n	1000135a <sys_clock_elapsed+0x22>
	__asm__ volatile(
10001354:	b662      	cpsie	i
10001356:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
1000135a:	4904      	ldr	r1, [pc, #16]	; (1000136c <sys_clock_elapsed+0x34>)
1000135c:	f7fe ff38 	bl	100001d0 <__udivsi3>
}
10001360:	bd10      	pop	{r4, pc}
10001362:	46c0      	nop			; (mov r8, r8)
10001364:	20000148 	.word	0x20000148
10001368:	20000144 	.word	0x20000144
1000136c:	000030d4 	.word	0x000030d4

10001370 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001370:	b5f0      	push	{r4, r5, r6, r7, lr}
10001372:	b085      	sub	sp, #20
10001374:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001378:	0005      	movs	r5, r0
1000137a:	000f      	movs	r7, r1
        return false;
1000137c:	2000      	movs	r0, #0
    if (freq > src_freq)
1000137e:	429a      	cmp	r2, r3
10001380:	d863      	bhi.n	1000144a <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001382:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001384:	0e1a      	lsrs	r2, r3, #24
10001386:	021b      	lsls	r3, r3, #8
10001388:	9203      	str	r2, [sp, #12]
1000138a:	9302      	str	r3, [sp, #8]
1000138c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000138e:	0003      	movs	r3, r0
10001390:	9903      	ldr	r1, [sp, #12]
10001392:	9802      	ldr	r0, [sp, #8]
10001394:	f7fe ff82 	bl	1000029c <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001398:	436c      	muls	r4, r5
1000139a:	4b2d      	ldr	r3, [pc, #180]	; (10001450 <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000139c:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000139e:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100013a0:	6863      	ldr	r3, [r4, #4]
100013a2:	4283      	cmp	r3, r0
100013a4:	d200      	bcs.n	100013a8 <clock_configure+0x38>
        clock->div = div;
100013a6:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100013a8:	1f2b      	subs	r3, r5, #4
100013aa:	b2db      	uxtb	r3, r3
100013ac:	9300      	str	r3, [sp, #0]
100013ae:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100013b0:	9a00      	ldr	r2, [sp, #0]
100013b2:	019b      	lsls	r3, r3, #6
100013b4:	4323      	orrs	r3, r4
100013b6:	2a01      	cmp	r2, #1
100013b8:	d81b      	bhi.n	100013f2 <clock_configure+0x82>
100013ba:	2f01      	cmp	r7, #1
100013bc:	d119      	bne.n	100013f2 <clock_configure+0x82>
100013be:	2203      	movs	r2, #3
100013c0:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
100013c2:	68a3      	ldr	r3, [r4, #8]
100013c4:	423b      	tst	r3, r7
100013c6:	d0fc      	beq.n	100013c2 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100013c8:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013ca:	6823      	ldr	r3, [r4, #0]
100013cc:	0152      	lsls	r2, r2, #5
100013ce:	405a      	eors	r2, r3
100013d0:	23e0      	movs	r3, #224	; 0xe0
100013d2:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013d4:	2380      	movs	r3, #128	; 0x80
100013d6:	015b      	lsls	r3, r3, #5
100013d8:	4323      	orrs	r3, r4
100013da:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013dc:	2103      	movs	r1, #3
100013de:	6822      	ldr	r2, [r4, #0]
100013e0:	407a      	eors	r2, r7
100013e2:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013e4:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
100013e6:	2301      	movs	r3, #1
100013e8:	40bb      	lsls	r3, r7
100013ea:	68a2      	ldr	r2, [r4, #8]
100013ec:	4213      	tst	r3, r2
100013ee:	d0fc      	beq.n	100013ea <clock_configure+0x7a>
100013f0:	e01a      	b.n	10001428 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013f2:	2280      	movs	r2, #128	; 0x80
100013f4:	0112      	lsls	r2, r2, #4
100013f6:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
100013f8:	4b16      	ldr	r3, [pc, #88]	; (10001454 <clock_configure+0xe4>)
100013fa:	00aa      	lsls	r2, r5, #2
100013fc:	58d1      	ldr	r1, [r2, r3]
100013fe:	2900      	cmp	r1, #0
10001400:	d005      	beq.n	1000140e <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001402:	6958      	ldr	r0, [r3, #20]
10001404:	f7fe fee4 	bl	100001d0 <__udivsi3>
10001408:	3001      	adds	r0, #1
            asm volatile (
1000140a:	3801      	subs	r0, #1
1000140c:	d1fd      	bne.n	1000140a <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
1000140e:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001410:	6823      	ldr	r3, [r4, #0]
10001412:	0152      	lsls	r2, r2, #5
10001414:	405a      	eors	r2, r3
10001416:	23e0      	movs	r3, #224	; 0xe0
10001418:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000141a:	2380      	movs	r3, #128	; 0x80
1000141c:	015b      	lsls	r3, r3, #5
1000141e:	4323      	orrs	r3, r4
10001420:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10001422:	9a00      	ldr	r2, [sp, #0]
10001424:	2a01      	cmp	r2, #1
10001426:	d9d9      	bls.n	100013dc <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001428:	2380      	movs	r3, #128	; 0x80
1000142a:	2280      	movs	r2, #128	; 0x80
1000142c:	019b      	lsls	r3, r3, #6
1000142e:	4323      	orrs	r3, r4
10001430:	0112      	lsls	r2, r2, #4
10001432:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001434:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10001436:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001438:	0032      	movs	r2, r6
1000143a:	2300      	movs	r3, #0
1000143c:	9903      	ldr	r1, [sp, #12]
1000143e:	f7fe ff2d 	bl	1000029c <__aeabi_uldivmod>
10001442:	4c04      	ldr	r4, [pc, #16]	; (10001454 <clock_configure+0xe4>)
10001444:	00ad      	lsls	r5, r5, #2
10001446:	5160      	str	r0, [r4, r5]
10001448:	2001      	movs	r0, #1

    return true;
}
1000144a:	b005      	add	sp, #20
1000144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000144e:	46c0      	nop			; (mov r8, r8)
10001450:	40008000 	.word	0x40008000
10001454:	20000150 	.word	0x20000150

10001458 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10001458:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000145a:	200c      	movs	r0, #12
1000145c:	f000 f8de 	bl	1000161c <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001460:	f000 f8e4 	bl	1000162c <running_on_fpga>
10001464:	2800      	cmp	r0, #0
10001466:	d00a      	beq.n	1000147e <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10001468:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
1000146a:	4a2c      	ldr	r2, [pc, #176]	; (1000151c <clocks_init+0xc4>)
1000146c:	482c      	ldr	r0, [pc, #176]	; (10001520 <clocks_init+0xc8>)
1000146e:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10001470:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10001472:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
10001474:	2b0a      	cmp	r3, #10
10001476:	d1fa      	bne.n	1000146e <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10001478:	4b2a      	ldr	r3, [pc, #168]	; (10001524 <clocks_init+0xcc>)
1000147a:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
1000147c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
1000147e:	4d2a      	ldr	r5, [pc, #168]	; (10001528 <clocks_init+0xd0>)
10001480:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10001482:	f000 f8b7 	bl	100015f4 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001486:	2201      	movs	r2, #1
10001488:	4b28      	ldr	r3, [pc, #160]	; (1000152c <clocks_init+0xd4>)
1000148a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
1000148c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000148e:	2b01      	cmp	r3, #1
10001490:	d1fc      	bne.n	1000148c <clocks_init+0x34>
10001492:	2203      	movs	r2, #3
10001494:	4b26      	ldr	r3, [pc, #152]	; (10001530 <clocks_init+0xd8>)
10001496:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001498:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000149a:	2c01      	cmp	r4, #1
1000149c:	d1fc      	bne.n	10001498 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000149e:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100014a0:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100014a2:	0021      	movs	r1, r4
100014a4:	9500      	str	r5, [sp, #0]
100014a6:	2306      	movs	r3, #6
100014a8:	4a22      	ldr	r2, [pc, #136]	; (10001534 <clocks_init+0xdc>)
100014aa:	4823      	ldr	r0, [pc, #140]	; (10001538 <clocks_init+0xe0>)
100014ac:	f000 f854 	bl	10001558 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100014b0:	0033      	movs	r3, r6
100014b2:	0021      	movs	r1, r4
100014b4:	4a21      	ldr	r2, [pc, #132]	; (1000153c <clocks_init+0xe4>)
100014b6:	4822      	ldr	r0, [pc, #136]	; (10001540 <clocks_init+0xe8>)
100014b8:	9600      	str	r6, [sp, #0]
100014ba:	f000 f84d 	bl	10001558 <pll_init>
    clock_configure(clk_ref,
100014be:	4b21      	ldr	r3, [pc, #132]	; (10001544 <clocks_init+0xec>)
100014c0:	0029      	movs	r1, r5
    clock_configure(clk_sys,
100014c2:	4d21      	ldr	r5, [pc, #132]	; (10001548 <clocks_init+0xf0>)
    clock_configure(clk_ref,
100014c4:	9300      	str	r3, [sp, #0]
100014c6:	2200      	movs	r2, #0
100014c8:	2004      	movs	r0, #4
100014ca:	f7ff ff51 	bl	10001370 <clock_configure>
    clock_configure(clk_sys,
100014ce:	002b      	movs	r3, r5
100014d0:	0021      	movs	r1, r4
100014d2:	2200      	movs	r2, #0
100014d4:	0030      	movs	r0, r6
100014d6:	9500      	str	r5, [sp, #0]
100014d8:	f7ff ff4a 	bl	10001370 <clock_configure>
    clock_configure(clk_usb,
100014dc:	2200      	movs	r2, #0
100014de:	4c10      	ldr	r4, [pc, #64]	; (10001520 <clocks_init+0xc8>)
100014e0:	0011      	movs	r1, r2
100014e2:	0023      	movs	r3, r4
100014e4:	9400      	str	r4, [sp, #0]
100014e6:	2007      	movs	r0, #7
100014e8:	f7ff ff42 	bl	10001370 <clock_configure>
    clock_configure(clk_adc,
100014ec:	2200      	movs	r2, #0
100014ee:	0023      	movs	r3, r4
100014f0:	0011      	movs	r1, r2
100014f2:	9400      	str	r4, [sp, #0]
100014f4:	2008      	movs	r0, #8
100014f6:	f7ff ff3b 	bl	10001370 <clock_configure>
    clock_configure(clk_rtc,
100014fa:	2200      	movs	r2, #0
100014fc:	4b09      	ldr	r3, [pc, #36]	; (10001524 <clocks_init+0xcc>)
100014fe:	0011      	movs	r1, r2
10001500:	9300      	str	r3, [sp, #0]
10001502:	2009      	movs	r0, #9
10001504:	0023      	movs	r3, r4
10001506:	f7ff ff33 	bl	10001370 <clock_configure>
    clock_configure(clk_peri,
1000150a:	2200      	movs	r2, #0
1000150c:	002b      	movs	r3, r5
1000150e:	0011      	movs	r1, r2
10001510:	9500      	str	r5, [sp, #0]
10001512:	2006      	movs	r0, #6
10001514:	f7ff ff2c 	bl	10001370 <clock_configure>
10001518:	e7b0      	b.n	1000147c <clocks_init+0x24>
1000151a:	46c0      	nop			; (mov r8, r8)
1000151c:	20000150 	.word	0x20000150
10001520:	02dc6c00 	.word	0x02dc6c00
10001524:	0000b71b 	.word	0x0000b71b
10001528:	40008000 	.word	0x40008000
1000152c:	4000b03c 	.word	0x4000b03c
10001530:	4000b030 	.word	0x4000b030
10001534:	59682f00 	.word	0x59682f00
10001538:	40028000 	.word	0x40028000
1000153c:	47868c00 	.word	0x47868c00
10001540:	4002c000 	.word	0x4002c000
10001544:	00b71b00 	.word	0x00b71b00
10001548:	07735940 	.word	0x07735940

1000154c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
1000154c:	4b01      	ldr	r3, [pc, #4]	; (10001554 <clock_get_hz+0x8>)
1000154e:	0080      	lsls	r0, r0, #2
10001550:	58c0      	ldr	r0, [r0, r3]
}
10001552:	4770      	bx	lr
10001554:	20000150 	.word	0x20000150

10001558 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000155a:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000155c:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000155e:	0017      	movs	r7, r2
10001560:	001e      	movs	r6, r3
10001562:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001564:	f7fe fe34 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10001568:	491d      	ldr	r1, [pc, #116]	; (100015e0 <pll_init+0x88>)
1000156a:	4341      	muls	r1, r0
1000156c:	0038      	movs	r0, r7
1000156e:	f7fe fe2f 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001572:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001574:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001576:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001578:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000157a:	6822      	ldr	r2, [r4, #0]
1000157c:	2a00      	cmp	r2, #0
1000157e:	da0f      	bge.n	100015a0 <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001580:	213f      	movs	r1, #63	; 0x3f
10001582:	6822      	ldr	r2, [r4, #0]
10001584:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001586:	42aa      	cmp	r2, r5
10001588:	d10a      	bne.n	100015a0 <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000158a:	68a2      	ldr	r2, [r4, #8]
1000158c:	0512      	lsls	r2, r2, #20
1000158e:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001590:	4282      	cmp	r2, r0
10001592:	d105      	bne.n	100015a0 <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10001594:	21ee      	movs	r1, #238	; 0xee
10001596:	68e2      	ldr	r2, [r4, #12]
10001598:	02c9      	lsls	r1, r1, #11
1000159a:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000159c:	429a      	cmp	r2, r3
1000159e:	d01b      	beq.n	100015d8 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100015a0:	4a10      	ldr	r2, [pc, #64]	; (100015e4 <pll_init+0x8c>)
100015a2:	4294      	cmp	r4, r2
100015a4:	d019      	beq.n	100015da <pll_init+0x82>
100015a6:	2280      	movs	r2, #128	; 0x80
100015a8:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015aa:	490f      	ldr	r1, [pc, #60]	; (100015e8 <pll_init+0x90>)
100015ac:	4e0f      	ldr	r6, [pc, #60]	; (100015ec <pll_init+0x94>)
100015ae:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015b0:	490f      	ldr	r1, [pc, #60]	; (100015f0 <pll_init+0x98>)
100015b2:	600a      	str	r2, [r1, #0]
100015b4:	0017      	movs	r7, r2
100015b6:	68b1      	ldr	r1, [r6, #8]
100015b8:	438f      	bics	r7, r1
100015ba:	d1fb      	bne.n	100015b4 <pll_init+0x5c>
100015bc:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
100015be:	1d21      	adds	r1, r4, #4
100015c0:	0192      	lsls	r2, r2, #6
100015c2:	430a      	orrs	r2, r1
100015c4:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
100015c6:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
100015c8:	60a0      	str	r0, [r4, #8]
100015ca:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100015cc:	6821      	ldr	r1, [r4, #0]
100015ce:	2900      	cmp	r1, #0
100015d0:	dafc      	bge.n	100015cc <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
100015d2:	60e3      	str	r3, [r4, #12]
100015d4:	2308      	movs	r3, #8
100015d6:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100015da:	2280      	movs	r2, #128	; 0x80
100015dc:	0192      	lsls	r2, r2, #6
100015de:	e7e4      	b.n	100015aa <pll_init+0x52>
100015e0:	000f4240 	.word	0x000f4240
100015e4:	4002c000 	.word	0x4002c000
100015e8:	4000e000 	.word	0x4000e000
100015ec:	4000c000 	.word	0x4000c000
100015f0:	4000f000 	.word	0x4000f000

100015f4 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100015f4:	22aa      	movs	r2, #170	; 0xaa
100015f6:	4b06      	ldr	r3, [pc, #24]	; (10001610 <xosc_init+0x1c>)
100015f8:	0112      	lsls	r2, r2, #4
100015fa:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100015fc:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015fe:	4905      	ldr	r1, [pc, #20]	; (10001614 <xosc_init+0x20>)
10001600:	60da      	str	r2, [r3, #12]
10001602:	4a05      	ldr	r2, [pc, #20]	; (10001618 <xosc_init+0x24>)
10001604:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001606:	685a      	ldr	r2, [r3, #4]
10001608:	2a00      	cmp	r2, #0
1000160a:	dafc      	bge.n	10001606 <xosc_init+0x12>
}
1000160c:	4770      	bx	lr
1000160e:	46c0      	nop			; (mov r8, r8)
10001610:	40024000 	.word	0x40024000
10001614:	00fab000 	.word	0x00fab000
10001618:	40026000 	.word	0x40026000

1000161c <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
1000161c:	2380      	movs	r3, #128	; 0x80
1000161e:	4a02      	ldr	r2, [pc, #8]	; (10001628 <watchdog_start_tick+0xc>)
10001620:	009b      	lsls	r3, r3, #2
10001622:	4303      	orrs	r3, r0
10001624:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001626:	4770      	bx	lr
10001628:	40058000 	.word	0x40058000

1000162c <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000162c:	4b02      	ldr	r3, [pc, #8]	; (10001638 <running_on_fpga+0xc>)
1000162e:	6818      	ldr	r0, [r3, #0]
10001630:	0780      	lsls	r0, r0, #30
10001632:	0fc0      	lsrs	r0, r0, #31
}
10001634:	4770      	bx	lr
10001636:	46c0      	nop			; (mov r8, r8)
10001638:	4006c000 	.word	0x4006c000

1000163c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
1000163c:	4b08      	ldr	r3, [pc, #32]	; (10001660 <gpio_set_function+0x24>)
1000163e:	0082      	lsls	r2, r0, #2
10001640:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001642:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10001644:	b510      	push	{r4, lr}
10001646:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001648:	00c0      	lsls	r0, r0, #3
1000164a:	4063      	eors	r3, r4
1000164c:	24c0      	movs	r4, #192	; 0xc0
1000164e:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001650:	2480      	movs	r4, #128	; 0x80
10001652:	0164      	lsls	r4, r4, #5
10001654:	4322      	orrs	r2, r4
10001656:	6013      	str	r3, [r2, #0]
10001658:	4b02      	ldr	r3, [pc, #8]	; (10001664 <gpio_set_function+0x28>)
1000165a:	18c0      	adds	r0, r0, r3
1000165c:	6041      	str	r1, [r0, #4]
}
1000165e:	bd10      	pop	{r4, pc}
10001660:	4001c004 	.word	0x4001c004
10001664:	40014000 	.word	0x40014000

10001668 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
10001668:	4b07      	ldr	r3, [pc, #28]	; (10001688 <gpio_set_pulls+0x20>)
1000166a:	0080      	lsls	r0, r0, #2
1000166c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000166e:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001670:	00c9      	lsls	r1, r1, #3
10001672:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10001674:	430a      	orrs	r2, r1
10001676:	405a      	eors	r2, r3
10001678:	230c      	movs	r3, #12
1000167a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000167c:	2380      	movs	r3, #128	; 0x80
1000167e:	015b      	lsls	r3, r3, #5
10001680:	4303      	orrs	r3, r0
10001682:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001684:	4770      	bx	lr
10001686:	46c0      	nop			; (mov r8, r8)
10001688:	4001c004 	.word	0x4001c004

1000168c <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
1000168c:	4b05      	ldr	r3, [pc, #20]	; (100016a4 <gpio_set_input_hysteresis_enabled+0x18>)
1000168e:	0080      	lsls	r0, r0, #2
10001690:	18c0      	adds	r0, r0, r3
10001692:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001694:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001696:	2900      	cmp	r1, #0
10001698:	d100      	bne.n	1000169c <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000169a:	23c0      	movs	r3, #192	; 0xc0
1000169c:	019b      	lsls	r3, r3, #6
1000169e:	4303      	orrs	r3, r0
100016a0:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
100016a2:	4770      	bx	lr
100016a4:	4001c004 	.word	0x4001c004

100016a8 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100016a8:	4b05      	ldr	r3, [pc, #20]	; (100016c0 <gpio_set_slew_rate+0x18>)
100016aa:	0080      	lsls	r0, r0, #2
100016ac:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016ae:	6803      	ldr	r3, [r0, #0]
100016b0:	4059      	eors	r1, r3
100016b2:	2301      	movs	r3, #1
100016b4:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016b6:	2380      	movs	r3, #128	; 0x80
100016b8:	015b      	lsls	r3, r3, #5
100016ba:	4303      	orrs	r3, r0
100016bc:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
100016be:	4770      	bx	lr
100016c0:	4001c004 	.word	0x4001c004

100016c4 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
100016c4:	4b06      	ldr	r3, [pc, #24]	; (100016e0 <gpio_set_drive_strength+0x1c>)
100016c6:	0080      	lsls	r0, r0, #2
100016c8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016ca:	6803      	ldr	r3, [r0, #0]
100016cc:	0109      	lsls	r1, r1, #4
100016ce:	4059      	eors	r1, r3
100016d0:	2330      	movs	r3, #48	; 0x30
100016d2:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016d4:	2380      	movs	r3, #128	; 0x80
100016d6:	015b      	lsls	r3, r3, #5
100016d8:	4303      	orrs	r3, r0
100016da:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
100016dc:	4770      	bx	lr
100016de:	46c0      	nop			; (mov r8, r8)
100016e0:	4001c004 	.word	0x4001c004

100016e4 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
100016e4:	2207      	movs	r2, #7
100016e6:	08c3      	lsrs	r3, r0, #3
100016e8:	4010      	ands	r0, r2
100016ea:	0080      	lsls	r0, r0, #2
100016ec:	4081      	lsls	r1, r0
100016ee:	4a02      	ldr	r2, [pc, #8]	; (100016f8 <gpio_acknowledge_irq+0x14>)
100016f0:	333c      	adds	r3, #60	; 0x3c
100016f2:	009b      	lsls	r3, r3, #2
100016f4:	5099      	str	r1, [r3, r2]
}
100016f6:	4770      	bx	lr
100016f8:	40014000 	.word	0x40014000

100016fc <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100016fe:	23d0      	movs	r3, #208	; 0xd0
10001700:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001702:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001704:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001706:	4263      	negs	r3, r4
10001708:	415c      	adcs	r4, r3
1000170a:	232f      	movs	r3, #47	; 0x2f
1000170c:	4264      	negs	r4, r4
1000170e:	439c      	bics	r4, r3
10001710:	4b0a      	ldr	r3, [pc, #40]	; (1000173c <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001712:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001714:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001716:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10001718:	f7ff ffe4 	bl	100016e4 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
1000171c:	2307      	movs	r3, #7
1000171e:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001720:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10001722:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001724:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10001726:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001728:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000172a:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000172c:	2e00      	cmp	r6, #0
1000172e:	d100      	bne.n	10001732 <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001730:	23c0      	movs	r3, #192	; 0xc0
10001732:	019b      	lsls	r3, r3, #6
10001734:	4323      	orrs	r3, r4
10001736:	601f      	str	r7, [r3, #0]
}
10001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000173a:	46c0      	nop			; (mov r8, r8)
1000173c:	40014130 	.word	0x40014130

10001740 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001740:	4b05      	ldr	r3, [pc, #20]	; (10001758 <gpio_set_input_enabled+0x18>)
10001742:	0080      	lsls	r0, r0, #2
10001744:	18c0      	adds	r0, r0, r3
10001746:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001748:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000174a:	2900      	cmp	r1, #0
1000174c:	d100      	bne.n	10001750 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000174e:	23c0      	movs	r3, #192	; 0xc0
10001750:	019b      	lsls	r3, r3, #6
10001752:	4303      	orrs	r3, r0
10001754:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10001756:	4770      	bx	lr
10001758:	4001c004 	.word	0x4001c004

1000175c <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000175c:	b570      	push	{r4, r5, r6, lr}
1000175e:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001760:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001762:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001764:	f7ff fef2 	bl	1000154c <clock_get_hz>
10001768:	0021      	movs	r1, r4
1000176a:	00c0      	lsls	r0, r0, #3
1000176c:	f7fe fd30 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10001770:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001772:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10001774:	d007      	beq.n	10001786 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10001776:	4b0e      	ldr	r3, [pc, #56]	; (100017b0 <uart_set_baudrate+0x54>)
10001778:	429d      	cmp	r5, r3
1000177a:	d815      	bhi.n	100017a8 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
1000177c:	237f      	movs	r3, #127	; 0x7f
1000177e:	4018      	ands	r0, r3
10001780:	1900      	adds	r0, r0, r4
10001782:	002c      	movs	r4, r5
10001784:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001786:	2380      	movs	r3, #128	; 0x80
10001788:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
1000178a:	6274      	str	r4, [r6, #36]	; 0x24
1000178c:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
1000178e:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001790:	362c      	adds	r6, #44	; 0x2c
10001792:	4333      	orrs	r3, r6
10001794:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001796:	2006      	movs	r0, #6
10001798:	f7ff fed8 	bl	1000154c <clock_get_hz>
1000179c:	01a1      	lsls	r1, r4, #6
1000179e:	1949      	adds	r1, r1, r5
100017a0:	0080      	lsls	r0, r0, #2
100017a2:	f7fe fd15 	bl	100001d0 <__udivsi3>
}
100017a6:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
100017a8:	2500      	movs	r5, #0
        baud_ibrd = 65535;
100017aa:	4c02      	ldr	r4, [pc, #8]	; (100017b4 <uart_set_baudrate+0x58>)
100017ac:	e7eb      	b.n	10001786 <uart_set_baudrate+0x2a>
100017ae:	46c0      	nop			; (mov r8, r8)
100017b0:	0000fffe 	.word	0x0000fffe
100017b4:	0000ffff 	.word	0x0000ffff

100017b8 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
100017b8:	b570      	push	{r4, r5, r6, lr}
100017ba:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
100017bc:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
100017be:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
100017c0:	f7ff fec4 	bl	1000154c <clock_get_hz>
100017c4:	2800      	cmp	r0, #0
100017c6:	d02e      	beq.n	10001826 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100017c8:	4b19      	ldr	r3, [pc, #100]	; (10001830 <uart_init+0x78>)
100017ca:	429c      	cmp	r4, r3
100017cc:	d02c      	beq.n	10001828 <uart_init+0x70>
100017ce:	2380      	movs	r3, #128	; 0x80
100017d0:	03db      	lsls	r3, r3, #15
100017d2:	4a18      	ldr	r2, [pc, #96]	; (10001834 <uart_init+0x7c>)
100017d4:	4918      	ldr	r1, [pc, #96]	; (10001838 <uart_init+0x80>)
100017d6:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100017d8:	4a18      	ldr	r2, [pc, #96]	; (1000183c <uart_init+0x84>)
100017da:	6013      	str	r3, [r2, #0]
100017dc:	0018      	movs	r0, r3
100017de:	688a      	ldr	r2, [r1, #8]
100017e0:	4390      	bics	r0, r2
100017e2:	d1fb      	bne.n	100017dc <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
100017e4:	4b16      	ldr	r3, [pc, #88]	; (10001840 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
100017e6:	4a17      	ldr	r2, [pc, #92]	; (10001844 <uart_init+0x8c>)
100017e8:	18e3      	adds	r3, r4, r3
100017ea:	4259      	negs	r1, r3
100017ec:	414b      	adcs	r3, r1
100017ee:	2180      	movs	r1, #128	; 0x80
100017f0:	005b      	lsls	r3, r3, #1
100017f2:	0049      	lsls	r1, r1, #1
100017f4:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
100017f6:	0020      	movs	r0, r4
100017f8:	0029      	movs	r1, r5
100017fa:	f7ff ffaf 	bl	1000175c <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100017fe:	2360      	movs	r3, #96	; 0x60
10001800:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001802:	0021      	movs	r1, r4
10001804:	4053      	eors	r3, r2
10001806:	226e      	movs	r2, #110	; 0x6e
10001808:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000180a:	2280      	movs	r2, #128	; 0x80
1000180c:	312c      	adds	r1, #44	; 0x2c
1000180e:	0152      	lsls	r2, r2, #5
10001810:	430a      	orrs	r2, r1
10001812:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001814:	4b0c      	ldr	r3, [pc, #48]	; (10001848 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001816:	2210      	movs	r2, #16
10001818:	6323      	str	r3, [r4, #48]	; 0x30
1000181a:	2380      	movs	r3, #128	; 0x80
1000181c:	019b      	lsls	r3, r3, #6
1000181e:	430b      	orrs	r3, r1
10001820:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10001822:	2303      	movs	r3, #3
10001824:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001826:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001828:	2380      	movs	r3, #128	; 0x80
1000182a:	041b      	lsls	r3, r3, #16
1000182c:	e7d1      	b.n	100017d2 <uart_init+0x1a>
1000182e:	46c0      	nop			; (mov r8, r8)
10001830:	40038000 	.word	0x40038000
10001834:	4000e000 	.word	0x4000e000
10001838:	4000c000 	.word	0x4000c000
1000183c:	4000f000 	.word	0x4000f000
10001840:	bffc8000 	.word	0xbffc8000
10001844:	200001a8 	.word	0x200001a8
10001848:	00000301 	.word	0x00000301

1000184c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
1000184c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
1000184e:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001850:	4e10      	ldr	r6, [pc, #64]	; (10001894 <z_sys_init_run_level+0x48>)
10001852:	0083      	lsls	r3, r0, #2
10001854:	3001      	adds	r0, #1
10001856:	599c      	ldr	r4, [r3, r6]
10001858:	0083      	lsls	r3, r0, #2
1000185a:	9301      	str	r3, [sp, #4]
1000185c:	9b01      	ldr	r3, [sp, #4]
1000185e:	58f3      	ldr	r3, [r6, r3]
10001860:	42a3      	cmp	r3, r4
10001862:	d800      	bhi.n	10001866 <z_sys_init_run_level+0x1a>
		}
	}
}
10001864:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10001866:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
10001868:	6823      	ldr	r3, [r4, #0]
1000186a:	0028      	movs	r0, r5
1000186c:	4798      	blx	r3
		if (dev != NULL) {
1000186e:	2d00      	cmp	r5, #0
10001870:	d00d      	beq.n	1000188e <z_sys_init_run_level+0x42>
			if (rc != 0) {
10001872:	2800      	cmp	r0, #0
10001874:	d007      	beq.n	10001886 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
10001876:	17c2      	asrs	r2, r0, #31
10001878:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
1000187a:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
1000187c:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
1000187e:	28ff      	cmp	r0, #255	; 0xff
10001880:	dd00      	ble.n	10001884 <z_sys_init_run_level+0x38>
10001882:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
10001884:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001886:	68ea      	ldr	r2, [r5, #12]
10001888:	7853      	ldrb	r3, [r2, #1]
1000188a:	433b      	orrs	r3, r7
1000188c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
1000188e:	3408      	adds	r4, #8
10001890:	e7e4      	b.n	1000185c <z_sys_init_run_level+0x10>
10001892:	46c0      	nop			; (mov r8, r8)
10001894:	10002db8 	.word	0x10002db8

10001898 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001898:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000189a:	2401      	movs	r4, #1
1000189c:	4b09      	ldr	r3, [pc, #36]	; (100018c4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000189e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
100018a0:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
100018a2:	f7ff ffd3 	bl	1000184c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
100018a6:	f000 fd37 	bl	10002318 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
100018aa:	2004      	movs	r0, #4
100018ac:	f7ff ffce 	bl	1000184c <z_sys_init_run_level>

	z_init_static_threads();
100018b0:	f000 f8ce 	bl	10001a50 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
100018b4:	f7fe fdc8 	bl	10000448 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
100018b8:	4a03      	ldr	r2, [pc, #12]	; (100018c8 <bg_thread_main+0x30>)
100018ba:	7b13      	ldrb	r3, [r2, #12]
100018bc:	43a3      	bics	r3, r4
100018be:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
100018c0:	bd10      	pop	{r4, pc}
100018c2:	46c0      	nop			; (mov r8, r8)
100018c4:	200001ac 	.word	0x200001ac
100018c8:	20000098 	.word	0x20000098

100018cc <z_bss_zero>:
{
100018cc:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
100018ce:	4a03      	ldr	r2, [pc, #12]	; (100018dc <z_bss_zero+0x10>)
100018d0:	4803      	ldr	r0, [pc, #12]	; (100018e0 <z_bss_zero+0x14>)
100018d2:	2100      	movs	r1, #0
100018d4:	1a12      	subs	r2, r2, r0
100018d6:	f001 f8cb 	bl	10002a70 <z_early_memset>
}
100018da:	bd10      	pop	{r4, pc}
100018dc:	200001b0 	.word	0x200001b0
100018e0:	20000028 	.word	0x20000028

100018e4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
100018e4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
100018e6:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
100018e8:	2501      	movs	r5, #1
{
100018ea:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
100018ec:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
100018ee:	0201      	lsls	r1, r0, #8
100018f0:	4811      	ldr	r0, [pc, #68]	; (10001938 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
100018f2:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
100018f4:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
100018f6:	2000      	movs	r0, #0
{
100018f8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
100018fa:	9504      	str	r5, [sp, #16]
100018fc:	350e      	adds	r5, #14
100018fe:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001900:	3505      	adds	r5, #5
10001902:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10001904:	4b0d      	ldr	r3, [pc, #52]	; (1000193c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10001906:	9005      	str	r0, [sp, #20]
10001908:	9002      	str	r0, [sp, #8]
1000190a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000190c:	480c      	ldr	r0, [pc, #48]	; (10001940 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000190e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001910:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10001912:	4b0c      	ldr	r3, [pc, #48]	; (10001944 <z_init_cpu+0x60>)
10001914:	0030      	movs	r0, r6
10001916:	9500      	str	r5, [sp, #0]
10001918:	0052      	lsls	r2, r2, #1
1000191a:	f000 f86f 	bl	100019fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000191e:	2204      	movs	r2, #4
10001920:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10001922:	742c      	strb	r4, [r5, #16]
10001924:	4393      	bics	r3, r2
10001926:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001928:	3401      	adds	r4, #1
1000192a:	4b07      	ldr	r3, [pc, #28]	; (10001948 <z_init_cpu+0x64>)
1000192c:	02e4      	lsls	r4, r4, #11
1000192e:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10001930:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10001932:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10001934:	b006      	add	sp, #24
10001936:	bd70      	pop	{r4, r5, r6, pc}
10001938:	200009b0 	.word	0x200009b0
1000193c:	20000028 	.word	0x20000028
10001940:	20000178 	.word	0x20000178
10001944:	10002a81 	.word	0x10002a81
10001948:	200001b0 	.word	0x200001b0

1000194c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
1000194c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
1000194e:	2000      	movs	r0, #0
{
10001950:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10001952:	f7ff ff7b 	bl	1000184c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10001956:	4b21      	ldr	r3, [pc, #132]	; (100019dc <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10001958:	f383 8808 	msr	MSP, r3
1000195c:	4920      	ldr	r1, [pc, #128]	; (100019e0 <z_cstart+0x94>)
1000195e:	4b21      	ldr	r3, [pc, #132]	; (100019e4 <z_cstart+0x98>)
10001960:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10001962:	2500      	movs	r5, #0
10001964:	401a      	ands	r2, r3
10001966:	23e0      	movs	r3, #224	; 0xe0
10001968:	041b      	lsls	r3, r3, #16
1000196a:	4313      	orrs	r3, r2
1000196c:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
1000196e:	f000 fd6d 	bl	1000244c <z_arm_fault_init>
	z_arm_cpu_idle_init();
10001972:	f7ff f961 	bl	10000c38 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10001976:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10001978:	4e1b      	ldr	r6, [pc, #108]	; (100019e8 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
1000197a:	ab06      	add	r3, sp, #24
1000197c:	32ff      	adds	r2, #255	; 0xff
1000197e:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001980:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001982:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001984:	f001 f849 	bl	10002a1a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10001988:	2001      	movs	r0, #1
1000198a:	f7ff ff5f 	bl	1000184c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
1000198e:	2002      	movs	r0, #2
10001990:	f7ff ff5c 	bl	1000184c <z_sys_init_run_level>
	z_sched_init();
10001994:	f000 fa60 	bl	10001e58 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001998:	4c14      	ldr	r4, [pc, #80]	; (100019ec <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000199a:	4b15      	ldr	r3, [pc, #84]	; (100019f0 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
1000199c:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000199e:	2280      	movs	r2, #128	; 0x80
100019a0:	9305      	str	r3, [sp, #20]
100019a2:	2301      	movs	r3, #1
100019a4:	4e13      	ldr	r6, [pc, #76]	; (100019f4 <z_cstart+0xa8>)
100019a6:	4914      	ldr	r1, [pc, #80]	; (100019f8 <z_cstart+0xac>)
100019a8:	9304      	str	r3, [sp, #16]
100019aa:	00d2      	lsls	r2, r2, #3
100019ac:	0033      	movs	r3, r6
100019ae:	0020      	movs	r0, r4
100019b0:	9503      	str	r5, [sp, #12]
100019b2:	9502      	str	r5, [sp, #8]
100019b4:	9501      	str	r5, [sp, #4]
100019b6:	9500      	str	r5, [sp, #0]
100019b8:	f000 f820 	bl	100019fc <z_setup_new_thread>
100019bc:	2204      	movs	r2, #4
100019be:	0007      	movs	r7, r0
100019c0:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
100019c2:	0020      	movs	r0, r4
100019c4:	4393      	bics	r3, r2
100019c6:	7363      	strb	r3, [r4, #13]
100019c8:	f001 f874 	bl	10002ab4 <z_ready_thread>
	z_init_cpu(0);
100019cc:	0028      	movs	r0, r5
100019ce:	f7ff ff89 	bl	100018e4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
100019d2:	0032      	movs	r2, r6
100019d4:	0039      	movs	r1, r7
100019d6:	0020      	movs	r0, r4
100019d8:	f7ff f9fa 	bl	10000dd0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
100019dc:	200009b0 	.word	0x200009b0
100019e0:	e000ed00 	.word	0xe000ed00
100019e4:	ff00ffff 	.word	0xff00ffff
100019e8:	20000178 	.word	0x20000178
100019ec:	20000098 	.word	0x20000098
100019f0:	10002eef 	.word	0x10002eef
100019f4:	10001899 	.word	0x10001899
100019f8:	20000ab0 	.word	0x20000ab0

100019fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
100019fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
100019fe:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001a00:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001a02:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001a04:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001a06:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001a08:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001a0a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001a0c:	2004      	movs	r0, #4
10001a0e:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10001a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001a12:	3207      	adds	r2, #7
	thread_base->prio = priority;
10001a14:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001a16:	2007      	movs	r0, #7
10001a18:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10001a1a:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10001a1e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001a20:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001a22:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001a24:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001a26:	9202      	str	r2, [sp, #8]
10001a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001a2a:	0020      	movs	r0, r4
10001a2c:	9201      	str	r2, [sp, #4]
10001a2e:	9a08      	ldr	r2, [sp, #32]
10001a30:	9200      	str	r2, [sp, #0]
10001a32:	002a      	movs	r2, r5
10001a34:	f7ff f9b6 	bl	10000da4 <arch_new_thread>
	if (!_current) {
10001a38:	4b04      	ldr	r3, [pc, #16]	; (10001a4c <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001a3a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001a3c:	689b      	ldr	r3, [r3, #8]
10001a3e:	42b3      	cmp	r3, r6
10001a40:	d000      	beq.n	10001a44 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001a44:	0028      	movs	r0, r5
10001a46:	6663      	str	r3, [r4, #100]	; 0x64
10001a48:	b004      	add	sp, #16
10001a4a:	bd70      	pop	{r4, r5, r6, pc}
10001a4c:	20000178 	.word	0x20000178

10001a50 <z_init_static_threads>:
{
10001a50:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001a52:	4c20      	ldr	r4, [pc, #128]	; (10001ad4 <z_init_static_threads+0x84>)
{
10001a54:	b086      	sub	sp, #24
10001a56:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001a58:	4d1f      	ldr	r5, [pc, #124]	; (10001ad8 <z_init_static_threads+0x88>)
10001a5a:	42ac      	cmp	r4, r5
10001a5c:	d308      	bcc.n	10001a70 <z_init_static_threads+0x20>
	k_sched_lock();
10001a5e:	f000 f9d5 	bl	10001e0c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001a62:	0034      	movs	r4, r6
10001a64:	42ac      	cmp	r4, r5
10001a66:	d319      	bcc.n	10001a9c <z_init_static_threads+0x4c>
	k_sched_unlock();
10001a68:	f000 f9e0 	bl	10001e2c <k_sched_unlock>
}
10001a6c:	b006      	add	sp, #24
10001a6e:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001a72:	9305      	str	r3, [sp, #20]
10001a74:	6a23      	ldr	r3, [r4, #32]
10001a76:	9304      	str	r3, [sp, #16]
10001a78:	69e3      	ldr	r3, [r4, #28]
10001a7a:	9303      	str	r3, [sp, #12]
10001a7c:	69a3      	ldr	r3, [r4, #24]
10001a7e:	9302      	str	r3, [sp, #8]
10001a80:	6963      	ldr	r3, [r4, #20]
10001a82:	9301      	str	r3, [sp, #4]
10001a84:	6923      	ldr	r3, [r4, #16]
10001a86:	9300      	str	r3, [sp, #0]
10001a88:	68e3      	ldr	r3, [r4, #12]
10001a8a:	68a2      	ldr	r2, [r4, #8]
10001a8c:	6861      	ldr	r1, [r4, #4]
10001a8e:	6820      	ldr	r0, [r4, #0]
10001a90:	f7ff ffb4 	bl	100019fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001a94:	6823      	ldr	r3, [r4, #0]
10001a96:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001a98:	342c      	adds	r4, #44	; 0x2c
10001a9a:	e7dd      	b.n	10001a58 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
10001a9e:	1c5a      	adds	r2, r3, #1
10001aa0:	d00f      	beq.n	10001ac2 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001aa2:	43d8      	mvns	r0, r3
10001aa4:	17c0      	asrs	r0, r0, #31
10001aa6:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001aa8:	220a      	movs	r2, #10
10001aaa:	2300      	movs	r3, #0
10001aac:	17c1      	asrs	r1, r0, #31
10001aae:	f7fe fc39 	bl	10000324 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001ab2:	6826      	ldr	r6, [r4, #0]
10001ab4:	000b      	movs	r3, r1
10001ab6:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001ab8:	4301      	orrs	r1, r0
10001aba:	d104      	bne.n	10001ac6 <z_init_static_threads+0x76>
	z_sched_start(thread);
10001abc:	0030      	movs	r0, r6
10001abe:	f000 f95f 	bl	10001d80 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001ac2:	342c      	adds	r4, #44	; 0x2c
10001ac4:	e7ce      	b.n	10001a64 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001ac6:	0030      	movs	r0, r6
10001ac8:	4904      	ldr	r1, [pc, #16]	; (10001adc <z_init_static_threads+0x8c>)
10001aca:	3018      	adds	r0, #24
10001acc:	f000 fb32 	bl	10002134 <z_add_timeout>
10001ad0:	e7f7      	b.n	10001ac2 <z_init_static_threads+0x72>
10001ad2:	46c0      	nop			; (mov r8, r8)
10001ad4:	10002cc0 	.word	0x10002cc0
10001ad8:	10002cc0 	.word	0x10002cc0
10001adc:	10002b0b 	.word	0x10002b0b

10001ae0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10001ae0:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001ae2:	4b04      	ldr	r3, [pc, #16]	; (10001af4 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10001ae4:	4a04      	ldr	r2, [pc, #16]	; (10001af8 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001ae6:	1ac0      	subs	r0, r0, r3
10001ae8:	4b04      	ldr	r3, [pc, #16]	; (10001afc <slice_timeout+0x1c>)
10001aea:	10c0      	asrs	r0, r0, #3
10001aec:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10001aee:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10001af0:	4770      	bx	lr
10001af2:	46c0      	nop			; (mov r8, r8)
10001af4:	20000108 	.word	0x20000108
10001af8:	200001ad 	.word	0x200001ad
10001afc:	aaaaaaab 	.word	0xaaaaaaab

10001b00 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10001b00:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10001b02:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10001b04:	4b0a      	ldr	r3, [pc, #40]	; (10001b30 <z_reset_time_slice+0x30>)
10001b06:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10001b08:	4b0a      	ldr	r3, [pc, #40]	; (10001b34 <z_reset_time_slice+0x34>)
10001b0a:	436c      	muls	r4, r5
10001b0c:	18e4      	adds	r4, r4, r3
10001b0e:	0020      	movs	r0, r4
10001b10:	f001 f816 	bl	10002b40 <z_abort_timeout>
	int ret = slice_ticks;
10001b14:	4b08      	ldr	r3, [pc, #32]	; (10001b38 <z_reset_time_slice+0x38>)
10001b16:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
10001b18:	2a00      	cmp	r2, #0
10001b1a:	d008      	beq.n	10001b2e <z_reset_time_slice+0x2e>
		slice_expired[cpu] = false;
10001b1c:	2100      	movs	r1, #0
10001b1e:	4b07      	ldr	r3, [pc, #28]	; (10001b3c <z_reset_time_slice+0x3c>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
10001b20:	3a01      	subs	r2, #1
		slice_expired[cpu] = false;
10001b22:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001b24:	0020      	movs	r0, r4
10001b26:	4906      	ldr	r1, [pc, #24]	; (10001b40 <z_reset_time_slice+0x40>)
			      K_TICKS(slice_time(curr) - 1));
10001b28:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001b2a:	f000 fb03 	bl	10002134 <z_add_timeout>
	}
}
10001b2e:	bd70      	pop	{r4, r5, r6, pc}
10001b30:	20000178 	.word	0x20000178
10001b34:	20000108 	.word	0x20000108
10001b38:	200001a0 	.word	0x200001a0
10001b3c:	200001ad 	.word	0x200001ad
10001b40:	10001ae1 	.word	0x10001ae1

10001b44 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10001b44:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10001b46:	4d0e      	ldr	r5, [pc, #56]	; (10001b80 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001b48:	4b0e      	ldr	r3, [pc, #56]	; (10001b84 <update_cache+0x40>)
	return list->head == list;
10001b4a:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001b4c:	429c      	cmp	r4, r3
10001b4e:	d001      	beq.n	10001b54 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10001b50:	2c00      	cmp	r4, #0
10001b52:	d100      	bne.n	10001b56 <update_cache+0x12>
10001b54:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10001b56:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10001b58:	2800      	cmp	r0, #0
10001b5a:	d108      	bne.n	10001b6e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10001b5c:	7b5a      	ldrb	r2, [r3, #13]
10001b5e:	06d2      	lsls	r2, r2, #27
10001b60:	d105      	bne.n	10001b6e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10001b62:	69a2      	ldr	r2, [r4, #24]
10001b64:	2a00      	cmp	r2, #0
10001b66:	d102      	bne.n	10001b6e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10001b68:	89da      	ldrh	r2, [r3, #14]
10001b6a:	2a7f      	cmp	r2, #127	; 0x7f
10001b6c:	d805      	bhi.n	10001b7a <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10001b6e:	429c      	cmp	r4, r3
10001b70:	d002      	beq.n	10001b78 <update_cache+0x34>
			z_reset_time_slice(thread);
10001b72:	0020      	movs	r0, r4
10001b74:	f7ff ffc4 	bl	10001b00 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10001b78:	0023      	movs	r3, r4
10001b7a:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10001b7c:	bd70      	pop	{r4, r5, r6, pc}
10001b7e:	46c0      	nop			; (mov r8, r8)
10001b80:	20000178 	.word	0x20000178
10001b84:	20000190 	.word	0x20000190

10001b88 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10001b88:	220d      	movs	r2, #13
{
10001b8a:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10001b8c:	5682      	ldrsb	r2, [r0, r2]
{
10001b8e:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001b90:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001b92:	2a00      	cmp	r2, #0
10001b94:	da04      	bge.n	10001ba0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001b96:	227f      	movs	r2, #127	; 0x7f
10001b98:	4013      	ands	r3, r2
10001b9a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10001b9c:	f000 ff77 	bl	10002a8e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001ba0:	2380      	movs	r3, #128	; 0x80
10001ba2:	7b62      	ldrb	r2, [r4, #13]
10001ba4:	425b      	negs	r3, r3
10001ba6:	4313      	orrs	r3, r2
	return list->head == list;
10001ba8:	4a13      	ldr	r2, [pc, #76]	; (10001bf8 <move_thread_to_end_of_prio_q+0x70>)
10001baa:	7363      	strb	r3, [r4, #13]
10001bac:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001bae:	4813      	ldr	r0, [pc, #76]	; (10001bfc <move_thread_to_end_of_prio_q+0x74>)
10001bb0:	4283      	cmp	r3, r0
10001bb2:	d100      	bne.n	10001bb6 <move_thread_to_end_of_prio_q+0x2e>
10001bb4:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10001bb6:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001bb8:	2b00      	cmp	r3, #0
10001bba:	d104      	bne.n	10001bc6 <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10001bbc:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10001bbe:	6061      	str	r1, [r4, #4]

	tail->next = node;
10001bc0:	600c      	str	r4, [r1, #0]
	list->tail = node;
10001bc2:	61d4      	str	r4, [r2, #28]
}
10001bc4:	e00c      	b.n	10001be0 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10001bc6:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001bc8:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001bca:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10001bcc:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001bce:	42b5      	cmp	r5, r6
10001bd0:	d00d      	beq.n	10001bee <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001bd2:	42ae      	cmp	r6, r5
10001bd4:	dd0b      	ble.n	10001bee <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10001bd6:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10001bd8:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10001bda:	6061      	str	r1, [r4, #4]
	prev->next = node;
10001bdc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10001bde:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10001be0:	6890      	ldr	r0, [r2, #8]
10001be2:	1b00      	subs	r0, r0, r4
10001be4:	4243      	negs	r3, r0
10001be6:	4158      	adcs	r0, r3
10001be8:	f7ff ffac 	bl	10001b44 <update_cache>
}
10001bec:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001bee:	4299      	cmp	r1, r3
10001bf0:	d0e4      	beq.n	10001bbc <move_thread_to_end_of_prio_q+0x34>
10001bf2:	681b      	ldr	r3, [r3, #0]
10001bf4:	e7e0      	b.n	10001bb8 <move_thread_to_end_of_prio_q+0x30>
10001bf6:	46c0      	nop			; (mov r8, r8)
10001bf8:	20000178 	.word	0x20000178
10001bfc:	20000190 	.word	0x20000190

10001c00 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001c00:	230d      	movs	r3, #13
{
10001c02:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001c04:	56c3      	ldrsb	r3, [r0, r3]
10001c06:	7b41      	ldrb	r1, [r0, #13]
10001c08:	2b00      	cmp	r3, #0
10001c0a:	db26      	blt.n	10001c5a <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10001c0c:	06cb      	lsls	r3, r1, #27
10001c0e:	d124      	bne.n	10001c5a <ready_thread+0x5a>
	return node->next != NULL;
10001c10:	6983      	ldr	r3, [r0, #24]
10001c12:	2b00      	cmp	r3, #0
10001c14:	d121      	bne.n	10001c5a <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10001c16:	2280      	movs	r2, #128	; 0x80
10001c18:	4252      	negs	r2, r2
10001c1a:	430a      	orrs	r2, r1
10001c1c:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10001c1e:	4a11      	ldr	r2, [pc, #68]	; (10001c64 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001c20:	4c11      	ldr	r4, [pc, #68]	; (10001c68 <ready_thread+0x68>)
	return list->head == list;
10001c22:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001c24:	42a1      	cmp	r1, r4
10001c26:	d000      	beq.n	10001c2a <ready_thread+0x2a>
10001c28:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10001c2a:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001c2c:	2b00      	cmp	r3, #0
10001c2e:	d104      	bne.n	10001c3a <ready_thread+0x3a>
	node->next = list;
10001c30:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10001c32:	6041      	str	r1, [r0, #4]
	tail->next = node;
10001c34:	6008      	str	r0, [r1, #0]
	list->tail = node;
10001c36:	61d0      	str	r0, [r2, #28]
}
10001c38:	e00c      	b.n	10001c54 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10001c3a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001c3c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001c3e:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10001c40:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001c42:	42b5      	cmp	r5, r6
10001c44:	d00a      	beq.n	10001c5c <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001c46:	42ae      	cmp	r6, r5
10001c48:	dd08      	ble.n	10001c5c <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10001c4a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10001c4c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10001c4e:	6042      	str	r2, [r0, #4]
	prev->next = node;
10001c50:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10001c52:	6058      	str	r0, [r3, #4]
		update_cache(0);
10001c54:	2000      	movs	r0, #0
10001c56:	f7ff ff75 	bl	10001b44 <update_cache>
}
10001c5a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001c5c:	428b      	cmp	r3, r1
10001c5e:	d0e7      	beq.n	10001c30 <ready_thread+0x30>
10001c60:	681b      	ldr	r3, [r3, #0]
10001c62:	e7e3      	b.n	10001c2c <ready_thread+0x2c>
10001c64:	20000178 	.word	0x20000178
10001c68:	20000190 	.word	0x20000190

10001c6c <unready_thread>:
	if (z_is_thread_queued(thread)) {
10001c6c:	220d      	movs	r2, #13
{
10001c6e:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10001c70:	5682      	ldrsb	r2, [r0, r2]
{
10001c72:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001c74:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001c76:	2a00      	cmp	r2, #0
10001c78:	da04      	bge.n	10001c84 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001c7a:	227f      	movs	r2, #127	; 0x7f
10001c7c:	4013      	ands	r3, r2
10001c7e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001c80:	f000 ff05 	bl	10002a8e <sys_dlist_remove>
	update_cache(thread == _current);
10001c84:	4b03      	ldr	r3, [pc, #12]	; (10001c94 <unready_thread+0x28>)
10001c86:	6898      	ldr	r0, [r3, #8]
10001c88:	1b00      	subs	r0, r0, r4
10001c8a:	4243      	negs	r3, r0
10001c8c:	4158      	adcs	r0, r3
10001c8e:	f7ff ff59 	bl	10001b44 <update_cache>
}
10001c92:	bd10      	pop	{r4, pc}
10001c94:	20000178 	.word	0x20000178

10001c98 <k_sched_time_slice_set>:
{
10001c98:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001c9a:	f3ef 8410 	mrs	r4, PRIMASK
10001c9e:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10001ca0:	230a      	movs	r3, #10
10001ca2:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10001ca4:	2800      	cmp	r0, #0
10001ca6:	dd02      	ble.n	10001cae <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10001ca8:	2b02      	cmp	r3, #2
10001caa:	da00      	bge.n	10001cae <k_sched_time_slice_set+0x16>
10001cac:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10001cae:	4a07      	ldr	r2, [pc, #28]	; (10001ccc <k_sched_time_slice_set+0x34>)
10001cb0:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10001cb2:	4b07      	ldr	r3, [pc, #28]	; (10001cd0 <k_sched_time_slice_set+0x38>)
10001cb4:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10001cb6:	4b07      	ldr	r3, [pc, #28]	; (10001cd4 <k_sched_time_slice_set+0x3c>)
10001cb8:	6898      	ldr	r0, [r3, #8]
10001cba:	f7ff ff21 	bl	10001b00 <z_reset_time_slice>
	if (key != 0U) {
10001cbe:	2c00      	cmp	r4, #0
10001cc0:	d102      	bne.n	10001cc8 <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10001cc2:	b662      	cpsie	i
10001cc4:	f3bf 8f6f 	isb	sy
}
10001cc8:	bd10      	pop	{r4, pc}
10001cca:	46c0      	nop			; (mov r8, r8)
10001ccc:	200001a0 	.word	0x200001a0
10001cd0:	2000019c 	.word	0x2000019c
10001cd4:	20000178 	.word	0x20000178

10001cd8 <z_time_slice>:
{
10001cd8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001cda:	f3ef 8510 	mrs	r5, PRIMASK
10001cde:	b672      	cpsid	i
	if (pending_current == _current) {
10001ce0:	4a16      	ldr	r2, [pc, #88]	; (10001d3c <z_time_slice+0x64>)
10001ce2:	4b17      	ldr	r3, [pc, #92]	; (10001d40 <z_time_slice+0x68>)
10001ce4:	6894      	ldr	r4, [r2, #8]
10001ce6:	6819      	ldr	r1, [r3, #0]
10001ce8:	428c      	cmp	r4, r1
10001cea:	d108      	bne.n	10001cfe <z_time_slice+0x26>
	z_reset_time_slice(curr);
10001cec:	0020      	movs	r0, r4
10001cee:	f7ff ff07 	bl	10001b00 <z_reset_time_slice>
	if (key != 0U) {
10001cf2:	2d00      	cmp	r5, #0
10001cf4:	d102      	bne.n	10001cfc <z_time_slice+0x24>
	__asm__ volatile(
10001cf6:	b662      	cpsie	i
10001cf8:	f3bf 8f6f 	isb	sy
}
10001cfc:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10001cfe:	2100      	movs	r1, #0
10001d00:	6019      	str	r1, [r3, #0]
	int ret = slice_ticks;
10001d02:	4b10      	ldr	r3, [pc, #64]	; (10001d44 <z_time_slice+0x6c>)
	if (slice_time(_current) && sliceable(_current)) {
10001d04:	681b      	ldr	r3, [r3, #0]
10001d06:	428b      	cmp	r3, r1
10001d08:	d0f3      	beq.n	10001cf2 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001d0a:	89e3      	ldrh	r3, [r4, #14]
10001d0c:	2b7f      	cmp	r3, #127	; 0x7f
10001d0e:	d8f0      	bhi.n	10001cf2 <z_time_slice+0x1a>
		&& !z_is_thread_prevented_from_running(thread)
10001d10:	7b63      	ldrb	r3, [r4, #13]
10001d12:	06db      	lsls	r3, r3, #27
10001d14:	d1ed      	bne.n	10001cf2 <z_time_slice+0x1a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001d16:	210e      	movs	r1, #14
10001d18:	4b0b      	ldr	r3, [pc, #44]	; (10001d48 <z_time_slice+0x70>)
10001d1a:	5661      	ldrsb	r1, [r4, r1]
10001d1c:	681b      	ldr	r3, [r3, #0]
10001d1e:	4299      	cmp	r1, r3
10001d20:	dbe7      	blt.n	10001cf2 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001d22:	4b0a      	ldr	r3, [pc, #40]	; (10001d4c <z_time_slice+0x74>)
10001d24:	429c      	cmp	r4, r3
10001d26:	d0e4      	beq.n	10001cf2 <z_time_slice+0x1a>
		if (slice_expired[_current_cpu->id]) {
10001d28:	4b09      	ldr	r3, [pc, #36]	; (10001d50 <z_time_slice+0x78>)
10001d2a:	7c12      	ldrb	r2, [r2, #16]
10001d2c:	5c9b      	ldrb	r3, [r3, r2]
10001d2e:	2b00      	cmp	r3, #0
10001d30:	d0df      	beq.n	10001cf2 <z_time_slice+0x1a>
		move_thread_to_end_of_prio_q(curr);
10001d32:	0020      	movs	r0, r4
10001d34:	f7ff ff28 	bl	10001b88 <move_thread_to_end_of_prio_q>
10001d38:	e7d8      	b.n	10001cec <z_time_slice+0x14>
10001d3a:	46c0      	nop			; (mov r8, r8)
10001d3c:	20000178 	.word	0x20000178
10001d40:	20000198 	.word	0x20000198
10001d44:	200001a0 	.word	0x200001a0
10001d48:	2000019c 	.word	0x2000019c
10001d4c:	20000028 	.word	0x20000028
10001d50:	200001ad 	.word	0x200001ad

10001d54 <z_reschedule>:
{
10001d54:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10001d56:	2900      	cmp	r1, #0
10001d58:	d10a      	bne.n	10001d70 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001d5a:	f3ef 8005 	mrs	r0, IPSR
10001d5e:	2800      	cmp	r0, #0
10001d60:	d107      	bne.n	10001d72 <z_reschedule+0x1e>
	return new_thread != _current;
10001d62:	4b06      	ldr	r3, [pc, #24]	; (10001d7c <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10001d64:	689a      	ldr	r2, [r3, #8]
10001d66:	695b      	ldr	r3, [r3, #20]
10001d68:	429a      	cmp	r2, r3
10001d6a:	d002      	beq.n	10001d72 <z_reschedule+0x1e>
	ret = arch_swap(key);
10001d6c:	f7fe ffc0 	bl	10000cf0 <arch_swap>
}
10001d70:	bd10      	pop	{r4, pc}
10001d72:	b662      	cpsie	i
10001d74:	f3bf 8f6f 	isb	sy
10001d78:	e7fa      	b.n	10001d70 <z_reschedule+0x1c>
10001d7a:	46c0      	nop			; (mov r8, r8)
10001d7c:	20000178 	.word	0x20000178

10001d80 <z_sched_start>:
{
10001d80:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001d82:	f3ef 8410 	mrs	r4, PRIMASK
10001d86:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10001d88:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10001d8a:	7b43      	ldrb	r3, [r0, #13]
10001d8c:	4213      	tst	r3, r2
10001d8e:	d105      	bne.n	10001d9c <z_sched_start+0x1c>
	if (key != 0U) {
10001d90:	2c00      	cmp	r4, #0
10001d92:	d102      	bne.n	10001d9a <z_sched_start+0x1a>
	__asm__ volatile(
10001d94:	b662      	cpsie	i
10001d96:	f3bf 8f6f 	isb	sy
}
10001d9a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001d9c:	4393      	bics	r3, r2
10001d9e:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10001da0:	f7ff ff2e 	bl	10001c00 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10001da4:	0021      	movs	r1, r4
10001da6:	4802      	ldr	r0, [pc, #8]	; (10001db0 <z_sched_start+0x30>)
10001da8:	f7ff ffd4 	bl	10001d54 <z_reschedule>
10001dac:	e7f5      	b.n	10001d9a <z_sched_start+0x1a>
10001dae:	46c0      	nop			; (mov r8, r8)
10001db0:	200001ae 	.word	0x200001ae

10001db4 <z_impl_k_thread_suspend>:
{
10001db4:	b570      	push	{r4, r5, r6, lr}
10001db6:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10001db8:	3018      	adds	r0, #24
10001dba:	f000 fec1 	bl	10002b40 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10001dbe:	f3ef 8610 	mrs	r6, PRIMASK
10001dc2:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10001dc4:	220d      	movs	r2, #13
10001dc6:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
10001dc8:	7b63      	ldrb	r3, [r4, #13]
10001dca:	2a00      	cmp	r2, #0
10001dcc:	da05      	bge.n	10001dda <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001dce:	227f      	movs	r2, #127	; 0x7f
10001dd0:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10001dd2:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001dd4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001dd6:	f000 fe5a 	bl	10002a8e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10001dda:	2310      	movs	r3, #16
		update_cache(thread == _current);
10001ddc:	4d0a      	ldr	r5, [pc, #40]	; (10001e08 <z_impl_k_thread_suspend+0x54>)
10001dde:	7b62      	ldrb	r2, [r4, #13]
10001de0:	68a8      	ldr	r0, [r5, #8]
10001de2:	4313      	orrs	r3, r2
10001de4:	1b00      	subs	r0, r0, r4
10001de6:	7363      	strb	r3, [r4, #13]
10001de8:	4243      	negs	r3, r0
10001dea:	4158      	adcs	r0, r3
10001dec:	f7ff feaa 	bl	10001b44 <update_cache>
	if (key != 0U) {
10001df0:	2e00      	cmp	r6, #0
10001df2:	d102      	bne.n	10001dfa <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
10001df4:	b662      	cpsie	i
10001df6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10001dfa:	68ab      	ldr	r3, [r5, #8]
10001dfc:	42a3      	cmp	r3, r4
10001dfe:	d101      	bne.n	10001e04 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10001e00:	f000 fe97 	bl	10002b32 <z_reschedule_unlocked>
}
10001e04:	bd70      	pop	{r4, r5, r6, pc}
10001e06:	46c0      	nop			; (mov r8, r8)
10001e08:	20000178 	.word	0x20000178

10001e0c <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10001e0c:	f3ef 8110 	mrs	r1, PRIMASK
10001e10:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10001e12:	4b05      	ldr	r3, [pc, #20]	; (10001e28 <k_sched_lock+0x1c>)
10001e14:	689a      	ldr	r2, [r3, #8]
10001e16:	7bd3      	ldrb	r3, [r2, #15]
10001e18:	3b01      	subs	r3, #1
10001e1a:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10001e1c:	2900      	cmp	r1, #0
10001e1e:	d102      	bne.n	10001e26 <k_sched_lock+0x1a>
	__asm__ volatile(
10001e20:	b662      	cpsie	i
10001e22:	f3bf 8f6f 	isb	sy
}
10001e26:	4770      	bx	lr
10001e28:	20000178 	.word	0x20000178

10001e2c <k_sched_unlock>:
{
10001e2c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001e2e:	f3ef 8410 	mrs	r4, PRIMASK
10001e32:	b672      	cpsid	i
		++_current->base.sched_locked;
10001e34:	4b07      	ldr	r3, [pc, #28]	; (10001e54 <k_sched_unlock+0x28>)
		update_cache(0);
10001e36:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10001e38:	689a      	ldr	r2, [r3, #8]
10001e3a:	7bd3      	ldrb	r3, [r2, #15]
10001e3c:	3301      	adds	r3, #1
10001e3e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10001e40:	f7ff fe80 	bl	10001b44 <update_cache>
	if (key != 0U) {
10001e44:	2c00      	cmp	r4, #0
10001e46:	d102      	bne.n	10001e4e <k_sched_unlock+0x22>
	__asm__ volatile(
10001e48:	b662      	cpsie	i
10001e4a:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10001e4e:	f000 fe70 	bl	10002b32 <z_reschedule_unlocked>
}
10001e52:	bd10      	pop	{r4, pc}
10001e54:	20000178 	.word	0x20000178

10001e58 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10001e58:	2100      	movs	r1, #0
{
10001e5a:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10001e5c:	4b03      	ldr	r3, [pc, #12]	; (10001e6c <z_sched_init+0x14>)
10001e5e:	4a04      	ldr	r2, [pc, #16]	; (10001e70 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10001e60:	0008      	movs	r0, r1
10001e62:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10001e64:	61da      	str	r2, [r3, #28]
10001e66:	f7ff ff17 	bl	10001c98 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10001e6a:	bd10      	pop	{r4, pc}
10001e6c:	20000178 	.word	0x20000178
10001e70:	20000190 	.word	0x20000190

10001e74 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001e76:	f3ef 8510 	mrs	r5, PRIMASK
10001e7a:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001e7c:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10001e7e:	4c19      	ldr	r4, [pc, #100]	; (10001ee4 <z_impl_k_yield+0x70>)
10001e80:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001e82:	7b43      	ldrb	r3, [r0, #13]
10001e84:	4013      	ands	r3, r2
10001e86:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001e88:	f000 fe01 	bl	10002a8e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001e8c:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10001e8e:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10001e90:	4252      	negs	r2, r2
10001e92:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e94:	4814      	ldr	r0, [pc, #80]	; (10001ee8 <z_impl_k_yield+0x74>)
10001e96:	430a      	orrs	r2, r1
10001e98:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10001e9a:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e9c:	4282      	cmp	r2, r0
10001e9e:	d100      	bne.n	10001ea2 <z_impl_k_yield+0x2e>
10001ea0:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10001ea2:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001ea4:	2a00      	cmp	r2, #0
10001ea6:	d104      	bne.n	10001eb2 <z_impl_k_yield+0x3e>
	node->next = list;
10001ea8:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10001eaa:	6059      	str	r1, [r3, #4]
	tail->next = node;
10001eac:	600b      	str	r3, [r1, #0]
	list->tail = node;
10001eae:	61e3      	str	r3, [r4, #28]
}
10001eb0:	e00c      	b.n	10001ecc <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10001eb2:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10001eb4:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10001eb6:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10001eb8:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
10001eba:	42be      	cmp	r6, r7
10001ebc:	d00d      	beq.n	10001eda <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001ebe:	42b7      	cmp	r7, r6
10001ec0:	dd0b      	ble.n	10001eda <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
10001ec2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10001ec4:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10001ec6:	6059      	str	r1, [r3, #4]
	prev->next = node;
10001ec8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10001eca:	6053      	str	r3, [r2, #4]
	update_cache(1);
10001ecc:	2001      	movs	r0, #1
10001ece:	f7ff fe39 	bl	10001b44 <update_cache>
10001ed2:	0028      	movs	r0, r5
10001ed4:	f7fe ff0c 	bl	10000cf0 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10001ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10001eda:	428a      	cmp	r2, r1
10001edc:	d0e4      	beq.n	10001ea8 <z_impl_k_yield+0x34>
10001ede:	6812      	ldr	r2, [r2, #0]
10001ee0:	e7e0      	b.n	10001ea4 <z_impl_k_yield+0x30>
10001ee2:	46c0      	nop			; (mov r8, r8)
10001ee4:	20000178 	.word	0x20000178
10001ee8:	20000190 	.word	0x20000190

10001eec <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10001eec:	0003      	movs	r3, r0
{
10001eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
10001ef0:	430b      	orrs	r3, r1
{
10001ef2:	0004      	movs	r4, r0
10001ef4:	000d      	movs	r5, r1
	if (ticks == 0) {
10001ef6:	2b00      	cmp	r3, #0
10001ef8:	d103      	bne.n	10001f02 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
10001efa:	f7ff ffbb 	bl	10001e74 <z_impl_k_yield>
		k_yield();
		return 0;
10001efe:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
10001f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
10001f02:	1c4b      	adds	r3, r1, #1
10001f04:	db2e      	blt.n	10001f64 <z_tick_sleep+0x78>
10001f06:	1c4b      	adds	r3, r1, #1
10001f08:	d101      	bne.n	10001f0e <z_tick_sleep+0x22>
10001f0a:	1c83      	adds	r3, r0, #2
10001f0c:	d32a      	bcc.n	10001f64 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10001f0e:	f000 fe2a 	bl	10002b66 <sys_clock_tick_get_32>
10001f12:	1827      	adds	r7, r4, r0
10001f14:	f3ef 8310 	mrs	r3, PRIMASK
10001f18:	b672      	cpsid	i
	pending_current = _current;
10001f1a:	4e14      	ldr	r6, [pc, #80]	; (10001f6c <z_tick_sleep+0x80>)
10001f1c:	9301      	str	r3, [sp, #4]
10001f1e:	68b0      	ldr	r0, [r6, #8]
10001f20:	4b13      	ldr	r3, [pc, #76]	; (10001f70 <z_tick_sleep+0x84>)
10001f22:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10001f24:	f7ff fea2 	bl	10001c6c <unready_thread>
	z_add_thread_timeout(_current, timeout);
10001f28:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001f2a:	0022      	movs	r2, r4
10001f2c:	002b      	movs	r3, r5
10001f2e:	4911      	ldr	r1, [pc, #68]	; (10001f74 <z_tick_sleep+0x88>)
10001f30:	3018      	adds	r0, #24
10001f32:	f000 f8ff 	bl	10002134 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10001f36:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10001f38:	68b2      	ldr	r2, [r6, #8]
10001f3a:	9801      	ldr	r0, [sp, #4]
10001f3c:	7b51      	ldrb	r1, [r2, #13]
10001f3e:	430b      	orrs	r3, r1
10001f40:	7353      	strb	r3, [r2, #13]
10001f42:	f7fe fed5 	bl	10000cf0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10001f46:	f000 fe0e 	bl	10002b66 <sys_clock_tick_get_32>
10001f4a:	2300      	movs	r3, #0
10001f4c:	003a      	movs	r2, r7
10001f4e:	0004      	movs	r4, r0
10001f50:	001d      	movs	r5, r3
10001f52:	1b12      	subs	r2, r2, r4
10001f54:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10001f56:	42ab      	cmp	r3, r5
10001f58:	dc02      	bgt.n	10001f60 <z_tick_sleep+0x74>
10001f5a:	d1d0      	bne.n	10001efe <z_tick_sleep+0x12>
10001f5c:	42aa      	cmp	r2, r5
10001f5e:	d0ce      	beq.n	10001efe <z_tick_sleep+0x12>
		return ticks;
10001f60:	0010      	movs	r0, r2
10001f62:	e7cd      	b.n	10001f00 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10001f64:	2702      	movs	r7, #2
10001f66:	427f      	negs	r7, r7
10001f68:	1b3f      	subs	r7, r7, r4
10001f6a:	e7d3      	b.n	10001f14 <z_tick_sleep+0x28>
10001f6c:	20000178 	.word	0x20000178
10001f70:	20000198 	.word	0x20000198
10001f74:	10002b0b 	.word	0x10002b0b

10001f78 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10001f78:	b510      	push	{r4, lr}
10001f7a:	000b      	movs	r3, r1
10001f7c:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10001f7e:	1c42      	adds	r2, r0, #1
10001f80:	d107      	bne.n	10001f92 <z_impl_k_sleep+0x1a>
10001f82:	3301      	adds	r3, #1
10001f84:	d105      	bne.n	10001f92 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10001f86:	4b07      	ldr	r3, [pc, #28]	; (10001fa4 <z_impl_k_sleep+0x2c>)
10001f88:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
10001f8a:	f7ff ff13 	bl	10001db4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10001f8e:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10001f90:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10001f92:	0021      	movs	r1, r4
10001f94:	f7ff ffaa 	bl	10001eec <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10001f98:	220a      	movs	r2, #10
10001f9a:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10001f9c:	17c1      	asrs	r1, r0, #31
10001f9e:	f7fe f97d 	bl	1000029c <__aeabi_uldivmod>
	return ret;
10001fa2:	e7f5      	b.n	10001f90 <z_impl_k_sleep+0x18>
10001fa4:	20000178 	.word	0x20000178

10001fa8 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10001fa8:	4b01      	ldr	r3, [pc, #4]	; (10001fb0 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10001faa:	6898      	ldr	r0, [r3, #8]
}
10001fac:	4770      	bx	lr
10001fae:	46c0      	nop			; (mov r8, r8)
10001fb0:	20000178 	.word	0x20000178

10001fb4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10001fb4:	b570      	push	{r4, r5, r6, lr}
10001fb6:	0004      	movs	r4, r0
10001fb8:	f3ef 8610 	mrs	r6, PRIMASK
10001fbc:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10001fbe:	7b03      	ldrb	r3, [r0, #12]
10001fc0:	07db      	lsls	r3, r3, #31
10001fc2:	d508      	bpl.n	10001fd6 <z_thread_abort+0x22>
	if (key != 0U) {
10001fc4:	2e00      	cmp	r6, #0
10001fc6:	d102      	bne.n	10001fce <z_thread_abort+0x1a>
	__asm__ volatile(
10001fc8:	b662      	cpsie	i
10001fca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10001fce:	2004      	movs	r0, #4
10001fd0:	b662      	cpsie	i
10001fd2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10001fd4:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10001fd6:	2308      	movs	r3, #8
10001fd8:	7b42      	ldrb	r2, [r0, #13]
10001fda:	421a      	tst	r2, r3
10001fdc:	d005      	beq.n	10001fea <z_thread_abort+0x36>
	if (key != 0U) {
10001fde:	2e00      	cmp	r6, #0
10001fe0:	d1f8      	bne.n	10001fd4 <z_thread_abort+0x20>
	__asm__ volatile(
10001fe2:	b662      	cpsie	i
10001fe4:	f3bf 8f6f 	isb	sy
10001fe8:	e7f4      	b.n	10001fd4 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10001fea:	2120      	movs	r1, #32
10001fec:	0010      	movs	r0, r2
10001fee:	4388      	bics	r0, r1
10001ff0:	0001      	movs	r1, r0
10001ff2:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10001ff4:	b248      	sxtb	r0, r1
10001ff6:	2800      	cmp	r0, #0
10001ff8:	db20      	blt.n	1000203c <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10001ffa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10001ffc:	68a3      	ldr	r3, [r4, #8]
10001ffe:	2b00      	cmp	r3, #0
10002000:	d002      	beq.n	10002008 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10002002:	0020      	movs	r0, r4
10002004:	f000 fd4b 	bl	10002a9e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10002008:	0020      	movs	r0, r4
1000200a:	3018      	adds	r0, #24
1000200c:	f000 fd98 	bl	10002b40 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10002010:	0023      	movs	r3, r4
	return list->head == list;
10002012:	6da5      	ldr	r5, [r4, #88]	; 0x58
10002014:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002016:	429d      	cmp	r5, r3
10002018:	d001      	beq.n	1000201e <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
1000201a:	2d00      	cmp	r5, #0
1000201c:	d116      	bne.n	1000204c <z_thread_abort+0x98>
		update_cache(1);
1000201e:	2001      	movs	r0, #1
10002020:	f7ff fd90 	bl	10001b44 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10002024:	4b10      	ldr	r3, [pc, #64]	; (10002068 <z_thread_abort+0xb4>)
10002026:	689b      	ldr	r3, [r3, #8]
10002028:	42a3      	cmp	r3, r4
1000202a:	d1d8      	bne.n	10001fde <z_thread_abort+0x2a>
1000202c:	f3ef 8305 	mrs	r3, IPSR
10002030:	2b00      	cmp	r3, #0
10002032:	d1d4      	bne.n	10001fde <z_thread_abort+0x2a>
10002034:	0030      	movs	r0, r6
10002036:	f7fe fe5b 	bl	10000cf0 <arch_swap>
	return ret;
1000203a:	e7d0      	b.n	10001fde <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000203c:	215f      	movs	r1, #95	; 0x5f
1000203e:	400a      	ands	r2, r1
10002040:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10002042:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002044:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10002046:	f000 fd22 	bl	10002a8e <sys_dlist_remove>
}
1000204a:	e7d7      	b.n	10001ffc <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
1000204c:	0028      	movs	r0, r5
1000204e:	f000 fd26 	bl	10002a9e <unpend_thread_no_timeout>
10002052:	0028      	movs	r0, r5
10002054:	3018      	adds	r0, #24
10002056:	f000 fd73 	bl	10002b40 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
1000205a:	2300      	movs	r3, #0
		ready_thread(thread);
1000205c:	0028      	movs	r0, r5
1000205e:	66eb      	str	r3, [r5, #108]	; 0x6c
10002060:	f7ff fdce 	bl	10001c00 <ready_thread>
10002064:	e7d4      	b.n	10002010 <z_thread_abort+0x5c>
10002066:	46c0      	nop			; (mov r8, r8)
10002068:	20000178 	.word	0x20000178

1000206c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
1000206c:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
1000206e:	4806      	ldr	r0, [pc, #24]	; (10002088 <z_data_copy+0x1c>)
10002070:	4a06      	ldr	r2, [pc, #24]	; (1000208c <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002072:	4907      	ldr	r1, [pc, #28]	; (10002090 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10002074:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002076:	f000 fcff 	bl	10002a78 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
1000207a:	4a06      	ldr	r2, [pc, #24]	; (10002094 <z_data_copy+0x28>)
1000207c:	4906      	ldr	r1, [pc, #24]	; (10002098 <z_data_copy+0x2c>)
1000207e:	4807      	ldr	r0, [pc, #28]	; (1000209c <z_data_copy+0x30>)
10002080:	f000 fcfa 	bl	10002a78 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002084:	bd10      	pop	{r4, pc}
10002086:	46c0      	nop			; (mov r8, r8)
10002088:	20000000 	.word	0x20000000
1000208c:	20000026 	.word	0x20000026
10002090:	10002f3c 	.word	0x10002f3c
10002094:	00000000 	.word	0x00000000
10002098:	10002f3c 	.word	0x10002f3c
1000209c:	20000000 	.word	0x20000000

100020a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100020a0:	2000      	movs	r0, #0
{
100020a2:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100020a4:	4b03      	ldr	r3, [pc, #12]	; (100020b4 <elapsed+0x14>)
100020a6:	681b      	ldr	r3, [r3, #0]
100020a8:	4283      	cmp	r3, r0
100020aa:	d101      	bne.n	100020b0 <elapsed+0x10>
100020ac:	f7ff f944 	bl	10001338 <sys_clock_elapsed>
}
100020b0:	bd10      	pop	{r4, pc}
100020b2:	46c0      	nop			; (mov r8, r8)
100020b4:	200001a4 	.word	0x200001a4

100020b8 <next_timeout>:

static int32_t next_timeout(void)
{
100020b8:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
100020ba:	4b0e      	ldr	r3, [pc, #56]	; (100020f4 <next_timeout+0x3c>)
100020bc:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100020be:	429e      	cmp	r6, r3
100020c0:	d103      	bne.n	100020ca <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
100020c2:	f7ff ffed 	bl	100020a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
100020c6:	480c      	ldr	r0, [pc, #48]	; (100020f8 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
100020c8:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
100020ca:	f7ff ffe9 	bl	100020a0 <elapsed>
	if ((to == NULL) ||
100020ce:	2e00      	cmp	r6, #0
100020d0:	d0f9      	beq.n	100020c6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
100020d2:	6932      	ldr	r2, [r6, #16]
100020d4:	6973      	ldr	r3, [r6, #20]
100020d6:	0004      	movs	r4, r0
100020d8:	17c5      	asrs	r5, r0, #31
100020da:	1b12      	subs	r2, r2, r4
100020dc:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
100020de:	2b00      	cmp	r3, #0
100020e0:	dcf1      	bgt.n	100020c6 <next_timeout+0xe>
100020e2:	d103      	bne.n	100020ec <next_timeout+0x34>
100020e4:	2180      	movs	r1, #128	; 0x80
100020e6:	0609      	lsls	r1, r1, #24
100020e8:	428a      	cmp	r2, r1
100020ea:	d2ec      	bcs.n	100020c6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
100020ec:	43d8      	mvns	r0, r3
100020ee:	17c0      	asrs	r0, r0, #31
100020f0:	4010      	ands	r0, r2
	return ret;
100020f2:	e7e9      	b.n	100020c8 <next_timeout+0x10>
100020f4:	20000018 	.word	0x20000018
100020f8:	7fffffff 	.word	0x7fffffff

100020fc <remove_timeout>:
{
100020fc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
100020fe:	2800      	cmp	r0, #0
10002100:	d00e      	beq.n	10002120 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10002102:	4b0b      	ldr	r3, [pc, #44]	; (10002130 <remove_timeout+0x34>)
10002104:	685b      	ldr	r3, [r3, #4]
10002106:	4298      	cmp	r0, r3
10002108:	d00a      	beq.n	10002120 <remove_timeout+0x24>
1000210a:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
1000210c:	2900      	cmp	r1, #0
1000210e:	d007      	beq.n	10002120 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10002110:	690a      	ldr	r2, [r1, #16]
10002112:	694b      	ldr	r3, [r1, #20]
10002114:	6904      	ldr	r4, [r0, #16]
10002116:	6945      	ldr	r5, [r0, #20]
10002118:	1912      	adds	r2, r2, r4
1000211a:	416b      	adcs	r3, r5
1000211c:	610a      	str	r2, [r1, #16]
1000211e:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10002120:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002122:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10002124:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002126:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002128:	2300      	movs	r3, #0
1000212a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000212c:	6043      	str	r3, [r0, #4]
}
1000212e:	bd30      	pop	{r4, r5, pc}
10002130:	20000018 	.word	0x20000018

10002134 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10002134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002136:	0004      	movs	r4, r0
10002138:	0016      	movs	r6, r2
1000213a:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000213c:	1c53      	adds	r3, r2, #1
1000213e:	d101      	bne.n	10002144 <z_add_timeout+0x10>
10002140:	1c7b      	adds	r3, r7, #1
10002142:	d057      	beq.n	100021f4 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10002144:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10002146:	f3ef 8310 	mrs	r3, PRIMASK
1000214a:	b672      	cpsid	i
1000214c:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
1000214e:	2f00      	cmp	r7, #0
10002150:	da23      	bge.n	1000219a <z_add_timeout+0x66>
10002152:	1c7b      	adds	r3, r7, #1
10002154:	d101      	bne.n	1000215a <z_add_timeout+0x26>
10002156:	1cb3      	adds	r3, r6, #2
10002158:	d81f      	bhi.n	1000219a <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
1000215a:	4b2b      	ldr	r3, [pc, #172]	; (10002208 <z_add_timeout+0xd4>)
1000215c:	6818      	ldr	r0, [r3, #0]
1000215e:	6859      	ldr	r1, [r3, #4]
10002160:	2202      	movs	r2, #2
10002162:	4252      	negs	r2, r2
10002164:	17d3      	asrs	r3, r2, #31
10002166:	1a12      	subs	r2, r2, r0
10002168:	418b      	sbcs	r3, r1
1000216a:	1b92      	subs	r2, r2, r6
1000216c:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
1000216e:	2b00      	cmp	r3, #0
10002170:	dc04      	bgt.n	1000217c <z_add_timeout+0x48>
10002172:	d101      	bne.n	10002178 <z_add_timeout+0x44>
10002174:	2a00      	cmp	r2, #0
10002176:	d101      	bne.n	1000217c <z_add_timeout+0x48>
10002178:	2201      	movs	r2, #1
1000217a:	2300      	movs	r3, #0
	return list->head == list;
1000217c:	4f23      	ldr	r7, [pc, #140]	; (1000220c <z_add_timeout+0xd8>)
1000217e:	6122      	str	r2, [r4, #16]
10002180:	6163      	str	r3, [r4, #20]
10002182:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002184:	42bd      	cmp	r5, r7
10002186:	d100      	bne.n	1000218a <z_add_timeout+0x56>
10002188:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
1000218a:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
1000218c:	2d00      	cmp	r5, #0
1000218e:	d10f      	bne.n	100021b0 <z_add_timeout+0x7c>
	node->next = list;
10002190:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002192:	6066      	str	r6, [r4, #4]
	tail->next = node;
10002194:	6034      	str	r4, [r6, #0]
	list->tail = node;
10002196:	607c      	str	r4, [r7, #4]
}
10002198:	e01c      	b.n	100021d4 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
1000219a:	f7ff ff81 	bl	100020a0 <elapsed>
1000219e:	2201      	movs	r2, #1
100021a0:	2300      	movs	r3, #0
100021a2:	1992      	adds	r2, r2, r6
100021a4:	417b      	adcs	r3, r7
100021a6:	0006      	movs	r6, r0
100021a8:	17c7      	asrs	r7, r0, #31
100021aa:	1992      	adds	r2, r2, r6
100021ac:	417b      	adcs	r3, r7
100021ae:	e7e5      	b.n	1000217c <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
100021b0:	6928      	ldr	r0, [r5, #16]
100021b2:	6969      	ldr	r1, [r5, #20]
100021b4:	6922      	ldr	r2, [r4, #16]
100021b6:	6963      	ldr	r3, [r4, #20]
100021b8:	4299      	cmp	r1, r3
100021ba:	dc02      	bgt.n	100021c2 <z_add_timeout+0x8e>
100021bc:	d11b      	bne.n	100021f6 <z_add_timeout+0xc2>
100021be:	4290      	cmp	r0, r2
100021c0:	d919      	bls.n	100021f6 <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
100021c2:	1a80      	subs	r0, r0, r2
100021c4:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
100021c6:	686b      	ldr	r3, [r5, #4]
100021c8:	6128      	str	r0, [r5, #16]
100021ca:	6169      	str	r1, [r5, #20]
	node->prev = prev;
100021cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
100021ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
100021d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
100021d2:	606c      	str	r4, [r5, #4]
	return list->head == list;
100021d4:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100021d6:	42bb      	cmp	r3, r7
100021d8:	d006      	beq.n	100021e8 <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
100021da:	429c      	cmp	r4, r3
100021dc:	d104      	bne.n	100021e8 <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
100021de:	f7ff ff6b 	bl	100020b8 <next_timeout>
100021e2:	2100      	movs	r1, #0
100021e4:	f7ff f830 	bl	10001248 <sys_clock_set_timeout>
	if (key != 0U) {
100021e8:	9b01      	ldr	r3, [sp, #4]
100021ea:	2b00      	cmp	r3, #0
100021ec:	d102      	bne.n	100021f4 <z_add_timeout+0xc0>
	__asm__ volatile(
100021ee:	b662      	cpsie	i
100021f0:	f3bf 8f6f 	isb	sy
		}
	}
}
100021f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
100021f6:	1a12      	subs	r2, r2, r0
100021f8:	418b      	sbcs	r3, r1
100021fa:	6122      	str	r2, [r4, #16]
100021fc:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
100021fe:	42b5      	cmp	r5, r6
10002200:	d0c6      	beq.n	10002190 <z_add_timeout+0x5c>
10002202:	682d      	ldr	r5, [r5, #0]
10002204:	e7c2      	b.n	1000218c <z_add_timeout+0x58>
10002206:	46c0      	nop			; (mov r8, r8)
10002208:	20000120 	.word	0x20000120
1000220c:	20000018 	.word	0x20000018

10002210 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10002210:	b5f0      	push	{r4, r5, r6, r7, lr}
10002212:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10002214:	f3ef 8310 	mrs	r3, PRIMASK
10002218:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000221a:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
1000221c:	4b30      	ldr	r3, [pc, #192]	; (100022e0 <sys_clock_announce+0xd0>)
1000221e:	6018      	str	r0, [r3, #0]
	return list->head == list;
10002220:	4b30      	ldr	r3, [pc, #192]	; (100022e4 <sys_clock_announce+0xd4>)
10002222:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002224:	429c      	cmp	r4, r3
10002226:	d100      	bne.n	1000222a <sys_clock_announce+0x1a>
10002228:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
1000222a:	4b2f      	ldr	r3, [pc, #188]	; (100022e8 <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
1000222c:	4d2c      	ldr	r5, [pc, #176]	; (100022e0 <sys_clock_announce+0xd0>)
		curr_tick += dt;
1000222e:	9303      	str	r3, [sp, #12]
10002230:	6818      	ldr	r0, [r3, #0]
10002232:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
10002234:	682b      	ldr	r3, [r5, #0]
10002236:	469c      	mov	ip, r3
10002238:	2c00      	cmp	r4, #0
1000223a:	d039      	beq.n	100022b0 <sys_clock_announce+0xa0>
1000223c:	6962      	ldr	r2, [r4, #20]
1000223e:	6926      	ldr	r6, [r4, #16]
10002240:	17db      	asrs	r3, r3, #31
10002242:	429a      	cmp	r2, r3
10002244:	dc02      	bgt.n	1000224c <sys_clock_announce+0x3c>
10002246:	d10a      	bne.n	1000225e <sys_clock_announce+0x4e>
10002248:	4566      	cmp	r6, ip
1000224a:	d908      	bls.n	1000225e <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
1000224c:	001f      	movs	r7, r3
1000224e:	6922      	ldr	r2, [r4, #16]
10002250:	6963      	ldr	r3, [r4, #20]
10002252:	4666      	mov	r6, ip
10002254:	1b92      	subs	r2, r2, r6
10002256:	41bb      	sbcs	r3, r7
10002258:	6122      	str	r2, [r4, #16]
1000225a:	6163      	str	r3, [r4, #20]
1000225c:	e028      	b.n	100022b0 <sys_clock_announce+0xa0>
		curr_tick += dt;
1000225e:	17f3      	asrs	r3, r6, #31
10002260:	9600      	str	r6, [sp, #0]
10002262:	9301      	str	r3, [sp, #4]
10002264:	9a00      	ldr	r2, [sp, #0]
10002266:	9b01      	ldr	r3, [sp, #4]
10002268:	1880      	adds	r0, r0, r2
1000226a:	4159      	adcs	r1, r3
		t->dticks = 0;
1000226c:	2300      	movs	r3, #0
1000226e:	2200      	movs	r2, #0
		curr_tick += dt;
10002270:	4f1d      	ldr	r7, [pc, #116]	; (100022e8 <sys_clock_announce+0xd8>)
		t->dticks = 0;
10002272:	6122      	str	r2, [r4, #16]
10002274:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
10002276:	6038      	str	r0, [r7, #0]
10002278:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
1000227a:	0020      	movs	r0, r4
1000227c:	f7ff ff3e 	bl	100020fc <remove_timeout>
	if (key != 0U) {
10002280:	9b02      	ldr	r3, [sp, #8]
10002282:	2b00      	cmp	r3, #0
10002284:	d102      	bne.n	1000228c <sys_clock_announce+0x7c>
	__asm__ volatile(
10002286:	b662      	cpsie	i
10002288:	f3bf 8f6f 	isb	sy
		t->fn(t);
1000228c:	0020      	movs	r0, r4
1000228e:	68a3      	ldr	r3, [r4, #8]
10002290:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002292:	f3ef 8310 	mrs	r3, PRIMASK
10002296:	b672      	cpsid	i
10002298:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
1000229a:	4b11      	ldr	r3, [pc, #68]	; (100022e0 <sys_clock_announce+0xd0>)
1000229c:	681a      	ldr	r2, [r3, #0]
1000229e:	1b92      	subs	r2, r2, r6
100022a0:	601a      	str	r2, [r3, #0]
	return list->head == list;
100022a2:	4b10      	ldr	r3, [pc, #64]	; (100022e4 <sys_clock_announce+0xd4>)
100022a4:	4694      	mov	ip, r2
100022a6:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022a8:	429c      	cmp	r4, r3
100022aa:	d1be      	bne.n	1000222a <sys_clock_announce+0x1a>
		curr_tick += dt;
100022ac:	6838      	ldr	r0, [r7, #0]
100022ae:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
100022b0:	4662      	mov	r2, ip
100022b2:	17d3      	asrs	r3, r2, #31
100022b4:	1812      	adds	r2, r2, r0
100022b6:	414b      	adcs	r3, r1
	announce_remaining = 0;
100022b8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
100022ba:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
100022bc:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
100022be:	600a      	str	r2, [r1, #0]
100022c0:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
100022c2:	f7ff fef9 	bl	100020b8 <next_timeout>
100022c6:	0021      	movs	r1, r4
100022c8:	f7fe ffbe 	bl	10001248 <sys_clock_set_timeout>
	if (key != 0U) {
100022cc:	9b02      	ldr	r3, [sp, #8]
100022ce:	42a3      	cmp	r3, r4
100022d0:	d102      	bne.n	100022d8 <sys_clock_announce+0xc8>
	__asm__ volatile(
100022d2:	b662      	cpsie	i
100022d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
100022d8:	f7ff fcfe 	bl	10001cd8 <z_time_slice>
#endif
}
100022dc:	b005      	add	sp, #20
100022de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022e0:	200001a4 	.word	0x200001a4
100022e4:	20000018 	.word	0x20000018
100022e8:	20000120 	.word	0x20000120

100022ec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100022ec:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100022ee:	f3ef 8410 	mrs	r4, PRIMASK
100022f2:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
100022f4:	f7ff fed4 	bl	100020a0 <elapsed>
100022f8:	0002      	movs	r2, r0
100022fa:	4906      	ldr	r1, [pc, #24]	; (10002314 <sys_clock_tick_get+0x28>)
100022fc:	17c3      	asrs	r3, r0, #31
100022fe:	6808      	ldr	r0, [r1, #0]
10002300:	6849      	ldr	r1, [r1, #4]
10002302:	1880      	adds	r0, r0, r2
10002304:	4159      	adcs	r1, r3
	if (key != 0U) {
10002306:	2c00      	cmp	r4, #0
10002308:	d102      	bne.n	10002310 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000230a:	b662      	cpsie	i
1000230c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10002310:	bd10      	pop	{r4, pc}
10002312:	46c0      	nop			; (mov r8, r8)
10002314:	20000120 	.word	0x20000120

10002318 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10002318:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
1000231a:	4802      	ldr	r0, [pc, #8]	; (10002324 <boot_banner+0xc>)
1000231c:	f000 f807 	bl	1000232e <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10002320:	bd10      	pop	{r4, pc}
10002322:	46c0      	nop			; (mov r8, r8)
10002324:	10002ef7 	.word	0x10002ef7

10002328 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10002328:	4770      	bx	lr

1000232a <arch_printk_char_out>:
}
1000232a:	2000      	movs	r0, #0
1000232c:	4770      	bx	lr

1000232e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
1000232e:	b40f      	push	{r0, r1, r2, r3}
10002330:	b507      	push	{r0, r1, r2, lr}
10002332:	a904      	add	r1, sp, #16
10002334:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10002336:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10002338:	f7fe f8de 	bl	100004f8 <vprintk>

	va_end(ap);
}
1000233c:	b003      	add	sp, #12
1000233e:	bc08      	pop	{r3}
10002340:	b004      	add	sp, #16
10002342:	4718      	bx	r3

10002344 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10002344:	b510      	push	{r4, lr}
10002346:	0004      	movs	r4, r0
10002348:	0008      	movs	r0, r1
1000234a:	0011      	movs	r1, r2
1000234c:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000234e:	47a0      	blx	r4
	return z_impl_z_current_get();
10002350:	f7ff fe2a 	bl	10001fa8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10002354:	f7fe fde4 	bl	10000f20 <z_impl_k_thread_abort>

10002358 <encode_uint>:
{
10002358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000235a:	b085      	sub	sp, #20
1000235c:	9001      	str	r0, [sp, #4]
1000235e:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10002360:	78d3      	ldrb	r3, [r2, #3]
{
10002362:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10002364:	001a      	movs	r2, r3
10002366:	3a41      	subs	r2, #65	; 0x41
10002368:	000f      	movs	r7, r1
	switch (specifier) {
1000236a:	2408      	movs	r4, #8
1000236c:	9202      	str	r2, [sp, #8]
1000236e:	2b6f      	cmp	r3, #111	; 0x6f
10002370:	d00a      	beq.n	10002388 <encode_uint+0x30>
10002372:	d804      	bhi.n	1000237e <encode_uint+0x26>
		return 16;
10002374:	1924      	adds	r4, r4, r4
	switch (specifier) {
10002376:	2b58      	cmp	r3, #88	; 0x58
10002378:	d006      	beq.n	10002388 <encode_uint+0x30>
		return 10;
1000237a:	3c06      	subs	r4, #6
1000237c:	e004      	b.n	10002388 <encode_uint+0x30>
	switch (specifier) {
1000237e:	2208      	movs	r2, #8
		return 16;
10002380:	2410      	movs	r4, #16
	switch (specifier) {
10002382:	4393      	bics	r3, r2
10002384:	2b70      	cmp	r3, #112	; 0x70
10002386:	d1f8      	bne.n	1000237a <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10002388:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000238a:	0022      	movs	r2, r4
1000238c:	2300      	movs	r3, #0
1000238e:	0039      	movs	r1, r7
10002390:	9801      	ldr	r0, [sp, #4]
10002392:	f7fd ff83 	bl	1000029c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002396:	0013      	movs	r3, r2
10002398:	468c      	mov	ip, r1
1000239a:	b2d2      	uxtb	r2, r2
1000239c:	2b09      	cmp	r3, #9
1000239e:	d81a      	bhi.n	100023d6 <encode_uint+0x7e>
100023a0:	3230      	adds	r2, #48	; 0x30
100023a2:	b2d3      	uxtb	r3, r2
100023a4:	3e01      	subs	r6, #1
100023a6:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
100023a8:	2300      	movs	r3, #0
100023aa:	42bb      	cmp	r3, r7
100023ac:	d102      	bne.n	100023b4 <encode_uint+0x5c>
100023ae:	9b01      	ldr	r3, [sp, #4]
100023b0:	429c      	cmp	r4, r3
100023b2:	d802      	bhi.n	100023ba <encode_uint+0x62>
100023b4:	9b03      	ldr	r3, [sp, #12]
100023b6:	429e      	cmp	r6, r3
100023b8:	d80a      	bhi.n	100023d0 <encode_uint+0x78>
	if (conv->flag_hash) {
100023ba:	782b      	ldrb	r3, [r5, #0]
100023bc:	069b      	lsls	r3, r3, #26
100023be:	d504      	bpl.n	100023ca <encode_uint+0x72>
		if (radix == 8) {
100023c0:	2c08      	cmp	r4, #8
100023c2:	d110      	bne.n	100023e6 <encode_uint+0x8e>
			conv->altform_0 = true;
100023c4:	78ab      	ldrb	r3, [r5, #2]
100023c6:	4323      	orrs	r3, r4
100023c8:	70ab      	strb	r3, [r5, #2]
}
100023ca:	0030      	movs	r0, r6
100023cc:	b005      	add	sp, #20
100023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
100023d0:	4667      	mov	r7, ip
100023d2:	9001      	str	r0, [sp, #4]
100023d4:	e7d9      	b.n	1000238a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100023d6:	0013      	movs	r3, r2
100023d8:	9902      	ldr	r1, [sp, #8]
100023da:	3357      	adds	r3, #87	; 0x57
100023dc:	b2db      	uxtb	r3, r3
100023de:	2919      	cmp	r1, #25
100023e0:	d8e0      	bhi.n	100023a4 <encode_uint+0x4c>
100023e2:	3237      	adds	r2, #55	; 0x37
100023e4:	e7dd      	b.n	100023a2 <encode_uint+0x4a>
		} else if (radix == 16) {
100023e6:	2c10      	cmp	r4, #16
100023e8:	d1ef      	bne.n	100023ca <encode_uint+0x72>
			conv->altform_0c = true;
100023ea:	78ab      	ldrb	r3, [r5, #2]
100023ec:	431c      	orrs	r4, r3
100023ee:	70ac      	strb	r4, [r5, #2]
	return bp;
100023f0:	e7eb      	b.n	100023ca <encode_uint+0x72>

100023f2 <outs>:
{
100023f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100023f4:	0007      	movs	r7, r0
100023f6:	0015      	movs	r5, r2
100023f8:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100023fa:	0014      	movs	r4, r2
{
100023fc:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100023fe:	42a6      	cmp	r6, r4
10002400:	d806      	bhi.n	10002410 <outs+0x1e>
10002402:	2e00      	cmp	r6, #0
10002404:	d001      	beq.n	1000240a <outs+0x18>
	return (int)count;
10002406:	1b60      	subs	r0, r4, r5
10002408:	e008      	b.n	1000241c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000240a:	7823      	ldrb	r3, [r4, #0]
1000240c:	2b00      	cmp	r3, #0
1000240e:	d0fa      	beq.n	10002406 <outs+0x14>
		int rc = out((int)*sp++, ctx);
10002410:	7820      	ldrb	r0, [r4, #0]
10002412:	9901      	ldr	r1, [sp, #4]
10002414:	47b8      	blx	r7
		if (rc < 0) {
10002416:	3401      	adds	r4, #1
10002418:	2800      	cmp	r0, #0
1000241a:	daf0      	bge.n	100023fe <outs+0xc>
}
1000241c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000241e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
1000241e:	4770      	bx	lr

10002420 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002420:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10002422:	f000 fb0f 	bl	10002a44 <z_fatal_error>
}
10002426:	bd10      	pop	{r4, pc}

10002428 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10002428:	b510      	push	{r4, lr}
1000242a:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
1000242c:	6800      	ldr	r0, [r0, #0]
1000242e:	f000 fb09 	bl	10002a44 <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10002432:	bd10      	pop	{r4, pc}

10002434 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10002434:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10002436:	2100      	movs	r1, #0
10002438:	2001      	movs	r0, #1
1000243a:	f7ff fff1 	bl	10002420 <z_arm_fatal_error>
}
1000243e:	bd10      	pop	{r4, pc}

10002440 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10002440:	b510      	push	{r4, lr}
	handler();
10002442:	f7fe fc3d 	bl	10000cc0 <z_SysNmiOnReset>
	z_arm_int_exit();
10002446:	f7fe fce7 	bl	10000e18 <z_arm_exc_exit>
}
1000244a:	bd10      	pop	{r4, pc}

1000244c <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
1000244c:	4770      	bx	lr

1000244e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
1000244e:	0003      	movs	r3, r0
	size_t n = 0;
10002450:	2000      	movs	r0, #0

	while (*s != '\0') {
10002452:	5c1a      	ldrb	r2, [r3, r0]
10002454:	2a00      	cmp	r2, #0
10002456:	d100      	bne.n	1000245a <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10002458:	4770      	bx	lr
		n++;
1000245a:	3001      	adds	r0, #1
1000245c:	e7f9      	b.n	10002452 <strlen+0x4>

1000245e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000245e:	0003      	movs	r3, r0
	size_t n = 0;
10002460:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10002462:	5c1a      	ldrb	r2, [r3, r0]
10002464:	2a00      	cmp	r2, #0
10002466:	d001      	beq.n	1000246c <strnlen+0xe>
10002468:	4288      	cmp	r0, r1
1000246a:	d100      	bne.n	1000246e <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
1000246c:	4770      	bx	lr
		n++;
1000246e:	3001      	adds	r0, #1
10002470:	e7f7      	b.n	10002462 <strnlen+0x4>

10002472 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10002472:	2300      	movs	r3, #0
{
10002474:	b510      	push	{r4, lr}
	while (n > 0) {
10002476:	429a      	cmp	r2, r3
10002478:	d100      	bne.n	1000247c <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
1000247a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
1000247c:	5ccc      	ldrb	r4, [r1, r3]
1000247e:	54c4      	strb	r4, [r0, r3]
		n--;
10002480:	3301      	adds	r3, #1
10002482:	e7f8      	b.n	10002476 <memcpy+0x4>

10002484 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10002484:	0003      	movs	r3, r0
10002486:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10002488:	1882      	adds	r2, r0, r2
1000248a:	4293      	cmp	r3, r2
1000248c:	d100      	bne.n	10002490 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000248e:	4770      	bx	lr
		*(d_byte++) = c_byte;
10002490:	7019      	strb	r1, [r3, #0]
		n--;
10002492:	3301      	adds	r3, #1
10002494:	e7f9      	b.n	1000248a <memset+0x6>

10002496 <_stdout_hook_default>:
	return EOF;
10002496:	2001      	movs	r0, #1
}
10002498:	4240      	negs	r0, r0
1000249a:	4770      	bx	lr

1000249c <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
1000249c:	b510      	push	{r4, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
1000249e:	f7fe fd61 	bl	10000f64 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
100024a2:	bd10      	pop	{r4, pc}

100024a4 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
100024a4:	23d0      	movs	r3, #208	; 0xd0
100024a6:	061b      	lsls	r3, r3, #24
100024a8:	685b      	ldr	r3, [r3, #4]
}
100024aa:	2000      	movs	r0, #0
	*value = gpio_get_all();
100024ac:	600b      	str	r3, [r1, #0]
}
100024ae:	4770      	bx	lr

100024b0 <gpio_rpi_port_set_bits_raw>:
{
100024b0:	000a      	movs	r2, r1
100024b2:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
100024b4:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
100024b6:	0010      	movs	r0, r2
100024b8:	6919      	ldr	r1, [r3, #16]
100024ba:	4388      	bics	r0, r1
100024bc:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
100024be:	20d0      	movs	r0, #208	; 0xd0
100024c0:	0600      	lsls	r0, r0, #24
100024c2:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
100024c4:	691c      	ldr	r4, [r3, #16]
100024c6:	6959      	ldr	r1, [r3, #20]
100024c8:	4021      	ands	r1, r4
100024ca:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
100024cc:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
100024ce:	6919      	ldr	r1, [r3, #16]
100024d0:	695b      	ldr	r3, [r3, #20]
100024d2:	4011      	ands	r1, r2
100024d4:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
100024d6:	6241      	str	r1, [r0, #36]	; 0x24
}
100024d8:	2000      	movs	r0, #0
100024da:	bd10      	pop	{r4, pc}

100024dc <gpio_rpi_port_clear_bits_raw>:
{
100024dc:	000a      	movs	r2, r1
100024de:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
100024e0:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
100024e2:	0010      	movs	r0, r2
100024e4:	6919      	ldr	r1, [r3, #16]
100024e6:	4388      	bics	r0, r1
100024e8:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
100024ea:	20d0      	movs	r0, #208	; 0xd0
100024ec:	0600      	lsls	r0, r0, #24
100024ee:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
100024f0:	691c      	ldr	r4, [r3, #16]
100024f2:	6959      	ldr	r1, [r3, #20]
100024f4:	4021      	ands	r1, r4
100024f6:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
100024f8:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
100024fa:	6919      	ldr	r1, [r3, #16]
100024fc:	695b      	ldr	r3, [r3, #20]
100024fe:	4011      	ands	r1, r2
10002500:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
10002502:	6281      	str	r1, [r0, #40]	; 0x28
}
10002504:	2000      	movs	r0, #0
10002506:	bd10      	pop	{r4, pc}

10002508 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
10002508:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
1000250a:	0008      	movs	r0, r1
1000250c:	691a      	ldr	r2, [r3, #16]
1000250e:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
10002510:	22d0      	movs	r2, #208	; 0xd0
10002512:	0612      	lsls	r2, r2, #24
10002514:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10002516:	691b      	ldr	r3, [r3, #16]
}
10002518:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000251a:	400b      	ands	r3, r1
1000251c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000251e:	4770      	bx	lr

10002520 <gpio_rpi_manage_callback>:
{
10002520:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10002522:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10002524:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10002526:	2800      	cmp	r0, #0
10002528:	d021      	beq.n	1000256e <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000252a:	4288      	cmp	r0, r1
1000252c:	d11b      	bne.n	10002566 <gpio_rpi_manage_callback+0x46>
	return node->next;
1000252e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
10002530:	689c      	ldr	r4, [r3, #8]
	list->head = node;
10002532:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10002534:	42a1      	cmp	r1, r4
10002536:	d100      	bne.n	1000253a <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10002538:	6098      	str	r0, [r3, #8]
	parent->next = child;
1000253a:	2000      	movs	r0, #0
1000253c:	6008      	str	r0, [r1, #0]
	if (set) {
1000253e:	4282      	cmp	r2, r0
10002540:	d006      	beq.n	10002550 <gpio_rpi_manage_callback+0x30>
	return list->head;
10002542:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10002544:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10002546:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10002548:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000254a:	2a00      	cmp	r2, #0
1000254c:	d100      	bne.n	10002550 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
1000254e:	6099      	str	r1, [r3, #8]
	return 0;
10002550:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
10002552:	e010      	b.n	10002576 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10002554:	4281      	cmp	r1, r0
10002556:	d106      	bne.n	10002566 <gpio_rpi_manage_callback+0x46>
	return node->next;
10002558:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
1000255a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
1000255c:	6898      	ldr	r0, [r3, #8]
1000255e:	4281      	cmp	r1, r0
10002560:	d1eb      	bne.n	1000253a <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10002562:	609c      	str	r4, [r3, #8]
}
10002564:	e7e9      	b.n	1000253a <gpio_rpi_manage_callback+0x1a>
	return node->next;
10002566:	0004      	movs	r4, r0
10002568:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000256a:	2800      	cmp	r0, #0
1000256c:	d1f2      	bne.n	10002554 <gpio_rpi_manage_callback+0x34>
			if (!set) {
1000256e:	2a00      	cmp	r2, #0
10002570:	d1e7      	bne.n	10002542 <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
10002572:	2016      	movs	r0, #22
10002574:	4240      	negs	r0, r0
}
10002576:	bd10      	pop	{r4, pc}

10002578 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10002578:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
1000257a:	6843      	ldr	r3, [r0, #4]
1000257c:	685b      	ldr	r3, [r3, #4]
1000257e:	4798      	blx	r3
	return 0;
}
10002580:	2000      	movs	r0, #0
10002582:	bd10      	pop	{r4, pc}

10002584 <gpio_rpi_pin_interrupt_configure>:
{
10002584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002586:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10002588:	6907      	ldr	r7, [r0, #16]
{
1000258a:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000258c:	210f      	movs	r1, #15
1000258e:	2200      	movs	r2, #0
10002590:	0028      	movs	r0, r5
{
10002592:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10002594:	f7ff f8b2 	bl	100016fc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002598:	2201      	movs	r2, #1
1000259a:	0013      	movs	r3, r2
1000259c:	40ab      	lsls	r3, r5
1000259e:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
100025a0:	2380      	movs	r3, #128	; 0x80
100025a2:	039b      	lsls	r3, r3, #14
100025a4:	429e      	cmp	r6, r3
100025a6:	d105      	bne.n	100025b4 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100025a8:	68fb      	ldr	r3, [r7, #12]
100025aa:	9a01      	ldr	r2, [sp, #4]
100025ac:	4393      	bics	r3, r2
}
100025ae:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100025b0:	60fb      	str	r3, [r7, #12]
}
100025b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
100025b4:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
100025b6:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
100025b8:	04db      	lsls	r3, r3, #19
100025ba:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
100025bc:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
100025be:	01f6      	lsls	r6, r6, #7
100025c0:	d50d      	bpl.n	100025de <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
100025c2:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
100025c4:	2b00      	cmp	r3, #0
100025c6:	d001      	beq.n	100025cc <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
100025c8:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
100025ca:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
100025cc:	2201      	movs	r2, #1
100025ce:	0028      	movs	r0, r5
100025d0:	f7ff f894 	bl	100016fc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100025d4:	68fb      	ldr	r3, [r7, #12]
100025d6:	9a01      	ldr	r2, [sp, #4]
100025d8:	431a      	orrs	r2, r3
100025da:	0013      	movs	r3, r2
100025dc:	e7e7      	b.n	100025ae <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
100025de:	2b00      	cmp	r3, #0
100025e0:	d0f4      	beq.n	100025cc <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
100025e2:	2302      	movs	r3, #2
100025e4:	e7f1      	b.n	100025ca <gpio_rpi_pin_interrupt_configure+0x46>

100025e6 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
100025e6:	b510      	push	{r4, lr}
100025e8:	2200      	movs	r2, #0
100025ea:	2103      	movs	r1, #3
100025ec:	200d      	movs	r0, #13
100025ee:	f7fe fb3d 	bl	10000c6c <z_arm_irq_priority_set>
100025f2:	200d      	movs	r0, #13
100025f4:	f7fe fb2e 	bl	10000c54 <arch_irq_enable>
100025f8:	bd10      	pop	{r4, pc}

100025fa <gpio_rpi_port_set_masked_raw>:
{
100025fa:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
100025fc:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100025fe:	20d0      	movs	r0, #208	; 0xd0
10002600:	0600      	lsls	r0, r0, #24
10002602:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
10002604:	6925      	ldr	r5, [r4, #16]
10002606:	4053      	eors	r3, r2
10002608:	400b      	ands	r3, r1
1000260a:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000260c:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
1000260e:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10002610:	6a03      	ldr	r3, [r0, #32]
10002612:	4053      	eors	r3, r2
10002614:	439d      	bics	r5, r3
10002616:	002b      	movs	r3, r5
10002618:	6925      	ldr	r5, [r4, #16]
1000261a:	401d      	ands	r5, r3
1000261c:	6963      	ldr	r3, [r4, #20]
1000261e:	402b      	ands	r3, r5
10002620:	62c3      	str	r3, [r0, #44]	; 0x2c
10002622:	6a03      	ldr	r3, [r0, #32]
10002624:	405a      	eors	r2, r3
10002626:	400a      	ands	r2, r1
10002628:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
1000262a:	6963      	ldr	r3, [r4, #20]
1000262c:	4011      	ands	r1, r2
1000262e:	4399      	bics	r1, r3
10002630:	62c1      	str	r1, [r0, #44]	; 0x2c
}
10002632:	2000      	movs	r0, #0
10002634:	bd30      	pop	{r4, r5, pc}

10002636 <gpio_rpi_configure>:
{
10002636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002638:	0015      	movs	r5, r2
1000263a:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
1000263c:	2401      	movs	r4, #1
1000263e:	0952      	lsrs	r2, r2, #5
10002640:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
10002642:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
10002644:	4021      	ands	r1, r4
10002646:	0038      	movs	r0, r7
10002648:	4022      	ands	r2, r4
1000264a:	f7ff f80d 	bl	10001668 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
1000264e:	2105      	movs	r1, #5
10002650:	0038      	movs	r0, r7
10002652:	f7fe fff3 	bl	1000163c <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10002656:	03ab      	lsls	r3, r5, #14
10002658:	d525      	bpl.n	100026a6 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
1000265a:	40bc      	lsls	r4, r7
1000265c:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
1000265e:	07a9      	lsls	r1, r5, #30
10002660:	d515      	bpl.n	1000268e <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
10002662:	4322      	orrs	r2, r4
10002664:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10002666:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
10002668:	6971      	ldr	r1, [r6, #20]
1000266a:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
1000266c:	0768      	lsls	r0, r5, #29
1000266e:	d507      	bpl.n	10002680 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
10002670:	4321      	orrs	r1, r4
10002672:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
10002674:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
10002676:	036d      	lsls	r5, r5, #13
10002678:	d507      	bpl.n	1000268a <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
1000267a:	6254      	str	r4, [r2, #36]	; 0x24
}
1000267c:	2000      	movs	r0, #0
1000267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
10002680:	43a1      	bics	r1, r4
10002682:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
10002684:	6154      	str	r4, [r2, #20]
    if (out)
10002686:	032d      	lsls	r5, r5, #12
10002688:	d4f7      	bmi.n	1000267a <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
1000268a:	6294      	str	r4, [r2, #40]	; 0x28
}
1000268c:	e7f6      	b.n	1000267c <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
1000268e:	43a2      	bics	r2, r4
10002690:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
10002692:	22d0      	movs	r2, #208	; 0xd0
10002694:	0612      	lsls	r2, r2, #24
10002696:	0329      	lsls	r1, r5, #12
10002698:	d501      	bpl.n	1000269e <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
1000269a:	6154      	str	r4, [r2, #20]
}
1000269c:	e7ed      	b.n	1000267a <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000269e:	036d      	lsls	r5, r5, #13
100026a0:	d5eb      	bpl.n	1000267a <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
100026a2:	6194      	str	r4, [r2, #24]
}
100026a4:	e7e9      	b.n	1000267a <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
100026a6:	03ed      	lsls	r5, r5, #15
100026a8:	d5e8      	bpl.n	1000267c <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
100026aa:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100026ac:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
100026ae:	0612      	lsls	r2, r2, #24
100026b0:	e7eb      	b.n	1000268a <gpio_rpi_configure+0x54>

100026b2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
100026b2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
100026b4:	6803      	ldr	r3, [r0, #0]
100026b6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
100026b8:	7905      	ldrb	r5, [r0, #4]
100026ba:	6804      	ldr	r4, [r0, #0]
100026bc:	00ed      	lsls	r5, r5, #3
100026be:	1964      	adds	r4, r4, r5
100026c0:	42a3      	cmp	r3, r4
100026c2:	d302      	bcc.n	100026ca <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
100026c4:	2002      	movs	r0, #2
100026c6:	4240      	negs	r0, r0
}
100026c8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
100026ca:	795c      	ldrb	r4, [r3, #5]
100026cc:	428c      	cmp	r4, r1
100026ce:	d001      	beq.n	100026d4 <pinctrl_lookup_state+0x22>
		(*state)++;
100026d0:	3308      	adds	r3, #8
100026d2:	e7f0      	b.n	100026b6 <pinctrl_lookup_state+0x4>
			return 0;
100026d4:	2000      	movs	r0, #0
100026d6:	e7f7      	b.n	100026c8 <pinctrl_lookup_state+0x16>

100026d8 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026da:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100026dc:	2601      	movs	r6, #1
100026de:	008d      	lsls	r5, r1, #2
100026e0:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100026e2:	42ac      	cmp	r4, r5
100026e4:	d101      	bne.n	100026ea <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
100026e6:	2000      	movs	r0, #0
100026e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
100026ea:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
100026ec:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
100026ee:	06c0      	lsls	r0, r0, #27
100026f0:	0ec0      	lsrs	r0, r0, #27
100026f2:	f000 f987 	bl	10002a04 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100026f6:	8821      	ldrh	r1, [r4, #0]
100026f8:	7820      	ldrb	r0, [r4, #0]
100026fa:	05c9      	lsls	r1, r1, #23
100026fc:	06c0      	lsls	r0, r0, #27
100026fe:	0f09      	lsrs	r1, r1, #28
10002700:	0ec0      	lsrs	r0, r0, #27
10002702:	f7fe ff9b 	bl	1000163c <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10002706:	7861      	ldrb	r1, [r4, #1]
10002708:	7820      	ldrb	r0, [r4, #0]
1000270a:	09ca      	lsrs	r2, r1, #7
1000270c:	06c0      	lsls	r0, r0, #27
1000270e:	0649      	lsls	r1, r1, #25
10002710:	0fc9      	lsrs	r1, r1, #31
10002712:	0ec0      	lsrs	r0, r0, #27
10002714:	f7fe ffa8 	bl	10001668 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10002718:	7861      	ldrb	r1, [r4, #1]
1000271a:	7820      	ldrb	r0, [r4, #0]
1000271c:	06c9      	lsls	r1, r1, #27
1000271e:	06c0      	lsls	r0, r0, #27
10002720:	0f09      	lsrs	r1, r1, #28
10002722:	0ec0      	lsrs	r0, r0, #27
10002724:	f7fe ffce 	bl	100016c4 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002728:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000272a:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000272c:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000272e:	06c0      	lsls	r0, r0, #27
10002730:	4031      	ands	r1, r6
10002732:	0ec0      	lsrs	r0, r0, #27
10002734:	f7fe ffb8 	bl	100016a8 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10002738:	78a1      	ldrb	r1, [r4, #2]
1000273a:	7820      	ldrb	r0, [r4, #0]
1000273c:	0789      	lsls	r1, r1, #30
1000273e:	06c0      	lsls	r0, r0, #27
10002740:	0fc9      	lsrs	r1, r1, #31
10002742:	0ec0      	lsrs	r0, r0, #27
10002744:	f7fe ffa2 	bl	1000168c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10002748:	78a1      	ldrb	r1, [r4, #2]
1000274a:	7820      	ldrb	r0, [r4, #0]
1000274c:	07c9      	lsls	r1, r1, #31
1000274e:	06c0      	lsls	r0, r0, #27
10002750:	0fc9      	lsrs	r1, r1, #31
10002752:	0ec0      	lsrs	r0, r0, #27
10002754:	f7fe fff4 	bl	10001740 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10002758:	003c      	movs	r4, r7
1000275a:	e7c2      	b.n	100026e2 <pinctrl_configure_pins+0xa>

1000275c <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
1000275c:	2000      	movs	r0, #0
1000275e:	4770      	bx	lr

10002760 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10002760:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10002762:	7900      	ldrb	r0, [r0, #4]
10002764:	2802      	cmp	r0, #2
10002766:	d009      	beq.n	1000277c <reset_rpi_read_register.isra.0+0x1c>
10002768:	2804      	cmp	r0, #4
1000276a:	d00b      	beq.n	10002784 <reset_rpi_read_register.isra.0+0x24>
1000276c:	2801      	cmp	r0, #1
1000276e:	d10c      	bne.n	1000278a <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
10002770:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
10002772:	780b      	ldrb	r3, [r1, #0]
10002774:	b2db      	uxtb	r3, r3
	return 0;
10002776:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10002778:	6013      	str	r3, [r2, #0]
}
1000277a:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
1000277c:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
1000277e:	880b      	ldrh	r3, [r1, #0]
10002780:	b29b      	uxth	r3, r3
		break;
10002782:	e7f8      	b.n	10002776 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10002784:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10002786:	680b      	ldr	r3, [r1, #0]
		break;
10002788:	e7f5      	b.n	10002776 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
1000278a:	2016      	movs	r0, #22
1000278c:	4240      	negs	r0, r0
1000278e:	e7f4      	b.n	1000277a <reset_rpi_read_register.isra.0+0x1a>

10002790 <reset_rpi_update>:
{
10002790:	0003      	movs	r3, r0
10002792:	b5f0      	push	{r4, r5, r6, r7, lr}
10002794:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10002796:	685f      	ldr	r7, [r3, #4]
{
10002798:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
1000279a:	793e      	ldrb	r6, [r7, #4]
{
1000279c:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000279e:	00f1      	lsls	r1, r6, #3
100027a0:	f7fd fd52 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100027a4:	aa03      	add	r2, sp, #12
100027a6:	0004      	movs	r4, r0
100027a8:	000d      	movs	r5, r1
100027aa:	b281      	uxth	r1, r0
100027ac:	0038      	movs	r0, r7
100027ae:	f7ff ffd7 	bl	10002760 <reset_rpi_read_register.isra.0>
	if (ret) {
100027b2:	2800      	cmp	r0, #0
100027b4:	d117      	bne.n	100027e6 <reset_rpi_update+0x56>
		value |= BIT(regbit);
100027b6:	2201      	movs	r2, #1
100027b8:	9903      	ldr	r1, [sp, #12]
100027ba:	b2ed      	uxtb	r5, r5
100027bc:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
100027be:	000b      	movs	r3, r1
		value |= BIT(regbit);
100027c0:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
100027c2:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
100027c4:	797d      	ldrb	r5, [r7, #5]
100027c6:	9a01      	ldr	r2, [sp, #4]
100027c8:	4295      	cmp	r5, r2
100027ca:	d001      	beq.n	100027d0 <reset_rpi_update+0x40>
		value |= BIT(regbit);
100027cc:	4663      	mov	r3, ip
100027ce:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
100027d0:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
100027d2:	2e02      	cmp	r6, #2
100027d4:	d009      	beq.n	100027ea <reset_rpi_update+0x5a>
100027d6:	2e04      	cmp	r6, #4
100027d8:	d00c      	beq.n	100027f4 <reset_rpi_update+0x64>
100027da:	2e01      	cmp	r6, #1
100027dc:	d10e      	bne.n	100027fc <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
100027de:	b2a4      	uxth	r4, r4
100027e0:	b2db      	uxtb	r3, r3
100027e2:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
100027e4:	7023      	strb	r3, [r4, #0]
}
100027e6:	b005      	add	sp, #20
100027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
100027ea:	b2a4      	uxth	r4, r4
100027ec:	b29b      	uxth	r3, r3
100027ee:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
100027f0:	8023      	strh	r3, [r4, #0]
}
100027f2:	e7f8      	b.n	100027e6 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
100027f4:	b2a4      	uxth	r4, r4
100027f6:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100027f8:	6023      	str	r3, [r4, #0]
}
100027fa:	e7f4      	b.n	100027e6 <reset_rpi_update+0x56>
	switch (config->reg_width) {
100027fc:	2016      	movs	r0, #22
100027fe:	4240      	negs	r0, r0
10002800:	e7f1      	b.n	100027e6 <reset_rpi_update+0x56>

10002802 <reset_rpi_line_assert>:
{
10002802:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10002804:	2201      	movs	r2, #1
10002806:	f7ff ffc3 	bl	10002790 <reset_rpi_update>
}
1000280a:	bd10      	pop	{r4, pc}

1000280c <reset_rpi_line_deassert>:
{
1000280c:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
1000280e:	2200      	movs	r2, #0
10002810:	f7ff ffbe 	bl	10002790 <reset_rpi_update>
}
10002814:	bd10      	pop	{r4, pc}

10002816 <reset_rpi_line_toggle>:
{
10002816:	b570      	push	{r4, r5, r6, lr}
10002818:	0004      	movs	r4, r0
1000281a:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
1000281c:	f7ff fff1 	bl	10002802 <reset_rpi_line_assert>
	if (ret) {
10002820:	2800      	cmp	r0, #0
10002822:	d103      	bne.n	1000282c <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10002824:	0029      	movs	r1, r5
10002826:	0020      	movs	r0, r4
10002828:	f7ff fff0 	bl	1000280c <reset_rpi_line_deassert>
}
1000282c:	bd70      	pop	{r4, r5, r6, pc}

1000282e <reset_rpi_status>:
{
1000282e:	0003      	movs	r3, r0
10002830:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10002832:	685e      	ldr	r6, [r3, #4]
{
10002834:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002836:	7931      	ldrb	r1, [r6, #4]
{
10002838:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000283a:	00c9      	lsls	r1, r1, #3
1000283c:	f7fd fd04 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10002840:	aa01      	add	r2, sp, #4
10002842:	000d      	movs	r5, r1
10002844:	b281      	uxth	r1, r0
10002846:	0030      	movs	r0, r6
10002848:	f7ff ff8a 	bl	10002760 <reset_rpi_read_register.isra.0>
	if (ret) {
1000284c:	2800      	cmp	r0, #0
1000284e:	d109      	bne.n	10002864 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10002850:	9b01      	ldr	r3, [sp, #4]
10002852:	b2ed      	uxtb	r5, r5
10002854:	40eb      	lsrs	r3, r5
10002856:	2201      	movs	r2, #1
10002858:	439a      	bics	r2, r3
1000285a:	7973      	ldrb	r3, [r6, #5]
1000285c:	4259      	negs	r1, r3
1000285e:	414b      	adcs	r3, r1
10002860:	4053      	eors	r3, r2
10002862:	7023      	strb	r3, [r4, #0]
}
10002864:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10002866 <uart_rpi_poll_in>:
{
10002866:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10002868:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000286a:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000286c:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000286e:	699c      	ldr	r4, [r3, #24]
10002870:	0020      	movs	r0, r4
10002872:	4010      	ands	r0, r2
10002874:	4214      	tst	r4, r2
10002876:	d102      	bne.n	1000287e <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10002878:	681b      	ldr	r3, [r3, #0]
1000287a:	700b      	strb	r3, [r1, #0]
}
1000287c:	bd10      	pop	{r4, pc}
		return -1;
1000287e:	2001      	movs	r0, #1
10002880:	4240      	negs	r0, r0
10002882:	e7fb      	b.n	1000287c <uart_rpi_poll_in+0x16>

10002884 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002884:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002886:	6843      	ldr	r3, [r0, #4]
10002888:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000288a:	6998      	ldr	r0, [r3, #24]
1000288c:	4210      	tst	r0, r2
1000288e:	d1fc      	bne.n	1000288a <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10002890:	6019      	str	r1, [r3, #0]
}
10002892:	4770      	bx	lr

10002894 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002894:	6843      	ldr	r3, [r0, #4]
10002896:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10002898:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
1000289a:	0518      	lsls	r0, r3, #20
1000289c:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000289e:	055a      	lsls	r2, r3, #21
100028a0:	d501      	bpl.n	100028a6 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
100028a2:	2208      	movs	r2, #8
100028a4:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
100028a6:	059a      	lsls	r2, r3, #22
100028a8:	d501      	bpl.n	100028ae <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
100028aa:	2202      	movs	r2, #2
100028ac:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
100028ae:	05db      	lsls	r3, r3, #23
100028b0:	d501      	bpl.n	100028b6 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
100028b2:	2304      	movs	r3, #4
100028b4:	4318      	orrs	r0, r3
}
100028b6:	4770      	bx	lr

100028b8 <uart_rpi_fifo_fill>:
{
100028b8:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100028ba:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100028bc:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100028be:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100028c0:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100028c2:	699c      	ldr	r4, [r3, #24]
100028c4:	422c      	tst	r4, r5
100028c6:	d102      	bne.n	100028ce <uart_rpi_fifo_fill+0x16>
100028c8:	1a14      	subs	r4, r2, r0
100028ca:	2c00      	cmp	r4, #0
100028cc:	dc00      	bgt.n	100028d0 <uart_rpi_fifo_fill+0x18>
}
100028ce:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
100028d0:	5c0c      	ldrb	r4, [r1, r0]
100028d2:	3001      	adds	r0, #1
100028d4:	601c      	str	r4, [r3, #0]
100028d6:	e7f4      	b.n	100028c2 <uart_rpi_fifo_fill+0xa>

100028d8 <uart_rpi_fifo_read>:
{
100028d8:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100028da:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100028dc:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100028de:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100028e0:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100028e2:	699c      	ldr	r4, [r3, #24]
100028e4:	422c      	tst	r4, r5
100028e6:	d102      	bne.n	100028ee <uart_rpi_fifo_read+0x16>
100028e8:	1a14      	subs	r4, r2, r0
100028ea:	2c00      	cmp	r4, #0
100028ec:	dc00      	bgt.n	100028f0 <uart_rpi_fifo_read+0x18>
}
100028ee:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
100028f0:	681c      	ldr	r4, [r3, #0]
100028f2:	540c      	strb	r4, [r1, r0]
100028f4:	3001      	adds	r0, #1
100028f6:	e7f4      	b.n	100028e2 <uart_rpi_fifo_read+0xa>

100028f8 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100028f8:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100028fa:	6843      	ldr	r3, [r0, #4]
100028fc:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100028fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002900:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002902:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002904:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002908:	438a      	bics	r2, r1
1000290a:	635a      	str	r2, [r3, #52]	; 0x34
}
1000290c:	4770      	bx	lr

1000290e <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000290e:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002910:	6843      	ldr	r3, [r0, #4]
10002912:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002914:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002916:	438b      	bics	r3, r1
10002918:	6393      	str	r3, [r2, #56]	; 0x38
}
1000291a:	4770      	bx	lr

1000291c <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000291c:	6843      	ldr	r3, [r0, #4]
1000291e:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10002920:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002922:	0680      	lsls	r0, r0, #26
10002924:	0fc0      	lsrs	r0, r0, #31
}
10002926:	4770      	bx	lr

10002928 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002928:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000292a:	6843      	ldr	r3, [r0, #4]
1000292c:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000292e:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002930:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002932:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002934:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002938:	438a      	bics	r2, r1
1000293a:	635a      	str	r2, [r3, #52]	; 0x34
}
1000293c:	4770      	bx	lr

1000293e <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000293e:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002940:	6843      	ldr	r3, [r0, #4]
10002942:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002944:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002946:	438b      	bics	r3, r1
10002948:	6393      	str	r3, [r2, #56]	; 0x38
}
1000294a:	4770      	bx	lr

1000294c <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000294c:	6843      	ldr	r3, [r0, #4]
1000294e:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10002950:	6998      	ldr	r0, [r3, #24]
10002952:	0600      	lsls	r0, r0, #24
10002954:	0fc0      	lsrs	r0, r0, #31
}
10002956:	4770      	bx	lr

10002958 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002958:	6843      	ldr	r3, [r0, #4]
1000295a:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
1000295c:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000295e:	06c0      	lsls	r0, r0, #27
10002960:	0fc0      	lsrs	r0, r0, #31
}
10002962:	4770      	bx	lr

10002964 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002964:	6843      	ldr	r3, [r0, #4]
10002966:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10002968:	23f8      	movs	r3, #248	; 0xf8
1000296a:	6b91      	ldr	r1, [r2, #56]	; 0x38
1000296c:	00db      	lsls	r3, r3, #3
1000296e:	430b      	orrs	r3, r1
10002970:	6393      	str	r3, [r2, #56]	; 0x38
}
10002972:	4770      	bx	lr

10002974 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10002974:	b510      	push	{r4, lr}
10002976:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10002978:	f7ff ffee 	bl	10002958 <uart_rpi_irq_rx_ready>
1000297c:	0003      	movs	r3, r0
1000297e:	2001      	movs	r0, #1
10002980:	2b00      	cmp	r3, #0
10002982:	d104      	bne.n	1000298e <uart_rpi_irq_is_pending+0x1a>
10002984:	0020      	movs	r0, r4
10002986:	f7ff ffc9 	bl	1000291c <uart_rpi_irq_tx_ready>
1000298a:	1e43      	subs	r3, r0, #1
1000298c:	4198      	sbcs	r0, r3
}
1000298e:	bd10      	pop	{r4, pc}

10002990 <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10002990:	2001      	movs	r0, #1
10002992:	4770      	bx	lr

10002994 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10002994:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10002996:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10002998:	60da      	str	r2, [r3, #12]
}
1000299a:	4770      	bx	lr

1000299c <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
1000299c:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
1000299e:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
100029a0:	6893      	ldr	r3, [r2, #8]
100029a2:	2b00      	cmp	r3, #0
100029a4:	d001      	beq.n	100029aa <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
100029a6:	68d1      	ldr	r1, [r2, #12]
100029a8:	4798      	blx	r3
	}
}
100029aa:	bd10      	pop	{r4, pc}

100029ac <uart_rpi_config_get>:
{
100029ac:	0003      	movs	r3, r0
100029ae:	b510      	push	{r4, lr}
100029b0:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
100029b2:	2208      	movs	r2, #8
100029b4:	6919      	ldr	r1, [r3, #16]
100029b6:	f7ff fd5c 	bl	10002472 <memcpy>
}
100029ba:	2000      	movs	r0, #0
100029bc:	bd10      	pop	{r4, pc}

100029be <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
100029be:	b510      	push	{r4, lr}
100029c0:	2200      	movs	r2, #0
100029c2:	2103      	movs	r1, #3
100029c4:	2014      	movs	r0, #20
100029c6:	f7fe f951 	bl	10000c6c <z_arm_irq_priority_set>
100029ca:	2014      	movs	r0, #20
100029cc:	f7fe f942 	bl	10000c54 <arch_irq_enable>
100029d0:	bd10      	pop	{r4, pc}

100029d2 <uart_rpi_configure>:
{
100029d2:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
100029d4:	6843      	ldr	r3, [r0, #4]
{
100029d6:	0006      	movs	r6, r0
100029d8:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
100029da:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
100029dc:	6809      	ldr	r1, [r1, #0]
100029de:	6818      	ldr	r0, [r3, #0]
100029e0:	f7fe febc 	bl	1000175c <uart_set_baudrate>
	if (baudrate == 0) {
100029e4:	2800      	cmp	r0, #0
100029e6:	d102      	bne.n	100029ee <uart_rpi_configure+0x1c>
		return -EINVAL;
100029e8:	2016      	movs	r0, #22
100029ea:	4240      	negs	r0, r0
}
100029ec:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
100029ee:	79a3      	ldrb	r3, [r4, #6]
100029f0:	7962      	ldrb	r2, [r4, #5]
100029f2:	7921      	ldrb	r1, [r4, #4]
100029f4:	6870      	ldr	r0, [r6, #4]
100029f6:	f7fe fb65 	bl	100010c4 <uart_rpi_set_format.isra.0>
100029fa:	2800      	cmp	r0, #0
100029fc:	d1f4      	bne.n	100029e8 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
100029fe:	cc06      	ldmia	r4!, {r1, r2}
10002a00:	c506      	stmia	r5!, {r1, r2}
	return 0;
10002a02:	e7f3      	b.n	100029ec <uart_rpi_configure+0x1a>

10002a04 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002a04:	2301      	movs	r3, #1
10002a06:	22d0      	movs	r2, #208	; 0xd0
10002a08:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10002a0a:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002a0c:	0612      	lsls	r2, r2, #24
10002a0e:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002a10:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10002a12:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002a14:	f7fe fe12 	bl	1000163c <gpio_set_function>
}
10002a18:	bd10      	pop	{r4, pc}

10002a1a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10002a1a:	4770      	bx	lr

10002a1c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10002a1c:	2800      	cmp	r0, #0
10002a1e:	d009      	beq.n	10002a34 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10002a20:	2301      	movs	r3, #1
10002a22:	68c2      	ldr	r2, [r0, #12]
10002a24:	2000      	movs	r0, #0
10002a26:	7851      	ldrb	r1, [r2, #1]
10002a28:	4219      	tst	r1, r3
10002a2a:	d002      	beq.n	10002a32 <z_device_is_ready+0x16>
10002a2c:	7810      	ldrb	r0, [r2, #0]
10002a2e:	4242      	negs	r2, r0
10002a30:	4150      	adcs	r0, r2
10002a32:	4018      	ands	r0, r3
}
10002a34:	4770      	bx	lr

10002a36 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10002a36:	f3ef 8310 	mrs	r3, PRIMASK
10002a3a:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10002a3c:	e7fe      	b.n	10002a3c <arch_system_halt+0x6>

10002a3e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10002a3e:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10002a40:	f7ff fff9 	bl	10002a36 <arch_system_halt>

10002a44 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a46:	0005      	movs	r5, r0
10002a48:	000e      	movs	r6, r1
10002a4a:	f3ef 8710 	mrs	r7, PRIMASK
10002a4e:	b672      	cpsid	i
	return z_impl_z_current_get();
10002a50:	f7ff faaa 	bl	10001fa8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10002a54:	0031      	movs	r1, r6
10002a56:	0004      	movs	r4, r0
10002a58:	0028      	movs	r0, r5
10002a5a:	f7ff fff0 	bl	10002a3e <k_sys_fatal_error_handler>
	if (key != 0U) {
10002a5e:	2f00      	cmp	r7, #0
10002a60:	d102      	bne.n	10002a68 <z_fatal_error+0x24>
	__asm__ volatile(
10002a62:	b662      	cpsie	i
10002a64:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10002a68:	0020      	movs	r0, r4
10002a6a:	f7fe fa59 	bl	10000f20 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10002a70 <z_early_memset>:
{
10002a70:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10002a72:	f7ff fd07 	bl	10002484 <memset>
}
10002a76:	bd10      	pop	{r4, pc}

10002a78 <z_early_memcpy>:
{
10002a78:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10002a7a:	f7ff fcfa 	bl	10002472 <memcpy>
}
10002a7e:	bd10      	pop	{r4, pc}

10002a80 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10002a80:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002a82:	f3ef 8310 	mrs	r3, PRIMASK
10002a86:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10002a88:	f7fe f8dc 	bl	10000c44 <arch_cpu_idle>
10002a8c:	e7f9      	b.n	10002a82 <idle+0x2>

10002a8e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10002a8e:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002a90:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10002a92:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002a94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002a96:	2300      	movs	r3, #0
10002a98:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002a9a:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10002a9c:	4770      	bx	lr

10002a9e <unpend_thread_no_timeout>:
{
10002a9e:	b510      	push	{r4, lr}
10002aa0:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10002aa2:	f7ff fff4 	bl	10002a8e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10002aa6:	2202      	movs	r2, #2
10002aa8:	7b63      	ldrb	r3, [r4, #13]
10002aaa:	4393      	bics	r3, r2
10002aac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10002aae:	2300      	movs	r3, #0
10002ab0:	60a3      	str	r3, [r4, #8]
}
10002ab2:	bd10      	pop	{r4, pc}

10002ab4 <z_ready_thread>:
{
10002ab4:	b510      	push	{r4, lr}
10002ab6:	f3ef 8410 	mrs	r4, PRIMASK
10002aba:	b672      	cpsid	i
			ready_thread(thread);
10002abc:	f7ff f8a0 	bl	10001c00 <ready_thread>
	if (key != 0U) {
10002ac0:	2c00      	cmp	r4, #0
10002ac2:	d102      	bne.n	10002aca <z_ready_thread+0x16>
	__asm__ volatile(
10002ac4:	b662      	cpsie	i
10002ac6:	f3bf 8f6f 	isb	sy
}
10002aca:	bd10      	pop	{r4, pc}

10002acc <z_sched_wake_thread>:
{
10002acc:	b570      	push	{r4, r5, r6, lr}
10002ace:	0004      	movs	r4, r0
10002ad0:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10002ad2:	f3ef 8510 	mrs	r5, PRIMASK
10002ad6:	b672      	cpsid	i
		if (!killed) {
10002ad8:	2328      	movs	r3, #40	; 0x28
10002ada:	7b42      	ldrb	r2, [r0, #13]
10002adc:	421a      	tst	r2, r3
10002ade:	d10e      	bne.n	10002afe <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10002ae0:	6883      	ldr	r3, [r0, #8]
10002ae2:	2b00      	cmp	r3, #0
10002ae4:	d001      	beq.n	10002aea <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10002ae6:	f7ff ffda 	bl	10002a9e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002aea:	2204      	movs	r2, #4
10002aec:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10002aee:	2e00      	cmp	r6, #0
10002af0:	d000      	beq.n	10002af4 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10002af2:	2214      	movs	r2, #20
10002af4:	4393      	bics	r3, r2
			ready_thread(thread);
10002af6:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002af8:	7363      	strb	r3, [r4, #13]
10002afa:	f7ff f881 	bl	10001c00 <ready_thread>
	if (key != 0U) {
10002afe:	2d00      	cmp	r5, #0
10002b00:	d102      	bne.n	10002b08 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10002b02:	b662      	cpsie	i
10002b04:	f3bf 8f6f 	isb	sy
}
10002b08:	bd70      	pop	{r4, r5, r6, pc}

10002b0a <z_thread_timeout>:
{
10002b0a:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10002b0c:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10002b0e:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10002b10:	f7ff ffdc 	bl	10002acc <z_sched_wake_thread>
}
10002b14:	bd10      	pop	{r4, pc}

10002b16 <z_reschedule_irqlock>:
{
10002b16:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002b18:	2800      	cmp	r0, #0
10002b1a:	d105      	bne.n	10002b28 <z_reschedule_irqlock+0x12>
10002b1c:	f3ef 8005 	mrs	r0, IPSR
10002b20:	2800      	cmp	r0, #0
10002b22:	d102      	bne.n	10002b2a <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10002b24:	f7fe f8e4 	bl	10000cf0 <arch_swap>
}
10002b28:	bd10      	pop	{r4, pc}
10002b2a:	b662      	cpsie	i
10002b2c:	f3bf 8f6f 	isb	sy
10002b30:	e7fa      	b.n	10002b28 <z_reschedule_irqlock+0x12>

10002b32 <z_reschedule_unlocked>:
{
10002b32:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002b34:	f3ef 8010 	mrs	r0, PRIMASK
10002b38:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002b3a:	f7ff ffec 	bl	10002b16 <z_reschedule_irqlock>
}
10002b3e:	bd10      	pop	{r4, pc}

10002b40 <z_abort_timeout>:
{
10002b40:	b510      	push	{r4, lr}
10002b42:	f3ef 8410 	mrs	r4, PRIMASK
10002b46:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10002b48:	6803      	ldr	r3, [r0, #0]
10002b4a:	2b00      	cmp	r3, #0
10002b4c:	d008      	beq.n	10002b60 <z_abort_timeout+0x20>
			remove_timeout(to);
10002b4e:	f7ff fad5 	bl	100020fc <remove_timeout>
			ret = 0;
10002b52:	2000      	movs	r0, #0
	if (key != 0U) {
10002b54:	2c00      	cmp	r4, #0
10002b56:	d102      	bne.n	10002b5e <z_abort_timeout+0x1e>
	__asm__ volatile(
10002b58:	b662      	cpsie	i
10002b5a:	f3bf 8f6f 	isb	sy
}
10002b5e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10002b60:	2016      	movs	r0, #22
10002b62:	4240      	negs	r0, r0
10002b64:	e7f6      	b.n	10002b54 <z_abort_timeout+0x14>

10002b66 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10002b66:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10002b68:	f7ff fbc0 	bl	100022ec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10002b6c:	bd10      	pop	{r4, pc}
	...
