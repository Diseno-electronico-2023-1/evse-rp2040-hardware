
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20003200 100041a9 1000d1bb 10004165     .2. .A......eA..
	...
1000012c:	10003fa1 00000000 00000000 10003f41     .?..........A?..
1000013c:	10005129                                )Q..

10000140 <_irq_vector_table>:
10000140:	10004011 10004011 10004011 10004011     .@...@...@...@..
10000150:	10004011 10004011 10004011 10004011     .@...@...@...@..
10000160:	10004011 10004011 10004011 10004011     .@...@...@...@..
10000170:	10004011 10004011 10004011 10004011     .@...@...@...@..
10000180:	10004011 10004011 10004011 10004011     .@...@...@...@..
10000190:	10004011 10004011 10004011 10004011     .@...@...@...@..
100001a0:	10004011 10004011                       .@...@..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f85f 	bl	10000304 <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__divsi3>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d041      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>

10000260 <.divsi3_skip_div0_test>:
10000260:	b410      	push	{r4}
10000262:	0004      	movs	r4, r0
10000264:	404c      	eors	r4, r1
10000266:	46a4      	mov	ip, r4
10000268:	2301      	movs	r3, #1
1000026a:	2200      	movs	r2, #0
1000026c:	2900      	cmp	r1, #0
1000026e:	d500      	bpl.n	10000272 <.divsi3_skip_div0_test+0x12>
10000270:	4249      	negs	r1, r1
10000272:	2800      	cmp	r0, #0
10000274:	d500      	bpl.n	10000278 <.divsi3_skip_div0_test+0x18>
10000276:	4240      	negs	r0, r0
10000278:	4288      	cmp	r0, r1
1000027a:	d32c      	bcc.n	100002d6 <.divsi3_skip_div0_test+0x76>
1000027c:	2401      	movs	r4, #1
1000027e:	0724      	lsls	r4, r4, #28
10000280:	42a1      	cmp	r1, r4
10000282:	d204      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000284:	4281      	cmp	r1, r0
10000286:	d202      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000288:	0109      	lsls	r1, r1, #4
1000028a:	011b      	lsls	r3, r3, #4
1000028c:	e7f8      	b.n	10000280 <.divsi3_skip_div0_test+0x20>
1000028e:	00e4      	lsls	r4, r4, #3
10000290:	42a1      	cmp	r1, r4
10000292:	d204      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000294:	4281      	cmp	r1, r0
10000296:	d202      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000298:	0049      	lsls	r1, r1, #1
1000029a:	005b      	lsls	r3, r3, #1
1000029c:	e7f8      	b.n	10000290 <.divsi3_skip_div0_test+0x30>
1000029e:	4288      	cmp	r0, r1
100002a0:	d301      	bcc.n	100002a6 <.divsi3_skip_div0_test+0x46>
100002a2:	1a40      	subs	r0, r0, r1
100002a4:	431a      	orrs	r2, r3
100002a6:	084c      	lsrs	r4, r1, #1
100002a8:	42a0      	cmp	r0, r4
100002aa:	d302      	bcc.n	100002b2 <.divsi3_skip_div0_test+0x52>
100002ac:	1b00      	subs	r0, r0, r4
100002ae:	085c      	lsrs	r4, r3, #1
100002b0:	4322      	orrs	r2, r4
100002b2:	088c      	lsrs	r4, r1, #2
100002b4:	42a0      	cmp	r0, r4
100002b6:	d302      	bcc.n	100002be <.divsi3_skip_div0_test+0x5e>
100002b8:	1b00      	subs	r0, r0, r4
100002ba:	089c      	lsrs	r4, r3, #2
100002bc:	4322      	orrs	r2, r4
100002be:	08cc      	lsrs	r4, r1, #3
100002c0:	42a0      	cmp	r0, r4
100002c2:	d302      	bcc.n	100002ca <.divsi3_skip_div0_test+0x6a>
100002c4:	1b00      	subs	r0, r0, r4
100002c6:	08dc      	lsrs	r4, r3, #3
100002c8:	4322      	orrs	r2, r4
100002ca:	2800      	cmp	r0, #0
100002cc:	d003      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002ce:	091b      	lsrs	r3, r3, #4
100002d0:	d001      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002d2:	0909      	lsrs	r1, r1, #4
100002d4:	e7e3      	b.n	1000029e <.divsi3_skip_div0_test+0x3e>
100002d6:	0010      	movs	r0, r2
100002d8:	4664      	mov	r4, ip
100002da:	2c00      	cmp	r4, #0
100002dc:	d500      	bpl.n	100002e0 <.divsi3_skip_div0_test+0x80>
100002de:	4240      	negs	r0, r0
100002e0:	bc10      	pop	{r4}
100002e2:	4770      	bx	lr
100002e4:	b501      	push	{r0, lr}
100002e6:	2000      	movs	r0, #0
100002e8:	f000 f80c 	bl	10000304 <__aeabi_idiv0>
100002ec:	bd02      	pop	{r1, pc}
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_idivmod>:
100002f0:	2900      	cmp	r1, #0
100002f2:	d0f7      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>
100002f4:	b503      	push	{r0, r1, lr}
100002f6:	f7ff ffb3 	bl	10000260 <.divsi3_skip_div0_test>
100002fa:	bc0e      	pop	{r1, r2, r3}
100002fc:	4342      	muls	r2, r0
100002fe:	1a89      	subs	r1, r1, r2
10000300:	4718      	bx	r3
10000302:	46c0      	nop			; (mov r8, r8)

10000304 <__aeabi_idiv0>:
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)

10000308 <__clzsi2>:
10000308:	211c      	movs	r1, #28
1000030a:	2301      	movs	r3, #1
1000030c:	041b      	lsls	r3, r3, #16
1000030e:	4298      	cmp	r0, r3
10000310:	d301      	bcc.n	10000316 <__clzsi2+0xe>
10000312:	0c00      	lsrs	r0, r0, #16
10000314:	3910      	subs	r1, #16
10000316:	0a1b      	lsrs	r3, r3, #8
10000318:	4298      	cmp	r0, r3
1000031a:	d301      	bcc.n	10000320 <__clzsi2+0x18>
1000031c:	0a00      	lsrs	r0, r0, #8
1000031e:	3908      	subs	r1, #8
10000320:	091b      	lsrs	r3, r3, #4
10000322:	4298      	cmp	r0, r3
10000324:	d301      	bcc.n	1000032a <__clzsi2+0x22>
10000326:	0900      	lsrs	r0, r0, #4
10000328:	3904      	subs	r1, #4
1000032a:	a202      	add	r2, pc, #8	; (adr r2, 10000334 <__clzsi2+0x2c>)
1000032c:	5c10      	ldrb	r0, [r2, r0]
1000032e:	1840      	adds	r0, r0, r1
10000330:	4770      	bx	lr
10000332:	46c0      	nop			; (mov r8, r8)
10000334:	02020304 	.word	0x02020304
10000338:	01010101 	.word	0x01010101
	...

10000344 <__ctzsi2>:
10000344:	4241      	negs	r1, r0
10000346:	4008      	ands	r0, r1
10000348:	211c      	movs	r1, #28
1000034a:	2301      	movs	r3, #1
1000034c:	041b      	lsls	r3, r3, #16
1000034e:	4298      	cmp	r0, r3
10000350:	d301      	bcc.n	10000356 <__ctzsi2+0x12>
10000352:	0c00      	lsrs	r0, r0, #16
10000354:	3910      	subs	r1, #16
10000356:	0a1b      	lsrs	r3, r3, #8
10000358:	4298      	cmp	r0, r3
1000035a:	d301      	bcc.n	10000360 <__ctzsi2+0x1c>
1000035c:	0a00      	lsrs	r0, r0, #8
1000035e:	3908      	subs	r1, #8
10000360:	091b      	lsrs	r3, r3, #4
10000362:	4298      	cmp	r0, r3
10000364:	d301      	bcc.n	1000036a <__ctzsi2+0x26>
10000366:	0900      	lsrs	r0, r0, #4
10000368:	3904      	subs	r1, #4
1000036a:	a202      	add	r2, pc, #8	; (adr r2, 10000374 <__ctzsi2+0x30>)
1000036c:	5c10      	ldrb	r0, [r2, r0]
1000036e:	1a40      	subs	r0, r0, r1
10000370:	4770      	bx	lr
10000372:	46c0      	nop			; (mov r8, r8)
10000374:	1d1d1c1b 	.word	0x1d1d1c1b
10000378:	1e1e1e1e 	.word	0x1e1e1e1e
1000037c:	1f1f1f1f 	.word	0x1f1f1f1f
10000380:	1f1f1f1f 	.word	0x1f1f1f1f

10000384 <__aeabi_uldivmod>:
10000384:	2b00      	cmp	r3, #0
10000386:	d111      	bne.n	100003ac <__aeabi_uldivmod+0x28>
10000388:	2a00      	cmp	r2, #0
1000038a:	d10f      	bne.n	100003ac <__aeabi_uldivmod+0x28>
1000038c:	2900      	cmp	r1, #0
1000038e:	d100      	bne.n	10000392 <__aeabi_uldivmod+0xe>
10000390:	2800      	cmp	r0, #0
10000392:	d002      	beq.n	1000039a <__aeabi_uldivmod+0x16>
10000394:	2100      	movs	r1, #0
10000396:	43c9      	mvns	r1, r1
10000398:	0008      	movs	r0, r1
1000039a:	b407      	push	{r0, r1, r2}
1000039c:	4802      	ldr	r0, [pc, #8]	; (100003a8 <__aeabi_uldivmod+0x24>)
1000039e:	a102      	add	r1, pc, #8	; (adr r1, 100003a8 <__aeabi_uldivmod+0x24>)
100003a0:	1840      	adds	r0, r0, r1
100003a2:	9002      	str	r0, [sp, #8]
100003a4:	bd03      	pop	{r0, r1, pc}
100003a6:	46c0      	nop			; (mov r8, r8)
100003a8:	ffffff5d 	.word	0xffffff5d
100003ac:	b403      	push	{r0, r1}
100003ae:	4668      	mov	r0, sp
100003b0:	b501      	push	{r0, lr}
100003b2:	9802      	ldr	r0, [sp, #8]
100003b4:	f001 ff3d 	bl	10002232 <__udivmoddi4>
100003b8:	9b01      	ldr	r3, [sp, #4]
100003ba:	469e      	mov	lr, r3
100003bc:	b002      	add	sp, #8
100003be:	bc0c      	pop	{r2, r3}
100003c0:	4770      	bx	lr
100003c2:	46c0      	nop			; (mov r8, r8)

100003c4 <__aeabi_f2ulz>:
100003c4:	b5d0      	push	{r4, r6, r7, lr}
100003c6:	f001 fc35 	bl	10001c34 <__aeabi_f2d>
100003ca:	2200      	movs	r2, #0
100003cc:	4b0b      	ldr	r3, [pc, #44]	; (100003fc <__aeabi_f2ulz+0x38>)
100003ce:	0006      	movs	r6, r0
100003d0:	000f      	movs	r7, r1
100003d2:	f000 fea7 	bl	10001124 <__aeabi_dmul>
100003d6:	f001 fd67 	bl	10001ea8 <__aeabi_d2uiz>
100003da:	0004      	movs	r4, r0
100003dc:	f001 fc0a 	bl	10001bf4 <__aeabi_ui2d>
100003e0:	2200      	movs	r2, #0
100003e2:	4b07      	ldr	r3, [pc, #28]	; (10000400 <__aeabi_f2ulz+0x3c>)
100003e4:	f000 fe9e 	bl	10001124 <__aeabi_dmul>
100003e8:	0002      	movs	r2, r0
100003ea:	000b      	movs	r3, r1
100003ec:	0030      	movs	r0, r6
100003ee:	0039      	movs	r1, r7
100003f0:	f001 f8c2 	bl	10001578 <__aeabi_dsub>
100003f4:	f001 fd58 	bl	10001ea8 <__aeabi_d2uiz>
100003f8:	0021      	movs	r1, r4
100003fa:	bdd0      	pop	{r4, r6, r7, pc}
100003fc:	3df00000 	.word	0x3df00000
10000400:	41f00000 	.word	0x41f00000

10000404 <__aeabi_fdiv>:
10000404:	b5f0      	push	{r4, r5, r6, r7, lr}
10000406:	0fc3      	lsrs	r3, r0, #31
10000408:	b085      	sub	sp, #20
1000040a:	0244      	lsls	r4, r0, #9
1000040c:	0045      	lsls	r5, r0, #1
1000040e:	1c0f      	adds	r7, r1, #0
10000410:	0a64      	lsrs	r4, r4, #9
10000412:	0e2d      	lsrs	r5, r5, #24
10000414:	9303      	str	r3, [sp, #12]
10000416:	9302      	str	r3, [sp, #8]
10000418:	d00a      	beq.n	10000430 <__aeabi_fdiv+0x2c>
1000041a:	2dff      	cmp	r5, #255	; 0xff
1000041c:	d03b      	beq.n	10000496 <__aeabi_fdiv+0x92>
1000041e:	2380      	movs	r3, #128	; 0x80
10000420:	00e4      	lsls	r4, r4, #3
10000422:	04db      	lsls	r3, r3, #19
10000424:	431c      	orrs	r4, r3
10000426:	2300      	movs	r3, #0
10000428:	3d7f      	subs	r5, #127	; 0x7f
1000042a:	9501      	str	r5, [sp, #4]
1000042c:	9300      	str	r3, [sp, #0]
1000042e:	e00e      	b.n	1000044e <__aeabi_fdiv+0x4a>
10000430:	2301      	movs	r3, #1
10000432:	9401      	str	r4, [sp, #4]
10000434:	9300      	str	r3, [sp, #0]
10000436:	2c00      	cmp	r4, #0
10000438:	d009      	beq.n	1000044e <__aeabi_fdiv+0x4a>
1000043a:	0020      	movs	r0, r4
1000043c:	f7ff ff64 	bl	10000308 <__clzsi2>
10000440:	1f43      	subs	r3, r0, #5
10000442:	409c      	lsls	r4, r3
10000444:	2376      	movs	r3, #118	; 0x76
10000446:	425b      	negs	r3, r3
10000448:	1a1b      	subs	r3, r3, r0
1000044a:	9301      	str	r3, [sp, #4]
1000044c:	9500      	str	r5, [sp, #0]
1000044e:	027d      	lsls	r5, r7, #9
10000450:	007e      	lsls	r6, r7, #1
10000452:	0a6d      	lsrs	r5, r5, #9
10000454:	0e36      	lsrs	r6, r6, #24
10000456:	0fff      	lsrs	r7, r7, #31
10000458:	2e00      	cmp	r6, #0
1000045a:	d023      	beq.n	100004a4 <__aeabi_fdiv+0xa0>
1000045c:	2eff      	cmp	r6, #255	; 0xff
1000045e:	d02e      	beq.n	100004be <__aeabi_fdiv+0xba>
10000460:	2380      	movs	r3, #128	; 0x80
10000462:	00ed      	lsls	r5, r5, #3
10000464:	04db      	lsls	r3, r3, #19
10000466:	431d      	orrs	r5, r3
10000468:	0033      	movs	r3, r6
1000046a:	3b7f      	subs	r3, #127	; 0x7f
1000046c:	2200      	movs	r2, #0
1000046e:	9801      	ldr	r0, [sp, #4]
10000470:	9903      	ldr	r1, [sp, #12]
10000472:	1ac3      	subs	r3, r0, r3
10000474:	9800      	ldr	r0, [sp, #0]
10000476:	4079      	eors	r1, r7
10000478:	0080      	lsls	r0, r0, #2
1000047a:	4310      	orrs	r0, r2
1000047c:	3801      	subs	r0, #1
1000047e:	280e      	cmp	r0, #14
10000480:	d823      	bhi.n	100004ca <__aeabi_fdiv+0xc6>
10000482:	f7ff fe91 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000486:	994d      	.short	0x994d
10000488:	99929973 	.word	0x99929973
1000048c:	924d4d73 	.word	0x924d4d73
10000490:	61616173 	.word	0x61616173
10000494:	53          	.byte	0x53
10000495:	00          	.byte	0x00
10000496:	2302      	movs	r3, #2
10000498:	9501      	str	r5, [sp, #4]
1000049a:	9300      	str	r3, [sp, #0]
1000049c:	2c00      	cmp	r4, #0
1000049e:	d0d6      	beq.n	1000044e <__aeabi_fdiv+0x4a>
100004a0:	3301      	adds	r3, #1
100004a2:	e7c3      	b.n	1000042c <__aeabi_fdiv+0x28>
100004a4:	002b      	movs	r3, r5
100004a6:	2201      	movs	r2, #1
100004a8:	2d00      	cmp	r5, #0
100004aa:	d0e0      	beq.n	1000046e <__aeabi_fdiv+0x6a>
100004ac:	0028      	movs	r0, r5
100004ae:	f7ff ff2b 	bl	10000308 <__clzsi2>
100004b2:	1f43      	subs	r3, r0, #5
100004b4:	409d      	lsls	r5, r3
100004b6:	2376      	movs	r3, #118	; 0x76
100004b8:	425b      	negs	r3, r3
100004ba:	1a1b      	subs	r3, r3, r0
100004bc:	e7d6      	b.n	1000046c <__aeabi_fdiv+0x68>
100004be:	0033      	movs	r3, r6
100004c0:	2202      	movs	r2, #2
100004c2:	2d00      	cmp	r5, #0
100004c4:	d0d3      	beq.n	1000046e <__aeabi_fdiv+0x6a>
100004c6:	3201      	adds	r2, #1
100004c8:	e7d1      	b.n	1000046e <__aeabi_fdiv+0x6a>
100004ca:	0164      	lsls	r4, r4, #5
100004cc:	016d      	lsls	r5, r5, #5
100004ce:	42ac      	cmp	r4, r5
100004d0:	d328      	bcc.n	10000524 <__aeabi_fdiv+0x120>
100004d2:	201a      	movs	r0, #26
100004d4:	2201      	movs	r2, #1
100004d6:	1b64      	subs	r4, r4, r5
100004d8:	2601      	movs	r6, #1
100004da:	0027      	movs	r7, r4
100004dc:	0052      	lsls	r2, r2, #1
100004de:	0064      	lsls	r4, r4, #1
100004e0:	2f00      	cmp	r7, #0
100004e2:	db01      	blt.n	100004e8 <__aeabi_fdiv+0xe4>
100004e4:	42a5      	cmp	r5, r4
100004e6:	d801      	bhi.n	100004ec <__aeabi_fdiv+0xe8>
100004e8:	1b64      	subs	r4, r4, r5
100004ea:	4332      	orrs	r2, r6
100004ec:	3801      	subs	r0, #1
100004ee:	2800      	cmp	r0, #0
100004f0:	d1f3      	bne.n	100004da <__aeabi_fdiv+0xd6>
100004f2:	1e60      	subs	r0, r4, #1
100004f4:	4184      	sbcs	r4, r0
100004f6:	4314      	orrs	r4, r2
100004f8:	0018      	movs	r0, r3
100004fa:	307f      	adds	r0, #127	; 0x7f
100004fc:	2800      	cmp	r0, #0
100004fe:	dd38      	ble.n	10000572 <__aeabi_fdiv+0x16e>
10000500:	0762      	lsls	r2, r4, #29
10000502:	d004      	beq.n	1000050e <__aeabi_fdiv+0x10a>
10000504:	220f      	movs	r2, #15
10000506:	4022      	ands	r2, r4
10000508:	2a04      	cmp	r2, #4
1000050a:	d000      	beq.n	1000050e <__aeabi_fdiv+0x10a>
1000050c:	3404      	adds	r4, #4
1000050e:	0122      	lsls	r2, r4, #4
10000510:	d503      	bpl.n	1000051a <__aeabi_fdiv+0x116>
10000512:	3380      	adds	r3, #128	; 0x80
10000514:	0018      	movs	r0, r3
10000516:	4a2b      	ldr	r2, [pc, #172]	; (100005c4 <__aeabi_fdiv+0x1c0>)
10000518:	4014      	ands	r4, r2
1000051a:	08e5      	lsrs	r5, r4, #3
1000051c:	28fe      	cmp	r0, #254	; 0xfe
1000051e:	dd1d      	ble.n	1000055c <__aeabi_fdiv+0x158>
10000520:	2500      	movs	r5, #0
10000522:	e00f      	b.n	10000544 <__aeabi_fdiv+0x140>
10000524:	201b      	movs	r0, #27
10000526:	2200      	movs	r2, #0
10000528:	3b01      	subs	r3, #1
1000052a:	e7d5      	b.n	100004d8 <__aeabi_fdiv+0xd4>
1000052c:	2380      	movs	r3, #128	; 0x80
1000052e:	03db      	lsls	r3, r3, #15
10000530:	421c      	tst	r4, r3
10000532:	d003      	beq.n	1000053c <__aeabi_fdiv+0x138>
10000534:	421d      	tst	r5, r3
10000536:	d101      	bne.n	1000053c <__aeabi_fdiv+0x138>
10000538:	002c      	movs	r4, r5
1000053a:	9702      	str	r7, [sp, #8]
1000053c:	2580      	movs	r5, #128	; 0x80
1000053e:	9902      	ldr	r1, [sp, #8]
10000540:	03ed      	lsls	r5, r5, #15
10000542:	4325      	orrs	r5, r4
10000544:	20ff      	movs	r0, #255	; 0xff
10000546:	e009      	b.n	1000055c <__aeabi_fdiv+0x158>
10000548:	9903      	ldr	r1, [sp, #12]
1000054a:	9a00      	ldr	r2, [sp, #0]
1000054c:	2a02      	cmp	r2, #2
1000054e:	d0e7      	beq.n	10000520 <__aeabi_fdiv+0x11c>
10000550:	2a03      	cmp	r2, #3
10000552:	d02f      	beq.n	100005b4 <__aeabi_fdiv+0x1b0>
10000554:	2500      	movs	r5, #0
10000556:	0028      	movs	r0, r5
10000558:	2a01      	cmp	r2, #1
1000055a:	d1cd      	bne.n	100004f8 <__aeabi_fdiv+0xf4>
1000055c:	026d      	lsls	r5, r5, #9
1000055e:	0a6d      	lsrs	r5, r5, #9
10000560:	05c0      	lsls	r0, r0, #23
10000562:	4328      	orrs	r0, r5
10000564:	07c9      	lsls	r1, r1, #31
10000566:	4308      	orrs	r0, r1
10000568:	b005      	add	sp, #20
1000056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000056c:	002c      	movs	r4, r5
1000056e:	0039      	movs	r1, r7
10000570:	e7ec      	b.n	1000054c <__aeabi_fdiv+0x148>
10000572:	2201      	movs	r2, #1
10000574:	2500      	movs	r5, #0
10000576:	1a12      	subs	r2, r2, r0
10000578:	0028      	movs	r0, r5
1000057a:	2a1b      	cmp	r2, #27
1000057c:	dcee      	bgt.n	1000055c <__aeabi_fdiv+0x158>
1000057e:	339e      	adds	r3, #158	; 0x9e
10000580:	0025      	movs	r5, r4
10000582:	409c      	lsls	r4, r3
10000584:	40d5      	lsrs	r5, r2
10000586:	1e63      	subs	r3, r4, #1
10000588:	419c      	sbcs	r4, r3
1000058a:	4325      	orrs	r5, r4
1000058c:	076b      	lsls	r3, r5, #29
1000058e:	d004      	beq.n	1000059a <__aeabi_fdiv+0x196>
10000590:	230f      	movs	r3, #15
10000592:	402b      	ands	r3, r5
10000594:	2b04      	cmp	r3, #4
10000596:	d000      	beq.n	1000059a <__aeabi_fdiv+0x196>
10000598:	3504      	adds	r5, #4
1000059a:	2380      	movs	r3, #128	; 0x80
1000059c:	0028      	movs	r0, r5
1000059e:	04db      	lsls	r3, r3, #19
100005a0:	4018      	ands	r0, r3
100005a2:	421d      	tst	r5, r3
100005a4:	d10b      	bne.n	100005be <__aeabi_fdiv+0x1ba>
100005a6:	08ed      	lsrs	r5, r5, #3
100005a8:	e7d8      	b.n	1000055c <__aeabi_fdiv+0x158>
100005aa:	2480      	movs	r4, #128	; 0x80
100005ac:	2300      	movs	r3, #0
100005ae:	03e4      	lsls	r4, r4, #15
100005b0:	9302      	str	r3, [sp, #8]
100005b2:	e7c3      	b.n	1000053c <__aeabi_fdiv+0x138>
100005b4:	9102      	str	r1, [sp, #8]
100005b6:	e7c1      	b.n	1000053c <__aeabi_fdiv+0x138>
100005b8:	2500      	movs	r5, #0
100005ba:	0028      	movs	r0, r5
100005bc:	e7ce      	b.n	1000055c <__aeabi_fdiv+0x158>
100005be:	2500      	movs	r5, #0
100005c0:	2001      	movs	r0, #1
100005c2:	e7cb      	b.n	1000055c <__aeabi_fdiv+0x158>
100005c4:	f7ffffff 	.word	0xf7ffffff

100005c8 <__aeabi_ui2f>:
100005c8:	2300      	movs	r3, #0
100005ca:	b570      	push	{r4, r5, r6, lr}
100005cc:	0004      	movs	r4, r0
100005ce:	4298      	cmp	r0, r3
100005d0:	d009      	beq.n	100005e6 <__aeabi_ui2f+0x1e>
100005d2:	f7ff fe99 	bl	10000308 <__clzsi2>
100005d6:	239e      	movs	r3, #158	; 0x9e
100005d8:	1a1b      	subs	r3, r3, r0
100005da:	2b96      	cmp	r3, #150	; 0x96
100005dc:	dc08      	bgt.n	100005f0 <__aeabi_ui2f+0x28>
100005de:	2808      	cmp	r0, #8
100005e0:	d029      	beq.n	10000636 <__aeabi_ui2f+0x6e>
100005e2:	3808      	subs	r0, #8
100005e4:	4084      	lsls	r4, r0
100005e6:	0264      	lsls	r4, r4, #9
100005e8:	05d8      	lsls	r0, r3, #23
100005ea:	0a64      	lsrs	r4, r4, #9
100005ec:	4320      	orrs	r0, r4
100005ee:	bd70      	pop	{r4, r5, r6, pc}
100005f0:	2b99      	cmp	r3, #153	; 0x99
100005f2:	dd1b      	ble.n	1000062c <__aeabi_ui2f+0x64>
100005f4:	0002      	movs	r2, r0
100005f6:	0021      	movs	r1, r4
100005f8:	321b      	adds	r2, #27
100005fa:	4091      	lsls	r1, r2
100005fc:	000a      	movs	r2, r1
100005fe:	1e51      	subs	r1, r2, #1
10000600:	418a      	sbcs	r2, r1
10000602:	2105      	movs	r1, #5
10000604:	1a09      	subs	r1, r1, r0
10000606:	40cc      	lsrs	r4, r1
10000608:	4314      	orrs	r4, r2
1000060a:	0022      	movs	r2, r4
1000060c:	4d0b      	ldr	r5, [pc, #44]	; (1000063c <__aeabi_ui2f+0x74>)
1000060e:	402a      	ands	r2, r5
10000610:	0761      	lsls	r1, r4, #29
10000612:	d004      	beq.n	1000061e <__aeabi_ui2f+0x56>
10000614:	210f      	movs	r1, #15
10000616:	4021      	ands	r1, r4
10000618:	2904      	cmp	r1, #4
1000061a:	d000      	beq.n	1000061e <__aeabi_ui2f+0x56>
1000061c:	3204      	adds	r2, #4
1000061e:	0151      	lsls	r1, r2, #5
10000620:	d502      	bpl.n	10000628 <__aeabi_ui2f+0x60>
10000622:	239f      	movs	r3, #159	; 0x9f
10000624:	402a      	ands	r2, r5
10000626:	1a1b      	subs	r3, r3, r0
10000628:	08d4      	lsrs	r4, r2, #3
1000062a:	e7dc      	b.n	100005e6 <__aeabi_ui2f+0x1e>
1000062c:	1f42      	subs	r2, r0, #5
1000062e:	2805      	cmp	r0, #5
10000630:	d0eb      	beq.n	1000060a <__aeabi_ui2f+0x42>
10000632:	4094      	lsls	r4, r2
10000634:	e7e9      	b.n	1000060a <__aeabi_ui2f+0x42>
10000636:	2396      	movs	r3, #150	; 0x96
10000638:	e7d5      	b.n	100005e6 <__aeabi_ui2f+0x1e>
1000063a:	46c0      	nop			; (mov r8, r8)
1000063c:	fbffffff 	.word	0xfbffffff

10000640 <__aeabi_dadd>:
10000640:	b5f0      	push	{r4, r5, r6, r7, lr}
10000642:	b087      	sub	sp, #28
10000644:	9204      	str	r2, [sp, #16]
10000646:	9305      	str	r3, [sp, #20]
10000648:	0fcb      	lsrs	r3, r1, #31
1000064a:	9301      	str	r3, [sp, #4]
1000064c:	9b05      	ldr	r3, [sp, #20]
1000064e:	030d      	lsls	r5, r1, #12
10000650:	004c      	lsls	r4, r1, #1
10000652:	0a6d      	lsrs	r5, r5, #9
10000654:	0f41      	lsrs	r1, r0, #29
10000656:	005f      	lsls	r7, r3, #1
10000658:	4329      	orrs	r1, r5
1000065a:	031d      	lsls	r5, r3, #12
1000065c:	0d7b      	lsrs	r3, r7, #21
1000065e:	9302      	str	r3, [sp, #8]
10000660:	9b05      	ldr	r3, [sp, #20]
10000662:	0a6d      	lsrs	r5, r5, #9
10000664:	0fdb      	lsrs	r3, r3, #31
10000666:	9303      	str	r3, [sp, #12]
10000668:	9b04      	ldr	r3, [sp, #16]
1000066a:	9a04      	ldr	r2, [sp, #16]
1000066c:	0f5b      	lsrs	r3, r3, #29
1000066e:	432b      	orrs	r3, r5
10000670:	9e01      	ldr	r6, [sp, #4]
10000672:	9d02      	ldr	r5, [sp, #8]
10000674:	9f03      	ldr	r7, [sp, #12]
10000676:	0d64      	lsrs	r4, r4, #21
10000678:	00c0      	lsls	r0, r0, #3
1000067a:	00d2      	lsls	r2, r2, #3
1000067c:	1b65      	subs	r5, r4, r5
1000067e:	42be      	cmp	r6, r7
10000680:	d000      	beq.n	10000684 <__aeabi_dadd+0x44>
10000682:	e12c      	b.n	100008de <__aeabi_dadd+0x29e>
10000684:	4ebb      	ldr	r6, [pc, #748]	; (10000974 <__aeabi_dadd+0x334>)
10000686:	46b4      	mov	ip, r6
10000688:	2d00      	cmp	r5, #0
1000068a:	dc00      	bgt.n	1000068e <__aeabi_dadd+0x4e>
1000068c:	e070      	b.n	10000770 <__aeabi_dadd+0x130>
1000068e:	9e02      	ldr	r6, [sp, #8]
10000690:	2e00      	cmp	r6, #0
10000692:	d11e      	bne.n	100006d2 <__aeabi_dadd+0x92>
10000694:	001e      	movs	r6, r3
10000696:	4316      	orrs	r6, r2
10000698:	d100      	bne.n	1000069c <__aeabi_dadd+0x5c>
1000069a:	e29b      	b.n	10000bd4 <__aeabi_dadd+0x594>
1000069c:	1e6e      	subs	r6, r5, #1
1000069e:	2d01      	cmp	r5, #1
100006a0:	d113      	bne.n	100006ca <__aeabi_dadd+0x8a>
100006a2:	1882      	adds	r2, r0, r2
100006a4:	4282      	cmp	r2, r0
100006a6:	4180      	sbcs	r0, r0
100006a8:	18c9      	adds	r1, r1, r3
100006aa:	4240      	negs	r0, r0
100006ac:	1809      	adds	r1, r1, r0
100006ae:	2401      	movs	r4, #1
100006b0:	0010      	movs	r0, r2
100006b2:	020b      	lsls	r3, r1, #8
100006b4:	d400      	bmi.n	100006b8 <__aeabi_dadd+0x78>
100006b6:	e072      	b.n	1000079e <__aeabi_dadd+0x15e>
100006b8:	2402      	movs	r4, #2
100006ba:	4baf      	ldr	r3, [pc, #700]	; (10000978 <__aeabi_dadd+0x338>)
100006bc:	0842      	lsrs	r2, r0, #1
100006be:	400b      	ands	r3, r1
100006c0:	2101      	movs	r1, #1
100006c2:	4001      	ands	r1, r0
100006c4:	430a      	orrs	r2, r1
100006c6:	07d8      	lsls	r0, r3, #31
100006c8:	e106      	b.n	100008d8 <__aeabi_dadd+0x298>
100006ca:	4565      	cmp	r5, ip
100006cc:	d11c      	bne.n	10000708 <__aeabi_dadd+0xc8>
100006ce:	4ca9      	ldr	r4, [pc, #676]	; (10000974 <__aeabi_dadd+0x334>)
100006d0:	e065      	b.n	1000079e <__aeabi_dadd+0x15e>
100006d2:	4564      	cmp	r4, ip
100006d4:	d063      	beq.n	1000079e <__aeabi_dadd+0x15e>
100006d6:	2d38      	cmp	r5, #56	; 0x38
100006d8:	dc47      	bgt.n	1000076a <__aeabi_dadd+0x12a>
100006da:	2680      	movs	r6, #128	; 0x80
100006dc:	0436      	lsls	r6, r6, #16
100006de:	4333      	orrs	r3, r6
100006e0:	002e      	movs	r6, r5
100006e2:	2e1f      	cmp	r6, #31
100006e4:	dc2f      	bgt.n	10000746 <__aeabi_dadd+0x106>
100006e6:	2520      	movs	r5, #32
100006e8:	001f      	movs	r7, r3
100006ea:	1bad      	subs	r5, r5, r6
100006ec:	40af      	lsls	r7, r5
100006ee:	9502      	str	r5, [sp, #8]
100006f0:	003d      	movs	r5, r7
100006f2:	0017      	movs	r7, r2
100006f4:	40f7      	lsrs	r7, r6
100006f6:	432f      	orrs	r7, r5
100006f8:	9d02      	ldr	r5, [sp, #8]
100006fa:	40f3      	lsrs	r3, r6
100006fc:	40aa      	lsls	r2, r5
100006fe:	1e55      	subs	r5, r2, #1
10000700:	41aa      	sbcs	r2, r5
10000702:	001d      	movs	r5, r3
10000704:	4317      	orrs	r7, r2
10000706:	e003      	b.n	10000710 <__aeabi_dadd+0xd0>
10000708:	2701      	movs	r7, #1
1000070a:	9d02      	ldr	r5, [sp, #8]
1000070c:	2e38      	cmp	r6, #56	; 0x38
1000070e:	dde8      	ble.n	100006e2 <__aeabi_dadd+0xa2>
10000710:	183f      	adds	r7, r7, r0
10000712:	4287      	cmp	r7, r0
10000714:	4180      	sbcs	r0, r0
10000716:	1869      	adds	r1, r5, r1
10000718:	4240      	negs	r0, r0
1000071a:	1809      	adds	r1, r1, r0
1000071c:	0038      	movs	r0, r7
1000071e:	020b      	lsls	r3, r1, #8
10000720:	d53d      	bpl.n	1000079e <__aeabi_dadd+0x15e>
10000722:	2500      	movs	r5, #0
10000724:	3401      	adds	r4, #1
10000726:	002f      	movs	r7, r5
10000728:	4564      	cmp	r4, ip
1000072a:	d1c6      	bne.n	100006ba <__aeabi_dadd+0x7a>
1000072c:	4b93      	ldr	r3, [pc, #588]	; (1000097c <__aeabi_dadd+0x33c>)
1000072e:	0524      	lsls	r4, r4, #20
10000730:	401c      	ands	r4, r3
10000732:	033b      	lsls	r3, r7, #12
10000734:	0b1b      	lsrs	r3, r3, #12
10000736:	431c      	orrs	r4, r3
10000738:	9b01      	ldr	r3, [sp, #4]
1000073a:	0028      	movs	r0, r5
1000073c:	07db      	lsls	r3, r3, #31
1000073e:	431c      	orrs	r4, r3
10000740:	0021      	movs	r1, r4
10000742:	b007      	add	sp, #28
10000744:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000746:	0035      	movs	r5, r6
10000748:	001f      	movs	r7, r3
1000074a:	3d20      	subs	r5, #32
1000074c:	40ef      	lsrs	r7, r5
1000074e:	003d      	movs	r5, r7
10000750:	2700      	movs	r7, #0
10000752:	2e20      	cmp	r6, #32
10000754:	d003      	beq.n	1000075e <__aeabi_dadd+0x11e>
10000756:	3740      	adds	r7, #64	; 0x40
10000758:	1bbf      	subs	r7, r7, r6
1000075a:	40bb      	lsls	r3, r7
1000075c:	001f      	movs	r7, r3
1000075e:	4317      	orrs	r7, r2
10000760:	1e7b      	subs	r3, r7, #1
10000762:	419f      	sbcs	r7, r3
10000764:	432f      	orrs	r7, r5
10000766:	2500      	movs	r5, #0
10000768:	e7d2      	b.n	10000710 <__aeabi_dadd+0xd0>
1000076a:	2500      	movs	r5, #0
1000076c:	2701      	movs	r7, #1
1000076e:	e7cf      	b.n	10000710 <__aeabi_dadd+0xd0>
10000770:	2d00      	cmp	r5, #0
10000772:	d06f      	beq.n	10000854 <__aeabi_dadd+0x214>
10000774:	9d02      	ldr	r5, [sp, #8]
10000776:	1b2e      	subs	r6, r5, r4
10000778:	2c00      	cmp	r4, #0
1000077a:	d130      	bne.n	100007de <__aeabi_dadd+0x19e>
1000077c:	000d      	movs	r5, r1
1000077e:	4305      	orrs	r5, r0
10000780:	d100      	bne.n	10000784 <__aeabi_dadd+0x144>
10000782:	e221      	b.n	10000bc8 <__aeabi_dadd+0x588>
10000784:	1e75      	subs	r5, r6, #1
10000786:	2e01      	cmp	r6, #1
10000788:	d124      	bne.n	100007d4 <__aeabi_dadd+0x194>
1000078a:	1880      	adds	r0, r0, r2
1000078c:	4290      	cmp	r0, r2
1000078e:	4192      	sbcs	r2, r2
10000790:	18c9      	adds	r1, r1, r3
10000792:	4252      	negs	r2, r2
10000794:	1889      	adds	r1, r1, r2
10000796:	3401      	adds	r4, #1
10000798:	020b      	lsls	r3, r1, #8
1000079a:	d500      	bpl.n	1000079e <__aeabi_dadd+0x15e>
1000079c:	e78c      	b.n	100006b8 <__aeabi_dadd+0x78>
1000079e:	0743      	lsls	r3, r0, #29
100007a0:	d009      	beq.n	100007b6 <__aeabi_dadd+0x176>
100007a2:	230f      	movs	r3, #15
100007a4:	4003      	ands	r3, r0
100007a6:	2b04      	cmp	r3, #4
100007a8:	d005      	beq.n	100007b6 <__aeabi_dadd+0x176>
100007aa:	1d03      	adds	r3, r0, #4
100007ac:	4283      	cmp	r3, r0
100007ae:	4180      	sbcs	r0, r0
100007b0:	4240      	negs	r0, r0
100007b2:	1809      	adds	r1, r1, r0
100007b4:	0018      	movs	r0, r3
100007b6:	4b6f      	ldr	r3, [pc, #444]	; (10000974 <__aeabi_dadd+0x334>)
100007b8:	020a      	lsls	r2, r1, #8
100007ba:	d400      	bmi.n	100007be <__aeabi_dadd+0x17e>
100007bc:	e210      	b.n	10000be0 <__aeabi_dadd+0x5a0>
100007be:	2500      	movs	r5, #0
100007c0:	3401      	adds	r4, #1
100007c2:	002f      	movs	r7, r5
100007c4:	429c      	cmp	r4, r3
100007c6:	d0b1      	beq.n	1000072c <__aeabi_dadd+0xec>
100007c8:	4b6b      	ldr	r3, [pc, #428]	; (10000978 <__aeabi_dadd+0x338>)
100007ca:	08c0      	lsrs	r0, r0, #3
100007cc:	400b      	ands	r3, r1
100007ce:	075d      	lsls	r5, r3, #29
100007d0:	4305      	orrs	r5, r0
100007d2:	e1f2      	b.n	10000bba <__aeabi_dadd+0x57a>
100007d4:	4566      	cmp	r6, ip
100007d6:	d11d      	bne.n	10000814 <__aeabi_dadd+0x1d4>
100007d8:	0019      	movs	r1, r3
100007da:	0010      	movs	r0, r2
100007dc:	e777      	b.n	100006ce <__aeabi_dadd+0x8e>
100007de:	9c02      	ldr	r4, [sp, #8]
100007e0:	4564      	cmp	r4, ip
100007e2:	d0f9      	beq.n	100007d8 <__aeabi_dadd+0x198>
100007e4:	2e38      	cmp	r6, #56	; 0x38
100007e6:	dc32      	bgt.n	1000084e <__aeabi_dadd+0x20e>
100007e8:	2480      	movs	r4, #128	; 0x80
100007ea:	0035      	movs	r5, r6
100007ec:	0424      	lsls	r4, r4, #16
100007ee:	4321      	orrs	r1, r4
100007f0:	2d1f      	cmp	r5, #31
100007f2:	dc1a      	bgt.n	1000082a <__aeabi_dadd+0x1ea>
100007f4:	2420      	movs	r4, #32
100007f6:	000e      	movs	r6, r1
100007f8:	1b67      	subs	r7, r4, r5
100007fa:	40be      	lsls	r6, r7
100007fc:	0034      	movs	r4, r6
100007fe:	0006      	movs	r6, r0
10000800:	40b8      	lsls	r0, r7
10000802:	40ee      	lsrs	r6, r5
10000804:	4334      	orrs	r4, r6
10000806:	0006      	movs	r6, r0
10000808:	40e9      	lsrs	r1, r5
1000080a:	1e70      	subs	r0, r6, #1
1000080c:	4186      	sbcs	r6, r0
1000080e:	4326      	orrs	r6, r4
10000810:	000c      	movs	r4, r1
10000812:	e002      	b.n	1000081a <__aeabi_dadd+0x1da>
10000814:	2601      	movs	r6, #1
10000816:	2d38      	cmp	r5, #56	; 0x38
10000818:	ddea      	ble.n	100007f0 <__aeabi_dadd+0x1b0>
1000081a:	18b0      	adds	r0, r6, r2
1000081c:	4290      	cmp	r0, r2
1000081e:	4192      	sbcs	r2, r2
10000820:	18e4      	adds	r4, r4, r3
10000822:	4252      	negs	r2, r2
10000824:	18a1      	adds	r1, r4, r2
10000826:	9c02      	ldr	r4, [sp, #8]
10000828:	e779      	b.n	1000071e <__aeabi_dadd+0xde>
1000082a:	002c      	movs	r4, r5
1000082c:	000e      	movs	r6, r1
1000082e:	3c20      	subs	r4, #32
10000830:	40e6      	lsrs	r6, r4
10000832:	0034      	movs	r4, r6
10000834:	2600      	movs	r6, #0
10000836:	2d20      	cmp	r5, #32
10000838:	d003      	beq.n	10000842 <__aeabi_dadd+0x202>
1000083a:	3640      	adds	r6, #64	; 0x40
1000083c:	1b76      	subs	r6, r6, r5
1000083e:	40b1      	lsls	r1, r6
10000840:	000e      	movs	r6, r1
10000842:	4306      	orrs	r6, r0
10000844:	1e71      	subs	r1, r6, #1
10000846:	418e      	sbcs	r6, r1
10000848:	4326      	orrs	r6, r4
1000084a:	2400      	movs	r4, #0
1000084c:	e7e5      	b.n	1000081a <__aeabi_dadd+0x1da>
1000084e:	2400      	movs	r4, #0
10000850:	2601      	movs	r6, #1
10000852:	e7e2      	b.n	1000081a <__aeabi_dadd+0x1da>
10000854:	4f4a      	ldr	r7, [pc, #296]	; (10000980 <__aeabi_dadd+0x340>)
10000856:	1c66      	adds	r6, r4, #1
10000858:	423e      	tst	r6, r7
1000085a:	d130      	bne.n	100008be <__aeabi_dadd+0x27e>
1000085c:	000d      	movs	r5, r1
1000085e:	4305      	orrs	r5, r0
10000860:	2c00      	cmp	r4, #0
10000862:	d112      	bne.n	1000088a <__aeabi_dadd+0x24a>
10000864:	2d00      	cmp	r5, #0
10000866:	d100      	bne.n	1000086a <__aeabi_dadd+0x22a>
10000868:	e1b1      	b.n	10000bce <__aeabi_dadd+0x58e>
1000086a:	001d      	movs	r5, r3
1000086c:	4315      	orrs	r5, r2
1000086e:	d096      	beq.n	1000079e <__aeabi_dadd+0x15e>
10000870:	1882      	adds	r2, r0, r2
10000872:	4282      	cmp	r2, r0
10000874:	4180      	sbcs	r0, r0
10000876:	18c9      	adds	r1, r1, r3
10000878:	4240      	negs	r0, r0
1000087a:	1809      	adds	r1, r1, r0
1000087c:	0010      	movs	r0, r2
1000087e:	020b      	lsls	r3, r1, #8
10000880:	d58d      	bpl.n	1000079e <__aeabi_dadd+0x15e>
10000882:	4b3d      	ldr	r3, [pc, #244]	; (10000978 <__aeabi_dadd+0x338>)
10000884:	4019      	ands	r1, r3
10000886:	0034      	movs	r4, r6
10000888:	e789      	b.n	1000079e <__aeabi_dadd+0x15e>
1000088a:	2d00      	cmp	r5, #0
1000088c:	d0a4      	beq.n	100007d8 <__aeabi_dadd+0x198>
1000088e:	001d      	movs	r5, r3
10000890:	4664      	mov	r4, ip
10000892:	4315      	orrs	r5, r2
10000894:	d083      	beq.n	1000079e <__aeabi_dadd+0x15e>
10000896:	2580      	movs	r5, #128	; 0x80
10000898:	074c      	lsls	r4, r1, #29
1000089a:	08c0      	lsrs	r0, r0, #3
1000089c:	08c9      	lsrs	r1, r1, #3
1000089e:	032d      	lsls	r5, r5, #12
100008a0:	4320      	orrs	r0, r4
100008a2:	4229      	tst	r1, r5
100008a4:	d006      	beq.n	100008b4 <__aeabi_dadd+0x274>
100008a6:	08dc      	lsrs	r4, r3, #3
100008a8:	422c      	tst	r4, r5
100008aa:	d103      	bne.n	100008b4 <__aeabi_dadd+0x274>
100008ac:	0021      	movs	r1, r4
100008ae:	08d0      	lsrs	r0, r2, #3
100008b0:	075b      	lsls	r3, r3, #29
100008b2:	4318      	orrs	r0, r3
100008b4:	00cb      	lsls	r3, r1, #3
100008b6:	0f41      	lsrs	r1, r0, #29
100008b8:	4319      	orrs	r1, r3
100008ba:	00c0      	lsls	r0, r0, #3
100008bc:	e707      	b.n	100006ce <__aeabi_dadd+0x8e>
100008be:	0034      	movs	r4, r6
100008c0:	002f      	movs	r7, r5
100008c2:	4566      	cmp	r6, ip
100008c4:	d100      	bne.n	100008c8 <__aeabi_dadd+0x288>
100008c6:	e731      	b.n	1000072c <__aeabi_dadd+0xec>
100008c8:	1882      	adds	r2, r0, r2
100008ca:	4282      	cmp	r2, r0
100008cc:	4180      	sbcs	r0, r0
100008ce:	18cb      	adds	r3, r1, r3
100008d0:	4240      	negs	r0, r0
100008d2:	181b      	adds	r3, r3, r0
100008d4:	07d8      	lsls	r0, r3, #31
100008d6:	0852      	lsrs	r2, r2, #1
100008d8:	4310      	orrs	r0, r2
100008da:	0859      	lsrs	r1, r3, #1
100008dc:	e75f      	b.n	1000079e <__aeabi_dadd+0x15e>
100008de:	2d00      	cmp	r5, #0
100008e0:	dd65      	ble.n	100009ae <__aeabi_dadd+0x36e>
100008e2:	9e02      	ldr	r6, [sp, #8]
100008e4:	2e00      	cmp	r6, #0
100008e6:	d125      	bne.n	10000934 <__aeabi_dadd+0x2f4>
100008e8:	001e      	movs	r6, r3
100008ea:	4316      	orrs	r6, r2
100008ec:	d100      	bne.n	100008f0 <__aeabi_dadd+0x2b0>
100008ee:	e171      	b.n	10000bd4 <__aeabi_dadd+0x594>
100008f0:	1e6e      	subs	r6, r5, #1
100008f2:	2d01      	cmp	r5, #1
100008f4:	d10e      	bne.n	10000914 <__aeabi_dadd+0x2d4>
100008f6:	1a82      	subs	r2, r0, r2
100008f8:	4290      	cmp	r0, r2
100008fa:	4180      	sbcs	r0, r0
100008fc:	1ac9      	subs	r1, r1, r3
100008fe:	4240      	negs	r0, r0
10000900:	1a09      	subs	r1, r1, r0
10000902:	2401      	movs	r4, #1
10000904:	0010      	movs	r0, r2
10000906:	020b      	lsls	r3, r1, #8
10000908:	d400      	bmi.n	1000090c <__aeabi_dadd+0x2cc>
1000090a:	e748      	b.n	1000079e <__aeabi_dadd+0x15e>
1000090c:	0249      	lsls	r1, r1, #9
1000090e:	0006      	movs	r6, r0
10000910:	0a4d      	lsrs	r5, r1, #9
10000912:	e107      	b.n	10000b24 <__aeabi_dadd+0x4e4>
10000914:	4f17      	ldr	r7, [pc, #92]	; (10000974 <__aeabi_dadd+0x334>)
10000916:	42bd      	cmp	r5, r7
10000918:	d100      	bne.n	1000091c <__aeabi_dadd+0x2dc>
1000091a:	e6d8      	b.n	100006ce <__aeabi_dadd+0x8e>
1000091c:	2501      	movs	r5, #1
1000091e:	9f02      	ldr	r7, [sp, #8]
10000920:	2e38      	cmp	r6, #56	; 0x38
10000922:	dd11      	ble.n	10000948 <__aeabi_dadd+0x308>
10000924:	1b45      	subs	r5, r0, r5
10000926:	42a8      	cmp	r0, r5
10000928:	4180      	sbcs	r0, r0
1000092a:	1bc9      	subs	r1, r1, r7
1000092c:	4240      	negs	r0, r0
1000092e:	1a09      	subs	r1, r1, r0
10000930:	0028      	movs	r0, r5
10000932:	e7e8      	b.n	10000906 <__aeabi_dadd+0x2c6>
10000934:	4e0f      	ldr	r6, [pc, #60]	; (10000974 <__aeabi_dadd+0x334>)
10000936:	42b4      	cmp	r4, r6
10000938:	d100      	bne.n	1000093c <__aeabi_dadd+0x2fc>
1000093a:	e730      	b.n	1000079e <__aeabi_dadd+0x15e>
1000093c:	2d38      	cmp	r5, #56	; 0x38
1000093e:	dc33      	bgt.n	100009a8 <__aeabi_dadd+0x368>
10000940:	2680      	movs	r6, #128	; 0x80
10000942:	0436      	lsls	r6, r6, #16
10000944:	4333      	orrs	r3, r6
10000946:	002e      	movs	r6, r5
10000948:	2e1f      	cmp	r6, #31
1000094a:	dc1b      	bgt.n	10000984 <__aeabi_dadd+0x344>
1000094c:	2720      	movs	r7, #32
1000094e:	1bbd      	subs	r5, r7, r6
10000950:	9502      	str	r5, [sp, #8]
10000952:	001d      	movs	r5, r3
10000954:	9f02      	ldr	r7, [sp, #8]
10000956:	40f3      	lsrs	r3, r6
10000958:	40bd      	lsls	r5, r7
1000095a:	46ac      	mov	ip, r5
1000095c:	0015      	movs	r5, r2
1000095e:	4667      	mov	r7, ip
10000960:	40f5      	lsrs	r5, r6
10000962:	433d      	orrs	r5, r7
10000964:	9f02      	ldr	r7, [sp, #8]
10000966:	40ba      	lsls	r2, r7
10000968:	1e57      	subs	r7, r2, #1
1000096a:	41ba      	sbcs	r2, r7
1000096c:	001f      	movs	r7, r3
1000096e:	4315      	orrs	r5, r2
10000970:	e7d8      	b.n	10000924 <__aeabi_dadd+0x2e4>
10000972:	46c0      	nop			; (mov r8, r8)
10000974:	000007ff 	.word	0x000007ff
10000978:	ff7fffff 	.word	0xff7fffff
1000097c:	7ff00000 	.word	0x7ff00000
10000980:	000007fe 	.word	0x000007fe
10000984:	0035      	movs	r5, r6
10000986:	001f      	movs	r7, r3
10000988:	3d20      	subs	r5, #32
1000098a:	40ef      	lsrs	r7, r5
1000098c:	003d      	movs	r5, r7
1000098e:	2700      	movs	r7, #0
10000990:	2e20      	cmp	r6, #32
10000992:	d003      	beq.n	1000099c <__aeabi_dadd+0x35c>
10000994:	3740      	adds	r7, #64	; 0x40
10000996:	1bbe      	subs	r6, r7, r6
10000998:	40b3      	lsls	r3, r6
1000099a:	001f      	movs	r7, r3
1000099c:	4317      	orrs	r7, r2
1000099e:	1e7b      	subs	r3, r7, #1
100009a0:	419f      	sbcs	r7, r3
100009a2:	433d      	orrs	r5, r7
100009a4:	2700      	movs	r7, #0
100009a6:	e7bd      	b.n	10000924 <__aeabi_dadd+0x2e4>
100009a8:	2700      	movs	r7, #0
100009aa:	2501      	movs	r5, #1
100009ac:	e7ba      	b.n	10000924 <__aeabi_dadd+0x2e4>
100009ae:	2d00      	cmp	r5, #0
100009b0:	d059      	beq.n	10000a66 <__aeabi_dadd+0x426>
100009b2:	9d02      	ldr	r5, [sp, #8]
100009b4:	1b2e      	subs	r6, r5, r4
100009b6:	2c00      	cmp	r4, #0
100009b8:	d116      	bne.n	100009e8 <__aeabi_dadd+0x3a8>
100009ba:	000d      	movs	r5, r1
100009bc:	4305      	orrs	r5, r0
100009be:	d00f      	beq.n	100009e0 <__aeabi_dadd+0x3a0>
100009c0:	1e75      	subs	r5, r6, #1
100009c2:	2e01      	cmp	r6, #1
100009c4:	d109      	bne.n	100009da <__aeabi_dadd+0x39a>
100009c6:	1a10      	subs	r0, r2, r0
100009c8:	4282      	cmp	r2, r0
100009ca:	4192      	sbcs	r2, r2
100009cc:	1a59      	subs	r1, r3, r1
100009ce:	9b03      	ldr	r3, [sp, #12]
100009d0:	4252      	negs	r2, r2
100009d2:	1a89      	subs	r1, r1, r2
100009d4:	9301      	str	r3, [sp, #4]
100009d6:	3401      	adds	r4, #1
100009d8:	e795      	b.n	10000906 <__aeabi_dadd+0x2c6>
100009da:	4f8e      	ldr	r7, [pc, #568]	; (10000c14 <__aeabi_dadd+0x5d4>)
100009dc:	42be      	cmp	r6, r7
100009de:	d121      	bne.n	10000a24 <__aeabi_dadd+0x3e4>
100009e0:	0019      	movs	r1, r3
100009e2:	0010      	movs	r0, r2
100009e4:	0034      	movs	r4, r6
100009e6:	e050      	b.n	10000a8a <__aeabi_dadd+0x44a>
100009e8:	4c8a      	ldr	r4, [pc, #552]	; (10000c14 <__aeabi_dadd+0x5d4>)
100009ea:	9d02      	ldr	r5, [sp, #8]
100009ec:	42a5      	cmp	r5, r4
100009ee:	d100      	bne.n	100009f2 <__aeabi_dadd+0x3b2>
100009f0:	e0f2      	b.n	10000bd8 <__aeabi_dadd+0x598>
100009f2:	2e38      	cmp	r6, #56	; 0x38
100009f4:	dc34      	bgt.n	10000a60 <__aeabi_dadd+0x420>
100009f6:	2480      	movs	r4, #128	; 0x80
100009f8:	0035      	movs	r5, r6
100009fa:	0424      	lsls	r4, r4, #16
100009fc:	4321      	orrs	r1, r4
100009fe:	2d1f      	cmp	r5, #31
10000a00:	dc1d      	bgt.n	10000a3e <__aeabi_dadd+0x3fe>
10000a02:	2620      	movs	r6, #32
10000a04:	000c      	movs	r4, r1
10000a06:	1b76      	subs	r6, r6, r5
10000a08:	40b4      	lsls	r4, r6
10000a0a:	46a4      	mov	ip, r4
10000a0c:	0004      	movs	r4, r0
10000a0e:	40b0      	lsls	r0, r6
10000a10:	40ec      	lsrs	r4, r5
10000a12:	4667      	mov	r7, ip
10000a14:	1e46      	subs	r6, r0, #1
10000a16:	41b0      	sbcs	r0, r6
10000a18:	40e9      	lsrs	r1, r5
10000a1a:	433c      	orrs	r4, r7
10000a1c:	4304      	orrs	r4, r0
10000a1e:	0026      	movs	r6, r4
10000a20:	000c      	movs	r4, r1
10000a22:	e002      	b.n	10000a2a <__aeabi_dadd+0x3ea>
10000a24:	2601      	movs	r6, #1
10000a26:	2d38      	cmp	r5, #56	; 0x38
10000a28:	dde9      	ble.n	100009fe <__aeabi_dadd+0x3be>
10000a2a:	1b90      	subs	r0, r2, r6
10000a2c:	4282      	cmp	r2, r0
10000a2e:	4192      	sbcs	r2, r2
10000a30:	1b1c      	subs	r4, r3, r4
10000a32:	9b03      	ldr	r3, [sp, #12]
10000a34:	4252      	negs	r2, r2
10000a36:	1aa1      	subs	r1, r4, r2
10000a38:	9301      	str	r3, [sp, #4]
10000a3a:	9c02      	ldr	r4, [sp, #8]
10000a3c:	e763      	b.n	10000906 <__aeabi_dadd+0x2c6>
10000a3e:	002c      	movs	r4, r5
10000a40:	000e      	movs	r6, r1
10000a42:	3c20      	subs	r4, #32
10000a44:	40e6      	lsrs	r6, r4
10000a46:	2400      	movs	r4, #0
10000a48:	2d20      	cmp	r5, #32
10000a4a:	d003      	beq.n	10000a54 <__aeabi_dadd+0x414>
10000a4c:	3440      	adds	r4, #64	; 0x40
10000a4e:	1b64      	subs	r4, r4, r5
10000a50:	40a1      	lsls	r1, r4
10000a52:	000c      	movs	r4, r1
10000a54:	4304      	orrs	r4, r0
10000a56:	1e61      	subs	r1, r4, #1
10000a58:	418c      	sbcs	r4, r1
10000a5a:	4326      	orrs	r6, r4
10000a5c:	2400      	movs	r4, #0
10000a5e:	e7e4      	b.n	10000a2a <__aeabi_dadd+0x3ea>
10000a60:	2400      	movs	r4, #0
10000a62:	2601      	movs	r6, #1
10000a64:	e7e1      	b.n	10000a2a <__aeabi_dadd+0x3ea>
10000a66:	4e6c      	ldr	r6, [pc, #432]	; (10000c18 <__aeabi_dadd+0x5d8>)
10000a68:	1c65      	adds	r5, r4, #1
10000a6a:	4235      	tst	r5, r6
10000a6c:	d14a      	bne.n	10000b04 <__aeabi_dadd+0x4c4>
10000a6e:	000d      	movs	r5, r1
10000a70:	001f      	movs	r7, r3
10000a72:	4305      	orrs	r5, r0
10000a74:	4317      	orrs	r7, r2
10000a76:	2c00      	cmp	r4, #0
10000a78:	d123      	bne.n	10000ac2 <__aeabi_dadd+0x482>
10000a7a:	2d00      	cmp	r5, #0
10000a7c:	d108      	bne.n	10000a90 <__aeabi_dadd+0x450>
10000a7e:	1e3d      	subs	r5, r7, #0
10000a80:	9701      	str	r7, [sp, #4]
10000a82:	d100      	bne.n	10000a86 <__aeabi_dadd+0x446>
10000a84:	e652      	b.n	1000072c <__aeabi_dadd+0xec>
10000a86:	0019      	movs	r1, r3
10000a88:	0010      	movs	r0, r2
10000a8a:	9b03      	ldr	r3, [sp, #12]
10000a8c:	9301      	str	r3, [sp, #4]
10000a8e:	e686      	b.n	1000079e <__aeabi_dadd+0x15e>
10000a90:	2f00      	cmp	r7, #0
10000a92:	d100      	bne.n	10000a96 <__aeabi_dadd+0x456>
10000a94:	e683      	b.n	1000079e <__aeabi_dadd+0x15e>
10000a96:	1a86      	subs	r6, r0, r2
10000a98:	42b0      	cmp	r0, r6
10000a9a:	41bf      	sbcs	r7, r7
10000a9c:	1acd      	subs	r5, r1, r3
10000a9e:	427f      	negs	r7, r7
10000aa0:	1bed      	subs	r5, r5, r7
10000aa2:	022f      	lsls	r7, r5, #8
10000aa4:	d506      	bpl.n	10000ab4 <__aeabi_dadd+0x474>
10000aa6:	1a10      	subs	r0, r2, r0
10000aa8:	4282      	cmp	r2, r0
10000aaa:	4192      	sbcs	r2, r2
10000aac:	1a59      	subs	r1, r3, r1
10000aae:	4252      	negs	r2, r2
10000ab0:	1a89      	subs	r1, r1, r2
10000ab2:	e7ea      	b.n	10000a8a <__aeabi_dadd+0x44a>
10000ab4:	0037      	movs	r7, r6
10000ab6:	432f      	orrs	r7, r5
10000ab8:	d100      	bne.n	10000abc <__aeabi_dadd+0x47c>
10000aba:	e0a5      	b.n	10000c08 <__aeabi_dadd+0x5c8>
10000abc:	0029      	movs	r1, r5
10000abe:	0030      	movs	r0, r6
10000ac0:	e66d      	b.n	1000079e <__aeabi_dadd+0x15e>
10000ac2:	2d00      	cmp	r5, #0
10000ac4:	d107      	bne.n	10000ad6 <__aeabi_dadd+0x496>
10000ac6:	2f00      	cmp	r7, #0
10000ac8:	d100      	bne.n	10000acc <__aeabi_dadd+0x48c>
10000aca:	e094      	b.n	10000bf6 <__aeabi_dadd+0x5b6>
10000acc:	0019      	movs	r1, r3
10000ace:	9b03      	ldr	r3, [sp, #12]
10000ad0:	0010      	movs	r0, r2
10000ad2:	9301      	str	r3, [sp, #4]
10000ad4:	e5fb      	b.n	100006ce <__aeabi_dadd+0x8e>
10000ad6:	2f00      	cmp	r7, #0
10000ad8:	d100      	bne.n	10000adc <__aeabi_dadd+0x49c>
10000ada:	e5f8      	b.n	100006ce <__aeabi_dadd+0x8e>
10000adc:	2580      	movs	r5, #128	; 0x80
10000ade:	074c      	lsls	r4, r1, #29
10000ae0:	08c0      	lsrs	r0, r0, #3
10000ae2:	08c9      	lsrs	r1, r1, #3
10000ae4:	032d      	lsls	r5, r5, #12
10000ae6:	4320      	orrs	r0, r4
10000ae8:	4229      	tst	r1, r5
10000aea:	d100      	bne.n	10000aee <__aeabi_dadd+0x4ae>
10000aec:	e6e2      	b.n	100008b4 <__aeabi_dadd+0x274>
10000aee:	08dc      	lsrs	r4, r3, #3
10000af0:	422c      	tst	r4, r5
10000af2:	d000      	beq.n	10000af6 <__aeabi_dadd+0x4b6>
10000af4:	e6de      	b.n	100008b4 <__aeabi_dadd+0x274>
10000af6:	075b      	lsls	r3, r3, #29
10000af8:	08d0      	lsrs	r0, r2, #3
10000afa:	4318      	orrs	r0, r3
10000afc:	9b03      	ldr	r3, [sp, #12]
10000afe:	0021      	movs	r1, r4
10000b00:	9301      	str	r3, [sp, #4]
10000b02:	e6d7      	b.n	100008b4 <__aeabi_dadd+0x274>
10000b04:	1a86      	subs	r6, r0, r2
10000b06:	42b0      	cmp	r0, r6
10000b08:	41bf      	sbcs	r7, r7
10000b0a:	1acd      	subs	r5, r1, r3
10000b0c:	427f      	negs	r7, r7
10000b0e:	1bed      	subs	r5, r5, r7
10000b10:	022f      	lsls	r7, r5, #8
10000b12:	d528      	bpl.n	10000b66 <__aeabi_dadd+0x526>
10000b14:	1a16      	subs	r6, r2, r0
10000b16:	42b2      	cmp	r2, r6
10000b18:	4192      	sbcs	r2, r2
10000b1a:	1a5b      	subs	r3, r3, r1
10000b1c:	4252      	negs	r2, r2
10000b1e:	1a9d      	subs	r5, r3, r2
10000b20:	9b03      	ldr	r3, [sp, #12]
10000b22:	9301      	str	r3, [sp, #4]
10000b24:	2d00      	cmp	r5, #0
10000b26:	d025      	beq.n	10000b74 <__aeabi_dadd+0x534>
10000b28:	0028      	movs	r0, r5
10000b2a:	f7ff fbed 	bl	10000308 <__clzsi2>
10000b2e:	0003      	movs	r3, r0
10000b30:	3b08      	subs	r3, #8
10000b32:	2220      	movs	r2, #32
10000b34:	0031      	movs	r1, r6
10000b36:	1ad2      	subs	r2, r2, r3
10000b38:	409d      	lsls	r5, r3
10000b3a:	40d1      	lsrs	r1, r2
10000b3c:	4329      	orrs	r1, r5
10000b3e:	0035      	movs	r5, r6
10000b40:	409d      	lsls	r5, r3
10000b42:	429c      	cmp	r4, r3
10000b44:	dc3b      	bgt.n	10000bbe <__aeabi_dadd+0x57e>
10000b46:	1b1a      	subs	r2, r3, r4
10000b48:	3201      	adds	r2, #1
10000b4a:	2320      	movs	r3, #32
10000b4c:	0008      	movs	r0, r1
10000b4e:	1a9b      	subs	r3, r3, r2
10000b50:	002c      	movs	r4, r5
10000b52:	409d      	lsls	r5, r3
10000b54:	4098      	lsls	r0, r3
10000b56:	40d4      	lsrs	r4, r2
10000b58:	1e6b      	subs	r3, r5, #1
10000b5a:	419d      	sbcs	r5, r3
10000b5c:	40d1      	lsrs	r1, r2
10000b5e:	4320      	orrs	r0, r4
10000b60:	4328      	orrs	r0, r5
10000b62:	2400      	movs	r4, #0
10000b64:	e61b      	b.n	1000079e <__aeabi_dadd+0x15e>
10000b66:	0037      	movs	r7, r6
10000b68:	432f      	orrs	r7, r5
10000b6a:	d1db      	bne.n	10000b24 <__aeabi_dadd+0x4e4>
10000b6c:	003d      	movs	r5, r7
10000b6e:	003c      	movs	r4, r7
10000b70:	9701      	str	r7, [sp, #4]
10000b72:	e5db      	b.n	1000072c <__aeabi_dadd+0xec>
10000b74:	0030      	movs	r0, r6
10000b76:	f7ff fbc7 	bl	10000308 <__clzsi2>
10000b7a:	0003      	movs	r3, r0
10000b7c:	3318      	adds	r3, #24
10000b7e:	2b1f      	cmp	r3, #31
10000b80:	ddd7      	ble.n	10000b32 <__aeabi_dadd+0x4f2>
10000b82:	0031      	movs	r1, r6
10000b84:	3808      	subs	r0, #8
10000b86:	4081      	lsls	r1, r0
10000b88:	429c      	cmp	r4, r3
10000b8a:	dc12      	bgt.n	10000bb2 <__aeabi_dadd+0x572>
10000b8c:	1b1b      	subs	r3, r3, r4
10000b8e:	1c5a      	adds	r2, r3, #1
10000b90:	2a1f      	cmp	r2, #31
10000b92:	ddda      	ble.n	10000b4a <__aeabi_dadd+0x50a>
10000b94:	000c      	movs	r4, r1
10000b96:	3b1f      	subs	r3, #31
10000b98:	40dc      	lsrs	r4, r3
10000b9a:	0028      	movs	r0, r5
10000b9c:	2a20      	cmp	r2, #32
10000b9e:	d003      	beq.n	10000ba8 <__aeabi_dadd+0x568>
10000ba0:	2340      	movs	r3, #64	; 0x40
10000ba2:	1a9b      	subs	r3, r3, r2
10000ba4:	4099      	lsls	r1, r3
10000ba6:	0008      	movs	r0, r1
10000ba8:	1e43      	subs	r3, r0, #1
10000baa:	4198      	sbcs	r0, r3
10000bac:	2100      	movs	r1, #0
10000bae:	4320      	orrs	r0, r4
10000bb0:	e7d7      	b.n	10000b62 <__aeabi_dadd+0x522>
10000bb2:	1ae4      	subs	r4, r4, r3
10000bb4:	4b19      	ldr	r3, [pc, #100]	; (10000c1c <__aeabi_dadd+0x5dc>)
10000bb6:	400b      	ands	r3, r1
10000bb8:	075d      	lsls	r5, r3, #29
10000bba:	08df      	lsrs	r7, r3, #3
10000bbc:	e5b6      	b.n	1000072c <__aeabi_dadd+0xec>
10000bbe:	1ae4      	subs	r4, r4, r3
10000bc0:	4b16      	ldr	r3, [pc, #88]	; (10000c1c <__aeabi_dadd+0x5dc>)
10000bc2:	0028      	movs	r0, r5
10000bc4:	4019      	ands	r1, r3
10000bc6:	e5ea      	b.n	1000079e <__aeabi_dadd+0x15e>
10000bc8:	0019      	movs	r1, r3
10000bca:	0010      	movs	r0, r2
10000bcc:	e65b      	b.n	10000886 <__aeabi_dadd+0x246>
10000bce:	0019      	movs	r1, r3
10000bd0:	0010      	movs	r0, r2
10000bd2:	e5e4      	b.n	1000079e <__aeabi_dadd+0x15e>
10000bd4:	002c      	movs	r4, r5
10000bd6:	e5e2      	b.n	1000079e <__aeabi_dadd+0x15e>
10000bd8:	0019      	movs	r1, r3
10000bda:	0010      	movs	r0, r2
10000bdc:	9c02      	ldr	r4, [sp, #8]
10000bde:	e754      	b.n	10000a8a <__aeabi_dadd+0x44a>
10000be0:	074a      	lsls	r2, r1, #29
10000be2:	08c7      	lsrs	r7, r0, #3
10000be4:	4317      	orrs	r7, r2
10000be6:	003d      	movs	r5, r7
10000be8:	08c9      	lsrs	r1, r1, #3
10000bea:	429c      	cmp	r4, r3
10000bec:	d10f      	bne.n	10000c0e <__aeabi_dadd+0x5ce>
10000bee:	430d      	orrs	r5, r1
10000bf0:	d104      	bne.n	10000bfc <__aeabi_dadd+0x5bc>
10000bf2:	002f      	movs	r7, r5
10000bf4:	e59a      	b.n	1000072c <__aeabi_dadd+0xec>
10000bf6:	2180      	movs	r1, #128	; 0x80
10000bf8:	9701      	str	r7, [sp, #4]
10000bfa:	0309      	lsls	r1, r1, #12
10000bfc:	003d      	movs	r5, r7
10000bfe:	2780      	movs	r7, #128	; 0x80
10000c00:	033f      	lsls	r7, r7, #12
10000c02:	4c04      	ldr	r4, [pc, #16]	; (10000c14 <__aeabi_dadd+0x5d4>)
10000c04:	430f      	orrs	r7, r1
10000c06:	e591      	b.n	1000072c <__aeabi_dadd+0xec>
10000c08:	003d      	movs	r5, r7
10000c0a:	9701      	str	r7, [sp, #4]
10000c0c:	e58e      	b.n	1000072c <__aeabi_dadd+0xec>
10000c0e:	000f      	movs	r7, r1
10000c10:	e58c      	b.n	1000072c <__aeabi_dadd+0xec>
10000c12:	46c0      	nop			; (mov r8, r8)
10000c14:	000007ff 	.word	0x000007ff
10000c18:	000007fe 	.word	0x000007fe
10000c1c:	ff7fffff 	.word	0xff7fffff

10000c20 <__aeabi_ddiv>:
10000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c22:	b089      	sub	sp, #36	; 0x24
10000c24:	9200      	str	r2, [sp, #0]
10000c26:	9301      	str	r3, [sp, #4]
10000c28:	030d      	lsls	r5, r1, #12
10000c2a:	0fca      	lsrs	r2, r1, #31
10000c2c:	004b      	lsls	r3, r1, #1
10000c2e:	0006      	movs	r6, r0
10000c30:	0004      	movs	r4, r0
10000c32:	0b2d      	lsrs	r5, r5, #12
10000c34:	0d5b      	lsrs	r3, r3, #21
10000c36:	9206      	str	r2, [sp, #24]
10000c38:	9205      	str	r2, [sp, #20]
10000c3a:	d044      	beq.n	10000cc6 <__aeabi_ddiv+0xa6>
10000c3c:	4a5b      	ldr	r2, [pc, #364]	; (10000dac <__aeabi_ddiv+0x18c>)
10000c3e:	4293      	cmp	r3, r2
10000c40:	d06a      	beq.n	10000d18 <__aeabi_ddiv+0xf8>
10000c42:	0f42      	lsrs	r2, r0, #29
10000c44:	00ed      	lsls	r5, r5, #3
10000c46:	4315      	orrs	r5, r2
10000c48:	2280      	movs	r2, #128	; 0x80
10000c4a:	0412      	lsls	r2, r2, #16
10000c4c:	432a      	orrs	r2, r5
10000c4e:	9202      	str	r2, [sp, #8]
10000c50:	4a57      	ldr	r2, [pc, #348]	; (10000db0 <__aeabi_ddiv+0x190>)
10000c52:	00c4      	lsls	r4, r0, #3
10000c54:	189f      	adds	r7, r3, r2
10000c56:	2600      	movs	r6, #0
10000c58:	9b01      	ldr	r3, [sp, #4]
10000c5a:	9a01      	ldr	r2, [sp, #4]
10000c5c:	031d      	lsls	r5, r3, #12
10000c5e:	0fd2      	lsrs	r2, r2, #31
10000c60:	005b      	lsls	r3, r3, #1
10000c62:	9800      	ldr	r0, [sp, #0]
10000c64:	0b2d      	lsrs	r5, r5, #12
10000c66:	0d5b      	lsrs	r3, r3, #21
10000c68:	9207      	str	r2, [sp, #28]
10000c6a:	d065      	beq.n	10000d38 <__aeabi_ddiv+0x118>
10000c6c:	4a4f      	ldr	r2, [pc, #316]	; (10000dac <__aeabi_ddiv+0x18c>)
10000c6e:	4293      	cmp	r3, r2
10000c70:	d100      	bne.n	10000c74 <__aeabi_ddiv+0x54>
10000c72:	e088      	b.n	10000d86 <__aeabi_ddiv+0x166>
10000c74:	00ed      	lsls	r5, r5, #3
10000c76:	494e      	ldr	r1, [pc, #312]	; (10000db0 <__aeabi_ddiv+0x190>)
10000c78:	0f42      	lsrs	r2, r0, #29
10000c7a:	432a      	orrs	r2, r5
10000c7c:	2580      	movs	r5, #128	; 0x80
10000c7e:	185b      	adds	r3, r3, r1
10000c80:	469c      	mov	ip, r3
10000c82:	042d      	lsls	r5, r5, #16
10000c84:	4315      	orrs	r5, r2
10000c86:	00c2      	lsls	r2, r0, #3
10000c88:	2100      	movs	r1, #0
10000c8a:	9b07      	ldr	r3, [sp, #28]
10000c8c:	9806      	ldr	r0, [sp, #24]
10000c8e:	4058      	eors	r0, r3
10000c90:	4663      	mov	r3, ip
10000c92:	9004      	str	r0, [sp, #16]
10000c94:	00b0      	lsls	r0, r6, #2
10000c96:	4308      	orrs	r0, r1
10000c98:	1afb      	subs	r3, r7, r3
10000c9a:	3801      	subs	r0, #1
10000c9c:	9303      	str	r3, [sp, #12]
10000c9e:	280e      	cmp	r0, #14
10000ca0:	d900      	bls.n	10000ca4 <__aeabi_ddiv+0x84>
10000ca2:	e089      	b.n	10000db8 <__aeabi_ddiv+0x198>
10000ca4:	f001 f894 	bl	10001dd0 <__gnu_thumb1_case_uhi>
10000ca8:	0228007e 	.word	0x0228007e
10000cac:	022801d4 	.word	0x022801d4
10000cb0:	0228021e 	.word	0x0228021e
10000cb4:	007e01d4 	.word	0x007e01d4
10000cb8:	021e007e 	.word	0x021e007e
10000cbc:	01c701d4 	.word	0x01c701d4
10000cc0:	01c701c7 	.word	0x01c701c7
10000cc4:	01b5      	.short	0x01b5
10000cc6:	002b      	movs	r3, r5
10000cc8:	4303      	orrs	r3, r0
10000cca:	9302      	str	r3, [sp, #8]
10000ccc:	d02c      	beq.n	10000d28 <__aeabi_ddiv+0x108>
10000cce:	2d00      	cmp	r5, #0
10000cd0:	d015      	beq.n	10000cfe <__aeabi_ddiv+0xde>
10000cd2:	0028      	movs	r0, r5
10000cd4:	f7ff fb18 	bl	10000308 <__clzsi2>
10000cd8:	0001      	movs	r1, r0
10000cda:	0003      	movs	r3, r0
10000cdc:	390b      	subs	r1, #11
10000cde:	221d      	movs	r2, #29
10000ce0:	1a52      	subs	r2, r2, r1
10000ce2:	0031      	movs	r1, r6
10000ce4:	0018      	movs	r0, r3
10000ce6:	40d1      	lsrs	r1, r2
10000ce8:	3808      	subs	r0, #8
10000cea:	4085      	lsls	r5, r0
10000cec:	000a      	movs	r2, r1
10000cee:	432a      	orrs	r2, r5
10000cf0:	0035      	movs	r5, r6
10000cf2:	4085      	lsls	r5, r0
10000cf4:	9202      	str	r2, [sp, #8]
10000cf6:	4f2f      	ldr	r7, [pc, #188]	; (10000db4 <__aeabi_ddiv+0x194>)
10000cf8:	002c      	movs	r4, r5
10000cfa:	1aff      	subs	r7, r7, r3
10000cfc:	e7ab      	b.n	10000c56 <__aeabi_ddiv+0x36>
10000cfe:	f7ff fb03 	bl	10000308 <__clzsi2>
10000d02:	0001      	movs	r1, r0
10000d04:	0003      	movs	r3, r0
10000d06:	3115      	adds	r1, #21
10000d08:	3320      	adds	r3, #32
10000d0a:	291c      	cmp	r1, #28
10000d0c:	dde7      	ble.n	10000cde <__aeabi_ddiv+0xbe>
10000d0e:	0032      	movs	r2, r6
10000d10:	3808      	subs	r0, #8
10000d12:	4082      	lsls	r2, r0
10000d14:	9202      	str	r2, [sp, #8]
10000d16:	e7ee      	b.n	10000cf6 <__aeabi_ddiv+0xd6>
10000d18:	0002      	movs	r2, r0
10000d1a:	432a      	orrs	r2, r5
10000d1c:	9202      	str	r2, [sp, #8]
10000d1e:	d007      	beq.n	10000d30 <__aeabi_ddiv+0x110>
10000d20:	001f      	movs	r7, r3
10000d22:	2603      	movs	r6, #3
10000d24:	9502      	str	r5, [sp, #8]
10000d26:	e797      	b.n	10000c58 <__aeabi_ddiv+0x38>
10000d28:	9c02      	ldr	r4, [sp, #8]
10000d2a:	2601      	movs	r6, #1
10000d2c:	0027      	movs	r7, r4
10000d2e:	e793      	b.n	10000c58 <__aeabi_ddiv+0x38>
10000d30:	001f      	movs	r7, r3
10000d32:	2602      	movs	r6, #2
10000d34:	9c02      	ldr	r4, [sp, #8]
10000d36:	e78f      	b.n	10000c58 <__aeabi_ddiv+0x38>
10000d38:	9a00      	ldr	r2, [sp, #0]
10000d3a:	432a      	orrs	r2, r5
10000d3c:	d02a      	beq.n	10000d94 <__aeabi_ddiv+0x174>
10000d3e:	2d00      	cmp	r5, #0
10000d40:	d015      	beq.n	10000d6e <__aeabi_ddiv+0x14e>
10000d42:	0028      	movs	r0, r5
10000d44:	f7ff fae0 	bl	10000308 <__clzsi2>
10000d48:	0001      	movs	r1, r0
10000d4a:	0002      	movs	r2, r0
10000d4c:	390b      	subs	r1, #11
10000d4e:	231d      	movs	r3, #29
10000d50:	0010      	movs	r0, r2
10000d52:	1a5b      	subs	r3, r3, r1
10000d54:	9900      	ldr	r1, [sp, #0]
10000d56:	3808      	subs	r0, #8
10000d58:	4085      	lsls	r5, r0
10000d5a:	40d9      	lsrs	r1, r3
10000d5c:	4329      	orrs	r1, r5
10000d5e:	9d00      	ldr	r5, [sp, #0]
10000d60:	4085      	lsls	r5, r0
10000d62:	4b14      	ldr	r3, [pc, #80]	; (10000db4 <__aeabi_ddiv+0x194>)
10000d64:	1a9b      	subs	r3, r3, r2
10000d66:	469c      	mov	ip, r3
10000d68:	002a      	movs	r2, r5
10000d6a:	000d      	movs	r5, r1
10000d6c:	e78c      	b.n	10000c88 <__aeabi_ddiv+0x68>
10000d6e:	f7ff facb 	bl	10000308 <__clzsi2>
10000d72:	0001      	movs	r1, r0
10000d74:	0002      	movs	r2, r0
10000d76:	3115      	adds	r1, #21
10000d78:	3220      	adds	r2, #32
10000d7a:	291c      	cmp	r1, #28
10000d7c:	dde7      	ble.n	10000d4e <__aeabi_ddiv+0x12e>
10000d7e:	9900      	ldr	r1, [sp, #0]
10000d80:	3808      	subs	r0, #8
10000d82:	4081      	lsls	r1, r0
10000d84:	e7ed      	b.n	10000d62 <__aeabi_ddiv+0x142>
10000d86:	9a00      	ldr	r2, [sp, #0]
10000d88:	432a      	orrs	r2, r5
10000d8a:	d007      	beq.n	10000d9c <__aeabi_ddiv+0x17c>
10000d8c:	0002      	movs	r2, r0
10000d8e:	469c      	mov	ip, r3
10000d90:	2103      	movs	r1, #3
10000d92:	e77a      	b.n	10000c8a <__aeabi_ddiv+0x6a>
10000d94:	0015      	movs	r5, r2
10000d96:	4694      	mov	ip, r2
10000d98:	2101      	movs	r1, #1
10000d9a:	e776      	b.n	10000c8a <__aeabi_ddiv+0x6a>
10000d9c:	0015      	movs	r5, r2
10000d9e:	469c      	mov	ip, r3
10000da0:	2102      	movs	r1, #2
10000da2:	e772      	b.n	10000c8a <__aeabi_ddiv+0x6a>
10000da4:	2300      	movs	r3, #0
10000da6:	001c      	movs	r4, r3
10000da8:	4a00      	ldr	r2, [pc, #0]	; (10000dac <__aeabi_ddiv+0x18c>)
10000daa:	e122      	b.n	10000ff2 <__aeabi_ddiv+0x3d2>
10000dac:	000007ff 	.word	0x000007ff
10000db0:	fffffc01 	.word	0xfffffc01
10000db4:	fffffc0d 	.word	0xfffffc0d
10000db8:	9b02      	ldr	r3, [sp, #8]
10000dba:	429d      	cmp	r5, r3
10000dbc:	d304      	bcc.n	10000dc8 <__aeabi_ddiv+0x1a8>
10000dbe:	d000      	beq.n	10000dc2 <__aeabi_ddiv+0x1a2>
10000dc0:	e122      	b.n	10001008 <__aeabi_ddiv+0x3e8>
10000dc2:	42a2      	cmp	r2, r4
10000dc4:	d900      	bls.n	10000dc8 <__aeabi_ddiv+0x1a8>
10000dc6:	e11f      	b.n	10001008 <__aeabi_ddiv+0x3e8>
10000dc8:	9b02      	ldr	r3, [sp, #8]
10000dca:	07e6      	lsls	r6, r4, #31
10000dcc:	07d9      	lsls	r1, r3, #31
10000dce:	0863      	lsrs	r3, r4, #1
10000dd0:	4319      	orrs	r1, r3
10000dd2:	000c      	movs	r4, r1
10000dd4:	9b02      	ldr	r3, [sp, #8]
10000dd6:	085b      	lsrs	r3, r3, #1
10000dd8:	9302      	str	r3, [sp, #8]
10000dda:	0213      	lsls	r3, r2, #8
10000ddc:	022d      	lsls	r5, r5, #8
10000dde:	0e17      	lsrs	r7, r2, #24
10000de0:	9300      	str	r3, [sp, #0]
10000de2:	0c2b      	lsrs	r3, r5, #16
10000de4:	432f      	orrs	r7, r5
10000de6:	9307      	str	r3, [sp, #28]
10000de8:	9907      	ldr	r1, [sp, #28]
10000dea:	b2bb      	uxth	r3, r7
10000dec:	9802      	ldr	r0, [sp, #8]
10000dee:	9305      	str	r3, [sp, #20]
10000df0:	f7ff fa2a 	bl	10000248 <__aeabi_uidivmod>
10000df4:	b2bb      	uxth	r3, r7
10000df6:	4343      	muls	r3, r0
10000df8:	040a      	lsls	r2, r1, #16
10000dfa:	0c21      	lsrs	r1, r4, #16
10000dfc:	0005      	movs	r5, r0
10000dfe:	4311      	orrs	r1, r2
10000e00:	428b      	cmp	r3, r1
10000e02:	d907      	bls.n	10000e14 <__aeabi_ddiv+0x1f4>
10000e04:	19c9      	adds	r1, r1, r7
10000e06:	3d01      	subs	r5, #1
10000e08:	428f      	cmp	r7, r1
10000e0a:	d803      	bhi.n	10000e14 <__aeabi_ddiv+0x1f4>
10000e0c:	428b      	cmp	r3, r1
10000e0e:	d901      	bls.n	10000e14 <__aeabi_ddiv+0x1f4>
10000e10:	1e85      	subs	r5, r0, #2
10000e12:	19c9      	adds	r1, r1, r7
10000e14:	1ac8      	subs	r0, r1, r3
10000e16:	9907      	ldr	r1, [sp, #28]
10000e18:	f7ff fa16 	bl	10000248 <__aeabi_uidivmod>
10000e1c:	b2ba      	uxth	r2, r7
10000e1e:	4342      	muls	r2, r0
10000e20:	0409      	lsls	r1, r1, #16
10000e22:	b2a4      	uxth	r4, r4
10000e24:	0003      	movs	r3, r0
10000e26:	430c      	orrs	r4, r1
10000e28:	42a2      	cmp	r2, r4
10000e2a:	d907      	bls.n	10000e3c <__aeabi_ddiv+0x21c>
10000e2c:	19e4      	adds	r4, r4, r7
10000e2e:	3b01      	subs	r3, #1
10000e30:	42a7      	cmp	r7, r4
10000e32:	d803      	bhi.n	10000e3c <__aeabi_ddiv+0x21c>
10000e34:	42a2      	cmp	r2, r4
10000e36:	d901      	bls.n	10000e3c <__aeabi_ddiv+0x21c>
10000e38:	1e83      	subs	r3, r0, #2
10000e3a:	19e4      	adds	r4, r4, r7
10000e3c:	042d      	lsls	r5, r5, #16
10000e3e:	431d      	orrs	r5, r3
10000e40:	1aa4      	subs	r4, r4, r2
10000e42:	9b00      	ldr	r3, [sp, #0]
10000e44:	9a00      	ldr	r2, [sp, #0]
10000e46:	0c1b      	lsrs	r3, r3, #16
10000e48:	0412      	lsls	r2, r2, #16
10000e4a:	9305      	str	r3, [sp, #20]
10000e4c:	0c12      	lsrs	r2, r2, #16
10000e4e:	b2ab      	uxth	r3, r5
10000e50:	9206      	str	r2, [sp, #24]
10000e52:	435a      	muls	r2, r3
10000e54:	9806      	ldr	r0, [sp, #24]
10000e56:	9202      	str	r2, [sp, #8]
10000e58:	9a05      	ldr	r2, [sp, #20]
10000e5a:	0c29      	lsrs	r1, r5, #16
10000e5c:	4348      	muls	r0, r1
10000e5e:	4353      	muls	r3, r2
10000e60:	4351      	muls	r1, r2
10000e62:	9a02      	ldr	r2, [sp, #8]
10000e64:	181b      	adds	r3, r3, r0
10000e66:	0c12      	lsrs	r2, r2, #16
10000e68:	4694      	mov	ip, r2
10000e6a:	4463      	add	r3, ip
10000e6c:	4298      	cmp	r0, r3
10000e6e:	d902      	bls.n	10000e76 <__aeabi_ddiv+0x256>
10000e70:	2280      	movs	r2, #128	; 0x80
10000e72:	0252      	lsls	r2, r2, #9
10000e74:	1889      	adds	r1, r1, r2
10000e76:	9a02      	ldr	r2, [sp, #8]
10000e78:	0c18      	lsrs	r0, r3, #16
10000e7a:	0412      	lsls	r2, r2, #16
10000e7c:	041b      	lsls	r3, r3, #16
10000e7e:	0c12      	lsrs	r2, r2, #16
10000e80:	1840      	adds	r0, r0, r1
10000e82:	189a      	adds	r2, r3, r2
10000e84:	4284      	cmp	r4, r0
10000e86:	d303      	bcc.n	10000e90 <__aeabi_ddiv+0x270>
10000e88:	9502      	str	r5, [sp, #8]
10000e8a:	d11e      	bne.n	10000eca <__aeabi_ddiv+0x2aa>
10000e8c:	4296      	cmp	r6, r2
10000e8e:	d21c      	bcs.n	10000eca <__aeabi_ddiv+0x2aa>
10000e90:	1e6b      	subs	r3, r5, #1
10000e92:	9302      	str	r3, [sp, #8]
10000e94:	9b00      	ldr	r3, [sp, #0]
10000e96:	18f6      	adds	r6, r6, r3
10000e98:	429e      	cmp	r6, r3
10000e9a:	419b      	sbcs	r3, r3
10000e9c:	425b      	negs	r3, r3
10000e9e:	19db      	adds	r3, r3, r7
10000ea0:	18e4      	adds	r4, r4, r3
10000ea2:	42a7      	cmp	r7, r4
10000ea4:	d303      	bcc.n	10000eae <__aeabi_ddiv+0x28e>
10000ea6:	d110      	bne.n	10000eca <__aeabi_ddiv+0x2aa>
10000ea8:	9b00      	ldr	r3, [sp, #0]
10000eaa:	42b3      	cmp	r3, r6
10000eac:	d80d      	bhi.n	10000eca <__aeabi_ddiv+0x2aa>
10000eae:	42a0      	cmp	r0, r4
10000eb0:	d802      	bhi.n	10000eb8 <__aeabi_ddiv+0x298>
10000eb2:	d10a      	bne.n	10000eca <__aeabi_ddiv+0x2aa>
10000eb4:	42b2      	cmp	r2, r6
10000eb6:	d908      	bls.n	10000eca <__aeabi_ddiv+0x2aa>
10000eb8:	1eab      	subs	r3, r5, #2
10000eba:	9302      	str	r3, [sp, #8]
10000ebc:	9b00      	ldr	r3, [sp, #0]
10000ebe:	18f6      	adds	r6, r6, r3
10000ec0:	429e      	cmp	r6, r3
10000ec2:	419b      	sbcs	r3, r3
10000ec4:	425b      	negs	r3, r3
10000ec6:	19db      	adds	r3, r3, r7
10000ec8:	18e4      	adds	r4, r4, r3
10000eca:	1ab5      	subs	r5, r6, r2
10000ecc:	42ae      	cmp	r6, r5
10000ece:	41b6      	sbcs	r6, r6
10000ed0:	1a20      	subs	r0, r4, r0
10000ed2:	4276      	negs	r6, r6
10000ed4:	1b80      	subs	r0, r0, r6
10000ed6:	4287      	cmp	r7, r0
10000ed8:	d100      	bne.n	10000edc <__aeabi_ddiv+0x2bc>
10000eda:	e0be      	b.n	1000105a <__aeabi_ddiv+0x43a>
10000edc:	9907      	ldr	r1, [sp, #28]
10000ede:	f7ff f9b3 	bl	10000248 <__aeabi_uidivmod>
10000ee2:	b2bb      	uxth	r3, r7
10000ee4:	4343      	muls	r3, r0
10000ee6:	040a      	lsls	r2, r1, #16
10000ee8:	0c29      	lsrs	r1, r5, #16
10000eea:	0004      	movs	r4, r0
10000eec:	4311      	orrs	r1, r2
10000eee:	428b      	cmp	r3, r1
10000ef0:	d907      	bls.n	10000f02 <__aeabi_ddiv+0x2e2>
10000ef2:	19c9      	adds	r1, r1, r7
10000ef4:	3c01      	subs	r4, #1
10000ef6:	428f      	cmp	r7, r1
10000ef8:	d803      	bhi.n	10000f02 <__aeabi_ddiv+0x2e2>
10000efa:	428b      	cmp	r3, r1
10000efc:	d901      	bls.n	10000f02 <__aeabi_ddiv+0x2e2>
10000efe:	1e84      	subs	r4, r0, #2
10000f00:	19c9      	adds	r1, r1, r7
10000f02:	1ac8      	subs	r0, r1, r3
10000f04:	9907      	ldr	r1, [sp, #28]
10000f06:	f7ff f99f 	bl	10000248 <__aeabi_uidivmod>
10000f0a:	b2bb      	uxth	r3, r7
10000f0c:	4343      	muls	r3, r0
10000f0e:	0409      	lsls	r1, r1, #16
10000f10:	b2ad      	uxth	r5, r5
10000f12:	0002      	movs	r2, r0
10000f14:	430d      	orrs	r5, r1
10000f16:	42ab      	cmp	r3, r5
10000f18:	d907      	bls.n	10000f2a <__aeabi_ddiv+0x30a>
10000f1a:	19ed      	adds	r5, r5, r7
10000f1c:	3a01      	subs	r2, #1
10000f1e:	42af      	cmp	r7, r5
10000f20:	d803      	bhi.n	10000f2a <__aeabi_ddiv+0x30a>
10000f22:	42ab      	cmp	r3, r5
10000f24:	d901      	bls.n	10000f2a <__aeabi_ddiv+0x30a>
10000f26:	1e82      	subs	r2, r0, #2
10000f28:	19ed      	adds	r5, r5, r7
10000f2a:	1aed      	subs	r5, r5, r3
10000f2c:	0423      	lsls	r3, r4, #16
10000f2e:	9e05      	ldr	r6, [sp, #20]
10000f30:	4313      	orrs	r3, r2
10000f32:	9906      	ldr	r1, [sp, #24]
10000f34:	9806      	ldr	r0, [sp, #24]
10000f36:	0c1c      	lsrs	r4, r3, #16
10000f38:	b29a      	uxth	r2, r3
10000f3a:	4351      	muls	r1, r2
10000f3c:	4360      	muls	r0, r4
10000f3e:	4372      	muls	r2, r6
10000f40:	4374      	muls	r4, r6
10000f42:	1812      	adds	r2, r2, r0
10000f44:	0c0e      	lsrs	r6, r1, #16
10000f46:	18b2      	adds	r2, r6, r2
10000f48:	4290      	cmp	r0, r2
10000f4a:	d902      	bls.n	10000f52 <__aeabi_ddiv+0x332>
10000f4c:	2080      	movs	r0, #128	; 0x80
10000f4e:	0240      	lsls	r0, r0, #9
10000f50:	1824      	adds	r4, r4, r0
10000f52:	0c10      	lsrs	r0, r2, #16
10000f54:	0409      	lsls	r1, r1, #16
10000f56:	0412      	lsls	r2, r2, #16
10000f58:	0c09      	lsrs	r1, r1, #16
10000f5a:	1900      	adds	r0, r0, r4
10000f5c:	1851      	adds	r1, r2, r1
10000f5e:	4285      	cmp	r5, r0
10000f60:	d304      	bcc.n	10000f6c <__aeabi_ddiv+0x34c>
10000f62:	001c      	movs	r4, r3
10000f64:	4285      	cmp	r5, r0
10000f66:	d119      	bne.n	10000f9c <__aeabi_ddiv+0x37c>
10000f68:	2900      	cmp	r1, #0
10000f6a:	d019      	beq.n	10000fa0 <__aeabi_ddiv+0x380>
10000f6c:	197d      	adds	r5, r7, r5
10000f6e:	1e5c      	subs	r4, r3, #1
10000f70:	42bd      	cmp	r5, r7
10000f72:	d30e      	bcc.n	10000f92 <__aeabi_ddiv+0x372>
10000f74:	4285      	cmp	r5, r0
10000f76:	d303      	bcc.n	10000f80 <__aeabi_ddiv+0x360>
10000f78:	d110      	bne.n	10000f9c <__aeabi_ddiv+0x37c>
10000f7a:	9a00      	ldr	r2, [sp, #0]
10000f7c:	428a      	cmp	r2, r1
10000f7e:	d20a      	bcs.n	10000f96 <__aeabi_ddiv+0x376>
10000f80:	1e9c      	subs	r4, r3, #2
10000f82:	9b00      	ldr	r3, [sp, #0]
10000f84:	005a      	lsls	r2, r3, #1
10000f86:	429a      	cmp	r2, r3
10000f88:	419b      	sbcs	r3, r3
10000f8a:	425b      	negs	r3, r3
10000f8c:	19db      	adds	r3, r3, r7
10000f8e:	18ed      	adds	r5, r5, r3
10000f90:	9200      	str	r2, [sp, #0]
10000f92:	4285      	cmp	r5, r0
10000f94:	d102      	bne.n	10000f9c <__aeabi_ddiv+0x37c>
10000f96:	9b00      	ldr	r3, [sp, #0]
10000f98:	4299      	cmp	r1, r3
10000f9a:	d001      	beq.n	10000fa0 <__aeabi_ddiv+0x380>
10000f9c:	2301      	movs	r3, #1
10000f9e:	431c      	orrs	r4, r3
10000fa0:	9b03      	ldr	r3, [sp, #12]
10000fa2:	4a5b      	ldr	r2, [pc, #364]	; (10001110 <__aeabi_ddiv+0x4f0>)
10000fa4:	189a      	adds	r2, r3, r2
10000fa6:	2a00      	cmp	r2, #0
10000fa8:	dd5a      	ble.n	10001060 <__aeabi_ddiv+0x440>
10000faa:	0763      	lsls	r3, r4, #29
10000fac:	d00b      	beq.n	10000fc6 <__aeabi_ddiv+0x3a6>
10000fae:	230f      	movs	r3, #15
10000fb0:	4023      	ands	r3, r4
10000fb2:	2b04      	cmp	r3, #4
10000fb4:	d007      	beq.n	10000fc6 <__aeabi_ddiv+0x3a6>
10000fb6:	1d23      	adds	r3, r4, #4
10000fb8:	42a3      	cmp	r3, r4
10000fba:	41a4      	sbcs	r4, r4
10000fbc:	9902      	ldr	r1, [sp, #8]
10000fbe:	4264      	negs	r4, r4
10000fc0:	1909      	adds	r1, r1, r4
10000fc2:	001c      	movs	r4, r3
10000fc4:	9102      	str	r1, [sp, #8]
10000fc6:	9b02      	ldr	r3, [sp, #8]
10000fc8:	01db      	lsls	r3, r3, #7
10000fca:	d508      	bpl.n	10000fde <__aeabi_ddiv+0x3be>
10000fcc:	4b51      	ldr	r3, [pc, #324]	; (10001114 <__aeabi_ddiv+0x4f4>)
10000fce:	9a02      	ldr	r2, [sp, #8]
10000fd0:	401a      	ands	r2, r3
10000fd2:	2380      	movs	r3, #128	; 0x80
10000fd4:	00db      	lsls	r3, r3, #3
10000fd6:	469c      	mov	ip, r3
10000fd8:	9202      	str	r2, [sp, #8]
10000fda:	9a03      	ldr	r2, [sp, #12]
10000fdc:	4462      	add	r2, ip
10000fde:	4b4e      	ldr	r3, [pc, #312]	; (10001118 <__aeabi_ddiv+0x4f8>)
10000fe0:	429a      	cmp	r2, r3
10000fe2:	dd00      	ble.n	10000fe6 <__aeabi_ddiv+0x3c6>
10000fe4:	e08c      	b.n	10001100 <__aeabi_ddiv+0x4e0>
10000fe6:	9b02      	ldr	r3, [sp, #8]
10000fe8:	08e4      	lsrs	r4, r4, #3
10000fea:	075b      	lsls	r3, r3, #29
10000fec:	431c      	orrs	r4, r3
10000fee:	9b02      	ldr	r3, [sp, #8]
10000ff0:	08db      	lsrs	r3, r3, #3
10000ff2:	031b      	lsls	r3, r3, #12
10000ff4:	0512      	lsls	r2, r2, #20
10000ff6:	0b1b      	lsrs	r3, r3, #12
10000ff8:	4313      	orrs	r3, r2
10000ffa:	9a04      	ldr	r2, [sp, #16]
10000ffc:	0020      	movs	r0, r4
10000ffe:	07d2      	lsls	r2, r2, #31
10001000:	4313      	orrs	r3, r2
10001002:	0019      	movs	r1, r3
10001004:	b009      	add	sp, #36	; 0x24
10001006:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001008:	9b03      	ldr	r3, [sp, #12]
1000100a:	2600      	movs	r6, #0
1000100c:	3b01      	subs	r3, #1
1000100e:	9303      	str	r3, [sp, #12]
10001010:	e6e3      	b.n	10000dda <__aeabi_ddiv+0x1ba>
10001012:	2380      	movs	r3, #128	; 0x80
10001014:	9902      	ldr	r1, [sp, #8]
10001016:	031b      	lsls	r3, r3, #12
10001018:	4219      	tst	r1, r3
1000101a:	d005      	beq.n	10001028 <__aeabi_ddiv+0x408>
1000101c:	421d      	tst	r5, r3
1000101e:	d103      	bne.n	10001028 <__aeabi_ddiv+0x408>
10001020:	0014      	movs	r4, r2
10001022:	9b07      	ldr	r3, [sp, #28]
10001024:	9502      	str	r5, [sp, #8]
10001026:	9305      	str	r3, [sp, #20]
10001028:	2380      	movs	r3, #128	; 0x80
1000102a:	9a02      	ldr	r2, [sp, #8]
1000102c:	031b      	lsls	r3, r3, #12
1000102e:	4313      	orrs	r3, r2
10001030:	9a05      	ldr	r2, [sp, #20]
10001032:	9204      	str	r2, [sp, #16]
10001034:	e6b8      	b.n	10000da8 <__aeabi_ddiv+0x188>
10001036:	0031      	movs	r1, r6
10001038:	9b06      	ldr	r3, [sp, #24]
1000103a:	9304      	str	r3, [sp, #16]
1000103c:	2902      	cmp	r1, #2
1000103e:	d05f      	beq.n	10001100 <__aeabi_ddiv+0x4e0>
10001040:	2903      	cmp	r1, #3
10001042:	d056      	beq.n	100010f2 <__aeabi_ddiv+0x4d2>
10001044:	2901      	cmp	r1, #1
10001046:	d1ab      	bne.n	10000fa0 <__aeabi_ddiv+0x380>
10001048:	2400      	movs	r4, #0
1000104a:	0023      	movs	r3, r4
1000104c:	0022      	movs	r2, r4
1000104e:	e7d0      	b.n	10000ff2 <__aeabi_ddiv+0x3d2>
10001050:	9b07      	ldr	r3, [sp, #28]
10001052:	0014      	movs	r4, r2
10001054:	9502      	str	r5, [sp, #8]
10001056:	9304      	str	r3, [sp, #16]
10001058:	e7f0      	b.n	1000103c <__aeabi_ddiv+0x41c>
1000105a:	2401      	movs	r4, #1
1000105c:	4264      	negs	r4, r4
1000105e:	e79f      	b.n	10000fa0 <__aeabi_ddiv+0x380>
10001060:	2101      	movs	r1, #1
10001062:	1a89      	subs	r1, r1, r2
10001064:	2938      	cmp	r1, #56	; 0x38
10001066:	dcef      	bgt.n	10001048 <__aeabi_ddiv+0x428>
10001068:	291f      	cmp	r1, #31
1000106a:	dc26      	bgt.n	100010ba <__aeabi_ddiv+0x49a>
1000106c:	4a2b      	ldr	r2, [pc, #172]	; (1000111c <__aeabi_ddiv+0x4fc>)
1000106e:	9b03      	ldr	r3, [sp, #12]
10001070:	4694      	mov	ip, r2
10001072:	4463      	add	r3, ip
10001074:	0020      	movs	r0, r4
10001076:	409c      	lsls	r4, r3
10001078:	9a02      	ldr	r2, [sp, #8]
1000107a:	40c8      	lsrs	r0, r1
1000107c:	409a      	lsls	r2, r3
1000107e:	0023      	movs	r3, r4
10001080:	4302      	orrs	r2, r0
10001082:	1e58      	subs	r0, r3, #1
10001084:	4183      	sbcs	r3, r0
10001086:	431a      	orrs	r2, r3
10001088:	9b02      	ldr	r3, [sp, #8]
1000108a:	0014      	movs	r4, r2
1000108c:	40cb      	lsrs	r3, r1
1000108e:	0762      	lsls	r2, r4, #29
10001090:	d009      	beq.n	100010a6 <__aeabi_ddiv+0x486>
10001092:	220f      	movs	r2, #15
10001094:	4022      	ands	r2, r4
10001096:	2a04      	cmp	r2, #4
10001098:	d005      	beq.n	100010a6 <__aeabi_ddiv+0x486>
1000109a:	1d22      	adds	r2, r4, #4
1000109c:	42a2      	cmp	r2, r4
1000109e:	41a4      	sbcs	r4, r4
100010a0:	4264      	negs	r4, r4
100010a2:	191b      	adds	r3, r3, r4
100010a4:	0014      	movs	r4, r2
100010a6:	2180      	movs	r1, #128	; 0x80
100010a8:	001a      	movs	r2, r3
100010aa:	0409      	lsls	r1, r1, #16
100010ac:	400a      	ands	r2, r1
100010ae:	420b      	tst	r3, r1
100010b0:	d129      	bne.n	10001106 <__aeabi_ddiv+0x4e6>
100010b2:	08e1      	lsrs	r1, r4, #3
100010b4:	075c      	lsls	r4, r3, #29
100010b6:	430c      	orrs	r4, r1
100010b8:	e79a      	b.n	10000ff0 <__aeabi_ddiv+0x3d0>
100010ba:	231f      	movs	r3, #31
100010bc:	425b      	negs	r3, r3
100010be:	1a9b      	subs	r3, r3, r2
100010c0:	9a02      	ldr	r2, [sp, #8]
100010c2:	40da      	lsrs	r2, r3
100010c4:	2300      	movs	r3, #0
100010c6:	2920      	cmp	r1, #32
100010c8:	d006      	beq.n	100010d8 <__aeabi_ddiv+0x4b8>
100010ca:	4915      	ldr	r1, [pc, #84]	; (10001120 <__aeabi_ddiv+0x500>)
100010cc:	9b03      	ldr	r3, [sp, #12]
100010ce:	468c      	mov	ip, r1
100010d0:	9902      	ldr	r1, [sp, #8]
100010d2:	4463      	add	r3, ip
100010d4:	4099      	lsls	r1, r3
100010d6:	000b      	movs	r3, r1
100010d8:	431c      	orrs	r4, r3
100010da:	1e63      	subs	r3, r4, #1
100010dc:	419c      	sbcs	r4, r3
100010de:	2300      	movs	r3, #0
100010e0:	4314      	orrs	r4, r2
100010e2:	e7d4      	b.n	1000108e <__aeabi_ddiv+0x46e>
100010e4:	2300      	movs	r3, #0
100010e6:	001c      	movs	r4, r3
100010e8:	9305      	str	r3, [sp, #20]
100010ea:	2380      	movs	r3, #128	; 0x80
100010ec:	031b      	lsls	r3, r3, #12
100010ee:	9302      	str	r3, [sp, #8]
100010f0:	e79a      	b.n	10001028 <__aeabi_ddiv+0x408>
100010f2:	9b04      	ldr	r3, [sp, #16]
100010f4:	9305      	str	r3, [sp, #20]
100010f6:	e797      	b.n	10001028 <__aeabi_ddiv+0x408>
100010f8:	2300      	movs	r3, #0
100010fa:	001c      	movs	r4, r3
100010fc:	001a      	movs	r2, r3
100010fe:	e778      	b.n	10000ff2 <__aeabi_ddiv+0x3d2>
10001100:	2400      	movs	r4, #0
10001102:	0023      	movs	r3, r4
10001104:	e650      	b.n	10000da8 <__aeabi_ddiv+0x188>
10001106:	2300      	movs	r3, #0
10001108:	2201      	movs	r2, #1
1000110a:	001c      	movs	r4, r3
1000110c:	e771      	b.n	10000ff2 <__aeabi_ddiv+0x3d2>
1000110e:	46c0      	nop			; (mov r8, r8)
10001110:	000003ff 	.word	0x000003ff
10001114:	feffffff 	.word	0xfeffffff
10001118:	000007fe 	.word	0x000007fe
1000111c:	0000041e 	.word	0x0000041e
10001120:	0000043e 	.word	0x0000043e

10001124 <__aeabi_dmul>:
10001124:	b5f0      	push	{r4, r5, r6, r7, lr}
10001126:	b08b      	sub	sp, #44	; 0x2c
10001128:	9200      	str	r2, [sp, #0]
1000112a:	9301      	str	r3, [sp, #4]
1000112c:	030d      	lsls	r5, r1, #12
1000112e:	004b      	lsls	r3, r1, #1
10001130:	0fca      	lsrs	r2, r1, #31
10001132:	0006      	movs	r6, r0
10001134:	0b2d      	lsrs	r5, r5, #12
10001136:	0d5b      	lsrs	r3, r3, #21
10001138:	9205      	str	r2, [sp, #20]
1000113a:	d100      	bne.n	1000113e <__aeabi_dmul+0x1a>
1000113c:	e114      	b.n	10001368 <__aeabi_dmul+0x244>
1000113e:	4acf      	ldr	r2, [pc, #828]	; (1000147c <__aeabi_dmul+0x358>)
10001140:	4293      	cmp	r3, r2
10001142:	d100      	bne.n	10001146 <__aeabi_dmul+0x22>
10001144:	e138      	b.n	100013b8 <__aeabi_dmul+0x294>
10001146:	00ed      	lsls	r5, r5, #3
10001148:	0f42      	lsrs	r2, r0, #29
1000114a:	432a      	orrs	r2, r5
1000114c:	2580      	movs	r5, #128	; 0x80
1000114e:	042d      	lsls	r5, r5, #16
10001150:	4315      	orrs	r5, r2
10001152:	4acb      	ldr	r2, [pc, #812]	; (10001480 <__aeabi_dmul+0x35c>)
10001154:	00c4      	lsls	r4, r0, #3
10001156:	189b      	adds	r3, r3, r2
10001158:	9303      	str	r3, [sp, #12]
1000115a:	2300      	movs	r3, #0
1000115c:	9302      	str	r3, [sp, #8]
1000115e:	9b01      	ldr	r3, [sp, #4]
10001160:	9800      	ldr	r0, [sp, #0]
10001162:	031e      	lsls	r6, r3, #12
10001164:	005a      	lsls	r2, r3, #1
10001166:	0fdb      	lsrs	r3, r3, #31
10001168:	0b36      	lsrs	r6, r6, #12
1000116a:	0d52      	lsrs	r2, r2, #21
1000116c:	9304      	str	r3, [sp, #16]
1000116e:	d100      	bne.n	10001172 <__aeabi_dmul+0x4e>
10001170:	e131      	b.n	100013d6 <__aeabi_dmul+0x2b2>
10001172:	4bc2      	ldr	r3, [pc, #776]	; (1000147c <__aeabi_dmul+0x358>)
10001174:	429a      	cmp	r2, r3
10001176:	d100      	bne.n	1000117a <__aeabi_dmul+0x56>
10001178:	e153      	b.n	10001422 <__aeabi_dmul+0x2fe>
1000117a:	0f43      	lsrs	r3, r0, #29
1000117c:	00f6      	lsls	r6, r6, #3
1000117e:	4333      	orrs	r3, r6
10001180:	2680      	movs	r6, #128	; 0x80
10001182:	49bf      	ldr	r1, [pc, #764]	; (10001480 <__aeabi_dmul+0x35c>)
10001184:	0436      	lsls	r6, r6, #16
10001186:	431e      	orrs	r6, r3
10001188:	00c3      	lsls	r3, r0, #3
1000118a:	1850      	adds	r0, r2, r1
1000118c:	2200      	movs	r2, #0
1000118e:	9905      	ldr	r1, [sp, #20]
10001190:	9f04      	ldr	r7, [sp, #16]
10001192:	4079      	eors	r1, r7
10001194:	9100      	str	r1, [sp, #0]
10001196:	9903      	ldr	r1, [sp, #12]
10001198:	1841      	adds	r1, r0, r1
1000119a:	9106      	str	r1, [sp, #24]
1000119c:	3101      	adds	r1, #1
1000119e:	9103      	str	r1, [sp, #12]
100011a0:	9902      	ldr	r1, [sp, #8]
100011a2:	0088      	lsls	r0, r1, #2
100011a4:	4310      	orrs	r0, r2
100011a6:	280a      	cmp	r0, #10
100011a8:	dd00      	ble.n	100011ac <__aeabi_dmul+0x88>
100011aa:	e173      	b.n	10001494 <__aeabi_dmul+0x370>
100011ac:	2802      	cmp	r0, #2
100011ae:	dd00      	ble.n	100011b2 <__aeabi_dmul+0x8e>
100011b0:	e146      	b.n	10001440 <__aeabi_dmul+0x31c>
100011b2:	3801      	subs	r0, #1
100011b4:	2801      	cmp	r0, #1
100011b6:	d800      	bhi.n	100011ba <__aeabi_dmul+0x96>
100011b8:	e155      	b.n	10001466 <__aeabi_dmul+0x342>
100011ba:	0c19      	lsrs	r1, r3, #16
100011bc:	b29b      	uxth	r3, r3
100011be:	9102      	str	r1, [sp, #8]
100011c0:	0019      	movs	r1, r3
100011c2:	0c22      	lsrs	r2, r4, #16
100011c4:	b2a4      	uxth	r4, r4
100011c6:	4351      	muls	r1, r2
100011c8:	0020      	movs	r0, r4
100011ca:	468c      	mov	ip, r1
100011cc:	9f02      	ldr	r7, [sp, #8]
100011ce:	9902      	ldr	r1, [sp, #8]
100011d0:	4358      	muls	r0, r3
100011d2:	4351      	muls	r1, r2
100011d4:	4367      	muls	r7, r4
100011d6:	9105      	str	r1, [sp, #20]
100011d8:	4467      	add	r7, ip
100011da:	0c01      	lsrs	r1, r0, #16
100011dc:	19c9      	adds	r1, r1, r7
100011de:	9004      	str	r0, [sp, #16]
100011e0:	458c      	cmp	ip, r1
100011e2:	d905      	bls.n	100011f0 <__aeabi_dmul+0xcc>
100011e4:	2080      	movs	r0, #128	; 0x80
100011e6:	0240      	lsls	r0, r0, #9
100011e8:	4684      	mov	ip, r0
100011ea:	9f05      	ldr	r7, [sp, #20]
100011ec:	4467      	add	r7, ip
100011ee:	9705      	str	r7, [sp, #20]
100011f0:	0c08      	lsrs	r0, r1, #16
100011f2:	4684      	mov	ip, r0
100011f4:	4668      	mov	r0, sp
100011f6:	8a00      	ldrh	r0, [r0, #16]
100011f8:	0409      	lsls	r1, r1, #16
100011fa:	1809      	adds	r1, r1, r0
100011fc:	9109      	str	r1, [sp, #36]	; 0x24
100011fe:	0c31      	lsrs	r1, r6, #16
10001200:	b2b6      	uxth	r6, r6
10001202:	9104      	str	r1, [sp, #16]
10001204:	0030      	movs	r0, r6
10001206:	0021      	movs	r1, r4
10001208:	9f04      	ldr	r7, [sp, #16]
1000120a:	4350      	muls	r0, r2
1000120c:	437c      	muls	r4, r7
1000120e:	4371      	muls	r1, r6
10001210:	437a      	muls	r2, r7
10001212:	1824      	adds	r4, r4, r0
10001214:	0c0f      	lsrs	r7, r1, #16
10001216:	193c      	adds	r4, r7, r4
10001218:	42a0      	cmp	r0, r4
1000121a:	d902      	bls.n	10001222 <__aeabi_dmul+0xfe>
1000121c:	2080      	movs	r0, #128	; 0x80
1000121e:	0240      	lsls	r0, r0, #9
10001220:	1812      	adds	r2, r2, r0
10001222:	0c20      	lsrs	r0, r4, #16
10001224:	1882      	adds	r2, r0, r2
10001226:	0424      	lsls	r4, r4, #16
10001228:	b289      	uxth	r1, r1
1000122a:	9207      	str	r2, [sp, #28]
1000122c:	1862      	adds	r2, r4, r1
1000122e:	9208      	str	r2, [sp, #32]
10001230:	9908      	ldr	r1, [sp, #32]
10001232:	4662      	mov	r2, ip
10001234:	468c      	mov	ip, r1
10001236:	0c29      	lsrs	r1, r5, #16
10001238:	b2ad      	uxth	r5, r5
1000123a:	0028      	movs	r0, r5
1000123c:	9f02      	ldr	r7, [sp, #8]
1000123e:	4358      	muls	r0, r3
10001240:	436f      	muls	r7, r5
10001242:	434b      	muls	r3, r1
10001244:	4462      	add	r2, ip
10001246:	4694      	mov	ip, r2
10001248:	9c02      	ldr	r4, [sp, #8]
1000124a:	18ff      	adds	r7, r7, r3
1000124c:	0c02      	lsrs	r2, r0, #16
1000124e:	19d2      	adds	r2, r2, r7
10001250:	434c      	muls	r4, r1
10001252:	4293      	cmp	r3, r2
10001254:	d902      	bls.n	1000125c <__aeabi_dmul+0x138>
10001256:	2380      	movs	r3, #128	; 0x80
10001258:	025b      	lsls	r3, r3, #9
1000125a:	18e4      	adds	r4, r4, r3
1000125c:	0c13      	lsrs	r3, r2, #16
1000125e:	191b      	adds	r3, r3, r4
10001260:	9302      	str	r3, [sp, #8]
10001262:	002b      	movs	r3, r5
10001264:	b280      	uxth	r0, r0
10001266:	0412      	lsls	r2, r2, #16
10001268:	1812      	adds	r2, r2, r0
1000126a:	9804      	ldr	r0, [sp, #16]
1000126c:	4373      	muls	r3, r6
1000126e:	4345      	muls	r5, r0
10001270:	434e      	muls	r6, r1
10001272:	4341      	muls	r1, r0
10001274:	19a8      	adds	r0, r5, r6
10001276:	0c1d      	lsrs	r5, r3, #16
10001278:	182d      	adds	r5, r5, r0
1000127a:	42ae      	cmp	r6, r5
1000127c:	d902      	bls.n	10001284 <__aeabi_dmul+0x160>
1000127e:	2080      	movs	r0, #128	; 0x80
10001280:	0240      	lsls	r0, r0, #9
10001282:	1809      	adds	r1, r1, r0
10001284:	9c05      	ldr	r4, [sp, #20]
10001286:	4660      	mov	r0, ip
10001288:	46a4      	mov	ip, r4
1000128a:	9c08      	ldr	r4, [sp, #32]
1000128c:	4460      	add	r0, ip
1000128e:	42a0      	cmp	r0, r4
10001290:	41bf      	sbcs	r7, r7
10001292:	1880      	adds	r0, r0, r2
10001294:	4290      	cmp	r0, r2
10001296:	4192      	sbcs	r2, r2
10001298:	042e      	lsls	r6, r5, #16
1000129a:	b29b      	uxth	r3, r3
1000129c:	18f6      	adds	r6, r6, r3
1000129e:	9b07      	ldr	r3, [sp, #28]
100012a0:	427f      	negs	r7, r7
100012a2:	18f6      	adds	r6, r6, r3
100012a4:	4253      	negs	r3, r2
100012a6:	9304      	str	r3, [sp, #16]
100012a8:	9b02      	ldr	r3, [sp, #8]
100012aa:	19f4      	adds	r4, r6, r7
100012ac:	469c      	mov	ip, r3
100012ae:	44a4      	add	ip, r4
100012b0:	4663      	mov	r3, ip
100012b2:	9a04      	ldr	r2, [sp, #16]
100012b4:	42bc      	cmp	r4, r7
100012b6:	41a4      	sbcs	r4, r4
100012b8:	189b      	adds	r3, r3, r2
100012ba:	9a07      	ldr	r2, [sp, #28]
100012bc:	4264      	negs	r4, r4
100012be:	4296      	cmp	r6, r2
100012c0:	41b6      	sbcs	r6, r6
100012c2:	9a02      	ldr	r2, [sp, #8]
100012c4:	4276      	negs	r6, r6
100012c6:	4334      	orrs	r4, r6
100012c8:	0c2d      	lsrs	r5, r5, #16
100012ca:	1964      	adds	r4, r4, r5
100012cc:	4594      	cmp	ip, r2
100012ce:	41ad      	sbcs	r5, r5
100012d0:	9a04      	ldr	r2, [sp, #16]
100012d2:	426d      	negs	r5, r5
100012d4:	4293      	cmp	r3, r2
100012d6:	4192      	sbcs	r2, r2
100012d8:	4252      	negs	r2, r2
100012da:	4315      	orrs	r5, r2
100012dc:	1964      	adds	r4, r4, r5
100012de:	9a09      	ldr	r2, [sp, #36]	; 0x24
100012e0:	1864      	adds	r4, r4, r1
100012e2:	0241      	lsls	r1, r0, #9
100012e4:	4311      	orrs	r1, r2
100012e6:	1e4a      	subs	r2, r1, #1
100012e8:	4191      	sbcs	r1, r2
100012ea:	0dc0      	lsrs	r0, r0, #23
100012ec:	0dde      	lsrs	r6, r3, #23
100012ee:	0264      	lsls	r4, r4, #9
100012f0:	4301      	orrs	r1, r0
100012f2:	025b      	lsls	r3, r3, #9
100012f4:	4326      	orrs	r6, r4
100012f6:	430b      	orrs	r3, r1
100012f8:	01e4      	lsls	r4, r4, #7
100012fa:	d400      	bmi.n	100012fe <__aeabi_dmul+0x1da>
100012fc:	e0df      	b.n	100014be <__aeabi_dmul+0x39a>
100012fe:	2101      	movs	r1, #1
10001300:	085a      	lsrs	r2, r3, #1
10001302:	400b      	ands	r3, r1
10001304:	431a      	orrs	r2, r3
10001306:	07f3      	lsls	r3, r6, #31
10001308:	40ce      	lsrs	r6, r1
1000130a:	4313      	orrs	r3, r2
1000130c:	9a03      	ldr	r2, [sp, #12]
1000130e:	495d      	ldr	r1, [pc, #372]	; (10001484 <__aeabi_dmul+0x360>)
10001310:	1852      	adds	r2, r2, r1
10001312:	2a00      	cmp	r2, #0
10001314:	dc00      	bgt.n	10001318 <__aeabi_dmul+0x1f4>
10001316:	e0d5      	b.n	100014c4 <__aeabi_dmul+0x3a0>
10001318:	0759      	lsls	r1, r3, #29
1000131a:	d009      	beq.n	10001330 <__aeabi_dmul+0x20c>
1000131c:	210f      	movs	r1, #15
1000131e:	4019      	ands	r1, r3
10001320:	2904      	cmp	r1, #4
10001322:	d005      	beq.n	10001330 <__aeabi_dmul+0x20c>
10001324:	1d19      	adds	r1, r3, #4
10001326:	4299      	cmp	r1, r3
10001328:	419b      	sbcs	r3, r3
1000132a:	425b      	negs	r3, r3
1000132c:	18f6      	adds	r6, r6, r3
1000132e:	000b      	movs	r3, r1
10001330:	01f1      	lsls	r1, r6, #7
10001332:	d506      	bpl.n	10001342 <__aeabi_dmul+0x21e>
10001334:	2180      	movs	r1, #128	; 0x80
10001336:	00c9      	lsls	r1, r1, #3
10001338:	468c      	mov	ip, r1
1000133a:	4a53      	ldr	r2, [pc, #332]	; (10001488 <__aeabi_dmul+0x364>)
1000133c:	4016      	ands	r6, r2
1000133e:	9a03      	ldr	r2, [sp, #12]
10001340:	4462      	add	r2, ip
10001342:	4952      	ldr	r1, [pc, #328]	; (1000148c <__aeabi_dmul+0x368>)
10001344:	428a      	cmp	r2, r1
10001346:	dd00      	ble.n	1000134a <__aeabi_dmul+0x226>
10001348:	e109      	b.n	1000155e <__aeabi_dmul+0x43a>
1000134a:	0774      	lsls	r4, r6, #29
1000134c:	08db      	lsrs	r3, r3, #3
1000134e:	431c      	orrs	r4, r3
10001350:	08f6      	lsrs	r6, r6, #3
10001352:	0513      	lsls	r3, r2, #20
10001354:	0336      	lsls	r6, r6, #12
10001356:	9a00      	ldr	r2, [sp, #0]
10001358:	0b36      	lsrs	r6, r6, #12
1000135a:	4333      	orrs	r3, r6
1000135c:	07d2      	lsls	r2, r2, #31
1000135e:	4313      	orrs	r3, r2
10001360:	0020      	movs	r0, r4
10001362:	0019      	movs	r1, r3
10001364:	b00b      	add	sp, #44	; 0x2c
10001366:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001368:	002c      	movs	r4, r5
1000136a:	4304      	orrs	r4, r0
1000136c:	d02b      	beq.n	100013c6 <__aeabi_dmul+0x2a2>
1000136e:	2d00      	cmp	r5, #0
10001370:	d016      	beq.n	100013a0 <__aeabi_dmul+0x27c>
10001372:	0028      	movs	r0, r5
10001374:	f7fe ffc8 	bl	10000308 <__clzsi2>
10001378:	0004      	movs	r4, r0
1000137a:	0002      	movs	r2, r0
1000137c:	3c0b      	subs	r4, #11
1000137e:	231d      	movs	r3, #29
10001380:	0030      	movs	r0, r6
10001382:	1b1b      	subs	r3, r3, r4
10001384:	0011      	movs	r1, r2
10001386:	40d8      	lsrs	r0, r3
10001388:	3908      	subs	r1, #8
1000138a:	408d      	lsls	r5, r1
1000138c:	0003      	movs	r3, r0
1000138e:	432b      	orrs	r3, r5
10001390:	0035      	movs	r5, r6
10001392:	408d      	lsls	r5, r1
10001394:	493e      	ldr	r1, [pc, #248]	; (10001490 <__aeabi_dmul+0x36c>)
10001396:	002c      	movs	r4, r5
10001398:	1a8a      	subs	r2, r1, r2
1000139a:	001d      	movs	r5, r3
1000139c:	9203      	str	r2, [sp, #12]
1000139e:	e6dc      	b.n	1000115a <__aeabi_dmul+0x36>
100013a0:	f7fe ffb2 	bl	10000308 <__clzsi2>
100013a4:	0004      	movs	r4, r0
100013a6:	0002      	movs	r2, r0
100013a8:	3415      	adds	r4, #21
100013aa:	3220      	adds	r2, #32
100013ac:	2c1c      	cmp	r4, #28
100013ae:	dde6      	ble.n	1000137e <__aeabi_dmul+0x25a>
100013b0:	0033      	movs	r3, r6
100013b2:	3808      	subs	r0, #8
100013b4:	4083      	lsls	r3, r0
100013b6:	e7ed      	b.n	10001394 <__aeabi_dmul+0x270>
100013b8:	0004      	movs	r4, r0
100013ba:	432c      	orrs	r4, r5
100013bc:	d007      	beq.n	100013ce <__aeabi_dmul+0x2aa>
100013be:	9303      	str	r3, [sp, #12]
100013c0:	0004      	movs	r4, r0
100013c2:	2303      	movs	r3, #3
100013c4:	e6ca      	b.n	1000115c <__aeabi_dmul+0x38>
100013c6:	0025      	movs	r5, r4
100013c8:	2301      	movs	r3, #1
100013ca:	9403      	str	r4, [sp, #12]
100013cc:	e6c6      	b.n	1000115c <__aeabi_dmul+0x38>
100013ce:	9303      	str	r3, [sp, #12]
100013d0:	0025      	movs	r5, r4
100013d2:	2302      	movs	r3, #2
100013d4:	e6c2      	b.n	1000115c <__aeabi_dmul+0x38>
100013d6:	9b00      	ldr	r3, [sp, #0]
100013d8:	4333      	orrs	r3, r6
100013da:	d029      	beq.n	10001430 <__aeabi_dmul+0x30c>
100013dc:	2e00      	cmp	r6, #0
100013de:	d014      	beq.n	1000140a <__aeabi_dmul+0x2e6>
100013e0:	0030      	movs	r0, r6
100013e2:	f7fe ff91 	bl	10000308 <__clzsi2>
100013e6:	0001      	movs	r1, r0
100013e8:	0003      	movs	r3, r0
100013ea:	390b      	subs	r1, #11
100013ec:	221d      	movs	r2, #29
100013ee:	0018      	movs	r0, r3
100013f0:	1a52      	subs	r2, r2, r1
100013f2:	9900      	ldr	r1, [sp, #0]
100013f4:	3808      	subs	r0, #8
100013f6:	4086      	lsls	r6, r0
100013f8:	40d1      	lsrs	r1, r2
100013fa:	4331      	orrs	r1, r6
100013fc:	9e00      	ldr	r6, [sp, #0]
100013fe:	4086      	lsls	r6, r0
10001400:	4823      	ldr	r0, [pc, #140]	; (10001490 <__aeabi_dmul+0x36c>)
10001402:	1ac0      	subs	r0, r0, r3
10001404:	0033      	movs	r3, r6
10001406:	000e      	movs	r6, r1
10001408:	e6c0      	b.n	1000118c <__aeabi_dmul+0x68>
1000140a:	f7fe ff7d 	bl	10000308 <__clzsi2>
1000140e:	0001      	movs	r1, r0
10001410:	0003      	movs	r3, r0
10001412:	3115      	adds	r1, #21
10001414:	3320      	adds	r3, #32
10001416:	291c      	cmp	r1, #28
10001418:	dde8      	ble.n	100013ec <__aeabi_dmul+0x2c8>
1000141a:	9900      	ldr	r1, [sp, #0]
1000141c:	3808      	subs	r0, #8
1000141e:	4081      	lsls	r1, r0
10001420:	e7ee      	b.n	10001400 <__aeabi_dmul+0x2dc>
10001422:	9b00      	ldr	r3, [sp, #0]
10001424:	4333      	orrs	r3, r6
10001426:	d007      	beq.n	10001438 <__aeabi_dmul+0x314>
10001428:	0003      	movs	r3, r0
1000142a:	0010      	movs	r0, r2
1000142c:	2203      	movs	r2, #3
1000142e:	e6ae      	b.n	1000118e <__aeabi_dmul+0x6a>
10001430:	001e      	movs	r6, r3
10001432:	0018      	movs	r0, r3
10001434:	2201      	movs	r2, #1
10001436:	e6aa      	b.n	1000118e <__aeabi_dmul+0x6a>
10001438:	0010      	movs	r0, r2
1000143a:	001e      	movs	r6, r3
1000143c:	2202      	movs	r2, #2
1000143e:	e6a6      	b.n	1000118e <__aeabi_dmul+0x6a>
10001440:	2101      	movs	r1, #1
10001442:	4081      	lsls	r1, r0
10001444:	20a6      	movs	r0, #166	; 0xa6
10001446:	000f      	movs	r7, r1
10001448:	00c0      	lsls	r0, r0, #3
1000144a:	4007      	ands	r7, r0
1000144c:	4201      	tst	r1, r0
1000144e:	d127      	bne.n	100014a0 <__aeabi_dmul+0x37c>
10001450:	2090      	movs	r0, #144	; 0x90
10001452:	0080      	lsls	r0, r0, #2
10001454:	4201      	tst	r1, r0
10001456:	d177      	bne.n	10001548 <__aeabi_dmul+0x424>
10001458:	38b9      	subs	r0, #185	; 0xb9
1000145a:	38ff      	subs	r0, #255	; 0xff
1000145c:	4201      	tst	r1, r0
1000145e:	d100      	bne.n	10001462 <__aeabi_dmul+0x33e>
10001460:	e6ab      	b.n	100011ba <__aeabi_dmul+0x96>
10001462:	9904      	ldr	r1, [sp, #16]
10001464:	9100      	str	r1, [sp, #0]
10001466:	2a02      	cmp	r2, #2
10001468:	d079      	beq.n	1000155e <__aeabi_dmul+0x43a>
1000146a:	2a03      	cmp	r2, #3
1000146c:	d075      	beq.n	1000155a <__aeabi_dmul+0x436>
1000146e:	2a01      	cmp	r2, #1
10001470:	d000      	beq.n	10001474 <__aeabi_dmul+0x350>
10001472:	e74b      	b.n	1000130c <__aeabi_dmul+0x1e8>
10001474:	2600      	movs	r6, #0
10001476:	0034      	movs	r4, r6
10001478:	0032      	movs	r2, r6
1000147a:	e76a      	b.n	10001352 <__aeabi_dmul+0x22e>
1000147c:	000007ff 	.word	0x000007ff
10001480:	fffffc01 	.word	0xfffffc01
10001484:	000003ff 	.word	0x000003ff
10001488:	feffffff 	.word	0xfeffffff
1000148c:	000007fe 	.word	0x000007fe
10001490:	fffffc0d 	.word	0xfffffc0d
10001494:	9905      	ldr	r1, [sp, #20]
10001496:	9100      	str	r1, [sp, #0]
10001498:	280f      	cmp	r0, #15
1000149a:	d005      	beq.n	100014a8 <__aeabi_dmul+0x384>
1000149c:	280b      	cmp	r0, #11
1000149e:	d0e0      	beq.n	10001462 <__aeabi_dmul+0x33e>
100014a0:	002e      	movs	r6, r5
100014a2:	0023      	movs	r3, r4
100014a4:	9a02      	ldr	r2, [sp, #8]
100014a6:	e7de      	b.n	10001466 <__aeabi_dmul+0x342>
100014a8:	2280      	movs	r2, #128	; 0x80
100014aa:	0312      	lsls	r2, r2, #12
100014ac:	4215      	tst	r5, r2
100014ae:	d04f      	beq.n	10001550 <__aeabi_dmul+0x42c>
100014b0:	4216      	tst	r6, r2
100014b2:	d14d      	bne.n	10001550 <__aeabi_dmul+0x42c>
100014b4:	0035      	movs	r5, r6
100014b6:	9a04      	ldr	r2, [sp, #16]
100014b8:	9200      	str	r2, [sp, #0]
100014ba:	001c      	movs	r4, r3
100014bc:	e048      	b.n	10001550 <__aeabi_dmul+0x42c>
100014be:	9a06      	ldr	r2, [sp, #24]
100014c0:	9203      	str	r2, [sp, #12]
100014c2:	e723      	b.n	1000130c <__aeabi_dmul+0x1e8>
100014c4:	2001      	movs	r0, #1
100014c6:	1a80      	subs	r0, r0, r2
100014c8:	2838      	cmp	r0, #56	; 0x38
100014ca:	dcd3      	bgt.n	10001474 <__aeabi_dmul+0x350>
100014cc:	281f      	cmp	r0, #31
100014ce:	dc27      	bgt.n	10001520 <__aeabi_dmul+0x3fc>
100014d0:	4926      	ldr	r1, [pc, #152]	; (1000156c <__aeabi_dmul+0x448>)
100014d2:	9a03      	ldr	r2, [sp, #12]
100014d4:	468c      	mov	ip, r1
100014d6:	001c      	movs	r4, r3
100014d8:	4462      	add	r2, ip
100014da:	0031      	movs	r1, r6
100014dc:	4093      	lsls	r3, r2
100014de:	4091      	lsls	r1, r2
100014e0:	40c4      	lsrs	r4, r0
100014e2:	001a      	movs	r2, r3
100014e4:	4321      	orrs	r1, r4
100014e6:	1e53      	subs	r3, r2, #1
100014e8:	419a      	sbcs	r2, r3
100014ea:	000b      	movs	r3, r1
100014ec:	40c6      	lsrs	r6, r0
100014ee:	4313      	orrs	r3, r2
100014f0:	075a      	lsls	r2, r3, #29
100014f2:	d009      	beq.n	10001508 <__aeabi_dmul+0x3e4>
100014f4:	220f      	movs	r2, #15
100014f6:	401a      	ands	r2, r3
100014f8:	2a04      	cmp	r2, #4
100014fa:	d005      	beq.n	10001508 <__aeabi_dmul+0x3e4>
100014fc:	1d1a      	adds	r2, r3, #4
100014fe:	429a      	cmp	r2, r3
10001500:	419b      	sbcs	r3, r3
10001502:	425b      	negs	r3, r3
10001504:	18f6      	adds	r6, r6, r3
10001506:	0013      	movs	r3, r2
10001508:	2180      	movs	r1, #128	; 0x80
1000150a:	0030      	movs	r0, r6
1000150c:	0409      	lsls	r1, r1, #16
1000150e:	4008      	ands	r0, r1
10001510:	420e      	tst	r6, r1
10001512:	d127      	bne.n	10001564 <__aeabi_dmul+0x440>
10001514:	0774      	lsls	r4, r6, #29
10001516:	08db      	lsrs	r3, r3, #3
10001518:	0002      	movs	r2, r0
1000151a:	431c      	orrs	r4, r3
1000151c:	08f6      	lsrs	r6, r6, #3
1000151e:	e718      	b.n	10001352 <__aeabi_dmul+0x22e>
10001520:	211f      	movs	r1, #31
10001522:	4249      	negs	r1, r1
10001524:	1a8a      	subs	r2, r1, r2
10001526:	0031      	movs	r1, r6
10001528:	40d1      	lsrs	r1, r2
1000152a:	2200      	movs	r2, #0
1000152c:	2820      	cmp	r0, #32
1000152e:	d005      	beq.n	1000153c <__aeabi_dmul+0x418>
10001530:	480f      	ldr	r0, [pc, #60]	; (10001570 <__aeabi_dmul+0x44c>)
10001532:	9a03      	ldr	r2, [sp, #12]
10001534:	4684      	mov	ip, r0
10001536:	4462      	add	r2, ip
10001538:	4096      	lsls	r6, r2
1000153a:	0032      	movs	r2, r6
1000153c:	4313      	orrs	r3, r2
1000153e:	1e5a      	subs	r2, r3, #1
10001540:	4193      	sbcs	r3, r2
10001542:	2600      	movs	r6, #0
10001544:	430b      	orrs	r3, r1
10001546:	e7d3      	b.n	100014f0 <__aeabi_dmul+0x3cc>
10001548:	2580      	movs	r5, #128	; 0x80
1000154a:	003c      	movs	r4, r7
1000154c:	032d      	lsls	r5, r5, #12
1000154e:	9700      	str	r7, [sp, #0]
10001550:	2680      	movs	r6, #128	; 0x80
10001552:	0336      	lsls	r6, r6, #12
10001554:	432e      	orrs	r6, r5
10001556:	4a07      	ldr	r2, [pc, #28]	; (10001574 <__aeabi_dmul+0x450>)
10001558:	e6fb      	b.n	10001352 <__aeabi_dmul+0x22e>
1000155a:	0035      	movs	r5, r6
1000155c:	e7ad      	b.n	100014ba <__aeabi_dmul+0x396>
1000155e:	2600      	movs	r6, #0
10001560:	0034      	movs	r4, r6
10001562:	e7f8      	b.n	10001556 <__aeabi_dmul+0x432>
10001564:	2600      	movs	r6, #0
10001566:	2201      	movs	r2, #1
10001568:	0034      	movs	r4, r6
1000156a:	e6f2      	b.n	10001352 <__aeabi_dmul+0x22e>
1000156c:	0000041e 	.word	0x0000041e
10001570:	0000043e 	.word	0x0000043e
10001574:	000007ff 	.word	0x000007ff

10001578 <__aeabi_dsub>:
10001578:	b5f0      	push	{r4, r5, r6, r7, lr}
1000157a:	b085      	sub	sp, #20
1000157c:	9200      	str	r2, [sp, #0]
1000157e:	9301      	str	r3, [sp, #4]
10001580:	0fcb      	lsrs	r3, r1, #31
10001582:	030d      	lsls	r5, r1, #12
10001584:	9302      	str	r3, [sp, #8]
10001586:	9b01      	ldr	r3, [sp, #4]
10001588:	004c      	lsls	r4, r1, #1
1000158a:	0a6d      	lsrs	r5, r5, #9
1000158c:	0f41      	lsrs	r1, r0, #29
1000158e:	4329      	orrs	r1, r5
10001590:	005d      	lsls	r5, r3, #1
10001592:	031e      	lsls	r6, r3, #12
10001594:	0d6b      	lsrs	r3, r5, #21
10001596:	469c      	mov	ip, r3
10001598:	9b01      	ldr	r3, [sp, #4]
1000159a:	0a76      	lsrs	r6, r6, #9
1000159c:	0fdd      	lsrs	r5, r3, #31
1000159e:	9b00      	ldr	r3, [sp, #0]
100015a0:	9a00      	ldr	r2, [sp, #0]
100015a2:	0f5b      	lsrs	r3, r3, #29
100015a4:	4333      	orrs	r3, r6
100015a6:	4ebe      	ldr	r6, [pc, #760]	; (100018a0 <__aeabi_dsub+0x328>)
100015a8:	0d64      	lsrs	r4, r4, #21
100015aa:	00c0      	lsls	r0, r0, #3
100015ac:	00d2      	lsls	r2, r2, #3
100015ae:	45b4      	cmp	ip, r6
100015b0:	d123      	bne.n	100015fa <__aeabi_dsub+0x82>
100015b2:	001e      	movs	r6, r3
100015b4:	4316      	orrs	r6, r2
100015b6:	9603      	str	r6, [sp, #12]
100015b8:	9f03      	ldr	r7, [sp, #12]
100015ba:	4eba      	ldr	r6, [pc, #744]	; (100018a4 <__aeabi_dsub+0x32c>)
100015bc:	19a6      	adds	r6, r4, r6
100015be:	2f00      	cmp	r7, #0
100015c0:	d00c      	beq.n	100015dc <__aeabi_dsub+0x64>
100015c2:	9f02      	ldr	r7, [sp, #8]
100015c4:	9500      	str	r5, [sp, #0]
100015c6:	42af      	cmp	r7, r5
100015c8:	d000      	beq.n	100015cc <__aeabi_dsub+0x54>
100015ca:	e1b5      	b.n	10001938 <__aeabi_dsub+0x3c0>
100015cc:	2e00      	cmp	r6, #0
100015ce:	d100      	bne.n	100015d2 <__aeabi_dsub+0x5a>
100015d0:	e104      	b.n	100017dc <__aeabi_dsub+0x264>
100015d2:	2c00      	cmp	r4, #0
100015d4:	d000      	beq.n	100015d8 <__aeabi_dsub+0x60>
100015d6:	e2ba      	b.n	10001b4e <__aeabi_dsub+0x5d6>
100015d8:	4664      	mov	r4, ip
100015da:	e0b8      	b.n	1000174e <__aeabi_dsub+0x1d6>
100015dc:	2701      	movs	r7, #1
100015de:	406f      	eors	r7, r5
100015e0:	9d02      	ldr	r5, [sp, #8]
100015e2:	9700      	str	r7, [sp, #0]
100015e4:	42bd      	cmp	r5, r7
100015e6:	d000      	beq.n	100015ea <__aeabi_dsub+0x72>
100015e8:	e1af      	b.n	1000194a <__aeabi_dsub+0x3d2>
100015ea:	2e00      	cmp	r6, #0
100015ec:	d100      	bne.n	100015f0 <__aeabi_dsub+0x78>
100015ee:	e0f5      	b.n	100017dc <__aeabi_dsub+0x264>
100015f0:	2c00      	cmp	r4, #0
100015f2:	d0f1      	beq.n	100015d8 <__aeabi_dsub+0x60>
100015f4:	9903      	ldr	r1, [sp, #12]
100015f6:	0008      	movs	r0, r1
100015f8:	e02f      	b.n	1000165a <__aeabi_dsub+0xe2>
100015fa:	2601      	movs	r6, #1
100015fc:	4075      	eors	r5, r6
100015fe:	9500      	str	r5, [sp, #0]
10001600:	4665      	mov	r5, ip
10001602:	9f02      	ldr	r7, [sp, #8]
10001604:	9e00      	ldr	r6, [sp, #0]
10001606:	1b65      	subs	r5, r4, r5
10001608:	42b7      	cmp	r7, r6
1000160a:	d000      	beq.n	1000160e <__aeabi_dsub+0x96>
1000160c:	e12e      	b.n	1000186c <__aeabi_dsub+0x2f4>
1000160e:	2d00      	cmp	r5, #0
10001610:	dc00      	bgt.n	10001614 <__aeabi_dsub+0x9c>
10001612:	e076      	b.n	10001702 <__aeabi_dsub+0x18a>
10001614:	4667      	mov	r7, ip
10001616:	2f00      	cmp	r7, #0
10001618:	d121      	bne.n	1000165e <__aeabi_dsub+0xe6>
1000161a:	001f      	movs	r7, r3
1000161c:	4317      	orrs	r7, r2
1000161e:	d100      	bne.n	10001622 <__aeabi_dsub+0xaa>
10001620:	e122      	b.n	10001868 <__aeabi_dsub+0x2f0>
10001622:	1e6f      	subs	r7, r5, #1
10001624:	2d01      	cmp	r5, #1
10001626:	d115      	bne.n	10001654 <__aeabi_dsub+0xdc>
10001628:	1882      	adds	r2, r0, r2
1000162a:	4282      	cmp	r2, r0
1000162c:	4180      	sbcs	r0, r0
1000162e:	18c9      	adds	r1, r1, r3
10001630:	4240      	negs	r0, r0
10001632:	1809      	adds	r1, r1, r0
10001634:	2401      	movs	r4, #1
10001636:	0010      	movs	r0, r2
10001638:	020b      	lsls	r3, r1, #8
1000163a:	d400      	bmi.n	1000163e <__aeabi_dsub+0xc6>
1000163c:	e096      	b.n	1000176c <__aeabi_dsub+0x1f4>
1000163e:	2402      	movs	r4, #2
10001640:	4b99      	ldr	r3, [pc, #612]	; (100018a8 <__aeabi_dsub+0x330>)
10001642:	0842      	lsrs	r2, r0, #1
10001644:	400b      	ands	r3, r1
10001646:	2101      	movs	r1, #1
10001648:	4001      	ands	r1, r0
1000164a:	430a      	orrs	r2, r1
1000164c:	07d8      	lsls	r0, r3, #31
1000164e:	4310      	orrs	r0, r2
10001650:	0859      	lsrs	r1, r3, #1
10001652:	e08b      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001654:	4e92      	ldr	r6, [pc, #584]	; (100018a0 <__aeabi_dsub+0x328>)
10001656:	42b5      	cmp	r5, r6
10001658:	d122      	bne.n	100016a0 <__aeabi_dsub+0x128>
1000165a:	4c91      	ldr	r4, [pc, #580]	; (100018a0 <__aeabi_dsub+0x328>)
1000165c:	e086      	b.n	1000176c <__aeabi_dsub+0x1f4>
1000165e:	4e90      	ldr	r6, [pc, #576]	; (100018a0 <__aeabi_dsub+0x328>)
10001660:	42b4      	cmp	r4, r6
10001662:	d100      	bne.n	10001666 <__aeabi_dsub+0xee>
10001664:	e082      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001666:	2600      	movs	r6, #0
10001668:	46b4      	mov	ip, r6
1000166a:	3601      	adds	r6, #1
1000166c:	2d38      	cmp	r5, #56	; 0x38
1000166e:	dc1a      	bgt.n	100016a6 <__aeabi_dsub+0x12e>
10001670:	2680      	movs	r6, #128	; 0x80
10001672:	002f      	movs	r7, r5
10001674:	0436      	lsls	r6, r6, #16
10001676:	4333      	orrs	r3, r6
10001678:	2f1f      	cmp	r7, #31
1000167a:	dc31      	bgt.n	100016e0 <__aeabi_dsub+0x168>
1000167c:	2520      	movs	r5, #32
1000167e:	001e      	movs	r6, r3
10001680:	1bed      	subs	r5, r5, r7
10001682:	40ae      	lsls	r6, r5
10001684:	46b4      	mov	ip, r6
10001686:	0016      	movs	r6, r2
10001688:	9500      	str	r5, [sp, #0]
1000168a:	40fe      	lsrs	r6, r7
1000168c:	4665      	mov	r5, ip
1000168e:	432e      	orrs	r6, r5
10001690:	9d00      	ldr	r5, [sp, #0]
10001692:	40fb      	lsrs	r3, r7
10001694:	40aa      	lsls	r2, r5
10001696:	1e55      	subs	r5, r2, #1
10001698:	41aa      	sbcs	r2, r5
1000169a:	4316      	orrs	r6, r2
1000169c:	469c      	mov	ip, r3
1000169e:	e002      	b.n	100016a6 <__aeabi_dsub+0x12e>
100016a0:	2601      	movs	r6, #1
100016a2:	2f38      	cmp	r7, #56	; 0x38
100016a4:	dde8      	ble.n	10001678 <__aeabi_dsub+0x100>
100016a6:	1836      	adds	r6, r6, r0
100016a8:	4286      	cmp	r6, r0
100016aa:	4180      	sbcs	r0, r0
100016ac:	4461      	add	r1, ip
100016ae:	4240      	negs	r0, r0
100016b0:	1809      	adds	r1, r1, r0
100016b2:	0030      	movs	r0, r6
100016b4:	020b      	lsls	r3, r1, #8
100016b6:	d559      	bpl.n	1000176c <__aeabi_dsub+0x1f4>
100016b8:	2600      	movs	r6, #0
100016ba:	4b79      	ldr	r3, [pc, #484]	; (100018a0 <__aeabi_dsub+0x328>)
100016bc:	3401      	adds	r4, #1
100016be:	46b4      	mov	ip, r6
100016c0:	429c      	cmp	r4, r3
100016c2:	d1bd      	bne.n	10001640 <__aeabi_dsub+0xc8>
100016c4:	4b79      	ldr	r3, [pc, #484]	; (100018ac <__aeabi_dsub+0x334>)
100016c6:	0524      	lsls	r4, r4, #20
100016c8:	401c      	ands	r4, r3
100016ca:	4663      	mov	r3, ip
100016cc:	031b      	lsls	r3, r3, #12
100016ce:	0b1b      	lsrs	r3, r3, #12
100016d0:	431c      	orrs	r4, r3
100016d2:	9b02      	ldr	r3, [sp, #8]
100016d4:	0030      	movs	r0, r6
100016d6:	07db      	lsls	r3, r3, #31
100016d8:	431c      	orrs	r4, r3
100016da:	0021      	movs	r1, r4
100016dc:	b005      	add	sp, #20
100016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100016e0:	003d      	movs	r5, r7
100016e2:	001e      	movs	r6, r3
100016e4:	3d20      	subs	r5, #32
100016e6:	40ee      	lsrs	r6, r5
100016e8:	2500      	movs	r5, #0
100016ea:	2f20      	cmp	r7, #32
100016ec:	d003      	beq.n	100016f6 <__aeabi_dsub+0x17e>
100016ee:	3540      	adds	r5, #64	; 0x40
100016f0:	1bed      	subs	r5, r5, r7
100016f2:	40ab      	lsls	r3, r5
100016f4:	001d      	movs	r5, r3
100016f6:	4315      	orrs	r5, r2
100016f8:	1e6b      	subs	r3, r5, #1
100016fa:	419d      	sbcs	r5, r3
100016fc:	2300      	movs	r3, #0
100016fe:	432e      	orrs	r6, r5
10001700:	e7cc      	b.n	1000169c <__aeabi_dsub+0x124>
10001702:	2d00      	cmp	r5, #0
10001704:	d06a      	beq.n	100017dc <__aeabi_dsub+0x264>
10001706:	4665      	mov	r5, ip
10001708:	1b2d      	subs	r5, r5, r4
1000170a:	2c00      	cmp	r4, #0
1000170c:	d01e      	beq.n	1000174c <__aeabi_dsub+0x1d4>
1000170e:	2400      	movs	r4, #0
10001710:	2601      	movs	r6, #1
10001712:	2d38      	cmp	r5, #56	; 0x38
10001714:	dc12      	bgt.n	1000173c <__aeabi_dsub+0x1c4>
10001716:	2480      	movs	r4, #128	; 0x80
10001718:	0424      	lsls	r4, r4, #16
1000171a:	4321      	orrs	r1, r4
1000171c:	2d1f      	cmp	r5, #31
1000171e:	dc4b      	bgt.n	100017b8 <__aeabi_dsub+0x240>
10001720:	2420      	movs	r4, #32
10001722:	000f      	movs	r7, r1
10001724:	0006      	movs	r6, r0
10001726:	1b64      	subs	r4, r4, r5
10001728:	40a0      	lsls	r0, r4
1000172a:	40a7      	lsls	r7, r4
1000172c:	40ee      	lsrs	r6, r5
1000172e:	4337      	orrs	r7, r6
10001730:	0006      	movs	r6, r0
10001732:	40e9      	lsrs	r1, r5
10001734:	1e70      	subs	r0, r6, #1
10001736:	4186      	sbcs	r6, r0
10001738:	000c      	movs	r4, r1
1000173a:	433e      	orrs	r6, r7
1000173c:	18b0      	adds	r0, r6, r2
1000173e:	4290      	cmp	r0, r2
10001740:	4192      	sbcs	r2, r2
10001742:	18e4      	adds	r4, r4, r3
10001744:	4252      	negs	r2, r2
10001746:	18a1      	adds	r1, r4, r2
10001748:	4664      	mov	r4, ip
1000174a:	e7b3      	b.n	100016b4 <__aeabi_dsub+0x13c>
1000174c:	002c      	movs	r4, r5
1000174e:	000d      	movs	r5, r1
10001750:	4305      	orrs	r5, r0
10001752:	d029      	beq.n	100017a8 <__aeabi_dsub+0x230>
10001754:	1e65      	subs	r5, r4, #1
10001756:	2c01      	cmp	r4, #1
10001758:	d123      	bne.n	100017a2 <__aeabi_dsub+0x22a>
1000175a:	1880      	adds	r0, r0, r2
1000175c:	4290      	cmp	r0, r2
1000175e:	4192      	sbcs	r2, r2
10001760:	18c9      	adds	r1, r1, r3
10001762:	4252      	negs	r2, r2
10001764:	1889      	adds	r1, r1, r2
10001766:	020b      	lsls	r3, r1, #8
10001768:	d500      	bpl.n	1000176c <__aeabi_dsub+0x1f4>
1000176a:	e768      	b.n	1000163e <__aeabi_dsub+0xc6>
1000176c:	0743      	lsls	r3, r0, #29
1000176e:	d009      	beq.n	10001784 <__aeabi_dsub+0x20c>
10001770:	230f      	movs	r3, #15
10001772:	4003      	ands	r3, r0
10001774:	2b04      	cmp	r3, #4
10001776:	d005      	beq.n	10001784 <__aeabi_dsub+0x20c>
10001778:	1d03      	adds	r3, r0, #4
1000177a:	4283      	cmp	r3, r0
1000177c:	4180      	sbcs	r0, r0
1000177e:	4240      	negs	r0, r0
10001780:	1809      	adds	r1, r1, r0
10001782:	0018      	movs	r0, r3
10001784:	020b      	lsls	r3, r1, #8
10001786:	d400      	bmi.n	1000178a <__aeabi_dsub+0x212>
10001788:	e1e4      	b.n	10001b54 <__aeabi_dsub+0x5dc>
1000178a:	2600      	movs	r6, #0
1000178c:	4b44      	ldr	r3, [pc, #272]	; (100018a0 <__aeabi_dsub+0x328>)
1000178e:	3401      	adds	r4, #1
10001790:	46b4      	mov	ip, r6
10001792:	429c      	cmp	r4, r3
10001794:	d096      	beq.n	100016c4 <__aeabi_dsub+0x14c>
10001796:	4b44      	ldr	r3, [pc, #272]	; (100018a8 <__aeabi_dsub+0x330>)
10001798:	08c0      	lsrs	r0, r0, #3
1000179a:	400b      	ands	r3, r1
1000179c:	075e      	lsls	r6, r3, #29
1000179e:	4306      	orrs	r6, r0
100017a0:	e1cd      	b.n	10001b3e <__aeabi_dsub+0x5c6>
100017a2:	4e3f      	ldr	r6, [pc, #252]	; (100018a0 <__aeabi_dsub+0x328>)
100017a4:	42b4      	cmp	r4, r6
100017a6:	d102      	bne.n	100017ae <__aeabi_dsub+0x236>
100017a8:	0019      	movs	r1, r3
100017aa:	0010      	movs	r0, r2
100017ac:	e7de      	b.n	1000176c <__aeabi_dsub+0x1f4>
100017ae:	2d38      	cmp	r5, #56	; 0x38
100017b0:	ddb4      	ble.n	1000171c <__aeabi_dsub+0x1a4>
100017b2:	2400      	movs	r4, #0
100017b4:	2601      	movs	r6, #1
100017b6:	e7c1      	b.n	1000173c <__aeabi_dsub+0x1c4>
100017b8:	002c      	movs	r4, r5
100017ba:	000e      	movs	r6, r1
100017bc:	3c20      	subs	r4, #32
100017be:	40e6      	lsrs	r6, r4
100017c0:	0034      	movs	r4, r6
100017c2:	2600      	movs	r6, #0
100017c4:	2d20      	cmp	r5, #32
100017c6:	d003      	beq.n	100017d0 <__aeabi_dsub+0x258>
100017c8:	3640      	adds	r6, #64	; 0x40
100017ca:	1b76      	subs	r6, r6, r5
100017cc:	40b1      	lsls	r1, r6
100017ce:	000e      	movs	r6, r1
100017d0:	4306      	orrs	r6, r0
100017d2:	1e71      	subs	r1, r6, #1
100017d4:	418e      	sbcs	r6, r1
100017d6:	4326      	orrs	r6, r4
100017d8:	2400      	movs	r4, #0
100017da:	e7af      	b.n	1000173c <__aeabi_dsub+0x1c4>
100017dc:	4e34      	ldr	r6, [pc, #208]	; (100018b0 <__aeabi_dsub+0x338>)
100017de:	1c65      	adds	r5, r4, #1
100017e0:	4235      	tst	r5, r6
100017e2:	d133      	bne.n	1000184c <__aeabi_dsub+0x2d4>
100017e4:	000d      	movs	r5, r1
100017e6:	4305      	orrs	r5, r0
100017e8:	2c00      	cmp	r4, #0
100017ea:	d111      	bne.n	10001810 <__aeabi_dsub+0x298>
100017ec:	2d00      	cmp	r5, #0
100017ee:	d0db      	beq.n	100017a8 <__aeabi_dsub+0x230>
100017f0:	001d      	movs	r5, r3
100017f2:	4315      	orrs	r5, r2
100017f4:	d0ba      	beq.n	1000176c <__aeabi_dsub+0x1f4>
100017f6:	1882      	adds	r2, r0, r2
100017f8:	4282      	cmp	r2, r0
100017fa:	4180      	sbcs	r0, r0
100017fc:	18c9      	adds	r1, r1, r3
100017fe:	4240      	negs	r0, r0
10001800:	1809      	adds	r1, r1, r0
10001802:	0010      	movs	r0, r2
10001804:	020b      	lsls	r3, r1, #8
10001806:	d5b1      	bpl.n	1000176c <__aeabi_dsub+0x1f4>
10001808:	4b27      	ldr	r3, [pc, #156]	; (100018a8 <__aeabi_dsub+0x330>)
1000180a:	3401      	adds	r4, #1
1000180c:	4019      	ands	r1, r3
1000180e:	e7ad      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001810:	2d00      	cmp	r5, #0
10001812:	d100      	bne.n	10001816 <__aeabi_dsub+0x29e>
10001814:	e19b      	b.n	10001b4e <__aeabi_dsub+0x5d6>
10001816:	001c      	movs	r4, r3
10001818:	4314      	orrs	r4, r2
1000181a:	2c00      	cmp	r4, #0
1000181c:	d100      	bne.n	10001820 <__aeabi_dsub+0x2a8>
1000181e:	e71c      	b.n	1000165a <__aeabi_dsub+0xe2>
10001820:	074c      	lsls	r4, r1, #29
10001822:	08c0      	lsrs	r0, r0, #3
10001824:	4320      	orrs	r0, r4
10001826:	2480      	movs	r4, #128	; 0x80
10001828:	08c9      	lsrs	r1, r1, #3
1000182a:	0324      	lsls	r4, r4, #12
1000182c:	4221      	tst	r1, r4
1000182e:	d008      	beq.n	10001842 <__aeabi_dsub+0x2ca>
10001830:	08dd      	lsrs	r5, r3, #3
10001832:	4225      	tst	r5, r4
10001834:	d105      	bne.n	10001842 <__aeabi_dsub+0x2ca>
10001836:	0029      	movs	r1, r5
10001838:	075b      	lsls	r3, r3, #29
1000183a:	08d0      	lsrs	r0, r2, #3
1000183c:	4318      	orrs	r0, r3
1000183e:	9b00      	ldr	r3, [sp, #0]
10001840:	9302      	str	r3, [sp, #8]
10001842:	00cb      	lsls	r3, r1, #3
10001844:	0f41      	lsrs	r1, r0, #29
10001846:	4319      	orrs	r1, r3
10001848:	00c0      	lsls	r0, r0, #3
1000184a:	e706      	b.n	1000165a <__aeabi_dsub+0xe2>
1000184c:	4c14      	ldr	r4, [pc, #80]	; (100018a0 <__aeabi_dsub+0x328>)
1000184e:	42a5      	cmp	r5, r4
10001850:	d100      	bne.n	10001854 <__aeabi_dsub+0x2dc>
10001852:	e196      	b.n	10001b82 <__aeabi_dsub+0x60a>
10001854:	1882      	adds	r2, r0, r2
10001856:	4282      	cmp	r2, r0
10001858:	4180      	sbcs	r0, r0
1000185a:	18cb      	adds	r3, r1, r3
1000185c:	4240      	negs	r0, r0
1000185e:	181b      	adds	r3, r3, r0
10001860:	07d8      	lsls	r0, r3, #31
10001862:	0852      	lsrs	r2, r2, #1
10001864:	4310      	orrs	r0, r2
10001866:	0859      	lsrs	r1, r3, #1
10001868:	002c      	movs	r4, r5
1000186a:	e77f      	b.n	1000176c <__aeabi_dsub+0x1f4>
1000186c:	2d00      	cmp	r5, #0
1000186e:	dd76      	ble.n	1000195e <__aeabi_dsub+0x3e6>
10001870:	4666      	mov	r6, ip
10001872:	2e00      	cmp	r6, #0
10001874:	d12e      	bne.n	100018d4 <__aeabi_dsub+0x35c>
10001876:	001f      	movs	r7, r3
10001878:	4317      	orrs	r7, r2
1000187a:	d0f5      	beq.n	10001868 <__aeabi_dsub+0x2f0>
1000187c:	1e6f      	subs	r7, r5, #1
1000187e:	2d01      	cmp	r5, #1
10001880:	d118      	bne.n	100018b4 <__aeabi_dsub+0x33c>
10001882:	1a82      	subs	r2, r0, r2
10001884:	4290      	cmp	r0, r2
10001886:	4180      	sbcs	r0, r0
10001888:	1ac9      	subs	r1, r1, r3
1000188a:	4240      	negs	r0, r0
1000188c:	1a09      	subs	r1, r1, r0
1000188e:	2401      	movs	r4, #1
10001890:	0010      	movs	r0, r2
10001892:	020b      	lsls	r3, r1, #8
10001894:	d400      	bmi.n	10001898 <__aeabi_dsub+0x320>
10001896:	e769      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001898:	0249      	lsls	r1, r1, #9
1000189a:	0006      	movs	r6, r0
1000189c:	0a4d      	lsrs	r5, r1, #9
1000189e:	e102      	b.n	10001aa6 <__aeabi_dsub+0x52e>
100018a0:	000007ff 	.word	0x000007ff
100018a4:	fffff801 	.word	0xfffff801
100018a8:	ff7fffff 	.word	0xff7fffff
100018ac:	7ff00000 	.word	0x7ff00000
100018b0:	000007fe 	.word	0x000007fe
100018b4:	4eb7      	ldr	r6, [pc, #732]	; (10001b94 <__aeabi_dsub+0x61c>)
100018b6:	42b5      	cmp	r5, r6
100018b8:	d100      	bne.n	100018bc <__aeabi_dsub+0x344>
100018ba:	e6ce      	b.n	1000165a <__aeabi_dsub+0xe2>
100018bc:	2601      	movs	r6, #1
100018be:	2f38      	cmp	r7, #56	; 0x38
100018c0:	dd15      	ble.n	100018ee <__aeabi_dsub+0x376>
100018c2:	1b86      	subs	r6, r0, r6
100018c4:	4663      	mov	r3, ip
100018c6:	42b0      	cmp	r0, r6
100018c8:	4180      	sbcs	r0, r0
100018ca:	1ac9      	subs	r1, r1, r3
100018cc:	4240      	negs	r0, r0
100018ce:	1a09      	subs	r1, r1, r0
100018d0:	0030      	movs	r0, r6
100018d2:	e7de      	b.n	10001892 <__aeabi_dsub+0x31a>
100018d4:	4eaf      	ldr	r6, [pc, #700]	; (10001b94 <__aeabi_dsub+0x61c>)
100018d6:	42b4      	cmp	r4, r6
100018d8:	d100      	bne.n	100018dc <__aeabi_dsub+0x364>
100018da:	e747      	b.n	1000176c <__aeabi_dsub+0x1f4>
100018dc:	2600      	movs	r6, #0
100018de:	46b4      	mov	ip, r6
100018e0:	3601      	adds	r6, #1
100018e2:	2d38      	cmp	r5, #56	; 0x38
100018e4:	dced      	bgt.n	100018c2 <__aeabi_dsub+0x34a>
100018e6:	2680      	movs	r6, #128	; 0x80
100018e8:	002f      	movs	r7, r5
100018ea:	0436      	lsls	r6, r6, #16
100018ec:	4333      	orrs	r3, r6
100018ee:	2f1f      	cmp	r7, #31
100018f0:	dc11      	bgt.n	10001916 <__aeabi_dsub+0x39e>
100018f2:	2520      	movs	r5, #32
100018f4:	001e      	movs	r6, r3
100018f6:	1bed      	subs	r5, r5, r7
100018f8:	40ae      	lsls	r6, r5
100018fa:	46b4      	mov	ip, r6
100018fc:	0016      	movs	r6, r2
100018fe:	9500      	str	r5, [sp, #0]
10001900:	40fe      	lsrs	r6, r7
10001902:	4665      	mov	r5, ip
10001904:	432e      	orrs	r6, r5
10001906:	9d00      	ldr	r5, [sp, #0]
10001908:	40fb      	lsrs	r3, r7
1000190a:	40aa      	lsls	r2, r5
1000190c:	1e55      	subs	r5, r2, #1
1000190e:	41aa      	sbcs	r2, r5
10001910:	4316      	orrs	r6, r2
10001912:	469c      	mov	ip, r3
10001914:	e7d5      	b.n	100018c2 <__aeabi_dsub+0x34a>
10001916:	003d      	movs	r5, r7
10001918:	001e      	movs	r6, r3
1000191a:	3d20      	subs	r5, #32
1000191c:	40ee      	lsrs	r6, r5
1000191e:	2500      	movs	r5, #0
10001920:	2f20      	cmp	r7, #32
10001922:	d003      	beq.n	1000192c <__aeabi_dsub+0x3b4>
10001924:	3540      	adds	r5, #64	; 0x40
10001926:	1bed      	subs	r5, r5, r7
10001928:	40ab      	lsls	r3, r5
1000192a:	001d      	movs	r5, r3
1000192c:	4315      	orrs	r5, r2
1000192e:	1e6b      	subs	r3, r5, #1
10001930:	419d      	sbcs	r5, r3
10001932:	2300      	movs	r3, #0
10001934:	432e      	orrs	r6, r5
10001936:	e7ec      	b.n	10001912 <__aeabi_dsub+0x39a>
10001938:	2e00      	cmp	r6, #0
1000193a:	d067      	beq.n	10001a0c <__aeabi_dsub+0x494>
1000193c:	2c00      	cmp	r4, #0
1000193e:	d025      	beq.n	1000198c <__aeabi_dsub+0x414>
10001940:	0019      	movs	r1, r3
10001942:	0010      	movs	r0, r2
10001944:	4c93      	ldr	r4, [pc, #588]	; (10001b94 <__aeabi_dsub+0x61c>)
10001946:	9502      	str	r5, [sp, #8]
10001948:	e710      	b.n	1000176c <__aeabi_dsub+0x1f4>
1000194a:	2e00      	cmp	r6, #0
1000194c:	d05e      	beq.n	10001a0c <__aeabi_dsub+0x494>
1000194e:	2c00      	cmp	r4, #0
10001950:	d01f      	beq.n	10001992 <__aeabi_dsub+0x41a>
10001952:	9903      	ldr	r1, [sp, #12]
10001954:	4c8f      	ldr	r4, [pc, #572]	; (10001b94 <__aeabi_dsub+0x61c>)
10001956:	0008      	movs	r0, r1
10001958:	9b00      	ldr	r3, [sp, #0]
1000195a:	9302      	str	r3, [sp, #8]
1000195c:	e706      	b.n	1000176c <__aeabi_dsub+0x1f4>
1000195e:	2d00      	cmp	r5, #0
10001960:	d054      	beq.n	10001a0c <__aeabi_dsub+0x494>
10001962:	4665      	mov	r5, ip
10001964:	1b2d      	subs	r5, r5, r4
10001966:	2c00      	cmp	r4, #0
10001968:	d11f      	bne.n	100019aa <__aeabi_dsub+0x432>
1000196a:	9c00      	ldr	r4, [sp, #0]
1000196c:	9402      	str	r4, [sp, #8]
1000196e:	002c      	movs	r4, r5
10001970:	000d      	movs	r5, r1
10001972:	4305      	orrs	r5, r0
10001974:	d100      	bne.n	10001978 <__aeabi_dsub+0x400>
10001976:	e717      	b.n	100017a8 <__aeabi_dsub+0x230>
10001978:	1e65      	subs	r5, r4, #1
1000197a:	2c01      	cmp	r4, #1
1000197c:	d10c      	bne.n	10001998 <__aeabi_dsub+0x420>
1000197e:	1a10      	subs	r0, r2, r0
10001980:	4282      	cmp	r2, r0
10001982:	4192      	sbcs	r2, r2
10001984:	1a59      	subs	r1, r3, r1
10001986:	4252      	negs	r2, r2
10001988:	1a89      	subs	r1, r1, r2
1000198a:	e782      	b.n	10001892 <__aeabi_dsub+0x31a>
1000198c:	9502      	str	r5, [sp, #8]
1000198e:	4664      	mov	r4, ip
10001990:	e7ee      	b.n	10001970 <__aeabi_dsub+0x3f8>
10001992:	9c00      	ldr	r4, [sp, #0]
10001994:	9402      	str	r4, [sp, #8]
10001996:	e7fa      	b.n	1000198e <__aeabi_dsub+0x416>
10001998:	4e7e      	ldr	r6, [pc, #504]	; (10001b94 <__aeabi_dsub+0x61c>)
1000199a:	42b4      	cmp	r4, r6
1000199c:	d100      	bne.n	100019a0 <__aeabi_dsub+0x428>
1000199e:	e703      	b.n	100017a8 <__aeabi_dsub+0x230>
100019a0:	2d38      	cmp	r5, #56	; 0x38
100019a2:	dd09      	ble.n	100019b8 <__aeabi_dsub+0x440>
100019a4:	2100      	movs	r1, #0
100019a6:	2601      	movs	r6, #1
100019a8:	e014      	b.n	100019d4 <__aeabi_dsub+0x45c>
100019aa:	2d38      	cmp	r5, #56	; 0x38
100019ac:	dc2b      	bgt.n	10001a06 <__aeabi_dsub+0x48e>
100019ae:	2480      	movs	r4, #128	; 0x80
100019b0:	0424      	lsls	r4, r4, #16
100019b2:	4321      	orrs	r1, r4
100019b4:	9c00      	ldr	r4, [sp, #0]
100019b6:	9402      	str	r4, [sp, #8]
100019b8:	2d1f      	cmp	r5, #31
100019ba:	dc13      	bgt.n	100019e4 <__aeabi_dsub+0x46c>
100019bc:	2420      	movs	r4, #32
100019be:	000f      	movs	r7, r1
100019c0:	1b64      	subs	r4, r4, r5
100019c2:	0006      	movs	r6, r0
100019c4:	40a0      	lsls	r0, r4
100019c6:	40a7      	lsls	r7, r4
100019c8:	40ee      	lsrs	r6, r5
100019ca:	1e44      	subs	r4, r0, #1
100019cc:	41a0      	sbcs	r0, r4
100019ce:	40e9      	lsrs	r1, r5
100019d0:	433e      	orrs	r6, r7
100019d2:	4306      	orrs	r6, r0
100019d4:	1b90      	subs	r0, r2, r6
100019d6:	4282      	cmp	r2, r0
100019d8:	4192      	sbcs	r2, r2
100019da:	1a59      	subs	r1, r3, r1
100019dc:	4252      	negs	r2, r2
100019de:	4664      	mov	r4, ip
100019e0:	1a89      	subs	r1, r1, r2
100019e2:	e756      	b.n	10001892 <__aeabi_dsub+0x31a>
100019e4:	002c      	movs	r4, r5
100019e6:	000e      	movs	r6, r1
100019e8:	3c20      	subs	r4, #32
100019ea:	40e6      	lsrs	r6, r4
100019ec:	2400      	movs	r4, #0
100019ee:	2d20      	cmp	r5, #32
100019f0:	d003      	beq.n	100019fa <__aeabi_dsub+0x482>
100019f2:	3440      	adds	r4, #64	; 0x40
100019f4:	1b64      	subs	r4, r4, r5
100019f6:	40a1      	lsls	r1, r4
100019f8:	000c      	movs	r4, r1
100019fa:	4304      	orrs	r4, r0
100019fc:	1e61      	subs	r1, r4, #1
100019fe:	418c      	sbcs	r4, r1
10001a00:	2100      	movs	r1, #0
10001a02:	4326      	orrs	r6, r4
10001a04:	e7e6      	b.n	100019d4 <__aeabi_dsub+0x45c>
10001a06:	9900      	ldr	r1, [sp, #0]
10001a08:	9102      	str	r1, [sp, #8]
10001a0a:	e7cb      	b.n	100019a4 <__aeabi_dsub+0x42c>
10001a0c:	4e62      	ldr	r6, [pc, #392]	; (10001b98 <__aeabi_dsub+0x620>)
10001a0e:	1c65      	adds	r5, r4, #1
10001a10:	4235      	tst	r5, r6
10001a12:	d138      	bne.n	10001a86 <__aeabi_dsub+0x50e>
10001a14:	001d      	movs	r5, r3
10001a16:	4315      	orrs	r5, r2
10001a18:	46ac      	mov	ip, r5
10001a1a:	000d      	movs	r5, r1
10001a1c:	4305      	orrs	r5, r0
10001a1e:	2c00      	cmp	r4, #0
10001a20:	d125      	bne.n	10001a6e <__aeabi_dsub+0x4f6>
10001a22:	2d00      	cmp	r5, #0
10001a24:	d108      	bne.n	10001a38 <__aeabi_dsub+0x4c0>
10001a26:	4661      	mov	r1, ip
10001a28:	0026      	movs	r6, r4
10001a2a:	9402      	str	r4, [sp, #8]
10001a2c:	2900      	cmp	r1, #0
10001a2e:	d100      	bne.n	10001a32 <__aeabi_dsub+0x4ba>
10001a30:	e648      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001a32:	0019      	movs	r1, r3
10001a34:	0010      	movs	r0, r2
10001a36:	e78f      	b.n	10001958 <__aeabi_dsub+0x3e0>
10001a38:	4665      	mov	r5, ip
10001a3a:	2d00      	cmp	r5, #0
10001a3c:	d100      	bne.n	10001a40 <__aeabi_dsub+0x4c8>
10001a3e:	e695      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001a40:	1a86      	subs	r6, r0, r2
10001a42:	42b0      	cmp	r0, r6
10001a44:	41bf      	sbcs	r7, r7
10001a46:	1acd      	subs	r5, r1, r3
10001a48:	427f      	negs	r7, r7
10001a4a:	1bed      	subs	r5, r5, r7
10001a4c:	022f      	lsls	r7, r5, #8
10001a4e:	d506      	bpl.n	10001a5e <__aeabi_dsub+0x4e6>
10001a50:	1a10      	subs	r0, r2, r0
10001a52:	4282      	cmp	r2, r0
10001a54:	4192      	sbcs	r2, r2
10001a56:	1a59      	subs	r1, r3, r1
10001a58:	4252      	negs	r2, r2
10001a5a:	1a89      	subs	r1, r1, r2
10001a5c:	e77c      	b.n	10001958 <__aeabi_dsub+0x3e0>
10001a5e:	0033      	movs	r3, r6
10001a60:	432b      	orrs	r3, r5
10001a62:	469c      	mov	ip, r3
10001a64:	d100      	bne.n	10001a68 <__aeabi_dsub+0x4f0>
10001a66:	e08f      	b.n	10001b88 <__aeabi_dsub+0x610>
10001a68:	0029      	movs	r1, r5
10001a6a:	0030      	movs	r0, r6
10001a6c:	e67e      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001a6e:	2d00      	cmp	r5, #0
10001a70:	d107      	bne.n	10001a82 <__aeabi_dsub+0x50a>
10001a72:	4661      	mov	r1, ip
10001a74:	2900      	cmp	r1, #0
10001a76:	d07a      	beq.n	10001b6e <__aeabi_dsub+0x5f6>
10001a78:	0019      	movs	r1, r3
10001a7a:	9b00      	ldr	r3, [sp, #0]
10001a7c:	0010      	movs	r0, r2
10001a7e:	9302      	str	r3, [sp, #8]
10001a80:	e5eb      	b.n	1000165a <__aeabi_dsub+0xe2>
10001a82:	4664      	mov	r4, ip
10001a84:	e6c9      	b.n	1000181a <__aeabi_dsub+0x2a2>
10001a86:	1a86      	subs	r6, r0, r2
10001a88:	42b0      	cmp	r0, r6
10001a8a:	41bf      	sbcs	r7, r7
10001a8c:	1acd      	subs	r5, r1, r3
10001a8e:	427f      	negs	r7, r7
10001a90:	1bed      	subs	r5, r5, r7
10001a92:	022f      	lsls	r7, r5, #8
10001a94:	d528      	bpl.n	10001ae8 <__aeabi_dsub+0x570>
10001a96:	1a16      	subs	r6, r2, r0
10001a98:	42b2      	cmp	r2, r6
10001a9a:	4192      	sbcs	r2, r2
10001a9c:	1a5b      	subs	r3, r3, r1
10001a9e:	4252      	negs	r2, r2
10001aa0:	1a9d      	subs	r5, r3, r2
10001aa2:	9b00      	ldr	r3, [sp, #0]
10001aa4:	9302      	str	r3, [sp, #8]
10001aa6:	2d00      	cmp	r5, #0
10001aa8:	d026      	beq.n	10001af8 <__aeabi_dsub+0x580>
10001aaa:	0028      	movs	r0, r5
10001aac:	f7fe fc2c 	bl	10000308 <__clzsi2>
10001ab0:	0003      	movs	r3, r0
10001ab2:	3b08      	subs	r3, #8
10001ab4:	2220      	movs	r2, #32
10001ab6:	0031      	movs	r1, r6
10001ab8:	1ad2      	subs	r2, r2, r3
10001aba:	409d      	lsls	r5, r3
10001abc:	40d1      	lsrs	r1, r2
10001abe:	4329      	orrs	r1, r5
10001ac0:	0035      	movs	r5, r6
10001ac2:	409d      	lsls	r5, r3
10001ac4:	429c      	cmp	r4, r3
10001ac6:	dc3d      	bgt.n	10001b44 <__aeabi_dsub+0x5cc>
10001ac8:	1b1a      	subs	r2, r3, r4
10001aca:	3201      	adds	r2, #1
10001acc:	2320      	movs	r3, #32
10001ace:	0008      	movs	r0, r1
10001ad0:	1a9b      	subs	r3, r3, r2
10001ad2:	002c      	movs	r4, r5
10001ad4:	409d      	lsls	r5, r3
10001ad6:	4098      	lsls	r0, r3
10001ad8:	40d4      	lsrs	r4, r2
10001ada:	1e6b      	subs	r3, r5, #1
10001adc:	419d      	sbcs	r5, r3
10001ade:	40d1      	lsrs	r1, r2
10001ae0:	4320      	orrs	r0, r4
10001ae2:	4328      	orrs	r0, r5
10001ae4:	2400      	movs	r4, #0
10001ae6:	e641      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001ae8:	0033      	movs	r3, r6
10001aea:	432b      	orrs	r3, r5
10001aec:	469c      	mov	ip, r3
10001aee:	d1da      	bne.n	10001aa6 <__aeabi_dsub+0x52e>
10001af0:	001e      	movs	r6, r3
10001af2:	001c      	movs	r4, r3
10001af4:	9302      	str	r3, [sp, #8]
10001af6:	e5e5      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001af8:	0030      	movs	r0, r6
10001afa:	f7fe fc05 	bl	10000308 <__clzsi2>
10001afe:	0003      	movs	r3, r0
10001b00:	3318      	adds	r3, #24
10001b02:	2b1f      	cmp	r3, #31
10001b04:	ddd6      	ble.n	10001ab4 <__aeabi_dsub+0x53c>
10001b06:	0031      	movs	r1, r6
10001b08:	3808      	subs	r0, #8
10001b0a:	4081      	lsls	r1, r0
10001b0c:	429c      	cmp	r4, r3
10001b0e:	dc12      	bgt.n	10001b36 <__aeabi_dsub+0x5be>
10001b10:	1b1b      	subs	r3, r3, r4
10001b12:	1c5a      	adds	r2, r3, #1
10001b14:	2a1f      	cmp	r2, #31
10001b16:	ddd9      	ble.n	10001acc <__aeabi_dsub+0x554>
10001b18:	000c      	movs	r4, r1
10001b1a:	3b1f      	subs	r3, #31
10001b1c:	40dc      	lsrs	r4, r3
10001b1e:	0028      	movs	r0, r5
10001b20:	2a20      	cmp	r2, #32
10001b22:	d003      	beq.n	10001b2c <__aeabi_dsub+0x5b4>
10001b24:	2340      	movs	r3, #64	; 0x40
10001b26:	1a9b      	subs	r3, r3, r2
10001b28:	4099      	lsls	r1, r3
10001b2a:	0008      	movs	r0, r1
10001b2c:	1e43      	subs	r3, r0, #1
10001b2e:	4198      	sbcs	r0, r3
10001b30:	2100      	movs	r1, #0
10001b32:	4320      	orrs	r0, r4
10001b34:	e7d6      	b.n	10001ae4 <__aeabi_dsub+0x56c>
10001b36:	1ae4      	subs	r4, r4, r3
10001b38:	4b18      	ldr	r3, [pc, #96]	; (10001b9c <__aeabi_dsub+0x624>)
10001b3a:	400b      	ands	r3, r1
10001b3c:	075e      	lsls	r6, r3, #29
10001b3e:	08db      	lsrs	r3, r3, #3
10001b40:	469c      	mov	ip, r3
10001b42:	e5bf      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001b44:	1ae4      	subs	r4, r4, r3
10001b46:	4b15      	ldr	r3, [pc, #84]	; (10001b9c <__aeabi_dsub+0x624>)
10001b48:	0028      	movs	r0, r5
10001b4a:	4019      	ands	r1, r3
10001b4c:	e60e      	b.n	1000176c <__aeabi_dsub+0x1f4>
10001b4e:	0019      	movs	r1, r3
10001b50:	0010      	movs	r0, r2
10001b52:	e582      	b.n	1000165a <__aeabi_dsub+0xe2>
10001b54:	074b      	lsls	r3, r1, #29
10001b56:	08c0      	lsrs	r0, r0, #3
10001b58:	4303      	orrs	r3, r0
10001b5a:	469c      	mov	ip, r3
10001b5c:	4b0d      	ldr	r3, [pc, #52]	; (10001b94 <__aeabi_dsub+0x61c>)
10001b5e:	4666      	mov	r6, ip
10001b60:	08c9      	lsrs	r1, r1, #3
10001b62:	429c      	cmp	r4, r3
10001b64:	d113      	bne.n	10001b8e <__aeabi_dsub+0x616>
10001b66:	430e      	orrs	r6, r1
10001b68:	d104      	bne.n	10001b74 <__aeabi_dsub+0x5fc>
10001b6a:	46b4      	mov	ip, r6
10001b6c:	e5aa      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001b6e:	9102      	str	r1, [sp, #8]
10001b70:	2180      	movs	r1, #128	; 0x80
10001b72:	0309      	lsls	r1, r1, #12
10001b74:	2380      	movs	r3, #128	; 0x80
10001b76:	031b      	lsls	r3, r3, #12
10001b78:	430b      	orrs	r3, r1
10001b7a:	4666      	mov	r6, ip
10001b7c:	4c05      	ldr	r4, [pc, #20]	; (10001b94 <__aeabi_dsub+0x61c>)
10001b7e:	469c      	mov	ip, r3
10001b80:	e5a0      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001b82:	2600      	movs	r6, #0
10001b84:	4c03      	ldr	r4, [pc, #12]	; (10001b94 <__aeabi_dsub+0x61c>)
10001b86:	e7f0      	b.n	10001b6a <__aeabi_dsub+0x5f2>
10001b88:	0026      	movs	r6, r4
10001b8a:	9402      	str	r4, [sp, #8]
10001b8c:	e59a      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001b8e:	468c      	mov	ip, r1
10001b90:	e598      	b.n	100016c4 <__aeabi_dsub+0x14c>
10001b92:	46c0      	nop			; (mov r8, r8)
10001b94:	000007ff 	.word	0x000007ff
10001b98:	000007fe 	.word	0x000007fe
10001b9c:	ff7fffff 	.word	0xff7fffff

10001ba0 <__aeabi_i2d>:
10001ba0:	b570      	push	{r4, r5, r6, lr}
10001ba2:	0003      	movs	r3, r0
10001ba4:	0002      	movs	r2, r0
10001ba6:	0006      	movs	r6, r0
10001ba8:	1e05      	subs	r5, r0, #0
10001baa:	d011      	beq.n	10001bd0 <__aeabi_i2d+0x30>
10001bac:	17c2      	asrs	r2, r0, #31
10001bae:	1885      	adds	r5, r0, r2
10001bb0:	4055      	eors	r5, r2
10001bb2:	0fc4      	lsrs	r4, r0, #31
10001bb4:	0028      	movs	r0, r5
10001bb6:	f7fe fba7 	bl	10000308 <__clzsi2>
10001bba:	4a0d      	ldr	r2, [pc, #52]	; (10001bf0 <__aeabi_i2d+0x50>)
10001bbc:	1a12      	subs	r2, r2, r0
10001bbe:	280a      	cmp	r0, #10
10001bc0:	dc0f      	bgt.n	10001be2 <__aeabi_i2d+0x42>
10001bc2:	230b      	movs	r3, #11
10001bc4:	002e      	movs	r6, r5
10001bc6:	1a1b      	subs	r3, r3, r0
10001bc8:	3015      	adds	r0, #21
10001bca:	40de      	lsrs	r6, r3
10001bcc:	4085      	lsls	r5, r0
10001bce:	0023      	movs	r3, r4
10001bd0:	0336      	lsls	r6, r6, #12
10001bd2:	0b36      	lsrs	r6, r6, #12
10001bd4:	0512      	lsls	r2, r2, #20
10001bd6:	4332      	orrs	r2, r6
10001bd8:	07db      	lsls	r3, r3, #31
10001bda:	431a      	orrs	r2, r3
10001bdc:	0028      	movs	r0, r5
10001bde:	0011      	movs	r1, r2
10001be0:	bd70      	pop	{r4, r5, r6, pc}
10001be2:	380b      	subs	r0, #11
10001be4:	4085      	lsls	r5, r0
10001be6:	0023      	movs	r3, r4
10001be8:	002e      	movs	r6, r5
10001bea:	2500      	movs	r5, #0
10001bec:	e7f0      	b.n	10001bd0 <__aeabi_i2d+0x30>
10001bee:	46c0      	nop			; (mov r8, r8)
10001bf0:	0000041e 	.word	0x0000041e

10001bf4 <__aeabi_ui2d>:
10001bf4:	b510      	push	{r4, lr}
10001bf6:	0003      	movs	r3, r0
10001bf8:	0004      	movs	r4, r0
10001bfa:	1e02      	subs	r2, r0, #0
10001bfc:	d00c      	beq.n	10001c18 <__aeabi_ui2d+0x24>
10001bfe:	f7fe fb83 	bl	10000308 <__clzsi2>
10001c02:	4a0b      	ldr	r2, [pc, #44]	; (10001c30 <__aeabi_ui2d+0x3c>)
10001c04:	1a12      	subs	r2, r2, r0
10001c06:	280a      	cmp	r0, #10
10001c08:	dc0d      	bgt.n	10001c26 <__aeabi_ui2d+0x32>
10001c0a:	230b      	movs	r3, #11
10001c0c:	0021      	movs	r1, r4
10001c0e:	1a1b      	subs	r3, r3, r0
10001c10:	40d9      	lsrs	r1, r3
10001c12:	3015      	adds	r0, #21
10001c14:	000b      	movs	r3, r1
10001c16:	4084      	lsls	r4, r0
10001c18:	031b      	lsls	r3, r3, #12
10001c1a:	0b1b      	lsrs	r3, r3, #12
10001c1c:	0512      	lsls	r2, r2, #20
10001c1e:	431a      	orrs	r2, r3
10001c20:	0020      	movs	r0, r4
10001c22:	0011      	movs	r1, r2
10001c24:	bd10      	pop	{r4, pc}
10001c26:	0023      	movs	r3, r4
10001c28:	380b      	subs	r0, #11
10001c2a:	4083      	lsls	r3, r0
10001c2c:	2400      	movs	r4, #0
10001c2e:	e7f3      	b.n	10001c18 <__aeabi_ui2d+0x24>
10001c30:	0000041e 	.word	0x0000041e

10001c34 <__aeabi_f2d>:
10001c34:	22fe      	movs	r2, #254	; 0xfe
10001c36:	b570      	push	{r4, r5, r6, lr}
10001c38:	0044      	lsls	r4, r0, #1
10001c3a:	0e24      	lsrs	r4, r4, #24
10001c3c:	0243      	lsls	r3, r0, #9
10001c3e:	1c61      	adds	r1, r4, #1
10001c40:	0a5d      	lsrs	r5, r3, #9
10001c42:	0fc6      	lsrs	r6, r0, #31
10001c44:	4211      	tst	r1, r2
10001c46:	d00d      	beq.n	10001c64 <__aeabi_f2d+0x30>
10001c48:	22e0      	movs	r2, #224	; 0xe0
10001c4a:	0092      	lsls	r2, r2, #2
10001c4c:	18a4      	adds	r4, r4, r2
10001c4e:	0b1b      	lsrs	r3, r3, #12
10001c50:	076d      	lsls	r5, r5, #29
10001c52:	031b      	lsls	r3, r3, #12
10001c54:	0b1b      	lsrs	r3, r3, #12
10001c56:	0524      	lsls	r4, r4, #20
10001c58:	07f6      	lsls	r6, r6, #31
10001c5a:	431c      	orrs	r4, r3
10001c5c:	4334      	orrs	r4, r6
10001c5e:	0028      	movs	r0, r5
10001c60:	0021      	movs	r1, r4
10001c62:	bd70      	pop	{r4, r5, r6, pc}
10001c64:	2c00      	cmp	r4, #0
10001c66:	d118      	bne.n	10001c9a <__aeabi_f2d+0x66>
10001c68:	0023      	movs	r3, r4
10001c6a:	2d00      	cmp	r5, #0
10001c6c:	d0f1      	beq.n	10001c52 <__aeabi_f2d+0x1e>
10001c6e:	0028      	movs	r0, r5
10001c70:	f7fe fb4a 	bl	10000308 <__clzsi2>
10001c74:	280a      	cmp	r0, #10
10001c76:	dc0a      	bgt.n	10001c8e <__aeabi_f2d+0x5a>
10001c78:	230b      	movs	r3, #11
10001c7a:	002a      	movs	r2, r5
10001c7c:	1a1b      	subs	r3, r3, r0
10001c7e:	40da      	lsrs	r2, r3
10001c80:	0013      	movs	r3, r2
10001c82:	0002      	movs	r2, r0
10001c84:	3215      	adds	r2, #21
10001c86:	4095      	lsls	r5, r2
10001c88:	4c09      	ldr	r4, [pc, #36]	; (10001cb0 <__aeabi_f2d+0x7c>)
10001c8a:	1a24      	subs	r4, r4, r0
10001c8c:	e7e1      	b.n	10001c52 <__aeabi_f2d+0x1e>
10001c8e:	0003      	movs	r3, r0
10001c90:	3b0b      	subs	r3, #11
10001c92:	409d      	lsls	r5, r3
10001c94:	002b      	movs	r3, r5
10001c96:	0025      	movs	r5, r4
10001c98:	e7f6      	b.n	10001c88 <__aeabi_f2d+0x54>
10001c9a:	2d00      	cmp	r5, #0
10001c9c:	d006      	beq.n	10001cac <__aeabi_f2d+0x78>
10001c9e:	0b1a      	lsrs	r2, r3, #12
10001ca0:	2380      	movs	r3, #128	; 0x80
10001ca2:	031b      	lsls	r3, r3, #12
10001ca4:	076d      	lsls	r5, r5, #29
10001ca6:	4313      	orrs	r3, r2
10001ca8:	4c02      	ldr	r4, [pc, #8]	; (10001cb4 <__aeabi_f2d+0x80>)
10001caa:	e7d2      	b.n	10001c52 <__aeabi_f2d+0x1e>
10001cac:	002b      	movs	r3, r5
10001cae:	e7fb      	b.n	10001ca8 <__aeabi_f2d+0x74>
10001cb0:	00000389 	.word	0x00000389
10001cb4:	000007ff 	.word	0x000007ff

10001cb8 <__aeabi_d2f>:
10001cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001cba:	030b      	lsls	r3, r1, #12
10001cbc:	004a      	lsls	r2, r1, #1
10001cbe:	0a5b      	lsrs	r3, r3, #9
10001cc0:	0f46      	lsrs	r6, r0, #29
10001cc2:	0d52      	lsrs	r2, r2, #21
10001cc4:	431e      	orrs	r6, r3
10001cc6:	1c53      	adds	r3, r2, #1
10001cc8:	469c      	mov	ip, r3
10001cca:	0004      	movs	r4, r0
10001ccc:	00c7      	lsls	r7, r0, #3
10001cce:	483c      	ldr	r0, [pc, #240]	; (10001dc0 <__aeabi_d2f+0x108>)
10001cd0:	0fc9      	lsrs	r1, r1, #31
10001cd2:	4003      	ands	r3, r0
10001cd4:	9301      	str	r3, [sp, #4]
10001cd6:	4663      	mov	r3, ip
10001cd8:	4203      	tst	r3, r0
10001cda:	d049      	beq.n	10001d70 <__aeabi_d2f+0xb8>
10001cdc:	4b39      	ldr	r3, [pc, #228]	; (10001dc4 <__aeabi_d2f+0x10c>)
10001cde:	18d0      	adds	r0, r2, r3
10001ce0:	28fe      	cmp	r0, #254	; 0xfe
10001ce2:	dc68      	bgt.n	10001db6 <__aeabi_d2f+0xfe>
10001ce4:	2800      	cmp	r0, #0
10001ce6:	dc37      	bgt.n	10001d58 <__aeabi_d2f+0xa0>
10001ce8:	0003      	movs	r3, r0
10001cea:	3317      	adds	r3, #23
10001cec:	db65      	blt.n	10001dba <__aeabi_d2f+0x102>
10001cee:	2480      	movs	r4, #128	; 0x80
10001cf0:	251e      	movs	r5, #30
10001cf2:	0424      	lsls	r4, r4, #16
10001cf4:	4334      	orrs	r4, r6
10001cf6:	1a2d      	subs	r5, r5, r0
10001cf8:	2d1f      	cmp	r5, #31
10001cfa:	dc10      	bgt.n	10001d1e <__aeabi_d2f+0x66>
10001cfc:	4b32      	ldr	r3, [pc, #200]	; (10001dc8 <__aeabi_d2f+0x110>)
10001cfe:	18d2      	adds	r2, r2, r3
10001d00:	003b      	movs	r3, r7
10001d02:	4097      	lsls	r7, r2
10001d04:	4094      	lsls	r4, r2
10001d06:	1e78      	subs	r0, r7, #1
10001d08:	4187      	sbcs	r7, r0
10001d0a:	40eb      	lsrs	r3, r5
10001d0c:	4327      	orrs	r7, r4
10001d0e:	433b      	orrs	r3, r7
10001d10:	2407      	movs	r4, #7
10001d12:	001a      	movs	r2, r3
10001d14:	4022      	ands	r2, r4
10001d16:	4223      	tst	r3, r4
10001d18:	d13b      	bne.n	10001d92 <__aeabi_d2f+0xda>
10001d1a:	08db      	lsrs	r3, r3, #3
10001d1c:	e032      	b.n	10001d84 <__aeabi_d2f+0xcc>
10001d1e:	2302      	movs	r3, #2
10001d20:	425b      	negs	r3, r3
10001d22:	1a1b      	subs	r3, r3, r0
10001d24:	0020      	movs	r0, r4
10001d26:	40d8      	lsrs	r0, r3
10001d28:	0003      	movs	r3, r0
10001d2a:	2000      	movs	r0, #0
10001d2c:	2d20      	cmp	r5, #32
10001d2e:	d003      	beq.n	10001d38 <__aeabi_d2f+0x80>
10001d30:	4826      	ldr	r0, [pc, #152]	; (10001dcc <__aeabi_d2f+0x114>)
10001d32:	1812      	adds	r2, r2, r0
10001d34:	0020      	movs	r0, r4
10001d36:	4090      	lsls	r0, r2
10001d38:	4338      	orrs	r0, r7
10001d3a:	1e42      	subs	r2, r0, #1
10001d3c:	4190      	sbcs	r0, r2
10001d3e:	4303      	orrs	r3, r0
10001d40:	2407      	movs	r4, #7
10001d42:	001a      	movs	r2, r3
10001d44:	4022      	ands	r2, r4
10001d46:	4223      	tst	r3, r4
10001d48:	d0e7      	beq.n	10001d1a <__aeabi_d2f+0x62>
10001d4a:	220f      	movs	r2, #15
10001d4c:	401a      	ands	r2, r3
10001d4e:	2a04      	cmp	r2, #4
10001d50:	d024      	beq.n	10001d9c <__aeabi_d2f+0xe4>
10001d52:	2000      	movs	r0, #0
10001d54:	3304      	adds	r3, #4
10001d56:	e008      	b.n	10001d6a <__aeabi_d2f+0xb2>
10001d58:	01a4      	lsls	r4, r4, #6
10001d5a:	1e62      	subs	r2, r4, #1
10001d5c:	4194      	sbcs	r4, r2
10001d5e:	00f6      	lsls	r6, r6, #3
10001d60:	0f7b      	lsrs	r3, r7, #29
10001d62:	4334      	orrs	r4, r6
10001d64:	4323      	orrs	r3, r4
10001d66:	075a      	lsls	r2, r3, #29
10001d68:	d11b      	bne.n	10001da2 <__aeabi_d2f+0xea>
10001d6a:	0002      	movs	r2, r0
10001d6c:	08db      	lsrs	r3, r3, #3
10001d6e:	e009      	b.n	10001d84 <__aeabi_d2f+0xcc>
10001d70:	9b01      	ldr	r3, [sp, #4]
10001d72:	2a00      	cmp	r2, #0
10001d74:	d006      	beq.n	10001d84 <__aeabi_d2f+0xcc>
10001d76:	003b      	movs	r3, r7
10001d78:	22ff      	movs	r2, #255	; 0xff
10001d7a:	4333      	orrs	r3, r6
10001d7c:	d002      	beq.n	10001d84 <__aeabi_d2f+0xcc>
10001d7e:	2380      	movs	r3, #128	; 0x80
10001d80:	03db      	lsls	r3, r3, #15
10001d82:	4333      	orrs	r3, r6
10001d84:	025b      	lsls	r3, r3, #9
10001d86:	05d0      	lsls	r0, r2, #23
10001d88:	0a5b      	lsrs	r3, r3, #9
10001d8a:	4318      	orrs	r0, r3
10001d8c:	07c9      	lsls	r1, r1, #31
10001d8e:	4308      	orrs	r0, r1
10001d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001d92:	220f      	movs	r2, #15
10001d94:	2000      	movs	r0, #0
10001d96:	401a      	ands	r2, r3
10001d98:	2a04      	cmp	r2, #4
10001d9a:	d106      	bne.n	10001daa <__aeabi_d2f+0xf2>
10001d9c:	2200      	movs	r2, #0
10001d9e:	08db      	lsrs	r3, r3, #3
10001da0:	e7f0      	b.n	10001d84 <__aeabi_d2f+0xcc>
10001da2:	220f      	movs	r2, #15
10001da4:	401a      	ands	r2, r3
10001da6:	2a04      	cmp	r2, #4
10001da8:	d0df      	beq.n	10001d6a <__aeabi_d2f+0xb2>
10001daa:	3304      	adds	r3, #4
10001dac:	015a      	lsls	r2, r3, #5
10001dae:	d5dc      	bpl.n	10001d6a <__aeabi_d2f+0xb2>
10001db0:	1c42      	adds	r2, r0, #1
10001db2:	2300      	movs	r3, #0
10001db4:	e7e6      	b.n	10001d84 <__aeabi_d2f+0xcc>
10001db6:	22ff      	movs	r2, #255	; 0xff
10001db8:	e7fb      	b.n	10001db2 <__aeabi_d2f+0xfa>
10001dba:	2200      	movs	r2, #0
10001dbc:	0013      	movs	r3, r2
10001dbe:	e7e1      	b.n	10001d84 <__aeabi_d2f+0xcc>
10001dc0:	000007fe 	.word	0x000007fe
10001dc4:	fffffc80 	.word	0xfffffc80
10001dc8:	fffffc82 	.word	0xfffffc82
10001dcc:	fffffca2 	.word	0xfffffca2

10001dd0 <__gnu_thumb1_case_uhi>:
10001dd0:	b403      	push	{r0, r1}
10001dd2:	4671      	mov	r1, lr
10001dd4:	0849      	lsrs	r1, r1, #1
10001dd6:	0040      	lsls	r0, r0, #1
10001dd8:	0049      	lsls	r1, r1, #1
10001dda:	5a09      	ldrh	r1, [r1, r0]
10001ddc:	0049      	lsls	r1, r1, #1
10001dde:	448e      	add	lr, r1
10001de0:	bc03      	pop	{r0, r1}
10001de2:	4770      	bx	lr

10001de4 <__aeabi_llsr>:
10001de4:	40d0      	lsrs	r0, r2
10001de6:	000b      	movs	r3, r1
10001de8:	40d1      	lsrs	r1, r2
10001dea:	469c      	mov	ip, r3
10001dec:	3a20      	subs	r2, #32
10001dee:	40d3      	lsrs	r3, r2
10001df0:	4318      	orrs	r0, r3
10001df2:	4252      	negs	r2, r2
10001df4:	4663      	mov	r3, ip
10001df6:	4093      	lsls	r3, r2
10001df8:	4318      	orrs	r0, r3
10001dfa:	4770      	bx	lr

10001dfc <__aeabi_llsl>:
10001dfc:	4091      	lsls	r1, r2
10001dfe:	0003      	movs	r3, r0
10001e00:	4090      	lsls	r0, r2
10001e02:	469c      	mov	ip, r3
10001e04:	3a20      	subs	r2, #32
10001e06:	4093      	lsls	r3, r2
10001e08:	4319      	orrs	r1, r3
10001e0a:	4252      	negs	r2, r2
10001e0c:	4663      	mov	r3, ip
10001e0e:	40d3      	lsrs	r3, r2
10001e10:	4319      	orrs	r1, r3
10001e12:	4770      	bx	lr

10001e14 <__aeabi_cdrcmple>:
10001e14:	4684      	mov	ip, r0
10001e16:	0010      	movs	r0, r2
10001e18:	4662      	mov	r2, ip
10001e1a:	468c      	mov	ip, r1
10001e1c:	0019      	movs	r1, r3
10001e1e:	4663      	mov	r3, ip
10001e20:	e000      	b.n	10001e24 <__aeabi_cdcmpeq>
10001e22:	46c0      	nop			; (mov r8, r8)

10001e24 <__aeabi_cdcmpeq>:
10001e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10001e26:	f000 f913 	bl	10002050 <__ledf2>
10001e2a:	2800      	cmp	r0, #0
10001e2c:	d401      	bmi.n	10001e32 <__aeabi_cdcmpeq+0xe>
10001e2e:	2100      	movs	r1, #0
10001e30:	42c8      	cmn	r0, r1
10001e32:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10001e34 <__aeabi_dcmpeq>:
10001e34:	b510      	push	{r4, lr}
10001e36:	f000 f853 	bl	10001ee0 <__eqdf2>
10001e3a:	4240      	negs	r0, r0
10001e3c:	3001      	adds	r0, #1
10001e3e:	bd10      	pop	{r4, pc}

10001e40 <__aeabi_dcmplt>:
10001e40:	b510      	push	{r4, lr}
10001e42:	f000 f905 	bl	10002050 <__ledf2>
10001e46:	2800      	cmp	r0, #0
10001e48:	db01      	blt.n	10001e4e <__aeabi_dcmplt+0xe>
10001e4a:	2000      	movs	r0, #0
10001e4c:	bd10      	pop	{r4, pc}
10001e4e:	2001      	movs	r0, #1
10001e50:	bd10      	pop	{r4, pc}
10001e52:	46c0      	nop			; (mov r8, r8)

10001e54 <__aeabi_dcmple>:
10001e54:	b510      	push	{r4, lr}
10001e56:	f000 f8fb 	bl	10002050 <__ledf2>
10001e5a:	2800      	cmp	r0, #0
10001e5c:	dd01      	ble.n	10001e62 <__aeabi_dcmple+0xe>
10001e5e:	2000      	movs	r0, #0
10001e60:	bd10      	pop	{r4, pc}
10001e62:	2001      	movs	r0, #1
10001e64:	bd10      	pop	{r4, pc}
10001e66:	46c0      	nop			; (mov r8, r8)

10001e68 <__aeabi_dcmpgt>:
10001e68:	b510      	push	{r4, lr}
10001e6a:	f000 f87b 	bl	10001f64 <__gedf2>
10001e6e:	2800      	cmp	r0, #0
10001e70:	dc01      	bgt.n	10001e76 <__aeabi_dcmpgt+0xe>
10001e72:	2000      	movs	r0, #0
10001e74:	bd10      	pop	{r4, pc}
10001e76:	2001      	movs	r0, #1
10001e78:	bd10      	pop	{r4, pc}
10001e7a:	46c0      	nop			; (mov r8, r8)

10001e7c <__aeabi_dcmpge>:
10001e7c:	b510      	push	{r4, lr}
10001e7e:	f000 f871 	bl	10001f64 <__gedf2>
10001e82:	2800      	cmp	r0, #0
10001e84:	da01      	bge.n	10001e8a <__aeabi_dcmpge+0xe>
10001e86:	2000      	movs	r0, #0
10001e88:	bd10      	pop	{r4, pc}
10001e8a:	2001      	movs	r0, #1
10001e8c:	bd10      	pop	{r4, pc}
10001e8e:	46c0      	nop			; (mov r8, r8)

10001e90 <__clzdi2>:
10001e90:	b510      	push	{r4, lr}
10001e92:	2900      	cmp	r1, #0
10001e94:	d103      	bne.n	10001e9e <__clzdi2+0xe>
10001e96:	f7fe fa37 	bl	10000308 <__clzsi2>
10001e9a:	3020      	adds	r0, #32
10001e9c:	e002      	b.n	10001ea4 <__clzdi2+0x14>
10001e9e:	0008      	movs	r0, r1
10001ea0:	f7fe fa32 	bl	10000308 <__clzsi2>
10001ea4:	bd10      	pop	{r4, pc}
10001ea6:	46c0      	nop			; (mov r8, r8)

10001ea8 <__aeabi_d2uiz>:
10001ea8:	b570      	push	{r4, r5, r6, lr}
10001eaa:	2200      	movs	r2, #0
10001eac:	4b0b      	ldr	r3, [pc, #44]	; (10001edc <__aeabi_d2uiz+0x34>)
10001eae:	0004      	movs	r4, r0
10001eb0:	000d      	movs	r5, r1
10001eb2:	f7ff ffe3 	bl	10001e7c <__aeabi_dcmpge>
10001eb6:	2800      	cmp	r0, #0
10001eb8:	d00b      	beq.n	10001ed2 <__aeabi_d2uiz+0x2a>
10001eba:	4b08      	ldr	r3, [pc, #32]	; (10001edc <__aeabi_d2uiz+0x34>)
10001ebc:	2200      	movs	r2, #0
10001ebe:	0020      	movs	r0, r4
10001ec0:	0029      	movs	r1, r5
10001ec2:	f7ff fb59 	bl	10001578 <__aeabi_dsub>
10001ec6:	f000 f93b 	bl	10002140 <__aeabi_d2iz>
10001eca:	2380      	movs	r3, #128	; 0x80
10001ecc:	061b      	lsls	r3, r3, #24
10001ece:	18c0      	adds	r0, r0, r3
10001ed0:	bd70      	pop	{r4, r5, r6, pc}
10001ed2:	0020      	movs	r0, r4
10001ed4:	0029      	movs	r1, r5
10001ed6:	f000 f933 	bl	10002140 <__aeabi_d2iz>
10001eda:	e7f9      	b.n	10001ed0 <__aeabi_d2uiz+0x28>
10001edc:	41e00000 	.word	0x41e00000

10001ee0 <__eqdf2>:
10001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ee2:	000d      	movs	r5, r1
10001ee4:	b087      	sub	sp, #28
10001ee6:	9200      	str	r2, [sp, #0]
10001ee8:	9301      	str	r3, [sp, #4]
10001eea:	0004      	movs	r4, r0
10001eec:	9004      	str	r0, [sp, #16]
10001eee:	9801      	ldr	r0, [sp, #4]
10001ef0:	0feb      	lsrs	r3, r5, #31
10001ef2:	0046      	lsls	r6, r0, #1
10001ef4:	0fc7      	lsrs	r7, r0, #31
10001ef6:	481a      	ldr	r0, [pc, #104]	; (10001f60 <__eqdf2+0x80>)
10001ef8:	9303      	str	r3, [sp, #12]
10001efa:	4684      	mov	ip, r0
10001efc:	9b00      	ldr	r3, [sp, #0]
10001efe:	0309      	lsls	r1, r1, #12
10001f00:	9305      	str	r3, [sp, #20]
10001f02:	9b01      	ldr	r3, [sp, #4]
10001f04:	006a      	lsls	r2, r5, #1
10001f06:	031b      	lsls	r3, r3, #12
10001f08:	2001      	movs	r0, #1
10001f0a:	0b09      	lsrs	r1, r1, #12
10001f0c:	0d52      	lsrs	r2, r2, #21
10001f0e:	0b1b      	lsrs	r3, r3, #12
10001f10:	0d76      	lsrs	r6, r6, #21
10001f12:	4562      	cmp	r2, ip
10001f14:	d003      	beq.n	10001f1e <__eqdf2+0x3e>
10001f16:	4566      	cmp	r6, ip
10001f18:	d10d      	bne.n	10001f36 <__eqdf2+0x56>
10001f1a:	b007      	add	sp, #28
10001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f1e:	4296      	cmp	r6, r2
10001f20:	d1fb      	bne.n	10001f1a <__eqdf2+0x3a>
10001f22:	9a00      	ldr	r2, [sp, #0]
10001f24:	430b      	orrs	r3, r1
10001f26:	4313      	orrs	r3, r2
10001f28:	4323      	orrs	r3, r4
10001f2a:	d1f6      	bne.n	10001f1a <__eqdf2+0x3a>
10001f2c:	9b03      	ldr	r3, [sp, #12]
10001f2e:	1bd8      	subs	r0, r3, r7
10001f30:	1e43      	subs	r3, r0, #1
10001f32:	4198      	sbcs	r0, r3
10001f34:	e7f1      	b.n	10001f1a <__eqdf2+0x3a>
10001f36:	2001      	movs	r0, #1
10001f38:	42b2      	cmp	r2, r6
10001f3a:	d1ee      	bne.n	10001f1a <__eqdf2+0x3a>
10001f3c:	4299      	cmp	r1, r3
10001f3e:	d1ec      	bne.n	10001f1a <__eqdf2+0x3a>
10001f40:	9b04      	ldr	r3, [sp, #16]
10001f42:	9e05      	ldr	r6, [sp, #20]
10001f44:	42b3      	cmp	r3, r6
10001f46:	d1e8      	bne.n	10001f1a <__eqdf2+0x3a>
10001f48:	9b03      	ldr	r3, [sp, #12]
10001f4a:	42bb      	cmp	r3, r7
10001f4c:	d006      	beq.n	10001f5c <__eqdf2+0x7c>
10001f4e:	2a00      	cmp	r2, #0
10001f50:	d1e3      	bne.n	10001f1a <__eqdf2+0x3a>
10001f52:	4321      	orrs	r1, r4
10001f54:	1e4b      	subs	r3, r1, #1
10001f56:	4199      	sbcs	r1, r3
10001f58:	0008      	movs	r0, r1
10001f5a:	e7de      	b.n	10001f1a <__eqdf2+0x3a>
10001f5c:	2000      	movs	r0, #0
10001f5e:	e7dc      	b.n	10001f1a <__eqdf2+0x3a>
10001f60:	000007ff 	.word	0x000007ff

10001f64 <__gedf2>:
10001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f66:	b087      	sub	sp, #28
10001f68:	9000      	str	r0, [sp, #0]
10001f6a:	9101      	str	r1, [sp, #4]
10001f6c:	001d      	movs	r5, r3
10001f6e:	9b00      	ldr	r3, [sp, #0]
10001f70:	0014      	movs	r4, r2
10001f72:	9304      	str	r3, [sp, #16]
10001f74:	9b01      	ldr	r3, [sp, #4]
10001f76:	0329      	lsls	r1, r5, #12
10001f78:	031a      	lsls	r2, r3, #12
10001f7a:	0b13      	lsrs	r3, r2, #12
10001f7c:	4a33      	ldr	r2, [pc, #204]	; (1000204c <__gedf2+0xe8>)
10001f7e:	9303      	str	r3, [sp, #12]
10001f80:	4694      	mov	ip, r2
10001f82:	9b01      	ldr	r3, [sp, #4]
10001f84:	0068      	lsls	r0, r5, #1
10001f86:	005f      	lsls	r7, r3, #1
10001f88:	0d7b      	lsrs	r3, r7, #21
10001f8a:	9302      	str	r3, [sp, #8]
10001f8c:	9a02      	ldr	r2, [sp, #8]
10001f8e:	9b01      	ldr	r3, [sp, #4]
10001f90:	9405      	str	r4, [sp, #20]
10001f92:	0fdb      	lsrs	r3, r3, #31
10001f94:	0b09      	lsrs	r1, r1, #12
10001f96:	0d40      	lsrs	r0, r0, #21
10001f98:	0fee      	lsrs	r6, r5, #31
10001f9a:	4562      	cmp	r2, ip
10001f9c:	d112      	bne.n	10001fc4 <__gedf2+0x60>
10001f9e:	9a00      	ldr	r2, [sp, #0]
10001fa0:	9f03      	ldr	r7, [sp, #12]
10001fa2:	4317      	orrs	r7, r2
10001fa4:	d14f      	bne.n	10002046 <__gedf2+0xe2>
10001fa6:	9a02      	ldr	r2, [sp, #8]
10001fa8:	4290      	cmp	r0, r2
10001faa:	d004      	beq.n	10001fb6 <__gedf2+0x52>
10001fac:	2001      	movs	r0, #1
10001fae:	2b00      	cmp	r3, #0
10001fb0:	d006      	beq.n	10001fc0 <__gedf2+0x5c>
10001fb2:	3802      	subs	r0, #2
10001fb4:	e004      	b.n	10001fc0 <__gedf2+0x5c>
10001fb6:	4321      	orrs	r1, r4
10001fb8:	1e08      	subs	r0, r1, #0
10001fba:	d144      	bne.n	10002046 <__gedf2+0xe2>
10001fbc:	42b3      	cmp	r3, r6
10001fbe:	d1f5      	bne.n	10001fac <__gedf2+0x48>
10001fc0:	b007      	add	sp, #28
10001fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001fc4:	4560      	cmp	r0, ip
10001fc6:	d111      	bne.n	10001fec <__gedf2+0x88>
10001fc8:	4321      	orrs	r1, r4
10001fca:	d13c      	bne.n	10002046 <__gedf2+0xe2>
10001fcc:	9a02      	ldr	r2, [sp, #8]
10001fce:	2a00      	cmp	r2, #0
10001fd0:	d004      	beq.n	10001fdc <__gedf2+0x78>
10001fd2:	42b3      	cmp	r3, r6
10001fd4:	d1ea      	bne.n	10001fac <__gedf2+0x48>
10001fd6:	1e18      	subs	r0, r3, #0
10001fd8:	d1f2      	bne.n	10001fc0 <__gedf2+0x5c>
10001fda:	e005      	b.n	10001fe8 <__gedf2+0x84>
10001fdc:	9a00      	ldr	r2, [sp, #0]
10001fde:	9903      	ldr	r1, [sp, #12]
10001fe0:	4311      	orrs	r1, r2
10001fe2:	d1f6      	bne.n	10001fd2 <__gedf2+0x6e>
10001fe4:	1e30      	subs	r0, r6, #0
10001fe6:	d1eb      	bne.n	10001fc0 <__gedf2+0x5c>
10001fe8:	2001      	movs	r0, #1
10001fea:	e02d      	b.n	10002048 <__gedf2+0xe4>
10001fec:	9a02      	ldr	r2, [sp, #8]
10001fee:	2a00      	cmp	r2, #0
10001ff0:	d017      	beq.n	10002022 <__gedf2+0xbe>
10001ff2:	2800      	cmp	r0, #0
10001ff4:	d0da      	beq.n	10001fac <__gedf2+0x48>
10001ff6:	42b3      	cmp	r3, r6
10001ff8:	d1d8      	bne.n	10001fac <__gedf2+0x48>
10001ffa:	9a02      	ldr	r2, [sp, #8]
10001ffc:	4282      	cmp	r2, r0
10001ffe:	dcd5      	bgt.n	10001fac <__gedf2+0x48>
10002000:	9a02      	ldr	r2, [sp, #8]
10002002:	4282      	cmp	r2, r0
10002004:	dbe7      	blt.n	10001fd6 <__gedf2+0x72>
10002006:	9a03      	ldr	r2, [sp, #12]
10002008:	428a      	cmp	r2, r1
1000200a:	d8cf      	bhi.n	10001fac <__gedf2+0x48>
1000200c:	d1e3      	bne.n	10001fd6 <__gedf2+0x72>
1000200e:	9a04      	ldr	r2, [sp, #16]
10002010:	9905      	ldr	r1, [sp, #20]
10002012:	428a      	cmp	r2, r1
10002014:	d8ca      	bhi.n	10001fac <__gedf2+0x48>
10002016:	9a04      	ldr	r2, [sp, #16]
10002018:	9905      	ldr	r1, [sp, #20]
1000201a:	2000      	movs	r0, #0
1000201c:	428a      	cmp	r2, r1
1000201e:	d2cf      	bcs.n	10001fc0 <__gedf2+0x5c>
10002020:	e7d9      	b.n	10001fd6 <__gedf2+0x72>
10002022:	9f00      	ldr	r7, [sp, #0]
10002024:	9a03      	ldr	r2, [sp, #12]
10002026:	4317      	orrs	r7, r2
10002028:	2800      	cmp	r0, #0
1000202a:	d002      	beq.n	10002032 <__gedf2+0xce>
1000202c:	2f00      	cmp	r7, #0
1000202e:	d0d9      	beq.n	10001fe4 <__gedf2+0x80>
10002030:	e7cf      	b.n	10001fd2 <__gedf2+0x6e>
10002032:	430c      	orrs	r4, r1
10002034:	d004      	beq.n	10002040 <__gedf2+0xdc>
10002036:	2f00      	cmp	r7, #0
10002038:	d0d4      	beq.n	10001fe4 <__gedf2+0x80>
1000203a:	42b3      	cmp	r3, r6
1000203c:	d0e3      	beq.n	10002006 <__gedf2+0xa2>
1000203e:	e7b5      	b.n	10001fac <__gedf2+0x48>
10002040:	2f00      	cmp	r7, #0
10002042:	d0bd      	beq.n	10001fc0 <__gedf2+0x5c>
10002044:	e7b2      	b.n	10001fac <__gedf2+0x48>
10002046:	2002      	movs	r0, #2
10002048:	4240      	negs	r0, r0
1000204a:	e7b9      	b.n	10001fc0 <__gedf2+0x5c>
1000204c:	000007ff 	.word	0x000007ff

10002050 <__ledf2>:
10002050:	b5f0      	push	{r4, r5, r6, r7, lr}
10002052:	b087      	sub	sp, #28
10002054:	9000      	str	r0, [sp, #0]
10002056:	9101      	str	r1, [sp, #4]
10002058:	001d      	movs	r5, r3
1000205a:	9b00      	ldr	r3, [sp, #0]
1000205c:	0014      	movs	r4, r2
1000205e:	9304      	str	r3, [sp, #16]
10002060:	9b01      	ldr	r3, [sp, #4]
10002062:	0068      	lsls	r0, r5, #1
10002064:	031a      	lsls	r2, r3, #12
10002066:	0b13      	lsrs	r3, r2, #12
10002068:	4a34      	ldr	r2, [pc, #208]	; (1000213c <__ledf2+0xec>)
1000206a:	9303      	str	r3, [sp, #12]
1000206c:	4694      	mov	ip, r2
1000206e:	9b01      	ldr	r3, [sp, #4]
10002070:	9405      	str	r4, [sp, #20]
10002072:	005f      	lsls	r7, r3, #1
10002074:	0d7b      	lsrs	r3, r7, #21
10002076:	9302      	str	r3, [sp, #8]
10002078:	9b01      	ldr	r3, [sp, #4]
1000207a:	9a02      	ldr	r2, [sp, #8]
1000207c:	0fd9      	lsrs	r1, r3, #31
1000207e:	032b      	lsls	r3, r5, #12
10002080:	0b1b      	lsrs	r3, r3, #12
10002082:	0d40      	lsrs	r0, r0, #21
10002084:	0fee      	lsrs	r6, r5, #31
10002086:	4562      	cmp	r2, ip
10002088:	d113      	bne.n	100020b2 <__ledf2+0x62>
1000208a:	9a00      	ldr	r2, [sp, #0]
1000208c:	9f03      	ldr	r7, [sp, #12]
1000208e:	4317      	orrs	r7, r2
10002090:	d152      	bne.n	10002138 <__ledf2+0xe8>
10002092:	9a02      	ldr	r2, [sp, #8]
10002094:	4290      	cmp	r0, r2
10002096:	d004      	beq.n	100020a2 <__ledf2+0x52>
10002098:	2001      	movs	r0, #1
1000209a:	2900      	cmp	r1, #0
1000209c:	d007      	beq.n	100020ae <__ledf2+0x5e>
1000209e:	3802      	subs	r0, #2
100020a0:	e005      	b.n	100020ae <__ledf2+0x5e>
100020a2:	2002      	movs	r0, #2
100020a4:	4323      	orrs	r3, r4
100020a6:	d102      	bne.n	100020ae <__ledf2+0x5e>
100020a8:	0018      	movs	r0, r3
100020aa:	42b1      	cmp	r1, r6
100020ac:	d1f4      	bne.n	10002098 <__ledf2+0x48>
100020ae:	b007      	add	sp, #28
100020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020b2:	4560      	cmp	r0, ip
100020b4:	d113      	bne.n	100020de <__ledf2+0x8e>
100020b6:	2002      	movs	r0, #2
100020b8:	4323      	orrs	r3, r4
100020ba:	d1f8      	bne.n	100020ae <__ledf2+0x5e>
100020bc:	9b02      	ldr	r3, [sp, #8]
100020be:	2b00      	cmp	r3, #0
100020c0:	d004      	beq.n	100020cc <__ledf2+0x7c>
100020c2:	42b1      	cmp	r1, r6
100020c4:	d1e8      	bne.n	10002098 <__ledf2+0x48>
100020c6:	1e08      	subs	r0, r1, #0
100020c8:	d1f1      	bne.n	100020ae <__ledf2+0x5e>
100020ca:	e005      	b.n	100020d8 <__ledf2+0x88>
100020cc:	9b00      	ldr	r3, [sp, #0]
100020ce:	9a03      	ldr	r2, [sp, #12]
100020d0:	431a      	orrs	r2, r3
100020d2:	d1f6      	bne.n	100020c2 <__ledf2+0x72>
100020d4:	1e30      	subs	r0, r6, #0
100020d6:	d1ea      	bne.n	100020ae <__ledf2+0x5e>
100020d8:	2001      	movs	r0, #1
100020da:	4240      	negs	r0, r0
100020dc:	e7e7      	b.n	100020ae <__ledf2+0x5e>
100020de:	9a02      	ldr	r2, [sp, #8]
100020e0:	2a00      	cmp	r2, #0
100020e2:	d017      	beq.n	10002114 <__ledf2+0xc4>
100020e4:	2800      	cmp	r0, #0
100020e6:	d0d7      	beq.n	10002098 <__ledf2+0x48>
100020e8:	42b1      	cmp	r1, r6
100020ea:	d1d5      	bne.n	10002098 <__ledf2+0x48>
100020ec:	9a02      	ldr	r2, [sp, #8]
100020ee:	4282      	cmp	r2, r0
100020f0:	dcd2      	bgt.n	10002098 <__ledf2+0x48>
100020f2:	9a02      	ldr	r2, [sp, #8]
100020f4:	4282      	cmp	r2, r0
100020f6:	dbe6      	blt.n	100020c6 <__ledf2+0x76>
100020f8:	9a03      	ldr	r2, [sp, #12]
100020fa:	429a      	cmp	r2, r3
100020fc:	d8cc      	bhi.n	10002098 <__ledf2+0x48>
100020fe:	d1e2      	bne.n	100020c6 <__ledf2+0x76>
10002100:	9b04      	ldr	r3, [sp, #16]
10002102:	9a05      	ldr	r2, [sp, #20]
10002104:	4293      	cmp	r3, r2
10002106:	d8c7      	bhi.n	10002098 <__ledf2+0x48>
10002108:	9b04      	ldr	r3, [sp, #16]
1000210a:	9a05      	ldr	r2, [sp, #20]
1000210c:	2000      	movs	r0, #0
1000210e:	4293      	cmp	r3, r2
10002110:	d2cd      	bcs.n	100020ae <__ledf2+0x5e>
10002112:	e7d8      	b.n	100020c6 <__ledf2+0x76>
10002114:	9f00      	ldr	r7, [sp, #0]
10002116:	9a03      	ldr	r2, [sp, #12]
10002118:	4317      	orrs	r7, r2
1000211a:	2800      	cmp	r0, #0
1000211c:	d002      	beq.n	10002124 <__ledf2+0xd4>
1000211e:	2f00      	cmp	r7, #0
10002120:	d0d8      	beq.n	100020d4 <__ledf2+0x84>
10002122:	e7ce      	b.n	100020c2 <__ledf2+0x72>
10002124:	431c      	orrs	r4, r3
10002126:	d004      	beq.n	10002132 <__ledf2+0xe2>
10002128:	2f00      	cmp	r7, #0
1000212a:	d0d3      	beq.n	100020d4 <__ledf2+0x84>
1000212c:	42b1      	cmp	r1, r6
1000212e:	d0e3      	beq.n	100020f8 <__ledf2+0xa8>
10002130:	e7b2      	b.n	10002098 <__ledf2+0x48>
10002132:	2f00      	cmp	r7, #0
10002134:	d0bb      	beq.n	100020ae <__ledf2+0x5e>
10002136:	e7af      	b.n	10002098 <__ledf2+0x48>
10002138:	2002      	movs	r0, #2
1000213a:	e7b8      	b.n	100020ae <__ledf2+0x5e>
1000213c:	000007ff 	.word	0x000007ff

10002140 <__aeabi_d2iz>:
10002140:	000b      	movs	r3, r1
10002142:	b570      	push	{r4, r5, r6, lr}
10002144:	4e11      	ldr	r6, [pc, #68]	; (1000218c <__aeabi_d2iz+0x4c>)
10002146:	030c      	lsls	r4, r1, #12
10002148:	0049      	lsls	r1, r1, #1
1000214a:	0002      	movs	r2, r0
1000214c:	0b24      	lsrs	r4, r4, #12
1000214e:	2000      	movs	r0, #0
10002150:	0d49      	lsrs	r1, r1, #21
10002152:	0fdd      	lsrs	r5, r3, #31
10002154:	42b1      	cmp	r1, r6
10002156:	dd04      	ble.n	10002162 <__aeabi_d2iz+0x22>
10002158:	480d      	ldr	r0, [pc, #52]	; (10002190 <__aeabi_d2iz+0x50>)
1000215a:	4281      	cmp	r1, r0
1000215c:	dd02      	ble.n	10002164 <__aeabi_d2iz+0x24>
1000215e:	4b0d      	ldr	r3, [pc, #52]	; (10002194 <__aeabi_d2iz+0x54>)
10002160:	18e8      	adds	r0, r5, r3
10002162:	bd70      	pop	{r4, r5, r6, pc}
10002164:	2080      	movs	r0, #128	; 0x80
10002166:	0340      	lsls	r0, r0, #13
10002168:	4320      	orrs	r0, r4
1000216a:	4c0b      	ldr	r4, [pc, #44]	; (10002198 <__aeabi_d2iz+0x58>)
1000216c:	1a64      	subs	r4, r4, r1
1000216e:	2c1f      	cmp	r4, #31
10002170:	dc08      	bgt.n	10002184 <__aeabi_d2iz+0x44>
10002172:	4e0a      	ldr	r6, [pc, #40]	; (1000219c <__aeabi_d2iz+0x5c>)
10002174:	40e2      	lsrs	r2, r4
10002176:	1989      	adds	r1, r1, r6
10002178:	4088      	lsls	r0, r1
1000217a:	4310      	orrs	r0, r2
1000217c:	2d00      	cmp	r5, #0
1000217e:	d0f0      	beq.n	10002162 <__aeabi_d2iz+0x22>
10002180:	4240      	negs	r0, r0
10002182:	e7ee      	b.n	10002162 <__aeabi_d2iz+0x22>
10002184:	4b06      	ldr	r3, [pc, #24]	; (100021a0 <__aeabi_d2iz+0x60>)
10002186:	1a5b      	subs	r3, r3, r1
10002188:	40d8      	lsrs	r0, r3
1000218a:	e7f7      	b.n	1000217c <__aeabi_d2iz+0x3c>
1000218c:	000003fe 	.word	0x000003fe
10002190:	0000041d 	.word	0x0000041d
10002194:	7fffffff 	.word	0x7fffffff
10002198:	00000433 	.word	0x00000433
1000219c:	fffffbed 	.word	0xfffffbed
100021a0:	00000413 	.word	0x00000413

100021a4 <__aeabi_dcmpun>:
100021a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100021a6:	001d      	movs	r5, r3
100021a8:	004b      	lsls	r3, r1, #1
100021aa:	0d5b      	lsrs	r3, r3, #21
100021ac:	469c      	mov	ip, r3
100021ae:	4f0b      	ldr	r7, [pc, #44]	; (100021dc <__aeabi_dcmpun+0x38>)
100021b0:	0014      	movs	r4, r2
100021b2:	032b      	lsls	r3, r5, #12
100021b4:	030a      	lsls	r2, r1, #12
100021b6:	006e      	lsls	r6, r5, #1
100021b8:	0b12      	lsrs	r2, r2, #12
100021ba:	0b1b      	lsrs	r3, r3, #12
100021bc:	0d76      	lsrs	r6, r6, #21
100021be:	45bc      	cmp	ip, r7
100021c0:	d103      	bne.n	100021ca <__aeabi_dcmpun+0x26>
100021c2:	4302      	orrs	r2, r0
100021c4:	2001      	movs	r0, #1
100021c6:	2a00      	cmp	r2, #0
100021c8:	d106      	bne.n	100021d8 <__aeabi_dcmpun+0x34>
100021ca:	2000      	movs	r0, #0
100021cc:	42be      	cmp	r6, r7
100021ce:	d103      	bne.n	100021d8 <__aeabi_dcmpun+0x34>
100021d0:	4323      	orrs	r3, r4
100021d2:	0018      	movs	r0, r3
100021d4:	1e43      	subs	r3, r0, #1
100021d6:	4198      	sbcs	r0, r3
100021d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100021da:	46c0      	nop			; (mov r8, r8)
100021dc:	000007ff 	.word	0x000007ff

100021e0 <__aeabi_lmul>:
100021e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021e2:	0c04      	lsrs	r4, r0, #16
100021e4:	000d      	movs	r5, r1
100021e6:	b291      	uxth	r1, r2
100021e8:	000f      	movs	r7, r1
100021ea:	4361      	muls	r1, r4
100021ec:	468c      	mov	ip, r1
100021ee:	0006      	movs	r6, r0
100021f0:	9301      	str	r3, [sp, #4]
100021f2:	b283      	uxth	r3, r0
100021f4:	0c10      	lsrs	r0, r2, #16
100021f6:	435f      	muls	r7, r3
100021f8:	4344      	muls	r4, r0
100021fa:	4358      	muls	r0, r3
100021fc:	0c3b      	lsrs	r3, r7, #16
100021fe:	4460      	add	r0, ip
10002200:	181b      	adds	r3, r3, r0
10002202:	4299      	cmp	r1, r3
10002204:	d902      	bls.n	1000220c <__aeabi_lmul+0x2c>
10002206:	2180      	movs	r1, #128	; 0x80
10002208:	0249      	lsls	r1, r1, #9
1000220a:	1864      	adds	r4, r4, r1
1000220c:	9901      	ldr	r1, [sp, #4]
1000220e:	4355      	muls	r5, r2
10002210:	4371      	muls	r1, r6
10002212:	0c18      	lsrs	r0, r3, #16
10002214:	1904      	adds	r4, r0, r4
10002216:	041b      	lsls	r3, r3, #16
10002218:	b2bf      	uxth	r7, r7
1000221a:	1949      	adds	r1, r1, r5
1000221c:	19d8      	adds	r0, r3, r7
1000221e:	1909      	adds	r1, r1, r4
10002220:	b003      	add	sp, #12
10002222:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002224 <__ffssi2>:
10002224:	b510      	push	{r4, lr}
10002226:	2800      	cmp	r0, #0
10002228:	d002      	beq.n	10002230 <__ffssi2+0xc>
1000222a:	f7fe f88b 	bl	10000344 <__ctzsi2>
1000222e:	3001      	adds	r0, #1
10002230:	bd10      	pop	{r4, pc}

10002232 <__udivmoddi4>:
10002232:	b5f0      	push	{r4, r5, r6, r7, lr}
10002234:	0006      	movs	r6, r0
10002236:	000f      	movs	r7, r1
10002238:	0015      	movs	r5, r2
1000223a:	001c      	movs	r4, r3
1000223c:	b085      	sub	sp, #20
1000223e:	428b      	cmp	r3, r1
10002240:	d863      	bhi.n	1000230a <__udivmoddi4+0xd8>
10002242:	d101      	bne.n	10002248 <__udivmoddi4+0x16>
10002244:	4282      	cmp	r2, r0
10002246:	d860      	bhi.n	1000230a <__udivmoddi4+0xd8>
10002248:	0021      	movs	r1, r4
1000224a:	0028      	movs	r0, r5
1000224c:	f7ff fe20 	bl	10001e90 <__clzdi2>
10002250:	0039      	movs	r1, r7
10002252:	9000      	str	r0, [sp, #0]
10002254:	0030      	movs	r0, r6
10002256:	f7ff fe1b 	bl	10001e90 <__clzdi2>
1000225a:	9b00      	ldr	r3, [sp, #0]
1000225c:	0021      	movs	r1, r4
1000225e:	1a1b      	subs	r3, r3, r0
10002260:	001a      	movs	r2, r3
10002262:	0028      	movs	r0, r5
10002264:	9303      	str	r3, [sp, #12]
10002266:	f7ff fdc9 	bl	10001dfc <__aeabi_llsl>
1000226a:	9000      	str	r0, [sp, #0]
1000226c:	9101      	str	r1, [sp, #4]
1000226e:	42b9      	cmp	r1, r7
10002270:	d845      	bhi.n	100022fe <__udivmoddi4+0xcc>
10002272:	d101      	bne.n	10002278 <__udivmoddi4+0x46>
10002274:	42b0      	cmp	r0, r6
10002276:	d842      	bhi.n	100022fe <__udivmoddi4+0xcc>
10002278:	9b00      	ldr	r3, [sp, #0]
1000227a:	9c01      	ldr	r4, [sp, #4]
1000227c:	2001      	movs	r0, #1
1000227e:	2100      	movs	r1, #0
10002280:	9a03      	ldr	r2, [sp, #12]
10002282:	1af6      	subs	r6, r6, r3
10002284:	41a7      	sbcs	r7, r4
10002286:	f7ff fdb9 	bl	10001dfc <__aeabi_llsl>
1000228a:	0004      	movs	r4, r0
1000228c:	000d      	movs	r5, r1
1000228e:	9b03      	ldr	r3, [sp, #12]
10002290:	2b00      	cmp	r3, #0
10002292:	d02b      	beq.n	100022ec <__udivmoddi4+0xba>
10002294:	9b01      	ldr	r3, [sp, #4]
10002296:	9a00      	ldr	r2, [sp, #0]
10002298:	07db      	lsls	r3, r3, #31
1000229a:	0850      	lsrs	r0, r2, #1
1000229c:	4318      	orrs	r0, r3
1000229e:	9b01      	ldr	r3, [sp, #4]
100022a0:	0859      	lsrs	r1, r3, #1
100022a2:	9b03      	ldr	r3, [sp, #12]
100022a4:	469c      	mov	ip, r3
100022a6:	42b9      	cmp	r1, r7
100022a8:	d82c      	bhi.n	10002304 <__udivmoddi4+0xd2>
100022aa:	d101      	bne.n	100022b0 <__udivmoddi4+0x7e>
100022ac:	42b0      	cmp	r0, r6
100022ae:	d829      	bhi.n	10002304 <__udivmoddi4+0xd2>
100022b0:	0032      	movs	r2, r6
100022b2:	003b      	movs	r3, r7
100022b4:	1a12      	subs	r2, r2, r0
100022b6:	418b      	sbcs	r3, r1
100022b8:	2601      	movs	r6, #1
100022ba:	1892      	adds	r2, r2, r2
100022bc:	415b      	adcs	r3, r3
100022be:	2700      	movs	r7, #0
100022c0:	18b6      	adds	r6, r6, r2
100022c2:	415f      	adcs	r7, r3
100022c4:	2301      	movs	r3, #1
100022c6:	425b      	negs	r3, r3
100022c8:	449c      	add	ip, r3
100022ca:	4663      	mov	r3, ip
100022cc:	2b00      	cmp	r3, #0
100022ce:	d1ea      	bne.n	100022a6 <__udivmoddi4+0x74>
100022d0:	0030      	movs	r0, r6
100022d2:	0039      	movs	r1, r7
100022d4:	9a03      	ldr	r2, [sp, #12]
100022d6:	f7ff fd85 	bl	10001de4 <__aeabi_llsr>
100022da:	9a03      	ldr	r2, [sp, #12]
100022dc:	19a4      	adds	r4, r4, r6
100022de:	417d      	adcs	r5, r7
100022e0:	0006      	movs	r6, r0
100022e2:	000f      	movs	r7, r1
100022e4:	f7ff fd8a 	bl	10001dfc <__aeabi_llsl>
100022e8:	1a24      	subs	r4, r4, r0
100022ea:	418d      	sbcs	r5, r1
100022ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100022ee:	2b00      	cmp	r3, #0
100022f0:	d001      	beq.n	100022f6 <__udivmoddi4+0xc4>
100022f2:	601e      	str	r6, [r3, #0]
100022f4:	605f      	str	r7, [r3, #4]
100022f6:	0020      	movs	r0, r4
100022f8:	0029      	movs	r1, r5
100022fa:	b005      	add	sp, #20
100022fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022fe:	2400      	movs	r4, #0
10002300:	2500      	movs	r5, #0
10002302:	e7c4      	b.n	1000228e <__udivmoddi4+0x5c>
10002304:	19b6      	adds	r6, r6, r6
10002306:	417f      	adcs	r7, r7
10002308:	e7dc      	b.n	100022c4 <__udivmoddi4+0x92>
1000230a:	2400      	movs	r4, #0
1000230c:	2500      	movs	r5, #0
1000230e:	e7ed      	b.n	100022ec <__udivmoddi4+0xba>

10002310 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
10002310:	0003      	movs	r3, r0
10002312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002314:	000a      	movs	r2, r1
	return gpio_pin_configure(spec->port,
				  spec->pin,
10002316:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
10002318:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
1000231a:	6800      	ldr	r0, [r0, #0]
1000231c:	4313      	orrs	r3, r2
	const struct gpio_driver_api *api =
1000231e:	6882      	ldr	r2, [r0, #8]
10002320:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
10002322:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
10002324:	02dc      	lsls	r4, r3, #11
10002326:	d506      	bpl.n	10002336 <gpio_pin_configure_dt+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
10002328:	24c0      	movs	r4, #192	; 0xc0
1000232a:	0324      	lsls	r4, r4, #12
1000232c:	4223      	tst	r3, r4
1000232e:	d002      	beq.n	10002336 <gpio_pin_configure_dt+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10002330:	07dd      	lsls	r5, r3, #31
10002332:	d500      	bpl.n	10002336 <gpio_pin_configure_dt+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
10002334:	4063      	eors	r3, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002336:	2701      	movs	r7, #1
10002338:	003d      	movs	r5, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
1000233a:	4c08      	ldr	r4, [pc, #32]	; (1000235c <gpio_pin_configure_dt+0x4c>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
1000233c:	6816      	ldr	r6, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
1000233e:	401c      	ands	r4, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10002340:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10002342:	9401      	str	r4, [sp, #4]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10002344:	0034      	movs	r4, r6
10002346:	43ac      	bics	r4, r5
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10002348:	423b      	tst	r3, r7
1000234a:	d001      	beq.n	10002350 <gpio_pin_configure_dt+0x40>
		data->invert |= (gpio_port_pins_t)BIT(pin);
1000234c:	0034      	movs	r4, r6
1000234e:	432c      	orrs	r4, r5
	return api->pin_configure(port, pin, flags);
10002350:	4663      	mov	r3, ip
}
10002352:	6014      	str	r4, [r2, #0]
	return api->pin_configure(port, pin, flags);
10002354:	681b      	ldr	r3, [r3, #0]
10002356:	9a01      	ldr	r2, [sp, #4]
10002358:	4798      	blx	r3
}
1000235a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000235c:	ffefffff 	.word	0xffefffff

10002360 <button0_pressed>:
static struct gpio_callback button2_cb_data;
static struct gpio_callback button3_cb_data;

void button0_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10002360:	b510      	push	{r4, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
10002362:	f002 ff97 	bl	10005294 <sys_clock_cycle_get_32>
	printk("Button0 pressed at %" PRIu32 "\n", k_cycle_get_32());
10002366:	4b03      	ldr	r3, [pc, #12]	; (10002374 <button0_pressed+0x14>)
10002368:	0001      	movs	r1, r0
1000236a:	0018      	movs	r0, r3
1000236c:	f00a fd78 	bl	1000ce60 <printk>
}
10002370:	bd10      	pop	{r4, pc}
10002372:	46c0      	nop			; (mov r8, r8)
10002374:	1000ebf2 	.word	0x1000ebf2

10002378 <button1_pressed>:
void button1_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10002378:	b510      	push	{r4, lr}
1000237a:	f002 ff8b 	bl	10005294 <sys_clock_cycle_get_32>
	printk("Button1 pressed at %" PRIu32 "\n", k_cycle_get_32());
1000237e:	4b03      	ldr	r3, [pc, #12]	; (1000238c <button1_pressed+0x14>)
10002380:	0001      	movs	r1, r0
10002382:	0018      	movs	r0, r3
10002384:	f00a fd6c 	bl	1000ce60 <printk>
}
10002388:	bd10      	pop	{r4, pc}
1000238a:	46c0      	nop			; (mov r8, r8)
1000238c:	1000ec09 	.word	0x1000ec09

10002390 <button2_pressed>:
void button2_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
10002390:	b510      	push	{r4, lr}
10002392:	f002 ff7f 	bl	10005294 <sys_clock_cycle_get_32>
	printk("Button2 pressed at %" PRIu32 "\n", k_cycle_get_32());
10002396:	4b03      	ldr	r3, [pc, #12]	; (100023a4 <button2_pressed+0x14>)
10002398:	0001      	movs	r1, r0
1000239a:	0018      	movs	r0, r3
1000239c:	f00a fd60 	bl	1000ce60 <printk>
}
100023a0:	bd10      	pop	{r4, pc}
100023a2:	46c0      	nop			; (mov r8, r8)
100023a4:	1000ec20 	.word	0x1000ec20

100023a8 <button3_pressed>:
void button3_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
100023a8:	b510      	push	{r4, lr}
100023aa:	f002 ff73 	bl	10005294 <sys_clock_cycle_get_32>
	printk("Button3 pressed at %" PRIu32 "\n", k_cycle_get_32());
100023ae:	4b03      	ldr	r3, [pc, #12]	; (100023bc <button3_pressed+0x14>)
100023b0:	0001      	movs	r1, r0
100023b2:	0018      	movs	r0, r3
100023b4:	f00a fd54 	bl	1000ce60 <printk>
}
100023b8:	bd10      	pop	{r4, pc}
100023ba:	46c0      	nop			; (mov r8, r8)
100023bc:	1000ec37 	.word	0x1000ec37

100023c0 <uart_poll_in.constprop.0>:


extern int z_impl_uart_poll_in(const struct device * dev, unsigned char * p_char);

__pinned_func
static inline int uart_poll_in(const struct device * dev, unsigned char * p_char)
100023c0:	b510      	push	{r4, lr}
				      unsigned char *p_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->poll_in == NULL) {
100023c2:	6883      	ldr	r3, [r0, #8]
100023c4:	681b      	ldr	r3, [r3, #0]
100023c6:	2b00      	cmp	r3, #0
100023c8:	d002      	beq.n	100023d0 <uart_poll_in.constprop.0+0x10>
		return -ENOSYS;
	}

	return api->poll_in(dev, p_char);
100023ca:	4903      	ldr	r1, [pc, #12]	; (100023d8 <uart_poll_in.constprop.0+0x18>)
100023cc:	4798      	blx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_UART_POLL_IN);
	}
#endif
	compiler_barrier();
	return z_impl_uart_poll_in(dev, p_char);
}
100023ce:	bd10      	pop	{r4, pc}
		return -ENOSYS;
100023d0:	2058      	movs	r0, #88	; 0x58
100023d2:	4240      	negs	r0, r0
	return z_impl_uart_poll_in(dev, p_char);
100023d4:	e7fb      	b.n	100023ce <uart_poll_in.constprop.0+0xe>
100023d6:	46c0      	nop			; (mov r8, r8)
100023d8:	200024d8 	.word	0x200024d8

100023dc <pwm_set_dt.constprop.0>:
 *
 * @return A value from pwm_set().
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
100023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
100023de:	6843      	ldr	r3, [r0, #4]
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
100023e0:	b089      	sub	sp, #36	; 0x24
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
100023e2:	9302      	str	r3, [sp, #8]
100023e4:	8983      	ldrh	r3, [r0, #12]
100023e6:	6804      	ldr	r4, [r0, #0]
100023e8:	9303      	str	r3, [sp, #12]
	return api->get_cycles_per_sec(dev, channel, cycles);
100023ea:	68a3      	ldr	r3, [r4, #8]
100023ec:	0020      	movs	r0, r4
100023ee:	685b      	ldr	r3, [r3, #4]
100023f0:	9902      	ldr	r1, [sp, #8]
100023f2:	aa06      	add	r2, sp, #24
100023f4:	4798      	blx	r3
	if (err < 0) {
100023f6:	2800      	cmp	r0, #0
100023f8:	db2b      	blt.n	10002452 <pwm_set_dt.constprop.0+0x76>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
100023fa:	9e06      	ldr	r6, [sp, #24]
100023fc:	9f07      	ldr	r7, [sp, #28]
100023fe:	2300      	movs	r3, #0
10002400:	4a17      	ldr	r2, [pc, #92]	; (10002460 <pwm_set_dt.constprop.0+0x84>)
10002402:	0030      	movs	r0, r6
10002404:	0039      	movs	r1, r7
10002406:	f7ff feeb 	bl	100021e0 <__aeabi_lmul>
1000240a:	2300      	movs	r3, #0
1000240c:	4a15      	ldr	r2, [pc, #84]	; (10002464 <pwm_set_dt.constprop.0+0x88>)
1000240e:	9104      	str	r1, [sp, #16]
10002410:	f7fd ffb8 	bl	10000384 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10002414:	9904      	ldr	r1, [sp, #16]
10002416:	4b14      	ldr	r3, [pc, #80]	; (10002468 <pwm_set_dt.constprop.0+0x8c>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002418:	0005      	movs	r5, r0
1000241a:	9005      	str	r0, [sp, #20]
	if (period_cycles > UINT32_MAX) {
1000241c:	4299      	cmp	r1, r3
1000241e:	d81a      	bhi.n	10002456 <pwm_set_dt.constprop.0+0x7a>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10002420:	2300      	movs	r3, #0
10002422:	0039      	movs	r1, r7
10002424:	4a11      	ldr	r2, [pc, #68]	; (1000246c <pwm_set_dt.constprop.0+0x90>)
10002426:	0030      	movs	r0, r6
10002428:	f7ff feda 	bl	100021e0 <__aeabi_lmul>
1000242c:	2300      	movs	r3, #0
1000242e:	4a0d      	ldr	r2, [pc, #52]	; (10002464 <pwm_set_dt.constprop.0+0x88>)
10002430:	000f      	movs	r7, r1
10002432:	f7fd ffa7 	bl	10000384 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10002436:	4a0c      	ldr	r2, [pc, #48]	; (10002468 <pwm_set_dt.constprop.0+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10002438:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
1000243a:	4297      	cmp	r7, r2
1000243c:	d80b      	bhi.n	10002456 <pwm_set_dt.constprop.0+0x7a>
	const struct pwm_driver_api *api =
1000243e:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10002440:	4285      	cmp	r5, r0
10002442:	d30b      	bcc.n	1000245c <pwm_set_dt.constprop.0+0x80>
	return api->set_cycles(dev, channel, period, pulse, flags);
10002444:	9903      	ldr	r1, [sp, #12]
10002446:	0020      	movs	r0, r4
10002448:	9100      	str	r1, [sp, #0]
1000244a:	6816      	ldr	r6, [r2, #0]
1000244c:	9902      	ldr	r1, [sp, #8]
1000244e:	002a      	movs	r2, r5
10002450:	47b0      	blx	r6
}
10002452:	b009      	add	sp, #36	; 0x24
10002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10002456:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10002458:	4240      	negs	r0, r0
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
1000245a:	e7fa      	b.n	10002452 <pwm_set_dt.constprop.0+0x76>
		return -EINVAL;
1000245c:	2016      	movs	r0, #22
1000245e:	e7fb      	b.n	10002458 <pwm_set_dt.constprop.0+0x7c>
10002460:	05f5e100 	.word	0x05f5e100
10002464:	3b9aca00 	.word	0x3b9aca00
10002468:	3b9ac9ff 	.word	0x3b9ac9ff
1000246c:	02faf080 	.word	0x02faf080

10002470 <gpio_add_callback.constprop.0.isra.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
10002470:	b510      	push	{r4, lr}
10002472:	0001      	movs	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
10002474:	4803      	ldr	r0, [pc, #12]	; (10002484 <gpio_add_callback.constprop.0.isra.0+0x14>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
10002476:	6883      	ldr	r3, [r0, #8]
10002478:	69db      	ldr	r3, [r3, #28]
1000247a:	2b00      	cmp	r3, #0
1000247c:	d001      	beq.n	10002482 <gpio_add_callback.constprop.0.isra.0+0x12>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
1000247e:	2201      	movs	r2, #1
10002480:	4798      	blx	r3
}
10002482:	bd10      	pop	{r4, pc}
10002484:	1000e010 	.word	0x1000e010

10002488 <pzem_reading>:
{
10002488:	b570      	push	{r4, r5, r6, lr}
1000248a:	0004      	movs	r4, r0
    if (length == 24 && data[0] == 0x04 && data[1] == 0x14) {
1000248c:	2918      	cmp	r1, #24
1000248e:	d13a      	bne.n	10002506 <pzem_reading+0x7e>
10002490:	7803      	ldrb	r3, [r0, #0]
10002492:	2b04      	cmp	r3, #4
10002494:	d137      	bne.n	10002506 <pzem_reading+0x7e>
10002496:	7843      	ldrb	r3, [r0, #1]
10002498:	2b14      	cmp	r3, #20
1000249a:	d134      	bne.n	10002506 <pzem_reading+0x7e>
        voltage = (data[2] << 8 | data[3]) / 10.0;
1000249c:	7883      	ldrb	r3, [r0, #2]
1000249e:	78c0      	ldrb	r0, [r0, #3]
100024a0:	0200      	lsls	r0, r0, #8
100024a2:	4318      	orrs	r0, r3
100024a4:	ba40      	rev16	r0, r0
100024a6:	b280      	uxth	r0, r0
100024a8:	f7ff fb7a 	bl	10001ba0 <__aeabi_i2d>
100024ac:	2200      	movs	r2, #0
100024ae:	4b16      	ldr	r3, [pc, #88]	; (10002508 <pzem_reading+0x80>)
100024b0:	f7fe fbb6 	bl	10000c20 <__aeabi_ddiv>
100024b4:	f7ff fc00 	bl	10001cb8 <__aeabi_d2f>
100024b8:	4b14      	ldr	r3, [pc, #80]	; (1000250c <pzem_reading+0x84>)
100024ba:	1c05      	adds	r5, r0, #0
100024bc:	6018      	str	r0, [r3, #0]
		current = (data[4] << 8 | data[5] | data[6] << 24 | data[7] << 16) / 1000.0;
100024be:	7920      	ldrb	r0, [r4, #4]
100024c0:	79a3      	ldrb	r3, [r4, #6]
100024c2:	0200      	lsls	r0, r0, #8
100024c4:	061b      	lsls	r3, r3, #24
100024c6:	4318      	orrs	r0, r3
100024c8:	7963      	ldrb	r3, [r4, #5]
100024ca:	4e11      	ldr	r6, [pc, #68]	; (10002510 <pzem_reading+0x88>)
100024cc:	4318      	orrs	r0, r3
100024ce:	79e3      	ldrb	r3, [r4, #7]
100024d0:	041b      	lsls	r3, r3, #16
100024d2:	4318      	orrs	r0, r3
100024d4:	f7ff fb64 	bl	10001ba0 <__aeabi_i2d>
100024d8:	2200      	movs	r2, #0
100024da:	4b0e      	ldr	r3, [pc, #56]	; (10002514 <pzem_reading+0x8c>)
100024dc:	f7fe fba0 	bl	10000c20 <__aeabi_ddiv>
100024e0:	f7ff fbea 	bl	10001cb8 <__aeabi_d2f>
100024e4:	6030      	str	r0, [r6, #0]
        printf("Voltage: %.1f V\n", voltage);
100024e6:	1c28      	adds	r0, r5, #0
100024e8:	f7ff fba4 	bl	10001c34 <__aeabi_f2d>
100024ec:	0002      	movs	r2, r0
100024ee:	000b      	movs	r3, r1
100024f0:	4809      	ldr	r0, [pc, #36]	; (10002518 <pzem_reading+0x90>)
100024f2:	f005 f963 	bl	100077bc <printf>
        printf("Current: %.2f A\n", current);
100024f6:	6830      	ldr	r0, [r6, #0]
100024f8:	f7ff fb9c 	bl	10001c34 <__aeabi_f2d>
100024fc:	0002      	movs	r2, r0
100024fe:	000b      	movs	r3, r1
10002500:	4806      	ldr	r0, [pc, #24]	; (1000251c <pzem_reading+0x94>)
10002502:	f005 f95b 	bl	100077bc <printf>
}
10002506:	bd70      	pop	{r4, r5, r6, pc}
10002508:	40240000 	.word	0x40240000
1000250c:	20002394 	.word	0x20002394
10002510:	20002390 	.word	0x20002390
10002514:	408f4000 	.word	0x408f4000
10002518:	1000ec4e 	.word	0x1000ec4e
1000251c:	1000ec5f 	.word	0x1000ec5f

10002520 <AdcToCelsius>:
// 		}
		
// 	}
}

double AdcToCelsius(uint32_t rawValue){ 
10002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002522:	0004      	movs	r4, r0
    double resistanceNTC = (R2 * (1350 - rawValue)) / rawValue;
10002524:	4822      	ldr	r0, [pc, #136]	; (100025b0 <AdcToCelsius+0x90>)
10002526:	1b00      	subs	r0, r0, r4
10002528:	f7ff fb64 	bl	10001bf4 <__aeabi_ui2d>
1000252c:	4b21      	ldr	r3, [pc, #132]	; (100025b4 <AdcToCelsius+0x94>)
1000252e:	681a      	ldr	r2, [r3, #0]
10002530:	685b      	ldr	r3, [r3, #4]
10002532:	f7fe fdf7 	bl	10001124 <__aeabi_dmul>
10002536:	0006      	movs	r6, r0
10002538:	0020      	movs	r0, r4
1000253a:	000f      	movs	r7, r1
1000253c:	f7ff fb5a 	bl	10001bf4 <__aeabi_ui2d>
10002540:	0002      	movs	r2, r0
10002542:	000b      	movs	r3, r1
10002544:	0030      	movs	r0, r6
10002546:	0039      	movs	r1, r7
10002548:	f7fe fb6a 	bl	10000c20 <__aeabi_ddiv>
    double logNTC = log(resistanceNTC); 
1000254c:	f004 fb84 	bl	10006c58 <log>
    double temp = (1 / (A + (B * logNTC) + (C * logNTC * logNTC * logNTC))) - KELVINCONSTANT; 
10002550:	4b19      	ldr	r3, [pc, #100]	; (100025b8 <AdcToCelsius+0x98>)
    double logNTC = log(resistanceNTC); 
10002552:	000d      	movs	r5, r1
    double temp = (1 / (A + (B * logNTC) + (C * logNTC * logNTC * logNTC))) - KELVINCONSTANT; 
10002554:	681a      	ldr	r2, [r3, #0]
10002556:	685b      	ldr	r3, [r3, #4]
    double logNTC = log(resistanceNTC); 
10002558:	0004      	movs	r4, r0
    double temp = (1 / (A + (B * logNTC) + (C * logNTC * logNTC * logNTC))) - KELVINCONSTANT; 
1000255a:	f7fe fde3 	bl	10001124 <__aeabi_dmul>
1000255e:	4b17      	ldr	r3, [pc, #92]	; (100025bc <AdcToCelsius+0x9c>)
10002560:	681a      	ldr	r2, [r3, #0]
10002562:	685b      	ldr	r3, [r3, #4]
10002564:	f7fe f86c 	bl	10000640 <__aeabi_dadd>
10002568:	4b15      	ldr	r3, [pc, #84]	; (100025c0 <AdcToCelsius+0xa0>)
1000256a:	0006      	movs	r6, r0
1000256c:	681a      	ldr	r2, [r3, #0]
1000256e:	685b      	ldr	r3, [r3, #4]
10002570:	000f      	movs	r7, r1
10002572:	0020      	movs	r0, r4
10002574:	0029      	movs	r1, r5
10002576:	f7fe fdd5 	bl	10001124 <__aeabi_dmul>
1000257a:	002b      	movs	r3, r5
1000257c:	0022      	movs	r2, r4
1000257e:	f7fe fdd1 	bl	10001124 <__aeabi_dmul>
10002582:	002b      	movs	r3, r5
10002584:	0022      	movs	r2, r4
10002586:	f7fe fdcd 	bl	10001124 <__aeabi_dmul>
1000258a:	0002      	movs	r2, r0
1000258c:	000b      	movs	r3, r1
1000258e:	0030      	movs	r0, r6
10002590:	0039      	movs	r1, r7
10002592:	f7fe f855 	bl	10000640 <__aeabi_dadd>
10002596:	0002      	movs	r2, r0
10002598:	000b      	movs	r3, r1
1000259a:	2000      	movs	r0, #0
1000259c:	4909      	ldr	r1, [pc, #36]	; (100025c4 <AdcToCelsius+0xa4>)
1000259e:	f7fe fb3f 	bl	10000c20 <__aeabi_ddiv>
100025a2:	4b09      	ldr	r3, [pc, #36]	; (100025c8 <AdcToCelsius+0xa8>)
100025a4:	681a      	ldr	r2, [r3, #0]
100025a6:	685b      	ldr	r3, [r3, #4]
100025a8:	f7fe ffe6 	bl	10001578 <__aeabi_dsub>

    return temp; 
100025ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100025ae:	46c0      	nop			; (mov r8, r8)
100025b0:	00000546 	.word	0x00000546
100025b4:	20000020 	.word	0x20000020
100025b8:	20000010 	.word	0x20000010
100025bc:	20000018 	.word	0x20000018
100025c0:	20000008 	.word	0x20000008
100025c4:	3ff00000 	.word	0x3ff00000
100025c8:	20000000 	.word	0x20000000

100025cc <main>:
{
100025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	printk("ingresa a 1 \n");
100025ce:	48c5      	ldr	r0, [pc, #788]	; (100028e4 <main+0x318>)
{
100025d0:	b097      	sub	sp, #92	; 0x5c
	printk("ingresa a 1 \n");
100025d2:	f00a fc45 	bl	1000ce60 <printk>
	return device_is_ready(spec->port);
100025d6:	4cc4      	ldr	r4, [pc, #784]	; (100028e8 <main+0x31c>)
100025d8:	0020      	movs	r0, r4
100025da:	f00a fbf0 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&led_placa)) {
100025de:	2800      	cmp	r0, #0
100025e0:	d059      	beq.n	10002696 <main+0xca>
	ret = gpio_pin_configure_dt(&led_placa, GPIO_OUTPUT_ACTIVE);
100025e2:	21d0      	movs	r1, #208	; 0xd0
100025e4:	48c1      	ldr	r0, [pc, #772]	; (100028ec <main+0x320>)
100025e6:	0349      	lsls	r1, r1, #13
100025e8:	f7ff fe92 	bl	10002310 <gpio_pin_configure_dt>
	if (ret < 0) {
100025ec:	2800      	cmp	r0, #0
100025ee:	db52      	blt.n	10002696 <main+0xca>
100025f0:	0020      	movs	r0, r4
100025f2:	f00a fbe4 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&GFCI_test)) {
100025f6:	2800      	cmp	r0, #0
100025f8:	d04d      	beq.n	10002696 <main+0xca>
	ret = gpio_pin_configure_dt(&GFCI_test, GPIO_INPUT);
100025fa:	2180      	movs	r1, #128	; 0x80
100025fc:	48bc      	ldr	r0, [pc, #752]	; (100028f0 <main+0x324>)
100025fe:	0249      	lsls	r1, r1, #9
10002600:	f7ff fe86 	bl	10002310 <gpio_pin_configure_dt>
	if (ret < 0) {
10002604:	2800      	cmp	r0, #0
10002606:	db46      	blt.n	10002696 <main+0xca>
10002608:	0020      	movs	r0, r4
1000260a:	f00a fbd8 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&GFCI_fault)) {
1000260e:	2800      	cmp	r0, #0
10002610:	d041      	beq.n	10002696 <main+0xca>
	ret = gpio_pin_configure_dt(&GFCI_fault, GPIO_INPUT);
10002612:	2180      	movs	r1, #128	; 0x80
10002614:	48b7      	ldr	r0, [pc, #732]	; (100028f4 <main+0x328>)
10002616:	0249      	lsls	r1, r1, #9
10002618:	f7ff fe7a 	bl	10002310 <gpio_pin_configure_dt>
1000261c:	9006      	str	r0, [sp, #24]
	if (ret < 0) {
1000261e:	2800      	cmp	r0, #0
10002620:	db39      	blt.n	10002696 <main+0xca>
	printk("GPIOs configurados correctamente\n");
10002622:	48b5      	ldr	r0, [pc, #724]	; (100028f8 <main+0x32c>)
10002624:	f00a fc1c 	bl	1000ce60 <printk>
	struct adc_sequence sequence = {
10002628:	2214      	movs	r2, #20
1000262a:	2100      	movs	r1, #0
1000262c:	a811      	add	r0, sp, #68	; 0x44
1000262e:	f005 f861 	bl	100076f4 <memset>
10002632:	2316      	movs	r3, #22
10002634:	aa04      	add	r2, sp, #16
10002636:	189b      	adds	r3, r3, r2
10002638:	9313      	str	r3, [sp, #76]	; 0x4c
1000263a:	2302      	movs	r3, #2
		if (!device_is_ready(adc_channels[i].dev)) {
1000263c:	4caf      	ldr	r4, [pc, #700]	; (100028fc <main+0x330>)
	struct adc_sequence sequence = {
1000263e:	9314      	str	r3, [sp, #80]	; 0x50
		if (!device_is_ready(adc_channels[i].dev)) {
10002640:	0020      	movs	r0, r4
10002642:	f00a fbbc 	bl	1000cdbe <device_is_ready>
10002646:	2800      	cmp	r0, #0
10002648:	d00b      	beq.n	10002662 <main+0x96>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
1000264a:	68a5      	ldr	r5, [r4, #8]
1000264c:	0020      	movs	r0, r4
1000264e:	49ac      	ldr	r1, [pc, #688]	; (10002900 <main+0x334>)
10002650:	682b      	ldr	r3, [r5, #0]
10002652:	4798      	blx	r3
10002654:	1e02      	subs	r2, r0, #0
		if (err < 0) {
10002656:	db1a      	blt.n	1000268e <main+0xc2>
		if (!device_is_ready(adc_channels[i].dev)) {
10002658:	0020      	movs	r0, r4
1000265a:	f00a fbb0 	bl	1000cdbe <device_is_ready>
1000265e:	2800      	cmp	r0, #0
10002660:	d103      	bne.n	1000266a <main+0x9e>
			printk("ADC controller device not ready\n");
10002662:	48a8      	ldr	r0, [pc, #672]	; (10002904 <main+0x338>)
		printk("UART device not found!");
10002664:	f00a fbfc 	bl	1000ce60 <printk>
		return 0;
10002668:	e015      	b.n	10002696 <main+0xca>
1000266a:	49a7      	ldr	r1, [pc, #668]	; (10002908 <main+0x33c>)
1000266c:	0020      	movs	r0, r4
1000266e:	682b      	ldr	r3, [r5, #0]
10002670:	4798      	blx	r3
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10002672:	2101      	movs	r1, #1
10002674:	1e02      	subs	r2, r0, #0
		if (err < 0) {
10002676:	db0b      	blt.n	10002690 <main+0xc4>
	printk("ADCs configurados correctamente\n");
10002678:	48a4      	ldr	r0, [pc, #656]	; (1000290c <main+0x340>)
1000267a:	f00a fbf1 	bl	1000ce60 <printk>
	if (!device_is_ready(uart_pzem)) {
1000267e:	4ba4      	ldr	r3, [pc, #656]	; (10002910 <main+0x344>)
10002680:	6818      	ldr	r0, [r3, #0]
10002682:	f00a fb9c 	bl	1000cdbe <device_is_ready>
10002686:	2800      	cmp	r0, #0
10002688:	d107      	bne.n	1000269a <main+0xce>
		printk("UART device not found!");
1000268a:	48a2      	ldr	r0, [pc, #648]	; (10002914 <main+0x348>)
1000268c:	e7ea      	b.n	10002664 <main+0x98>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
1000268e:	2100      	movs	r1, #0
			printk("Could not setup channel #%d (%d)\n", i, err);
10002690:	48a1      	ldr	r0, [pc, #644]	; (10002918 <main+0x34c>)
10002692:	f00a fbe5 	bl	1000ce60 <printk>
}
10002696:	b017      	add	sp, #92	; 0x5c
10002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!device_is_ready(pwm_rele1.dev)) {
1000269a:	4ca0      	ldr	r4, [pc, #640]	; (1000291c <main+0x350>)
1000269c:	0020      	movs	r0, r4
1000269e:	f00a fb8e 	bl	1000cdbe <device_is_ready>
100026a2:	2800      	cmp	r0, #0
100026a4:	d104      	bne.n	100026b0 <main+0xe4>
		printk("Error: PWM device %s is not ready\n",
100026a6:	489e      	ldr	r0, [pc, #632]	; (10002920 <main+0x354>)
100026a8:	6821      	ldr	r1, [r4, #0]
			printk("Error %d: failed to set pulse width\n", ret);
100026aa:	f00a fbd9 	bl	1000ce60 <printk>
			return;
100026ae:	e7f2      	b.n	10002696 <main+0xca>
	if (!device_is_ready(pwm_rele2.dev)) {
100026b0:	0020      	movs	r0, r4
100026b2:	f00a fb84 	bl	1000cdbe <device_is_ready>
100026b6:	2800      	cmp	r0, #0
100026b8:	d0f5      	beq.n	100026a6 <main+0xda>
	if (!device_is_ready(pwm_pilot_out.dev)) {
100026ba:	0020      	movs	r0, r4
100026bc:	f00a fb7f 	bl	1000cdbe <device_is_ready>
100026c0:	2800      	cmp	r0, #0
100026c2:	d0f0      	beq.n	100026a6 <main+0xda>
	printk("PWMs configurados correctamente\n");
100026c4:	4897      	ldr	r0, [pc, #604]	; (10002924 <main+0x358>)
100026c6:	f00a fbcb 	bl	1000ce60 <printk>
	if (!device_is_ready(display)) {
100026ca:	4c97      	ldr	r4, [pc, #604]	; (10002928 <main+0x35c>)
100026cc:	0020      	movs	r0, r4
100026ce:	f00a fb76 	bl	1000cdbe <device_is_ready>
100026d2:	2800      	cmp	r0, #0
100026d4:	d109      	bne.n	100026ea <main+0x11e>
		LOG_ERR("display device is not ready");
100026d6:	4b95      	ldr	r3, [pc, #596]	; (1000292c <main+0x360>)
100026d8:	2201      	movs	r2, #1
100026da:	9302      	str	r3, [sp, #8]
100026dc:	4994      	ldr	r1, [pc, #592]	; (10002930 <main+0x364>)
100026de:	0003      	movs	r3, r0
100026e0:	9001      	str	r0, [sp, #4]
100026e2:	9000      	str	r0, [sp, #0]
100026e4:	f00a fb6f 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
		return;
100026e8:	e7d5      	b.n	10002696 <main+0xca>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
100026ea:	0020      	movs	r0, r4
100026ec:	68a3      	ldr	r3, [r4, #8]
	LOG_INF("x_resolution: %d", x_res);
100026ee:	2400      	movs	r4, #0
100026f0:	ae0d      	add	r6, sp, #52	; 0x34
100026f2:	0031      	movs	r1, r6
100026f4:	69db      	ldr	r3, [r3, #28]
100026f6:	4798      	blx	r3
	const uint16_t x_res = capabilities.x_resolution;
100026f8:	8833      	ldrh	r3, [r6, #0]
	LOG_INF("x_resolution: %d", x_res);
100026fa:	4d8d      	ldr	r5, [pc, #564]	; (10002930 <main+0x364>)
	const uint16_t x_res = capabilities.x_resolution;
100026fc:	9305      	str	r3, [sp, #20]
	const uint16_t y_res = capabilities.y_resolution;
100026fe:	8877      	ldrh	r7, [r6, #2]
	LOG_INF("x_resolution: %d", x_res);
10002700:	9303      	str	r3, [sp, #12]
10002702:	4b8c      	ldr	r3, [pc, #560]	; (10002934 <main+0x368>)
10002704:	0029      	movs	r1, r5
10002706:	0020      	movs	r0, r4
10002708:	2203      	movs	r2, #3
1000270a:	9302      	str	r3, [sp, #8]
1000270c:	9401      	str	r4, [sp, #4]
1000270e:	0023      	movs	r3, r4
10002710:	9400      	str	r4, [sp, #0]
10002712:	f00a fb58 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("y_resolution: %d", y_res);
10002716:	4b88      	ldr	r3, [pc, #544]	; (10002938 <main+0x36c>)
10002718:	0029      	movs	r1, r5
1000271a:	0020      	movs	r0, r4
1000271c:	2203      	movs	r2, #3
1000271e:	9302      	str	r3, [sp, #8]
10002720:	9401      	str	r4, [sp, #4]
10002722:	0023      	movs	r3, r4
10002724:	9400      	str	r4, [sp, #0]
10002726:	9703      	str	r7, [sp, #12]
10002728:	f00a fb4d 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("supported pixel formats: %d", capabilities.supported_pixel_formats);
1000272c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000272e:	0029      	movs	r1, r5
10002730:	9303      	str	r3, [sp, #12]
10002732:	4b82      	ldr	r3, [pc, #520]	; (1000293c <main+0x370>)
10002734:	0020      	movs	r0, r4
10002736:	2203      	movs	r2, #3
10002738:	9302      	str	r3, [sp, #8]
1000273a:	9401      	str	r4, [sp, #4]
1000273c:	0023      	movs	r3, r4
1000273e:	9400      	str	r4, [sp, #0]
10002740:	f00a fb41 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("screen_info: %d", capabilities.screen_info);
10002744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002746:	0029      	movs	r1, r5
10002748:	9303      	str	r3, [sp, #12]
1000274a:	4b7d      	ldr	r3, [pc, #500]	; (10002940 <main+0x374>)
1000274c:	0020      	movs	r0, r4
1000274e:	2203      	movs	r2, #3
10002750:	9302      	str	r3, [sp, #8]
10002752:	9401      	str	r4, [sp, #4]
10002754:	0023      	movs	r3, r4
10002756:	9400      	str	r4, [sp, #0]
10002758:	f00a fb35 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("current_pixel_format: %d", capabilities.current_pixel_format);
1000275c:	7b33      	ldrb	r3, [r6, #12]
1000275e:	0029      	movs	r1, r5
10002760:	9303      	str	r3, [sp, #12]
10002762:	4b78      	ldr	r3, [pc, #480]	; (10002944 <main+0x378>)
10002764:	0020      	movs	r0, r4
10002766:	2203      	movs	r2, #3
10002768:	9302      	str	r3, [sp, #8]
1000276a:	9401      	str	r4, [sp, #4]
1000276c:	0023      	movs	r3, r4
1000276e:	9400      	str	r4, [sp, #0]
10002770:	f00a fb29 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("current_orientation: %d", capabilities.current_orientation);
10002774:	7b73      	ldrb	r3, [r6, #13]
	const struct display_buffer_descriptor buf_desc = {
10002776:	2680      	movs	r6, #128	; 0x80
	LOG_INF("current_orientation: %d", capabilities.current_orientation);
10002778:	9303      	str	r3, [sp, #12]
1000277a:	4b73      	ldr	r3, [pc, #460]	; (10002948 <main+0x37c>)
1000277c:	0029      	movs	r1, r5
1000277e:	0020      	movs	r0, r4
10002780:	2203      	movs	r2, #3
10002782:	9302      	str	r3, [sp, #8]
10002784:	9401      	str	r4, [sp, #4]
10002786:	0023      	movs	r3, r4
10002788:	9400      	str	r4, [sp, #0]
1000278a:	f00a fb1c 	bl	1000cdc6 <z_log_msg_runtime_create.constprop.0>
		.buf_size = x_res * y_res,
1000278e:	9b05      	ldr	r3, [sp, #20]
10002790:	4d55      	ldr	r5, [pc, #340]	; (100028e8 <main+0x31c>)
10002792:	437b      	muls	r3, r7
	const struct display_buffer_descriptor buf_desc = {
10002794:	9a05      	ldr	r2, [sp, #20]
10002796:	930a      	str	r3, [sp, #40]	; 0x28
10002798:	0028      	movs	r0, r5
1000279a:	ab04      	add	r3, sp, #16
1000279c:	839a      	strh	r2, [r3, #28]
1000279e:	83df      	strh	r7, [r3, #30]
100027a0:	841e      	strh	r6, [r3, #32]
100027a2:	f00a fb0c 	bl	1000cdbe <device_is_ready>
		       button0.port->name);
100027a6:	682c      	ldr	r4, [r5, #0]
	if (!gpio_is_ready_dt(&button0)) {
100027a8:	2800      	cmp	r0, #0
100027aa:	d101      	bne.n	100027b0 <main+0x1e4>
		printk("Error: button3 device %s is not ready\n",
100027ac:	4867      	ldr	r0, [pc, #412]	; (1000294c <main+0x380>)
100027ae:	e01b      	b.n	100027e8 <main+0x21c>
	if (ret != 0) {
100027b0:	9b06      	ldr	r3, [sp, #24]
100027b2:	2b00      	cmp	r3, #0
100027b4:	d006      	beq.n	100027c4 <main+0x1f8>
		printk("Error %d: failed to configure %s pin %d\n",
100027b6:	2306      	movs	r3, #6
100027b8:	0022      	movs	r2, r4
100027ba:	4865      	ldr	r0, [pc, #404]	; (10002950 <main+0x384>)
100027bc:	9906      	ldr	r1, [sp, #24]
100027be:	f00a fb4f 	bl	1000ce60 <printk>
		return;
100027c2:	e768      	b.n	10002696 <main+0xca>
	callback->handler = handler;
100027c4:	4863      	ldr	r0, [pc, #396]	; (10002954 <main+0x388>)
100027c6:	4b64      	ldr	r3, [pc, #400]	; (10002958 <main+0x38c>)
100027c8:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
100027ca:	2340      	movs	r3, #64	; 0x40
100027cc:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button0.port, &button0_cb_data);
100027ce:	f7ff fe4f 	bl	10002470 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button0 at %s pin %d\n", button0.port->name, button0.pin);
100027d2:	4862      	ldr	r0, [pc, #392]	; (1000295c <main+0x390>)
100027d4:	2206      	movs	r2, #6
100027d6:	0021      	movs	r1, r4
100027d8:	f00a fb42 	bl	1000ce60 <printk>
	return device_is_ready(spec->port);
100027dc:	0028      	movs	r0, r5
100027de:	f00a faee 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&button1)) {
100027e2:	2800      	cmp	r0, #0
100027e4:	d102      	bne.n	100027ec <main+0x220>
		printk("Error: button1 device %s is not ready\n",
100027e6:	485e      	ldr	r0, [pc, #376]	; (10002960 <main+0x394>)
		printk("Error: button3 device %s is not ready\n",
100027e8:	0021      	movs	r1, r4
100027ea:	e75e      	b.n	100026aa <main+0xde>
	callback->handler = handler;
100027ec:	485d      	ldr	r0, [pc, #372]	; (10002964 <main+0x398>)
100027ee:	4b5e      	ldr	r3, [pc, #376]	; (10002968 <main+0x39c>)
	callback->pin_mask = pin_mask;
100027f0:	6086      	str	r6, [r0, #8]
	callback->handler = handler;
100027f2:	6043      	str	r3, [r0, #4]
	gpio_add_callback(button1.port, &button1_cb_data);
100027f4:	f7ff fe3c 	bl	10002470 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button1 at %s pin %d\n", button1.port->name, button1.pin);
100027f8:	485c      	ldr	r0, [pc, #368]	; (1000296c <main+0x3a0>)
100027fa:	2207      	movs	r2, #7
100027fc:	0021      	movs	r1, r4
100027fe:	f00a fb2f 	bl	1000ce60 <printk>
	return device_is_ready(spec->port);
10002802:	0028      	movs	r0, r5
10002804:	f00a fadb 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&button2)) {
10002808:	2800      	cmp	r0, #0
1000280a:	d101      	bne.n	10002810 <main+0x244>
		printk("Error: button2 device %s is not ready\n",
1000280c:	4858      	ldr	r0, [pc, #352]	; (10002970 <main+0x3a4>)
1000280e:	e7eb      	b.n	100027e8 <main+0x21c>
	callback->handler = handler;
10002810:	4858      	ldr	r0, [pc, #352]	; (10002974 <main+0x3a8>)
10002812:	4b59      	ldr	r3, [pc, #356]	; (10002978 <main+0x3ac>)
10002814:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
10002816:	2380      	movs	r3, #128	; 0x80
10002818:	005b      	lsls	r3, r3, #1
1000281a:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button2.port, &button2_cb_data);
1000281c:	f7ff fe28 	bl	10002470 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button2 at %s pin %d\n", button2.port->name, button2.pin);
10002820:	4856      	ldr	r0, [pc, #344]	; (1000297c <main+0x3b0>)
10002822:	2208      	movs	r2, #8
10002824:	0021      	movs	r1, r4
10002826:	f00a fb1b 	bl	1000ce60 <printk>
	return device_is_ready(spec->port);
1000282a:	0028      	movs	r0, r5
1000282c:	f00a fac7 	bl	1000cdbe <device_is_ready>
	if (!gpio_is_ready_dt(&button3)) {
10002830:	2800      	cmp	r0, #0
10002832:	d0bb      	beq.n	100027ac <main+0x1e0>
	callback->handler = handler;
10002834:	4852      	ldr	r0, [pc, #328]	; (10002980 <main+0x3b4>)
10002836:	4b53      	ldr	r3, [pc, #332]	; (10002984 <main+0x3b8>)
10002838:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
1000283a:	2380      	movs	r3, #128	; 0x80
1000283c:	009b      	lsls	r3, r3, #2
1000283e:	6083      	str	r3, [r0, #8]
	gpio_add_callback(button3.port, &button3_cb_data);
10002840:	f7ff fe16 	bl	10002470 <gpio_add_callback.constprop.0.isra.0>
	printk("Set up button3 at %s pin %d\n", button3.port->name, button3.pin);
10002844:	0021      	movs	r1, r4
10002846:	2209      	movs	r2, #9
10002848:	484f      	ldr	r0, [pc, #316]	; (10002988 <main+0x3bc>)
1000284a:	f00a fb09 	bl	1000ce60 <printk>
	printk("Press the button\n"); 
1000284e:	484f      	ldr	r0, [pc, #316]	; (1000298c <main+0x3c0>)
10002850:	f00a fb06 	bl	1000ce60 <printk>
	ret = pwm_set_dt(&pwm_rele1, period, period / 2U);
10002854:	484e      	ldr	r0, [pc, #312]	; (10002990 <main+0x3c4>)
10002856:	f7ff fdc1 	bl	100023dc <pwm_set_dt.constprop.0>
1000285a:	1e01      	subs	r1, r0, #0
			printk("Error %d: failed to set pulse width\n", ret);
1000285c:	484d      	ldr	r0, [pc, #308]	; (10002994 <main+0x3c8>)
		if (ret) {
1000285e:	d000      	beq.n	10002862 <main+0x296>
10002860:	e723      	b.n	100026aa <main+0xde>
	ret = pwm_set_dt(&pwm_rele2, period, period / 2U);
10002862:	484d      	ldr	r0, [pc, #308]	; (10002998 <main+0x3cc>)
10002864:	f7ff fdba 	bl	100023dc <pwm_set_dt.constprop.0>
	const uint8_t *current_image = buff;
10002868:	4e4c      	ldr	r6, [pc, #304]	; (1000299c <main+0x3d0>)
	ret = pwm_set_dt(&pwm_rele2, period, period / 2U);
1000286a:	1e07      	subs	r7, r0, #0
		buffer_len = 0; 
1000286c:	9007      	str	r0, [sp, #28]
		if (ret) {
1000286e:	d100      	bne.n	10002872 <main+0x2a6>
10002870:	e0b9      	b.n	100029e6 <main+0x41a>
			printk("Error %d: failed to set pulse width\n", ret);
10002872:	0039      	movs	r1, r7
10002874:	4847      	ldr	r0, [pc, #284]	; (10002994 <main+0x3c8>)
10002876:	e718      	b.n	100026aa <main+0xde>
		}else if (len == 0)
10002878:	2800      	cmp	r0, #0
1000287a:	d10f      	bne.n	1000289c <main+0x2d0>
			printk("Successful data reception!\n"); 
1000287c:	4848      	ldr	r0, [pc, #288]	; (100029a0 <main+0x3d4>)
1000287e:	f00a faef 	bl	1000ce60 <printk>
			uart_poll_in(uart_pzem, &rx_data);
10002882:	6828      	ldr	r0, [r5, #0]
10002884:	f7ff fd9c 	bl	100023c0 <uart_poll_in.constprop.0>
			buffer[buffer_len] = rx_data;
10002888:	4946      	ldr	r1, [pc, #280]	; (100029a4 <main+0x3d8>)
1000288a:	6823      	ldr	r3, [r4, #0]
1000288c:	4a46      	ldr	r2, [pc, #280]	; (100029a8 <main+0x3dc>)
1000288e:	7809      	ldrb	r1, [r1, #0]
10002890:	54d1      	strb	r1, [r2, r3]
            buffer_len++;
10002892:	3301      	adds	r3, #1
10002894:	6023      	str	r3, [r4, #0]
			if (buffer_len == 24)
10002896:	2b18      	cmp	r3, #24
10002898:	d1f3      	bne.n	10002882 <main+0x2b6>
1000289a:	e0af      	b.n	100029fc <main+0x430>
			printk("Failure to receive data!\n"); 
1000289c:	4843      	ldr	r0, [pc, #268]	; (100029ac <main+0x3e0>)
1000289e:	e0ab      	b.n	100029f8 <main+0x42c>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
100028a0:	2301      	movs	r3, #1
100028a2:	e0b7      	b.n	10002a14 <main+0x448>
				printk("RawValue %"PRIu16, buf);
100028a4:	2516      	movs	r5, #22
100028a6:	ab04      	add	r3, sp, #16
100028a8:	18ed      	adds	r5, r5, r3
100028aa:	8829      	ldrh	r1, [r5, #0]
100028ac:	4840      	ldr	r0, [pc, #256]	; (100029b0 <main+0x3e4>)
100028ae:	f00a fad7 	bl	1000ce60 <printk>
			rawValue = buf; 
100028b2:	8828      	ldrh	r0, [r5, #0]
			tempC = AdcToCelsius(rawValue);
100028b4:	f7ff fe34 	bl	10002520 <AdcToCelsius>
100028b8:	0002      	movs	r2, r0
100028ba:	000b      	movs	r3, r1
100028bc:	493d      	ldr	r1, [pc, #244]	; (100029b4 <main+0x3e8>)
			printf(" = Temperature %.2f\n", tempC);
100028be:	483e      	ldr	r0, [pc, #248]	; (100029b8 <main+0x3ec>)
			tempC = AdcToCelsius(rawValue);
100028c0:	600a      	str	r2, [r1, #0]
100028c2:	604b      	str	r3, [r1, #4]
			printf(" = Temperature %.2f\n", tempC);
100028c4:	f004 ff7a 	bl	100077bc <printf>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
100028c8:	2100      	movs	r1, #0
100028ca:	483c      	ldr	r0, [pc, #240]	; (100029bc <main+0x3f0>)
100028cc:	f003 fd46 	bl	1000635c <z_impl_k_sleep>
100028d0:	e0c5      	b.n	10002a5e <main+0x492>
				printk("inicio");
100028d2:	483b      	ldr	r0, [pc, #236]	; (100029c0 <main+0x3f4>)
100028d4:	f00a fac4 	bl	1000ce60 <printk>
				k_msleep(10000);
100028d8:	4838      	ldr	r0, [pc, #224]	; (100029bc <main+0x3f0>)
100028da:	f00a fa82 	bl	1000cde2 <k_msleep.isra.0>
				current_image = buff;
100028de:	4e2f      	ldr	r6, [pc, #188]	; (1000299c <main+0x3d0>)
					fase_programa = 1;
100028e0:	2701      	movs	r7, #1
100028e2:	e080      	b.n	100029e6 <main+0x41a>
100028e4:	1000ec70 	.word	0x1000ec70
100028e8:	1000e010 	.word	0x1000e010
100028ec:	1000e398 	.word	0x1000e398
100028f0:	1000e390 	.word	0x1000e390
100028f4:	1000e388 	.word	0x1000e388
100028f8:	1000ec7e 	.word	0x1000ec7e
100028fc:	1000e028 	.word	0x1000e028
10002900:	1000e32e 	.word	0x1000e32e
10002904:	1000eca0 	.word	0x1000eca0
10002908:	1000e33e 	.word	0x1000e33e
1000290c:	1000ece3 	.word	0x1000ece3
10002910:	20000778 	.word	0x20000778
10002914:	1000ed04 	.word	0x1000ed04
10002918:	1000ecc1 	.word	0x1000ecc1
1000291c:	1000e058 	.word	0x1000e058
10002920:	1000ed1b 	.word	0x1000ed1b
10002924:	1000ed3e 	.word	0x1000ed3e
10002928:	1000e070 	.word	0x1000e070
1000292c:	1000ed5f 	.word	0x1000ed5f
10002930:	1000e1ac 	.word	0x1000e1ac
10002934:	1000ed7b 	.word	0x1000ed7b
10002938:	1000ed8c 	.word	0x1000ed8c
1000293c:	1000ed9d 	.word	0x1000ed9d
10002940:	1000edb9 	.word	0x1000edb9
10002944:	1000edc9 	.word	0x1000edc9
10002948:	1000ede2 	.word	0x1000ede2
1000294c:	1000edfa 	.word	0x1000edfa
10002950:	1000ee21 	.word	0x1000ee21
10002954:	20002384 	.word	0x20002384
10002958:	10002361 	.word	0x10002361
1000295c:	1000ee4a 	.word	0x1000ee4a
10002960:	1000ee67 	.word	0x1000ee67
10002964:	20002378 	.word	0x20002378
10002968:	10002379 	.word	0x10002379
1000296c:	1000ee8e 	.word	0x1000ee8e
10002970:	1000eeab 	.word	0x1000eeab
10002974:	2000236c 	.word	0x2000236c
10002978:	10002391 	.word	0x10002391
1000297c:	1000eed2 	.word	0x1000eed2
10002980:	20002360 	.word	0x20002360
10002984:	100023a9 	.word	0x100023a9
10002988:	1000eeef 	.word	0x1000eeef
1000298c:	1000ef0c 	.word	0x1000ef0c
10002990:	1000e358 	.word	0x1000e358
10002994:	1000ef1e 	.word	0x1000ef1e
10002998:	1000e348 	.word	0x1000e348
1000299c:	2000095c 	.word	0x2000095c
100029a0:	1000ef58 	.word	0x1000ef58
100029a4:	200024d8 	.word	0x200024d8
100029a8:	200024d9 	.word	0x200024d9
100029ac:	1000ef74 	.word	0x1000ef74
100029b0:	1000efb6 	.word	0x1000efb6
100029b4:	200021b0 	.word	0x200021b0
100029b8:	1000efc3 	.word	0x1000efc3
100029bc:	00002710 	.word	0x00002710
100029c0:	1000efd8 	.word	0x1000efd8
				if (aceptar_bt != 0) {
100029c4:	2c00      	cmp	r4, #0
100029c6:	d006      	beq.n	100029d6 <main+0x40a>
					printk("Corriente 6A seleccionada\n");
100029c8:	4852      	ldr	r0, [pc, #328]	; (10002b14 <main+0x548>)
100029ca:	f00a fa49 	bl	1000ce60 <printk>
					k_msleep(10);
100029ce:	200a      	movs	r0, #10
100029d0:	f00a fa07 	bl	1000cde2 <k_msleep.isra.0>
					fase_programa = 3;
100029d4:	2703      	movs	r7, #3
				if (derecha_bt != 0){
100029d6:	9b06      	ldr	r3, [sp, #24]
100029d8:	4e4f      	ldr	r6, [pc, #316]	; (10002b18 <main+0x54c>)
100029da:	2b00      	cmp	r3, #0
100029dc:	d003      	beq.n	100029e6 <main+0x41a>
					k_msleep(10);
100029de:	200a      	movs	r0, #10
100029e0:	f00a f9ff 	bl	1000cde2 <k_msleep.isra.0>
					fase_programa = 2;
100029e4:	2702      	movs	r7, #2
		int len = uart_poll_in(uart_pzem, &rx_data);
100029e6:	4d4d      	ldr	r5, [pc, #308]	; (10002b1c <main+0x550>)
100029e8:	6828      	ldr	r0, [r5, #0]
100029ea:	f7ff fce9 	bl	100023c0 <uart_poll_in.constprop.0>
		if (len == -1)
100029ee:	4c4c      	ldr	r4, [pc, #304]	; (10002b20 <main+0x554>)
100029f0:	1c43      	adds	r3, r0, #1
100029f2:	d000      	beq.n	100029f6 <main+0x42a>
100029f4:	e740      	b.n	10002878 <main+0x2ac>
			printk("No data to receive!\n");
100029f6:	484b      	ldr	r0, [pc, #300]	; (10002b24 <main+0x558>)
			printk("Failure to receive data!\n"); 
100029f8:	f00a fa32 	bl	1000ce60 <printk>
		pzem_reading(buffer, buffer_len);
100029fc:	484a      	ldr	r0, [pc, #296]	; (10002b28 <main+0x55c>)
100029fe:	6821      	ldr	r1, [r4, #0]
10002a00:	f7ff fd42 	bl	10002488 <pzem_reading>
		buffer_len = 0; 
10002a04:	9b07      	ldr	r3, [sp, #28]
10002a06:	6023      	str	r3, [r4, #0]
10002a08:	2100      	movs	r1, #0
10002a0a:	4848      	ldr	r0, [pc, #288]	; (10002b2c <main+0x560>)
10002a0c:	f003 fca6 	bl	1000635c <z_impl_k_sleep>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10002a10:	2300      	movs	r3, #0
10002a12:	4c47      	ldr	r4, [pc, #284]	; (10002b30 <main+0x564>)
			    	adc_channels[i].dev->name,
10002a14:	6825      	ldr	r5, [r4, #0]
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10002a16:	9305      	str	r3, [sp, #20]
			printk("- %s, channel %d: ",
10002a18:	7923      	ldrb	r3, [r4, #4]
10002a1a:	4846      	ldr	r0, [pc, #280]	; (10002b34 <main+0x568>)
10002a1c:	001a      	movs	r2, r3
10002a1e:	6829      	ldr	r1, [r5, #0]
10002a20:	9306      	str	r3, [sp, #24]
10002a22:	f00a fa1d 	bl	1000ce60 <printk>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
10002a26:	7963      	ldrb	r3, [r4, #5]
10002a28:	2b00      	cmp	r3, #0
10002a2a:	d00d      	beq.n	10002a48 <main+0x47c>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
10002a2c:	2301      	movs	r3, #1
10002a2e:	9a06      	ldr	r2, [sp, #24]
	seq->resolution = spec->resolution;
10002a30:	2144      	movs	r1, #68	; 0x44
	seq->channels = BIT(spec->channel_id);
10002a32:	4093      	lsls	r3, r2
	seq->resolution = spec->resolution;
10002a34:	aa04      	add	r2, sp, #16
	seq->channels = BIT(spec->channel_id);
10002a36:	9312      	str	r3, [sp, #72]	; 0x48
	seq->resolution = spec->resolution;
10002a38:	7ba3      	ldrb	r3, [r4, #14]
10002a3a:	1852      	adds	r2, r2, r1
10002a3c:	7013      	strb	r3, [r2, #0]
	seq->oversampling = spec->oversampling;
10002a3e:	3101      	adds	r1, #1
10002a40:	7be3      	ldrb	r3, [r4, #15]
10002a42:	aa04      	add	r2, sp, #16
10002a44:	1852      	adds	r2, r2, r1
10002a46:	7013      	strb	r3, [r2, #0]
	return api->read(dev, sequence);
10002a48:	68ab      	ldr	r3, [r5, #8]
10002a4a:	a911      	add	r1, sp, #68	; 0x44
10002a4c:	0028      	movs	r0, r5
10002a4e:	685b      	ldr	r3, [r3, #4]
10002a50:	4798      	blx	r3
10002a52:	1e01      	subs	r1, r0, #0
			if (err < 0) {
10002a54:	db00      	blt.n	10002a58 <main+0x48c>
10002a56:	e725      	b.n	100028a4 <main+0x2d8>
				printk("Could not read (%d)\n", err);
10002a58:	4837      	ldr	r0, [pc, #220]	; (10002b38 <main+0x56c>)
10002a5a:	f00a fa01 	bl	1000ce60 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
10002a5e:	9b05      	ldr	r3, [sp, #20]
10002a60:	3410      	adds	r4, #16
10002a62:	2b00      	cmp	r3, #0
10002a64:	d100      	bne.n	10002a68 <main+0x49c>
10002a66:	e71b      	b.n	100028a0 <main+0x2d4>
10002a68:	2100      	movs	r1, #0
10002a6a:	4830      	ldr	r0, [pc, #192]	; (10002b2c <main+0x560>)
10002a6c:	f003 fc76 	bl	1000635c <z_impl_k_sleep>
	return api->write(dev, x, y, desc, buf);
10002a70:	2200      	movs	r2, #0
10002a72:	4832      	ldr	r0, [pc, #200]	; (10002b3c <main+0x570>)
10002a74:	9600      	str	r6, [sp, #0]
10002a76:	6883      	ldr	r3, [r0, #8]
10002a78:	0011      	movs	r1, r2
10002a7a:	689c      	ldr	r4, [r3, #8]
10002a7c:	ab0a      	add	r3, sp, #40	; 0x28
10002a7e:	47a0      	blx	r4
		izquierda_bt = gpio_pin_get_dt(&button0);
10002a80:	482f      	ldr	r0, [pc, #188]	; (10002b40 <main+0x574>)
10002a82:	f00a f988 	bl	1000cd96 <gpio_pin_get_dt>
10002a86:	9005      	str	r0, [sp, #20]
		derecha_bt = gpio_pin_get_dt(&button1);
10002a88:	482e      	ldr	r0, [pc, #184]	; (10002b44 <main+0x578>)
10002a8a:	f00a f984 	bl	1000cd96 <gpio_pin_get_dt>
10002a8e:	9006      	str	r0, [sp, #24]
		aceptar_bt = gpio_pin_get_dt(&button2);
10002a90:	482d      	ldr	r0, [pc, #180]	; (10002b48 <main+0x57c>)
10002a92:	f00a f980 	bl	1000cd96 <gpio_pin_get_dt>
10002a96:	0004      	movs	r4, r0
		atras_bt = gpio_pin_get_dt(&button3);
10002a98:	482c      	ldr	r0, [pc, #176]	; (10002b4c <main+0x580>)
10002a9a:	f00a f97c 	bl	1000cd96 <gpio_pin_get_dt>
10002a9e:	0005      	movs	r5, r0
		switch(fase_programa) {
10002aa0:	2f05      	cmp	r7, #5
10002aa2:	d830      	bhi.n	10002b06 <main+0x53a>
10002aa4:	0038      	movs	r0, r7
10002aa6:	f7fd fb89 	bl	100001bc <__gnu_thumb1_case_shi>
10002aaa:	ff14      	.short	0xff14
10002aac:	0006ff8d 	.word	0x0006ff8d
10002ab0:	00250017 	.word	0x00250017
10002ab4:	0032      	.short	0x0032
				if (aceptar_bt != 0) {
10002ab6:	2c00      	cmp	r4, #0
10002ab8:	d006      	beq.n	10002ac8 <main+0x4fc>
					printk("Corriente 16A seleccionada\n");
10002aba:	4825      	ldr	r0, [pc, #148]	; (10002b50 <main+0x584>)
10002abc:	f00a f9d0 	bl	1000ce60 <printk>
					k_msleep(10);
10002ac0:	200a      	movs	r0, #10
10002ac2:	f00a f98e 	bl	1000cde2 <k_msleep.isra.0>
					fase_programa = 3;
10002ac6:	2703      	movs	r7, #3
				if (izquierda_bt != 0){
10002ac8:	9b05      	ldr	r3, [sp, #20]
10002aca:	4e22      	ldr	r6, [pc, #136]	; (10002b54 <main+0x588>)
10002acc:	2b00      	cmp	r3, #0
10002ace:	d08a      	beq.n	100029e6 <main+0x41a>
					k_msleep(10);
10002ad0:	200a      	movs	r0, #10
10002ad2:	f00a f986 	bl	1000cde2 <k_msleep.isra.0>
10002ad6:	e703      	b.n	100028e0 <main+0x314>
				if (aceptar_bt != 0) {
10002ad8:	2c00      	cmp	r4, #0
10002ada:	d006      	beq.n	10002aea <main+0x51e>
					printk("Caarga aceptada\n");
10002adc:	481e      	ldr	r0, [pc, #120]	; (10002b58 <main+0x58c>)
10002ade:	f00a f9bf 	bl	1000ce60 <printk>
					k_msleep(10);
10002ae2:	200a      	movs	r0, #10
10002ae4:	f00a f97d 	bl	1000cde2 <k_msleep.isra.0>
					fase_programa = 4;
10002ae8:	2704      	movs	r7, #4
				if (atras_bt != 0){
10002aea:	4e1c      	ldr	r6, [pc, #112]	; (10002b5c <main+0x590>)
10002aec:	2d00      	cmp	r5, #0
10002aee:	d100      	bne.n	10002af2 <main+0x526>
10002af0:	e779      	b.n	100029e6 <main+0x41a>
10002af2:	e7ed      	b.n	10002ad0 <main+0x504>
				if (atras_bt != 0){
10002af4:	4e1a      	ldr	r6, [pc, #104]	; (10002b60 <main+0x594>)
10002af6:	2d00      	cmp	r5, #0
10002af8:	d100      	bne.n	10002afc <main+0x530>
10002afa:	e774      	b.n	100029e6 <main+0x41a>
					k_msleep(10);
10002afc:	200a      	movs	r0, #10
10002afe:	f00a f970 	bl	1000cde2 <k_msleep.isra.0>
					fase_programa = 5;
10002b02:	2705      	movs	r7, #5
10002b04:	e76f      	b.n	100029e6 <main+0x41a>
				printk("error no esta en inguna fase del programa");
10002b06:	4817      	ldr	r0, [pc, #92]	; (10002b64 <main+0x598>)
10002b08:	f00a f9aa 	bl	1000ce60 <printk>
10002b0c:	e76b      	b.n	100029e6 <main+0x41a>
		switch(fase_programa) {
10002b0e:	4e16      	ldr	r6, [pc, #88]	; (10002b68 <main+0x59c>)
	{
10002b10:	e769      	b.n	100029e6 <main+0x41a>
10002b12:	46c0      	nop			; (mov r8, r8)
10002b14:	1000efdf 	.word	0x1000efdf
10002b18:	2000195c 	.word	0x2000195c
10002b1c:	20000778 	.word	0x20000778
10002b20:	20002398 	.word	0x20002398
10002b24:	1000ef43 	.word	0x1000ef43
10002b28:	200024d9 	.word	0x200024d9
10002b2c:	00002710 	.word	0x00002710
10002b30:	1000e328 	.word	0x1000e328
10002b34:	1000ef8e 	.word	0x1000ef8e
10002b38:	1000efa1 	.word	0x1000efa1
10002b3c:	1000e070 	.word	0x1000e070
10002b40:	1000e380 	.word	0x1000e380
10002b44:	1000e378 	.word	0x1000e378
10002b48:	1000e370 	.word	0x1000e370
10002b4c:	1000e368 	.word	0x1000e368
10002b50:	1000effa 	.word	0x1000effa
10002b54:	2000155c 	.word	0x2000155c
10002b58:	1000f016 	.word	0x1000f016
10002b5c:	20001d5c 	.word	0x20001d5c
10002b60:	2000115c 	.word	0x2000115c
10002b64:	1000f027 	.word	0x1000f027
10002b68:	20000d5c 	.word	0x20000d5c

10002b6c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b6e:	b095      	sub	sp, #84	; 0x54
10002b70:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10002b72:	2304      	movs	r3, #4
{
10002b74:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10002b76:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10002b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10002b7a:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10002b7c:	08da      	lsrs	r2, r3, #3
10002b7e:	2307      	movs	r3, #7
10002b80:	401a      	ands	r2, r3
10002b82:	3201      	adds	r2, #1
{
10002b84:	0007      	movs	r7, r0
10002b86:	9c1a      	ldr	r4, [sp, #104]	; 0x68
10002b88:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10002b8a:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10002b8c:	0782      	lsls	r2, r0, #30
10002b8e:	d000      	beq.n	10002b92 <cbvprintf_package+0x26>
10002b90:	e1d2      	b.n	10002f38 <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10002b92:	1d02      	adds	r2, r0, #4
10002b94:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
10002b96:	2800      	cmp	r0, #0
10002b98:	d004      	beq.n	10002ba4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
10002b9a:	2907      	cmp	r1, #7
10002b9c:	d80a      	bhi.n	10002bb4 <cbvprintf_package+0x48>
		return -ENOSPC;
10002b9e:	201c      	movs	r0, #28
		return -EFAULT;
10002ba0:	4240      	negs	r0, r0
10002ba2:	e154      	b.n	10002e4e <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10002ba4:	9a02      	ldr	r2, [sp, #8]
10002ba6:	401a      	ands	r2, r3
10002ba8:	0013      	movs	r3, r2
10002baa:	3204      	adds	r2, #4
10002bac:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
10002bae:	2208      	movs	r2, #8
10002bb0:	1ad3      	subs	r3, r2, r3
10002bb2:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10002bb4:	2504      	movs	r5, #4
	s = fmt--;
10002bb6:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
10002bb8:	002e      	movs	r6, r5
	s = fmt--;
10002bba:	3b01      	subs	r3, #1
10002bbc:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
10002bbe:	2300      	movs	r3, #0
10002bc0:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
10002bc2:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
10002bc4:	9303      	str	r3, [sp, #12]
	bool parsing = false;
10002bc6:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
10002bc8:	3b01      	subs	r3, #1
10002bca:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
10002bcc:	2f00      	cmp	r7, #0
10002bce:	d002      	beq.n	10002bd6 <cbvprintf_package+0x6a>
				*(const char **)buf = s;
10002bd0:	9b00      	ldr	r3, [sp, #0]
10002bd2:	9a04      	ldr	r2, [sp, #16]
10002bd4:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002bd8:	2b00      	cmp	r3, #0
10002bda:	dd00      	ble.n	10002bde <cbvprintf_package+0x72>
10002bdc:	e0eb      	b.n	10002db6 <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
10002bde:	4b9d      	ldr	r3, [pc, #628]	; (10002e54 <cbvprintf_package+0x2e8>)
10002be0:	9a04      	ldr	r2, [sp, #16]
10002be2:	429a      	cmp	r2, r3
10002be4:	d303      	bcc.n	10002bee <cbvprintf_package+0x82>
10002be6:	4b9c      	ldr	r3, [pc, #624]	; (10002e58 <cbvprintf_package+0x2ec>)
10002be8:	429a      	cmp	r2, r3
10002bea:	d200      	bcs.n	10002bee <cbvprintf_package+0x82>
10002bec:	e0e3      	b.n	10002db6 <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10002bee:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10002bf2:	1bda      	subs	r2, r3, r7
10002bf4:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002bf6:	0789      	lsls	r1, r1, #30
10002bf8:	d500      	bpl.n	10002bfc <cbvprintf_package+0x90>
10002bfa:	e109      	b.n	10002e10 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
10002bfc:	9a03      	ldr	r2, [sp, #12]
10002bfe:	2a0f      	cmp	r2, #15
10002c00:	d900      	bls.n	10002c04 <cbvprintf_package+0x98>
10002c02:	e0b4      	b.n	10002d6e <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
10002c04:	2f00      	cmp	r7, #0
10002c06:	d100      	bne.n	10002c0a <cbvprintf_package+0x9e>
10002c08:	e10a      	b.n	10002e20 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
10002c0a:	9903      	ldr	r1, [sp, #12]
10002c0c:	aa0c      	add	r2, sp, #48	; 0x30
10002c0e:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
10002c10:	000a      	movs	r2, r1
10002c12:	9906      	ldr	r1, [sp, #24]
10002c14:	ab10      	add	r3, sp, #64	; 0x40
10002c16:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
10002c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002c1a:	3301      	adds	r3, #1
10002c1c:	930a      	str	r3, [sp, #40]	; 0x28
10002c1e:	e0ee      	b.n	10002dfe <cbvprintf_package+0x292>
			switch (*fmt) {
10002c20:	287a      	cmp	r0, #122	; 0x7a
10002c22:	d861      	bhi.n	10002ce8 <cbvprintf_package+0x17c>
10002c24:	284b      	cmp	r0, #75	; 0x4b
10002c26:	d80e      	bhi.n	10002c46 <cbvprintf_package+0xda>
10002c28:	2847      	cmp	r0, #71	; 0x47
10002c2a:	d85d      	bhi.n	10002ce8 <cbvprintf_package+0x17c>
10002c2c:	2829      	cmp	r0, #41	; 0x29
10002c2e:	d82b      	bhi.n	10002c88 <cbvprintf_package+0x11c>
10002c30:	2825      	cmp	r0, #37	; 0x25
10002c32:	d056      	beq.n	10002ce2 <cbvprintf_package+0x176>
10002c34:	d858      	bhi.n	10002ce8 <cbvprintf_package+0x17c>
10002c36:	2820      	cmp	r0, #32
10002c38:	d07f      	beq.n	10002d3a <cbvprintf_package+0x1ce>
10002c3a:	3823      	subs	r0, #35	; 0x23
10002c3c:	4243      	negs	r3, r0
10002c3e:	4158      	adcs	r0, r3
10002c40:	b2c3      	uxtb	r3, r0
				parsing = false;
10002c42:	9301      	str	r3, [sp, #4]
				continue;
10002c44:	e079      	b.n	10002d3a <cbvprintf_package+0x1ce>
			switch (*fmt) {
10002c46:	384c      	subs	r0, #76	; 0x4c
10002c48:	282e      	cmp	r0, #46	; 0x2e
10002c4a:	d84d      	bhi.n	10002ce8 <cbvprintf_package+0x17c>
10002c4c:	f7fd faac 	bl	100001a8 <__gnu_thumb1_case_uqi>
10002c50:	4c4c4c75 	.word	0x4c4c4c75
10002c54:	4c4c4c4c 	.word	0x4c4c4c4c
10002c58:	4c4c4c4c 	.word	0x4c4c4c4c
10002c5c:	4c4c4c4e 	.word	0x4c4c4c4e
10002c60:	4c4c4c4c 	.word	0x4c4c4c4c
10002c64:	4e4c5d4c 	.word	0x4e4c5d4c
10002c68:	5d5d5d4e 	.word	0x5d5d5d4e
10002c6c:	4c734e75 	.word	0x4c734e75
10002c70:	4e184c75 	.word	0x4e184c75
10002c74:	894c4c18 	.word	0x894c4c18
10002c78:	4c4c4e87 	.word	0x4c4c4e87
10002c7c:	4c4e      	.short	0x4c4e
10002c7e:	87          	.byte	0x87
10002c7f:	00          	.byte	0x00
10002c80:	2300      	movs	r3, #0
				parsing = false;
10002c82:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10002c84:	2504      	movs	r5, #4
10002c86:	e03e      	b.n	10002d06 <cbvprintf_package+0x19a>
10002c88:	2101      	movs	r1, #1
10002c8a:	000a      	movs	r2, r1
10002c8c:	382a      	subs	r0, #42	; 0x2a
10002c8e:	b2c0      	uxtb	r0, r0
10002c90:	4082      	lsls	r2, r0
10002c92:	4b72      	ldr	r3, [pc, #456]	; (10002e5c <cbvprintf_package+0x2f0>)
10002c94:	421a      	tst	r2, r3
10002c96:	d150      	bne.n	10002d3a <cbvprintf_package+0x1ce>
10002c98:	20e2      	movs	r0, #226	; 0xe2
10002c9a:	0013      	movs	r3, r2
10002c9c:	0580      	lsls	r0, r0, #22
10002c9e:	4003      	ands	r3, r0
10002ca0:	4202      	tst	r2, r0
10002ca2:	d132      	bne.n	10002d0a <cbvprintf_package+0x19e>
10002ca4:	0010      	movs	r0, r2
10002ca6:	4008      	ands	r0, r1
10002ca8:	9001      	str	r0, [sp, #4]
10002caa:	420a      	tst	r2, r1
10002cac:	d045      	beq.n	10002d3a <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
10002cae:	9a00      	ldr	r2, [sp, #0]
10002cb0:	4269      	negs	r1, r5
10002cb2:	3a01      	subs	r2, #1
10002cb4:	1952      	adds	r2, r2, r5
10002cb6:	4011      	ands	r1, r2
10002cb8:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
10002cba:	2f00      	cmp	r7, #0
10002cbc:	d065      	beq.n	10002d8a <cbvprintf_package+0x21e>
10002cbe:	1bf2      	subs	r2, r6, r7
10002cc0:	1852      	adds	r2, r2, r1
10002cc2:	9902      	ldr	r1, [sp, #8]
10002cc4:	4291      	cmp	r1, r2
10002cc6:	d200      	bcs.n	10002cca <cbvprintf_package+0x15e>
10002cc8:	e769      	b.n	10002b9e <cbvprintf_package+0x32>
		if (is_str_arg) {
10002cca:	2b00      	cmp	r3, #0
10002ccc:	d16a      	bne.n	10002da4 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
10002cce:	2e04      	cmp	r6, #4
10002cd0:	d14b      	bne.n	10002d6a <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
10002cd2:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
10002cd4:	9a00      	ldr	r2, [sp, #0]
10002cd6:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
10002cd8:	9b00      	ldr	r3, [sp, #0]
10002cda:	2604      	movs	r6, #4
10002cdc:	3304      	adds	r3, #4
10002cde:	9300      	str	r3, [sp, #0]
10002ce0:	e02b      	b.n	10002d3a <cbvprintf_package+0x1ce>
				arg_idx--;
10002ce2:	9b06      	ldr	r3, [sp, #24]
10002ce4:	3b01      	subs	r3, #1
10002ce6:	9306      	str	r3, [sp, #24]
				parsing = false;
10002ce8:	2300      	movs	r3, #0
10002cea:	e7aa      	b.n	10002c42 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
10002cec:	9b05      	ldr	r3, [sp, #20]
10002cee:	785a      	ldrb	r2, [r3, #1]
10002cf0:	2300      	movs	r3, #0
				parsing = false;
10002cf2:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
10002cf4:	2a6c      	cmp	r2, #108	; 0x6c
10002cf6:	d1da      	bne.n	10002cae <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
10002cf8:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
10002cfa:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
10002cfc:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
10002cfe:	7812      	ldrb	r2, [r2, #0]
10002d00:	2a6c      	cmp	r2, #108	; 0x6c
10002d02:	d1d4      	bne.n	10002cae <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
10002d04:	196d      	adds	r5, r5, r5
			switch (*fmt) {
10002d06:	002e      	movs	r6, r5
10002d08:	e7d1      	b.n	10002cae <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
10002d0a:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
10002d0c:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
10002d0e:	3407      	adds	r4, #7
10002d10:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
10002d12:	1949      	adds	r1, r1, r5
10002d14:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
10002d16:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
10002d18:	2f00      	cmp	r7, #0
10002d1a:	d008      	beq.n	10002d2e <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
10002d1c:	3501      	adds	r5, #1
10002d1e:	1bed      	subs	r5, r5, r7
10002d20:	9e02      	ldr	r6, [sp, #8]
10002d22:	186d      	adds	r5, r5, r1
10002d24:	42b5      	cmp	r5, r6
10002d26:	d900      	bls.n	10002d2a <cbvprintf_package+0x1be>
10002d28:	e739      	b.n	10002b9e <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
10002d2a:	600a      	str	r2, [r1, #0]
10002d2c:	604b      	str	r3, [r1, #4]
				parsing = false;
10002d2e:	2300      	movs	r3, #0
				buf += size;
10002d30:	3108      	adds	r1, #8
10002d32:	9100      	str	r1, [sp, #0]
				parsing = false;
10002d34:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10002d36:	2508      	movs	r5, #8
10002d38:	002e      	movs	r6, r5
10002d3a:	9b05      	ldr	r3, [sp, #20]
10002d3c:	3301      	adds	r3, #1
10002d3e:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
10002d40:	9b05      	ldr	r3, [sp, #20]
10002d42:	7898      	ldrb	r0, [r3, #2]
10002d44:	2800      	cmp	r0, #0
10002d46:	d077      	beq.n	10002e38 <cbvprintf_package+0x2cc>
			if (!parsing) {
10002d48:	9b01      	ldr	r3, [sp, #4]
10002d4a:	2b00      	cmp	r3, #0
10002d4c:	d000      	beq.n	10002d50 <cbvprintf_package+0x1e4>
10002d4e:	e767      	b.n	10002c20 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
10002d50:	2825      	cmp	r0, #37	; 0x25
10002d52:	d1f2      	bne.n	10002d3a <cbvprintf_package+0x1ce>
					arg_idx++;
10002d54:	9b06      	ldr	r3, [sp, #24]
10002d56:	3301      	adds	r3, #1
10002d58:	9306      	str	r3, [sp, #24]
					parsing = true;
10002d5a:	2301      	movs	r3, #1
10002d5c:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
10002d5e:	2504      	movs	r5, #4
10002d60:	e7ea      	b.n	10002d38 <cbvprintf_package+0x1cc>
			switch (*fmt) {
10002d62:	2200      	movs	r2, #0
10002d64:	9b01      	ldr	r3, [sp, #4]
10002d66:	9201      	str	r2, [sp, #4]
10002d68:	e78c      	b.n	10002c84 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
10002d6a:	2e08      	cmp	r6, #8
10002d6c:	d001      	beq.n	10002d72 <cbvprintf_package+0x206>
					return -EINVAL;
10002d6e:	2016      	movs	r0, #22
10002d70:	e716      	b.n	10002ba0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
10002d72:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
10002d74:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
10002d76:	3407      	adds	r4, #7
10002d78:	439c      	bics	r4, r3
10002d7a:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
10002d7c:	600a      	str	r2, [r1, #0]
10002d7e:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
10002d80:	9b00      	ldr	r3, [sp, #0]
10002d82:	2608      	movs	r6, #8
10002d84:	3308      	adds	r3, #8
10002d86:	9300      	str	r3, [sp, #0]
10002d88:	e7d7      	b.n	10002d3a <cbvprintf_package+0x1ce>
		if (is_str_arg) {
10002d8a:	2b00      	cmp	r3, #0
10002d8c:	d10a      	bne.n	10002da4 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
10002d8e:	2e04      	cmp	r6, #4
10002d90:	d101      	bne.n	10002d96 <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
10002d92:	3404      	adds	r4, #4
			if (buf0 != NULL) {
10002d94:	e7a0      	b.n	10002cd8 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
10002d96:	2e08      	cmp	r6, #8
10002d98:	d1e9      	bne.n	10002d6e <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
10002d9a:	2307      	movs	r3, #7
10002d9c:	3407      	adds	r4, #7
10002d9e:	439c      	bics	r4, r3
10002da0:	3408      	adds	r4, #8
			if (buf0 != NULL) {
10002da2:	e7ed      	b.n	10002d80 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
10002da4:	9b05      	ldr	r3, [sp, #20]
10002da6:	3302      	adds	r3, #2
10002da8:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10002dac:	3b01      	subs	r3, #1
10002dae:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
10002db0:	cc08      	ldmia	r4!, {r3}
10002db2:	9304      	str	r3, [sp, #16]
10002db4:	e70a      	b.n	10002bcc <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
10002db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002db8:	079b      	lsls	r3, r3, #30
10002dba:	d523      	bpl.n	10002e04 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002dbc:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
10002dbe:	9b00      	ldr	r3, [sp, #0]
10002dc0:	1bda      	subs	r2, r3, r7
10002dc2:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
10002dc4:	2080      	movs	r0, #128	; 0x80
10002dc6:	0080      	lsls	r0, r0, #2
10002dc8:	4282      	cmp	r2, r0
10002dca:	d2d0      	bcs.n	10002d6e <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
10002dcc:	9a03      	ldr	r2, [sp, #12]
10002dce:	2a0f      	cmp	r2, #15
10002dd0:	d8cd      	bhi.n	10002d6e <cbvprintf_package+0x202>
				if (buf0 != NULL) {
10002dd2:	2f00      	cmp	r7, #0
10002dd4:	d01e      	beq.n	10002e14 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
10002dd6:	9803      	ldr	r0, [sp, #12]
10002dd8:	b2db      	uxtb	r3, r3
10002dda:	aa0c      	add	r2, sp, #48	; 0x30
10002ddc:	5413      	strb	r3, [r2, r0]
10002dde:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
10002de0:	9b06      	ldr	r3, [sp, #24]
10002de2:	aa10      	add	r2, sp, #64	; 0x40
10002de4:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
10002de6:	2900      	cmp	r1, #0
10002de8:	d100      	bne.n	10002dec <cbvprintf_package+0x280>
10002dea:	e715      	b.n	10002c18 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
10002dec:	2280      	movs	r2, #128	; 0x80
10002dee:	4663      	mov	r3, ip
10002df0:	4252      	negs	r2, r2
10002df2:	4313      	orrs	r3, r2
10002df4:	aa0c      	add	r2, sp, #48	; 0x30
10002df6:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
10002df8:	9b07      	ldr	r3, [sp, #28]
10002dfa:	3301      	adds	r3, #1
10002dfc:	9307      	str	r3, [sp, #28]
				s_idx++;
10002dfe:	9b03      	ldr	r3, [sp, #12]
10002e00:	3301      	adds	r3, #1
10002e02:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
10002e04:	9b00      	ldr	r3, [sp, #0]
10002e06:	3304      	adds	r3, #4
10002e08:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
10002e0a:	9b05      	ldr	r3, [sp, #20]
10002e0c:	3b01      	subs	r3, #1
10002e0e:	e796      	b.n	10002d3e <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
10002e10:	2100      	movs	r1, #0
10002e12:	e7d7      	b.n	10002dc4 <cbvprintf_package+0x258>
				} else if (is_ro) {
10002e14:	2900      	cmp	r1, #0
10002e16:	d003      	beq.n	10002e20 <cbvprintf_package+0x2b4>
					len += 1;
10002e18:	9b02      	ldr	r3, [sp, #8]
10002e1a:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
10002e1c:	9302      	str	r3, [sp, #8]
10002e1e:	e7ee      	b.n	10002dfe <cbvprintf_package+0x292>
					len += 2;
10002e20:	9b02      	ldr	r3, [sp, #8]
10002e22:	3302      	adds	r3, #2
10002e24:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
10002e26:	9b08      	ldr	r3, [sp, #32]
10002e28:	2b00      	cmp	r3, #0
10002e2a:	d1e8      	bne.n	10002dfe <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
10002e2c:	9804      	ldr	r0, [sp, #16]
10002e2e:	f004 fce9 	bl	10007804 <strlen>
10002e32:	9b02      	ldr	r3, [sp, #8]
10002e34:	181b      	adds	r3, r3, r0
10002e36:	e7f1      	b.n	10002e1c <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
10002e38:	2280      	movs	r2, #128	; 0x80
10002e3a:	9b00      	ldr	r3, [sp, #0]
10002e3c:	00d2      	lsls	r2, r2, #3
10002e3e:	1bdb      	subs	r3, r3, r7
10002e40:	4293      	cmp	r3, r2
10002e42:	d294      	bcs.n	10002d6e <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
10002e44:	2f00      	cmp	r7, #0
10002e46:	d10b      	bne.n	10002e60 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
10002e48:	9802      	ldr	r0, [sp, #8]
10002e4a:	3808      	subs	r0, #8
10002e4c:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
10002e4e:	b015      	add	sp, #84	; 0x54
10002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e52:	46c0      	nop			; (mov r8, r8)
10002e54:	1000df70 	.word	0x1000df70
10002e58:	10012d28 	.word	0x10012d28
10002e5c:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10002e60:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002e62:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
10002e64:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10002e66:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002e68:	466b      	mov	r3, sp
10002e6a:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
10002e6c:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002e6e:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
10002e70:	2a00      	cmp	r2, #0
10002e72:	d00c      	beq.n	10002e8e <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10002e74:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
10002e76:	9b07      	ldr	r3, [sp, #28]
10002e78:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
10002e7a:	2b00      	cmp	r3, #0
10002e7c:	d120      	bne.n	10002ec0 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
10002e7e:	2600      	movs	r6, #0
10002e80:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
10002e82:	9b03      	ldr	r3, [sp, #12]
10002e84:	42b3      	cmp	r3, r6
10002e86:	d120      	bne.n	10002eca <cbvprintf_package+0x35e>
	return BUF_OFFSET;
10002e88:	9b00      	ldr	r3, [sp, #0]
10002e8a:	1bd8      	subs	r0, r3, r7
10002e8c:	e7df      	b.n	10002e4e <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
10002e8e:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
10002e90:	e7f1      	b.n	10002e76 <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
10002e92:	ac0c      	add	r4, sp, #48	; 0x30
10002e94:	56e4      	ldrsb	r4, [r4, r3]
10002e96:	a90c      	add	r1, sp, #48	; 0x30
10002e98:	5c59      	ldrb	r1, [r3, r1]
10002e9a:	2c00      	cmp	r4, #0
10002e9c:	da0b      	bge.n	10002eb6 <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
10002e9e:	9c00      	ldr	r4, [sp, #0]
10002ea0:	9d02      	ldr	r5, [sp, #8]
10002ea2:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10002ea4:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
10002ea6:	42a5      	cmp	r5, r4
10002ea8:	d200      	bcs.n	10002eac <cbvprintf_package+0x340>
10002eaa:	e678      	b.n	10002b9e <cbvprintf_package+0x32>
			*buf++ = pos;
10002eac:	9c00      	ldr	r4, [sp, #0]
10002eae:	7021      	strb	r1, [r4, #0]
10002eb0:	0021      	movs	r1, r4
10002eb2:	3101      	adds	r1, #1
10002eb4:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
10002eb6:	3301      	adds	r3, #1
10002eb8:	9903      	ldr	r1, [sp, #12]
10002eba:	4299      	cmp	r1, r3
10002ebc:	d1e9      	bne.n	10002e92 <cbvprintf_package+0x326>
10002ebe:	e7de      	b.n	10002e7e <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
10002ec0:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
10002ec2:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10002ec4:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
10002ec6:	1bd2      	subs	r2, r2, r7
10002ec8:	e7f6      	b.n	10002eb8 <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
10002eca:	9b07      	ldr	r3, [sp, #28]
10002ecc:	2b00      	cmp	r3, #0
10002ece:	d002      	beq.n	10002ed6 <cbvprintf_package+0x36a>
10002ed0:	782b      	ldrb	r3, [r5, #0]
10002ed2:	2b7f      	cmp	r3, #127	; 0x7f
10002ed4:	d821      	bhi.n	10002f1a <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
10002ed6:	9b08      	ldr	r3, [sp, #32]
10002ed8:	2b00      	cmp	r3, #0
10002eda:	d021      	beq.n	10002f20 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
10002edc:	ab10      	add	r3, sp, #64	; 0x40
10002ede:	9a00      	ldr	r2, [sp, #0]
10002ee0:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
10002ee2:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10002ee4:	7013      	strb	r3, [r2, #0]
10002ee6:	0013      	movs	r3, r2
10002ee8:	3301      	adds	r3, #1
10002eea:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
10002eec:	2301      	movs	r3, #1
10002eee:	9a00      	ldr	r2, [sp, #0]
10002ef0:	1bdb      	subs	r3, r3, r7
10002ef2:	191b      	adds	r3, r3, r4
10002ef4:	18d3      	adds	r3, r2, r3
10002ef6:	9a02      	ldr	r2, [sp, #8]
10002ef8:	429a      	cmp	r2, r3
10002efa:	d200      	bcs.n	10002efe <cbvprintf_package+0x392>
10002efc:	e64f      	b.n	10002b9e <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
10002efe:	9b00      	ldr	r3, [sp, #0]
10002f00:	9a00      	ldr	r2, [sp, #0]
10002f02:	3301      	adds	r3, #1
10002f04:	9301      	str	r3, [sp, #4]
10002f06:	782b      	ldrb	r3, [r5, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
10002f08:	9904      	ldr	r1, [sp, #16]
10002f0a:	7013      	strb	r3, [r2, #0]
10002f0c:	9801      	ldr	r0, [sp, #4]
10002f0e:	0022      	movs	r2, r4
10002f10:	f004 fba8 	bl	10007664 <memcpy>
		buf += size;
10002f14:	9b01      	ldr	r3, [sp, #4]
10002f16:	191b      	adds	r3, r3, r4
10002f18:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
10002f1a:	3601      	adds	r6, #1
10002f1c:	3501      	adds	r5, #1
10002f1e:	e7b0      	b.n	10002e82 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
10002f20:	782b      	ldrb	r3, [r5, #0]
10002f22:	009b      	lsls	r3, r3, #2
10002f24:	18fb      	adds	r3, r7, r3
10002f26:	681a      	ldr	r2, [r3, #0]
10002f28:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10002f2a:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
10002f2c:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10002f2e:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
10002f30:	f004 fc68 	bl	10007804 <strlen>
10002f34:	1c44      	adds	r4, r0, #1
10002f36:	e7d9      	b.n	10002eec <cbvprintf_package+0x380>
		return -EFAULT;
10002f38:	200e      	movs	r0, #14
10002f3a:	e631      	b.n	10002ba0 <cbvprintf_package+0x34>

10002f3c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
10002f3c:	4b01      	ldr	r3, [pc, #4]	; (10002f44 <__printk_hook_install+0x8>)
10002f3e:	6018      	str	r0, [r3, #0]
}
10002f40:	4770      	bx	lr
10002f42:	46c0      	nop			; (mov r8, r8)
10002f44:	2000077c 	.word	0x2000077c

10002f48 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
10002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f4a:	0003      	movs	r3, r0
	const char *sp = *str;
10002f4c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
10002f4e:	2404      	movs	r4, #4
	size_t val = 0;
10002f50:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
10002f52:	260a      	movs	r6, #10
	while (isdigit((int)(unsigned char)*sp) != 0) {
10002f54:	4d05      	ldr	r5, [pc, #20]	; (10002f6c <extract_decimal+0x24>)
10002f56:	7811      	ldrb	r1, [r2, #0]
10002f58:	5c6f      	ldrb	r7, [r5, r1]
10002f5a:	4227      	tst	r7, r4
10002f5c:	d101      	bne.n	10002f62 <extract_decimal+0x1a>
	}
	*str = sp;
10002f5e:	601a      	str	r2, [r3, #0]
	return val;
}
10002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
10002f62:	4370      	muls	r0, r6
10002f64:	3830      	subs	r0, #48	; 0x30
10002f66:	3201      	adds	r2, #1
10002f68:	1840      	adds	r0, r0, r1
10002f6a:	e7f4      	b.n	10002f56 <extract_decimal+0xe>
10002f6c:	1000e5dd 	.word	0x1000e5dd

10002f70 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
10002f70:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f72:	b085      	sub	sp, #20
10002f74:	9001      	str	r0, [sp, #4]
10002f76:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier) != 0;
10002f78:	78d3      	ldrb	r3, [r2, #3]
{
10002f7a:	0015      	movs	r5, r2
	bool upcase = isupper((int)conv->specifier) != 0;
10002f7c:	4a24      	ldr	r2, [pc, #144]	; (10003010 <encode_uint+0xa0>)
{
10002f7e:	000f      	movs	r7, r1
10002f80:	5cd1      	ldrb	r1, [r2, r3]
10002f82:	2203      	movs	r2, #3
10002f84:	4011      	ands	r1, r2
	switch (specifier) {
10002f86:	2408      	movs	r4, #8
10002f88:	9102      	str	r1, [sp, #8]
10002f8a:	2b6f      	cmp	r3, #111	; 0x6f
10002f8c:	d00a      	beq.n	10002fa4 <encode_uint+0x34>
10002f8e:	d804      	bhi.n	10002f9a <encode_uint+0x2a>
		return 16;
10002f90:	1924      	adds	r4, r4, r4
	switch (specifier) {
10002f92:	2b58      	cmp	r3, #88	; 0x58
10002f94:	d006      	beq.n	10002fa4 <encode_uint+0x34>
		return 10;
10002f96:	3c06      	subs	r4, #6
10002f98:	e004      	b.n	10002fa4 <encode_uint+0x34>
	switch (specifier) {
10002f9a:	2208      	movs	r2, #8
		return 16;
10002f9c:	2410      	movs	r4, #16
	switch (specifier) {
10002f9e:	4393      	bics	r3, r2
10002fa0:	2b70      	cmp	r3, #112	; 0x70
10002fa2:	d1f8      	bne.n	10002f96 <encode_uint+0x26>
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
10002fa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
10002fa6:	0022      	movs	r2, r4
10002fa8:	2300      	movs	r3, #0
10002faa:	0039      	movs	r1, r7
10002fac:	9801      	ldr	r0, [sp, #4]
10002fae:	f7fd f9e9 	bl	10000384 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
10002fb2:	0013      	movs	r3, r2
10002fb4:	468c      	mov	ip, r1
10002fb6:	b2d2      	uxtb	r2, r2
10002fb8:	2b09      	cmp	r3, #9
10002fba:	d81a      	bhi.n	10002ff2 <encode_uint+0x82>
10002fbc:	3230      	adds	r2, #48	; 0x30
10002fbe:	b2d3      	uxtb	r3, r2
10002fc0:	3e01      	subs	r6, #1
10002fc2:	7033      	strb	r3, [r6, #0]
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
10002fc4:	2300      	movs	r3, #0
10002fc6:	42bb      	cmp	r3, r7
10002fc8:	d102      	bne.n	10002fd0 <encode_uint+0x60>
10002fca:	9b01      	ldr	r3, [sp, #4]
10002fcc:	429c      	cmp	r4, r3
10002fce:	d802      	bhi.n	10002fd6 <encode_uint+0x66>
10002fd0:	9b03      	ldr	r3, [sp, #12]
10002fd2:	429e      	cmp	r6, r3
10002fd4:	d80a      	bhi.n	10002fec <encode_uint+0x7c>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
10002fd6:	782b      	ldrb	r3, [r5, #0]
10002fd8:	069b      	lsls	r3, r3, #26
10002fda:	d504      	bpl.n	10002fe6 <encode_uint+0x76>
		if (radix == 8) {
10002fdc:	2c08      	cmp	r4, #8
10002fde:	d110      	bne.n	10003002 <encode_uint+0x92>
			conv->altform_0 = true;
10002fe0:	78ab      	ldrb	r3, [r5, #2]
10002fe2:	4323      	orrs	r3, r4
10002fe4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
10002fe6:	0030      	movs	r0, r6
10002fe8:	b005      	add	sp, #20
10002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10002fec:	4667      	mov	r7, ip
10002fee:	9001      	str	r0, [sp, #4]
10002ff0:	e7d9      	b.n	10002fa6 <encode_uint+0x36>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002ff2:	0013      	movs	r3, r2
10002ff4:	9902      	ldr	r1, [sp, #8]
10002ff6:	3357      	adds	r3, #87	; 0x57
10002ff8:	b2db      	uxtb	r3, r3
10002ffa:	2901      	cmp	r1, #1
10002ffc:	d1e0      	bne.n	10002fc0 <encode_uint+0x50>
10002ffe:	3237      	adds	r2, #55	; 0x37
10003000:	e7dd      	b.n	10002fbe <encode_uint+0x4e>
		} else if (radix == 16) {
10003002:	2c10      	cmp	r4, #16
10003004:	d1ef      	bne.n	10002fe6 <encode_uint+0x76>
			conv->altform_0c = true;
10003006:	78ab      	ldrb	r3, [r5, #2]
10003008:	431c      	orrs	r4, r3
1000300a:	70ac      	strb	r4, [r5, #2]
	return bp;
1000300c:	e7eb      	b.n	10002fe6 <encode_uint+0x76>
1000300e:	46c0      	nop			; (mov r8, r8)
10003010:	1000e5dd 	.word	0x1000e5dd

10003014 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10003014:	b5f0      	push	{r4, r5, r6, r7, lr}
10003016:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10003018:	2700      	movs	r7, #0
{
1000301a:	b09b      	sub	sp, #108	; 0x6c
1000301c:	9004      	str	r0, [sp, #16]
1000301e:	9105      	str	r1, [sp, #20]
10003020:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10003022:	9b08      	ldr	r3, [sp, #32]
10003024:	7818      	ldrb	r0, [r3, #0]
10003026:	2800      	cmp	r0, #0
10003028:	d101      	bne.n	1000302e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
1000302a:	0038      	movs	r0, r7
1000302c:	e328      	b.n	10003680 <z_cbvprintf_impl+0x66c>
			OUTC(*fp++);
1000302e:	9b08      	ldr	r3, [sp, #32]
10003030:	3301      	adds	r3, #1
10003032:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10003034:	2825      	cmp	r0, #37	; 0x25
10003036:	d007      	beq.n	10003048 <z_cbvprintf_impl+0x34>
			OUTC('%');
10003038:	9905      	ldr	r1, [sp, #20]
1000303a:	9b04      	ldr	r3, [sp, #16]
1000303c:	4798      	blx	r3
1000303e:	2800      	cmp	r0, #0
10003040:	da00      	bge.n	10003044 <z_cbvprintf_impl+0x30>
10003042:	e31d      	b.n	10003680 <z_cbvprintf_impl+0x66c>
10003044:	3701      	adds	r7, #1
		if (bps == NULL) {
10003046:	e1e2      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
		} state = {
10003048:	ad14      	add	r5, sp, #80	; 0x50
1000304a:	2218      	movs	r2, #24
1000304c:	2100      	movs	r1, #0
1000304e:	0028      	movs	r0, r5
10003050:	f004 fb50 	bl	100076f4 <memset>
	if (*sp == '%') {
10003054:	9b08      	ldr	r3, [sp, #32]
10003056:	785b      	ldrb	r3, [r3, #1]
10003058:	2b25      	cmp	r3, #37	; 0x25
1000305a:	d114      	bne.n	10003086 <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
1000305c:	9a08      	ldr	r2, [sp, #32]
1000305e:	72eb      	strb	r3, [r5, #11]
10003060:	3202      	adds	r2, #2
10003062:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10003064:	ab14      	add	r3, sp, #80	; 0x50
10003066:	7a5a      	ldrb	r2, [r3, #9]
10003068:	07d1      	lsls	r1, r2, #31
1000306a:	d400      	bmi.n	1000306e <z_cbvprintf_impl+0x5a>
1000306c:	e17e      	b.n	1000336c <z_cbvprintf_impl+0x358>
			width = va_arg(ap, int);
1000306e:	cc02      	ldmia	r4!, {r1}
10003070:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10003072:	2900      	cmp	r1, #0
10003074:	db00      	blt.n	10003078 <z_cbvprintf_impl+0x64>
10003076:	e17e      	b.n	10003376 <z_cbvprintf_impl+0x362>
				conv->flag_dash = true;
10003078:	2104      	movs	r1, #4
1000307a:	7a18      	ldrb	r0, [r3, #8]
1000307c:	4301      	orrs	r1, r0
1000307e:	7219      	strb	r1, [r3, #8]
				width = -width;
10003080:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10003082:	425b      	negs	r3, r3
10003084:	e176      	b.n	10003374 <z_cbvprintf_impl+0x360>
10003086:	2200      	movs	r2, #0
		switch (*sp) {
10003088:	2601      	movs	r6, #1
1000308a:	0015      	movs	r5, r2
1000308c:	0010      	movs	r0, r2
1000308e:	4694      	mov	ip, r2
10003090:	9203      	str	r2, [sp, #12]
10003092:	9b07      	ldr	r3, [sp, #28]
10003094:	781b      	ldrb	r3, [r3, #0]
10003096:	2b2b      	cmp	r3, #43	; 0x2b
10003098:	d100      	bne.n	1000309c <z_cbvprintf_impl+0x88>
1000309a:	e091      	b.n	100031c0 <z_cbvprintf_impl+0x1ac>
1000309c:	d900      	bls.n	100030a0 <z_cbvprintf_impl+0x8c>
1000309e:	e088      	b.n	100031b2 <z_cbvprintf_impl+0x19e>
100030a0:	2b20      	cmp	r3, #32
100030a2:	d100      	bne.n	100030a6 <z_cbvprintf_impl+0x92>
100030a4:	e091      	b.n	100031ca <z_cbvprintf_impl+0x1b6>
100030a6:	2b23      	cmp	r3, #35	; 0x23
100030a8:	d100      	bne.n	100030ac <z_cbvprintf_impl+0x98>
100030aa:	e090      	b.n	100031ce <z_cbvprintf_impl+0x1ba>
100030ac:	2a00      	cmp	r2, #0
100030ae:	d005      	beq.n	100030bc <z_cbvprintf_impl+0xa8>
100030b0:	ae14      	add	r6, sp, #80	; 0x50
100030b2:	7a32      	ldrb	r2, [r6, #8]
100030b4:	0011      	movs	r1, r2
100030b6:	2240      	movs	r2, #64	; 0x40
100030b8:	430a      	orrs	r2, r1
100030ba:	7232      	strb	r2, [r6, #8]
100030bc:	9a03      	ldr	r2, [sp, #12]
100030be:	2a00      	cmp	r2, #0
100030c0:	d004      	beq.n	100030cc <z_cbvprintf_impl+0xb8>
100030c2:	2220      	movs	r2, #32
100030c4:	a914      	add	r1, sp, #80	; 0x50
100030c6:	7a0e      	ldrb	r6, [r1, #8]
100030c8:	4332      	orrs	r2, r6
100030ca:	720a      	strb	r2, [r1, #8]
100030cc:	2d00      	cmp	r5, #0
100030ce:	d004      	beq.n	100030da <z_cbvprintf_impl+0xc6>
100030d0:	2210      	movs	r2, #16
100030d2:	a914      	add	r1, sp, #80	; 0x50
100030d4:	7a0d      	ldrb	r5, [r1, #8]
100030d6:	432a      	orrs	r2, r5
100030d8:	720a      	strb	r2, [r1, #8]
100030da:	2800      	cmp	r0, #0
100030dc:	d004      	beq.n	100030e8 <z_cbvprintf_impl+0xd4>
100030de:	2208      	movs	r2, #8
100030e0:	a914      	add	r1, sp, #80	; 0x50
100030e2:	7a08      	ldrb	r0, [r1, #8]
100030e4:	4302      	orrs	r2, r0
100030e6:	720a      	strb	r2, [r1, #8]
100030e8:	4662      	mov	r2, ip
100030ea:	2a00      	cmp	r2, #0
100030ec:	d004      	beq.n	100030f8 <z_cbvprintf_impl+0xe4>
100030ee:	2204      	movs	r2, #4
100030f0:	a914      	add	r1, sp, #80	; 0x50
100030f2:	7a08      	ldrb	r0, [r1, #8]
100030f4:	4302      	orrs	r2, r0
100030f6:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100030f8:	2044      	movs	r0, #68	; 0x44
100030fa:	a914      	add	r1, sp, #80	; 0x50
100030fc:	7a0a      	ldrb	r2, [r1, #8]
100030fe:	4010      	ands	r0, r2
10003100:	2844      	cmp	r0, #68	; 0x44
10003102:	d102      	bne.n	1000310a <z_cbvprintf_impl+0xf6>
		conv->flag_zero = false;
10003104:	2040      	movs	r0, #64	; 0x40
10003106:	4382      	bics	r2, r0
10003108:	720a      	strb	r2, [r1, #8]
	sp = extract_width(conv, sp);
1000310a:	9a07      	ldr	r2, [sp, #28]
	conv->width_present = true;
1000310c:	ad14      	add	r5, sp, #80	; 0x50
1000310e:	920d      	str	r2, [sp, #52]	; 0x34
10003110:	2280      	movs	r2, #128	; 0x80
10003112:	7a29      	ldrb	r1, [r5, #8]
10003114:	4252      	negs	r2, r2
10003116:	430a      	orrs	r2, r1
10003118:	722a      	strb	r2, [r5, #8]
	if (*sp == '*') {
1000311a:	2b2a      	cmp	r3, #42	; 0x2a
1000311c:	d15b      	bne.n	100031d6 <z_cbvprintf_impl+0x1c2>
		conv->width_star = true;
1000311e:	7a6a      	ldrb	r2, [r5, #9]
10003120:	3b29      	subs	r3, #41	; 0x29
10003122:	4313      	orrs	r3, r2
10003124:	726b      	strb	r3, [r5, #9]
		return ++sp;
10003126:	9b07      	ldr	r3, [sp, #28]
10003128:	3301      	adds	r3, #1
	conv->prec_present = (*sp == '.');
1000312a:	7819      	ldrb	r1, [r3, #0]
1000312c:	2602      	movs	r6, #2
1000312e:	0008      	movs	r0, r1
10003130:	382e      	subs	r0, #46	; 0x2e
10003132:	4242      	negs	r2, r0
10003134:	4150      	adcs	r0, r2
10003136:	ad14      	add	r5, sp, #80	; 0x50
10003138:	7a6a      	ldrb	r2, [r5, #9]
1000313a:	0040      	lsls	r0, r0, #1
1000313c:	43b2      	bics	r2, r6
1000313e:	4302      	orrs	r2, r0
10003140:	726a      	strb	r2, [r5, #9]
	if (!conv->prec_present) {
10003142:	292e      	cmp	r1, #46	; 0x2e
10003144:	d109      	bne.n	1000315a <z_cbvprintf_impl+0x146>
	++sp;
10003146:	1c5a      	adds	r2, r3, #1
10003148:	920d      	str	r2, [sp, #52]	; 0x34
	if (*sp == '*') {
1000314a:	785a      	ldrb	r2, [r3, #1]
1000314c:	2a2a      	cmp	r2, #42	; 0x2a
1000314e:	d152      	bne.n	100031f6 <z_cbvprintf_impl+0x1e2>
		conv->prec_star = true;
10003150:	7a69      	ldrb	r1, [r5, #9]
10003152:	3a26      	subs	r2, #38	; 0x26
10003154:	430a      	orrs	r2, r1
10003156:	726a      	strb	r2, [r5, #9]
		return ++sp;
10003158:	199b      	adds	r3, r3, r6
	switch (*sp) {
1000315a:	7819      	ldrb	r1, [r3, #0]
1000315c:	aa14      	add	r2, sp, #80	; 0x50
1000315e:	296c      	cmp	r1, #108	; 0x6c
10003160:	d072      	beq.n	10003248 <z_cbvprintf_impl+0x234>
10003162:	d856      	bhi.n	10003212 <z_cbvprintf_impl+0x1fe>
10003164:	2968      	cmp	r1, #104	; 0x68
10003166:	d05d      	beq.n	10003224 <z_cbvprintf_impl+0x210>
10003168:	296a      	cmp	r1, #106	; 0x6a
1000316a:	d079      	beq.n	10003260 <z_cbvprintf_impl+0x24c>
1000316c:	294c      	cmp	r1, #76	; 0x4c
1000316e:	d100      	bne.n	10003172 <z_cbvprintf_impl+0x15e>
10003170:	e080      	b.n	10003274 <z_cbvprintf_impl+0x260>
	conv->specifier = *sp++;
10003172:	1c5a      	adds	r2, r3, #1
10003174:	7819      	ldrb	r1, [r3, #0]
10003176:	9207      	str	r2, [sp, #28]
10003178:	aa14      	add	r2, sp, #80	; 0x50
		if (conv->length_mod == LENGTH_UPPER_L) {
1000317a:	7a53      	ldrb	r3, [r2, #9]
	conv->specifier = *sp++;
1000317c:	72d1      	strb	r1, [r2, #11]
	switch (conv->specifier) {
1000317e:	2978      	cmp	r1, #120	; 0x78
10003180:	d900      	bls.n	10003184 <z_cbvprintf_impl+0x170>
10003182:	e0ee      	b.n	10003362 <z_cbvprintf_impl+0x34e>
10003184:	296d      	cmp	r1, #109	; 0x6d
10003186:	d87c      	bhi.n	10003282 <z_cbvprintf_impl+0x26e>
10003188:	2969      	cmp	r1, #105	; 0x69
1000318a:	d900      	bls.n	1000318e <z_cbvprintf_impl+0x17a>
1000318c:	e0e9      	b.n	10003362 <z_cbvprintf_impl+0x34e>
1000318e:	2957      	cmp	r1, #87	; 0x57
10003190:	d900      	bls.n	10003194 <z_cbvprintf_impl+0x180>
10003192:	e091      	b.n	100032b8 <z_cbvprintf_impl+0x2a4>
10003194:	2941      	cmp	r1, #65	; 0x41
10003196:	d003      	beq.n	100031a0 <z_cbvprintf_impl+0x18c>
10003198:	3945      	subs	r1, #69	; 0x45
1000319a:	2902      	cmp	r1, #2
1000319c:	d900      	bls.n	100031a0 <z_cbvprintf_impl+0x18c>
1000319e:	e0e0      	b.n	10003362 <z_cbvprintf_impl+0x34e>
		conv->specifier_cat = SPECIFIER_FP;
100031a0:	2307      	movs	r3, #7
100031a2:	a914      	add	r1, sp, #80	; 0x50
100031a4:	7a8a      	ldrb	r2, [r1, #10]
100031a6:	439a      	bics	r2, r3
100031a8:	3b03      	subs	r3, #3
100031aa:	4313      	orrs	r3, r2
100031ac:	728b      	strb	r3, [r1, #10]
			unsupported = true;
100031ae:	2301      	movs	r3, #1
			break;
100031b0:	e09f      	b.n	100032f2 <z_cbvprintf_impl+0x2de>
		switch (*sp) {
100031b2:	2b2d      	cmp	r3, #45	; 0x2d
100031b4:	d00d      	beq.n	100031d2 <z_cbvprintf_impl+0x1be>
100031b6:	2b30      	cmp	r3, #48	; 0x30
100031b8:	d000      	beq.n	100031bc <z_cbvprintf_impl+0x1a8>
100031ba:	e777      	b.n	100030ac <z_cbvprintf_impl+0x98>
100031bc:	0032      	movs	r2, r6
100031be:	e000      	b.n	100031c2 <z_cbvprintf_impl+0x1ae>
100031c0:	0030      	movs	r0, r6
			++sp;
100031c2:	9b07      	ldr	r3, [sp, #28]
100031c4:	3301      	adds	r3, #1
100031c6:	9307      	str	r3, [sp, #28]
	} while (loop);
100031c8:	e763      	b.n	10003092 <z_cbvprintf_impl+0x7e>
		switch (*sp) {
100031ca:	0035      	movs	r5, r6
100031cc:	e7f9      	b.n	100031c2 <z_cbvprintf_impl+0x1ae>
100031ce:	9603      	str	r6, [sp, #12]
100031d0:	e7f7      	b.n	100031c2 <z_cbvprintf_impl+0x1ae>
100031d2:	46b4      	mov	ip, r6
100031d4:	e7f5      	b.n	100031c2 <z_cbvprintf_impl+0x1ae>
	size_t width = extract_decimal(&sp);
100031d6:	a80d      	add	r0, sp, #52	; 0x34
100031d8:	f7ff feb6 	bl	10002f48 <extract_decimal>
	if (sp != wp) {
100031dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100031de:	9a07      	ldr	r2, [sp, #28]
100031e0:	4293      	cmp	r3, r2
100031e2:	d0a2      	beq.n	1000312a <z_cbvprintf_impl+0x116>
		conv->unsupported |= ((conv->width_value < 0)
100031e4:	2102      	movs	r1, #2
100031e6:	7a2a      	ldrb	r2, [r5, #8]
		conv->width_value = width;
100031e8:	60e8      	str	r0, [r5, #12]
		conv->unsupported |= ((conv->width_value < 0)
100031ea:	0fc0      	lsrs	r0, r0, #31
100031ec:	0040      	lsls	r0, r0, #1
100031ee:	438a      	bics	r2, r1
100031f0:	4302      	orrs	r2, r0
100031f2:	722a      	strb	r2, [r5, #8]
100031f4:	e799      	b.n	1000312a <z_cbvprintf_impl+0x116>
	size_t prec = extract_decimal(&sp);
100031f6:	a80d      	add	r0, sp, #52	; 0x34
100031f8:	f7ff fea6 	bl	10002f48 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
100031fc:	7a2b      	ldrb	r3, [r5, #8]
	conv->prec_value = prec;
100031fe:	6128      	str	r0, [r5, #16]
	conv->unsupported |= ((conv->prec_value < 0)
10003200:	079a      	lsls	r2, r3, #30
			      || (prec != (size_t)conv->prec_value));
10003202:	4310      	orrs	r0, r2
	conv->unsupported |= ((conv->prec_value < 0)
10003204:	0fc0      	lsrs	r0, r0, #31
10003206:	0040      	lsls	r0, r0, #1
10003208:	43b3      	bics	r3, r6
1000320a:	4303      	orrs	r3, r0
1000320c:	722b      	strb	r3, [r5, #8]
	return sp;
1000320e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003210:	e7a3      	b.n	1000315a <z_cbvprintf_impl+0x146>
	switch (*sp) {
10003212:	2974      	cmp	r1, #116	; 0x74
10003214:	d029      	beq.n	1000326a <z_cbvprintf_impl+0x256>
10003216:	297a      	cmp	r1, #122	; 0x7a
10003218:	d1ab      	bne.n	10003172 <z_cbvprintf_impl+0x15e>
		conv->length_mod = LENGTH_Z;
1000321a:	2178      	movs	r1, #120	; 0x78
1000321c:	7a50      	ldrb	r0, [r2, #9]
1000321e:	4388      	bics	r0, r1
10003220:	3948      	subs	r1, #72	; 0x48
10003222:	e00d      	b.n	10003240 <z_cbvprintf_impl+0x22c>
		if (*++sp == 'h') {
10003224:	7858      	ldrb	r0, [r3, #1]
10003226:	2178      	movs	r1, #120	; 0x78
10003228:	2868      	cmp	r0, #104	; 0x68
1000322a:	d106      	bne.n	1000323a <z_cbvprintf_impl+0x226>
			conv->length_mod = LENGTH_HH;
1000322c:	7a50      	ldrb	r0, [r2, #9]
1000322e:	4388      	bics	r0, r1
10003230:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10003232:	4301      	orrs	r1, r0
10003234:	7251      	strb	r1, [r2, #9]
			++sp;
10003236:	3302      	adds	r3, #2
10003238:	e79b      	b.n	10003172 <z_cbvprintf_impl+0x15e>
			conv->length_mod = LENGTH_H;
1000323a:	7a50      	ldrb	r0, [r2, #9]
1000323c:	4388      	bics	r0, r1
1000323e:	2110      	movs	r1, #16
10003240:	4301      	orrs	r1, r0
10003242:	7251      	strb	r1, [r2, #9]
		if (*++sp == 'h') {
10003244:	3301      	adds	r3, #1
10003246:	e794      	b.n	10003172 <z_cbvprintf_impl+0x15e>
		if (*++sp == 'l') {
10003248:	7858      	ldrb	r0, [r3, #1]
1000324a:	2178      	movs	r1, #120	; 0x78
1000324c:	286c      	cmp	r0, #108	; 0x6c
1000324e:	d103      	bne.n	10003258 <z_cbvprintf_impl+0x244>
			conv->length_mod = LENGTH_LL;
10003250:	7a50      	ldrb	r0, [r2, #9]
10003252:	4388      	bics	r0, r1
10003254:	3958      	subs	r1, #88	; 0x58
10003256:	e7ec      	b.n	10003232 <z_cbvprintf_impl+0x21e>
			conv->length_mod = LENGTH_L;
10003258:	7a50      	ldrb	r0, [r2, #9]
1000325a:	4388      	bics	r0, r1
1000325c:	2118      	movs	r1, #24
1000325e:	e7ef      	b.n	10003240 <z_cbvprintf_impl+0x22c>
		conv->length_mod = LENGTH_J;
10003260:	2178      	movs	r1, #120	; 0x78
10003262:	7a50      	ldrb	r0, [r2, #9]
10003264:	4388      	bics	r0, r1
10003266:	3950      	subs	r1, #80	; 0x50
10003268:	e7ea      	b.n	10003240 <z_cbvprintf_impl+0x22c>
		conv->length_mod = LENGTH_T;
1000326a:	2178      	movs	r1, #120	; 0x78
1000326c:	7a50      	ldrb	r0, [r2, #9]
1000326e:	4388      	bics	r0, r1
10003270:	3940      	subs	r1, #64	; 0x40
10003272:	e7e5      	b.n	10003240 <z_cbvprintf_impl+0x22c>
		conv->unsupported = true;
10003274:	8910      	ldrh	r0, [r2, #8]
10003276:	49b4      	ldr	r1, [pc, #720]	; (10003548 <z_cbvprintf_impl+0x534>)
10003278:	4008      	ands	r0, r1
1000327a:	49b4      	ldr	r1, [pc, #720]	; (1000354c <z_cbvprintf_impl+0x538>)
1000327c:	4301      	orrs	r1, r0
1000327e:	8111      	strh	r1, [r2, #8]
		break;
10003280:	e7e0      	b.n	10003244 <z_cbvprintf_impl+0x230>
10003282:	2001      	movs	r0, #1
10003284:	0005      	movs	r5, r0
	switch (conv->specifier) {
10003286:	396e      	subs	r1, #110	; 0x6e
10003288:	b2c9      	uxtb	r1, r1
1000328a:	408d      	lsls	r5, r1
1000328c:	0029      	movs	r1, r5
1000328e:	4db0      	ldr	r5, [pc, #704]	; (10003550 <z_cbvprintf_impl+0x53c>)
10003290:	4229      	tst	r1, r5
10003292:	d13d      	bne.n	10003310 <z_cbvprintf_impl+0x2fc>
10003294:	2524      	movs	r5, #36	; 0x24
10003296:	4229      	tst	r1, r5
10003298:	d15a      	bne.n	10003350 <z_cbvprintf_impl+0x33c>
1000329a:	4201      	tst	r1, r0
1000329c:	d061      	beq.n	10003362 <z_cbvprintf_impl+0x34e>
		conv->specifier_cat = SPECIFIER_PTR;
1000329e:	2107      	movs	r1, #7
100032a0:	7a90      	ldrb	r0, [r2, #10]
100032a2:	4388      	bics	r0, r1
100032a4:	3904      	subs	r1, #4
100032a6:	4301      	orrs	r1, r0
100032a8:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100032aa:	2278      	movs	r2, #120	; 0x78
100032ac:	4013      	ands	r3, r2
100032ae:	3b40      	subs	r3, #64	; 0x40
100032b0:	425a      	negs	r2, r3
100032b2:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
100032b4:	b2db      	uxtb	r3, r3
100032b6:	e01c      	b.n	100032f2 <z_cbvprintf_impl+0x2de>
100032b8:	2001      	movs	r0, #1
	switch (conv->specifier) {
100032ba:	000d      	movs	r5, r1
100032bc:	0006      	movs	r6, r0
100032be:	3d58      	subs	r5, #88	; 0x58
100032c0:	b2ed      	uxtb	r5, r5
100032c2:	40ae      	lsls	r6, r5
100032c4:	0035      	movs	r5, r6
100032c6:	26e2      	movs	r6, #226	; 0xe2
100032c8:	0236      	lsls	r6, r6, #8
100032ca:	4235      	tst	r5, r6
100032cc:	d000      	beq.n	100032d0 <z_cbvprintf_impl+0x2bc>
100032ce:	e767      	b.n	100031a0 <z_cbvprintf_impl+0x18c>
100032d0:	4ea0      	ldr	r6, [pc, #640]	; (10003554 <z_cbvprintf_impl+0x540>)
100032d2:	4235      	tst	r5, r6
100032d4:	d12a      	bne.n	1000332c <z_cbvprintf_impl+0x318>
100032d6:	2184      	movs	r1, #132	; 0x84
100032d8:	0289      	lsls	r1, r1, #10
100032da:	420d      	tst	r5, r1
100032dc:	d041      	beq.n	10003362 <z_cbvprintf_impl+0x34e>
		conv->specifier_cat = SPECIFIER_SINT;
100032de:	2507      	movs	r5, #7
100032e0:	7a91      	ldrb	r1, [r2, #10]
100032e2:	43a9      	bics	r1, r5
100032e4:	4301      	orrs	r1, r0
100032e6:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100032e8:	2178      	movs	r1, #120	; 0x78
100032ea:	400b      	ands	r3, r1
100032ec:	2b40      	cmp	r3, #64	; 0x40
100032ee:	d00b      	beq.n	10003308 <z_cbvprintf_impl+0x2f4>
	bool unsupported = false;
100032f0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100032f2:	aa14      	add	r2, sp, #80	; 0x50
100032f4:	7a11      	ldrb	r1, [r2, #8]
100032f6:	0788      	lsls	r0, r1, #30
100032f8:	0fc0      	lsrs	r0, r0, #31
100032fa:	4303      	orrs	r3, r0
100032fc:	2002      	movs	r0, #2
100032fe:	005b      	lsls	r3, r3, #1
10003300:	4381      	bics	r1, r0
10003302:	4319      	orrs	r1, r3
10003304:	7211      	strb	r1, [r2, #8]
	return sp;
10003306:	e6ad      	b.n	10003064 <z_cbvprintf_impl+0x50>
			conv->invalid = true;
10003308:	7a13      	ldrb	r3, [r2, #8]
1000330a:	4303      	orrs	r3, r0
		conv->invalid = true;
1000330c:	7213      	strb	r3, [r2, #8]
		break;
1000330e:	e7ef      	b.n	100032f0 <z_cbvprintf_impl+0x2dc>
		conv->specifier_cat = SPECIFIER_UINT;
10003310:	2107      	movs	r1, #7
10003312:	7a95      	ldrb	r5, [r2, #10]
10003314:	438d      	bics	r5, r1
10003316:	3905      	subs	r1, #5
10003318:	4329      	orrs	r1, r5
1000331a:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000331c:	2178      	movs	r1, #120	; 0x78
1000331e:	400b      	ands	r3, r1
10003320:	2b40      	cmp	r3, #64	; 0x40
10003322:	d1e5      	bne.n	100032f0 <z_cbvprintf_impl+0x2dc>
			conv->invalid = true;
10003324:	7a13      	ldrb	r3, [r2, #8]
10003326:	4318      	orrs	r0, r3
10003328:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
1000332a:	e7e1      	b.n	100032f0 <z_cbvprintf_impl+0x2dc>
		conv->specifier_cat = SPECIFIER_UINT;
1000332c:	2507      	movs	r5, #7
1000332e:	7a96      	ldrb	r6, [r2, #10]
10003330:	43ae      	bics	r6, r5
10003332:	3d05      	subs	r5, #5
10003334:	4335      	orrs	r5, r6
10003336:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10003338:	2578      	movs	r5, #120	; 0x78
1000333a:	402b      	ands	r3, r5
1000333c:	2b40      	cmp	r3, #64	; 0x40
1000333e:	d102      	bne.n	10003346 <z_cbvprintf_impl+0x332>
			conv->invalid = true;
10003340:	7a15      	ldrb	r5, [r2, #8]
10003342:	4328      	orrs	r0, r5
10003344:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10003346:	2963      	cmp	r1, #99	; 0x63
10003348:	d1d2      	bne.n	100032f0 <z_cbvprintf_impl+0x2dc>
		if (conv->length_mod != LENGTH_NONE) {
1000334a:	1e5a      	subs	r2, r3, #1
1000334c:	4193      	sbcs	r3, r2
1000334e:	e7b1      	b.n	100032b4 <z_cbvprintf_impl+0x2a0>
		conv->specifier_cat = SPECIFIER_PTR;
10003350:	2107      	movs	r1, #7
10003352:	7a90      	ldrb	r0, [r2, #10]
10003354:	4388      	bics	r0, r1
10003356:	3904      	subs	r1, #4
10003358:	4301      	orrs	r1, r0
1000335a:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000335c:	2278      	movs	r2, #120	; 0x78
1000335e:	4013      	ands	r3, r2
10003360:	e7f3      	b.n	1000334a <z_cbvprintf_impl+0x336>
		conv->invalid = true;
10003362:	2301      	movs	r3, #1
10003364:	aa14      	add	r2, sp, #80	; 0x50
10003366:	7a11      	ldrb	r1, [r2, #8]
10003368:	430b      	orrs	r3, r1
1000336a:	e7cf      	b.n	1000330c <z_cbvprintf_impl+0x2f8>
		} else if (conv->width_present) {
1000336c:	7a19      	ldrb	r1, [r3, #8]
1000336e:	297f      	cmp	r1, #127	; 0x7f
10003370:	d90f      	bls.n	10003392 <z_cbvprintf_impl+0x37e>
			width = conv->width_value;
10003372:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10003374:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10003376:	ab14      	add	r3, sp, #80	; 0x50
10003378:	0751      	lsls	r1, r2, #29
1000337a:	d50c      	bpl.n	10003396 <z_cbvprintf_impl+0x382>
			int arg = va_arg(ap, int);
1000337c:	cc04      	ldmia	r4!, {r2}
1000337e:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10003380:	2a00      	cmp	r2, #0
10003382:	da0c      	bge.n	1000339e <z_cbvprintf_impl+0x38a>
				conv->prec_present = false;
10003384:	2102      	movs	r1, #2
10003386:	7a5a      	ldrb	r2, [r3, #9]
10003388:	438a      	bics	r2, r1
1000338a:	725a      	strb	r2, [r3, #9]
		int precision = -1;
1000338c:	2301      	movs	r3, #1
1000338e:	425b      	negs	r3, r3
10003390:	e004      	b.n	1000339c <z_cbvprintf_impl+0x388>
		int width = -1;
10003392:	2301      	movs	r3, #1
10003394:	e675      	b.n	10003082 <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10003396:	0792      	lsls	r2, r2, #30
10003398:	d5f8      	bpl.n	1000338c <z_cbvprintf_impl+0x378>
			precision = conv->prec_value;
1000339a:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
1000339c:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
1000339e:	2500      	movs	r5, #0
100033a0:	a914      	add	r1, sp, #80	; 0x50
			= (enum specifier_cat_enum)conv->specifier_cat;
100033a2:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
100033a4:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100033a6:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100033a8:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
100033aa:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100033ac:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
100033ae:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
100033b0:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
100033b2:	2b01      	cmp	r3, #1
100033b4:	d130      	bne.n	10003418 <z_cbvprintf_impl+0x404>
			switch (length_mod) {
100033b6:	1ed0      	subs	r0, r2, #3
100033b8:	2804      	cmp	r0, #4
100033ba:	d804      	bhi.n	100033c6 <z_cbvprintf_impl+0x3b2>
100033bc:	f7fc fef4 	bl	100001a8 <__gnu_thumb1_case_uqi>
100033c0:	0e45450e 	.word	0x0e45450e
100033c4:	0e          	.byte	0x0e
100033c5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
100033c6:	6823      	ldr	r3, [r4, #0]
100033c8:	17d8      	asrs	r0, r3, #31
100033ca:	9314      	str	r3, [sp, #80]	; 0x50
100033cc:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
100033ce:	2a01      	cmp	r2, #1
100033d0:	d109      	bne.n	100033e6 <z_cbvprintf_impl+0x3d2>
				value->sint = (signed char)value->sint;
100033d2:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
100033d4:	9314      	str	r3, [sp, #80]	; 0x50
100033d6:	17db      	asrs	r3, r3, #31
100033d8:	604b      	str	r3, [r1, #4]
100033da:	e006      	b.n	100033ea <z_cbvprintf_impl+0x3d6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100033dc:	cc08      	ldmia	r4!, {r3}
100033de:	9314      	str	r3, [sp, #80]	; 0x50
100033e0:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
100033e2:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
100033e4:	e002      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
			} else if (length_mod == LENGTH_H) {
100033e6:	2a02      	cmp	r2, #2
100033e8:	d014      	beq.n	10003414 <z_cbvprintf_impl+0x400>
				value->sint = va_arg(ap, int);
100033ea:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
100033ec:	a914      	add	r1, sp, #80	; 0x50
100033ee:	7a0b      	ldrb	r3, [r1, #8]
100033f0:	2003      	movs	r0, #3
100033f2:	001d      	movs	r5, r3
100033f4:	4005      	ands	r5, r0
100033f6:	4203      	tst	r3, r0
100033f8:	d045      	beq.n	10003486 <z_cbvprintf_impl+0x472>
			OUTS(sp, fp);
100033fa:	9b07      	ldr	r3, [sp, #28]
100033fc:	9a08      	ldr	r2, [sp, #32]
100033fe:	9905      	ldr	r1, [sp, #20]
10003400:	9804      	ldr	r0, [sp, #16]
10003402:	f009 fe2e 	bl	1000d062 <outs>
10003406:	2800      	cmp	r0, #0
10003408:	da00      	bge.n	1000340c <z_cbvprintf_impl+0x3f8>
1000340a:	e139      	b.n	10003680 <z_cbvprintf_impl+0x66c>
1000340c:	183f      	adds	r7, r7, r0
			continue;
1000340e:	9b07      	ldr	r3, [sp, #28]
10003410:	9308      	str	r3, [sp, #32]
10003412:	e606      	b.n	10003022 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10003414:	b21b      	sxth	r3, r3
10003416:	e7dd      	b.n	100033d4 <z_cbvprintf_impl+0x3c0>
		} else if (specifier_cat == SPECIFIER_UINT) {
10003418:	2b02      	cmp	r3, #2
1000341a:	d125      	bne.n	10003468 <z_cbvprintf_impl+0x454>
			switch (length_mod) {
1000341c:	1ed0      	subs	r0, r2, #3
1000341e:	2804      	cmp	r0, #4
10003420:	d804      	bhi.n	1000342c <z_cbvprintf_impl+0x418>
10003422:	f7fc fec1 	bl	100001a8 <__gnu_thumb1_case_uqi>
10003426:	120d      	.short	0x120d
10003428:	1912      	.short	0x1912
1000342a:	19          	.byte	0x19
1000342b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000342c:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
1000342e:	2a01      	cmp	r2, #1
10003430:	d016      	beq.n	10003460 <z_cbvprintf_impl+0x44c>
				value->uint = va_arg(ap, unsigned int);
10003432:	9314      	str	r3, [sp, #80]	; 0x50
10003434:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10003436:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
10003438:	2a02      	cmp	r2, #2
1000343a:	d1d7      	bne.n	100033ec <z_cbvprintf_impl+0x3d8>
			value->ptr = va_arg(ap, void *);
1000343c:	9314      	str	r3, [sp, #80]	; 0x50
1000343e:	e7d5      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
					value->uint = (wchar_t)va_arg(ap,
10003440:	cc08      	ldmia	r4!, {r3}
10003442:	9314      	str	r3, [sp, #80]	; 0x50
10003444:	2300      	movs	r3, #0
10003446:	9315      	str	r3, [sp, #84]	; 0x54
10003448:	e7d0      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
					(uint_value_type)va_arg(ap,
1000344a:	2307      	movs	r3, #7
1000344c:	3407      	adds	r4, #7
1000344e:	439c      	bics	r4, r3
				value->uint =
10003450:	cc03      	ldmia	r4!, {r0, r1}
10003452:	9014      	str	r0, [sp, #80]	; 0x50
10003454:	9115      	str	r1, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
10003456:	e7c9      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
					(uint_value_type)va_arg(ap, size_t);
10003458:	cc08      	ldmia	r4!, {r3}
1000345a:	9314      	str	r3, [sp, #80]	; 0x50
1000345c:	2300      	movs	r3, #0
1000345e:	e7c0      	b.n	100033e2 <z_cbvprintf_impl+0x3ce>
				value->uint = (unsigned char)value->uint;
10003460:	b2db      	uxtb	r3, r3
10003462:	9314      	str	r3, [sp, #80]	; 0x50
10003464:	604d      	str	r5, [r1, #4]
10003466:	e7c1      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
		} else if (specifier_cat == SPECIFIER_FP) {
10003468:	2b04      	cmp	r3, #4
1000346a:	d108      	bne.n	1000347e <z_cbvprintf_impl+0x46a>
					(sint_value_type)va_arg(ap, long long);
1000346c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
1000346e:	3303      	adds	r3, #3
10003470:	439c      	bics	r4, r3
10003472:	6820      	ldr	r0, [r4, #0]
10003474:	6861      	ldr	r1, [r4, #4]
10003476:	3408      	adds	r4, #8
10003478:	9014      	str	r0, [sp, #80]	; 0x50
1000347a:	9115      	str	r1, [sp, #84]	; 0x54
1000347c:	e7b6      	b.n	100033ec <z_cbvprintf_impl+0x3d8>
		} else if (specifier_cat == SPECIFIER_PTR) {
1000347e:	2b03      	cmp	r3, #3
10003480:	d1b4      	bne.n	100033ec <z_cbvprintf_impl+0x3d8>
			value->ptr = va_arg(ap, void *);
10003482:	cc08      	ldmia	r4!, {r3}
10003484:	e7da      	b.n	1000343c <z_cbvprintf_impl+0x428>
		switch (conv->specifier) {
10003486:	7ac8      	ldrb	r0, [r1, #11]
10003488:	2878      	cmp	r0, #120	; 0x78
1000348a:	d8c0      	bhi.n	1000340e <z_cbvprintf_impl+0x3fa>
1000348c:	2862      	cmp	r0, #98	; 0x62
1000348e:	d82b      	bhi.n	100034e8 <z_cbvprintf_impl+0x4d4>
10003490:	2825      	cmp	r0, #37	; 0x25
10003492:	d100      	bne.n	10003496 <z_cbvprintf_impl+0x482>
10003494:	e5d0      	b.n	10003038 <z_cbvprintf_impl+0x24>
10003496:	2858      	cmp	r0, #88	; 0x58
10003498:	d1b9      	bne.n	1000340e <z_cbvprintf_impl+0x3fa>
			bps = encode_uint(value->uint, conv, buf, bpe);
1000349a:	9814      	ldr	r0, [sp, #80]	; 0x50
1000349c:	9915      	ldr	r1, [sp, #84]	; 0x54
1000349e:	2326      	movs	r3, #38	; 0x26
100034a0:	aa0a      	add	r2, sp, #40	; 0x28
100034a2:	189b      	adds	r3, r3, r2
100034a4:	9300      	str	r3, [sp, #0]
100034a6:	aa16      	add	r2, sp, #88	; 0x58
100034a8:	ab0e      	add	r3, sp, #56	; 0x38
100034aa:	f7ff fd61 	bl	10002f70 <encode_uint>
			if (precision >= 0) {
100034ae:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
100034b0:	0006      	movs	r6, r0
			if (precision >= 0) {
100034b2:	2b00      	cmp	r3, #0
100034b4:	db0d      	blt.n	100034d2 <z_cbvprintf_impl+0x4be>
				size_t len = bpe - bps;
100034b6:	2326      	movs	r3, #38	; 0x26
				conv->flag_zero = false;
100034b8:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
100034ba:	aa0a      	add	r2, sp, #40	; 0x28
100034bc:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
100034be:	aa14      	add	r2, sp, #80	; 0x50
100034c0:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
100034c2:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
100034c4:	4381      	bics	r1, r0
100034c6:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
100034c8:	9906      	ldr	r1, [sp, #24]
100034ca:	4299      	cmp	r1, r3
100034cc:	d901      	bls.n	100034d2 <z_cbvprintf_impl+0x4be>
					conv->pad0_value = precision - (int)len;
100034ce:	1acb      	subs	r3, r1, r3
100034d0:	9317      	str	r3, [sp, #92]	; 0x5c
		if (bps == NULL) {
100034d2:	2e00      	cmp	r6, #0
100034d4:	d09b      	beq.n	1000340e <z_cbvprintf_impl+0x3fa>
		size_t nj_len = (bpe - bps);
100034d6:	2226      	movs	r2, #38	; 0x26
100034d8:	ab0a      	add	r3, sp, #40	; 0x28
100034da:	18d2      	adds	r2, r2, r3
100034dc:	1b93      	subs	r3, r2, r6
		if (sign != 0) {
100034de:	9206      	str	r2, [sp, #24]
100034e0:	2d00      	cmp	r5, #0
100034e2:	d042      	beq.n	1000356a <z_cbvprintf_impl+0x556>
			nj_len += 1U;
100034e4:	3301      	adds	r3, #1
100034e6:	e040      	b.n	1000356a <z_cbvprintf_impl+0x556>
		switch (conv->specifier) {
100034e8:	3863      	subs	r0, #99	; 0x63
100034ea:	2815      	cmp	r0, #21
100034ec:	d88f      	bhi.n	1000340e <z_cbvprintf_impl+0x3fa>
100034ee:	f7fc fe65 	bl	100001bc <__gnu_thumb1_case_shi>
100034f2:	0033      	.short	0x0033
100034f4:	ff8e0069 	.word	0xff8e0069
100034f8:	ff8eff8e 	.word	0xff8eff8e
100034fc:	0069ff8e 	.word	0x0069ff8e
10003500:	ff8eff8e 	.word	0xff8eff8e
10003504:	ff8eff8e 	.word	0xff8eff8e
10003508:	007b00a2 	.word	0x007b00a2
1000350c:	ff8e007d 	.word	0xff8e007d
10003510:	0016ff8e 	.word	0x0016ff8e
10003514:	007bff8e 	.word	0x007bff8e
10003518:	ff8eff8e 	.word	0xff8eff8e
1000351c:	007b      	.short	0x007b
			if (precision >= 0) {
1000351e:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10003520:	9e14      	ldr	r6, [sp, #80]	; 0x50
			if (precision >= 0) {
10003522:	2b00      	cmp	r3, #0
10003524:	db0c      	blt.n	10003540 <z_cbvprintf_impl+0x52c>
				len = strnlen(bps, precision);
10003526:	0019      	movs	r1, r3
10003528:	0030      	movs	r0, r6
1000352a:	f004 f999 	bl	10007860 <strnlen>
		if (bps == NULL) {
1000352e:	2e00      	cmp	r6, #0
10003530:	d100      	bne.n	10003534 <z_cbvprintf_impl+0x520>
10003532:	e76c      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
			bpe = bps + len;
10003534:	1833      	adds	r3, r6, r0
10003536:	9306      	str	r3, [sp, #24]
		size_t nj_len = (bpe - bps);
10003538:	9b06      	ldr	r3, [sp, #24]
		char sign = 0;
1000353a:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
1000353c:	1b9b      	subs	r3, r3, r6
		if (sign != 0) {
1000353e:	e014      	b.n	1000356a <z_cbvprintf_impl+0x556>
				len = strlen(bps);
10003540:	0030      	movs	r0, r6
10003542:	f004 f95f 	bl	10007804 <strlen>
10003546:	e7f5      	b.n	10003534 <z_cbvprintf_impl+0x520>
10003548:	ffff87fd 	.word	0xffff87fd
1000354c:	00004002 	.word	0x00004002
10003550:	00000482 	.word	0x00000482
10003554:	00000801 	.word	0x00000801
			bpe = buf + 1;
10003558:	2311      	movs	r3, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
1000355a:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000355c:	ae0e      	add	r6, sp, #56	; 0x38
1000355e:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10003560:	aa0a      	add	r2, sp, #40	; 0x28
10003562:	189b      	adds	r3, r3, r2
10003564:	9306      	str	r3, [sp, #24]
		char sign = 0;
10003566:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10003568:	2301      	movs	r3, #1
		if (conv->altform_0c) {
1000356a:	aa14      	add	r2, sp, #80	; 0x50
1000356c:	7a92      	ldrb	r2, [r2, #10]
1000356e:	2110      	movs	r1, #16
10003570:	0010      	movs	r0, r2
10003572:	4008      	ands	r0, r1
10003574:	900b      	str	r0, [sp, #44]	; 0x2c
10003576:	420a      	tst	r2, r1
10003578:	d078      	beq.n	1000366c <z_cbvprintf_impl+0x658>
			nj_len += 2U;
1000357a:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
1000357c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000357e:	910a      	str	r1, [sp, #40]	; 0x28
10003580:	18cb      	adds	r3, r1, r3
		if (conv->pad_fp) {
10003582:	0652      	lsls	r2, r2, #25
10003584:	d501      	bpl.n	1000358a <z_cbvprintf_impl+0x576>
			nj_len += conv->pad0_pre_exp;
10003586:	9a18      	ldr	r2, [sp, #96]	; 0x60
10003588:	189b      	adds	r3, r3, r2
		if (width > 0) {
1000358a:	9a03      	ldr	r2, [sp, #12]
1000358c:	2a00      	cmp	r2, #0
1000358e:	dc00      	bgt.n	10003592 <z_cbvprintf_impl+0x57e>
10003590:	e087      	b.n	100036a2 <z_cbvprintf_impl+0x68e>
			width -= (int)nj_len;
10003592:	1ad3      	subs	r3, r2, r3
10003594:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10003596:	ab14      	add	r3, sp, #80	; 0x50
10003598:	7a1b      	ldrb	r3, [r3, #8]
1000359a:	075a      	lsls	r2, r3, #29
1000359c:	0fd1      	lsrs	r1, r2, #31
1000359e:	9108      	str	r1, [sp, #32]
100035a0:	2a00      	cmp	r2, #0
100035a2:	da00      	bge.n	100035a6 <z_cbvprintf_impl+0x592>
100035a4:	e07d      	b.n	100036a2 <z_cbvprintf_impl+0x68e>
				if (conv->flag_zero) {
100035a6:	065b      	lsls	r3, r3, #25
100035a8:	d400      	bmi.n	100035ac <z_cbvprintf_impl+0x598>
100035aa:	e06b      	b.n	10003684 <z_cbvprintf_impl+0x670>
					if (sign != 0) {
100035ac:	2d00      	cmp	r5, #0
100035ae:	d007      	beq.n	100035c0 <z_cbvprintf_impl+0x5ac>
						OUTC(sign);
100035b0:	0028      	movs	r0, r5
100035b2:	9905      	ldr	r1, [sp, #20]
100035b4:	9b04      	ldr	r3, [sp, #16]
100035b6:	4798      	blx	r3
100035b8:	2800      	cmp	r0, #0
100035ba:	db61      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
100035bc:	9d08      	ldr	r5, [sp, #32]
100035be:	3701      	adds	r7, #1
					pad = '0';
100035c0:	2330      	movs	r3, #48	; 0x30
100035c2:	e060      	b.n	10003686 <z_cbvprintf_impl+0x672>
				sign = '+';
100035c4:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
100035c6:	071a      	lsls	r2, r3, #28
100035c8:	d402      	bmi.n	100035d0 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
100035ca:	06db      	lsls	r3, r3, #27
100035cc:	0fdb      	lsrs	r3, r3, #31
100035ce:	015d      	lsls	r5, r3, #5
			sint = value->sint;
100035d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
100035d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
			if (sint < 0) {
100035d4:	2b00      	cmp	r3, #0
100035d6:	db00      	blt.n	100035da <z_cbvprintf_impl+0x5c6>
100035d8:	e75f      	b.n	1000349a <z_cbvprintf_impl+0x486>
				value->uint = (uint_value_type)-sint;
100035da:	2100      	movs	r1, #0
100035dc:	4250      	negs	r0, r2
100035de:	4199      	sbcs	r1, r3
				sign = '-';
100035e0:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
100035e2:	9014      	str	r0, [sp, #80]	; 0x50
100035e4:	9115      	str	r1, [sp, #84]	; 0x54
100035e6:	e758      	b.n	1000349a <z_cbvprintf_impl+0x486>
		switch (conv->specifier) {
100035e8:	2500      	movs	r5, #0
100035ea:	e756      	b.n	1000349a <z_cbvprintf_impl+0x486>
			if (value->ptr != NULL) {
100035ec:	9814      	ldr	r0, [sp, #80]	; 0x50
100035ee:	ad14      	add	r5, sp, #80	; 0x50
100035f0:	2800      	cmp	r0, #0
100035f2:	d035      	beq.n	10003660 <z_cbvprintf_impl+0x64c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
100035f4:	2326      	movs	r3, #38	; 0x26
100035f6:	aa0a      	add	r2, sp, #40	; 0x28
100035f8:	189b      	adds	r3, r3, r2
100035fa:	9300      	str	r3, [sp, #0]
100035fc:	aa16      	add	r2, sp, #88	; 0x58
100035fe:	ab0e      	add	r3, sp, #56	; 0x38
10003600:	2100      	movs	r1, #0
10003602:	f7ff fcb5 	bl	10002f70 <encode_uint>
				conv->altform_0c = true;
10003606:	23ef      	movs	r3, #239	; 0xef
10003608:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000360a:	0006      	movs	r6, r0
				conv->altform_0c = true;
1000360c:	401a      	ands	r2, r3
1000360e:	4b48      	ldr	r3, [pc, #288]	; (10003730 <z_cbvprintf_impl+0x71c>)
10003610:	4313      	orrs	r3, r2
10003612:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10003614:	2500      	movs	r5, #0
			if (precision >= 0) {
10003616:	9b06      	ldr	r3, [sp, #24]
10003618:	42ab      	cmp	r3, r5
1000361a:	db00      	blt.n	1000361e <z_cbvprintf_impl+0x60a>
1000361c:	e74b      	b.n	100034b6 <z_cbvprintf_impl+0x4a2>
		if (bps == NULL) {
1000361e:	42a8      	cmp	r0, r5
10003620:	d100      	bne.n	10003624 <z_cbvprintf_impl+0x610>
10003622:	e6f4      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
		size_t nj_len = (bpe - bps);
10003624:	2326      	movs	r3, #38	; 0x26
10003626:	aa0a      	add	r2, sp, #40	; 0x28
10003628:	189b      	adds	r3, r3, r2
1000362a:	2226      	movs	r2, #38	; 0x26
1000362c:	a90a      	add	r1, sp, #40	; 0x28
1000362e:	1852      	adds	r2, r2, r1
10003630:	1a1b      	subs	r3, r3, r0
10003632:	9206      	str	r2, [sp, #24]
10003634:	e799      	b.n	1000356a <z_cbvprintf_impl+0x556>
				store_count(conv, value->ptr, count);
10003636:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
10003638:	2a07      	cmp	r2, #7
1000363a:	d900      	bls.n	1000363e <z_cbvprintf_impl+0x62a>
1000363c:	e6e7      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
1000363e:	0010      	movs	r0, r2
10003640:	f7fc fdb2 	bl	100001a8 <__gnu_thumb1_case_uqi>
10003644:	0c06040c 	.word	0x0c06040c
10003648:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
1000364c:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
1000364e:	e6de      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
		*(short *)dp = (short)count;
10003650:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10003652:	e6dc      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
		*(intmax_t *)dp = (intmax_t)count;
10003654:	17fa      	asrs	r2, r7, #31
10003656:	601f      	str	r7, [r3, #0]
10003658:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
1000365a:	e6d8      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
1000365c:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
1000365e:	e6d6      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
			bpe = bps + 5;
10003660:	4b34      	ldr	r3, [pc, #208]	; (10003734 <z_cbvprintf_impl+0x720>)
		char sign = 0;
10003662:	0005      	movs	r5, r0
			bpe = bps + 5;
10003664:	9306      	str	r3, [sp, #24]
10003666:	4e34      	ldr	r6, [pc, #208]	; (10003738 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10003668:	2305      	movs	r3, #5
1000366a:	e77e      	b.n	1000356a <z_cbvprintf_impl+0x556>
		} else if (conv->altform_0) {
1000366c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
1000366e:	0fc9      	lsrs	r1, r1, #31
10003670:	185b      	adds	r3, r3, r1
10003672:	e783      	b.n	1000357c <z_cbvprintf_impl+0x568>
					OUTC(pad);
10003674:	9905      	ldr	r1, [sp, #20]
10003676:	9809      	ldr	r0, [sp, #36]	; 0x24
10003678:	9b04      	ldr	r3, [sp, #16]
1000367a:	4798      	blx	r3
1000367c:	2800      	cmp	r0, #0
1000367e:	da05      	bge.n	1000368c <z_cbvprintf_impl+0x678>
#undef OUTS
#undef OUTC
}
10003680:	b01b      	add	sp, #108	; 0x6c
10003682:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10003684:	2320      	movs	r3, #32
					pad = '0';
10003686:	9309      	str	r3, [sp, #36]	; 0x24
10003688:	9b03      	ldr	r3, [sp, #12]
1000368a:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
1000368c:	9b08      	ldr	r3, [sp, #32]
1000368e:	001a      	movs	r2, r3
10003690:	3a01      	subs	r2, #1
10003692:	9208      	str	r2, [sp, #32]
10003694:	2b00      	cmp	r3, #0
10003696:	dced      	bgt.n	10003674 <z_cbvprintf_impl+0x660>
10003698:	9a03      	ldr	r2, [sp, #12]
1000369a:	19d7      	adds	r7, r2, r7
1000369c:	1aff      	subs	r7, r7, r3
1000369e:	9b08      	ldr	r3, [sp, #32]
100036a0:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
100036a2:	2d00      	cmp	r5, #0
100036a4:	d006      	beq.n	100036b4 <z_cbvprintf_impl+0x6a0>
			OUTC(sign);
100036a6:	0028      	movs	r0, r5
100036a8:	9905      	ldr	r1, [sp, #20]
100036aa:	9b04      	ldr	r3, [sp, #16]
100036ac:	4798      	blx	r3
100036ae:	2800      	cmp	r0, #0
100036b0:	dbe6      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
100036b2:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
100036b4:	ab14      	add	r3, sp, #80	; 0x50
100036b6:	7a9b      	ldrb	r3, [r3, #10]
100036b8:	06da      	lsls	r2, r3, #27
100036ba:	d401      	bmi.n	100036c0 <z_cbvprintf_impl+0x6ac>
100036bc:	071b      	lsls	r3, r3, #28
100036be:	d506      	bpl.n	100036ce <z_cbvprintf_impl+0x6ba>
				OUTC('0');
100036c0:	2030      	movs	r0, #48	; 0x30
100036c2:	9905      	ldr	r1, [sp, #20]
100036c4:	9b04      	ldr	r3, [sp, #16]
100036c6:	4798      	blx	r3
100036c8:	2800      	cmp	r0, #0
100036ca:	dbd9      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
100036cc:	3701      	adds	r7, #1
			if (conv->altform_0c) {
100036ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100036d0:	2b00      	cmp	r3, #0
100036d2:	d007      	beq.n	100036e4 <z_cbvprintf_impl+0x6d0>
				OUTC(conv->specifier);
100036d4:	ab14      	add	r3, sp, #80	; 0x50
100036d6:	7ad8      	ldrb	r0, [r3, #11]
100036d8:	9905      	ldr	r1, [sp, #20]
100036da:	9b04      	ldr	r3, [sp, #16]
100036dc:	4798      	blx	r3
100036de:	2800      	cmp	r0, #0
100036e0:	dbce      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
100036e2:	3701      	adds	r7, #1
				while (width-- > 0) {
100036e4:	003d      	movs	r5, r7
100036e6:	e006      	b.n	100036f6 <z_cbvprintf_impl+0x6e2>
				OUTC('0');
100036e8:	2030      	movs	r0, #48	; 0x30
100036ea:	9905      	ldr	r1, [sp, #20]
100036ec:	9b04      	ldr	r3, [sp, #16]
100036ee:	4798      	blx	r3
100036f0:	2800      	cmp	r0, #0
100036f2:	dbc5      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
100036f4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
100036f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100036f8:	19db      	adds	r3, r3, r7
100036fa:	1b5b      	subs	r3, r3, r5
100036fc:	2b00      	cmp	r3, #0
100036fe:	dcf3      	bgt.n	100036e8 <z_cbvprintf_impl+0x6d4>
			OUTS(bps, bpe);
10003700:	0032      	movs	r2, r6
10003702:	9b06      	ldr	r3, [sp, #24]
10003704:	9905      	ldr	r1, [sp, #20]
10003706:	9804      	ldr	r0, [sp, #16]
10003708:	f009 fcab 	bl	1000d062 <outs>
1000370c:	2800      	cmp	r0, #0
1000370e:	dbb7      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
10003710:	1947      	adds	r7, r0, r5
10003712:	003d      	movs	r5, r7
		while (width > 0) {
10003714:	9b03      	ldr	r3, [sp, #12]
10003716:	195b      	adds	r3, r3, r5
10003718:	1bdb      	subs	r3, r3, r7
1000371a:	2b00      	cmp	r3, #0
1000371c:	dc00      	bgt.n	10003720 <z_cbvprintf_impl+0x70c>
1000371e:	e676      	b.n	1000340e <z_cbvprintf_impl+0x3fa>
			OUTC(' ');
10003720:	2020      	movs	r0, #32
10003722:	9905      	ldr	r1, [sp, #20]
10003724:	9b04      	ldr	r3, [sp, #16]
10003726:	4798      	blx	r3
10003728:	2800      	cmp	r0, #0
1000372a:	dba9      	blt.n	10003680 <z_cbvprintf_impl+0x66c>
1000372c:	3701      	adds	r7, #1
			--width;
1000372e:	e7f1      	b.n	10003714 <z_cbvprintf_impl+0x700>
10003730:	00007810 	.word	0x00007810
10003734:	1000f06f 	.word	0x1000f06f
10003738:	1000f06a 	.word	0x1000f06a

1000373c <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
1000373c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000373e:	b085      	sub	sp, #20
10003740:	9001      	str	r0, [sp, #4]
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
10003742:	482f      	ldr	r0, [pc, #188]	; (10003800 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
10003744:	9103      	str	r1, [sp, #12]
	if (atomic_inc(&initialized) != 0) {
10003746:	f009 fcad 	bl	1000d0a4 <atomic_inc>
1000374a:	1e06      	subs	r6, r0, #0
1000374c:	d10a      	bne.n	10003764 <z_log_init.isra.0+0x28>
	uint32_t mask = 0;
1000374e:	0004      	movs	r4, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
10003750:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10003752:	4d2c      	ldr	r5, [pc, #176]	; (10003804 <z_log_init.isra.0+0xc8>)
10003754:	4b2c      	ldr	r3, [pc, #176]	; (10003808 <z_log_init.isra.0+0xcc>)
10003756:	429d      	cmp	r5, r3
10003758:	d306      	bcc.n	10003768 <z_log_init.isra.0+0x2c>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
1000375a:	9b01      	ldr	r3, [sp, #4]
1000375c:	2b00      	cmp	r3, #0
1000375e:	d001      	beq.n	10003764 <z_log_init.isra.0+0x28>
		while (mask) {
10003760:	2c00      	cmp	r4, #0
10003762:	d11f      	bne.n	100037a4 <z_log_init.isra.0+0x68>
			}
		}
	}

	return mask;
}
10003764:	b005      	add	sp, #20
10003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (backend->autostart) {
10003768:	7b2b      	ldrb	r3, [r5, #12]
1000376a:	2b00      	cmp	r3, #0
1000376c:	d010      	beq.n	10003790 <z_log_init.isra.0+0x54>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
1000376e:	682b      	ldr	r3, [r5, #0]
10003770:	68db      	ldr	r3, [r3, #12]
10003772:	2b00      	cmp	r3, #0
10003774:	d001      	beq.n	1000377a <z_log_init.isra.0+0x3e>
		backend->api->init(backend);
10003776:	0028      	movs	r0, r5
10003778:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
1000377a:	682b      	ldr	r3, [r5, #0]
1000377c:	691b      	ldr	r3, [r3, #16]
1000377e:	2b00      	cmp	r3, #0
10003780:	d108      	bne.n	10003794 <z_log_init.isra.0+0x58>
				log_backend_enable(backend,
10003782:	686b      	ldr	r3, [r5, #4]
10003784:	2204      	movs	r2, #4
10003786:	0028      	movs	r0, r5
10003788:	6819      	ldr	r1, [r3, #0]
1000378a:	f000 f8c5 	bl	10003918 <log_backend_enable>
			i++;
1000378e:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10003790:	3510      	adds	r5, #16
10003792:	e7df      	b.n	10003754 <z_log_init.isra.0+0x18>
		return backend->api->is_ready(backend);
10003794:	0028      	movs	r0, r5
10003796:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
10003798:	2800      	cmp	r0, #0
1000379a:	d0f2      	beq.n	10003782 <z_log_init.isra.0+0x46>
				mask |= BIT(i);
1000379c:	003b      	movs	r3, r7
1000379e:	40b3      	lsls	r3, r6
100037a0:	431c      	orrs	r4, r3
100037a2:	e7f4      	b.n	1000378e <z_log_init.isra.0+0x52>
100037a4:	0027      	movs	r7, r4
		uint32_t i = __builtin_ctz(mask_cpy);
100037a6:	0020      	movs	r0, r4
100037a8:	f7fc fdcc 	bl	10000344 <__ctzsi2>
		mask_cpy &= ~BIT(i);
100037ac:	2301      	movs	r3, #1
100037ae:	4083      	lsls	r3, r0
100037b0:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100037b2:	4e14      	ldr	r6, [pc, #80]	; (10003804 <z_log_init.isra.0+0xc8>)
100037b4:	0105      	lsls	r5, r0, #4
		mask_cpy &= ~BIT(i);
100037b6:	439c      	bics	r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100037b8:	1973      	adds	r3, r6, r5
100037ba:	9301      	str	r3, [sp, #4]
100037bc:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
100037be:	9202      	str	r2, [sp, #8]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100037c0:	2b00      	cmp	r3, #0
100037c2:	d00c      	beq.n	100037de <z_log_init.isra.0+0xa2>
	if (backend->api->is_ready != NULL) {
100037c4:	59ab      	ldr	r3, [r5, r6]
100037c6:	691b      	ldr	r3, [r3, #16]
100037c8:	2b00      	cmp	r3, #0
100037ca:	d113      	bne.n	100037f4 <z_log_init.isra.0+0xb8>
			mask &= ~BIT(i);
100037cc:	9b02      	ldr	r3, [sp, #8]
					   backend->cb->ctx,
100037ce:	1976      	adds	r6, r6, r5
			mask &= ~BIT(i);
100037d0:	401f      	ands	r7, r3
			log_backend_enable(backend,
100037d2:	6873      	ldr	r3, [r6, #4]
100037d4:	2204      	movs	r2, #4
100037d6:	6819      	ldr	r1, [r3, #0]
100037d8:	9801      	ldr	r0, [sp, #4]
100037da:	f000 f89d 	bl	10003918 <log_backend_enable>
	while (mask_cpy) {
100037de:	2c00      	cmp	r4, #0
100037e0:	d1e1      	bne.n	100037a6 <z_log_init.isra.0+0x6a>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
100037e2:	9b03      	ldr	r3, [sp, #12]
100037e4:	2b00      	cmp	r3, #0
100037e6:	d003      	beq.n	100037f0 <z_log_init.isra.0+0xb4>
100037e8:	2064      	movs	r0, #100	; 0x64
100037ea:	2100      	movs	r1, #0
100037ec:	f002 fdb6 	bl	1000635c <z_impl_k_sleep>
100037f0:	003c      	movs	r4, r7
100037f2:	e7b5      	b.n	10003760 <z_log_init.isra.0+0x24>
		return backend->api->is_ready(backend);
100037f4:	9801      	ldr	r0, [sp, #4]
100037f6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100037f8:	2800      	cmp	r0, #0
100037fa:	d1f0      	bne.n	100037de <z_log_init.isra.0+0xa2>
100037fc:	e7e6      	b.n	100037cc <z_log_init.isra.0+0x90>
100037fe:	46c0      	nop			; (mov r8, r8)
10003800:	200023a4 	.word	0x200023a4
10003804:	1000e1fc 	.word	0x1000e1fc
10003808:	1000e20c 	.word	0x1000e20c

1000380c <log_format_func_t_get>:
	return format_table[log_type];
1000380c:	4b01      	ldr	r3, [pc, #4]	; (10003814 <log_format_func_t_get+0x8>)
1000380e:	0080      	lsls	r0, r0, #2
10003810:	58c0      	ldr	r0, [r0, r3]
}
10003812:	4770      	bx	lr
10003814:	1000e3a0 	.word	0x1000e3a0

10003818 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
10003818:	0003      	movs	r3, r0
1000381a:	b510      	push	{r4, lr}
1000381c:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
1000381e:	2b00      	cmp	r3, #0
10003820:	d005      	beq.n	1000382e <log_set_timestamp_func+0x16>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
10003822:	4a04      	ldr	r2, [pc, #16]	; (10003834 <log_set_timestamp_func+0x1c>)
10003824:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
10003826:	f000 fa79 	bl	10003d1c <log_output_timestamp_freq_set>
	}

	return 0;
1000382a:	2000      	movs	r0, #0
}
1000382c:	bd10      	pop	{r4, pc}
		return -EINVAL;
1000382e:	2016      	movs	r0, #22
10003830:	4240      	negs	r0, r0
10003832:	e7fb      	b.n	1000382c <log_set_timestamp_func+0x14>
10003834:	20000780 	.word	0x20000780

10003838 <log_core_init>:
	panic_mode = false;
10003838:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
1000383a:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
1000383c:	4a05      	ldr	r2, [pc, #20]	; (10003854 <log_core_init+0x1c>)
{
1000383e:	b510      	push	{r4, lr}
	panic_mode = false;
10003840:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
10003842:	4a05      	ldr	r2, [pc, #20]	; (10003858 <log_core_init+0x20>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10003844:	4805      	ldr	r0, [pc, #20]	; (1000385c <log_core_init+0x24>)
	dropped_cnt = 0;
10003846:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
10003848:	4a05      	ldr	r2, [pc, #20]	; (10003860 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
1000384a:	0089      	lsls	r1, r1, #2
	buffered_cnt = 0;
1000384c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
1000384e:	f7ff ffe3 	bl	10003818 <log_set_timestamp_func>
}
10003852:	bd10      	pop	{r4, pc}
10003854:	200024f2 	.word	0x200024f2
10003858:	2000239c 	.word	0x2000239c
1000385c:	1000d095 	.word	0x1000d095
10003860:	200023a0 	.word	0x200023a0

10003864 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
10003864:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
10003866:	4d0c      	ldr	r5, [pc, #48]	; (10003898 <z_impl_log_panic+0x34>)
10003868:	7829      	ldrb	r1, [r5, #0]
1000386a:	2900      	cmp	r1, #0
1000386c:	d108      	bne.n	10003880 <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
1000386e:	2001      	movs	r0, #1
10003870:	f7ff ff64 	bl	1000373c <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
10003874:	4c09      	ldr	r4, [pc, #36]	; (1000389c <z_impl_log_panic+0x38>)
10003876:	4b0a      	ldr	r3, [pc, #40]	; (100038a0 <z_impl_log_panic+0x3c>)
10003878:	429c      	cmp	r4, r3
1000387a:	d302      	bcc.n	10003882 <z_impl_log_panic+0x1e>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
1000387c:	2301      	movs	r3, #1
1000387e:	702b      	strb	r3, [r5, #0]
}
10003880:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
10003882:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
10003884:	795b      	ldrb	r3, [r3, #5]
10003886:	2b00      	cmp	r3, #0
10003888:	d003      	beq.n	10003892 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
1000388a:	6823      	ldr	r3, [r4, #0]
1000388c:	0020      	movs	r0, r4
1000388e:	689b      	ldr	r3, [r3, #8]
10003890:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10003892:	3410      	adds	r4, #16
10003894:	e7ef      	b.n	10003876 <z_impl_log_panic+0x12>
10003896:	46c0      	nop			; (mov r8, r8)
10003898:	200024f2 	.word	0x200024f2
1000389c:	1000e1fc 	.word	0x1000e1fc
100038a0:	1000e20c 	.word	0x1000e20c

100038a4 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
100038a4:	b510      	push	{r4, lr}
100038a6:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
100038a8:	4804      	ldr	r0, [pc, #16]	; (100038bc <z_log_dropped+0x18>)
100038aa:	f009 fbfb 	bl	1000d0a4 <atomic_inc>
	if (buffered) {
100038ae:	2c00      	cmp	r4, #0
100038b0:	d003      	beq.n	100038ba <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
100038b2:	2101      	movs	r1, #1
100038b4:	4802      	ldr	r0, [pc, #8]	; (100038c0 <z_log_dropped+0x1c>)
100038b6:	f00a fb03 	bl	1000dec0 <z_impl_atomic_sub>
		atomic_dec(&buffered_cnt);
	}
}
100038ba:	bd10      	pop	{r4, pc}
100038bc:	2000239c 	.word	0x2000239c
100038c0:	200023a0 	.word	0x200023a0

100038c4 <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
100038c4:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
100038c6:	4b0a      	ldr	r3, [pc, #40]	; (100038f0 <z_log_msg_commit+0x2c>)
{
100038c8:	0005      	movs	r5, r0
	msg->hdr.timestamp = timestamp_func();
100038ca:	681b      	ldr	r3, [r3, #0]
100038cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100038ce:	4c09      	ldr	r4, [pc, #36]	; (100038f4 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
100038d0:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100038d2:	4b09      	ldr	r3, [pc, #36]	; (100038f8 <z_log_msg_commit+0x34>)
100038d4:	429c      	cmp	r4, r3
100038d6:	d300      	bcc.n	100038da <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
100038d8:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
100038da:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
100038dc:	795b      	ldrb	r3, [r3, #5]
100038de:	2b00      	cmp	r3, #0
100038e0:	d004      	beq.n	100038ec <z_log_msg_commit+0x28>
	backend->api->process(backend, msg);
100038e2:	6823      	ldr	r3, [r4, #0]
100038e4:	0029      	movs	r1, r5
100038e6:	0020      	movs	r0, r4
100038e8:	681b      	ldr	r3, [r3, #0]
100038ea:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100038ec:	3410      	adds	r4, #16
100038ee:	e7f0      	b.n	100038d2 <z_log_msg_commit+0xe>
100038f0:	20000780 	.word	0x20000780
100038f4:	1000e1fc 	.word	0x1000e1fc
100038f8:	1000e20c 	.word	0x1000e20c

100038fc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
100038fc:	4b04      	ldr	r3, [pc, #16]	; (10003910 <log_source_name_get+0x14>)
100038fe:	4a05      	ldr	r2, [pc, #20]	; (10003914 <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10003900:	2000      	movs	r0, #0
10003902:	1a9b      	subs	r3, r3, r2
10003904:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
10003906:	4299      	cmp	r1, r3
10003908:	d201      	bcs.n	1000390e <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
1000390a:	00c9      	lsls	r1, r1, #3
1000390c:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
1000390e:	4770      	bx	lr
10003910:	1000e1fc 	.word	0x1000e1fc
10003914:	1000e194 	.word	0x1000e194

10003918 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10003918:	4b08      	ldr	r3, [pc, #32]	; (1000393c <log_backend_enable+0x24>)
{
1000391a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
1000391c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
1000391e:	6844      	ldr	r4, [r0, #4]
10003920:	111b      	asrs	r3, r3, #4
10003922:	3301      	adds	r3, #1
10003924:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
10003926:	6843      	ldr	r3, [r0, #4]
10003928:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
1000392a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
1000392c:	6843      	ldr	r3, [r0, #4]
1000392e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10003930:	6843      	ldr	r3, [r0, #4]
10003932:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
10003934:	f009 fbcf 	bl	1000d0d6 <z_log_notify_backend_enabled>
}
10003938:	bd10      	pop	{r4, pc}
1000393a:	46c0      	nop			; (mov r8, r8)
1000393c:	1000e1fc 	.word	0x1000e1fc

10003940 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10003940:	b5f0      	push	{r4, r5, r6, r7, lr}
10003942:	0004      	movs	r4, r0
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
10003944:	2000      	movs	r0, #0
{
10003946:	b087      	sub	sp, #28
10003948:	af02      	add	r7, sp, #8
1000394a:	607b      	str	r3, [r7, #4]
	if (fmt) {
1000394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
{
1000394e:	000e      	movs	r6, r1
10003950:	0015      	movs	r5, r2
	if (fmt) {
10003952:	4283      	cmp	r3, r0
10003954:	d007      	beq.n	10003966 <z_impl_z_log_msg_runtime_vcreate+0x26>
		va_copy(ap2, ap);
10003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10003958:	2110      	movs	r1, #16
		va_copy(ap2, ap);
1000395a:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
1000395c:	9300      	str	r3, [sp, #0]
1000395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10003962:	f7ff f903 	bl	10002b6c <cbvprintf_package>
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
10003966:	2207      	movs	r2, #7
10003968:	0023      	movs	r3, r4
1000396a:	4015      	ands	r5, r2
1000396c:	4013      	ands	r3, r2
1000396e:	00db      	lsls	r3, r3, #3
10003970:	4915      	ldr	r1, [pc, #84]	; (100039c8 <z_impl_z_log_msg_runtime_vcreate+0x88>)
10003972:	01ad      	lsls	r5, r5, #6
10003974:	431d      	orrs	r5, r3
10003976:	0243      	lsls	r3, r0, #9
10003978:	400b      	ands	r3, r1
1000397a:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
1000397c:	6abc      	ldr	r4, [r7, #40]	; 0x28
	struct log_msg_desc desc =
1000397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10003980:	3417      	adds	r4, #23
	struct log_msg_desc desc =
10003982:	051b      	lsls	r3, r3, #20
10003984:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10003986:	1823      	adds	r3, r4, r0
10003988:	4393      	bics	r3, r2
1000398a:	3303      	adds	r3, #3
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
1000398c:	3a04      	subs	r2, #4
1000398e:	4393      	bics	r3, r2
10003990:	3307      	adds	r3, #7
10003992:	40d3      	lsrs	r3, r2
10003994:	4093      	lsls	r3, r2
10003996:	466a      	mov	r2, sp
10003998:	1ad3      	subs	r3, r2, r3
1000399a:	469d      	mov	sp, r3
		pkg = msg->data;
	}

	if (pkg && fmt) {
1000399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		msg = alloca(msg_wlen * sizeof(int));
1000399e:	ac02      	add	r4, sp, #8
	if (pkg && fmt) {
100039a0:	2b00      	cmp	r3, #0
100039a2:	d008      	beq.n	100039b6 <z_impl_z_log_msg_runtime_vcreate+0x76>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
100039a4:	0001      	movs	r1, r0
100039a6:	0020      	movs	r0, r4
100039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100039aa:	3010      	adds	r0, #16
100039ac:	9300      	str	r3, [sp, #0]
100039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100039b2:	f7ff f8db 	bl	10002b6c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
100039b6:	002a      	movs	r2, r5
100039b8:	0031      	movs	r1, r6
100039ba:	0020      	movs	r0, r4
100039bc:	687b      	ldr	r3, [r7, #4]
100039be:	f009 fb8d 	bl	1000d0dc <z_log_msg_finalize>
	}
}
100039c2:	46bd      	mov	sp, r7
100039c4:	b005      	add	sp, #20
100039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100039c8:	000ffe00 	.word	0x000ffe00

100039cc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
100039cc:	b40e      	push	{r1, r2, r3}
100039ce:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
100039d0:	4c05      	ldr	r4, [pc, #20]	; (100039e8 <print_formatted+0x1c>)
{
100039d2:	ab05      	add	r3, sp, #20
100039d4:	cb04      	ldmia	r3!, {r2}
100039d6:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
100039d8:	0020      	movs	r0, r4
	va_start(args, fmt);
100039da:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
100039dc:	f009 fbbf 	bl	1000d15e <cbvprintf>
	va_end(args);

	return length;
}
100039e0:	bc1e      	pop	{r1, r2, r3, r4}
100039e2:	bc08      	pop	{r3}
100039e4:	b003      	add	sp, #12
100039e6:	4718      	bx	r3
100039e8:	1000d10f 	.word	0x1000d10f

100039ec <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
100039ec:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
100039ee:	06cb      	lsls	r3, r1, #27
100039f0:	d404      	bmi.n	100039fc <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
100039f2:	0689      	lsls	r1, r1, #26
100039f4:	d503      	bpl.n	100039fe <newline_print+0x12>
		print_formatted(ctx, "\n");
100039f6:	4903      	ldr	r1, [pc, #12]	; (10003a04 <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
100039f8:	f7ff ffe8 	bl	100039cc <print_formatted>
	}
}
100039fc:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
100039fe:	4902      	ldr	r1, [pc, #8]	; (10003a08 <newline_print+0x1c>)
10003a00:	e7fa      	b.n	100039f8 <newline_print+0xc>
10003a02:	46c0      	nop			; (mov r8, r8)
10003a04:	10012651 	.word	0x10012651
10003a08:	10012650 	.word	0x10012650

10003a0c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a0e:	b08f      	sub	sp, #60	; 0x3c
10003a10:	9306      	str	r3, [sp, #24]
10003a12:	ab14      	add	r3, sp, #80	; 0x50
10003a14:	781b      	ldrb	r3, [r3, #0]
10003a16:	0006      	movs	r6, r0
10003a18:	000c      	movs	r4, r1
10003a1a:	9208      	str	r2, [sp, #32]
10003a1c:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10003a1e:	2b00      	cmp	r3, #0
10003a20:	d100      	bne.n	10003a24 <log_output_process+0x18>
10003a22:	e09c      	b.n	10003b5e <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10003a24:	2502      	movs	r5, #2
10003a26:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10003a28:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10003a2a:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10003a2c:	2301      	movs	r3, #1
10003a2e:	401a      	ands	r2, r3
10003a30:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
10003a32:	9a18      	ldr	r2, [sp, #96]	; 0x60
10003a34:	3307      	adds	r3, #7
10003a36:	401a      	ands	r2, r3
10003a38:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10003a3a:	2700      	movs	r7, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10003a3c:	f009 fb4c 	bl	1000d0d8 <z_log_get_tag>
10003a40:	0002      	movs	r2, r0
	if (tag) {
10003a42:	42b8      	cmp	r0, r7
10003a44:	d004      	beq.n	10003a50 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
10003a46:	0030      	movs	r0, r6
10003a48:	4984      	ldr	r1, [pc, #528]	; (10003c5c <log_output_process+0x250>)
10003a4a:	f7ff ffbf 	bl	100039cc <print_formatted>
10003a4e:	0007      	movs	r7, r0
	if (stamp) {
10003a50:	2d00      	cmp	r5, #0
10003a52:	d009      	beq.n	10003a68 <log_output_process+0x5c>
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
10003a54:	2344      	movs	r3, #68	; 0x44
	if (!format) {
10003a56:	9a18      	ldr	r2, [sp, #96]	; 0x60
10003a58:	421a      	tst	r2, r3
10003a5a:	d144      	bne.n	10003ae6 <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10003a5c:	0022      	movs	r2, r4
10003a5e:	0030      	movs	r0, r6
10003a60:	497f      	ldr	r1, [pc, #508]	; (10003c60 <log_output_process+0x254>)
10003a62:	f7ff ffb3 	bl	100039cc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
10003a66:	183f      	adds	r7, r7, r0
	if (color) {
10003a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003a6a:	2b00      	cmp	r3, #0
10003a6c:	d00a      	beq.n	10003a84 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10003a6e:	9a05      	ldr	r2, [sp, #20]
10003a70:	4b7c      	ldr	r3, [pc, #496]	; (10003c64 <log_output_process+0x258>)
10003a72:	0092      	lsls	r2, r2, #2
10003a74:	58d2      	ldr	r2, [r2, r3]
10003a76:	2a00      	cmp	r2, #0
10003a78:	d100      	bne.n	10003a7c <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10003a7a:	4a7b      	ldr	r2, [pc, #492]	; (10003c68 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
10003a7c:	0030      	movs	r0, r6
10003a7e:	497b      	ldr	r1, [pc, #492]	; (10003c6c <log_output_process+0x260>)
10003a80:	f7ff ffa4 	bl	100039cc <print_formatted>
	int total = 0;
10003a84:	2400      	movs	r4, #0
	if (level_on) {
10003a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003a88:	42a3      	cmp	r3, r4
10003a8a:	d008      	beq.n	10003a9e <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
10003a8c:	9a05      	ldr	r2, [sp, #20]
10003a8e:	4b78      	ldr	r3, [pc, #480]	; (10003c70 <log_output_process+0x264>)
10003a90:	0092      	lsls	r2, r2, #2
10003a92:	0030      	movs	r0, r6
10003a94:	4977      	ldr	r1, [pc, #476]	; (10003c74 <log_output_process+0x268>)
10003a96:	58d2      	ldr	r2, [r2, r3]
10003a98:	f7ff ff98 	bl	100039cc <print_formatted>
10003a9c:	0004      	movs	r4, r0
	if (domain) {
10003a9e:	9b08      	ldr	r3, [sp, #32]
10003aa0:	2b00      	cmp	r3, #0
10003aa2:	d005      	beq.n	10003ab0 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
10003aa4:	001a      	movs	r2, r3
10003aa6:	0030      	movs	r0, r6
10003aa8:	4973      	ldr	r1, [pc, #460]	; (10003c78 <log_output_process+0x26c>)
10003aaa:	f7ff ff8f 	bl	100039cc <print_formatted>
10003aae:	1824      	adds	r4, r4, r0
	if (source) {
10003ab0:	9b06      	ldr	r3, [sp, #24]
10003ab2:	2b00      	cmp	r3, #0
10003ab4:	d005      	beq.n	10003ac2 <log_output_process+0xb6>
		total += print_formatted(output,
10003ab6:	001a      	movs	r2, r3
10003ab8:	0030      	movs	r0, r6
10003aba:	4970      	ldr	r1, [pc, #448]	; (10003c7c <log_output_process+0x270>)
10003abc:	f7ff ff86 	bl	100039cc <print_formatted>
10003ac0:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
10003ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
10003ac4:	486e      	ldr	r0, [pc, #440]	; (10003c80 <log_output_process+0x274>)
	length += ids_print(output, level_on, func_on, domain, source, level);
10003ac6:	19e7      	adds	r7, r4, r7
	if (package) {
10003ac8:	2b00      	cmp	r3, #0
10003aca:	d000      	beq.n	10003ace <log_output_process+0xc2>
10003acc:	e09c      	b.n	10003c08 <log_output_process+0x1fc>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
10003ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10003ad0:	2b00      	cmp	r3, #0
10003ad2:	d151      	bne.n	10003b78 <log_output_process+0x16c>
	if (color) {
10003ad4:	9b18      	ldr	r3, [sp, #96]	; 0x60
10003ad6:	07db      	lsls	r3, r3, #31
10003ad8:	d500      	bpl.n	10003adc <log_output_process+0xd0>
10003ada:	e0b8      	b.n	10003c4e <log_output_process+0x242>
	newline_print(output, flags);
10003adc:	0030      	movs	r0, r6
10003ade:	9918      	ldr	r1, [sp, #96]	; 0x60
10003ae0:	f7ff ff84 	bl	100039ec <newline_print>
}
10003ae4:	e09c      	b.n	10003c20 <log_output_process+0x214>
		length = 0;
10003ae6:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10003ae8:	4b66      	ldr	r3, [pc, #408]	; (10003c84 <log_output_process+0x278>)
10003aea:	681d      	ldr	r5, [r3, #0]
10003aec:	4285      	cmp	r5, r0
10003aee:	d0ba      	beq.n	10003a66 <log_output_process+0x5a>
		timestamp /= timestamp_div;
10003af0:	4b65      	ldr	r3, [pc, #404]	; (10003c88 <log_output_process+0x27c>)
10003af2:	0020      	movs	r0, r4
10003af4:	6819      	ldr	r1, [r3, #0]
10003af6:	f7fc fb6b 	bl	100001d0 <__udivsi3>
10003afa:	0029      	movs	r1, r5
10003afc:	f7fc fba4 	bl	10000248 <__aeabi_uidivmod>
10003b00:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
10003b02:	21e1      	movs	r1, #225	; 0xe1
10003b04:	0109      	lsls	r1, r1, #4
10003b06:	9007      	str	r0, [sp, #28]
10003b08:	f7fc fb9e 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10003b0c:	20fa      	movs	r0, #250	; 0xfa
10003b0e:	0080      	lsls	r0, r0, #2
10003b10:	9109      	str	r1, [sp, #36]	; 0x24
10003b12:	4360      	muls	r0, r4
10003b14:	0029      	movs	r1, r5
10003b16:	f7fc fb97 	bl	10000248 <__aeabi_uidivmod>
10003b1a:	000c      	movs	r4, r1
				length = print_formatted(output,
10003b1c:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10003b1e:	213c      	movs	r1, #60	; 0x3c
10003b20:	9809      	ldr	r0, [sp, #36]	; 0x24
10003b22:	f7fc fb55 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
10003b26:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10003b28:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10003b2a:	0109      	lsls	r1, r1, #4
10003b2c:	9807      	ldr	r0, [sp, #28]
10003b2e:	f7fc fb4f 	bl	100001d0 <__udivsi3>
10003b32:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
10003b34:	20fa      	movs	r0, #250	; 0xfa
10003b36:	0080      	lsls	r0, r0, #2
10003b38:	0029      	movs	r1, r5
10003b3a:	4360      	muls	r0, r4
10003b3c:	f7fc fb48 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10003b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003b42:	9002      	str	r0, [sp, #8]
10003b44:	213c      	movs	r1, #60	; 0x3c
10003b46:	9809      	ldr	r0, [sp, #36]	; 0x24
10003b48:	9301      	str	r3, [sp, #4]
10003b4a:	f7fc fb7d 	bl	10000248 <__aeabi_uidivmod>
10003b4e:	0030      	movs	r0, r6
10003b50:	9100      	str	r1, [sp, #0]
10003b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003b54:	9a07      	ldr	r2, [sp, #28]
10003b56:	494d      	ldr	r1, [pc, #308]	; (10003c8c <log_output_process+0x280>)
10003b58:	f7ff ff38 	bl	100039cc <print_formatted>
10003b5c:	e783      	b.n	10003a66 <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10003b5e:	9b06      	ldr	r3, [sp, #24]
10003b60:	484b      	ldr	r0, [pc, #300]	; (10003c90 <log_output_process+0x284>)
10003b62:	2b01      	cmp	r3, #1
10003b64:	d100      	bne.n	10003b68 <log_output_process+0x15c>
10003b66:	4846      	ldr	r0, [pc, #280]	; (10003c80 <log_output_process+0x274>)
	if (package) {
10003b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10003b6a:	9f05      	ldr	r7, [sp, #20]
	if (package) {
10003b6c:	2b00      	cmp	r3, #0
10003b6e:	d14b      	bne.n	10003c08 <log_output_process+0x1fc>
	if (data_len) {
10003b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10003b72:	2b00      	cmp	r3, #0
10003b74:	d054      	beq.n	10003c20 <log_output_process+0x214>
		prefix_offset = 0;
10003b76:	2700      	movs	r7, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10003b78:	9d17      	ldr	r5, [sp, #92]	; 0x5c
10003b7a:	2d10      	cmp	r5, #16
10003b7c:	d900      	bls.n	10003b80 <log_output_process+0x174>
10003b7e:	2510      	movs	r5, #16
	newline_print(output, flags);
10003b80:	0030      	movs	r0, r6
10003b82:	9918      	ldr	r1, [sp, #96]	; 0x60
10003b84:	f7ff ff32 	bl	100039ec <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
10003b88:	2400      	movs	r4, #0
10003b8a:	42a7      	cmp	r7, r4
10003b8c:	dc4d      	bgt.n	10003c2a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
10003b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
10003b90:	0030      	movs	r0, r6
10003b92:	781a      	ldrb	r2, [r3, #0]
10003b94:	493f      	ldr	r1, [pc, #252]	; (10003c94 <log_output_process+0x288>)
10003b96:	f7ff ff19 	bl	100039cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10003b9a:	2401      	movs	r4, #1
		if (i > 0 && !(i % 8)) {
10003b9c:	2307      	movs	r3, #7
10003b9e:	421c      	tst	r4, r3
10003ba0:	d103      	bne.n	10003baa <log_output_process+0x19e>
			print_formatted(output, " ");
10003ba2:	0030      	movs	r0, r6
10003ba4:	493c      	ldr	r1, [pc, #240]	; (10003c98 <log_output_process+0x28c>)
10003ba6:	f7ff ff11 	bl	100039cc <print_formatted>
		if (i < length) {
10003baa:	42a5      	cmp	r5, r4
10003bac:	d943      	bls.n	10003c36 <log_output_process+0x22a>
			print_formatted(output, "%02x ", data[i]);
10003bae:	9b16      	ldr	r3, [sp, #88]	; 0x58
10003bb0:	0030      	movs	r0, r6
10003bb2:	5d1a      	ldrb	r2, [r3, r4]
10003bb4:	4937      	ldr	r1, [pc, #220]	; (10003c94 <log_output_process+0x288>)
10003bb6:	f7ff ff09 	bl	100039cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10003bba:	3401      	adds	r4, #1
10003bbc:	2c10      	cmp	r4, #16
10003bbe:	d1ed      	bne.n	10003b9c <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10003bc0:	2400      	movs	r4, #0
	print_formatted(output, "|");
10003bc2:	0030      	movs	r0, r6
10003bc4:	4935      	ldr	r1, [pc, #212]	; (10003c9c <log_output_process+0x290>)
10003bc6:	f7ff ff01 	bl	100039cc <print_formatted>
		if (i < length) {
10003bca:	0023      	movs	r3, r4
			print_formatted(output, "%c",
10003bcc:	2168      	movs	r1, #104	; 0x68
			unsigned char c = (unsigned char)data[i];
10003bce:	9a16      	ldr	r2, [sp, #88]	; 0x58
10003bd0:	5cd2      	ldrb	r2, [r2, r3]
			      isprint((int)c) != 0 ? c : '.');
10003bd2:	4b33      	ldr	r3, [pc, #204]	; (10003ca0 <log_output_process+0x294>)
			print_formatted(output, "%c",
10003bd4:	5c9b      	ldrb	r3, [r3, r2]
10003bd6:	438b      	bics	r3, r1
10003bd8:	d100      	bne.n	10003bdc <log_output_process+0x1d0>
10003bda:	222e      	movs	r2, #46	; 0x2e
10003bdc:	0030      	movs	r0, r6
10003bde:	4931      	ldr	r1, [pc, #196]	; (10003ca4 <log_output_process+0x298>)
10003be0:	f7ff fef4 	bl	100039cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
10003be4:	3401      	adds	r4, #1
10003be6:	2c10      	cmp	r4, #16
10003be8:	d02a      	beq.n	10003c40 <log_output_process+0x234>
		if (i > 0 && !(i % 8)) {
10003bea:	2307      	movs	r3, #7
10003bec:	421c      	tst	r4, r3
10003bee:	d103      	bne.n	10003bf8 <log_output_process+0x1ec>
			print_formatted(output, " ");
10003bf0:	0030      	movs	r0, r6
10003bf2:	4929      	ldr	r1, [pc, #164]	; (10003c98 <log_output_process+0x28c>)
10003bf4:	f7ff feea 	bl	100039cc <print_formatted>
		if (i < length) {
10003bf8:	0023      	movs	r3, r4
10003bfa:	42a5      	cmp	r5, r4
10003bfc:	d8e6      	bhi.n	10003bcc <log_output_process+0x1c0>
			print_formatted(output, " ");
10003bfe:	0030      	movs	r0, r6
10003c00:	4925      	ldr	r1, [pc, #148]	; (10003c98 <log_output_process+0x28c>)
10003c02:	f7ff fee3 	bl	100039cc <print_formatted>
10003c06:	e7ed      	b.n	10003be4 <log_output_process+0x1d8>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
10003c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
10003c0a:	0032      	movs	r2, r6
10003c0c:	4926      	ldr	r1, [pc, #152]	; (10003ca8 <log_output_process+0x29c>)
10003c0e:	f009 f8f1 	bl	1000cdf4 <cbpprintf_external>
	if (data_len) {
10003c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
10003c14:	2b00      	cmp	r3, #0
10003c16:	d1af      	bne.n	10003b78 <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
10003c18:	9b05      	ldr	r3, [sp, #20]
10003c1a:	2b00      	cmp	r3, #0
10003c1c:	d000      	beq.n	10003c20 <log_output_process+0x214>
10003c1e:	e759      	b.n	10003ad4 <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10003c20:	0030      	movs	r0, r6
10003c22:	f009 faa2 	bl	1000d16a <log_output_flush>
}
10003c26:	b00f      	add	sp, #60	; 0x3c
10003c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10003c2a:	0030      	movs	r0, r6
10003c2c:	491a      	ldr	r1, [pc, #104]	; (10003c98 <log_output_process+0x28c>)
10003c2e:	f7ff fecd 	bl	100039cc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10003c32:	3401      	adds	r4, #1
10003c34:	e7a9      	b.n	10003b8a <log_output_process+0x17e>
			print_formatted(output, "   ");
10003c36:	0030      	movs	r0, r6
10003c38:	491c      	ldr	r1, [pc, #112]	; (10003cac <log_output_process+0x2a0>)
10003c3a:	f7ff fec7 	bl	100039cc <print_formatted>
10003c3e:	e7bc      	b.n	10003bba <log_output_process+0x1ae>
		data += length;
10003c40:	9b16      	ldr	r3, [sp, #88]	; 0x58
10003c42:	195b      	adds	r3, r3, r5
10003c44:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
10003c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10003c48:	1b5b      	subs	r3, r3, r5
10003c4a:	9317      	str	r3, [sp, #92]	; 0x5c
10003c4c:	e7e2      	b.n	10003c14 <log_output_process+0x208>
		print_formatted(output, "%s", log_color);
10003c4e:	0030      	movs	r0, r6
10003c50:	4a05      	ldr	r2, [pc, #20]	; (10003c68 <log_output_process+0x25c>)
10003c52:	4906      	ldr	r1, [pc, #24]	; (10003c6c <log_output_process+0x260>)
10003c54:	f7ff feba 	bl	100039cc <print_formatted>
}
10003c58:	e740      	b.n	10003adc <log_output_process+0xd0>
10003c5a:	46c0      	nop			; (mov r8, r8)
10003c5c:	10012658 	.word	0x10012658
10003c60:	1001265c 	.word	0x1001265c
10003c64:	1000e3b0 	.word	0x1000e3b0
10003c68:	10012653 	.word	0x10012653
10003c6c:	10012681 	.word	0x10012681
10003c70:	1000e3c4 	.word	0x1000e3c4
10003c74:	10012684 	.word	0x10012684
10003c78:	1001268a 	.word	0x1001268a
10003c7c:	1001268e 	.word	0x1001268e
10003c80:	1000d10f 	.word	0x1000d10f
10003c84:	200023ac 	.word	0x200023ac
10003c88:	200023a8 	.word	0x200023a8
10003c8c:	10012665 	.word	0x10012665
10003c90:	1000d127 	.word	0x1000d127
10003c94:	10012693 	.word	0x10012693
10003c98:	1001269b 	.word	0x1001269b
10003c9c:	1001269d 	.word	0x1001269d
10003ca0:	1000e5dd 	.word	0x1000e5dd
10003ca4:	1001269f 	.word	0x1001269f
10003ca8:	1000d15f 	.word	0x1000d15f
10003cac:	10012699 	.word	0x10012699

10003cb0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
10003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
10003cb2:	880b      	ldrh	r3, [r1, #0]
10003cb4:	b089      	sub	sp, #36	; 0x24
10003cb6:	05db      	lsls	r3, r3, #23
10003cb8:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
10003cba:	684b      	ldr	r3, [r1, #4]
10003cbc:	000f      	movs	r7, r1
10003cbe:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
10003cc0:	688e      	ldr	r6, [r1, #8]
10003cc2:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
10003cc4:	2b00      	cmp	r3, #0
10003cc6:	d00c      	beq.n	10003ce2 <log_output_msg_process+0x32>
10003cc8:	4a13      	ldr	r2, [pc, #76]	; (10003d18 <log_output_msg_process+0x68>)
10003cca:	1a9a      	subs	r2, r3, r2
10003ccc:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
10003cce:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
10003cd0:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
10003cd2:	0412      	lsls	r2, r2, #16
10003cd4:	d405      	bmi.n	10003ce2 <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
10003cd6:	7838      	ldrb	r0, [r7, #0]
10003cd8:	0680      	lsls	r0, r0, #26
10003cda:	0f40      	lsrs	r0, r0, #29
10003cdc:	f7ff fe0e 	bl	100038fc <log_source_name_get>
10003ce0:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
10003ce2:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
10003ce4:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
10003ce6:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
10003ce8:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
10003cea:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
10003cec:	0d49      	lsrs	r1, r1, #21
	return msg->data;
10003cee:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
10003cf0:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
10003cf2:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
10003cf4:	1e48      	subs	r0, r1, #1
10003cf6:	4181      	sbcs	r1, r0
10003cf8:	4249      	negs	r1, r1
10003cfa:	400a      	ands	r2, r1
10003cfc:	4661      	mov	r1, ip
10003cfe:	9201      	str	r2, [sp, #4]
10003d00:	9103      	str	r1, [sp, #12]
10003d02:	2200      	movs	r2, #0
10003d04:	0031      	movs	r1, r6
10003d06:	9807      	ldr	r0, [sp, #28]
10003d08:	9504      	str	r5, [sp, #16]
10003d0a:	9702      	str	r7, [sp, #8]
10003d0c:	9400      	str	r4, [sp, #0]
10003d0e:	f7ff fe7d 	bl	10003a0c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
10003d12:	b009      	add	sp, #36	; 0x24
10003d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003d16:	46c0      	nop			; (mov r8, r8)
10003d18:	1000e194 	.word	0x1000e194

10003d1c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
10003d1c:	2301      	movs	r3, #1
{
10003d1e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
10003d20:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
10003d22:	001c      	movs	r4, r3
	while (frequency > 1000000) {
10003d24:	4a07      	ldr	r2, [pc, #28]	; (10003d44 <log_output_timestamp_freq_set+0x28>)
10003d26:	4290      	cmp	r0, r2
10003d28:	d807      	bhi.n	10003d3a <log_output_timestamp_freq_set+0x1e>
10003d2a:	4a07      	ldr	r2, [pc, #28]	; (10003d48 <log_output_timestamp_freq_set+0x2c>)
10003d2c:	2900      	cmp	r1, #0
10003d2e:	d100      	bne.n	10003d32 <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
10003d30:	2301      	movs	r3, #1
	}

	freq = frequency;
}
10003d32:	6013      	str	r3, [r2, #0]
	freq = frequency;
10003d34:	4b05      	ldr	r3, [pc, #20]	; (10003d4c <log_output_timestamp_freq_set+0x30>)
10003d36:	6018      	str	r0, [r3, #0]
}
10003d38:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
10003d3a:	0021      	movs	r1, r4
		frequency /= 2U;
10003d3c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
10003d3e:	005b      	lsls	r3, r3, #1
10003d40:	e7f1      	b.n	10003d26 <log_output_timestamp_freq_set+0xa>
10003d42:	46c0      	nop			; (mov r8, r8)
10003d44:	000f4240 	.word	0x000f4240
10003d48:	200023a8 	.word	0x200023a8
10003d4c:	200023ac 	.word	0x200023ac

10003d50 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
10003d50:	4b01      	ldr	r3, [pc, #4]	; (10003d58 <format_set+0x8>)
	return 0;
}
10003d52:	2000      	movs	r0, #0
	log_format_current = log_type;
10003d54:	6019      	str	r1, [r3, #0]
}
10003d56:	4770      	bx	lr
10003d58:	200023c4 	.word	0x200023c4

10003d5c <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
10003d5c:	2201      	movs	r2, #1
{
10003d5e:	b510      	push	{r4, lr}
	in_panic = true;
10003d60:	4b02      	ldr	r3, [pc, #8]	; (10003d6c <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
10003d62:	4803      	ldr	r0, [pc, #12]	; (10003d70 <panic+0x14>)
10003d64:	701a      	strb	r2, [r3, #0]
10003d66:	f009 fa00 	bl	1000d16a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
10003d6a:	bd10      	pop	{r4, pc}
10003d6c:	200024f4 	.word	0x200024f4
10003d70:	1000e3f4 	.word	0x1000e3f4

10003d74 <process>:
{
10003d74:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10003d76:	4b05      	ldr	r3, [pc, #20]	; (10003d8c <process+0x18>)
{
10003d78:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10003d7a:	6818      	ldr	r0, [r3, #0]
10003d7c:	f7ff fd46 	bl	1000380c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
10003d80:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10003d82:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
10003d84:	0021      	movs	r1, r4
10003d86:	4802      	ldr	r0, [pc, #8]	; (10003d90 <process+0x1c>)
10003d88:	4798      	blx	r3
}
10003d8a:	bd10      	pop	{r4, pc}
10003d8c:	200023c4 	.word	0x200023c4
10003d90:	1000e3f4 	.word	0x1000e3f4

10003d94 <char_out>:
{
10003d94:	b570      	push	{r4, r5, r6, lr}
10003d96:	000d      	movs	r5, r1
10003d98:	0004      	movs	r4, r0
10003d9a:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
10003d9c:	42b4      	cmp	r4, r6
10003d9e:	d101      	bne.n	10003da4 <char_out+0x10>
}
10003da0:	0028      	movs	r0, r5
10003da2:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
10003da4:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10003da6:	4803      	ldr	r0, [pc, #12]	; (10003db4 <char_out+0x20>)
10003da8:	3401      	adds	r4, #1
10003daa:	6883      	ldr	r3, [r0, #8]
10003dac:	685b      	ldr	r3, [r3, #4]
10003dae:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
10003db0:	e7f4      	b.n	10003d9c <char_out+0x8>
10003db2:	46c0      	nop			; (mov r8, r8)
10003db4:	1000dff8 	.word	0x1000dff8

10003db8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10003db8:	4901      	ldr	r1, [pc, #4]	; (10003dc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10003dba:	2210      	movs	r2, #16
	str	r2, [r1]
10003dbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10003dbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10003dc0:	e000ed10 	.word	0xe000ed10

10003dc4 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10003dc4:	f3bf 8f4f 	dsb	sy
10003dc8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10003dca:	b662      	cpsie	i
	isb
10003dcc:	f3bf 8f6f 	isb	sy

	bx	lr
10003dd0:	4770      	bx	lr
10003dd2:	46c0      	nop			; (mov r8, r8)

10003dd4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10003dd6:	0007      	movs	r7, r0
10003dd8:	000d      	movs	r5, r1
10003dda:	b087      	sub	sp, #28

	if (esf != NULL) {
10003ddc:	2900      	cmp	r1, #0
10003dde:	d039      	beq.n	10003e54 <z_arm_fatal_error+0x80>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
10003de0:	2400      	movs	r4, #0
10003de2:	688b      	ldr	r3, [r1, #8]
10003de4:	4e1e      	ldr	r6, [pc, #120]	; (10003e60 <z_arm_fatal_error+0x8c>)
10003de6:	9305      	str	r3, [sp, #20]
10003de8:	684b      	ldr	r3, [r1, #4]
10003dea:	2201      	movs	r2, #1
10003dec:	9304      	str	r3, [sp, #16]
10003dee:	680b      	ldr	r3, [r1, #0]
10003df0:	0020      	movs	r0, r4
10003df2:	9303      	str	r3, [sp, #12]
10003df4:	4b1b      	ldr	r3, [pc, #108]	; (10003e64 <z_arm_fatal_error+0x90>)
10003df6:	0031      	movs	r1, r6
10003df8:	9302      	str	r3, [sp, #8]
10003dfa:	9401      	str	r4, [sp, #4]
10003dfc:	0023      	movs	r3, r4
10003dfe:	9400      	str	r4, [sp, #0]
10003e00:	f009 f9c0 	bl	1000d184 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
10003e04:	696b      	ldr	r3, [r5, #20]
10003e06:	2201      	movs	r2, #1
10003e08:	9305      	str	r3, [sp, #20]
10003e0a:	692b      	ldr	r3, [r5, #16]
10003e0c:	0031      	movs	r1, r6
10003e0e:	9304      	str	r3, [sp, #16]
10003e10:	68eb      	ldr	r3, [r5, #12]
10003e12:	0020      	movs	r0, r4
10003e14:	9303      	str	r3, [sp, #12]
10003e16:	4b14      	ldr	r3, [pc, #80]	; (10003e68 <z_arm_fatal_error+0x94>)
10003e18:	9401      	str	r4, [sp, #4]
10003e1a:	9302      	str	r3, [sp, #8]
10003e1c:	9400      	str	r4, [sp, #0]
10003e1e:	0023      	movs	r3, r4
10003e20:	f009 f9b0 	bl	1000d184 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
10003e24:	69eb      	ldr	r3, [r5, #28]
10003e26:	2201      	movs	r2, #1
10003e28:	9303      	str	r3, [sp, #12]
10003e2a:	4b10      	ldr	r3, [pc, #64]	; (10003e6c <z_arm_fatal_error+0x98>)
10003e2c:	0031      	movs	r1, r6
10003e2e:	0020      	movs	r0, r4
10003e30:	9302      	str	r3, [sp, #8]
10003e32:	9401      	str	r4, [sp, #4]
10003e34:	0023      	movs	r3, r4
10003e36:	9400      	str	r4, [sp, #0]
10003e38:	f009 f9a4 	bl	1000d184 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
10003e3c:	69ab      	ldr	r3, [r5, #24]
10003e3e:	2201      	movs	r2, #1
10003e40:	9303      	str	r3, [sp, #12]
10003e42:	4b0b      	ldr	r3, [pc, #44]	; (10003e70 <z_arm_fatal_error+0x9c>)
10003e44:	0031      	movs	r1, r6
10003e46:	9302      	str	r3, [sp, #8]
10003e48:	0020      	movs	r0, r4
10003e4a:	0023      	movs	r3, r4
10003e4c:	9401      	str	r4, [sp, #4]
10003e4e:	9400      	str	r4, [sp, #0]
10003e50:	f009 f998 	bl	1000d184 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10003e54:	0029      	movs	r1, r5
10003e56:	0038      	movs	r0, r7
10003e58:	f001 fcf2 	bl	10005840 <z_fatal_error>
}
10003e5c:	b007      	add	sp, #28
10003e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e60:	1000e1dc 	.word	0x1000e1dc
10003e64:	100126dc 	.word	0x100126dc
10003e68:	1001270b 	.word	0x1001270b
10003e6c:	1001273a 	.word	0x1001273a
10003e70:	10012749 	.word	0x10012749

10003e74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10003e74:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10003e76:	0600      	lsls	r0, r0, #24
10003e78:	d405      	bmi.n	10003e86 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003e7a:	221f      	movs	r2, #31
10003e7c:	401a      	ands	r2, r3
10003e7e:	2301      	movs	r3, #1
10003e80:	4093      	lsls	r3, r2
10003e82:	4a01      	ldr	r2, [pc, #4]	; (10003e88 <arch_irq_enable+0x14>)
10003e84:	6013      	str	r3, [r2, #0]
}
10003e86:	4770      	bx	lr
10003e88:	e000e100 	.word	0xe000e100

10003e8c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10003e8c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003e8e:	25ff      	movs	r5, #255	; 0xff
10003e90:	2203      	movs	r2, #3
10003e92:	000b      	movs	r3, r1
10003e94:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10003e96:	b240      	sxtb	r0, r0
10003e98:	4002      	ands	r2, r0
10003e9a:	00d2      	lsls	r2, r2, #3
10003e9c:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003e9e:	015b      	lsls	r3, r3, #5
10003ea0:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003ea2:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003ea4:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10003ea6:	2800      	cmp	r0, #0
10003ea8:	db0a      	blt.n	10003ec0 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003eaa:	24c0      	movs	r4, #192	; 0xc0
10003eac:	4a0a      	ldr	r2, [pc, #40]	; (10003ed8 <z_arm_irq_priority_set+0x4c>)
10003eae:	0880      	lsrs	r0, r0, #2
10003eb0:	0080      	lsls	r0, r0, #2
10003eb2:	1880      	adds	r0, r0, r2
10003eb4:	00a4      	lsls	r4, r4, #2
10003eb6:	5902      	ldr	r2, [r0, r4]
10003eb8:	400a      	ands	r2, r1
10003eba:	4313      	orrs	r3, r2
10003ebc:	5103      	str	r3, [r0, r4]
}
10003ebe:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003ec0:	220f      	movs	r2, #15
10003ec2:	4010      	ands	r0, r2
10003ec4:	3808      	subs	r0, #8
10003ec6:	4a05      	ldr	r2, [pc, #20]	; (10003edc <z_arm_irq_priority_set+0x50>)
10003ec8:	0880      	lsrs	r0, r0, #2
10003eca:	0080      	lsls	r0, r0, #2
10003ecc:	1880      	adds	r0, r0, r2
10003ece:	69c2      	ldr	r2, [r0, #28]
10003ed0:	4011      	ands	r1, r2
10003ed2:	4319      	orrs	r1, r3
10003ed4:	61c1      	str	r1, [r0, #28]
10003ed6:	e7f2      	b.n	10003ebe <z_arm_irq_priority_set+0x32>
10003ed8:	e000e100 	.word	0xe000e100
10003edc:	e000ed00 	.word	0xe000ed00

10003ee0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10003ee0:	bf30      	wfi
    b z_SysNmiOnReset
10003ee2:	e7fd      	b.n	10003ee0 <z_SysNmiOnReset>

10003ee4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10003ee4:	22ff      	movs	r2, #255	; 0xff
10003ee6:	4b08      	ldr	r3, [pc, #32]	; (10003f08 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10003ee8:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10003eea:	4393      	bics	r3, r2
10003eec:	4a07      	ldr	r2, [pc, #28]	; (10003f0c <z_arm_prep_c+0x28>)
10003eee:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10003ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10003ef4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10003ef8:	f001 fd4c 	bl	10005994 <z_bss_zero>
	z_data_copy();
10003efc:	f002 faba 	bl	10006474 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10003f00:	f000 f93a 	bl	10004178 <z_arm_interrupt_init>
	z_cstart();
10003f04:	f001 fd86 	bl	10005a14 <z_cstart>
10003f08:	10000100 	.word	0x10000100
10003f0c:	e000ed00 	.word	0xe000ed00

10003f10 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10003f10:	4a08      	ldr	r2, [pc, #32]	; (10003f34 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10003f12:	4909      	ldr	r1, [pc, #36]	; (10003f38 <arch_swap+0x28>)
	_current->arch.basepri = key;
10003f14:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10003f16:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10003f18:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
10003f1a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10003f1c:	2380      	movs	r3, #128	; 0x80
10003f1e:	4907      	ldr	r1, [pc, #28]	; (10003f3c <arch_swap+0x2c>)
10003f20:	055b      	lsls	r3, r3, #21
10003f22:	6848      	ldr	r0, [r1, #4]
10003f24:	4303      	orrs	r3, r0
10003f26:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10003f28:	b662      	cpsie	i
10003f2a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10003f2e:	6893      	ldr	r3, [r2, #8]
10003f30:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
10003f32:	4770      	bx	lr
10003f34:	20002464 	.word	0x20002464
10003f38:	1000e56c 	.word	0x1000e56c
10003f3c:	e000ed00 	.word	0xe000ed00

10003f40 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10003f40:	4913      	ldr	r1, [pc, #76]	; (10003f90 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10003f42:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10003f44:	4813      	ldr	r0, [pc, #76]	; (10003f94 <_thread_irq_disabled+0x22>)
    add r0, r2
10003f46:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10003f48:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10003f4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10003f4e:	4643      	mov	r3, r8
    mov r4, r9
10003f50:	464c      	mov	r4, r9
    mov r5, r10
10003f52:	4655      	mov	r5, sl
    mov r6, r11
10003f54:	465e      	mov	r6, fp
    mov r7, ip
10003f56:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10003f58:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10003f5a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10003f5c:	4f0e      	ldr	r7, [pc, #56]	; (10003f98 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10003f5e:	4e0f      	ldr	r6, [pc, #60]	; (10003f9c <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10003f60:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10003f62:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10003f64:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10003f66:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
10003f68:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10003f6a:	66d3      	str	r3, [r2, #108]	; 0x6c
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10003f6c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10003f6e:	d100      	bne.n	10003f72 <_thread_irq_disabled>
    cpsie i
10003f70:	b662      	cpsie	i

10003f72 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10003f72:	4c08      	ldr	r4, [pc, #32]	; (10003f94 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10003f74:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10003f76:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10003f78:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10003f7a:	4698      	mov	r8, r3
    mov r9, r4
10003f7c:	46a1      	mov	r9, r4
    mov r10, r5
10003f7e:	46aa      	mov	sl, r5
    mov r11, r6
10003f80:	46b3      	mov	fp, r6
    mov ip, r7
10003f82:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10003f84:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10003f86:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10003f88:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10003f8c:	4770      	bx	lr
10003f8e:	0000      	.short	0x0000
    ldr r1, =_kernel
10003f90:	20002464 	.word	0x20002464
    ldr r0, =_thread_offset_to_callee_saved
10003f94:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10003f98:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10003f9c:	08000000 	.word	0x08000000

10003fa0 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10003fa0:	2004      	movs	r0, #4
  mov r1, lr
10003fa2:	4671      	mov	r1, lr
  tst r1, r0
10003fa4:	4201      	tst	r1, r0
  beq _stack_frame_msp
10003fa6:	d002      	beq.n	10003fae <_stack_frame_msp>
  mrs r0, PSP
10003fa8:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10003fac:	d101      	bne.n	10003fb2 <_stack_frame_endif>

10003fae <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10003fae:	f3ef 8008 	mrs	r0, MSP

10003fb2 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10003fb2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10003fb4:	3902      	subs	r1, #2
    ldrb r1, [r1]
10003fb6:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10003fb8:	2902      	cmp	r1, #2
    beq _oops
10003fba:	d0ff      	beq.n	10003fbc <_oops>

10003fbc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10003fbc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10003fbe:	f009 f8f0 	bl	1000d1a2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10003fc2:	bd01      	pop	{r0, pc}

10003fc4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10003fc4:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10003fc6:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10003fc8:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10003fca:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10003fcc:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10003fce:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10003fd0:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10003fd2:	4906      	ldr	r1, [pc, #24]	; (10003fec <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10003fd4:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10003fd6:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10003fd8:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10003fda:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10003fdc:	2380      	movs	r3, #128	; 0x80
10003fde:	045b      	lsls	r3, r3, #17
10003fe0:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10003fe2:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10003fe4:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10003fe6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10003fe8:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10003fea:	bd10      	pop	{r4, pc}
10003fec:	1000ce77 	.word	0x1000ce77

10003ff0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10003ff0:	4b06      	ldr	r3, [pc, #24]	; (1000400c <arch_switch_to_main_thread+0x1c>)
10003ff2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10003ff4:	1c10      	adds	r0, r2, #0
10003ff6:	f381 8809 	msr	PSP, r1
10003ffa:	2100      	movs	r1, #0
10003ffc:	b662      	cpsie	i
10003ffe:	f3bf 8f6f 	isb	sy
10004002:	2200      	movs	r2, #0
10004004:	2300      	movs	r3, #0
10004006:	f008 ff36 	bl	1000ce76 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
1000400a:	46c0      	nop			; (mov r8, r8)
1000400c:	20002464 	.word	0x20002464

10004010 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10004010:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10004012:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10004016:	4905      	ldr	r1, [pc, #20]	; (1000402c <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10004018:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
1000401a:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
1000401c:	4904      	ldr	r1, [pc, #16]	; (10004030 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
1000401e:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10004020:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10004022:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10004024:	bc09      	pop	{r0, r3}
	mov lr, r3
10004026:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10004028:	4902      	ldr	r1, [pc, #8]	; (10004034 <_isr_wrapper+0x24>)
	bx r1
1000402a:	4708      	bx	r1
	ldr r1, =16
1000402c:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10004030:	1000e088 	.word	0x1000e088
	ldr r1, =z_arm_int_exit
10004034:	10004039 	.word	0x10004039

10004038 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10004038:	4b04      	ldr	r3, [pc, #16]	; (1000404c <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
1000403a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
1000403c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
1000403e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10004040:	d002      	beq.n	10004048 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10004042:	4903      	ldr	r1, [pc, #12]	; (10004050 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10004044:	4a03      	ldr	r2, [pc, #12]	; (10004054 <_EXIT_EXC+0xc>)
	str r2, [r1]
10004046:	600a      	str	r2, [r1, #0]

10004048 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10004048:	4770      	bx	lr
1000404a:	0000      	.short	0x0000
	ldr r3, =_kernel
1000404c:	20002464 	.word	0x20002464
	ldr r1, =_SCS_ICSR
10004050:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10004054:	10000000 	.word	0x10000000

10004058 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10004058:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000405a:	4b38      	ldr	r3, [pc, #224]	; (1000413c <z_arm_fault+0xe4>)
{
1000405c:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000405e:	685f      	ldr	r7, [r3, #4]
{
10004060:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10004062:	05fb      	lsls	r3, r7, #23
10004064:	0ddb      	lsrs	r3, r3, #23
10004066:	9307      	str	r3, [sp, #28]
10004068:	b662      	cpsie	i
1000406a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000406e:	4e34      	ldr	r6, [pc, #208]	; (10004140 <z_arm_fault+0xe8>)
10004070:	0e13      	lsrs	r3, r2, #24
10004072:	2bff      	cmp	r3, #255	; 0xff
10004074:	d10d      	bne.n	10004092 <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10004076:	3bf3      	subs	r3, #243	; 0xf3
10004078:	4013      	ands	r3, r2
1000407a:	2b08      	cmp	r3, #8
1000407c:	d13f      	bne.n	100040fe <z_arm_fault+0xa6>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
1000407e:	2000      	movs	r0, #0
10004080:	4b30      	ldr	r3, [pc, #192]	; (10004144 <z_arm_fault+0xec>)
10004082:	2201      	movs	r2, #1
10004084:	9302      	str	r3, [sp, #8]
10004086:	0031      	movs	r1, r6
10004088:	0003      	movs	r3, r0
1000408a:	9001      	str	r0, [sp, #4]
1000408c:	9000      	str	r0, [sp, #0]
1000408e:	f009 f89a 	bl	1000d1c6 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
10004092:	2500      	movs	r5, #0
		return NULL;
10004094:	002c      	movs	r4, r5
	switch (fault) {
10004096:	9b07      	ldr	r3, [sp, #28]
10004098:	2b03      	cmp	r3, #3
1000409a:	d136      	bne.n	1000410a <z_arm_fault+0xb2>
	PR_FAULT_INFO("***** HARD FAULT *****");
1000409c:	2700      	movs	r7, #0
1000409e:	4b2a      	ldr	r3, [pc, #168]	; (10004148 <z_arm_fault+0xf0>)
100040a0:	2201      	movs	r2, #1
100040a2:	9302      	str	r3, [sp, #8]
100040a4:	0031      	movs	r1, r6
100040a6:	003b      	movs	r3, r7
100040a8:	0038      	movs	r0, r7
100040aa:	9701      	str	r7, [sp, #4]
100040ac:	9700      	str	r7, [sp, #0]
100040ae:	f009 f88a 	bl	1000d1c6 <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
100040b2:	69a3      	ldr	r3, [r4, #24]
100040b4:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
100040b6:	881a      	ldrh	r2, [r3, #0]
100040b8:	4b24      	ldr	r3, [pc, #144]	; (1000414c <z_arm_fault+0xf4>)
100040ba:	429a      	cmp	r2, r3
100040bc:	d139      	bne.n	10004132 <z_arm_fault+0xda>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
100040be:	6823      	ldr	r3, [r4, #0]
100040c0:	0031      	movs	r1, r6
100040c2:	9303      	str	r3, [sp, #12]
100040c4:	4b22      	ldr	r3, [pc, #136]	; (10004150 <z_arm_fault+0xf8>)
100040c6:	2201      	movs	r2, #1
100040c8:	9302      	str	r3, [sp, #8]
100040ca:	0038      	movs	r0, r7
100040cc:	003b      	movs	r3, r7
100040ce:	9701      	str	r7, [sp, #4]
100040d0:	9700      	str	r7, [sp, #0]
100040d2:	f009 f878 	bl	1000d1c6 <z_log_msg_runtime_create.constprop.0>
		reason = esf->basic.r0;
100040d6:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100040d8:	2220      	movs	r2, #32
100040da:	0021      	movs	r1, r4
100040dc:	a808      	add	r0, sp, #32
100040de:	f003 fac1 	bl	10007664 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
100040e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100040e4:	2d00      	cmp	r5, #0
100040e6:	d026      	beq.n	10004136 <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100040e8:	05da      	lsls	r2, r3, #23
100040ea:	d102      	bne.n	100040f2 <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100040ec:	4a19      	ldr	r2, [pc, #100]	; (10004154 <z_arm_fault+0xfc>)
100040ee:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100040f0:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
100040f2:	0030      	movs	r0, r6
100040f4:	a908      	add	r1, sp, #32
100040f6:	f7ff fe6d 	bl	10003dd4 <z_arm_fatal_error>
}
100040fa:	b011      	add	sp, #68	; 0x44
100040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
100040fe:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10004100:	0712      	lsls	r2, r2, #28
10004102:	d5c8      	bpl.n	10004096 <z_arm_fault+0x3e>
			ptr_esf =  (z_arch_esf_t *)psp;
10004104:	000c      	movs	r4, r1
	*nested_exc = false;
10004106:	2500      	movs	r5, #0
10004108:	e7c5      	b.n	10004096 <z_arm_fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****",
1000410a:	23f8      	movs	r3, #248	; 0xf8
1000410c:	005b      	lsls	r3, r3, #1
1000410e:	4a12      	ldr	r2, [pc, #72]	; (10004158 <z_arm_fault+0x100>)
10004110:	421f      	tst	r7, r3
10004112:	d000      	beq.n	10004116 <z_arm_fault+0xbe>
10004114:	4a11      	ldr	r2, [pc, #68]	; (1000415c <z_arm_fault+0x104>)
10004116:	2000      	movs	r0, #0
10004118:	9b07      	ldr	r3, [sp, #28]
1000411a:	9203      	str	r2, [sp, #12]
1000411c:	3b10      	subs	r3, #16
1000411e:	9304      	str	r3, [sp, #16]
10004120:	4b0f      	ldr	r3, [pc, #60]	; (10004160 <z_arm_fault+0x108>)
10004122:	2201      	movs	r2, #1
10004124:	9302      	str	r3, [sp, #8]
10004126:	0031      	movs	r1, r6
10004128:	0003      	movs	r3, r0
1000412a:	9001      	str	r0, [sp, #4]
1000412c:	9000      	str	r0, [sp, #0]
1000412e:	f009 f84a 	bl	1000d1c6 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10004132:	2600      	movs	r6, #0
10004134:	e7d0      	b.n	100040d8 <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10004136:	0a5b      	lsrs	r3, r3, #9
10004138:	025b      	lsls	r3, r3, #9
1000413a:	e7d9      	b.n	100040f0 <z_arm_fault+0x98>
1000413c:	e000ed00 	.word	0xe000ed00
10004140:	1000e1dc 	.word	0x1000e1dc
10004144:	100127a5 	.word	0x100127a5
10004148:	100127d0 	.word	0x100127d0
1000414c:	0000df02 	.word	0x0000df02
10004150:	100127e7 	.word	0x100127e7
10004154:	000001ff 	.word	0x000001ff
10004158:	10012777 	.word	0x10012777
1000415c:	1001278c 	.word	0x1001278c
10004160:	10012803 	.word	0x10012803

10004164 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10004164:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10004168:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
1000416c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
1000416e:	4672      	mov	r2, lr
	bl z_arm_fault
10004170:	f7ff ff72 	bl	10004058 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10004174:	bd01      	pop	{r0, pc}
10004176:	46c0      	nop			; (mov r8, r8)

10004178 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10004178:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000417a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
1000417c:	2200      	movs	r2, #0
1000417e:	2603      	movs	r6, #3
10004180:	25ff      	movs	r5, #255	; 0xff
10004182:	00a4      	lsls	r4, r4, #2
10004184:	0010      	movs	r0, r2
10004186:	002f      	movs	r7, r5
10004188:	4030      	ands	r0, r6
1000418a:	00c0      	lsls	r0, r0, #3
1000418c:	4087      	lsls	r7, r0
1000418e:	4905      	ldr	r1, [pc, #20]	; (100041a4 <z_arm_interrupt_init+0x2c>)
10004190:	0893      	lsrs	r3, r2, #2
10004192:	009b      	lsls	r3, r3, #2
10004194:	185b      	adds	r3, r3, r1
10004196:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10004198:	3201      	adds	r2, #1
1000419a:	43b9      	bics	r1, r7
1000419c:	5119      	str	r1, [r3, r4]
1000419e:	2a1a      	cmp	r2, #26
100041a0:	d1f0      	bne.n	10004184 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
100041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100041a4:	e000e100 	.word	0xe000e100

100041a8 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100041a8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
100041aa:	4807      	ldr	r0, [pc, #28]	; (100041c8 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100041ac:	4907      	ldr	r1, [pc, #28]	; (100041cc <__start+0x24>)
    adds r0, r0, r1
100041ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
100041b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
100041b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
100041b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
100041ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
100041bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
100041c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
100041c4:	f7ff fe8e 	bl	10003ee4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
100041c8:	20002500 	.word	0x20002500
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100041cc:	00000800 	.word	0x00000800

100041d0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
100041d0:	b510      	push	{r4, lr}
	if (_current == thread) {
100041d2:	4b0a      	ldr	r3, [pc, #40]	; (100041fc <z_impl_k_thread_abort+0x2c>)
100041d4:	689b      	ldr	r3, [r3, #8]
100041d6:	4283      	cmp	r3, r0
100041d8:	d10d      	bne.n	100041f6 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100041da:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
100041de:	2b00      	cmp	r3, #0
100041e0:	d009      	beq.n	100041f6 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
100041e2:	2280      	movs	r2, #128	; 0x80
100041e4:	4b06      	ldr	r3, [pc, #24]	; (10004200 <z_impl_k_thread_abort+0x30>)
100041e6:	0552      	lsls	r2, r2, #21
100041e8:	6859      	ldr	r1, [r3, #4]
100041ea:	430a      	orrs	r2, r1
100041ec:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
100041ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100041f0:	4904      	ldr	r1, [pc, #16]	; (10004204 <z_impl_k_thread_abort+0x34>)
100041f2:	400a      	ands	r2, r1
100041f4:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
100041f6:	f002 f8cf 	bl	10006398 <z_thread_abort>
}
100041fa:	bd10      	pop	{r4, pc}
100041fc:	20002464 	.word	0x20002464
10004200:	e000ed00 	.word	0xe000ed00
10004204:	ffff7fff 	.word	0xffff7fff

10004208 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
10004208:	4b01      	ldr	r3, [pc, #4]	; (10004210 <__stdout_hook_install+0x8>)
1000420a:	6018      	str	r0, [r3, #0]
}
1000420c:	4770      	bx	lr
1000420e:	46c0      	nop			; (mov r8, r8)
10004210:	20000788 	.word	0x20000788

10004214 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
10004214:	b570      	push	{r4, r5, r6, lr}
10004216:	0006      	movs	r6, r0
10004218:	000d      	movs	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
1000421a:	2400      	movs	r4, #0
1000421c:	42ac      	cmp	r4, r5
1000421e:	da08      	bge.n	10004232 <z_impl_zephyr_read_stdin+0x1e>
		*(buf + i) = _stdin_hook();
10004220:	4b05      	ldr	r3, [pc, #20]	; (10004238 <z_impl_zephyr_read_stdin+0x24>)
10004222:	681b      	ldr	r3, [r3, #0]
10004224:	4798      	blx	r3
10004226:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
10004228:	3401      	adds	r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
1000422a:	280a      	cmp	r0, #10
1000422c:	d001      	beq.n	10004232 <z_impl_zephyr_read_stdin+0x1e>
1000422e:	280d      	cmp	r0, #13
10004230:	d1f4      	bne.n	1000421c <z_impl_zephyr_read_stdin+0x8>
			i++;
			break;
		}
	}
	return i;
}
10004232:	0020      	movs	r0, r4
10004234:	bd70      	pop	{r4, r5, r6, pc}
10004236:	46c0      	nop			; (mov r8, r8)
10004238:	20000784 	.word	0x20000784

1000423c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
1000423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000423e:	0006      	movs	r6, r0
10004240:	000d      	movs	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
10004242:	2400      	movs	r4, #0
10004244:	42ac      	cmp	r4, r5
10004246:	db01      	blt.n	1000424c <z_impl_zephyr_write_stdout+0x10>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
10004248:	0028      	movs	r0, r5
1000424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
1000424c:	5d33      	ldrb	r3, [r6, r4]
1000424e:	4f05      	ldr	r7, [pc, #20]	; (10004264 <z_impl_zephyr_write_stdout+0x28>)
10004250:	2b0a      	cmp	r3, #10
10004252:	d102      	bne.n	1000425a <z_impl_zephyr_write_stdout+0x1e>
			_stdout_hook('\r');
10004254:	200d      	movs	r0, #13
10004256:	683b      	ldr	r3, [r7, #0]
10004258:	4798      	blx	r3
		_stdout_hook(*(buf + i));
1000425a:	5d30      	ldrb	r0, [r6, r4]
1000425c:	683b      	ldr	r3, [r7, #0]
1000425e:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
10004260:	3401      	adds	r4, #1
10004262:	e7ef      	b.n	10004244 <z_impl_zephyr_write_stdout+0x8>
10004264:	20000788 	.word	0x20000788

10004268 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
10004268:	b510      	push	{r4, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
1000426a:	2105      	movs	r1, #5
1000426c:	4801      	ldr	r0, [pc, #4]	; (10004274 <_exit+0xc>)
1000426e:	f7ff ffe5 	bl	1000423c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
10004272:	e7fe      	b.n	10004272 <_exit+0xa>
10004274:	10012816 	.word	0x10012816

10004278 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
10004278:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
1000427a:	4c07      	ldr	r4, [pc, #28]	; (10004298 <_sbrk+0x20>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
1000427c:	4907      	ldr	r1, [pc, #28]	; (1000429c <_sbrk+0x24>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
1000427e:	6823      	ldr	r3, [r4, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
10004280:	18c2      	adds	r2, r0, r3
10004282:	4807      	ldr	r0, [pc, #28]	; (100042a0 <_sbrk+0x28>)
10004284:	1a09      	subs	r1, r1, r0
10004286:	428a      	cmp	r2, r1
10004288:	d202      	bcs.n	10004290 <_sbrk+0x18>
	ptr = ((char *)HEAP_BASE) + heap_sz;
1000428a:	1818      	adds	r0, r3, r0
		heap_sz += count;
1000428c:	6022      	str	r2, [r4, #0]
	} else {
		ret = (void *)-1;
	}

	return ret;
}
1000428e:	bd10      	pop	{r4, pc}
		ret = (void *)-1;
10004290:	2001      	movs	r0, #1
10004292:	4240      	negs	r0, r0
	return ret;
10004294:	e7fb      	b.n	1000428e <_sbrk+0x16>
10004296:	46c0      	nop			; (mov r8, r8)
10004298:	200023c8 	.word	0x200023c8
1000429c:	20042000 	.word	0x20042000
100042a0:	20007600 	.word	0x20007600

100042a4 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100042a4:	4b0e      	ldr	r3, [pc, #56]	; (100042e0 <rp2040_init+0x3c>)
100042a6:	4a0f      	ldr	r2, [pc, #60]	; (100042e4 <rp2040_init+0x40>)
#include <hardware/resets.h>

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(void)
{
100042a8:	b570      	push	{r4, r5, r6, lr}
100042aa:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100042ac:	4d0e      	ldr	r5, [pc, #56]	; (100042e8 <rp2040_init+0x44>)
100042ae:	4b0f      	ldr	r3, [pc, #60]	; (100042ec <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100042b0:	4c0f      	ldr	r4, [pc, #60]	; (100042f0 <rp2040_init+0x4c>)
100042b2:	602b      	str	r3, [r5, #0]
100042b4:	0019      	movs	r1, r3
100042b6:	68a2      	ldr	r2, [r4, #8]
100042b8:	4391      	bics	r1, r2
100042ba:	d1fb      	bne.n	100042b4 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100042bc:	f001 f87a 	bl	100053b4 <clocks_init>
100042c0:	4b0c      	ldr	r3, [pc, #48]	; (100042f4 <rp2040_init+0x50>)
100042c2:	602b      	str	r3, [r5, #0]
100042c4:	68a3      	ldr	r3, [r4, #8]
100042c6:	01db      	lsls	r3, r3, #7
100042c8:	3380      	adds	r3, #128	; 0x80
100042ca:	d1fb      	bne.n	100042c4 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100042cc:	f3ef 8310 	mrs	r3, PRIMASK
100042d0:	b672      	cpsid	i
	if (key != 0U) {
100042d2:	2b00      	cmp	r3, #0
100042d4:	d102      	bne.n	100042dc <rp2040_init+0x38>
	__asm__ volatile(
100042d6:	b662      	cpsie	i
100042d8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100042dc:	2000      	movs	r0, #0
100042de:	bd70      	pop	{r4, r5, r6, pc}
100042e0:	4000e000 	.word	0x4000e000
100042e4:	ffffcdbf 	.word	0xffffcdbf
100042e8:	4000f000 	.word	0x4000f000
100042ec:	003c3ffe 	.word	0x003c3ffe
100042f0:	4000c000 	.word	0x4000c000
100042f4:	01ffffff 	.word	0x01ffffff

100042f8 <adc_rpi_channel_setup>:
		;
}

static int adc_rpi_channel_setup(const struct device *dev,
				 const struct adc_channel_cfg *channel_cfg)
{
100042f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct adc_rpi_config *config = dev->config;

	if (channel_cfg->channel_id >= config->num_channels) {
100042fa:	6840      	ldr	r0, [r0, #4]
100042fc:	790a      	ldrb	r2, [r1, #4]
100042fe:	7800      	ldrb	r0, [r0, #0]
10004300:	06d3      	lsls	r3, r2, #27
10004302:	0edb      	lsrs	r3, r3, #27
10004304:	4298      	cmp	r0, r3
10004306:	d80e      	bhi.n	10004326 <adc_rpi_channel_setup+0x2e>
		LOG_ERR("unsupported channel id '%d'", channel_cfg->channel_id);
10004308:	2000      	movs	r0, #0
1000430a:	9303      	str	r3, [sp, #12]
1000430c:	4b1a      	ldr	r3, [pc, #104]	; (10004378 <adc_rpi_channel_setup+0x80>)
1000430e:	2201      	movs	r2, #1
10004310:	9302      	str	r3, [sp, #8]
10004312:	491a      	ldr	r1, [pc, #104]	; (1000437c <adc_rpi_channel_setup+0x84>)
10004314:	0003      	movs	r3, r0
10004316:	9001      	str	r0, [sp, #4]
10004318:	9000      	str	r0, [sp, #0]
1000431a:	f008 ffb2 	bl	1000d282 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
1000431e:	2086      	movs	r0, #134	; 0x86
	}

	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
		LOG_ERR("Acquisition time is not valid");
		return -EINVAL;
10004320:	4240      	negs	r0, r0
		LOG_ERR("Gain is not valid");
		return -EINVAL;
	}

	return 0;
}
10004322:	b004      	add	sp, #16
10004324:	bd10      	pop	{r4, pc}
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
10004326:	8848      	ldrh	r0, [r1, #2]
10004328:	2800      	cmp	r0, #0
1000432a:	d00b      	beq.n	10004344 <adc_rpi_channel_setup+0x4c>
		LOG_ERR("Acquisition time is not valid");
1000432c:	2000      	movs	r0, #0
1000432e:	4b14      	ldr	r3, [pc, #80]	; (10004380 <adc_rpi_channel_setup+0x88>)
10004330:	4912      	ldr	r1, [pc, #72]	; (1000437c <adc_rpi_channel_setup+0x84>)
10004332:	9302      	str	r3, [sp, #8]
10004334:	0003      	movs	r3, r0
10004336:	9001      	str	r0, [sp, #4]
10004338:	9000      	str	r0, [sp, #0]
		LOG_ERR("Gain is not valid");
1000433a:	2201      	movs	r2, #1
1000433c:	f008 ffa1 	bl	1000d282 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
10004340:	2016      	movs	r0, #22
10004342:	e7ed      	b.n	10004320 <adc_rpi_channel_setup+0x28>
	if (channel_cfg->differential) {
10004344:	2420      	movs	r4, #32
10004346:	0013      	movs	r3, r2
10004348:	4023      	ands	r3, r4
1000434a:	4222      	tst	r2, r4
1000434c:	d009      	beq.n	10004362 <adc_rpi_channel_setup+0x6a>
		LOG_ERR("unsupported differential mode");
1000434e:	4b0d      	ldr	r3, [pc, #52]	; (10004384 <adc_rpi_channel_setup+0x8c>)
10004350:	2201      	movs	r2, #1
10004352:	9302      	str	r3, [sp, #8]
10004354:	4909      	ldr	r1, [pc, #36]	; (1000437c <adc_rpi_channel_setup+0x84>)
10004356:	0003      	movs	r3, r0
10004358:	9001      	str	r0, [sp, #4]
1000435a:	9000      	str	r0, [sp, #0]
1000435c:	f008 ff91 	bl	1000d282 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10004360:	e7dd      	b.n	1000431e <adc_rpi_channel_setup+0x26>
	if (channel_cfg->gain != ADC_GAIN_1) {
10004362:	780a      	ldrb	r2, [r1, #0]
	return 0;
10004364:	0018      	movs	r0, r3
	if (channel_cfg->gain != ADC_GAIN_1) {
10004366:	2a08      	cmp	r2, #8
10004368:	d0db      	beq.n	10004322 <adc_rpi_channel_setup+0x2a>
		LOG_ERR("Gain is not valid");
1000436a:	4a07      	ldr	r2, [pc, #28]	; (10004388 <adc_rpi_channel_setup+0x90>)
1000436c:	4903      	ldr	r1, [pc, #12]	; (1000437c <adc_rpi_channel_setup+0x84>)
1000436e:	9202      	str	r2, [sp, #8]
10004370:	9301      	str	r3, [sp, #4]
10004372:	9300      	str	r3, [sp, #0]
10004374:	e7e1      	b.n	1000433a <adc_rpi_channel_setup+0x42>
10004376:	46c0      	nop			; (mov r8, r8)
10004378:	10012820 	.word	0x10012820
1000437c:	1000e194 	.word	0x1000e194
10004380:	1001283c 	.word	0x1001283c
10004384:	1001285a 	.word	0x1001285a
10004388:	10012878 	.word	0x10012878

1000438c <adc_context_start_sampling>:
static void adc_context_start_sampling(struct adc_context *ctx)
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	data->channels = ctx->sequence.channels;
1000438c:	0002      	movs	r2, r0
{
1000438e:	b570      	push	{r4, r5, r6, lr}
	data->channels = ctx->sequence.channels;
10004390:	1d03      	adds	r3, r0, #4
10004392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10004394:	32b4      	adds	r2, #180	; 0xb4
10004396:	6013      	str	r3, [r2, #0]
	data->repeat_buf = data->buf;
10004398:	0003      	movs	r3, r0
1000439a:	30ac      	adds	r0, #172	; 0xac
1000439c:	6801      	ldr	r1, [r0, #0]
1000439e:	33b0      	adds	r3, #176	; 0xb0
100043a0:	6019      	str	r1, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100043a2:	2180      	movs	r1, #128	; 0x80
100043a4:	4b0c      	ldr	r3, [pc, #48]	; (100043d8 <adc_context_start_sampling+0x4c>)
100043a6:	0109      	lsls	r1, r1, #4
100043a8:	6019      	str	r1, [r3, #0]
100043aa:	2180      	movs	r1, #128	; 0x80
100043ac:	2504      	movs	r5, #4
100043ae:	4c0b      	ldr	r4, [pc, #44]	; (100043dc <adc_context_start_sampling+0x50>)
100043b0:	00c9      	lsls	r1, r1, #3
100043b2:	6019      	str	r1, [r3, #0]
100043b4:	601d      	str	r5, [r3, #0]
100043b6:	6021      	str	r1, [r4, #0]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
100043b8:	6810      	ldr	r0, [r2, #0]
100043ba:	f7fd ff33 	bl	10002224 <__ffssi2>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100043be:	4b08      	ldr	r3, [pc, #32]	; (100043e0 <adc_context_start_sampling+0x54>)

	adc_clear_errors();

	/* Find next channel and start conversion */
	adc_select_input(find_lsb_set(data->channels) - 1);
100043c0:	3801      	subs	r0, #1
100043c2:	681b      	ldr	r3, [r3, #0]
 *
 * \param input Input to select.
 */
static inline void adc_select_input(uint input) {
    valid_params_if(ADC, input < NUM_ADC_CHANNELS);
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
100043c4:	0300      	lsls	r0, r0, #12
100043c6:	4058      	eors	r0, r3
100043c8:	23e0      	movs	r3, #224	; 0xe0
100043ca:	01db      	lsls	r3, r3, #7
100043cc:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100043ce:	4b05      	ldr	r3, [pc, #20]	; (100043e4 <adc_context_start_sampling+0x58>)
100043d0:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100043d2:	6025      	str	r5, [r4, #0]
	adc_start_once();
}
100043d4:	bd70      	pop	{r4, r5, r6, pc}
100043d6:	46c0      	nop			; (mov r8, r8)
100043d8:	4004e008 	.word	0x4004e008
100043dc:	4004e000 	.word	0x4004e000
100043e0:	4004c000 	.word	0x4004c000
100043e4:	4004d000 	.word	0x4004d000

100043e8 <adc_rpi_read_async>:
{
100043e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adc_rpi_data *data = dev->data;
100043ea:	6907      	ldr	r7, [r0, #16]
{
100043ec:	b087      	sub	sp, #28

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
100043ee:	003b      	movs	r3, r7
100043f0:	3340      	adds	r3, #64	; 0x40
100043f2:	0004      	movs	r4, r0
100043f4:	000d      	movs	r5, r1
100043f6:	0016      	movs	r6, r2
100043f8:	9305      	str	r3, [sp, #20]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
100043fa:	2201      	movs	r2, #1
100043fc:	4252      	negs	r2, r2
100043fe:	17d3      	asrs	r3, r2, #31
10004400:	9805      	ldr	r0, [sp, #20]
10004402:	f001 fcd7 	bl	10005db4 <z_impl_k_sem_take>
	adc_context_lock(&data->ctx, async ? true : false, async);
10004406:	0033      	movs	r3, r6
10004408:	1e5a      	subs	r2, r3, #1
1000440a:	4193      	sbcs	r3, r2

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
1000440c:	003a      	movs	r2, r7
1000440e:	3278      	adds	r2, #120	; 0x78
10004410:	7013      	strb	r3, [r2, #0]
10004412:	9204      	str	r2, [sp, #16]
	ctx->signal = signal;
10004414:	677e      	str	r6, [r7, #116]	; 0x74
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10004416:	7c2b      	ldrb	r3, [r5, #16]
	const struct adc_rpi_config *config = dev->config;
10004418:	6862      	ldr	r2, [r4, #4]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
1000441a:	1e59      	subs	r1, r3, #1
	struct adc_rpi_data *data = dev->data;
1000441c:	6924      	ldr	r4, [r4, #16]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
1000441e:	290b      	cmp	r1, #11
10004420:	d910      	bls.n	10004444 <adc_rpi_read_async+0x5c>
		LOG_ERR("unsupported resolution %d", sequence->resolution);
10004422:	9303      	str	r3, [sp, #12]
10004424:	4949      	ldr	r1, [pc, #292]	; (1000454c <adc_rpi_read_async+0x164>)
10004426:	4b4a      	ldr	r3, [pc, #296]	; (10004550 <adc_rpi_read_async+0x168>)
10004428:	2000      	movs	r0, #0
1000442a:	9302      	str	r3, [sp, #8]
1000442c:	2201      	movs	r2, #1
1000442e:	0003      	movs	r3, r0
10004430:	9001      	str	r0, [sp, #4]
10004432:	9000      	str	r0, [sp, #0]
10004434:	f008 ff25 	bl	1000d282 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10004438:	2486      	movs	r4, #134	; 0x86
		return -ENOMEM;
1000443a:	4264      	negs	r4, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
1000443c:	9805      	ldr	r0, [sp, #20]
1000443e:	f001 fc97 	bl	10005d70 <z_impl_k_sem_give>
	return err;
10004442:	e06b      	b.n	1000451c <adc_rpi_read_async+0x134>
	if (find_msb_set(sequence->channels) > config->num_channels) {
10004444:	686f      	ldr	r7, [r5, #4]
10004446:	7816      	ldrb	r6, [r2, #0]
	if (op == 0) {
10004448:	2f00      	cmp	r7, #0
1000444a:	d11f      	bne.n	1000448c <adc_rpi_read_async+0xa4>
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
1000444c:	2201      	movs	r2, #1
1000444e:	3e01      	subs	r6, #1
10004450:	40b2      	lsls	r2, r6
	uint8_t channels = 0;
10004452:	2300      	movs	r3, #0
		if (mask & sequence->channels) {
10004454:	423a      	tst	r2, r7
10004456:	d001      	beq.n	1000445c <adc_rpi_read_async+0x74>
			channels++;
10004458:	3301      	adds	r3, #1
1000445a:	b2db      	uxtb	r3, r3
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
1000445c:	0852      	lsrs	r2, r2, #1
1000445e:	d1f9      	bne.n	10004454 <adc_rpi_read_async+0x6c>
	if (sequence->options) {
10004460:	682a      	ldr	r2, [r5, #0]
	needed = channels * sizeof(uint16_t);
10004462:	005b      	lsls	r3, r3, #1
	if (sequence->options) {
10004464:	2a00      	cmp	r2, #0
10004466:	d002      	beq.n	1000446e <adc_rpi_read_async+0x86>
		needed *= (1 + sequence->options->extra_samplings);
10004468:	8992      	ldrh	r2, [r2, #12]
1000446a:	3201      	adds	r2, #1
1000446c:	4353      	muls	r3, r2
	if (sequence->buffer_size < needed) {
1000446e:	68ea      	ldr	r2, [r5, #12]
10004470:	429a      	cmp	r2, r3
10004472:	d216      	bcs.n	100044a2 <adc_rpi_read_async+0xba>
		LOG_ERR("buffer size too small");
10004474:	2000      	movs	r0, #0
10004476:	4b37      	ldr	r3, [pc, #220]	; (10004554 <adc_rpi_read_async+0x16c>)
10004478:	2201      	movs	r2, #1
1000447a:	9302      	str	r3, [sp, #8]
1000447c:	4933      	ldr	r1, [pc, #204]	; (1000454c <adc_rpi_read_async+0x164>)
1000447e:	0003      	movs	r3, r0
10004480:	9001      	str	r0, [sp, #4]
10004482:	9000      	str	r0, [sp, #0]
10004484:	f008 fefd 	bl	1000d282 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
10004488:	240c      	movs	r4, #12
1000448a:	e7d6      	b.n	1000443a <adc_rpi_read_async+0x52>
	return 32 - __builtin_clz(op);
1000448c:	0038      	movs	r0, r7
1000448e:	f7fb ff3b 	bl	10000308 <__clzsi2>
10004492:	2320      	movs	r3, #32
10004494:	1a1b      	subs	r3, r3, r0
	if (find_msb_set(sequence->channels) > config->num_channels) {
10004496:	42b3      	cmp	r3, r6
10004498:	d9d8      	bls.n	1000444c <adc_rpi_read_async+0x64>
		LOG_ERR("unsupported channels in mask: 0x%08x",
1000449a:	492c      	ldr	r1, [pc, #176]	; (1000454c <adc_rpi_read_async+0x164>)
1000449c:	4b2e      	ldr	r3, [pc, #184]	; (10004558 <adc_rpi_read_async+0x170>)
1000449e:	9703      	str	r7, [sp, #12]
100044a0:	e7c2      	b.n	10004428 <adc_rpi_read_async+0x40>
	data->buf = sequence->buffer;
100044a2:	0023      	movs	r3, r4
100044a4:	68aa      	ldr	r2, [r5, #8]
100044a6:	33ac      	adds	r3, #172	; 0xac
100044a8:	601a      	str	r2, [r3, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
100044aa:	002a      	movs	r2, r5
100044ac:	3b30      	subs	r3, #48	; 0x30
100044ae:	ca43      	ldmia	r2!, {r0, r1, r6}
100044b0:	c343      	stmia	r3!, {r0, r1, r6}
	ctx->status = 0;
100044b2:	2600      	movs	r6, #0
	ctx->sequence = *sequence;
100044b4:	ca03      	ldmia	r2!, {r0, r1}
100044b6:	c303      	stmia	r3!, {r0, r1}
	ctx->status = 0;
100044b8:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
100044ba:	682b      	ldr	r3, [r5, #0]
100044bc:	42b3      	cmp	r3, r6
100044be:	d030      	beq.n	10004522 <adc_rpi_read_async+0x13a>
		ctx->options = *sequence->options;
100044c0:	0025      	movs	r5, r4
100044c2:	3590      	adds	r5, #144	; 0x90
100044c4:	002a      	movs	r2, r5
100044c6:	cb83      	ldmia	r3!, {r0, r1, r7}
100044c8:	c283      	stmia	r2!, {r0, r1, r7}
100044ca:	681b      	ldr	r3, [r3, #0]
100044cc:	6013      	str	r3, [r2, #0]
		ctx->sequence.options = &ctx->options;
		ctx->sampling_index = 0U;
100044ce:	0023      	movs	r3, r4
100044d0:	33a0      	adds	r3, #160	; 0xa0
		ctx->sequence.options = &ctx->options;
100044d2:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
100044d4:	801e      	strh	r6, [r3, #0]

		if (ctx->options.interval_us != 0U) {
100044d6:	682b      	ldr	r3, [r5, #0]
100044d8:	42b3      	cmp	r3, r6
100044da:	d022      	beq.n	10004522 <adc_rpi_read_async+0x13a>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
100044dc:	0031      	movs	r1, r6
100044de:	0020      	movs	r0, r4
100044e0:	f009 fcfb 	bl	1000deda <z_impl_atomic_set>
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
100044e4:	0031      	movs	r1, r6
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
100044e6:	2263      	movs	r2, #99	; 0x63
100044e8:	2300      	movs	r3, #0
100044ea:	6828      	ldr	r0, [r5, #0]
100044ec:	1880      	adds	r0, r0, r2
100044ee:	4159      	adcs	r1, r3
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
100044f0:	2264      	movs	r2, #100	; 0x64
100044f2:	2300      	movs	r3, #0
100044f4:	f7fb ff46 	bl	10000384 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
100044f8:	9000      	str	r0, [sp, #0]
100044fa:	0020      	movs	r0, r4
100044fc:	2200      	movs	r2, #0
100044fe:	2300      	movs	r3, #0
10004500:	9101      	str	r1, [sp, #4]
10004502:	3008      	adds	r0, #8
10004504:	f002 f980 	bl	10006808 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
10004508:	0023      	movs	r3, r4
1000450a:	3378      	adds	r3, #120	; 0x78
1000450c:	781b      	ldrb	r3, [r3, #0]
1000450e:	2b00      	cmp	r3, #0
10004510:	d00b      	beq.n	1000452a <adc_rpi_read_async+0x142>
	if (ctx->asynchronous && (status == 0)) {
10004512:	9b04      	ldr	r3, [sp, #16]
10004514:	781c      	ldrb	r4, [r3, #0]
10004516:	2c00      	cmp	r4, #0
10004518:	d090      	beq.n	1000443c <adc_rpi_read_async+0x54>
		return 0;
1000451a:	2400      	movs	r4, #0
}
1000451c:	0020      	movs	r0, r4
1000451e:	b007      	add	sp, #28
10004520:	bdf0      	pop	{r4, r5, r6, r7, pc}
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
10004522:	0020      	movs	r0, r4
10004524:	f7ff ff32 	bl	1000438c <adc_context_start_sampling>
10004528:	e7ee      	b.n	10004508 <adc_rpi_read_async+0x120>
	k_sem_take(&ctx->sync, K_FOREVER);
1000452a:	0020      	movs	r0, r4
	return z_impl_k_sem_take(sem, timeout);
1000452c:	2201      	movs	r2, #1
1000452e:	4252      	negs	r2, r2
10004530:	17d3      	asrs	r3, r2, #31
10004532:	3058      	adds	r0, #88	; 0x58
10004534:	f001 fc3e 	bl	10005db4 <z_impl_k_sem_take>
	if (ctx->asynchronous && (status == 0)) {
10004538:	9b04      	ldr	r3, [sp, #16]
	return ctx->status;
1000453a:	6f24      	ldr	r4, [r4, #112]	; 0x70
	if (ctx->asynchronous && (status == 0)) {
1000453c:	781b      	ldrb	r3, [r3, #0]
1000453e:	2b00      	cmp	r3, #0
10004540:	d100      	bne.n	10004544 <adc_rpi_read_async+0x15c>
10004542:	e77b      	b.n	1000443c <adc_rpi_read_async+0x54>
10004544:	2c00      	cmp	r4, #0
10004546:	d000      	beq.n	1000454a <adc_rpi_read_async+0x162>
10004548:	e778      	b.n	1000443c <adc_rpi_read_async+0x54>
1000454a:	e7e6      	b.n	1000451a <adc_rpi_read_async+0x132>
1000454c:	1000e194 	.word	0x1000e194
10004550:	1001288a 	.word	0x1001288a
10004554:	100128c9 	.word	0x100128c9
10004558:	100128a4 	.word	0x100128a4

1000455c <adc_rpi_isr>:
 *  \ingroup hardware_adc
 *
 * \return Returns true if the FIFO is empty
 */
static inline bool adc_fifo_is_empty(void) {
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
1000455c:	2180      	movs	r1, #128	; 0x80
{
1000455e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (uint16_t)adc_hw->result;
10004560:	4d3e      	ldr	r5, [pc, #248]	; (1000465c <adc_rpi_isr+0x100>)
	struct adc_rpi_data *data = dev->data;
10004562:	6904      	ldr	r4, [r0, #16]
	return (uint16_t)adc_hw->result;
10004564:	686a      	ldr	r2, [r5, #4]
    return (adc_hw->cs & ADC_CS_AINSEL_BITS) >> ADC_CS_AINSEL_LSB;
10004566:	682b      	ldr	r3, [r5, #0]
10004568:	b292      	uxth	r2, r2
1000456a:	045b      	lsls	r3, r3, #17
1000456c:	0f5b      	lsrs	r3, r3, #29
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
1000456e:	0049      	lsls	r1, r1, #1
10004570:	68ae      	ldr	r6, [r5, #8]
	while (!adc_fifo_is_empty()) {
10004572:	420e      	tst	r6, r1
10004574:	d00d      	beq.n	10004592 <adc_rpi_isr+0x36>
	return (adc_hw->cs & ADC_CS_ERR_BITS) ? true : false;
10004576:	6829      	ldr	r1, [r5, #0]
	if (adc_get_err()) {
10004578:	0589      	lsls	r1, r1, #22
1000457a:	d514      	bpl.n	100045a6 <adc_rpi_isr+0x4a>
	if (ctx->asynchronous) {
1000457c:	0023      	movs	r3, r4
1000457e:	3378      	adds	r3, #120	; 0x78
10004580:	781b      	ldrb	r3, [r3, #0]
10004582:	2b00      	cmp	r3, #0
10004584:	d007      	beq.n	10004596 <adc_rpi_isr+0x3a>
10004586:	2105      	movs	r1, #5
10004588:	4249      	negs	r1, r1
1000458a:	0020      	movs	r0, r4
1000458c:	f008 fe9e 	bl	1000d2cc <adc_context_complete.part.0>
10004590:	e044      	b.n	1000461c <adc_rpi_isr+0xc0>
 *  \ingroup hardware_adc
 *
 * Pops the latest result from the ADC FIFO.
 */
static inline uint16_t adc_fifo_get(void) {
    return (uint16_t)adc_hw->fifo;
10004592:	68ee      	ldr	r6, [r5, #12]
10004594:	e7ec      	b.n	10004570 <adc_rpi_isr+0x14>
		ctx->status = status;
10004596:	2305      	movs	r3, #5
10004598:	425b      	negs	r3, r3
1000459a:	6723      	str	r3, [r4, #112]	; 0x70
	k_sem_give(&ctx->sync);
1000459c:	0020      	movs	r0, r4
1000459e:	3058      	adds	r0, #88	; 0x58
	z_impl_k_sem_give(sem);
100045a0:	f001 fbe6 	bl	10005d70 <z_impl_k_sem_give>
}
100045a4:	e03a      	b.n	1000461c <adc_rpi_isr+0xc0>
	*data->buf++ = result;
100045a6:	0026      	movs	r6, r4
100045a8:	36ac      	adds	r6, #172	; 0xac
100045aa:	6831      	ldr	r1, [r6, #0]
100045ac:	1c8f      	adds	r7, r1, #2
100045ae:	6037      	str	r7, [r6, #0]
100045b0:	800a      	strh	r2, [r1, #0]
	data->channels &= ~(BIT(ainsel));
100045b2:	2201      	movs	r2, #1
100045b4:	0021      	movs	r1, r4
100045b6:	409a      	lsls	r2, r3
100045b8:	31b4      	adds	r1, #180	; 0xb4
100045ba:	680b      	ldr	r3, [r1, #0]
100045bc:	4393      	bics	r3, r2
100045be:	600b      	str	r3, [r1, #0]
	if (data->channels == 0) {
100045c0:	d13b      	bne.n	1000463a <adc_rpi_isr+0xde>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
100045c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
100045c4:	2b00      	cmp	r3, #0
100045c6:	d031      	beq.n	1000462c <adc_rpi_isr+0xd0>
		adc_sequence_callback callback = ctx->options.callback;
100045c8:	0023      	movs	r3, r4
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
100045ca:	0025      	movs	r5, r4
100045cc:	0027      	movs	r7, r4
		adc_sequence_callback callback = ctx->options.callback;
100045ce:	3394      	adds	r3, #148	; 0x94
100045d0:	681b      	ldr	r3, [r3, #0]
			action = callback(dev,
100045d2:	35a0      	adds	r5, #160	; 0xa0
100045d4:	882a      	ldrh	r2, [r5, #0]
100045d6:	3790      	adds	r7, #144	; 0x90
		if (callback) {
100045d8:	2b00      	cmp	r3, #0
100045da:	d005      	beq.n	100045e8 <adc_rpi_isr+0x8c>
			action = callback(dev,
100045dc:	3938      	subs	r1, #56	; 0x38
100045de:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
100045e0:	2801      	cmp	r0, #1
100045e2:	d00a      	beq.n	100045fa <adc_rpi_isr+0x9e>
100045e4:	2802      	cmp	r0, #2
100045e6:	d01a      	beq.n	1000461e <adc_rpi_isr+0xc2>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->options.extra_samplings) {
100045e8:	0022      	movs	r2, r4
100045ea:	329c      	adds	r2, #156	; 0x9c
			if (ctx->sampling_index <
100045ec:	882b      	ldrh	r3, [r5, #0]
100045ee:	8812      	ldrh	r2, [r2, #0]
100045f0:	429a      	cmp	r2, r3
100045f2:	d914      	bls.n	1000461e <adc_rpi_isr+0xc2>
				++ctx->sampling_index;
100045f4:	3301      	adds	r3, #1
100045f6:	802b      	strh	r3, [r5, #0]
			} else {
				finish = true;
			}
		}

		if (!finish) {
100045f8:	e003      	b.n	10004602 <adc_rpi_isr+0xa6>
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	if (repeat_sampling) {
		data->buf = data->repeat_buf;
100045fa:	0023      	movs	r3, r4
100045fc:	33b0      	adds	r3, #176	; 0xb0
100045fe:	681b      	ldr	r3, [r3, #0]
10004600:	6033      	str	r3, [r6, #0]
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
10004602:	683b      	ldr	r3, [r7, #0]
10004604:	2b00      	cmp	r3, #0
10004606:	d103      	bne.n	10004610 <adc_rpi_isr+0xb4>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
10004608:	0020      	movs	r0, r4
1000460a:	f7ff febf 	bl	1000438c <adc_context_start_sampling>
1000460e:	e005      	b.n	1000461c <adc_rpi_isr+0xc0>
	return z_impl_atomic_sub(target, value);
10004610:	2101      	movs	r1, #1
10004612:	0020      	movs	r0, r4
10004614:	f009 fc54 	bl	1000dec0 <z_impl_atomic_sub>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
10004618:	2801      	cmp	r0, #1
1000461a:	dcf5      	bgt.n	10004608 <adc_rpi_isr+0xac>
}
1000461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
1000461e:	683b      	ldr	r3, [r7, #0]
10004620:	2b00      	cmp	r3, #0
10004622:	d003      	beq.n	1000462c <adc_rpi_isr+0xd0>
	k_timer_stop(&ctx->timer);
10004624:	0020      	movs	r0, r4
10004626:	3008      	adds	r0, #8
	z_impl_k_timer_stop(timer);
10004628:	f009 fc24 	bl	1000de74 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
1000462c:	0023      	movs	r3, r4
1000462e:	3378      	adds	r3, #120	; 0x78
10004630:	781b      	ldrb	r3, [r3, #0]
10004632:	2b00      	cmp	r3, #0
10004634:	d0b2      	beq.n	1000459c <adc_rpi_isr+0x40>
10004636:	2100      	movs	r1, #0
10004638:	e7a7      	b.n	1000458a <adc_rpi_isr+0x2e>
	return __builtin_ffs(op);
1000463a:	0018      	movs	r0, r3
1000463c:	f7fd fdf2 	bl	10002224 <__ffssi2>
	ainsel = (uint8_t)(find_lsb_set(data->channels) - 1);
10004640:	3801      	subs	r0, #1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004642:	682b      	ldr	r3, [r5, #0]
	adc_select_input(ainsel);
10004644:	b2c0      	uxtb	r0, r0
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
10004646:	0300      	lsls	r0, r0, #12
10004648:	4058      	eors	r0, r3
1000464a:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000464c:	2204      	movs	r2, #4
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000464e:	01db      	lsls	r3, r3, #7
10004650:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004652:	4b03      	ldr	r3, [pc, #12]	; (10004660 <adc_rpi_isr+0x104>)
10004654:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004656:	4b03      	ldr	r3, [pc, #12]	; (10004664 <adc_rpi_isr+0x108>)
10004658:	601a      	str	r2, [r3, #0]
}
1000465a:	e7df      	b.n	1000461c <adc_rpi_isr+0xc0>
1000465c:	4004c000 	.word	0x4004c000
10004660:	4004d000 	.word	0x4004d000
10004664:	4004e000 	.word	0x4004e000

10004668 <adc_rpi_init>:
 * @param dev RaspberryPi Pico ADC device
 *
 * @return 0 on success
 */
static int adc_rpi_init(const struct device *dev)
{
10004668:	b510      	push	{r4, lr}
	const struct adc_rpi_config *config = dev->config;
	struct adc_rpi_data *data = dev->data;

	config->irq_configure();
1000466a:	6843      	ldr	r3, [r0, #4]
	struct adc_rpi_data *data = dev->data;
1000466c:	6904      	ldr	r4, [r0, #16]
	config->irq_configure();
1000466e:	685b      	ldr	r3, [r3, #4]
10004670:	4798      	blx	r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004672:	4b0e      	ldr	r3, [pc, #56]	; (100046ac <adc_rpi_init+0x44>)
10004674:	681a      	ldr	r2, [r3, #0]
10004676:	4b0e      	ldr	r3, [pc, #56]	; (100046b0 <adc_rpi_init+0x48>)
10004678:	4053      	eors	r3, r2
1000467a:	4a0e      	ldr	r2, [pc, #56]	; (100046b4 <adc_rpi_init+0x4c>)
1000467c:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000467e:	4a0e      	ldr	r2, [pc, #56]	; (100046b8 <adc_rpi_init+0x50>)
10004680:	6013      	str	r3, [r2, #0]
    adc_hw->div = (uint32_t)(clkdiv * (float) (1 << ADC_DIV_INT_LSB));
10004682:	2200      	movs	r2, #0
10004684:	4b0d      	ldr	r3, [pc, #52]	; (100046bc <adc_rpi_init+0x54>)
10004686:	611a      	str	r2, [r3, #16]
	adc_hw->cs = ADC_CS_EN_BITS;
10004688:	3201      	adds	r2, #1
1000468a:	601a      	str	r2, [r3, #0]
	while (!(adc_hw->cs & ADC_CS_READY_BITS))
1000468c:	32ff      	adds	r2, #255	; 0xff
1000468e:	6819      	ldr	r1, [r3, #0]
10004690:	4211      	tst	r1, r2
10004692:	d0fc      	beq.n	1000468e <adc_rpi_init+0x26>
 *  \ingroup hardware_adc
 *
 * \param enabled Set to true to enable the ADC interrupts, false to disable
 */
static inline void adc_irq_set_enabled(bool enabled) {
    adc_hw->inte = !!enabled;
10004694:	2201      	movs	r2, #1
10004696:	619a      	str	r2, [r3, #24]
	if (!k_sem_count_get(&ctx->lock)) {
10004698:	6ca3      	ldr	r3, [r4, #72]	; 0x48
1000469a:	2b00      	cmp	r3, #0
1000469c:	d103      	bne.n	100046a6 <adc_rpi_init+0x3e>
		k_sem_give(&ctx->lock);
1000469e:	0020      	movs	r0, r4
100046a0:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
100046a2:	f001 fb65 	bl	10005d70 <z_impl_k_sem_give>
	adc_irq_set_enabled(true);

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
100046a6:	2000      	movs	r0, #0
100046a8:	bd10      	pop	{r4, pc}
100046aa:	46c0      	nop			; (mov r8, r8)
100046ac:	4004c008 	.word	0x4004c008
100046b0:	01000007 	.word	0x01000007
100046b4:	0f00000f 	.word	0x0f00000f
100046b8:	4004d008 	.word	0x4004d008
100046bc:	4004c000 	.word	0x4004c000

100046c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
100046c0:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100046c2:	4808      	ldr	r0, [pc, #32]	; (100046e4 <uart_console_init+0x24>)
100046c4:	f009 fa69 	bl	1000db9a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
100046c8:	2800      	cmp	r0, #0
100046ca:	d008      	beq.n	100046de <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
100046cc:	4c06      	ldr	r4, [pc, #24]	; (100046e8 <uart_console_init+0x28>)
100046ce:	0020      	movs	r0, r4
100046d0:	f7ff fd9a 	bl	10004208 <__stdout_hook_install>
	__printk_hook_install(console_out);
100046d4:	0020      	movs	r0, r4
100046d6:	f7fe fc31 	bl	10002f3c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100046da:	2000      	movs	r0, #0
}
100046dc:	bd10      	pop	{r4, pc}
		return -ENODEV;
100046de:	2013      	movs	r0, #19
100046e0:	4240      	negs	r0, r0
100046e2:	e7fb      	b.n	100046dc <uart_console_init+0x1c>
100046e4:	1000dff8 	.word	0x1000dff8
100046e8:	100046ed 	.word	0x100046ed

100046ec <console_out>:
{
100046ec:	b570      	push	{r4, r5, r6, lr}
100046ee:	0004      	movs	r4, r0
100046f0:	4d07      	ldr	r5, [pc, #28]	; (10004710 <console_out+0x24>)
	if ('\n' == c) {
100046f2:	280a      	cmp	r0, #10
100046f4:	d104      	bne.n	10004700 <console_out+0x14>
100046f6:	68ab      	ldr	r3, [r5, #8]
100046f8:	210d      	movs	r1, #13
100046fa:	0028      	movs	r0, r5
100046fc:	685b      	ldr	r3, [r3, #4]
100046fe:	4798      	blx	r3
10004700:	68ab      	ldr	r3, [r5, #8]
10004702:	0028      	movs	r0, r5
10004704:	685b      	ldr	r3, [r3, #4]
10004706:	b2e1      	uxtb	r1, r4
10004708:	4798      	blx	r3
}
1000470a:	0020      	movs	r0, r4
1000470c:	bd70      	pop	{r4, r5, r6, pc}
1000470e:	46c0      	nop			; (mov r8, r8)
10004710:	1000dff8 	.word	0x1000dff8

10004714 <ssd1306_get_capabilities>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
10004714:	0008      	movs	r0, r1
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
}

static void ssd1306_get_capabilities(const struct device *dev,
				     struct display_capabilities *caps)
{
10004716:	b510      	push	{r4, lr}
10004718:	000c      	movs	r4, r1
1000471a:	2203      	movs	r2, #3
1000471c:	2100      	movs	r1, #0
1000471e:	300d      	adds	r0, #13
10004720:	f002 ffe8 	bl	100076f4 <memset>
	memset(caps, 0, sizeof(struct display_capabilities));
	caps->x_resolution = DT_INST_PROP(0, width);
10004724:	4b03      	ldr	r3, [pc, #12]	; (10004734 <ssd1306_get_capabilities+0x20>)
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
10004726:	2201      	movs	r2, #1
	caps->x_resolution = DT_INST_PROP(0, width);
10004728:	6023      	str	r3, [r4, #0]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
1000472a:	2304      	movs	r3, #4
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
1000472c:	60a2      	str	r2, [r4, #8]
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
1000472e:	6063      	str	r3, [r4, #4]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
10004730:	7323      	strb	r3, [r4, #12]
}
10004732:	bd10      	pop	{r4, pc}
10004734:	00400080 	.word	0x00400080

10004738 <ssd1306_read>:
{
10004738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("Unsupported");
1000473a:	2000      	movs	r0, #0
1000473c:	4b06      	ldr	r3, [pc, #24]	; (10004758 <ssd1306_read+0x20>)
1000473e:	9001      	str	r0, [sp, #4]
10004740:	9302      	str	r3, [sp, #8]
10004742:	9000      	str	r0, [sp, #0]
10004744:	0003      	movs	r3, r0
10004746:	2201      	movs	r2, #1
10004748:	4904      	ldr	r1, [pc, #16]	; (1000475c <ssd1306_read+0x24>)
1000474a:	f008 fdcb 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
	return -ENOTSUP;
1000474e:	2086      	movs	r0, #134	; 0x86
}
10004750:	4240      	negs	r0, r0
10004752:	b005      	add	sp, #20
10004754:	bd00      	pop	{pc}
10004756:	46c0      	nop			; (mov r8, r8)
10004758:	100128f4 	.word	0x100128f4
1000475c:	1000e1f4 	.word	0x1000e1f4

10004760 <ssd1306_get_framebuffer>:
{
10004760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("Unsupported");
10004762:	2400      	movs	r4, #0
10004764:	4b06      	ldr	r3, [pc, #24]	; (10004780 <ssd1306_get_framebuffer+0x20>)
10004766:	0020      	movs	r0, r4
10004768:	9302      	str	r3, [sp, #8]
1000476a:	2201      	movs	r2, #1
1000476c:	0023      	movs	r3, r4
1000476e:	4905      	ldr	r1, [pc, #20]	; (10004784 <ssd1306_get_framebuffer+0x24>)
10004770:	9401      	str	r4, [sp, #4]
10004772:	9400      	str	r4, [sp, #0]
10004774:	f008 fdb6 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
}
10004778:	0020      	movs	r0, r4
1000477a:	b004      	add	sp, #16
1000477c:	bd10      	pop	{r4, pc}
1000477e:	46c0      	nop			; (mov r8, r8)
10004780:	100128f4 	.word	0x100128f4
10004784:	1000e1f4 	.word	0x1000e1f4

10004788 <ssd1306_set_brightness>:
{
10004788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Unsupported");
1000478a:	2000      	movs	r0, #0
1000478c:	4b06      	ldr	r3, [pc, #24]	; (100047a8 <ssd1306_set_brightness+0x20>)
1000478e:	9001      	str	r0, [sp, #4]
10004790:	9302      	str	r3, [sp, #8]
10004792:	9000      	str	r0, [sp, #0]
10004794:	0003      	movs	r3, r0
10004796:	2202      	movs	r2, #2
10004798:	4904      	ldr	r1, [pc, #16]	; (100047ac <ssd1306_set_brightness+0x24>)
1000479a:	f008 fda3 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
	return -ENOTSUP;
1000479e:	2086      	movs	r0, #134	; 0x86
}
100047a0:	4240      	negs	r0, r0
100047a2:	b005      	add	sp, #20
100047a4:	bd00      	pop	{pc}
100047a6:	46c0      	nop			; (mov r8, r8)
100047a8:	100128f4 	.word	0x100128f4
100047ac:	1000e1f4 	.word	0x1000e1f4

100047b0 <ssd1306_set_pixel_format>:
	return -ENOTSUP;
}

static int ssd1306_set_pixel_format(const struct device *dev,
				    const enum display_pixel_format pf)
{
100047b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100047b2:	2000      	movs	r0, #0
	if (pf == PIXEL_FORMAT_MONO10) {
100047b4:	2904      	cmp	r1, #4
100047b6:	d00a      	beq.n	100047ce <ssd1306_set_pixel_format+0x1e>
		return 0;
	}
	LOG_ERR("Unsupported");
100047b8:	4b06      	ldr	r3, [pc, #24]	; (100047d4 <ssd1306_set_pixel_format+0x24>)
100047ba:	9001      	str	r0, [sp, #4]
100047bc:	9302      	str	r3, [sp, #8]
100047be:	9000      	str	r0, [sp, #0]
100047c0:	0003      	movs	r3, r0
100047c2:	2201      	movs	r2, #1
100047c4:	4904      	ldr	r1, [pc, #16]	; (100047d8 <ssd1306_set_pixel_format+0x28>)
100047c6:	f008 fd8d 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
100047ca:	2086      	movs	r0, #134	; 0x86
100047cc:	4240      	negs	r0, r0
	return -ENOTSUP;
}
100047ce:	b005      	add	sp, #20
100047d0:	bd00      	pop	{pc}
100047d2:	46c0      	nop			; (mov r8, r8)
100047d4:	100128f4 	.word	0x100128f4
100047d8:	1000e1f4 	.word	0x1000e1f4

100047dc <ssd1306_set_orientation>:
{
100047dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("Unsupported");
100047de:	2000      	movs	r0, #0
100047e0:	4b06      	ldr	r3, [pc, #24]	; (100047fc <ssd1306_set_orientation+0x20>)
100047e2:	9001      	str	r0, [sp, #4]
100047e4:	9302      	str	r3, [sp, #8]
100047e6:	9000      	str	r0, [sp, #0]
100047e8:	0003      	movs	r3, r0
100047ea:	2201      	movs	r2, #1
100047ec:	4904      	ldr	r1, [pc, #16]	; (10004800 <ssd1306_set_orientation+0x24>)
100047ee:	f008 fd79 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
	return -ENOTSUP;
100047f2:	2086      	movs	r0, #134	; 0x86
}
100047f4:	4240      	negs	r0, r0
100047f6:	b005      	add	sp, #20
100047f8:	bd00      	pop	{pc}
100047fa:	46c0      	nop			; (mov r8, r8)
100047fc:	100128f4 	.word	0x100128f4
10004800:	1000e1f4 	.word	0x1000e1f4

10004804 <ssd1306_write>:
{
10004804:	b5f0      	push	{r4, r5, r6, r7, lr}
10004806:	468c      	mov	ip, r1
10004808:	0005      	movs	r5, r0
	if (desc->pitch < desc->width) {
1000480a:	8919      	ldrh	r1, [r3, #8]
1000480c:	8898      	ldrh	r0, [r3, #4]
{
1000480e:	b087      	sub	sp, #28
	if (desc->pitch < desc->width) {
10004810:	4281      	cmp	r1, r0
10004812:	d20d      	bcs.n	10004830 <ssd1306_write+0x2c>
		LOG_ERR("Pitch is smaller then width");
10004814:	4929      	ldr	r1, [pc, #164]	; (100048bc <ssd1306_write+0xb8>)
10004816:	4b2a      	ldr	r3, [pc, #168]	; (100048c0 <ssd1306_write+0xbc>)
		LOG_ERR("Display buffer is not available");
10004818:	2000      	movs	r0, #0
1000481a:	9302      	str	r3, [sp, #8]
1000481c:	2201      	movs	r2, #1
1000481e:	0003      	movs	r3, r0
10004820:	9001      	str	r0, [sp, #4]
10004822:	9000      	str	r0, [sp, #0]
10004824:	f008 fd5e 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
		return -1;
10004828:	2001      	movs	r0, #1
1000482a:	4240      	negs	r0, r0
}
1000482c:	b007      	add	sp, #28
1000482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
10004830:	88df      	ldrh	r7, [r3, #6]
10004832:	681b      	ldr	r3, [r3, #0]
10004834:	003c      	movs	r4, r7
10004836:	4344      	muls	r4, r0
10004838:	10e4      	asrs	r4, r4, #3
1000483a:	429c      	cmp	r4, r3
1000483c:	d900      	bls.n	10004840 <ssd1306_write+0x3c>
1000483e:	001c      	movs	r4, r3
	if (buf == NULL || buf_len == 0U) {
10004840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004842:	2b00      	cmp	r3, #0
10004844:	d001      	beq.n	1000484a <ssd1306_write+0x46>
10004846:	2c00      	cmp	r4, #0
10004848:	d102      	bne.n	10004850 <ssd1306_write+0x4c>
		LOG_ERR("Display buffer is not available");
1000484a:	491c      	ldr	r1, [pc, #112]	; (100048bc <ssd1306_write+0xb8>)
1000484c:	4b1d      	ldr	r3, [pc, #116]	; (100048c4 <ssd1306_write+0xc0>)
1000484e:	e7e3      	b.n	10004818 <ssd1306_write+0x14>
	if (desc->pitch > desc->width) {
10004850:	4281      	cmp	r1, r0
10004852:	d902      	bls.n	1000485a <ssd1306_write+0x56>
		LOG_ERR("Unsupported mode");
10004854:	4919      	ldr	r1, [pc, #100]	; (100048bc <ssd1306_write+0xb8>)
10004856:	4b1c      	ldr	r3, [pc, #112]	; (100048c8 <ssd1306_write+0xc4>)
10004858:	e7de      	b.n	10004818 <ssd1306_write+0x14>
	if ((y & 0x7) != 0U) {
1000485a:	2307      	movs	r3, #7
1000485c:	0016      	movs	r6, r2
1000485e:	401e      	ands	r6, r3
10004860:	421a      	tst	r2, r3
10004862:	d002      	beq.n	1000486a <ssd1306_write+0x66>
		LOG_ERR("Unsupported origin");
10004864:	4915      	ldr	r1, [pc, #84]	; (100048bc <ssd1306_write+0xb8>)
10004866:	4b19      	ldr	r3, [pc, #100]	; (100048cc <ssd1306_write+0xc8>)
10004868:	e7d6      	b.n	10004818 <ssd1306_write+0x14>
	uint8_t cmd_buf[] = {
1000486a:	2320      	movs	r3, #32
1000486c:	a904      	add	r1, sp, #16
1000486e:	800b      	strh	r3, [r1, #0]
10004870:	3301      	adds	r3, #1
10004872:	708b      	strb	r3, [r1, #2]
10004874:	4663      	mov	r3, ip
		(x + desc->width - 1),
10004876:	3801      	subs	r0, #1
	uint8_t cmd_buf[] = {
10004878:	b2db      	uxtb	r3, r3
1000487a:	70cb      	strb	r3, [r1, #3]
		(x + desc->width - 1),
1000487c:	181b      	adds	r3, r3, r0
	uint8_t cmd_buf[] = {
1000487e:	710b      	strb	r3, [r1, #4]
10004880:	2322      	movs	r3, #34	; 0x22
10004882:	714b      	strb	r3, [r1, #5]
10004884:	08d3      	lsrs	r3, r2, #3
		((y + desc->height)/8 - 1)
10004886:	19d2      	adds	r2, r2, r7
10004888:	10d2      	asrs	r2, r2, #3
1000488a:	3a01      	subs	r2, #1
	uint8_t cmd_buf[] = {
1000488c:	718b      	strb	r3, [r1, #6]
1000488e:	71ca      	strb	r2, [r1, #7]
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
10004890:	2301      	movs	r3, #1
10004892:	2208      	movs	r2, #8
10004894:	6868      	ldr	r0, [r5, #4]
10004896:	f008 fd33 	bl	1000d300 <ssd1306_write_bus.isra.0>
1000489a:	1e03      	subs	r3, r0, #0
1000489c:	d008      	beq.n	100048b0 <ssd1306_write+0xac>
		LOG_ERR("Failed to write command");
1000489e:	4b0c      	ldr	r3, [pc, #48]	; (100048d0 <ssd1306_write+0xcc>)
100048a0:	2201      	movs	r2, #1
100048a2:	9302      	str	r3, [sp, #8]
100048a4:	0030      	movs	r0, r6
100048a6:	0033      	movs	r3, r6
100048a8:	4904      	ldr	r1, [pc, #16]	; (100048bc <ssd1306_write+0xb8>)
100048aa:	9601      	str	r6, [sp, #4]
100048ac:	9600      	str	r6, [sp, #0]
100048ae:	e7b9      	b.n	10004824 <ssd1306_write+0x20>
	return ssd1306_write_bus(dev, (uint8_t *)buf, buf_len, false);
100048b0:	0022      	movs	r2, r4
100048b2:	990c      	ldr	r1, [sp, #48]	; 0x30
100048b4:	6868      	ldr	r0, [r5, #4]
100048b6:	f008 fd23 	bl	1000d300 <ssd1306_write_bus.isra.0>
100048ba:	e7b7      	b.n	1000482c <ssd1306_write+0x28>
100048bc:	1000e1f4 	.word	0x1000e1f4
100048c0:	10012900 	.word	0x10012900
100048c4:	1001291c 	.word	0x1001291c
100048c8:	1001293c 	.word	0x1001293c
100048cc:	1001294d 	.word	0x1001294d
100048d0:	10012960 	.word	0x10012960

100048d4 <ssd1306_suspend>:
{
100048d4:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
100048d6:	4b05      	ldr	r3, [pc, #20]	; (100048ec <ssd1306_suspend+0x18>)
100048d8:	a901      	add	r1, sp, #4
100048da:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100048dc:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
100048de:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100048e0:	2301      	movs	r3, #1
100048e2:	001a      	movs	r2, r3
100048e4:	f008 fd0c 	bl	1000d300 <ssd1306_write_bus.isra.0>
}
100048e8:	bd0e      	pop	{r1, r2, r3, pc}
100048ea:	46c0      	nop			; (mov r8, r8)
100048ec:	10012978 	.word	0x10012978

100048f0 <ssd1306_resume>:
{
100048f0:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
100048f2:	4b05      	ldr	r3, [pc, #20]	; (10004908 <ssd1306_resume+0x18>)
100048f4:	a901      	add	r1, sp, #4
100048f6:	781b      	ldrb	r3, [r3, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100048f8:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
100048fa:	700b      	strb	r3, [r1, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100048fc:	2301      	movs	r3, #1
100048fe:	001a      	movs	r2, r3
10004900:	f008 fcfe 	bl	1000d300 <ssd1306_write_bus.isra.0>
}
10004904:	bd0e      	pop	{r1, r2, r3, pc}
10004906:	46c0      	nop			; (mov r8, r8)
10004908:	1001297a 	.word	0x1001297a

1000490c <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
1000490c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ssd1306_config *config = dev->config;
1000490e:	6845      	ldr	r5, [r0, #4]
{
10004910:	0004      	movs	r4, r0
10004912:	b08b      	sub	sp, #44	; 0x2c
	return device_is_ready(config->bus.bus);
10004914:	6828      	ldr	r0, [r5, #0]
10004916:	f009 f940 	bl	1000db9a <z_device_is_ready>

	LOG_DBG("");

	if (!ssd1306_bus_ready(dev)) {
1000491a:	2800      	cmp	r0, #0
1000491c:	d10e      	bne.n	1000493c <ssd1306_init+0x30>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
1000491e:	682b      	ldr	r3, [r5, #0]
10004920:	2201      	movs	r2, #1
10004922:	681b      	ldr	r3, [r3, #0]
10004924:	4954      	ldr	r1, [pc, #336]	; (10004a78 <ssd1306_init+0x16c>)
10004926:	9303      	str	r3, [sp, #12]
10004928:	4b54      	ldr	r3, [pc, #336]	; (10004a7c <ssd1306_init+0x170>)
1000492a:	9001      	str	r0, [sp, #4]
1000492c:	9302      	str	r3, [sp, #8]
1000492e:	9000      	str	r0, [sp, #0]
10004930:	0003      	movs	r3, r0
10004932:	f008 fcd7 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
10004936:	2516      	movs	r5, #22
		}
	}

	if (ssd1306_init_device(dev)) {
		LOG_ERR("Failed to initialize device!");
		return -EIO;
10004938:	426d      	negs	r5, r5
1000493a:	e03b      	b.n	100049b4 <ssd1306_init+0xa8>
	if (config->reset.port) {
1000493c:	68a8      	ldr	r0, [r5, #8]
1000493e:	2800      	cmp	r0, #0
10004940:	d117      	bne.n	10004972 <ssd1306_init+0x66>
	uint8_t cmd_buf[] = {
10004942:	4b4f      	ldr	r3, [pc, #316]	; (10004a80 <ssd1306_init+0x174>)
	const struct ssd1306_config *config = dev->config;
10004944:	6865      	ldr	r5, [r4, #4]
	uint8_t cmd_buf[] = {
10004946:	ae07      	add	r6, sp, #28
10004948:	8033      	strh	r3, [r6, #0]
	if (config->reset.port) {
1000494a:	68ab      	ldr	r3, [r5, #8]
1000494c:	2b00      	cmp	r3, #0
1000494e:	d138      	bne.n	100049c2 <ssd1306_init+0xb6>
	if (ssd1306_suspend(dev)) {
10004950:	0020      	movs	r0, r4
10004952:	f7ff ffbf 	bl	100048d4 <ssd1306_suspend>
10004956:	2800      	cmp	r0, #0
10004958:	d045      	beq.n	100049e6 <ssd1306_init+0xda>
		LOG_ERR("Failed to initialize device!");
1000495a:	2000      	movs	r0, #0
1000495c:	4b49      	ldr	r3, [pc, #292]	; (10004a84 <ssd1306_init+0x178>)
1000495e:	2201      	movs	r2, #1
10004960:	9302      	str	r3, [sp, #8]
10004962:	4945      	ldr	r1, [pc, #276]	; (10004a78 <ssd1306_init+0x16c>)
10004964:	0003      	movs	r3, r0
10004966:	9001      	str	r0, [sp, #4]
10004968:	9000      	str	r0, [sp, #0]
1000496a:	f008 fcbb 	bl	1000d2e4 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
1000496e:	2505      	movs	r5, #5
10004970:	e7e2      	b.n	10004938 <ssd1306_init+0x2c>
				  spec->pin,
10004972:	7b29      	ldrb	r1, [r5, #12]
				  spec->dt_flags | extra_flags);
10004974:	89eb      	ldrh	r3, [r5, #14]
	const struct gpio_driver_api *api =
10004976:	6882      	ldr	r2, [r0, #8]
10004978:	4694      	mov	ip, r2
	struct gpio_driver_data *data =
1000497a:	6902      	ldr	r2, [r0, #16]
1000497c:	9204      	str	r2, [sp, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
1000497e:	07dd      	lsls	r5, r3, #31
10004980:	d41b      	bmi.n	100049ba <ssd1306_init+0xae>
	return gpio_pin_configure(spec->port,
10004982:	25b0      	movs	r5, #176	; 0xb0
10004984:	036d      	lsls	r5, r5, #13
10004986:	432b      	orrs	r3, r5
		data->invert |= (gpio_port_pins_t)BIT(pin);
10004988:	2601      	movs	r6, #1
1000498a:	9a04      	ldr	r2, [sp, #16]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
1000498c:	4d3e      	ldr	r5, [pc, #248]	; (10004a88 <ssd1306_init+0x17c>)
		data->invert |= (gpio_port_pins_t)BIT(pin);
1000498e:	6817      	ldr	r7, [r2, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10004990:	401d      	ands	r5, r3
		data->invert |= (gpio_port_pins_t)BIT(pin);
10004992:	408e      	lsls	r6, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
10004994:	9505      	str	r5, [sp, #20]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10004996:	2201      	movs	r2, #1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10004998:	003d      	movs	r5, r7
1000499a:	43b5      	bics	r5, r6
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
1000499c:	4213      	tst	r3, r2
1000499e:	d001      	beq.n	100049a4 <ssd1306_init+0x98>
		data->invert |= (gpio_port_pins_t)BIT(pin);
100049a0:	003d      	movs	r5, r7
100049a2:	4335      	orrs	r5, r6
100049a4:	9b04      	ldr	r3, [sp, #16]
	return api->pin_configure(port, pin, flags);
100049a6:	9a05      	ldr	r2, [sp, #20]
100049a8:	601d      	str	r5, [r3, #0]
100049aa:	4663      	mov	r3, ip
100049ac:	681b      	ldr	r3, [r3, #0]
100049ae:	4798      	blx	r3
100049b0:	1e05      	subs	r5, r0, #0
		if (ret < 0) {
100049b2:	dac6      	bge.n	10004942 <ssd1306_init+0x36>
	}

	return 0;
}
100049b4:	0028      	movs	r0, r5
100049b6:	b00b      	add	sp, #44	; 0x2c
100049b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
100049ba:	25d0      	movs	r5, #208	; 0xd0
100049bc:	036d      	lsls	r5, r5, #13
100049be:	406b      	eors	r3, r5
100049c0:	e7e2      	b.n	10004988 <ssd1306_init+0x7c>
	return z_impl_k_sleep(timeout);
100049c2:	2100      	movs	r1, #0
		gpio_pin_set_dt(&config->reset, 1);
100049c4:	3508      	adds	r5, #8
100049c6:	200a      	movs	r0, #10
100049c8:	f001 fcc8 	bl	1000635c <z_impl_k_sleep>
100049cc:	2101      	movs	r1, #1
100049ce:	0028      	movs	r0, r5
100049d0:	f008 fcbd 	bl	1000d34e <gpio_pin_set_dt.isra.0>
100049d4:	2100      	movs	r1, #0
100049d6:	200a      	movs	r0, #10
100049d8:	f001 fcc0 	bl	1000635c <z_impl_k_sleep>
		gpio_pin_set_dt(&config->reset, 0);
100049dc:	2100      	movs	r1, #0
100049de:	0028      	movs	r0, r5
100049e0:	f008 fcb5 	bl	1000d34e <gpio_pin_set_dt.isra.0>
100049e4:	e7b4      	b.n	10004950 <ssd1306_init+0x44>
	uint8_t cmd_buf[] = {
100049e6:	ad08      	add	r5, sp, #32
100049e8:	2206      	movs	r2, #6
100049ea:	4928      	ldr	r1, [pc, #160]	; (10004a8c <ssd1306_init+0x180>)
100049ec:	0028      	movs	r0, r5
100049ee:	f002 fe39 	bl	10007664 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
100049f2:	2301      	movs	r3, #1
100049f4:	2206      	movs	r2, #6
100049f6:	0029      	movs	r1, r5
100049f8:	6860      	ldr	r0, [r4, #4]
100049fa:	f008 fc81 	bl	1000d300 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_timing_setting(dev)) {
100049fe:	2800      	cmp	r0, #0
10004a00:	d1ab      	bne.n	1000495a <ssd1306_init+0x4e>
	uint8_t cmd_buf[] = {
10004a02:	2207      	movs	r2, #7
10004a04:	4922      	ldr	r1, [pc, #136]	; (10004a90 <ssd1306_init+0x184>)
10004a06:	0028      	movs	r0, r5
10004a08:	f002 fe2c 	bl	10007664 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004a0c:	2301      	movs	r3, #1
10004a0e:	2207      	movs	r2, #7
10004a10:	0029      	movs	r1, r5
10004a12:	6860      	ldr	r0, [r4, #4]
10004a14:	f008 fc74 	bl	1000d300 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_hardware_config(dev)) {
10004a18:	2800      	cmp	r0, #0
10004a1a:	d19e      	bne.n	1000495a <ssd1306_init+0x4e>
	uint8_t cmd_buf[] = {
10004a1c:	4b1d      	ldr	r3, [pc, #116]	; (10004a94 <ssd1306_init+0x188>)
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004a1e:	2202      	movs	r2, #2
	uint8_t cmd_buf[] = {
10004a20:	802b      	strh	r3, [r5, #0]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004a22:	0029      	movs	r1, r5
10004a24:	2301      	movs	r3, #1
10004a26:	6860      	ldr	r0, [r4, #4]
10004a28:	f008 fc6a 	bl	1000d300 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_panel_orientation(dev)) {
10004a2c:	2800      	cmp	r0, #0
10004a2e:	d000      	beq.n	10004a32 <ssd1306_init+0x126>
10004a30:	e793      	b.n	1000495a <ssd1306_init+0x4e>
	uint8_t cmd_buf[] = {
10004a32:	2203      	movs	r2, #3
10004a34:	4918      	ldr	r1, [pc, #96]	; (10004a98 <ssd1306_init+0x18c>)
10004a36:	0028      	movs	r0, r5
10004a38:	f002 fe14 	bl	10007664 <memcpy>
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
10004a3c:	2301      	movs	r3, #1
10004a3e:	2203      	movs	r2, #3
10004a40:	0029      	movs	r1, r5
10004a42:	6860      	ldr	r0, [r4, #4]
10004a44:	f008 fc5c 	bl	1000d300 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_charge_pump(dev)) {
10004a48:	2800      	cmp	r0, #0
10004a4a:	d000      	beq.n	10004a4e <ssd1306_init+0x142>
10004a4c:	e785      	b.n	1000495a <ssd1306_init+0x4e>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
10004a4e:	2301      	movs	r3, #1
10004a50:	2202      	movs	r2, #2
10004a52:	0031      	movs	r1, r6
10004a54:	6860      	ldr	r0, [r4, #4]
10004a56:	f008 fc53 	bl	1000d300 <ssd1306_write_bus.isra.0>
10004a5a:	2800      	cmp	r0, #0
10004a5c:	d000      	beq.n	10004a60 <ssd1306_init+0x154>
10004a5e:	e77c      	b.n	1000495a <ssd1306_init+0x4e>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
10004a60:	2180      	movs	r1, #128	; 0x80
10004a62:	0020      	movs	r0, r4
10004a64:	f008 fc67 	bl	1000d336 <ssd1306_set_contrast>
10004a68:	1e05      	subs	r5, r0, #0
10004a6a:	d000      	beq.n	10004a6e <ssd1306_init+0x162>
10004a6c:	e775      	b.n	1000495a <ssd1306_init+0x4e>
	ssd1306_resume(dev);
10004a6e:	0020      	movs	r0, r4
10004a70:	f7ff ff3e 	bl	100048f0 <ssd1306_resume>
	return 0;
10004a74:	e79e      	b.n	100049b4 <ssd1306_init+0xa8>
10004a76:	46c0      	nop			; (mov r8, r8)
10004a78:	1000e1f4 	.word	0x1000e1f4
10004a7c:	1001297c 	.word	0x1001297c
10004a80:	ffffa6a4 	.word	0xffffa6a4
10004a84:	10012995 	.word	0x10012995
10004a88:	ffefffff 	.word	0xffefffff
10004a8c:	100129b2 	.word	0x100129b2
10004a90:	1000e230 	.word	0x1000e230
10004a94:	ffffc8a1 	.word	0xffffc8a1
10004a98:	100129b9 	.word	0x100129b9

10004a9c <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10004a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004a9e:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10004aa0:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10004aa2:	6903      	ldr	r3, [r0, #16]
10004aa4:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10004aa6:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10004aa8:	4a14      	ldr	r2, [pc, #80]	; (10004afc <gpio_rpi_isr+0x60>)
10004aaa:	3308      	adds	r3, #8
10004aac:	009b      	lsls	r3, r3, #2
10004aae:	589b      	ldr	r3, [r3, r2]
10004ab0:	2207      	movs	r2, #7
10004ab2:	4022      	ands	r2, r4
10004ab4:	0092      	lsls	r2, r2, #2
10004ab6:	40d3      	lsrs	r3, r2
		if (events) {
10004ab8:	220f      	movs	r2, #15
10004aba:	4213      	tst	r3, r2
10004abc:	d103      	bne.n	10004ac6 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10004abe:	3401      	adds	r4, #1
10004ac0:	2c1e      	cmp	r4, #30
10004ac2:	d1f0      	bne.n	10004aa6 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10004ac4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10004ac6:	210f      	movs	r1, #15
10004ac8:	0020      	movs	r0, r4
10004aca:	f000 fde9 	bl	100056a0 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10004ace:	9b01      	ldr	r3, [sp, #4]
10004ad0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10004ad2:	2900      	cmp	r1, #0
10004ad4:	d0f3      	beq.n	10004abe <gpio_rpi_isr+0x22>
10004ad6:	2701      	movs	r7, #1
10004ad8:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10004ada:	680d      	ldr	r5, [r1, #0]
10004adc:	2900      	cmp	r1, #0
10004ade:	d0ee      	beq.n	10004abe <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
10004ae0:	688b      	ldr	r3, [r1, #8]
10004ae2:	001a      	movs	r2, r3
10004ae4:	403a      	ands	r2, r7
10004ae6:	423b      	tst	r3, r7
10004ae8:	d002      	beq.n	10004af0 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10004aea:	0030      	movs	r0, r6
10004aec:	684b      	ldr	r3, [r1, #4]
10004aee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10004af0:	1e2b      	subs	r3, r5, #0
10004af2:	d000      	beq.n	10004af6 <gpio_rpi_isr+0x5a>
10004af4:	682b      	ldr	r3, [r5, #0]
10004af6:	0029      	movs	r1, r5
10004af8:	001d      	movs	r5, r3
10004afa:	e7ef      	b.n	10004adc <gpio_rpi_isr+0x40>
10004afc:	40014100 	.word	0x40014100

10004b00 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10004b00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10004b02:	ab0b      	add	r3, sp, #44	; 0x2c
10004b04:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
10004b06:	2000      	movs	r0, #0
10004b08:	9303      	str	r3, [sp, #12]
10004b0a:	4b05      	ldr	r3, [pc, #20]	; (10004b20 <z_log_msg_runtime_create.constprop.0+0x20>)
10004b0c:	2201      	movs	r2, #1
10004b0e:	9302      	str	r3, [sp, #8]
10004b10:	9001      	str	r0, [sp, #4]
10004b12:	0003      	movs	r3, r0
10004b14:	9000      	str	r0, [sp, #0]
10004b16:	f7fe ff13 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
10004b1a:	b007      	add	sp, #28
10004b1c:	bd00      	pop	{pc}
10004b1e:	46c0      	nop			; (mov r8, r8)
10004b20:	100129e2 	.word	0x100129e2

10004b24 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
10004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
10004b26:	6846      	ldr	r6, [r0, #4]
{
10004b28:	b087      	sub	sp, #28
10004b2a:	0005      	movs	r5, r0
	struct i2c_dw_dev_config * const dw = dev->data;
10004b2c:	6904      	ldr	r4, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10004b2e:	2100      	movs	r1, #0
10004b30:	68f0      	ldr	r0, [r6, #12]
10004b32:	aa05      	add	r2, sp, #20
10004b34:	f008 fe7c 	bl	1000d830 <pinctrl_lookup_state>
	if (ret < 0) {
10004b38:	2800      	cmp	r0, #0
10004b3a:	db1f      	blt.n	10004b7c <i2c_dw_initialize+0x58>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10004b3c:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10004b3e:	2200      	movs	r2, #0
10004b40:	7919      	ldrb	r1, [r3, #4]
10004b42:	6818      	ldr	r0, [r3, #0]
10004b44:	f008 fe87 	bl	1000d856 <pinctrl_configure_pins>
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10004b48:	2800      	cmp	r0, #0
10004b4a:	d117      	bne.n	10004b7c <i2c_dw_initialize+0x58>
	return z_impl_k_sem_init(sem, initial_count, limit);
10004b4c:	2201      	movs	r2, #1
10004b4e:	0001      	movs	r1, r0
10004b50:	4252      	negs	r2, r2
10004b52:	0020      	movs	r0, r4
10004b54:	f009 f871 	bl	1000dc3a <z_impl_k_sem_init>
	{
		DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);
	}

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&dw->bus_mutex);
10004b58:	0020      	movs	r0, r4
10004b5a:	3018      	adds	r0, #24
	return z_impl_k_mutex_init(mutex);
10004b5c:	f009 f866 	bl	1000dc2c <z_impl_k_mutex_init>

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004b60:	2101      	movs	r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004b62:	686b      	ldr	r3, [r5, #4]
10004b64:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10004b66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004b68:	438a      	bics	r2, r1
10004b6a:	66da      	str	r2, [r3, #108]	; 0x6c

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10004b6c:	001a      	movs	r2, r3
10004b6e:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10004b70:	6811      	ldr	r1, [r2, #0]

	uint32_t reg_base = get_regs(dev);
	clear_bit_enable_en(reg_base);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
10004b72:	4a1e      	ldr	r2, [pc, #120]	; (10004bec <i2c_dw_initialize+0xc8>)
10004b74:	4291      	cmp	r1, r2
10004b76:	d003      	beq.n	10004b80 <i2c_dw_initialize+0x5c>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10004b78:	2005      	movs	r0, #5
10004b7a:	4240      	negs	r0, r0
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10004b7c:	b007      	add	sp, #28
10004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10004b80:	2706      	movs	r7, #6
10004b82:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
10004b84:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10004b86:	403b      	ands	r3, r7
10004b88:	3b06      	subs	r3, #6
10004b8a:	425a      	negs	r2, r3
10004b8c:	4153      	adcs	r3, r2
10004b8e:	0022      	movs	r2, r4
10004b90:	3243      	adds	r2, #67	; 0x43
10004b92:	7013      	strb	r3, [r2, #0]
	rom->config_func(dev);
10004b94:	6873      	ldr	r3, [r6, #4]
10004b96:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10004b98:	68b3      	ldr	r3, [r6, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10004b9a:	4a15      	ldr	r2, [pc, #84]	; (10004bf0 <i2c_dw_initialize+0xcc>)
10004b9c:	4293      	cmp	r3, r2
10004b9e:	d013      	beq.n	10004bc8 <i2c_dw_initialize+0xa4>
10004ba0:	d81d      	bhi.n	10004bde <i2c_dw_initialize+0xba>
10004ba2:	4a14      	ldr	r2, [pc, #80]	; (10004bf4 <i2c_dw_initialize+0xd0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10004ba4:	3f04      	subs	r7, #4
	switch (bitrate) {
10004ba6:	4293      	cmp	r3, r2
10004ba8:	d00e      	beq.n	10004bc8 <i2c_dw_initialize+0xa4>
10004baa:	4a13      	ldr	r2, [pc, #76]	; (10004bf8 <i2c_dw_initialize+0xd4>)
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10004bac:	3702      	adds	r7, #2
	switch (bitrate) {
10004bae:	4293      	cmp	r3, r2
10004bb0:	d00a      	beq.n	10004bc8 <i2c_dw_initialize+0xa4>
	}

	LOG_ERR("Invalid I2C bit rate value");
10004bb2:	2700      	movs	r7, #0
10004bb4:	4b11      	ldr	r3, [pc, #68]	; (10004bfc <i2c_dw_initialize+0xd8>)
10004bb6:	2201      	movs	r2, #1
10004bb8:	9302      	str	r3, [sp, #8]
10004bba:	0038      	movs	r0, r7
10004bbc:	003b      	movs	r3, r7
10004bbe:	4910      	ldr	r1, [pc, #64]	; (10004c00 <i2c_dw_initialize+0xdc>)
10004bc0:	9701      	str	r7, [sp, #4]
10004bc2:	9700      	str	r7, [sp, #0]
10004bc4:	f7ff ff9c 	bl	10004b00 <z_log_msg_runtime_create.constprop.0>
10004bc8:	2110      	movs	r1, #16
10004bca:	4339      	orrs	r1, r7
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10004bcc:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10004bce:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10004bd0:	f008 fcdb 	bl	1000d58a <i2c_dw_runtime_configure>
10004bd4:	2800      	cmp	r0, #0
10004bd6:	d1cf      	bne.n	10004b78 <i2c_dw_initialize+0x54>
	dw->state = I2C_DW_STATE_READY;
10004bd8:	3440      	adds	r4, #64	; 0x40
10004bda:	7020      	strb	r0, [r4, #0]
	return ret;
10004bdc:	e7ce      	b.n	10004b7c <i2c_dw_initialize+0x58>
	switch (bitrate) {
10004bde:	4a09      	ldr	r2, [pc, #36]	; (10004c04 <i2c_dw_initialize+0xe0>)
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10004be0:	2708      	movs	r7, #8
	switch (bitrate) {
10004be2:	4293      	cmp	r3, r2
10004be4:	d0f0      	beq.n	10004bc8 <i2c_dw_initialize+0xa4>
10004be6:	4a08      	ldr	r2, [pc, #32]	; (10004c08 <i2c_dw_initialize+0xe4>)
10004be8:	e7e0      	b.n	10004bac <i2c_dw_initialize+0x88>
10004bea:	46c0      	nop			; (mov r8, r8)
10004bec:	44570140 	.word	0x44570140
10004bf0:	000f4240 	.word	0x000f4240
10004bf4:	000186a0 	.word	0x000186a0
10004bf8:	00061a80 	.word	0x00061a80
10004bfc:	100129e2 	.word	0x100129e2
10004c00:	1000e1bc 	.word	0x1000e1bc
10004c04:	0033e140 	.word	0x0033e140
10004c08:	004c4b40 	.word	0x004c4b40

10004c0c <i2c_dw_transfer>:
{
10004c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
10004c0e:	2500      	movs	r5, #0
{
10004c10:	b087      	sub	sp, #28
10004c12:	0007      	movs	r7, r0
10004c14:	9102      	str	r1, [sp, #8]
10004c16:	9203      	str	r2, [sp, #12]
10004c18:	9305      	str	r3, [sp, #20]
	if (!num_msgs) {
10004c1a:	42aa      	cmp	r2, r5
10004c1c:	d100      	bne.n	10004c20 <i2c_dw_transfer+0x14>
10004c1e:	e0b6      	b.n	10004d8e <i2c_dw_transfer+0x182>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004c20:	6843      	ldr	r3, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004c22:	6904      	ldr	r4, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004c24:	681b      	ldr	r3, [r3, #0]
10004c26:	9301      	str	r3, [sp, #4]
	ret = k_mutex_lock(&dw->bus_mutex, K_FOREVER);
10004c28:	0023      	movs	r3, r4
10004c2a:	3318      	adds	r3, #24
10004c2c:	9304      	str	r3, [sp, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
10004c2e:	2201      	movs	r2, #1
10004c30:	4252      	negs	r2, r2
10004c32:	17d3      	asrs	r3, r2, #31
10004c34:	9804      	ldr	r0, [sp, #16]
10004c36:	f000 ffe9 	bl	10005c0c <z_impl_k_mutex_lock>
10004c3a:	1e05      	subs	r5, r0, #0
	if (ret != 0) {
10004c3c:	d000      	beq.n	10004c40 <i2c_dw_transfer+0x34>
10004c3e:	e0a6      	b.n	10004d8e <i2c_dw_transfer+0x182>
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10004c40:	2201      	movs	r2, #1
}

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
10004c42:	9b01      	ldr	r3, [sp, #4]
10004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10004c46:	4213      	tst	r3, r2
10004c48:	d000      	beq.n	10004c4c <i2c_dw_transfer+0x40>
10004c4a:	e0c7      	b.n	10004ddc <i2c_dw_transfer+0x1d0>
10004c4c:	0021      	movs	r1, r4
10004c4e:	2308      	movs	r3, #8
10004c50:	3140      	adds	r1, #64	; 0x40
10004c52:	7808      	ldrb	r0, [r1, #0]
10004c54:	4218      	tst	r0, r3
10004c56:	d000      	beq.n	10004c5a <i2c_dw_transfer+0x4e>
10004c58:	e0c0      	b.n	10004ddc <i2c_dw_transfer+0x1d0>
	dw->state |= I2C_DW_BUSY;
10004c5a:	7808      	ldrb	r0, [r1, #0]
10004c5c:	4303      	orrs	r3, r0
10004c5e:	700b      	strb	r3, [r1, #0]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004c60:	687b      	ldr	r3, [r7, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004c62:	6939      	ldr	r1, [r7, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004c64:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10004c66:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004c68:	4390      	bics	r0, r2
10004c6a:	66d8      	str	r0, [r3, #108]	; 0x6c
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10004c6c:	631d      	str	r5, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10004c6e:	6c18      	ldr	r0, [r3, #64]	; 0x40
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10004c70:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
10004c72:	06c7      	lsls	r7, r0, #27
10004c74:	d402      	bmi.n	10004c7c <i2c_dw_transfer+0x70>
		return -EINVAL;
10004c76:	2516      	movs	r5, #22
10004c78:	426d      	negs	r5, r5
10004c7a:	e082      	b.n	10004d82 <i2c_dw_transfer+0x176>
		ic_con.bits.master_mode = 1U;
10004c7c:	2761      	movs	r7, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
10004c7e:	4210      	tst	r0, r2
10004c80:	d000      	beq.n	10004c84 <i2c_dw_transfer+0x78>
		ic_con.bits.addr_slave_10bit = 1U;
10004c82:	3718      	adds	r7, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
10004c84:	2207      	movs	r2, #7
10004c86:	0840      	lsrs	r0, r0, #1
10004c88:	4002      	ands	r2, r0
10004c8a:	0746      	lsls	r6, r0, #29
10004c8c:	d500      	bpl.n	10004c90 <i2c_dw_transfer+0x84>
10004c8e:	e081      	b.n	10004d94 <i2c_dw_transfer+0x188>
10004c90:	2606      	movs	r6, #6
10004c92:	4230      	tst	r0, r6
10004c94:	d000      	beq.n	10004c98 <i2c_dw_transfer+0x8c>
10004c96:	e08c      	b.n	10004db2 <i2c_dw_transfer+0x1a6>
10004c98:	2a01      	cmp	r2, #1
10004c9a:	d1ec      	bne.n	10004c76 <i2c_dw_transfer+0x6a>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
10004c9c:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
	*(volatile uint32_t *)addr = data;
10004c9e:	6198      	str	r0, [r3, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10004ca0:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
10004ca2:	6158      	str	r0, [r3, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10004ca4:	2006      	movs	r0, #6
10004ca6:	0052      	lsls	r2, r2, #1
10004ca8:	4387      	bics	r7, r0
10004caa:	4317      	orrs	r7, r2
10004cac:	2200      	movs	r2, #0
10004cae:	601f      	str	r7, [r3, #0]
10004cb0:	639a      	str	r2, [r3, #56]	; 0x38
10004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10004cb4:	685a      	ldr	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10004cb6:	6818      	ldr	r0, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10004cb8:	07c0      	lsls	r0, r0, #31
10004cba:	d400      	bmi.n	10004cbe <i2c_dw_transfer+0xb2>
10004cbc:	e07f      	b.n	10004dbe <i2c_dw_transfer+0x1b2>
		ic_tar.bits.ic_tar = slave_address;
10004cbe:	9805      	ldr	r0, [sp, #20]
10004cc0:	0a92      	lsrs	r2, r2, #10
10004cc2:	0580      	lsls	r0, r0, #22
10004cc4:	0d80      	lsrs	r0, r0, #22
10004cc6:	0292      	lsls	r2, r2, #10
10004cc8:	4302      	orrs	r2, r0
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10004cca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
10004ccc:	06c8      	lsls	r0, r1, #27
10004cce:	d505      	bpl.n	10004cdc <i2c_dw_transfer+0xd0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10004cd0:	07c9      	lsls	r1, r1, #31
10004cd2:	d400      	bmi.n	10004cd6 <i2c_dw_transfer+0xca>
10004cd4:	e076      	b.n	10004dc4 <i2c_dw_transfer+0x1b8>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10004cd6:	2180      	movs	r1, #128	; 0x80
10004cd8:	0149      	lsls	r1, r1, #5
10004cda:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = temp | (1 << bit);
10004cdc:	2701      	movs	r7, #1
	*(volatile uint32_t *)addr = data;
10004cde:	605a      	str	r2, [r3, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10004ce0:	9b01      	ldr	r3, [sp, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
10004ce2:	9a01      	ldr	r2, [sp, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10004ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10004ce6:	433b      	orrs	r3, r7
10004ce8:	66d3      	str	r3, [r2, #108]	; 0x6c
		pflags = dw->xfr_flags;
10004cea:	0023      	movs	r3, r4
		dw->rx_pending = 0U;
10004cec:	2600      	movs	r6, #0
		dw->xfr_buf = cur_msg->buf;
10004cee:	9a02      	ldr	r2, [sp, #8]
		pflags = dw->xfr_flags;
10004cf0:	3342      	adds	r3, #66	; 0x42
		dw->xfr_buf = cur_msg->buf;
10004cf2:	6812      	ldr	r2, [r2, #0]
		pflags = dw->xfr_flags;
10004cf4:	7818      	ldrb	r0, [r3, #0]
		dw->xfr_buf = cur_msg->buf;
10004cf6:	6322      	str	r2, [r4, #48]	; 0x30
		dw->xfr_len = cur_msg->len;
10004cf8:	9a02      	ldr	r2, [sp, #8]
10004cfa:	6851      	ldr	r1, [r2, #4]
10004cfc:	6361      	str	r1, [r4, #52]	; 0x34
		dw->xfr_flags = cur_msg->flags;
10004cfe:	7a12      	ldrb	r2, [r2, #8]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
10004d00:	4050      	eors	r0, r2
		dw->xfr_flags = cur_msg->flags;
10004d02:	701a      	strb	r2, [r3, #0]
		dw->rx_pending = 0U;
10004d04:	63a6      	str	r6, [r4, #56]	; 0x38
		if ((pflags & I2C_MSG_RW_MASK)
10004d06:	4238      	tst	r0, r7
10004d08:	d002      	beq.n	10004d10 <i2c_dw_transfer+0x104>
			dw->xfr_flags |= I2C_MSG_RESTART;
10004d0a:	2004      	movs	r0, #4
10004d0c:	4302      	orrs	r2, r0
10004d0e:	701a      	strb	r2, [r3, #0]
		if (msg_left == 1U) {
10004d10:	9a03      	ldr	r2, [sp, #12]
10004d12:	2a01      	cmp	r2, #1
10004d14:	d103      	bne.n	10004d1e <i2c_dw_transfer+0x112>
			dw->xfr_flags |= I2C_MSG_STOP;
10004d16:	7818      	ldrb	r0, [r3, #0]
10004d18:	3201      	adds	r2, #1
10004d1a:	4302      	orrs	r2, r0
10004d1c:	701a      	strb	r2, [r3, #0]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10004d1e:	0023      	movs	r3, r4
10004d20:	2003      	movs	r0, #3
10004d22:	3340      	adds	r3, #64	; 0x40
10004d24:	781a      	ldrb	r2, [r3, #0]
10004d26:	4382      	bics	r2, r0
10004d28:	701a      	strb	r2, [r3, #0]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10004d2a:	0022      	movs	r2, r4
10004d2c:	3242      	adds	r2, #66	; 0x42
10004d2e:	7812      	ldrb	r2, [r2, #0]
10004d30:	0010      	movs	r0, r2
10004d32:	4038      	ands	r0, r7
10004d34:	423a      	tst	r2, r7
10004d36:	d148      	bne.n	10004dca <i2c_dw_transfer+0x1be>
			dw->state |= I2C_DW_CMD_SEND;
10004d38:	781a      	ldrb	r2, [r3, #0]
10004d3a:	433a      	orrs	r2, r7
10004d3c:	701a      	strb	r2, [r3, #0]
			dw->request_bytes = 0U;
10004d3e:	0023      	movs	r3, r4
10004d40:	3341      	adds	r3, #65	; 0x41
10004d42:	7018      	strb	r0, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10004d44:	9b01      	ldr	r3, [sp, #4]
10004d46:	681b      	ldr	r3, [r3, #0]
		if (test_bit_con_master_mode(reg_base)) {
10004d48:	423b      	tst	r3, r7
10004d4a:	d044      	beq.n	10004dd6 <i2c_dw_transfer+0x1ca>
10004d4c:	4b25      	ldr	r3, [pc, #148]	; (10004de4 <i2c_dw_transfer+0x1d8>)
10004d4e:	9a01      	ldr	r2, [sp, #4]
10004d50:	6313      	str	r3, [r2, #48]	; 0x30
	return z_impl_k_sem_take(sem, timeout);
10004d52:	2201      	movs	r2, #1
10004d54:	4252      	negs	r2, r2
10004d56:	17d3      	asrs	r3, r2, #31
10004d58:	0020      	movs	r0, r4
10004d5a:	f001 f82b 	bl	10005db4 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
10004d5e:	0023      	movs	r3, r4
10004d60:	2204      	movs	r2, #4
10004d62:	3340      	adds	r3, #64	; 0x40
10004d64:	781b      	ldrb	r3, [r3, #0]
10004d66:	4213      	tst	r3, r2
10004d68:	d13a      	bne.n	10004de0 <i2c_dw_transfer+0x1d4>
		if (dw->xfr_len > 0) {
10004d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
10004d6c:	2b00      	cmp	r3, #0
10004d6e:	d137      	bne.n	10004de0 <i2c_dw_transfer+0x1d4>
		cur_msg++;
10004d70:	9b02      	ldr	r3, [sp, #8]
10004d72:	330c      	adds	r3, #12
10004d74:	9302      	str	r3, [sp, #8]
		msg_left--;
10004d76:	9b03      	ldr	r3, [sp, #12]
10004d78:	3b01      	subs	r3, #1
10004d7a:	b2db      	uxtb	r3, r3
10004d7c:	9303      	str	r3, [sp, #12]
	while (msg_left > 0) {
10004d7e:	2b00      	cmp	r3, #0
10004d80:	d1b3      	bne.n	10004cea <i2c_dw_transfer+0xde>
	dw->state = I2C_DW_STATE_READY;
10004d82:	2300      	movs	r3, #0
10004d84:	3440      	adds	r4, #64	; 0x40
10004d86:	7023      	strb	r3, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
10004d88:	9804      	ldr	r0, [sp, #16]
10004d8a:	f000 ffb7 	bl	10005cfc <z_impl_k_mutex_unlock>
}
10004d8e:	0028      	movs	r0, r5
10004d90:	b007      	add	sp, #28
10004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (I2C_SPEED_GET(dw->app_config)) {
10004d94:	2a04      	cmp	r2, #4
10004d96:	d000      	beq.n	10004d9a <i2c_dw_transfer+0x18e>
10004d98:	e76d      	b.n	10004c76 <i2c_dw_transfer+0x6a>
		if (!dw->support_hs_mode) {
10004d9a:	000a      	movs	r2, r1
10004d9c:	3243      	adds	r2, #67	; 0x43
10004d9e:	7812      	ldrb	r2, [r2, #0]
10004da0:	2a00      	cmp	r2, #0
10004da2:	d100      	bne.n	10004da6 <i2c_dw_transfer+0x19a>
10004da4:	e767      	b.n	10004c76 <i2c_dw_transfer+0x6a>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10004da6:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
10004da8:	629a      	str	r2, [r3, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10004daa:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
10004dac:	625a      	str	r2, [r3, #36]	; 0x24
		break;
10004dae:	2203      	movs	r2, #3
10004db0:	e778      	b.n	10004ca4 <i2c_dw_transfer+0x98>
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10004db2:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
10004db4:	621a      	str	r2, [r3, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10004db6:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
10004db8:	61da      	str	r2, [r3, #28]
		break;
10004dba:	2202      	movs	r2, #2
10004dbc:	e772      	b.n	10004ca4 <i2c_dw_transfer+0x98>
10004dbe:	9805      	ldr	r0, [sp, #20]
10004dc0:	6098      	str	r0, [r3, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10004dc2:	e782      	b.n	10004cca <i2c_dw_transfer+0xbe>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10004dc4:	4908      	ldr	r1, [pc, #32]	; (10004de8 <i2c_dw_transfer+0x1dc>)
10004dc6:	400a      	ands	r2, r1
10004dc8:	e788      	b.n	10004cdc <i2c_dw_transfer+0xd0>
			dw->state |= I2C_DW_CMD_RECV;
10004dca:	2202      	movs	r2, #2
10004dcc:	7818      	ldrb	r0, [r3, #0]
10004dce:	4302      	orrs	r2, r0
10004dd0:	701a      	strb	r2, [r3, #0]
			dw->request_bytes = dw->xfr_len;
10004dd2:	b2c8      	uxtb	r0, r1
10004dd4:	e7b3      	b.n	10004d3e <i2c_dw_transfer+0x132>
10004dd6:	2398      	movs	r3, #152	; 0x98
10004dd8:	009b      	lsls	r3, r3, #2
10004dda:	e7b8      	b.n	10004d4e <i2c_dw_transfer+0x142>
		ret = -EBUSY;
10004ddc:	2510      	movs	r5, #16
10004dde:	e74b      	b.n	10004c78 <i2c_dw_transfer+0x6c>
10004de0:	2505      	movs	r5, #5
10004de2:	e749      	b.n	10004c78 <i2c_dw_transfer+0x6c>
10004de4:	0000025f 	.word	0x0000025f
10004de8:	ffffefff 	.word	0xffffefff

10004dec <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10004dec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10004dee:	ab0b      	add	r3, sp, #44	; 0x2c
10004df0:	9305      	str	r3, [sp, #20]
10004df2:	2000      	movs	r0, #0
10004df4:	9303      	str	r3, [sp, #12]
10004df6:	4b05      	ldr	r3, [pc, #20]	; (10004e0c <z_log_msg_runtime_create.constprop.0+0x20>)
10004df8:	2201      	movs	r2, #1
10004dfa:	9302      	str	r3, [sp, #8]
10004dfc:	9001      	str	r0, [sp, #4]
10004dfe:	0003      	movs	r3, r0
10004e00:	9000      	str	r0, [sp, #0]
10004e02:	f7fe fd9d 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
10004e06:	b007      	add	sp, #28
10004e08:	bd00      	pop	{pc}
10004e0a:	46c0      	nop			; (mov r8, r8)
10004e0c:	10012a11 	.word	0x10012a11

10004e10 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10004e10:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10004e12:	6845      	ldr	r5, [r0, #4]
{
10004e14:	b087      	sub	sp, #28
	ret = pinctrl_lookup_state(config, id, &state);
10004e16:	2100      	movs	r1, #0
10004e18:	69e8      	ldr	r0, [r5, #28]
10004e1a:	aa05      	add	r2, sp, #20
10004e1c:	f008 fd08 	bl	1000d830 <pinctrl_lookup_state>
10004e20:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
10004e22:	db07      	blt.n	10004e34 <pwm_rpi_init+0x24>
	return pinctrl_apply_state_direct(config, state);
10004e24:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10004e26:	2200      	movs	r2, #0
10004e28:	7919      	ldrb	r1, [r3, #4]
10004e2a:	6818      	ldr	r0, [r3, #0]
10004e2c:	f008 fd13 	bl	1000d856 <pinctrl_configure_pins>
10004e30:	1e04      	subs	r4, r0, #0
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10004e32:	d00d      	beq.n	10004e50 <pwm_rpi_init+0x40>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
10004e34:	2000      	movs	r0, #0
10004e36:	4b1c      	ldr	r3, [pc, #112]	; (10004ea8 <pwm_rpi_init+0x98>)
10004e38:	2201      	movs	r2, #1
10004e3a:	9302      	str	r3, [sp, #8]
10004e3c:	491b      	ldr	r1, [pc, #108]	; (10004eac <pwm_rpi_init+0x9c>)
10004e3e:	0003      	movs	r3, r0
10004e40:	9403      	str	r4, [sp, #12]
10004e42:	9001      	str	r0, [sp, #4]
10004e44:	9000      	str	r0, [sp, #0]
10004e46:	f7ff ffd1 	bl	10004dec <z_log_msg_runtime_create.constprop.0>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
10004e4a:	0020      	movs	r0, r4
10004e4c:	b007      	add	sp, #28
10004e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10004e50:	0021      	movs	r1, r4
	if (err) {
10004e52:	4817      	ldr	r0, [pc, #92]	; (10004eb0 <pwm_rpi_init+0xa0>)
10004e54:	1d2b      	adds	r3, r5, #4
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10004e56:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10004e58:	4f16      	ldr	r7, [pc, #88]	; (10004eb4 <pwm_rpi_init+0xa4>)
10004e5a:	434a      	muls	r2, r1
10004e5c:	46bc      	mov	ip, r7
10004e5e:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10004e60:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10004e62:	4667      	mov	r7, ip
10004e64:	4d12      	ldr	r5, [pc, #72]	; (10004eb0 <pwm_rpi_init+0xa0>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10004e66:	3101      	adds	r1, #1
10004e68:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10004e6a:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10004e6c:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10004e6e:	4f12      	ldr	r7, [pc, #72]	; (10004eb8 <pwm_rpi_init+0xa8>)
10004e70:	46bc      	mov	ip, r7
10004e72:	4494      	add	ip, r2
10004e74:	4667      	mov	r7, ip
10004e76:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10004e78:	4f10      	ldr	r7, [pc, #64]	; (10004ebc <pwm_rpi_init+0xac>)
10004e7a:	19d2      	adds	r2, r2, r7
10004e7c:	4f10      	ldr	r7, [pc, #64]	; (10004ec0 <pwm_rpi_init+0xb0>)
10004e7e:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10004e80:	2210      	movs	r2, #16
10004e82:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10004e84:	602e      	str	r6, [r5, #0]
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, integer >= 1);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10004e86:	781a      	ldrb	r2, [r3, #0]
10004e88:	785e      	ldrb	r6, [r3, #1]
10004e8a:	0112      	lsls	r2, r2, #4
10004e8c:	4332      	orrs	r2, r6
10004e8e:	606a      	str	r2, [r5, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004e90:	2501      	movs	r5, #1
10004e92:	6802      	ldr	r2, [r0, #0]
10004e94:	3303      	adds	r3, #3
10004e96:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004e98:	2280      	movs	r2, #128	; 0x80
10004e9a:	0152      	lsls	r2, r2, #5
10004e9c:	4302      	orrs	r2, r0
10004e9e:	6015      	str	r5, [r2, #0]
10004ea0:	3014      	adds	r0, #20
10004ea2:	2908      	cmp	r1, #8
10004ea4:	d1d7      	bne.n	10004e56 <pwm_rpi_init+0x46>
10004ea6:	e7d0      	b.n	10004e4a <pwm_rpi_init+0x3a>
10004ea8:	10012a11 	.word	0x10012a11
10004eac:	1000e1e4 	.word	0x1000e1e4
10004eb0:	40050000 	.word	0x40050000
10004eb4:	40050008 	.word	0x40050008
10004eb8:	4005000c 	.word	0x4005000c
10004ebc:	40050010 	.word	0x40050010
10004ec0:	0000ffff 	.word	0x0000ffff

10004ec4 <pwm_rpi_set_cycles>:
{
10004ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004ec6:	ac08      	add	r4, sp, #32
10004ec8:	8824      	ldrh	r4, [r4, #0]
10004eca:	9300      	str	r3, [sp, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10004ecc:	290f      	cmp	r1, #15
10004ece:	d843      	bhi.n	10004f58 <pwm_rpi_set_cycles+0x94>
	if (period_cycles - 1 > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10004ed0:	2680      	movs	r6, #128	; 0x80
10004ed2:	1e55      	subs	r5, r2, #1
10004ed4:	0276      	lsls	r6, r6, #9
10004ed6:	42b5      	cmp	r5, r6
10004ed8:	d23e      	bcs.n	10004f58 <pwm_rpi_set_cycles+0x94>
10004eda:	42b3      	cmp	r3, r6
10004edc:	d23c      	bcs.n	10004f58 <pwm_rpi_set_cycles+0x94>
	return channel % 2;
10004ede:	2601      	movs	r6, #1
10004ee0:	000d      	movs	r5, r1
10004ee2:	4035      	ands	r5, r6
10004ee4:	9501      	str	r5, [sp, #4]
10004ee6:	2514      	movs	r5, #20
	return channel / 2;
10004ee8:	084f      	lsrs	r7, r1, #1
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10004eea:	437d      	muls	r5, r7
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10004eec:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10004eee:	4034      	ands	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10004ef0:	6800      	ldr	r0, [r0, #0]
10004ef2:	1940      	adds	r0, r0, r5
10004ef4:	6803      	ldr	r3, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10004ef6:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10004ef8:	4231      	tst	r1, r6
10004efa:	d028      	beq.n	10004f4e <pwm_rpi_set_cycles+0x8a>
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10004efc:	0899      	lsrs	r1, r3, #2
10004efe:	4031      	ands	r1, r6
		pwm_polarity_b = inverted;
10004f00:	0020      	movs	r0, r4
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10004f02:	000c      	movs	r4, r1
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10004f04:	00c0      	lsls	r0, r0, #3
10004f06:	00a4      	lsls	r4, r4, #2
10004f08:	4304      	orrs	r4, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004f0a:	200c      	movs	r0, #12
10004f0c:	4914      	ldr	r1, [pc, #80]	; (10004f60 <pwm_rpi_set_cycles+0x9c>)
	pwm_set_wrap(slice, period_cycles - 1);
10004f0e:	3a01      	subs	r2, #1
10004f10:	000b      	movs	r3, r1
10004f12:	1869      	adds	r1, r5, r1
10004f14:	680e      	ldr	r6, [r1, #0]
    pwm_hw->slice[slice_num].top = wrap;
10004f16:	b292      	uxth	r2, r2
10004f18:	4074      	eors	r4, r6
10004f1a:	4004      	ands	r4, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004f1c:	2080      	movs	r0, #128	; 0x80
10004f1e:	0140      	lsls	r0, r0, #5
10004f20:	4301      	orrs	r1, r0
10004f22:	600c      	str	r4, [r1, #0]
10004f24:	2114      	movs	r1, #20
10004f26:	4379      	muls	r1, r7
10004f28:	18c9      	adds	r1, r1, r3
    hw_write_masked(
10004f2a:	4b0e      	ldr	r3, [pc, #56]	; (10004f64 <pwm_rpi_set_cycles+0xa0>)
    pwm_hw->slice[slice_num].top = wrap;
10004f2c:	610a      	str	r2, [r1, #16]
    hw_write_masked(
10004f2e:	18ed      	adds	r5, r5, r3
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10004f30:	9b01      	ldr	r3, [sp, #4]
10004f32:	2b00      	cmp	r3, #0
10004f34:	d00e      	beq.n	10004f54 <pwm_rpi_set_cycles+0x90>
    hw_write_masked(
10004f36:	9b00      	ldr	r3, [sp, #0]
10004f38:	4a0b      	ldr	r2, [pc, #44]	; (10004f68 <pwm_rpi_set_cycles+0xa4>)
10004f3a:	041b      	lsls	r3, r3, #16
10004f3c:	9300      	str	r3, [sp, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004f3e:	6829      	ldr	r1, [r5, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004f40:	4305      	orrs	r5, r0
	return 0;
10004f42:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10004f44:	9b00      	ldr	r3, [sp, #0]
10004f46:	404b      	eors	r3, r1
10004f48:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10004f4a:	602a      	str	r2, [r5, #0]
};
10004f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10004f4e:	08c0      	lsrs	r0, r0, #3
10004f50:	4030      	ands	r0, r6
10004f52:	e7d7      	b.n	10004f04 <pwm_rpi_set_cycles+0x40>
10004f54:	4a05      	ldr	r2, [pc, #20]	; (10004f6c <pwm_rpi_set_cycles+0xa8>)
10004f56:	e7f2      	b.n	10004f3e <pwm_rpi_set_cycles+0x7a>
		return -EINVAL;
10004f58:	2016      	movs	r0, #22
10004f5a:	4240      	negs	r0, r0
10004f5c:	e7f6      	b.n	10004f4c <pwm_rpi_set_cycles+0x88>
10004f5e:	46c0      	nop			; (mov r8, r8)
10004f60:	40050000 	.word	0x40050000
10004f64:	4005000c 	.word	0x4005000c
10004f68:	ffff0000 	.word	0xffff0000
10004f6c:	0000ffff 	.word	0x0000ffff

10004f70 <pwm_rpi_get_cycles_per_sec>:
{
10004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004f72:	0015      	movs	r5, r2
	return channel / 2;
10004f74:	084a      	lsrs	r2, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10004f76:	290f      	cmp	r1, #15
10004f78:	d825      	bhi.n	10004fc6 <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10004f7a:	2303      	movs	r3, #3
10004f7c:	4353      	muls	r3, r2
10004f7e:	6844      	ldr	r4, [r0, #4]
10004f80:	18e4      	adds	r4, r4, r3
		(float)cfg->slice_configs[slice].frac / 16.0;
10004f82:	7960      	ldrb	r0, [r4, #5]
10004f84:	f7fb fb20 	bl	100005c8 <__aeabi_ui2f>
10004f88:	f7fc fe54 	bl	10001c34 <__aeabi_f2d>
10004f8c:	2200      	movs	r2, #0
10004f8e:	4b0f      	ldr	r3, [pc, #60]	; (10004fcc <pwm_rpi_get_cycles_per_sec+0x5c>)
10004f90:	f7fc f8c8 	bl	10001124 <__aeabi_dmul>
10004f94:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10004f96:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10004f98:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10004f9a:	f7fb fb15 	bl	100005c8 <__aeabi_ui2f>
10004f9e:	f7fc fe49 	bl	10001c34 <__aeabi_f2d>
10004fa2:	0002      	movs	r2, r0
10004fa4:	000b      	movs	r3, r1
10004fa6:	0030      	movs	r0, r6
10004fa8:	0039      	movs	r1, r7
10004faa:	f7fb fb49 	bl	10000640 <__aeabi_dadd>
10004fae:	f7fc fe83 	bl	10001cb8 <__aeabi_d2f>
10004fb2:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10004fb4:	4806      	ldr	r0, [pc, #24]	; (10004fd0 <pwm_rpi_get_cycles_per_sec+0x60>)
10004fb6:	f7fb fa25 	bl	10000404 <__aeabi_fdiv>
10004fba:	f7fb fa03 	bl	100003c4 <__aeabi_f2ulz>
10004fbe:	6028      	str	r0, [r5, #0]
10004fc0:	6069      	str	r1, [r5, #4]
	return 0;
10004fc2:	2000      	movs	r0, #0
}
10004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10004fc6:	2016      	movs	r0, #22
10004fc8:	4240      	negs	r0, r0
10004fca:	e7fb      	b.n	10004fc4 <pwm_rpi_get_cycles_per_sec+0x54>
10004fcc:	3fb00000 	.word	0x3fb00000
10004fd0:	4cee6b28 	.word	0x4cee6b28

10004fd4 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10004fd4:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10004fd6:	4903      	ldr	r1, [pc, #12]	; (10004fe4 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10004fd8:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10004fda:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004fdc:	400b      	ands	r3, r1
10004fde:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10004fe0:	4770      	bx	lr
10004fe2:	46c0      	nop			; (mov r8, r8)
10004fe4:	fffff83f 	.word	0xfffff83f

10004fe8 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10004fe8:	b510      	push	{r4, lr}
10004fea:	2b03      	cmp	r3, #3
10004fec:	d823      	bhi.n	10005036 <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10004fee:	2a01      	cmp	r2, #1
10004ff0:	d002      	beq.n	10004ff8 <uart_rpi_set_format.isra.0+0x10>
10004ff2:	2a03      	cmp	r2, #3
10004ff4:	d11f      	bne.n	10005036 <uart_rpi_set_format.isra.0+0x4e>
10004ff6:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10004ff8:	2902      	cmp	r1, #2
10004ffa:	d81c      	bhi.n	10005036 <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10004ffc:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10004ffe:	3a01      	subs	r2, #1
10005000:	480e      	ldr	r0, [pc, #56]	; (1000503c <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10005002:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10005004:	00d2      	lsls	r2, r2, #3
10005006:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10005008:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000500a:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
1000500c:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000500e:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10005010:	4299      	cmp	r1, r3
10005012:	d005      	beq.n	10005020 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10005014:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10005016:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10005018:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
1000501a:	424b      	negs	r3, r1
1000501c:	4159      	adcs	r1, r3
1000501e:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10005020:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10005022:	236e      	movs	r3, #110	; 0x6e
10005024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
10005026:	404a      	eors	r2, r1
10005028:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000502a:	2380      	movs	r3, #128	; 0x80
1000502c:	015b      	lsls	r3, r3, #5
1000502e:	4303      	orrs	r3, r0
	return 0;
10005030:	2000      	movs	r0, #0
10005032:	601a      	str	r2, [r3, #0]
}
10005034:	bd10      	pop	{r4, pc}
		return -EINVAL;
10005036:	2016      	movs	r0, #22
10005038:	4240      	negs	r0, r0
1000503a:	e7fb      	b.n	10005034 <uart_rpi_set_format.isra.0+0x4c>
1000503c:	10012a6e 	.word	0x10012a6e

10005040 <uart_rpi_init>:
{
10005040:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10005042:	6845      	ldr	r5, [r0, #4]
{
10005044:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10005046:	682b      	ldr	r3, [r5, #0]
{
10005048:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
1000504a:	6906      	ldr	r6, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
1000504c:	2100      	movs	r1, #0
1000504e:	68a8      	ldr	r0, [r5, #8]
10005050:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10005052:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10005054:	9301      	str	r3, [sp, #4]
10005056:	f008 fbeb 	bl	1000d830 <pinctrl_lookup_state>
	if (ret < 0) {
1000505a:	2800      	cmp	r0, #0
1000505c:	db23      	blt.n	100050a6 <uart_rpi_init+0x66>
	return pinctrl_apply_state_direct(config, state);
1000505e:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10005060:	2200      	movs	r2, #0
10005062:	7919      	ldrb	r1, [r3, #4]
10005064:	6818      	ldr	r0, [r3, #0]
10005066:	f008 fbf6 	bl	1000d856 <pinctrl_configure_pins>
	if (ret < 0) {
1000506a:	2800      	cmp	r0, #0
1000506c:	db1b      	blt.n	100050a6 <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
1000506e:	6831      	ldr	r1, [r6, #0]
10005070:	9801      	ldr	r0, [sp, #4]
10005072:	f000 fb7f 	bl	10005774 <uart_init>
	if (baudrate == 0) {
10005076:	2800      	cmp	r0, #0
10005078:	d017      	beq.n	100050aa <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
1000507a:	4b0d      	ldr	r3, [pc, #52]	; (100050b0 <uart_rpi_init+0x70>)
1000507c:	6030      	str	r0, [r6, #0]
1000507e:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
10005080:	2201      	movs	r2, #1
10005082:	2303      	movs	r3, #3
10005084:	2100      	movs	r1, #0
10005086:	6860      	ldr	r0, [r4, #4]
10005088:	f7ff ffae 	bl	10004fe8 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
1000508c:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000508e:	23c0      	movs	r3, #192	; 0xc0
10005090:	322c      	adds	r2, #44	; 0x2c
10005092:	019b      	lsls	r3, r3, #6
10005094:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10005096:	2600      	movs	r6, #0
10005098:	2210      	movs	r2, #16
1000509a:	601a      	str	r2, [r3, #0]
1000509c:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
1000509e:	0020      	movs	r0, r4
100050a0:	696b      	ldr	r3, [r5, #20]
100050a2:	4798      	blx	r3
	return 0;
100050a4:	0030      	movs	r0, r6
}
100050a6:	b005      	add	sp, #20
100050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
100050aa:	2016      	movs	r0, #22
100050ac:	4240      	negs	r0, r0
100050ae:	e7fa      	b.n	100050a6 <uart_rpi_init+0x66>
100050b0:	00030100 	.word	0x00030100

100050b4 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
100050b4:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
100050b6:	4b0a      	ldr	r3, [pc, #40]	; (100050e0 <elapsed+0x2c>)
100050b8:	4a0a      	ldr	r2, [pc, #40]	; (100050e4 <elapsed+0x30>)
100050ba:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
100050bc:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
100050be:	4d0a      	ldr	r5, [pc, #40]	; (100050e8 <elapsed+0x34>)
100050c0:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
100050c2:	03c9      	lsls	r1, r1, #15
100050c4:	d401      	bmi.n	100050ca <elapsed+0x16>
	    || (val1 < val2)) {
100050c6:	42a0      	cmp	r0, r4
100050c8:	d204      	bcs.n	100050d4 <elapsed+0x20>
		overflow_cyc += last_load;
100050ca:	6811      	ldr	r1, [r2, #0]
100050cc:	6828      	ldr	r0, [r5, #0]
100050ce:	1809      	adds	r1, r1, r0
100050d0:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
100050d2:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
100050d4:	682b      	ldr	r3, [r5, #0]
100050d6:	6810      	ldr	r0, [r2, #0]
100050d8:	18c0      	adds	r0, r0, r3
100050da:	1b00      	subs	r0, r0, r4
}
100050dc:	bd30      	pop	{r4, r5, pc}
100050de:	46c0      	nop			; (mov r8, r8)
100050e0:	e000e010 	.word	0xe000e010
100050e4:	2000242c 	.word	0x2000242c
100050e8:	20002438 	.word	0x20002438

100050ec <sys_clock_driver_init>:
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
100050ec:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100050ee:	4a09      	ldr	r2, [pc, #36]	; (10005114 <sys_clock_driver_init+0x28>)
100050f0:	6a13      	ldr	r3, [r2, #32]
100050f2:	021b      	lsls	r3, r3, #8
100050f4:	0a1b      	lsrs	r3, r3, #8
100050f6:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
100050f8:	4b07      	ldr	r3, [pc, #28]	; (10005118 <sys_clock_driver_init+0x2c>)
100050fa:	4a08      	ldr	r2, [pc, #32]	; (1000511c <sys_clock_driver_init+0x30>)
100050fc:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
100050fe:	4b08      	ldr	r3, [pc, #32]	; (10005120 <sys_clock_driver_init+0x34>)
10005100:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10005102:	4b08      	ldr	r3, [pc, #32]	; (10005124 <sys_clock_driver_init+0x38>)
10005104:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10005106:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10005108:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000510a:	6819      	ldr	r1, [r3, #0]
1000510c:	430a      	orrs	r2, r1
1000510e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10005110:	4770      	bx	lr
10005112:	46c0      	nop			; (mov r8, r8)
10005114:	e000ed00 	.word	0xe000ed00
10005118:	20002438 	.word	0x20002438
1000511c:	000030d3 	.word	0x000030d3
10005120:	2000242c 	.word	0x2000242c
10005124:	e000e010 	.word	0xe000e010

10005128 <sys_clock_isr>:
{
10005128:	b570      	push	{r4, r5, r6, lr}
	elapsed();
1000512a:	f7ff ffc3 	bl	100050b4 <elapsed>
	cycle_count += overflow_cyc;
1000512e:	4b0b      	ldr	r3, [pc, #44]	; (1000515c <sys_clock_isr+0x34>)
10005130:	4a0b      	ldr	r2, [pc, #44]	; (10005160 <sys_clock_isr+0x38>)
10005132:	6818      	ldr	r0, [r3, #0]
10005134:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10005136:	4c0b      	ldr	r4, [pc, #44]	; (10005164 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10005138:	1840      	adds	r0, r0, r1
1000513a:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
1000513c:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000513e:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10005140:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10005142:	4909      	ldr	r1, [pc, #36]	; (10005168 <sys_clock_isr+0x40>)
10005144:	1b40      	subs	r0, r0, r5
10005146:	f7fb f843 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
1000514a:	4b07      	ldr	r3, [pc, #28]	; (10005168 <sys_clock_isr+0x40>)
1000514c:	4343      	muls	r3, r0
1000514e:	195b      	adds	r3, r3, r5
10005150:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10005152:	f001 fa61 	bl	10006618 <sys_clock_announce>
	z_arm_int_exit();
10005156:	f7fe ff6f 	bl	10004038 <z_arm_exc_exit>
}
1000515a:	bd70      	pop	{r4, r5, r6, pc}
1000515c:	2000242c 	.word	0x2000242c
10005160:	20002434 	.word	0x20002434
10005164:	20002430 	.word	0x20002430
10005168:	000030d4 	.word	0x000030d4

1000516c <sys_clock_set_timeout>:
{
1000516c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000516e:	4d32      	ldr	r5, [pc, #200]	; (10005238 <sys_clock_set_timeout+0xcc>)
10005170:	4f32      	ldr	r7, [pc, #200]	; (1000523c <sys_clock_set_timeout+0xd0>)
10005172:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10005174:	2900      	cmp	r1, #0
10005176:	d054      	beq.n	10005222 <sys_clock_set_timeout+0xb6>
10005178:	1c43      	adds	r3, r0, #1
1000517a:	d108      	bne.n	1000518e <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
1000517c:	2201      	movs	r2, #1
1000517e:	682b      	ldr	r3, [r5, #0]
10005180:	4393      	bics	r3, r2
10005182:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10005184:	23ff      	movs	r3, #255	; 0xff
10005186:	061b      	lsls	r3, r3, #24
10005188:	603b      	str	r3, [r7, #0]
}
1000518a:	b005      	add	sp, #20
1000518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
1000518e:	683b      	ldr	r3, [r7, #0]
10005190:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10005192:	2600      	movs	r6, #0
10005194:	2801      	cmp	r0, #1
10005196:	dd04      	ble.n	100051a2 <sys_clock_set_timeout+0x36>
10005198:	4b29      	ldr	r3, [pc, #164]	; (10005240 <sys_clock_set_timeout+0xd4>)
1000519a:	001e      	movs	r6, r3
1000519c:	4298      	cmp	r0, r3
1000519e:	dc00      	bgt.n	100051a2 <sys_clock_set_timeout+0x36>
100051a0:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100051a2:	f3ef 8310 	mrs	r3, PRIMASK
100051a6:	b672      	cpsid	i
100051a8:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
100051aa:	f7ff ff83 	bl	100050b4 <elapsed>
	overflow_cyc = 0U;
100051ae:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
100051b0:	68ab      	ldr	r3, [r5, #8]
100051b2:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
100051b4:	4b23      	ldr	r3, [pc, #140]	; (10005244 <sys_clock_set_timeout+0xd8>)
100051b6:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
100051b8:	4b23      	ldr	r3, [pc, #140]	; (10005248 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
100051ba:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
100051bc:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
100051be:	4b23      	ldr	r3, [pc, #140]	; (1000524c <sys_clock_set_timeout+0xe0>)
100051c0:	681b      	ldr	r3, [r3, #0]
100051c2:	9300      	str	r3, [sp, #0]
100051c4:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
100051c6:	4290      	cmp	r0, r2
100051c8:	db31      	blt.n	1000522e <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
100051ca:	4b21      	ldr	r3, [pc, #132]	; (10005250 <sys_clock_set_timeout+0xe4>)
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
100051cc:	4a21      	ldr	r2, [pc, #132]	; (10005254 <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
100051ce:	435e      	muls	r6, r3
		delay += unannounced;
100051d0:	1980      	adds	r0, r0, r6
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
100051d2:	0019      	movs	r1, r3
100051d4:	1880      	adds	r0, r0, r2
100051d6:	f7fa fffb 	bl	100001d0 <__udivsi3>
100051da:	4b1d      	ldr	r3, [pc, #116]	; (10005250 <sys_clock_set_timeout+0xe4>)
100051dc:	4358      	muls	r0, r3
		delay -= unannounced;
100051de:	9b00      	ldr	r3, [sp, #0]
100051e0:	1b1b      	subs	r3, r3, r4
100051e2:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
100051e4:	2380      	movs	r3, #128	; 0x80
100051e6:	00db      	lsls	r3, r3, #3
100051e8:	4298      	cmp	r0, r3
100051ea:	d923      	bls.n	10005234 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
100051ec:	4b1a      	ldr	r3, [pc, #104]	; (10005258 <sys_clock_set_timeout+0xec>)
100051ee:	4298      	cmp	r0, r3
100051f0:	d820      	bhi.n	10005234 <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
100051f2:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
100051f4:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
100051f6:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
100051f8:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
100051fa:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
100051fc:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
100051fe:	9b02      	ldr	r3, [sp, #8]
10005200:	9802      	ldr	r0, [sp, #8]
10005202:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
10005204:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
10005206:	4288      	cmp	r0, r1
10005208:	d202      	bcs.n	10005210 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
1000520a:	9a01      	ldr	r2, [sp, #4]
1000520c:	189b      	adds	r3, r3, r2
1000520e:	191a      	adds	r2, r3, r4
10005210:	4b0c      	ldr	r3, [pc, #48]	; (10005244 <sys_clock_set_timeout+0xd8>)
10005212:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
10005214:	9b03      	ldr	r3, [sp, #12]
10005216:	2b00      	cmp	r3, #0
10005218:	d1b7      	bne.n	1000518a <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
1000521a:	b662      	cpsie	i
1000521c:	f3bf 8f6f 	isb	sy
10005220:	e7b3      	b.n	1000518a <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
10005222:	683b      	ldr	r3, [r7, #0]
10005224:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10005226:	1c43      	adds	r3, r0, #1
10005228:	d1b3      	bne.n	10005192 <sys_clock_set_timeout+0x26>
1000522a:	4805      	ldr	r0, [pc, #20]	; (10005240 <sys_clock_set_timeout+0xd4>)
1000522c:	e7b8      	b.n	100051a0 <sys_clock_set_timeout+0x34>
1000522e:	2080      	movs	r0, #128	; 0x80
10005230:	00c0      	lsls	r0, r0, #3
10005232:	e7de      	b.n	100051f2 <sys_clock_set_timeout+0x86>
10005234:	0018      	movs	r0, r3
10005236:	e7dc      	b.n	100051f2 <sys_clock_set_timeout+0x86>
10005238:	e000e010 	.word	0xe000e010
1000523c:	20002438 	.word	0x20002438
10005240:	0000053d 	.word	0x0000053d
10005244:	20002434 	.word	0x20002434
10005248:	2000242c 	.word	0x2000242c
1000524c:	20002430 	.word	0x20002430
10005250:	000030d4 	.word	0x000030d4
10005254:	000030d3 	.word	0x000030d3
10005258:	00ffc684 	.word	0x00ffc684

1000525c <sys_clock_elapsed>:
{
1000525c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000525e:	f3ef 8410 	mrs	r4, PRIMASK
10005262:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10005264:	f7ff ff26 	bl	100050b4 <elapsed>
10005268:	4b07      	ldr	r3, [pc, #28]	; (10005288 <sys_clock_elapsed+0x2c>)
1000526a:	4a08      	ldr	r2, [pc, #32]	; (1000528c <sys_clock_elapsed+0x30>)
1000526c:	681b      	ldr	r3, [r3, #0]
1000526e:	6812      	ldr	r2, [r2, #0]
10005270:	1a9b      	subs	r3, r3, r2
10005272:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10005274:	2c00      	cmp	r4, #0
10005276:	d102      	bne.n	1000527e <sys_clock_elapsed+0x22>
	__asm__ volatile(
10005278:	b662      	cpsie	i
1000527a:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
1000527e:	4904      	ldr	r1, [pc, #16]	; (10005290 <sys_clock_elapsed+0x34>)
10005280:	f7fa ffa6 	bl	100001d0 <__udivsi3>
}
10005284:	bd10      	pop	{r4, pc}
10005286:	46c0      	nop			; (mov r8, r8)
10005288:	20002434 	.word	0x20002434
1000528c:	20002430 	.word	0x20002430
10005290:	000030d4 	.word	0x000030d4

10005294 <sys_clock_cycle_get_32>:
{
10005294:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005296:	f3ef 8410 	mrs	r4, PRIMASK
1000529a:	b672      	cpsid	i
	uint32_t ret = elapsed() + cycle_count;
1000529c:	f7ff ff0a 	bl	100050b4 <elapsed>
100052a0:	4b04      	ldr	r3, [pc, #16]	; (100052b4 <sys_clock_cycle_get_32+0x20>)
100052a2:	681b      	ldr	r3, [r3, #0]
100052a4:	18c0      	adds	r0, r0, r3
	if (key != 0U) {
100052a6:	2c00      	cmp	r4, #0
100052a8:	d102      	bne.n	100052b0 <sys_clock_cycle_get_32+0x1c>
	__asm__ volatile(
100052aa:	b662      	cpsie	i
100052ac:	f3bf 8f6f 	isb	sy
}
100052b0:	bd10      	pop	{r4, pc}
100052b2:	46c0      	nop			; (mov r8, r8)
100052b4:	20002434 	.word	0x20002434

100052b8 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100052ba:	b085      	sub	sp, #20
100052bc:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);
100052be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100052c0:	0005      	movs	r5, r0
100052c2:	000f      	movs	r7, r1
    assert(src_freq >= freq);
100052c4:	4293      	cmp	r3, r2
100052c6:	d205      	bcs.n	100052d4 <clock_configure+0x1c>
100052c8:	212d      	movs	r1, #45	; 0x2d
100052ca:	4b35      	ldr	r3, [pc, #212]	; (100053a0 <clock_configure+0xe8>)
100052cc:	4a35      	ldr	r2, [pc, #212]	; (100053a4 <clock_configure+0xec>)
100052ce:	4836      	ldr	r0, [pc, #216]	; (100053a8 <clock_configure+0xf0>)
100052d0:	f001 fede 	bl	10007090 <__assert_func>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100052d4:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100052d6:	0e1a      	lsrs	r2, r3, #24
100052d8:	021b      	lsls	r3, r3, #8
100052da:	9203      	str	r2, [sp, #12]
100052dc:	9302      	str	r3, [sp, #8]
100052de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100052e0:	2300      	movs	r3, #0
100052e2:	9802      	ldr	r0, [sp, #8]
100052e4:	9903      	ldr	r1, [sp, #12]
100052e6:	f7fb f84d 	bl	10000384 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100052ea:	436c      	muls	r4, r5
100052ec:	4b2f      	ldr	r3, [pc, #188]	; (100053ac <clock_configure+0xf4>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100052ee:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100052f0:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100052f2:	6863      	ldr	r3, [r4, #4]
100052f4:	4283      	cmp	r3, r0
100052f6:	d200      	bcs.n	100052fa <clock_configure+0x42>
        clock->div = div;
100052f8:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100052fa:	1f2b      	subs	r3, r5, #4
100052fc:	b2db      	uxtb	r3, r3
100052fe:	9300      	str	r3, [sp, #0]
10005300:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10005302:	9a00      	ldr	r2, [sp, #0]
10005304:	019b      	lsls	r3, r3, #6
10005306:	4323      	orrs	r3, r4
10005308:	2a01      	cmp	r2, #1
1000530a:	d81b      	bhi.n	10005344 <clock_configure+0x8c>
1000530c:	2f01      	cmp	r7, #1
1000530e:	d119      	bne.n	10005344 <clock_configure+0x8c>
10005310:	2203      	movs	r2, #3
10005312:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10005314:	68a3      	ldr	r3, [r4, #8]
10005316:	423b      	tst	r3, r7
10005318:	d0fc      	beq.n	10005314 <clock_configure+0x5c>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
1000531a:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000531c:	6823      	ldr	r3, [r4, #0]
1000531e:	0152      	lsls	r2, r2, #5
10005320:	405a      	eors	r2, r3
10005322:	23e0      	movs	r3, #224	; 0xe0
10005324:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005326:	2380      	movs	r3, #128	; 0x80
10005328:	015b      	lsls	r3, r3, #5
1000532a:	4323      	orrs	r3, r4
1000532c:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000532e:	2103      	movs	r1, #3
10005330:	6822      	ldr	r2, [r4, #0]
10005332:	407a      	eors	r2, r7
10005334:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005336:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10005338:	2301      	movs	r3, #1
1000533a:	40bb      	lsls	r3, r7
1000533c:	68a2      	ldr	r2, [r4, #8]
1000533e:	4213      	tst	r3, r2
10005340:	d0fc      	beq.n	1000533c <clock_configure+0x84>
10005342:	e01a      	b.n	1000537a <clock_configure+0xc2>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005344:	2280      	movs	r2, #128	; 0x80
10005346:	0112      	lsls	r2, r2, #4
10005348:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
1000534a:	4b19      	ldr	r3, [pc, #100]	; (100053b0 <clock_configure+0xf8>)
1000534c:	00aa      	lsls	r2, r5, #2
1000534e:	58d1      	ldr	r1, [r2, r3]
10005350:	2900      	cmp	r1, #0
10005352:	d005      	beq.n	10005360 <clock_configure+0xa8>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10005354:	6958      	ldr	r0, [r3, #20]
10005356:	f7fa ff3b 	bl	100001d0 <__udivsi3>
1000535a:	3001      	adds	r0, #1
            asm volatile (
1000535c:	3801      	subs	r0, #1
1000535e:	d1fd      	bne.n	1000535c <clock_configure+0xa4>
    hw_write_masked(&clock->ctrl,
10005360:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10005362:	6823      	ldr	r3, [r4, #0]
10005364:	0152      	lsls	r2, r2, #5
10005366:	405a      	eors	r2, r3
10005368:	23e0      	movs	r3, #224	; 0xe0
1000536a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000536c:	2380      	movs	r3, #128	; 0x80
1000536e:	015b      	lsls	r3, r3, #5
10005370:	4323      	orrs	r3, r4
10005372:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
10005374:	9a00      	ldr	r2, [sp, #0]
10005376:	2a01      	cmp	r2, #1
10005378:	d9d9      	bls.n	1000532e <clock_configure+0x76>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000537a:	2380      	movs	r3, #128	; 0x80
1000537c:	2280      	movs	r2, #128	; 0x80
1000537e:	019b      	lsls	r3, r3, #6
10005380:	4323      	orrs	r3, r4
10005382:	0112      	lsls	r2, r2, #4
10005384:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10005386:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
10005388:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000538a:	0032      	movs	r2, r6
1000538c:	2300      	movs	r3, #0
1000538e:	9903      	ldr	r1, [sp, #12]
10005390:	f7fa fff8 	bl	10000384 <__aeabi_uldivmod>
10005394:	4c06      	ldr	r4, [pc, #24]	; (100053b0 <clock_configure+0xf8>)
10005396:	00ad      	lsls	r5, r5, #2
10005398:	5160      	str	r0, [r4, r5]

    return true;
}
1000539a:	2001      	movs	r0, #1
1000539c:	b005      	add	sp, #20
1000539e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100053a0:	10012a7f 	.word	0x10012a7f
100053a4:	10012ad9 	.word	0x10012ad9
100053a8:	10012a90 	.word	0x10012a90
100053ac:	40008000 	.word	0x40008000
100053b0:	2000243c 	.word	0x2000243c

100053b4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100053b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100053b6:	200c      	movs	r0, #12
100053b8:	f000 f90e 	bl	100055d8 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100053bc:	f000 f914 	bl	100055e8 <running_on_fpga>
100053c0:	2800      	cmp	r0, #0
100053c2:	d00a      	beq.n	100053da <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100053c4:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100053c6:	4a2c      	ldr	r2, [pc, #176]	; (10005478 <clocks_init+0xc4>)
100053c8:	482c      	ldr	r0, [pc, #176]	; (1000547c <clocks_init+0xc8>)
100053ca:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100053cc:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100053ce:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100053d0:	2b0a      	cmp	r3, #10
100053d2:	d1fa      	bne.n	100053ca <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100053d4:	4b2a      	ldr	r3, [pc, #168]	; (10005480 <clocks_init+0xcc>)
100053d6:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100053d8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
100053da:	4d2a      	ldr	r5, [pc, #168]	; (10005484 <clocks_init+0xd0>)
100053dc:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
100053de:	f000 f8e7 	bl	100055b0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100053e2:	2201      	movs	r2, #1
100053e4:	4b28      	ldr	r3, [pc, #160]	; (10005488 <clocks_init+0xd4>)
100053e6:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100053e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
100053ea:	2b01      	cmp	r3, #1
100053ec:	d1fc      	bne.n	100053e8 <clocks_init+0x34>
100053ee:	2203      	movs	r2, #3
100053f0:	4b26      	ldr	r3, [pc, #152]	; (1000548c <clocks_init+0xd8>)
100053f2:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100053f4:	6bac      	ldr	r4, [r5, #56]	; 0x38
100053f6:	2c01      	cmp	r4, #1
100053f8:	d1fc      	bne.n	100053f4 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100053fa:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
100053fc:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100053fe:	0021      	movs	r1, r4
10005400:	9500      	str	r5, [sp, #0]
10005402:	2306      	movs	r3, #6
10005404:	4a22      	ldr	r2, [pc, #136]	; (10005490 <clocks_init+0xdc>)
10005406:	4823      	ldr	r0, [pc, #140]	; (10005494 <clocks_init+0xe0>)
10005408:	f000 f854 	bl	100054b4 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000540c:	0033      	movs	r3, r6
1000540e:	0021      	movs	r1, r4
10005410:	4a21      	ldr	r2, [pc, #132]	; (10005498 <clocks_init+0xe4>)
10005412:	4822      	ldr	r0, [pc, #136]	; (1000549c <clocks_init+0xe8>)
10005414:	9600      	str	r6, [sp, #0]
10005416:	f000 f84d 	bl	100054b4 <pll_init>
    clock_configure(clk_ref,
1000541a:	4b21      	ldr	r3, [pc, #132]	; (100054a0 <clocks_init+0xec>)
1000541c:	0029      	movs	r1, r5
    clock_configure(clk_sys,
1000541e:	4d21      	ldr	r5, [pc, #132]	; (100054a4 <clocks_init+0xf0>)
    clock_configure(clk_ref,
10005420:	9300      	str	r3, [sp, #0]
10005422:	2200      	movs	r2, #0
10005424:	2004      	movs	r0, #4
10005426:	f7ff ff47 	bl	100052b8 <clock_configure>
    clock_configure(clk_sys,
1000542a:	002b      	movs	r3, r5
1000542c:	0021      	movs	r1, r4
1000542e:	2200      	movs	r2, #0
10005430:	0030      	movs	r0, r6
10005432:	9500      	str	r5, [sp, #0]
10005434:	f7ff ff40 	bl	100052b8 <clock_configure>
    clock_configure(clk_usb,
10005438:	2200      	movs	r2, #0
1000543a:	4c10      	ldr	r4, [pc, #64]	; (1000547c <clocks_init+0xc8>)
1000543c:	0011      	movs	r1, r2
1000543e:	0023      	movs	r3, r4
10005440:	9400      	str	r4, [sp, #0]
10005442:	2007      	movs	r0, #7
10005444:	f7ff ff38 	bl	100052b8 <clock_configure>
    clock_configure(clk_adc,
10005448:	2200      	movs	r2, #0
1000544a:	0023      	movs	r3, r4
1000544c:	0011      	movs	r1, r2
1000544e:	9400      	str	r4, [sp, #0]
10005450:	2008      	movs	r0, #8
10005452:	f7ff ff31 	bl	100052b8 <clock_configure>
    clock_configure(clk_rtc,
10005456:	2200      	movs	r2, #0
10005458:	4b09      	ldr	r3, [pc, #36]	; (10005480 <clocks_init+0xcc>)
1000545a:	0011      	movs	r1, r2
1000545c:	9300      	str	r3, [sp, #0]
1000545e:	2009      	movs	r0, #9
10005460:	0023      	movs	r3, r4
10005462:	f7ff ff29 	bl	100052b8 <clock_configure>
    clock_configure(clk_peri,
10005466:	2200      	movs	r2, #0
10005468:	002b      	movs	r3, r5
1000546a:	0011      	movs	r1, r2
1000546c:	9500      	str	r5, [sp, #0]
1000546e:	2006      	movs	r0, #6
10005470:	f7ff ff22 	bl	100052b8 <clock_configure>
10005474:	e7b0      	b.n	100053d8 <clocks_init+0x24>
10005476:	46c0      	nop			; (mov r8, r8)
10005478:	2000243c 	.word	0x2000243c
1000547c:	02dc6c00 	.word	0x02dc6c00
10005480:	0000b71b 	.word	0x0000b71b
10005484:	40008000 	.word	0x40008000
10005488:	4000b03c 	.word	0x4000b03c
1000548c:	4000b030 	.word	0x4000b030
10005490:	59682f00 	.word	0x59682f00
10005494:	40028000 	.word	0x40028000
10005498:	47868c00 	.word	0x47868c00
1000549c:	4002c000 	.word	0x4002c000
100054a0:	00b71b00 	.word	0x00b71b00
100054a4:	07735940 	.word	0x07735940

100054a8 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100054a8:	4b01      	ldr	r3, [pc, #4]	; (100054b0 <clock_get_hz+0x8>)
100054aa:	0080      	lsls	r0, r0, #2
100054ac:	58c0      	ldr	r0, [r0, r3]
}
100054ae:	4770      	bx	lr
100054b0:	2000243c 	.word	0x2000243c

100054b4 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100054b6:	0017      	movs	r7, r2
100054b8:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100054ba:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100054bc:	001e      	movs	r6, r3
100054be:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100054c0:	f7fa fe86 	bl	100001d0 <__udivsi3>

    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));
100054c4:	4b2e      	ldr	r3, [pc, #184]	; (10005580 <pll_init+0xcc>)
100054c6:	18fa      	adds	r2, r7, r3
100054c8:	4b2e      	ldr	r3, [pc, #184]	; (10005584 <pll_init+0xd0>)
100054ca:	429a      	cmp	r2, r3
100054cc:	d905      	bls.n	100054da <pll_init+0x26>
100054ce:	2111      	movs	r1, #17
100054d0:	4b2d      	ldr	r3, [pc, #180]	; (10005588 <pll_init+0xd4>)
100054d2:	4a2e      	ldr	r2, [pc, #184]	; (1000558c <pll_init+0xd8>)
100054d4:	482e      	ldr	r0, [pc, #184]	; (10005590 <pll_init+0xdc>)
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
100054d6:	f001 fddb 	bl	10007090 <__assert_func>
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100054da:	492e      	ldr	r1, [pc, #184]	; (10005594 <pll_init+0xe0>)
100054dc:	4341      	muls	r1, r0
100054de:	0038      	movs	r0, r7
100054e0:	f7fa fe76 	bl	100001d0 <__udivsi3>
    assert(fbdiv >= 16 && fbdiv <= 320);
100054e4:	0002      	movs	r2, r0
100054e6:	2398      	movs	r3, #152	; 0x98
100054e8:	3a10      	subs	r2, #16
100054ea:	005b      	lsls	r3, r3, #1
100054ec:	429a      	cmp	r2, r3
100054ee:	d904      	bls.n	100054fa <pll_init+0x46>
100054f0:	2119      	movs	r1, #25
100054f2:	4b29      	ldr	r3, [pc, #164]	; (10005598 <pll_init+0xe4>)
100054f4:	4a25      	ldr	r2, [pc, #148]	; (1000558c <pll_init+0xd8>)
100054f6:	4826      	ldr	r0, [pc, #152]	; (10005590 <pll_init+0xdc>)
100054f8:	e7ed      	b.n	100054d6 <pll_init+0x22>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
100054fa:	1e73      	subs	r3, r6, #1
100054fc:	2b06      	cmp	r3, #6
100054fe:	d803      	bhi.n	10005508 <pll_init+0x54>
10005500:	9b06      	ldr	r3, [sp, #24]
10005502:	3b01      	subs	r3, #1
10005504:	2b06      	cmp	r3, #6
10005506:	d904      	bls.n	10005512 <pll_init+0x5e>
10005508:	211c      	movs	r1, #28
1000550a:	4b24      	ldr	r3, [pc, #144]	; (1000559c <pll_init+0xe8>)
1000550c:	4a1f      	ldr	r2, [pc, #124]	; (1000558c <pll_init+0xd8>)
1000550e:	4820      	ldr	r0, [pc, #128]	; (10005590 <pll_init+0xdc>)
10005510:	e7e1      	b.n	100054d6 <pll_init+0x22>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10005512:	9b06      	ldr	r3, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10005514:	0432      	lsls	r2, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10005516:	031e      	lsls	r6, r3, #12

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10005518:	6823      	ldr	r3, [r4, #0]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000551a:	4316      	orrs	r6, r2
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000551c:	2b00      	cmp	r3, #0
1000551e:	da0f      	bge.n	10005540 <pll_init+0x8c>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10005520:	223f      	movs	r2, #63	; 0x3f
10005522:	6823      	ldr	r3, [r4, #0]
10005524:	4013      	ands	r3, r2
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10005526:	42ab      	cmp	r3, r5
10005528:	d10a      	bne.n	10005540 <pll_init+0x8c>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000552a:	68a3      	ldr	r3, [r4, #8]
1000552c:	051b      	lsls	r3, r3, #20
1000552e:	0d1b      	lsrs	r3, r3, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10005530:	4283      	cmp	r3, r0
10005532:	d105      	bne.n	10005540 <pll_init+0x8c>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10005534:	22ee      	movs	r2, #238	; 0xee
10005536:	68e3      	ldr	r3, [r4, #12]
10005538:	02d2      	lsls	r2, r2, #11
1000553a:	4013      	ands	r3, r2
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000553c:	42b3      	cmp	r3, r6
1000553e:	d01b      	beq.n	10005578 <pll_init+0xc4>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10005540:	4b17      	ldr	r3, [pc, #92]	; (100055a0 <pll_init+0xec>)
10005542:	429c      	cmp	r4, r3
10005544:	d019      	beq.n	1000557a <pll_init+0xc6>
10005546:	2380      	movs	r3, #128	; 0x80
10005548:	015b      	lsls	r3, r3, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000554a:	4a16      	ldr	r2, [pc, #88]	; (100055a4 <pll_init+0xf0>)
1000554c:	4916      	ldr	r1, [pc, #88]	; (100055a8 <pll_init+0xf4>)
1000554e:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005550:	4a16      	ldr	r2, [pc, #88]	; (100055ac <pll_init+0xf8>)
10005552:	6013      	str	r3, [r2, #0]
10005554:	001f      	movs	r7, r3
10005556:	688a      	ldr	r2, [r1, #8]
10005558:	4397      	bics	r7, r2
1000555a:	d1fb      	bne.n	10005554 <pll_init+0xa0>
1000555c:	23c0      	movs	r3, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000555e:	1d22      	adds	r2, r4, #4
10005560:	019b      	lsls	r3, r3, #6
10005562:	4313      	orrs	r3, r2
10005564:	2221      	movs	r2, #33	; 0x21
    pll->cs = refdiv;
10005566:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10005568:	60a0      	str	r0, [r4, #8]
1000556a:	601a      	str	r2, [r3, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000556c:	6822      	ldr	r2, [r4, #0]
1000556e:	2a00      	cmp	r2, #0
10005570:	dafc      	bge.n	1000556c <pll_init+0xb8>
10005572:	2208      	movs	r2, #8

    // Set up post dividers
    pll->prim = pdiv;
10005574:	60e6      	str	r6, [r4, #12]
10005576:	601a      	str	r2, [r3, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10005578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000557a:	2380      	movs	r3, #128	; 0x80
1000557c:	019b      	lsls	r3, r3, #6
1000557e:	e7e4      	b.n	1000554a <pll_init+0x96>
10005580:	d34be880 	.word	0xd34be880
10005584:	32a9f880 	.word	0x32a9f880
10005588:	10012ae9 	.word	0x10012ae9
1000558c:	10012bfa 	.word	0x10012bfa
10005590:	10012b52 	.word	0x10012b52
10005594:	000f4240 	.word	0x000f4240
10005598:	10012b95 	.word	0x10012b95
1000559c:	10012bb1 	.word	0x10012bb1
100055a0:	4002c000 	.word	0x4002c000
100055a4:	4000e000 	.word	0x4000e000
100055a8:	4000c000 	.word	0x4000c000
100055ac:	4000f000 	.word	0x4000f000

100055b0 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100055b0:	22aa      	movs	r2, #170	; 0xaa
100055b2:	4b06      	ldr	r3, [pc, #24]	; (100055cc <xosc_init+0x1c>)
100055b4:	0112      	lsls	r2, r2, #4
100055b6:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100055b8:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100055ba:	4905      	ldr	r1, [pc, #20]	; (100055d0 <xosc_init+0x20>)
100055bc:	60da      	str	r2, [r3, #12]
100055be:	4a05      	ldr	r2, [pc, #20]	; (100055d4 <xosc_init+0x24>)
100055c0:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100055c2:	685a      	ldr	r2, [r3, #4]
100055c4:	2a00      	cmp	r2, #0
100055c6:	dafc      	bge.n	100055c2 <xosc_init+0x12>
}
100055c8:	4770      	bx	lr
100055ca:	46c0      	nop			; (mov r8, r8)
100055cc:	40024000 	.word	0x40024000
100055d0:	00fab000 	.word	0x00fab000
100055d4:	40026000 	.word	0x40026000

100055d8 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100055d8:	2380      	movs	r3, #128	; 0x80
100055da:	4a02      	ldr	r2, [pc, #8]	; (100055e4 <watchdog_start_tick+0xc>)
100055dc:	009b      	lsls	r3, r3, #2
100055de:	4303      	orrs	r3, r0
100055e0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100055e2:	4770      	bx	lr
100055e4:	40058000 	.word	0x40058000

100055e8 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100055e8:	4b02      	ldr	r3, [pc, #8]	; (100055f4 <running_on_fpga+0xc>)
100055ea:	6818      	ldr	r0, [r3, #0]
100055ec:	0780      	lsls	r0, r0, #30
100055ee:	0fc0      	lsrs	r0, r0, #31
}
100055f0:	4770      	bx	lr
100055f2:	46c0      	nop			; (mov r8, r8)
100055f4:	4006c000 	.word	0x4006c000

100055f8 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100055f8:	4b08      	ldr	r3, [pc, #32]	; (1000561c <gpio_set_function+0x24>)
100055fa:	0082      	lsls	r2, r0, #2
100055fc:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100055fe:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10005600:	b510      	push	{r4, lr}
10005602:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10005604:	00c0      	lsls	r0, r0, #3
10005606:	4063      	eors	r3, r4
10005608:	24c0      	movs	r4, #192	; 0xc0
1000560a:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000560c:	2480      	movs	r4, #128	; 0x80
1000560e:	0164      	lsls	r4, r4, #5
10005610:	4322      	orrs	r2, r4
10005612:	6013      	str	r3, [r2, #0]
10005614:	4b02      	ldr	r3, [pc, #8]	; (10005620 <gpio_set_function+0x28>)
10005616:	18c0      	adds	r0, r0, r3
10005618:	6041      	str	r1, [r0, #4]
}
1000561a:	bd10      	pop	{r4, pc}
1000561c:	4001c004 	.word	0x4001c004
10005620:	40014000 	.word	0x40014000

10005624 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
10005624:	4b07      	ldr	r3, [pc, #28]	; (10005644 <gpio_set_pulls+0x20>)
10005626:	0080      	lsls	r0, r0, #2
10005628:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000562a:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
1000562c:	00c9      	lsls	r1, r1, #3
1000562e:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10005630:	430a      	orrs	r2, r1
10005632:	405a      	eors	r2, r3
10005634:	230c      	movs	r3, #12
10005636:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005638:	2380      	movs	r3, #128	; 0x80
1000563a:	015b      	lsls	r3, r3, #5
1000563c:	4303      	orrs	r3, r0
1000563e:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10005640:	4770      	bx	lr
10005642:	46c0      	nop			; (mov r8, r8)
10005644:	4001c004 	.word	0x4001c004

10005648 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10005648:	4b05      	ldr	r3, [pc, #20]	; (10005660 <gpio_set_input_hysteresis_enabled+0x18>)
1000564a:	0080      	lsls	r0, r0, #2
1000564c:	18c0      	adds	r0, r0, r3
1000564e:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10005650:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10005652:	2900      	cmp	r1, #0
10005654:	d100      	bne.n	10005658 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005656:	23c0      	movs	r3, #192	; 0xc0
10005658:	019b      	lsls	r3, r3, #6
1000565a:	4303      	orrs	r3, r0
1000565c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000565e:	4770      	bx	lr
10005660:	4001c004 	.word	0x4001c004

10005664 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10005664:	4b05      	ldr	r3, [pc, #20]	; (1000567c <gpio_set_slew_rate+0x18>)
10005666:	0080      	lsls	r0, r0, #2
10005668:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000566a:	6803      	ldr	r3, [r0, #0]
1000566c:	4059      	eors	r1, r3
1000566e:	2301      	movs	r3, #1
10005670:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005672:	2380      	movs	r3, #128	; 0x80
10005674:	015b      	lsls	r3, r3, #5
10005676:	4303      	orrs	r3, r0
10005678:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000567a:	4770      	bx	lr
1000567c:	4001c004 	.word	0x4001c004

10005680 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10005680:	4b06      	ldr	r3, [pc, #24]	; (1000569c <gpio_set_drive_strength+0x1c>)
10005682:	0080      	lsls	r0, r0, #2
10005684:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10005686:	6803      	ldr	r3, [r0, #0]
10005688:	0109      	lsls	r1, r1, #4
1000568a:	4059      	eors	r1, r3
1000568c:	2330      	movs	r3, #48	; 0x30
1000568e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005690:	2380      	movs	r3, #128	; 0x80
10005692:	015b      	lsls	r3, r3, #5
10005694:	4303      	orrs	r3, r0
10005696:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10005698:	4770      	bx	lr
1000569a:	46c0      	nop			; (mov r8, r8)
1000569c:	4001c004 	.word	0x4001c004

100056a0 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
100056a0:	2207      	movs	r2, #7
100056a2:	08c3      	lsrs	r3, r0, #3
100056a4:	4010      	ands	r0, r2
100056a6:	0080      	lsls	r0, r0, #2
100056a8:	4081      	lsls	r1, r0
100056aa:	4a02      	ldr	r2, [pc, #8]	; (100056b4 <gpio_acknowledge_irq+0x14>)
100056ac:	333c      	adds	r3, #60	; 0x3c
100056ae:	009b      	lsls	r3, r3, #2
100056b0:	5099      	str	r1, [r3, r2]
}
100056b2:	4770      	bx	lr
100056b4:	40014000 	.word	0x40014000

100056b8 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100056ba:	23d0      	movs	r3, #208	; 0xd0
100056bc:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100056be:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100056c0:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100056c2:	4263      	negs	r3, r4
100056c4:	415c      	adcs	r4, r3
100056c6:	232f      	movs	r3, #47	; 0x2f
100056c8:	4264      	negs	r4, r4
100056ca:	439c      	bics	r4, r3
100056cc:	4b0a      	ldr	r3, [pc, #40]	; (100056f8 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100056ce:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100056d0:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100056d2:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
100056d4:	f7ff ffe4 	bl	100056a0 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
100056d8:	2307      	movs	r3, #7
100056da:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100056dc:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
100056de:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100056e0:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
100056e2:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100056e4:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100056e6:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100056e8:	2e00      	cmp	r6, #0
100056ea:	d100      	bne.n	100056ee <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100056ec:	23c0      	movs	r3, #192	; 0xc0
100056ee:	019b      	lsls	r3, r3, #6
100056f0:	4323      	orrs	r3, r4
100056f2:	601f      	str	r7, [r3, #0]
}
100056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100056f6:	46c0      	nop			; (mov r8, r8)
100056f8:	40014130 	.word	0x40014130

100056fc <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100056fc:	4b05      	ldr	r3, [pc, #20]	; (10005714 <gpio_set_input_enabled+0x18>)
100056fe:	0080      	lsls	r0, r0, #2
10005700:	18c0      	adds	r0, r0, r3
10005702:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10005704:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10005706:	2900      	cmp	r1, #0
10005708:	d100      	bne.n	1000570c <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000570a:	23c0      	movs	r3, #192	; 0xc0
1000570c:	019b      	lsls	r3, r3, #6
1000570e:	4303      	orrs	r3, r0
10005710:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10005712:	4770      	bx	lr
10005714:	4001c004 	.word	0x4001c004

10005718 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10005718:	b570      	push	{r4, r5, r6, lr}
1000571a:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
1000571c:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000571e:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10005720:	f7ff fec2 	bl	100054a8 <clock_get_hz>
10005724:	0021      	movs	r1, r4
10005726:	00c0      	lsls	r0, r0, #3
10005728:	f7fa fd52 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
1000572c:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
1000572e:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10005730:	d007      	beq.n	10005742 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10005732:	4b0e      	ldr	r3, [pc, #56]	; (1000576c <uart_set_baudrate+0x54>)
10005734:	429d      	cmp	r5, r3
10005736:	d815      	bhi.n	10005764 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10005738:	237f      	movs	r3, #127	; 0x7f
1000573a:	4018      	ands	r0, r3
1000573c:	1900      	adds	r0, r0, r4
1000573e:	002c      	movs	r4, r5
10005740:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10005742:	2380      	movs	r3, #128	; 0x80
10005744:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10005746:	6274      	str	r4, [r6, #36]	; 0x24
10005748:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
1000574a:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
1000574c:	362c      	adds	r6, #44	; 0x2c
1000574e:	4333      	orrs	r3, r6
10005750:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10005752:	2006      	movs	r0, #6
10005754:	f7ff fea8 	bl	100054a8 <clock_get_hz>
10005758:	01a1      	lsls	r1, r4, #6
1000575a:	1949      	adds	r1, r1, r5
1000575c:	0080      	lsls	r0, r0, #2
1000575e:	f7fa fd37 	bl	100001d0 <__udivsi3>
}
10005762:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10005764:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10005766:	4c02      	ldr	r4, [pc, #8]	; (10005770 <uart_set_baudrate+0x58>)
10005768:	e7eb      	b.n	10005742 <uart_set_baudrate+0x2a>
1000576a:	46c0      	nop			; (mov r8, r8)
1000576c:	0000fffe 	.word	0x0000fffe
10005770:	0000ffff 	.word	0x0000ffff

10005774 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10005774:	b570      	push	{r4, r5, r6, lr}
10005776:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10005778:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000577a:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
1000577c:	f7ff fe94 	bl	100054a8 <clock_get_hz>
10005780:	2800      	cmp	r0, #0
10005782:	d02e      	beq.n	100057e2 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10005784:	4b19      	ldr	r3, [pc, #100]	; (100057ec <uart_init+0x78>)
10005786:	429c      	cmp	r4, r3
10005788:	d02c      	beq.n	100057e4 <uart_init+0x70>
1000578a:	2380      	movs	r3, #128	; 0x80
1000578c:	03db      	lsls	r3, r3, #15
1000578e:	4a18      	ldr	r2, [pc, #96]	; (100057f0 <uart_init+0x7c>)
10005790:	4918      	ldr	r1, [pc, #96]	; (100057f4 <uart_init+0x80>)
10005792:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005794:	4a18      	ldr	r2, [pc, #96]	; (100057f8 <uart_init+0x84>)
10005796:	6013      	str	r3, [r2, #0]
10005798:	0018      	movs	r0, r3
1000579a:	688a      	ldr	r2, [r1, #8]
1000579c:	4390      	bics	r0, r2
1000579e:	d1fb      	bne.n	10005798 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
100057a0:	4b16      	ldr	r3, [pc, #88]	; (100057fc <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
100057a2:	4a17      	ldr	r2, [pc, #92]	; (10005800 <uart_init+0x8c>)
100057a4:	18e3      	adds	r3, r4, r3
100057a6:	4259      	negs	r1, r3
100057a8:	414b      	adcs	r3, r1
100057aa:	2180      	movs	r1, #128	; 0x80
100057ac:	005b      	lsls	r3, r3, #1
100057ae:	0049      	lsls	r1, r1, #1
100057b0:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
100057b2:	0020      	movs	r0, r4
100057b4:	0029      	movs	r1, r5
100057b6:	f7ff ffaf 	bl	10005718 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100057ba:	2360      	movs	r3, #96	; 0x60
100057bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
100057be:	0021      	movs	r1, r4
100057c0:	4053      	eors	r3, r2
100057c2:	226e      	movs	r2, #110	; 0x6e
100057c4:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100057c6:	2280      	movs	r2, #128	; 0x80
100057c8:	312c      	adds	r1, #44	; 0x2c
100057ca:	0152      	lsls	r2, r2, #5
100057cc:	430a      	orrs	r2, r1
100057ce:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
100057d0:	4b0c      	ldr	r3, [pc, #48]	; (10005804 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100057d2:	2210      	movs	r2, #16
100057d4:	6323      	str	r3, [r4, #48]	; 0x30
100057d6:	2380      	movs	r3, #128	; 0x80
100057d8:	019b      	lsls	r3, r3, #6
100057da:	430b      	orrs	r3, r1
100057dc:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
100057de:	2303      	movs	r3, #3
100057e0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100057e2:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100057e4:	2380      	movs	r3, #128	; 0x80
100057e6:	041b      	lsls	r3, r3, #16
100057e8:	e7d1      	b.n	1000578e <uart_init+0x1a>
100057ea:	46c0      	nop			; (mov r8, r8)
100057ec:	40038000 	.word	0x40038000
100057f0:	4000e000 	.word	0x4000e000
100057f4:	4000c000 	.word	0x4000c000
100057f8:	4000f000 	.word	0x4000f000
100057fc:	bffc8000 	.word	0xbffc8000
10005800:	200024d4 	.word	0x200024d4
10005804:	00000301 	.word	0x00000301

10005808 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
10005808:	4b01      	ldr	r3, [pc, #4]	; (10005810 <z_impl_z_errno+0x8>)
1000580a:	6898      	ldr	r0, [r3, #8]
1000580c:	3064      	adds	r0, #100	; 0x64
}
1000580e:	4770      	bx	lr
10005810:	20002464 	.word	0x20002464

10005814 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10005814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10005816:	0004      	movs	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
10005818:	f7fe f824 	bl	10003864 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
1000581c:	2000      	movs	r0, #0
1000581e:	4b06      	ldr	r3, [pc, #24]	; (10005838 <k_sys_fatal_error_handler+0x24>)
10005820:	9001      	str	r0, [sp, #4]
10005822:	9302      	str	r3, [sp, #8]
10005824:	9000      	str	r0, [sp, #0]
10005826:	0003      	movs	r3, r0
10005828:	2201      	movs	r2, #1
1000582a:	4904      	ldr	r1, [pc, #16]	; (1000583c <k_sys_fatal_error_handler+0x28>)
1000582c:	f008 f9c2 	bl	1000dbb4 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
10005830:	0020      	movs	r0, r4
10005832:	f008 f9ce 	bl	1000dbd2 <arch_system_halt>
10005836:	46c0      	nop			; (mov r8, r8)
10005838:	10012c03 	.word	0x10012c03
1000583c:	1000e1dc 	.word	0x1000e1dc

10005840 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10005840:	b5f0      	push	{r4, r5, r6, r7, lr}
10005842:	0006      	movs	r6, r0
10005844:	000f      	movs	r7, r1
10005846:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile("mrs %0, PRIMASK;"
10005848:	f3ef 8310 	mrs	r3, PRIMASK
1000584c:	b672      	cpsid	i
1000584e:	9307      	str	r3, [sp, #28]
	return z_impl_z_current_get();
10005850:	f000 fd9c 	bl	1000638c <z_impl_z_current_get>
10005854:	4b26      	ldr	r3, [pc, #152]	; (100058f0 <z_fatal_error+0xb0>)
10005856:	0005      	movs	r5, r0
	switch (reason) {
10005858:	2e04      	cmp	r6, #4
1000585a:	d802      	bhi.n	10005862 <z_fatal_error+0x22>
1000585c:	4b25      	ldr	r3, [pc, #148]	; (100058f4 <z_fatal_error+0xb4>)
1000585e:	00b2      	lsls	r2, r6, #2
10005860:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
10005862:	2400      	movs	r4, #0
10005864:	4a24      	ldr	r2, [pc, #144]	; (100058f8 <z_fatal_error+0xb8>)
10005866:	9304      	str	r3, [sp, #16]
10005868:	4b24      	ldr	r3, [pc, #144]	; (100058fc <z_fatal_error+0xbc>)
1000586a:	9206      	str	r2, [sp, #24]
1000586c:	9302      	str	r3, [sp, #8]
1000586e:	2201      	movs	r2, #1
10005870:	0023      	movs	r3, r4
10005872:	0020      	movs	r0, r4
10005874:	9906      	ldr	r1, [sp, #24]
10005876:	9405      	str	r4, [sp, #20]
10005878:	9603      	str	r6, [sp, #12]
1000587a:	9401      	str	r4, [sp, #4]
1000587c:	9400      	str	r4, [sp, #0]
1000587e:	f008 f999 	bl	1000dbb4 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
10005882:	42a7      	cmp	r7, r4
10005884:	d00d      	beq.n	100058a2 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
10005886:	69fb      	ldr	r3, [r7, #28]
10005888:	05db      	lsls	r3, r3, #23
1000588a:	42a3      	cmp	r3, r4
1000588c:	d009      	beq.n	100058a2 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
1000588e:	4b1c      	ldr	r3, [pc, #112]	; (10005900 <z_fatal_error+0xc0>)
10005890:	2201      	movs	r2, #1
10005892:	9302      	str	r3, [sp, #8]
10005894:	0020      	movs	r0, r4
10005896:	0023      	movs	r3, r4
10005898:	9906      	ldr	r1, [sp, #24]
1000589a:	9401      	str	r4, [sp, #4]
1000589c:	9400      	str	r4, [sp, #0]
1000589e:	f008 f989 	bl	1000dbb4 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
100058a2:	2d00      	cmp	r5, #0
100058a4:	d007      	beq.n	100058b6 <z_fatal_error+0x76>
100058a6:	0028      	movs	r0, r5
100058a8:	f008 f9a8 	bl	1000dbfc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
100058ac:	2800      	cmp	r0, #0
100058ae:	d002      	beq.n	100058b6 <z_fatal_error+0x76>
100058b0:	7803      	ldrb	r3, [r0, #0]
100058b2:	2b00      	cmp	r3, #0
100058b4:	d100      	bne.n	100058b8 <z_fatal_error+0x78>
		thread_name = "unknown";
100058b6:	4813      	ldr	r0, [pc, #76]	; (10005904 <z_fatal_error+0xc4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
100058b8:	9004      	str	r0, [sp, #16]
100058ba:	2000      	movs	r0, #0
100058bc:	4b12      	ldr	r3, [pc, #72]	; (10005908 <z_fatal_error+0xc8>)
100058be:	2201      	movs	r2, #1
100058c0:	9906      	ldr	r1, [sp, #24]
100058c2:	9302      	str	r3, [sp, #8]
100058c4:	9001      	str	r0, [sp, #4]
100058c6:	0003      	movs	r3, r0
100058c8:	9000      	str	r0, [sp, #0]
100058ca:	9503      	str	r5, [sp, #12]
100058cc:	f008 f972 	bl	1000dbb4 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100058d0:	0039      	movs	r1, r7
100058d2:	0030      	movs	r0, r6
100058d4:	f7ff ff9e 	bl	10005814 <k_sys_fatal_error_handler>
	if (key != 0U) {
100058d8:	9b07      	ldr	r3, [sp, #28]
100058da:	2b00      	cmp	r3, #0
100058dc:	d102      	bne.n	100058e4 <z_fatal_error+0xa4>
	__asm__ volatile(
100058de:	b662      	cpsie	i
100058e0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100058e4:	0028      	movs	r0, r5
100058e6:	f7fe fc73 	bl	100041d0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100058ea:	b009      	add	sp, #36	; 0x24
100058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100058ee:	46c0      	nop			; (mov r8, r8)
100058f0:	10012c12 	.word	0x10012c12
100058f4:	1000e570 	.word	0x1000e570
100058f8:	1000e1dc 	.word	0x1000e1dc
100058fc:	10012c28 	.word	0x10012c28
10005900:	10012c50 	.word	0x10012c50
10005904:	10012c20 	.word	0x10012c20
10005908:	10012c71 	.word	0x10012c71

1000590c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
1000590c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					}
					dev->state->init_res = rc;
				}
			}

			dev->state->initialized = true;
1000590e:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10005910:	4e12      	ldr	r6, [pc, #72]	; (1000595c <z_sys_init_run_level+0x50>)
10005912:	0083      	lsls	r3, r0, #2
10005914:	3001      	adds	r0, #1
10005916:	599c      	ldr	r4, [r3, r6]
10005918:	0083      	lsls	r3, r0, #2
1000591a:	9301      	str	r3, [sp, #4]
1000591c:	9b01      	ldr	r3, [sp, #4]
1000591e:	58f3      	ldr	r3, [r6, r3]
10005920:	42a3      	cmp	r3, r4
10005922:	d800      	bhi.n	10005926 <z_sys_init_run_level+0x1a>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
10005924:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10005926:	6865      	ldr	r5, [r4, #4]
			if (entry->init_fn.dev != NULL) {
10005928:	6823      	ldr	r3, [r4, #0]
		if (dev != NULL) {
1000592a:	2d00      	cmp	r5, #0
1000592c:	d013      	beq.n	10005956 <z_sys_init_run_level+0x4a>
			if (entry->init_fn.dev != NULL) {
1000592e:	2b00      	cmp	r3, #0
10005930:	d00b      	beq.n	1000594a <z_sys_init_run_level+0x3e>
				rc = entry->init_fn.dev(dev);
10005932:	0028      	movs	r0, r5
10005934:	4798      	blx	r3
				if (rc != 0) {
10005936:	2800      	cmp	r0, #0
10005938:	d007      	beq.n	1000594a <z_sys_init_run_level+0x3e>
					if (rc < 0) {
1000593a:	17c2      	asrs	r2, r0, #31
1000593c:	1880      	adds	r0, r0, r2
					dev->state->init_res = rc;
1000593e:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
10005940:	4050      	eors	r0, r2
					if (rc > UINT8_MAX) {
10005942:	28ff      	cmp	r0, #255	; 0xff
10005944:	dd00      	ble.n	10005948 <z_sys_init_run_level+0x3c>
10005946:	20ff      	movs	r0, #255	; 0xff
					dev->state->init_res = rc;
10005948:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
1000594a:	68ea      	ldr	r2, [r5, #12]
1000594c:	7853      	ldrb	r3, [r2, #1]
1000594e:	433b      	orrs	r3, r7
10005950:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10005952:	3408      	adds	r4, #8
10005954:	e7e2      	b.n	1000591c <z_sys_init_run_level+0x10>
			(void)entry->init_fn.sys();
10005956:	4798      	blx	r3
10005958:	e7fb      	b.n	10005952 <z_sys_init_run_level+0x46>
1000595a:	46c0      	nop			; (mov r8, r8)
1000595c:	1000e584 	.word	0x1000e584

10005960 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10005960:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10005962:	2401      	movs	r4, #1
10005964:	4b09      	ldr	r3, [pc, #36]	; (1000598c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10005966:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10005968:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000596a:	f7ff ffcf 	bl	1000590c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
1000596e:	f001 f807 	bl	10006980 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10005972:	2004      	movs	r0, #4
10005974:	f7ff ffca 	bl	1000590c <z_sys_init_run_level>

	z_init_static_threads();
10005978:	f000 f900 	bl	10005b7c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
1000597c:	f7fc fe26 	bl	100025cc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10005980:	4a03      	ldr	r2, [pc, #12]	; (10005990 <bg_thread_main+0x30>)
10005982:	7b13      	ldrb	r3, [r2, #12]
10005984:	43a3      	bics	r3, r4
10005986:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10005988:	bd10      	pop	{r4, pc}
1000598a:	46c0      	nop			; (mov r8, r8)
1000598c:	200024f7 	.word	0x200024f7
10005990:	20002230 	.word	0x20002230

10005994 <z_bss_zero>:
{
10005994:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10005996:	4a03      	ldr	r2, [pc, #12]	; (100059a4 <z_bss_zero+0x10>)
10005998:	4803      	ldr	r0, [pc, #12]	; (100059a8 <z_bss_zero+0x14>)
1000599a:	2100      	movs	r1, #0
1000599c:	1a12      	subs	r2, r2, r0
1000599e:	f008 f91c 	bl	1000dbda <z_early_memset>
}
100059a2:	bd10      	pop	{r4, pc}
100059a4:	200024fc 	.word	0x200024fc
100059a8:	200021b0 	.word	0x200021b0

100059ac <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
100059ac:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
100059ae:	2678      	movs	r6, #120	; 0x78
	z_setup_new_thread(thread, stack,
100059b0:	2501      	movs	r5, #1
{
100059b2:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
100059b4:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
100059b6:	0201      	lsls	r1, r0, #8
100059b8:	4811      	ldr	r0, [pc, #68]	; (10005a00 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
100059ba:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
100059bc:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
100059be:	2000      	movs	r0, #0
{
100059c0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
100059c2:	9504      	str	r5, [sp, #16]
100059c4:	350e      	adds	r5, #14
100059c6:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100059c8:	3505      	adds	r5, #5
100059ca:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
100059cc:	4b0d      	ldr	r3, [pc, #52]	; (10005a04 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
100059ce:	9005      	str	r0, [sp, #20]
100059d0:	9002      	str	r0, [sp, #8]
100059d2:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100059d4:	480c      	ldr	r0, [pc, #48]	; (10005a08 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
100059d6:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100059d8:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
100059da:	4b0c      	ldr	r3, [pc, #48]	; (10005a0c <z_init_cpu+0x60>)
100059dc:	0030      	movs	r0, r6
100059de:	9500      	str	r5, [sp, #0]
100059e0:	0052      	lsls	r2, r2, #1
100059e2:	f000 f875 	bl	10005ad0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
100059e6:	2204      	movs	r2, #4
100059e8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
100059ea:	742c      	strb	r4, [r5, #16]
100059ec:	4393      	bics	r3, r2
100059ee:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
100059f0:	3401      	adds	r4, #1
100059f2:	4b07      	ldr	r3, [pc, #28]	; (10005a10 <z_init_cpu+0x64>)
100059f4:	02e4      	lsls	r4, r4, #11
100059f6:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
100059f8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
100059fa:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100059fc:	b006      	add	sp, #24
100059fe:	bd70      	pop	{r4, r5, r6, pc}
10005a00:	20002d00 	.word	0x20002d00
10005a04:	200021b8 	.word	0x200021b8
10005a08:	20002464 	.word	0x20002464
10005a0c:	1000dc09 	.word	0x1000dc09
10005a10:	20002500 	.word	0x20002500

10005a14 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
10005a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10005a16:	2000      	movs	r0, #0
{
10005a18:	b0a5      	sub	sp, #148	; 0x94
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10005a1a:	f7ff ff77 	bl	1000590c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10005a1e:	4b24      	ldr	r3, [pc, #144]	; (10005ab0 <z_cstart+0x9c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10005a20:	f383 8808 	msr	MSP, r3
10005a24:	4923      	ldr	r1, [pc, #140]	; (10005ab4 <z_cstart+0xa0>)
10005a26:	4b24      	ldr	r3, [pc, #144]	; (10005ab8 <z_cstart+0xa4>)
10005a28:	6a0a      	ldr	r2, [r1, #32]
10005a2a:	401a      	ands	r2, r3
10005a2c:	23e0      	movs	r3, #224	; 0xe0
10005a2e:	041b      	lsls	r3, r3, #16
10005a30:	4313      	orrs	r3, r2
10005a32:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10005a34:	f007 fbd6 	bl	1000d1e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10005a38:	f7fe f9be 	bl	10003db8 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
10005a3c:	f7fd fefc 	bl	10003838 <log_core_init>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
10005a40:	2302      	movs	r3, #2
10005a42:	466a      	mov	r2, sp
10005a44:	33ff      	adds	r3, #255	; 0xff
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
10005a46:	a806      	add	r0, sp, #24
	dummy_thread->base.user_options = K_ESSENTIAL;
10005a48:	8493      	strh	r3, [r2, #36]	; 0x24
	k_thread_system_pool_assign(dummy_thread);
10005a4a:	f000 ff93 	bl	10006974 <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10005a4e:	4d1b      	ldr	r5, [pc, #108]	; (10005abc <z_cstart+0xa8>)
10005a50:	ab06      	add	r3, sp, #24
10005a52:	60ab      	str	r3, [r5, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10005a54:	f008 f8a0 	bl	1000db98 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10005a58:	2001      	movs	r0, #1
10005a5a:	f7ff ff57 	bl	1000590c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10005a5e:	2002      	movs	r0, #2
10005a60:	f7ff ff54 	bl	1000590c <z_sys_init_run_level>
	z_sched_init();
10005a64:	f000 fbee 	bl	10006244 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10005a68:	4c15      	ldr	r4, [pc, #84]	; (10005ac0 <z_cstart+0xac>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10005a6a:	4b16      	ldr	r3, [pc, #88]	; (10005ac4 <z_cstart+0xb0>)
	_kernel.ready_q.cache = &z_main_thread;
10005a6c:	616c      	str	r4, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10005a6e:	2280      	movs	r2, #128	; 0x80
10005a70:	2500      	movs	r5, #0
10005a72:	9305      	str	r3, [sp, #20]
10005a74:	2301      	movs	r3, #1
10005a76:	4e14      	ldr	r6, [pc, #80]	; (10005ac8 <z_cstart+0xb4>)
10005a78:	4914      	ldr	r1, [pc, #80]	; (10005acc <z_cstart+0xb8>)
10005a7a:	9304      	str	r3, [sp, #16]
10005a7c:	00d2      	lsls	r2, r2, #3
10005a7e:	0033      	movs	r3, r6
10005a80:	0020      	movs	r0, r4
10005a82:	9503      	str	r5, [sp, #12]
10005a84:	9502      	str	r5, [sp, #8]
10005a86:	9501      	str	r5, [sp, #4]
10005a88:	9500      	str	r5, [sp, #0]
10005a8a:	f000 f821 	bl	10005ad0 <z_setup_new_thread>
10005a8e:	2204      	movs	r2, #4
10005a90:	0007      	movs	r7, r0
10005a92:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10005a94:	0020      	movs	r0, r4
10005a96:	4393      	bics	r3, r2
10005a98:	7363      	strb	r3, [r4, #13]
10005a9a:	f008 f91b 	bl	1000dcd4 <z_ready_thread>
	z_init_cpu(0);
10005a9e:	0028      	movs	r0, r5
10005aa0:	f7ff ff84 	bl	100059ac <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10005aa4:	0032      	movs	r2, r6
10005aa6:	0039      	movs	r1, r7
10005aa8:	0020      	movs	r0, r4
10005aaa:	f7fe faa1 	bl	10003ff0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10005aae:	46c0      	nop			; (mov r8, r8)
10005ab0:	20002d00 	.word	0x20002d00
10005ab4:	e000ed00 	.word	0xe000ed00
10005ab8:	ff00ffff 	.word	0xff00ffff
10005abc:	20002464 	.word	0x20002464
10005ac0:	20002230 	.word	0x20002230
10005ac4:	10012cd3 	.word	0x10012cd3
10005ac8:	10005961 	.word	0x10005961
10005acc:	20002e00 	.word	0x20002e00

10005ad0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10005ad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10005ad2:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10005ad4:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10005ad6:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10005ad8:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10005ada:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10005adc:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10005ade:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10005ae0:	2004      	movs	r0, #4
10005ae2:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10005ae4:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10005ae6:	3207      	adds	r2, #7
	thread_base->prio = priority;
10005ae8:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10005aea:	2007      	movs	r0, #7
10005aec:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10005aee:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10005af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10005af2:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10005af4:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10005af6:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10005af8:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10005afa:	9202      	str	r2, [sp, #8]
10005afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10005afe:	0020      	movs	r0, r4
10005b00:	9201      	str	r2, [sp, #4]
10005b02:	9a08      	ldr	r2, [sp, #32]
10005b04:	9200      	str	r2, [sp, #0]
10005b06:	002a      	movs	r2, r5
10005b08:	f7fe fa5c 	bl	10003fc4 <arch_new_thread>
	if (!_current) {
10005b0c:	4b04      	ldr	r3, [pc, #16]	; (10005b20 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10005b0e:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10005b10:	689b      	ldr	r3, [r3, #8]
10005b12:	42b3      	cmp	r3, r6
10005b14:	d000      	beq.n	10005b18 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
10005b18:	0028      	movs	r0, r5
10005b1a:	66a3      	str	r3, [r4, #104]	; 0x68
10005b1c:	b004      	add	sp, #16
10005b1e:	bd70      	pop	{r4, r5, r6, pc}
10005b20:	20002464 	.word	0x20002464

10005b24 <z_impl_k_thread_create>:
{
10005b24:	b570      	push	{r4, r5, r6, lr}
10005b26:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10005b28:	2000      	movs	r0, #0
{
10005b2a:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10005b2c:	9005      	str	r0, [sp, #20]
10005b2e:	980e      	ldr	r0, [sp, #56]	; 0x38
{
10005b30:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10005b32:	9004      	str	r0, [sp, #16]
10005b34:	980d      	ldr	r0, [sp, #52]	; 0x34
{
10005b36:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10005b38:	9003      	str	r0, [sp, #12]
10005b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
10005b3c:	9002      	str	r0, [sp, #8]
10005b3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
10005b40:	9001      	str	r0, [sp, #4]
10005b42:	980a      	ldr	r0, [sp, #40]	; 0x28
10005b44:	9000      	str	r0, [sp, #0]
10005b46:	0020      	movs	r0, r4
10005b48:	f7ff ffc2 	bl	10005ad0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10005b4c:	002b      	movs	r3, r5
10005b4e:	1c72      	adds	r2, r6, #1
10005b50:	d101      	bne.n	10005b56 <z_impl_k_thread_create+0x32>
10005b52:	3301      	adds	r3, #1
10005b54:	d005      	beq.n	10005b62 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10005b56:	002b      	movs	r3, r5
10005b58:	4333      	orrs	r3, r6
10005b5a:	d105      	bne.n	10005b68 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10005b5c:	0020      	movs	r0, r4
10005b5e:	f000 fb05 	bl	1000616c <z_sched_start>
}
10005b62:	0020      	movs	r0, r4
10005b64:	b006      	add	sp, #24
10005b66:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10005b68:	0020      	movs	r0, r4
10005b6a:	0032      	movs	r2, r6
10005b6c:	002b      	movs	r3, r5
10005b6e:	4902      	ldr	r1, [pc, #8]	; (10005b78 <z_impl_k_thread_create+0x54>)
10005b70:	3018      	adds	r0, #24
10005b72:	f000 fce3 	bl	1000653c <z_add_timeout>
10005b76:	e7f4      	b.n	10005b62 <z_impl_k_thread_create+0x3e>
10005b78:	1000dd49 	.word	0x1000dd49

10005b7c <z_init_static_threads>:
{
10005b7c:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10005b7e:	4c20      	ldr	r4, [pc, #128]	; (10005c00 <z_init_static_threads+0x84>)
{
10005b80:	b086      	sub	sp, #24
10005b82:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10005b84:	4d1f      	ldr	r5, [pc, #124]	; (10005c04 <z_init_static_threads+0x88>)
10005b86:	42ac      	cmp	r4, r5
10005b88:	d308      	bcc.n	10005b9c <z_init_static_threads+0x20>
	k_sched_lock();
10005b8a:	f000 fb35 	bl	100061f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10005b8e:	0034      	movs	r4, r6
10005b90:	42ac      	cmp	r4, r5
10005b92:	d319      	bcc.n	10005bc8 <z_init_static_threads+0x4c>
	k_sched_unlock();
10005b94:	f000 fb40 	bl	10006218 <k_sched_unlock>
}
10005b98:	b006      	add	sp, #24
10005b9a:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10005b9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10005b9e:	9305      	str	r3, [sp, #20]
10005ba0:	6a23      	ldr	r3, [r4, #32]
10005ba2:	9304      	str	r3, [sp, #16]
10005ba4:	69e3      	ldr	r3, [r4, #28]
10005ba6:	9303      	str	r3, [sp, #12]
10005ba8:	69a3      	ldr	r3, [r4, #24]
10005baa:	9302      	str	r3, [sp, #8]
10005bac:	6963      	ldr	r3, [r4, #20]
10005bae:	9301      	str	r3, [sp, #4]
10005bb0:	6923      	ldr	r3, [r4, #16]
10005bb2:	9300      	str	r3, [sp, #0]
10005bb4:	68e3      	ldr	r3, [r4, #12]
10005bb6:	68a2      	ldr	r2, [r4, #8]
10005bb8:	6861      	ldr	r1, [r4, #4]
10005bba:	6820      	ldr	r0, [r4, #0]
10005bbc:	f7ff ff88 	bl	10005ad0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10005bc0:	6823      	ldr	r3, [r4, #0]
10005bc2:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10005bc4:	342c      	adds	r4, #44	; 0x2c
10005bc6:	e7dd      	b.n	10005b84 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10005bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005bca:	1c5a      	adds	r2, r3, #1
10005bcc:	d00f      	beq.n	10005bee <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10005bce:	43d8      	mvns	r0, r3
10005bd0:	17c0      	asrs	r0, r0, #31
10005bd2:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10005bd4:	220a      	movs	r2, #10
10005bd6:	2300      	movs	r3, #0
10005bd8:	17c1      	asrs	r1, r0, #31
10005bda:	f7fc fb01 	bl	100021e0 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10005bde:	6826      	ldr	r6, [r4, #0]
10005be0:	000b      	movs	r3, r1
10005be2:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10005be4:	4301      	orrs	r1, r0
10005be6:	d104      	bne.n	10005bf2 <z_init_static_threads+0x76>
	z_sched_start(thread);
10005be8:	0030      	movs	r0, r6
10005bea:	f000 fabf 	bl	1000616c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10005bee:	342c      	adds	r4, #44	; 0x2c
10005bf0:	e7ce      	b.n	10005b90 <z_init_static_threads+0x14>
10005bf2:	0030      	movs	r0, r6
10005bf4:	4904      	ldr	r1, [pc, #16]	; (10005c08 <z_init_static_threads+0x8c>)
10005bf6:	3018      	adds	r0, #24
10005bf8:	f000 fca0 	bl	1000653c <z_add_timeout>
10005bfc:	e7f7      	b.n	10005bee <z_init_static_threads+0x72>
10005bfe:	46c0      	nop			; (mov r8, r8)
10005c00:	1000e158 	.word	0x1000e158
10005c04:	1000e158 	.word	0x1000e158
10005c08:	1000dd49 	.word	0x1000dd49

10005c0c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
10005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10005c0e:	b085      	sub	sp, #20
10005c10:	0004      	movs	r4, r0
10005c12:	001f      	movs	r7, r3
10005c14:	9203      	str	r2, [sp, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
10005c16:	f3ef 8610 	mrs	r6, PRIMASK
10005c1a:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
10005c1c:	68c3      	ldr	r3, [r0, #12]
10005c1e:	4a35      	ldr	r2, [pc, #212]	; (10005cf4 <z_impl_k_mutex_lock+0xe8>)
10005c20:	2b00      	cmp	r3, #0
10005c22:	d00e      	beq.n	10005c42 <z_impl_k_mutex_lock+0x36>
10005c24:	6880      	ldr	r0, [r0, #8]
10005c26:	6891      	ldr	r1, [r2, #8]
10005c28:	4288      	cmp	r0, r1
10005c2a:	d017      	beq.n	10005c5c <z_impl_k_mutex_lock+0x50>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
10005c2c:	9b03      	ldr	r3, [sp, #12]
10005c2e:	433b      	orrs	r3, r7
10005c30:	d11a      	bne.n	10005c68 <z_impl_k_mutex_lock+0x5c>
	if (key != 0U) {
10005c32:	2e00      	cmp	r6, #0
10005c34:	d102      	bne.n	10005c3c <z_impl_k_mutex_lock+0x30>
	__asm__ volatile(
10005c36:	b662      	cpsie	i
10005c38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
10005c3c:	2010      	movs	r0, #16
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
10005c3e:	4240      	negs	r0, r0
10005c40:	e00a      	b.n	10005c58 <z_impl_k_mutex_lock+0x4c>
					_current->base.prio :
10005c42:	6891      	ldr	r1, [r2, #8]
10005c44:	7b89      	ldrb	r1, [r1, #14]
10005c46:	b249      	sxtb	r1, r1
		mutex->lock_count++;
10005c48:	3301      	adds	r3, #1
10005c4a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
10005c4c:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
10005c4e:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
10005c50:	60a3      	str	r3, [r4, #8]
	if (key != 0U) {
10005c52:	2e00      	cmp	r6, #0
10005c54:	d004      	beq.n	10005c60 <z_impl_k_mutex_lock+0x54>
		return 0;
10005c56:	2000      	movs	r0, #0
}
10005c58:	b005      	add	sp, #20
10005c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					_current->base.prio :
10005c5c:	6921      	ldr	r1, [r4, #16]
10005c5e:	e7f3      	b.n	10005c48 <z_impl_k_mutex_lock+0x3c>
	__asm__ volatile(
10005c60:	b662      	cpsie	i
10005c62:	f3bf 8f6f 	isb	sy
10005c66:	e7f6      	b.n	10005c56 <z_impl_k_mutex_lock+0x4a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
10005c68:	230e      	movs	r3, #14
10005c6a:	7b89      	ldrb	r1, [r1, #14]
10005c6c:	56c3      	ldrsb	r3, [r0, r3]
10005c6e:	b249      	sxtb	r1, r1
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
10005c70:	4299      	cmp	r1, r3
10005c72:	dd00      	ble.n	10005c76 <z_impl_k_mutex_lock+0x6a>
10005c74:	0019      	movs	r1, r3
10005c76:	000a      	movs	r2, r1
10005c78:	327f      	adds	r2, #127	; 0x7f
10005c7a:	da01      	bge.n	10005c80 <z_impl_k_mutex_lock+0x74>
10005c7c:	217f      	movs	r1, #127	; 0x7f
10005c7e:	4249      	negs	r1, r1
	bool resched = false;
10005c80:	2500      	movs	r5, #0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
10005c82:	428b      	cmp	r3, r1
10005c84:	dd02      	ble.n	10005c8c <z_impl_k_mutex_lock+0x80>
		resched = adjust_owner_prio(mutex, new_prio);
10005c86:	f007 ffc6 	bl	1000dc16 <adjust_owner_prio.isra.0>
10005c8a:	0005      	movs	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
10005c8c:	4b1a      	ldr	r3, [pc, #104]	; (10005cf8 <z_impl_k_mutex_lock+0xec>)
10005c8e:	0022      	movs	r2, r4
10005c90:	9302      	str	r3, [sp, #8]
10005c92:	9b03      	ldr	r3, [sp, #12]
10005c94:	0031      	movs	r1, r6
10005c96:	9802      	ldr	r0, [sp, #8]
10005c98:	9300      	str	r3, [sp, #0]
10005c9a:	9701      	str	r7, [sp, #4]
10005c9c:	f000 f9f2 	bl	10006084 <z_pend_curr>
	if (got_mutex == 0) {
10005ca0:	2800      	cmp	r0, #0
10005ca2:	d0d8      	beq.n	10005c56 <z_impl_k_mutex_lock+0x4a>
	__asm__ volatile("mrs %0, PRIMASK;"
10005ca4:	f3ef 8610 	mrs	r6, PRIMASK
10005ca8:	b672      	cpsid	i
	if (likely(mutex->owner != NULL)) {
10005caa:	68a0      	ldr	r0, [r4, #8]
10005cac:	2800      	cmp	r0, #0
10005cae:	d019      	beq.n	10005ce4 <z_impl_k_mutex_lock+0xd8>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10005cb0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
10005cb2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005cb4:	429c      	cmp	r4, r3
10005cb6:	d00b      	beq.n	10005cd0 <z_impl_k_mutex_lock+0xc4>
10005cb8:	2b00      	cmp	r3, #0
10005cba:	d009      	beq.n	10005cd0 <z_impl_k_mutex_lock+0xc4>
10005cbc:	7b9b      	ldrb	r3, [r3, #14]
10005cbe:	b25b      	sxtb	r3, r3
10005cc0:	4299      	cmp	r1, r3
10005cc2:	dd00      	ble.n	10005cc6 <z_impl_k_mutex_lock+0xba>
10005cc4:	0019      	movs	r1, r3
10005cc6:	000b      	movs	r3, r1
10005cc8:	337f      	adds	r3, #127	; 0x7f
10005cca:	da01      	bge.n	10005cd0 <z_impl_k_mutex_lock+0xc4>
10005ccc:	217f      	movs	r1, #127	; 0x7f
10005cce:	4249      	negs	r1, r1
		resched = adjust_owner_prio(mutex, new_prio) || resched;
10005cd0:	f007 ffa1 	bl	1000dc16 <adjust_owner_prio.isra.0>
10005cd4:	2800      	cmp	r0, #0
10005cd6:	d005      	beq.n	10005ce4 <z_impl_k_mutex_lock+0xd8>
		z_reschedule(&lock, key);
10005cd8:	0031      	movs	r1, r6
10005cda:	9802      	ldr	r0, [sp, #8]
10005cdc:	f000 fa30 	bl	10006140 <z_reschedule>
	return -EAGAIN;
10005ce0:	200b      	movs	r0, #11
10005ce2:	e7ac      	b.n	10005c3e <z_impl_k_mutex_lock+0x32>
	if (resched) {
10005ce4:	2d00      	cmp	r5, #0
10005ce6:	d1f7      	bne.n	10005cd8 <z_impl_k_mutex_lock+0xcc>
	if (key != 0U) {
10005ce8:	2e00      	cmp	r6, #0
10005cea:	d1f9      	bne.n	10005ce0 <z_impl_k_mutex_lock+0xd4>
	__asm__ volatile(
10005cec:	b662      	cpsie	i
10005cee:	f3bf 8f6f 	isb	sy
10005cf2:	e7f5      	b.n	10005ce0 <z_impl_k_mutex_lock+0xd4>
10005cf4:	20002464 	.word	0x20002464
10005cf8:	200024f8 	.word	0x200024f8

10005cfc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
10005cfc:	b570      	push	{r4, r5, r6, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
10005cfe:	6883      	ldr	r3, [r0, #8]
{
10005d00:	0004      	movs	r4, r0
	CHECKIF(mutex->owner == NULL) {
10005d02:	2b00      	cmp	r3, #0
10005d04:	d02a      	beq.n	10005d5c <z_impl_k_mutex_unlock+0x60>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
10005d06:	4a18      	ldr	r2, [pc, #96]	; (10005d68 <z_impl_k_mutex_unlock+0x6c>)
10005d08:	6892      	ldr	r2, [r2, #8]
10005d0a:	4293      	cmp	r3, r2
10005d0c:	d129      	bne.n	10005d62 <z_impl_k_mutex_unlock+0x66>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
10005d0e:	68c3      	ldr	r3, [r0, #12]
10005d10:	2b01      	cmp	r3, #1
10005d12:	d903      	bls.n	10005d1c <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
10005d14:	3b01      	subs	r3, #1
10005d16:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
10005d18:	2000      	movs	r0, #0
}
10005d1a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
10005d1c:	f3ef 8510 	mrs	r5, PRIMASK
10005d20:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
10005d22:	6901      	ldr	r1, [r0, #16]
10005d24:	6880      	ldr	r0, [r0, #8]
10005d26:	f007 ff76 	bl	1000dc16 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
10005d2a:	0020      	movs	r0, r4
10005d2c:	f008 f827 	bl	1000dd7e <z_unpend_first_thread>
	mutex->owner = new_owner;
10005d30:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
10005d32:	2800      	cmp	r0, #0
10005d34:	d00b      	beq.n	10005d4e <z_impl_k_mutex_unlock+0x52>
		mutex->owner_orig_prio = new_owner->base.prio;
10005d36:	230e      	movs	r3, #14
10005d38:	56c3      	ldrsb	r3, [r0, r3]
10005d3a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10005d3c:	2300      	movs	r3, #0
10005d3e:	6703      	str	r3, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
10005d40:	f007 ffc8 	bl	1000dcd4 <z_ready_thread>
		z_reschedule(&lock, key);
10005d44:	0029      	movs	r1, r5
10005d46:	4809      	ldr	r0, [pc, #36]	; (10005d6c <z_impl_k_mutex_unlock+0x70>)
10005d48:	f000 f9fa 	bl	10006140 <z_reschedule>
10005d4c:	e7e4      	b.n	10005d18 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
10005d4e:	60e0      	str	r0, [r4, #12]
	if (key != 0U) {
10005d50:	2d00      	cmp	r5, #0
10005d52:	d1e1      	bne.n	10005d18 <z_impl_k_mutex_unlock+0x1c>
	__asm__ volatile(
10005d54:	b662      	cpsie	i
10005d56:	f3bf 8f6f 	isb	sy
10005d5a:	e7dd      	b.n	10005d18 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
10005d5c:	2016      	movs	r0, #22
		return -EPERM;
10005d5e:	4240      	negs	r0, r0
10005d60:	e7db      	b.n	10005d1a <z_impl_k_mutex_unlock+0x1e>
10005d62:	2001      	movs	r0, #1
10005d64:	e7fb      	b.n	10005d5e <z_impl_k_mutex_unlock+0x62>
10005d66:	46c0      	nop			; (mov r8, r8)
10005d68:	20002464 	.word	0x20002464
10005d6c:	200024f8 	.word	0x200024f8

10005d70 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10005d70:	b570      	push	{r4, r5, r6, lr}
10005d72:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10005d74:	f3ef 8510 	mrs	r5, PRIMASK
10005d78:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10005d7a:	f008 f800 	bl	1000dd7e <z_unpend_first_thread>

	if (thread != NULL) {
10005d7e:	2800      	cmp	r0, #0
10005d80:	d008      	beq.n	10005d94 <z_impl_k_sem_give+0x24>
10005d82:	2300      	movs	r3, #0
10005d84:	6703      	str	r3, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10005d86:	f007 ffa5 	bl	1000dcd4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10005d8a:	0029      	movs	r1, r5
10005d8c:	4808      	ldr	r0, [pc, #32]	; (10005db0 <z_impl_k_sem_give+0x40>)
10005d8e:	f000 f9d7 	bl	10006140 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10005d92:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10005d94:	68a2      	ldr	r2, [r4, #8]
10005d96:	68e3      	ldr	r3, [r4, #12]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10005d98:	0020      	movs	r0, r4
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10005d9a:	1a9b      	subs	r3, r3, r2
10005d9c:	1e59      	subs	r1, r3, #1
10005d9e:	418b      	sbcs	r3, r1
10005da0:	189b      	adds	r3, r3, r2
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10005da2:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10005da4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10005da6:	3010      	adds	r0, #16
10005da8:	f008 f8a3 	bl	1000def2 <z_handle_obj_poll_events>
}
10005dac:	e7ed      	b.n	10005d8a <z_impl_k_sem_give+0x1a>
10005dae:	46c0      	nop			; (mov r8, r8)
10005db0:	200024f8 	.word	0x200024f8

10005db4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10005db4:	b513      	push	{r0, r1, r4, lr}
10005db6:	0004      	movs	r4, r0
10005db8:	f3ef 8110 	mrs	r1, PRIMASK
10005dbc:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10005dbe:	6880      	ldr	r0, [r0, #8]
10005dc0:	2800      	cmp	r0, #0
10005dc2:	d008      	beq.n	10005dd6 <z_impl_k_sem_take+0x22>
		sem->count--;
10005dc4:	3801      	subs	r0, #1
10005dc6:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10005dc8:	2900      	cmp	r1, #0
10005dca:	d102      	bne.n	10005dd2 <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
10005dcc:	b662      	cpsie	i
10005dce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10005dd2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10005dd4:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10005dd6:	0010      	movs	r0, r2
10005dd8:	4318      	orrs	r0, r3
10005dda:	d107      	bne.n	10005dec <z_impl_k_sem_take+0x38>
	if (key != 0U) {
10005ddc:	2900      	cmp	r1, #0
10005dde:	d102      	bne.n	10005de6 <z_impl_k_sem_take+0x32>
	__asm__ volatile(
10005de0:	b662      	cpsie	i
10005de2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10005de6:	2010      	movs	r0, #16
10005de8:	4240      	negs	r0, r0
10005dea:	e7f3      	b.n	10005dd4 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10005dec:	9200      	str	r2, [sp, #0]
10005dee:	9301      	str	r3, [sp, #4]
10005df0:	0022      	movs	r2, r4
10005df2:	4802      	ldr	r0, [pc, #8]	; (10005dfc <z_impl_k_sem_take+0x48>)
10005df4:	f000 f946 	bl	10006084 <z_pend_curr>
	return ret;
10005df8:	e7ec      	b.n	10005dd4 <z_impl_k_sem_take+0x20>
10005dfa:	46c0      	nop			; (mov r8, r8)
10005dfc:	200024f8 	.word	0x200024f8

10005e00 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
10005e00:	89c2      	ldrh	r2, [r0, #14]
{
10005e02:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
10005e04:	2000      	movs	r0, #0
10005e06:	2a7f      	cmp	r2, #127	; 0x7f
10005e08:	d811      	bhi.n	10005e2e <sliceable+0x2e>
	int ret = slice_ticks;
10005e0a:	4a0a      	ldr	r2, [pc, #40]	; (10005e34 <sliceable+0x34>)
10005e0c:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
10005e0e:	2800      	cmp	r0, #0
10005e10:	d00d      	beq.n	10005e2e <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10005e12:	210e      	movs	r1, #14
10005e14:	4a08      	ldr	r2, [pc, #32]	; (10005e38 <sliceable+0x38>)
10005e16:	5659      	ldrsb	r1, [r3, r1]
10005e18:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
10005e1a:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10005e1c:	4291      	cmp	r1, r2
10005e1e:	db06      	blt.n	10005e2e <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
10005e20:	7b5a      	ldrb	r2, [r3, #13]
10005e22:	06d2      	lsls	r2, r2, #27
10005e24:	d103      	bne.n	10005e2e <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
10005e26:	4805      	ldr	r0, [pc, #20]	; (10005e3c <sliceable+0x3c>)
10005e28:	1a18      	subs	r0, r3, r0
10005e2a:	1e43      	subs	r3, r0, #1
10005e2c:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
10005e2e:	2301      	movs	r3, #1
10005e30:	4018      	ands	r0, r3
}
10005e32:	4770      	bx	lr
10005e34:	2000248c 	.word	0x2000248c
10005e38:	20002488 	.word	0x20002488
10005e3c:	200021b8 	.word	0x200021b8

10005e40 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10005e40:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10005e42:	4b04      	ldr	r3, [pc, #16]	; (10005e54 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10005e44:	4a04      	ldr	r2, [pc, #16]	; (10005e58 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10005e46:	1ac0      	subs	r0, r0, r3
10005e48:	4b04      	ldr	r3, [pc, #16]	; (10005e5c <slice_timeout+0x1c>)
10005e4a:	10c0      	asrs	r0, r0, #3
10005e4c:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10005e4e:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10005e50:	4770      	bx	lr
10005e52:	46c0      	nop			; (mov r8, r8)
10005e54:	200022a8 	.word	0x200022a8
10005e58:	200024f8 	.word	0x200024f8
10005e5c:	aaaaaaab 	.word	0xaaaaaaab

10005e60 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10005e60:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10005e62:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10005e64:	4b0c      	ldr	r3, [pc, #48]	; (10005e98 <z_reset_time_slice+0x38>)
{
10005e66:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
10005e68:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10005e6a:	4b0c      	ldr	r3, [pc, #48]	; (10005e9c <z_reset_time_slice+0x3c>)
10005e6c:	4374      	muls	r4, r6
10005e6e:	18e4      	adds	r4, r4, r3
10005e70:	0020      	movs	r0, r4
10005e72:	f007 ffe4 	bl	1000de3e <z_abort_timeout>
	slice_expired[cpu] = false;
10005e76:	2200      	movs	r2, #0
10005e78:	4b09      	ldr	r3, [pc, #36]	; (10005ea0 <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
10005e7a:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
10005e7c:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
10005e7e:	f7ff ffbf 	bl	10005e00 <sliceable>
10005e82:	2800      	cmp	r0, #0
10005e84:	d007      	beq.n	10005e96 <z_reset_time_slice+0x36>
	int ret = slice_ticks;
10005e86:	4b07      	ldr	r3, [pc, #28]	; (10005ea4 <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10005e88:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
10005e8a:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10005e8c:	4906      	ldr	r1, [pc, #24]	; (10005ea8 <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
10005e8e:	3a01      	subs	r2, #1
10005e90:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10005e92:	f000 fb53 	bl	1000653c <z_add_timeout>
	}
}
10005e96:	bd70      	pop	{r4, r5, r6, pc}
10005e98:	20002464 	.word	0x20002464
10005e9c:	200022a8 	.word	0x200022a8
10005ea0:	200024f8 	.word	0x200024f8
10005ea4:	2000248c 	.word	0x2000248c
10005ea8:	10005e41 	.word	0x10005e41

10005eac <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10005eac:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
10005eae:	4d0e      	ldr	r5, [pc, #56]	; (10005ee8 <update_cache+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005eb0:	4b0e      	ldr	r3, [pc, #56]	; (10005eec <update_cache+0x40>)
	return list->head == list;
10005eb2:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005eb4:	429c      	cmp	r4, r3
10005eb6:	d001      	beq.n	10005ebc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10005eb8:	2c00      	cmp	r4, #0
10005eba:	d100      	bne.n	10005ebe <update_cache+0x12>
10005ebc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10005ebe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10005ec0:	2800      	cmp	r0, #0
10005ec2:	d108      	bne.n	10005ed6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10005ec4:	7b5a      	ldrb	r2, [r3, #13]
10005ec6:	06d2      	lsls	r2, r2, #27
10005ec8:	d105      	bne.n	10005ed6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10005eca:	69a2      	ldr	r2, [r4, #24]
10005ecc:	2a00      	cmp	r2, #0
10005ece:	d102      	bne.n	10005ed6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10005ed0:	89da      	ldrh	r2, [r3, #14]
10005ed2:	2a7f      	cmp	r2, #127	; 0x7f
10005ed4:	d805      	bhi.n	10005ee2 <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10005ed6:	429c      	cmp	r4, r3
10005ed8:	d002      	beq.n	10005ee0 <update_cache+0x34>
			z_reset_time_slice(thread);
10005eda:	0020      	movs	r0, r4
10005edc:	f7ff ffc0 	bl	10005e60 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10005ee0:	0023      	movs	r3, r4
10005ee2:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10005ee4:	bd70      	pop	{r4, r5, r6, pc}
10005ee6:	46c0      	nop			; (mov r8, r8)
10005ee8:	20002464 	.word	0x20002464
10005eec:	2000247c 	.word	0x2000247c

10005ef0 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10005ef0:	220d      	movs	r2, #13
{
10005ef2:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10005ef4:	5682      	ldrsb	r2, [r0, r2]
{
10005ef6:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10005ef8:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10005efa:	2a00      	cmp	r2, #0
10005efc:	da04      	bge.n	10005f08 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10005efe:	227f      	movs	r2, #127	; 0x7f
10005f00:	4013      	ands	r3, r2
10005f02:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10005f04:	f007 feaa 	bl	1000dc5c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10005f08:	2380      	movs	r3, #128	; 0x80
10005f0a:	7b62      	ldrb	r2, [r4, #13]
10005f0c:	425b      	negs	r3, r3
10005f0e:	4313      	orrs	r3, r2
	return list->head == list;
10005f10:	4a13      	ldr	r2, [pc, #76]	; (10005f60 <move_thread_to_end_of_prio_q+0x70>)
10005f12:	7363      	strb	r3, [r4, #13]
10005f14:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005f16:	4813      	ldr	r0, [pc, #76]	; (10005f64 <move_thread_to_end_of_prio_q+0x74>)
10005f18:	4283      	cmp	r3, r0
10005f1a:	d100      	bne.n	10005f1e <move_thread_to_end_of_prio_q+0x2e>
10005f1c:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10005f1e:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10005f20:	2b00      	cmp	r3, #0
10005f22:	d104      	bne.n	10005f2e <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10005f24:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10005f26:	6061      	str	r1, [r4, #4]

	tail->next = node;
10005f28:	600c      	str	r4, [r1, #0]
	list->tail = node;
10005f2a:	61d4      	str	r4, [r2, #28]
}
10005f2c:	e00c      	b.n	10005f48 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10005f2e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10005f30:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10005f32:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10005f34:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10005f36:	42b5      	cmp	r5, r6
10005f38:	d00d      	beq.n	10005f56 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10005f3a:	42ae      	cmp	r6, r5
10005f3c:	dd0b      	ble.n	10005f56 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10005f3e:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10005f40:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10005f42:	6061      	str	r1, [r4, #4]
	prev->next = node;
10005f44:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10005f46:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10005f48:	6890      	ldr	r0, [r2, #8]
10005f4a:	1b00      	subs	r0, r0, r4
10005f4c:	4243      	negs	r3, r0
10005f4e:	4158      	adcs	r0, r3
10005f50:	f7ff ffac 	bl	10005eac <update_cache>
}
10005f54:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10005f56:	4299      	cmp	r1, r3
10005f58:	d0e4      	beq.n	10005f24 <move_thread_to_end_of_prio_q+0x34>
10005f5a:	681b      	ldr	r3, [r3, #0]
10005f5c:	e7e0      	b.n	10005f20 <move_thread_to_end_of_prio_q+0x30>
10005f5e:	46c0      	nop			; (mov r8, r8)
10005f60:	20002464 	.word	0x20002464
10005f64:	2000247c 	.word	0x2000247c

10005f68 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10005f68:	230d      	movs	r3, #13
{
10005f6a:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10005f6c:	56c3      	ldrsb	r3, [r0, r3]
10005f6e:	7b41      	ldrb	r1, [r0, #13]
10005f70:	2b00      	cmp	r3, #0
10005f72:	db26      	blt.n	10005fc2 <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10005f74:	06cb      	lsls	r3, r1, #27
10005f76:	d124      	bne.n	10005fc2 <ready_thread+0x5a>
	return node->next != NULL;
10005f78:	6983      	ldr	r3, [r0, #24]
10005f7a:	2b00      	cmp	r3, #0
10005f7c:	d121      	bne.n	10005fc2 <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10005f7e:	2280      	movs	r2, #128	; 0x80
10005f80:	4252      	negs	r2, r2
10005f82:	430a      	orrs	r2, r1
10005f84:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10005f86:	4a11      	ldr	r2, [pc, #68]	; (10005fcc <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005f88:	4c11      	ldr	r4, [pc, #68]	; (10005fd0 <ready_thread+0x68>)
	return list->head == list;
10005f8a:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005f8c:	42a1      	cmp	r1, r4
10005f8e:	d000      	beq.n	10005f92 <ready_thread+0x2a>
10005f90:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10005f92:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10005f94:	2b00      	cmp	r3, #0
10005f96:	d104      	bne.n	10005fa2 <ready_thread+0x3a>
	node->next = list;
10005f98:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10005f9a:	6041      	str	r1, [r0, #4]
	tail->next = node;
10005f9c:	6008      	str	r0, [r1, #0]
	list->tail = node;
10005f9e:	61d0      	str	r0, [r2, #28]
}
10005fa0:	e00c      	b.n	10005fbc <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10005fa2:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10005fa4:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10005fa6:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10005fa8:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10005faa:	42b5      	cmp	r5, r6
10005fac:	d00a      	beq.n	10005fc4 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10005fae:	42ae      	cmp	r6, r5
10005fb0:	dd08      	ble.n	10005fc4 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10005fb2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10005fb4:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10005fb6:	6042      	str	r2, [r0, #4]
	prev->next = node;
10005fb8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10005fba:	6058      	str	r0, [r3, #4]
		update_cache(0);
10005fbc:	2000      	movs	r0, #0
10005fbe:	f7ff ff75 	bl	10005eac <update_cache>
}
10005fc2:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10005fc4:	428b      	cmp	r3, r1
10005fc6:	d0e7      	beq.n	10005f98 <ready_thread+0x30>
10005fc8:	681b      	ldr	r3, [r3, #0]
10005fca:	e7e3      	b.n	10005f94 <ready_thread+0x2c>
10005fcc:	20002464 	.word	0x20002464
10005fd0:	2000247c 	.word	0x2000247c

10005fd4 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10005fd4:	220d      	movs	r2, #13
{
10005fd6:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10005fd8:	5682      	ldrsb	r2, [r0, r2]
{
10005fda:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10005fdc:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10005fde:	2a00      	cmp	r2, #0
10005fe0:	da04      	bge.n	10005fec <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10005fe2:	227f      	movs	r2, #127	; 0x7f
10005fe4:	4013      	ands	r3, r2
10005fe6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10005fe8:	f007 fe38 	bl	1000dc5c <sys_dlist_remove>
	update_cache(thread == _current);
10005fec:	4b03      	ldr	r3, [pc, #12]	; (10005ffc <unready_thread+0x28>)
10005fee:	6898      	ldr	r0, [r3, #8]
10005ff0:	1b00      	subs	r0, r0, r4
10005ff2:	4243      	negs	r3, r0
10005ff4:	4158      	adcs	r0, r3
10005ff6:	f7ff ff59 	bl	10005eac <update_cache>
}
10005ffa:	bd10      	pop	{r4, pc}
10005ffc:	20002464 	.word	0x20002464

10006000 <pend_locked>:
{
10006000:	b570      	push	{r4, r5, r6, lr}
10006002:	001d      	movs	r5, r3
10006004:	0016      	movs	r6, r2
10006006:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10006008:	f007 fe3b 	bl	1000dc82 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
1000600c:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000600e:	1c72      	adds	r2, r6, #1
10006010:	d101      	bne.n	10006016 <pend_locked+0x16>
10006012:	3301      	adds	r3, #1
10006014:	d006      	beq.n	10006024 <pend_locked+0x24>
10006016:	0020      	movs	r0, r4
10006018:	0032      	movs	r2, r6
1000601a:	002b      	movs	r3, r5
1000601c:	4902      	ldr	r1, [pc, #8]	; (10006028 <pend_locked+0x28>)
1000601e:	3018      	adds	r0, #24
10006020:	f000 fa8c 	bl	1000653c <z_add_timeout>
}
10006024:	bd70      	pop	{r4, r5, r6, pc}
10006026:	46c0      	nop			; (mov r8, r8)
10006028:	1000dd49 	.word	0x1000dd49

1000602c <z_time_slice>:
{
1000602c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000602e:	f3ef 8510 	mrs	r5, PRIMASK
10006032:	b672      	cpsid	i
	struct k_thread *curr = _current;
10006034:	4a10      	ldr	r2, [pc, #64]	; (10006078 <z_time_slice+0x4c>)
	if (pending_current == curr) {
10006036:	4b11      	ldr	r3, [pc, #68]	; (1000607c <z_time_slice+0x50>)
	struct k_thread *curr = _current;
10006038:	6894      	ldr	r4, [r2, #8]
	if (pending_current == curr) {
1000603a:	6818      	ldr	r0, [r3, #0]
1000603c:	42a0      	cmp	r0, r4
1000603e:	d107      	bne.n	10006050 <z_time_slice+0x24>
		z_reset_time_slice(curr);
10006040:	f7ff ff0e 	bl	10005e60 <z_reset_time_slice>
	if (key != 0U) {
10006044:	2d00      	cmp	r5, #0
10006046:	d102      	bne.n	1000604e <z_time_slice+0x22>
	__asm__ volatile(
10006048:	b662      	cpsie	i
1000604a:	f3bf 8f6f 	isb	sy
}
1000604e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10006050:	2100      	movs	r1, #0
10006052:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
10006054:	7c12      	ldrb	r2, [r2, #16]
10006056:	4b0a      	ldr	r3, [pc, #40]	; (10006080 <z_time_slice+0x54>)
10006058:	5c9b      	ldrb	r3, [r3, r2]
1000605a:	428b      	cmp	r3, r1
1000605c:	d0f2      	beq.n	10006044 <z_time_slice+0x18>
1000605e:	0020      	movs	r0, r4
10006060:	f7ff fece 	bl	10005e00 <sliceable>
10006064:	2800      	cmp	r0, #0
10006066:	d0ed      	beq.n	10006044 <z_time_slice+0x18>
		if (!z_is_thread_prevented_from_running(curr)) {
10006068:	7b63      	ldrb	r3, [r4, #13]
1000606a:	06db      	lsls	r3, r3, #27
1000606c:	d102      	bne.n	10006074 <z_time_slice+0x48>
			move_thread_to_end_of_prio_q(curr);
1000606e:	0020      	movs	r0, r4
10006070:	f7ff ff3e 	bl	10005ef0 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
10006074:	0020      	movs	r0, r4
10006076:	e7e3      	b.n	10006040 <z_time_slice+0x14>
10006078:	20002464 	.word	0x20002464
1000607c:	20002484 	.word	0x20002484
10006080:	200024f8 	.word	0x200024f8

10006084 <z_pend_curr>:
{
10006084:	b510      	push	{r4, lr}
	pending_current = _current;
10006086:	4809      	ldr	r0, [pc, #36]	; (100060ac <z_pend_curr+0x28>)
{
10006088:	000c      	movs	r4, r1
	pending_current = _current;
1000608a:	4b09      	ldr	r3, [pc, #36]	; (100060b0 <z_pend_curr+0x2c>)
{
1000608c:	0011      	movs	r1, r2
	pending_current = _current;
1000608e:	6882      	ldr	r2, [r0, #8]
10006090:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10006092:	f3ef 8310 	mrs	r3, PRIMASK
10006096:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10006098:	9a02      	ldr	r2, [sp, #8]
1000609a:	9b03      	ldr	r3, [sp, #12]
1000609c:	6880      	ldr	r0, [r0, #8]
1000609e:	f7ff ffaf 	bl	10006000 <pend_locked>
	ret = arch_swap(key);
100060a2:	0020      	movs	r0, r4
100060a4:	f7fd ff34 	bl	10003f10 <arch_swap>
}
100060a8:	bd10      	pop	{r4, pc}
100060aa:	46c0      	nop			; (mov r8, r8)
100060ac:	20002464 	.word	0x20002464
100060b0:	20002484 	.word	0x20002484

100060b4 <z_set_prio>:
{
100060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100060b6:	0004      	movs	r4, r0
100060b8:	f3ef 8710 	mrs	r7, PRIMASK
100060bc:	b672      	cpsid	i
	uint8_t state = thread->base.thread_state;
100060be:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
100060c0:	b24e      	sxtb	r6, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100060c2:	06da      	lsls	r2, r3, #27
100060c4:	d11b      	bne.n	100060fe <z_set_prio+0x4a>
	return node->next != NULL;
100060c6:	6985      	ldr	r5, [r0, #24]
100060c8:	2d00      	cmp	r5, #0
100060ca:	d118      	bne.n	100060fe <z_set_prio+0x4a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100060cc:	227f      	movs	r2, #127	; 0x7f
100060ce:	4013      	ands	r3, r2
100060d0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100060d2:	f007 fdc3 	bl	1000dc5c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
100060d6:	2380      	movs	r3, #128	; 0x80
100060d8:	7b62      	ldrb	r2, [r4, #13]
100060da:	425b      	negs	r3, r3
100060dc:	4313      	orrs	r3, r2
100060de:	7363      	strb	r3, [r4, #13]
	return list->head == list;
100060e0:	4b15      	ldr	r3, [pc, #84]	; (10006138 <z_set_prio+0x84>)
				thread->base.prio = prio;
100060e2:	73a6      	strb	r6, [r4, #14]
100060e4:	699a      	ldr	r2, [r3, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100060e6:	4915      	ldr	r1, [pc, #84]	; (1000613c <z_set_prio+0x88>)
100060e8:	428a      	cmp	r2, r1
100060ea:	d000      	beq.n	100060ee <z_set_prio+0x3a>
100060ec:	0015      	movs	r5, r2
	return (node == list->tail) ? NULL : node->next;
100060ee:	69da      	ldr	r2, [r3, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100060f0:	2d00      	cmp	r5, #0
100060f2:	d10c      	bne.n	1000610e <z_set_prio+0x5a>
	node->next = list;
100060f4:	6021      	str	r1, [r4, #0]
	node->prev = tail;
100060f6:	6062      	str	r2, [r4, #4]
	tail->next = node;
100060f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
100060fa:	61dc      	str	r4, [r3, #28]
}
100060fc:	e012      	b.n	10006124 <z_set_prio+0x70>
100060fe:	2000      	movs	r0, #0
			thread->base.prio = prio;
10006100:	73a6      	strb	r6, [r4, #14]
	if (key != 0U) {
10006102:	2f00      	cmp	r7, #0
10006104:	d102      	bne.n	1000610c <z_set_prio+0x58>
	__asm__ volatile(
10006106:	b662      	cpsie	i
10006108:	f3bf 8f6f 	isb	sy
}
1000610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
1000610e:	200e      	movs	r0, #14
10006110:	5628      	ldrsb	r0, [r5, r0]
	if (b1 != b2) {
10006112:	4286      	cmp	r6, r0
10006114:	d00b      	beq.n	1000612e <z_set_prio+0x7a>
		if (z_sched_prio_cmp(thread, t) > 0) {
10006116:	42b0      	cmp	r0, r6
10006118:	dd09      	ble.n	1000612e <z_set_prio+0x7a>
	sys_dnode_t *const prev = successor->prev;
1000611a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
1000611c:	6025      	str	r5, [r4, #0]
	node->prev = prev;
1000611e:	6063      	str	r3, [r4, #4]
	prev->next = node;
10006120:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10006122:	606c      	str	r4, [r5, #4]
			update_cache(1);
10006124:	2001      	movs	r0, #1
10006126:	f7ff fec1 	bl	10005eac <update_cache>
1000612a:	2001      	movs	r0, #1
1000612c:	e7e9      	b.n	10006102 <z_set_prio+0x4e>
	return (node == list->tail) ? NULL : node->next;
1000612e:	42aa      	cmp	r2, r5
10006130:	d0e0      	beq.n	100060f4 <z_set_prio+0x40>
10006132:	682d      	ldr	r5, [r5, #0]
10006134:	e7dc      	b.n	100060f0 <z_set_prio+0x3c>
10006136:	46c0      	nop			; (mov r8, r8)
10006138:	20002464 	.word	0x20002464
1000613c:	2000247c 	.word	0x2000247c

10006140 <z_reschedule>:
{
10006140:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10006142:	2900      	cmp	r1, #0
10006144:	d10a      	bne.n	1000615c <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10006146:	f3ef 8005 	mrs	r0, IPSR
1000614a:	2800      	cmp	r0, #0
1000614c:	d107      	bne.n	1000615e <z_reschedule+0x1e>
	return new_thread != _current;
1000614e:	4b06      	ldr	r3, [pc, #24]	; (10006168 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10006150:	689a      	ldr	r2, [r3, #8]
10006152:	695b      	ldr	r3, [r3, #20]
10006154:	429a      	cmp	r2, r3
10006156:	d002      	beq.n	1000615e <z_reschedule+0x1e>
10006158:	f7fd feda 	bl	10003f10 <arch_swap>
}
1000615c:	bd10      	pop	{r4, pc}
1000615e:	b662      	cpsie	i
10006160:	f3bf 8f6f 	isb	sy
10006164:	e7fa      	b.n	1000615c <z_reschedule+0x1c>
10006166:	46c0      	nop			; (mov r8, r8)
10006168:	20002464 	.word	0x20002464

1000616c <z_sched_start>:
{
1000616c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000616e:	f3ef 8410 	mrs	r4, PRIMASK
10006172:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10006174:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10006176:	7b43      	ldrb	r3, [r0, #13]
10006178:	4213      	tst	r3, r2
1000617a:	d105      	bne.n	10006188 <z_sched_start+0x1c>
	if (key != 0U) {
1000617c:	2c00      	cmp	r4, #0
1000617e:	d102      	bne.n	10006186 <z_sched_start+0x1a>
	__asm__ volatile(
10006180:	b662      	cpsie	i
10006182:	f3bf 8f6f 	isb	sy
}
10006186:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10006188:	4393      	bics	r3, r2
1000618a:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
1000618c:	f7ff feec 	bl	10005f68 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10006190:	0021      	movs	r1, r4
10006192:	4802      	ldr	r0, [pc, #8]	; (1000619c <z_sched_start+0x30>)
10006194:	f7ff ffd4 	bl	10006140 <z_reschedule>
10006198:	e7f5      	b.n	10006186 <z_sched_start+0x1a>
1000619a:	46c0      	nop			; (mov r8, r8)
1000619c:	200024f9 	.word	0x200024f9

100061a0 <z_impl_k_thread_suspend>:
{
100061a0:	b570      	push	{r4, r5, r6, lr}
100061a2:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
100061a4:	3018      	adds	r0, #24
100061a6:	f007 fe4a 	bl	1000de3e <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
100061aa:	f3ef 8610 	mrs	r6, PRIMASK
100061ae:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
100061b0:	220d      	movs	r2, #13
100061b2:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
100061b4:	7b63      	ldrb	r3, [r4, #13]
100061b6:	2a00      	cmp	r2, #0
100061b8:	da05      	bge.n	100061c6 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100061ba:	227f      	movs	r2, #127	; 0x7f
100061bc:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100061be:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100061c0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100061c2:	f007 fd4b 	bl	1000dc5c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100061c6:	2310      	movs	r3, #16
		update_cache(thread == _current);
100061c8:	4d0a      	ldr	r5, [pc, #40]	; (100061f4 <z_impl_k_thread_suspend+0x54>)
100061ca:	7b62      	ldrb	r2, [r4, #13]
100061cc:	68a8      	ldr	r0, [r5, #8]
100061ce:	4313      	orrs	r3, r2
100061d0:	1b00      	subs	r0, r0, r4
100061d2:	7363      	strb	r3, [r4, #13]
100061d4:	4243      	negs	r3, r0
100061d6:	4158      	adcs	r0, r3
100061d8:	f7ff fe68 	bl	10005eac <update_cache>
	if (key != 0U) {
100061dc:	2e00      	cmp	r6, #0
100061de:	d102      	bne.n	100061e6 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
100061e0:	b662      	cpsie	i
100061e2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
100061e6:	68ab      	ldr	r3, [r5, #8]
100061e8:	42a3      	cmp	r3, r4
100061ea:	d101      	bne.n	100061f0 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
100061ec:	f007 fe02 	bl	1000ddf4 <z_reschedule_unlocked>
}
100061f0:	bd70      	pop	{r4, r5, r6, pc}
100061f2:	46c0      	nop			; (mov r8, r8)
100061f4:	20002464 	.word	0x20002464

100061f8 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
100061f8:	f3ef 8110 	mrs	r1, PRIMASK
100061fc:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
100061fe:	4b05      	ldr	r3, [pc, #20]	; (10006214 <k_sched_lock+0x1c>)
10006200:	689a      	ldr	r2, [r3, #8]
10006202:	7bd3      	ldrb	r3, [r2, #15]
10006204:	3b01      	subs	r3, #1
10006206:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10006208:	2900      	cmp	r1, #0
1000620a:	d102      	bne.n	10006212 <k_sched_lock+0x1a>
	__asm__ volatile(
1000620c:	b662      	cpsie	i
1000620e:	f3bf 8f6f 	isb	sy
}
10006212:	4770      	bx	lr
10006214:	20002464 	.word	0x20002464

10006218 <k_sched_unlock>:
{
10006218:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000621a:	f3ef 8410 	mrs	r4, PRIMASK
1000621e:	b672      	cpsid	i
		++_current->base.sched_locked;
10006220:	4b07      	ldr	r3, [pc, #28]	; (10006240 <k_sched_unlock+0x28>)
		update_cache(0);
10006222:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10006224:	689a      	ldr	r2, [r3, #8]
10006226:	7bd3      	ldrb	r3, [r2, #15]
10006228:	3301      	adds	r3, #1
1000622a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
1000622c:	f7ff fe3e 	bl	10005eac <update_cache>
	if (key != 0U) {
10006230:	2c00      	cmp	r4, #0
10006232:	d102      	bne.n	1000623a <k_sched_unlock+0x22>
	__asm__ volatile(
10006234:	b662      	cpsie	i
10006236:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
1000623a:	f007 fddb 	bl	1000ddf4 <z_reschedule_unlocked>
}
1000623e:	bd10      	pop	{r4, pc}
10006240:	20002464 	.word	0x20002464

10006244 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
10006244:	4b02      	ldr	r3, [pc, #8]	; (10006250 <z_sched_init+0xc>)
10006246:	4a03      	ldr	r2, [pc, #12]	; (10006254 <z_sched_init+0x10>)
10006248:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
1000624a:	61da      	str	r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
1000624c:	4770      	bx	lr
1000624e:	46c0      	nop			; (mov r8, r8)
10006250:	20002464 	.word	0x20002464
10006254:	2000247c 	.word	0x2000247c

10006258 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000625a:	f3ef 8510 	mrs	r5, PRIMASK
1000625e:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10006260:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10006262:	4c19      	ldr	r4, [pc, #100]	; (100062c8 <z_impl_k_yield+0x70>)
10006264:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10006266:	7b43      	ldrb	r3, [r0, #13]
10006268:	4013      	ands	r3, r2
1000626a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000626c:	f007 fcf6 	bl	1000dc5c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10006270:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10006272:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10006274:	4252      	negs	r2, r2
10006276:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006278:	4814      	ldr	r0, [pc, #80]	; (100062cc <z_impl_k_yield+0x74>)
1000627a:	430a      	orrs	r2, r1
1000627c:	735a      	strb	r2, [r3, #13]
	return list->head == list;
1000627e:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006280:	4282      	cmp	r2, r0
10006282:	d100      	bne.n	10006286 <z_impl_k_yield+0x2e>
10006284:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10006286:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10006288:	2a00      	cmp	r2, #0
1000628a:	d104      	bne.n	10006296 <z_impl_k_yield+0x3e>
	node->next = list;
1000628c:	6018      	str	r0, [r3, #0]
	node->prev = tail;
1000628e:	6059      	str	r1, [r3, #4]
	tail->next = node;
10006290:	600b      	str	r3, [r1, #0]
	list->tail = node;
10006292:	61e3      	str	r3, [r4, #28]
}
10006294:	e00c      	b.n	100062b0 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10006296:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10006298:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
1000629a:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
1000629c:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
1000629e:	42be      	cmp	r6, r7
100062a0:	d00d      	beq.n	100062be <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
100062a2:	42b7      	cmp	r7, r6
100062a4:	dd0b      	ble.n	100062be <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
100062a6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
100062a8:	601a      	str	r2, [r3, #0]
	node->prev = prev;
100062aa:	6059      	str	r1, [r3, #4]
	prev->next = node;
100062ac:	600b      	str	r3, [r1, #0]
	successor->prev = node;
100062ae:	6053      	str	r3, [r2, #4]
	update_cache(1);
100062b0:	2001      	movs	r0, #1
100062b2:	f7ff fdfb 	bl	10005eac <update_cache>
100062b6:	0028      	movs	r0, r5
100062b8:	f7fd fe2a 	bl	10003f10 <arch_swap>
	z_swap(&sched_spinlock, key);
}
100062bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
100062be:	428a      	cmp	r2, r1
100062c0:	d0e4      	beq.n	1000628c <z_impl_k_yield+0x34>
100062c2:	6812      	ldr	r2, [r2, #0]
100062c4:	e7e0      	b.n	10006288 <z_impl_k_yield+0x30>
100062c6:	46c0      	nop			; (mov r8, r8)
100062c8:	20002464 	.word	0x20002464
100062cc:	2000247c 	.word	0x2000247c

100062d0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
100062d0:	0003      	movs	r3, r0
{
100062d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
100062d4:	430b      	orrs	r3, r1
{
100062d6:	0004      	movs	r4, r0
100062d8:	000d      	movs	r5, r1
	if (ticks == 0) {
100062da:	2b00      	cmp	r3, #0
100062dc:	d103      	bne.n	100062e6 <z_tick_sleep+0x16>
	z_impl_k_yield();
100062de:	f7ff ffbb 	bl	10006258 <z_impl_k_yield>
		k_yield();
		return 0;
100062e2:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
100062e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
100062e6:	1c4b      	adds	r3, r1, #1
100062e8:	db2e      	blt.n	10006348 <z_tick_sleep+0x78>
100062ea:	1c4b      	adds	r3, r1, #1
100062ec:	d101      	bne.n	100062f2 <z_tick_sleep+0x22>
100062ee:	1c83      	adds	r3, r0, #2
100062f0:	d32a      	bcc.n	10006348 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
100062f2:	f007 fdb7 	bl	1000de64 <sys_clock_tick_get_32>
100062f6:	1827      	adds	r7, r4, r0
100062f8:	f3ef 8310 	mrs	r3, PRIMASK
100062fc:	b672      	cpsid	i
	pending_current = _current;
100062fe:	4e14      	ldr	r6, [pc, #80]	; (10006350 <z_tick_sleep+0x80>)
10006300:	9301      	str	r3, [sp, #4]
10006302:	68b0      	ldr	r0, [r6, #8]
10006304:	4b13      	ldr	r3, [pc, #76]	; (10006354 <z_tick_sleep+0x84>)
10006306:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10006308:	f7ff fe64 	bl	10005fd4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
1000630c:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
1000630e:	0022      	movs	r2, r4
10006310:	002b      	movs	r3, r5
10006312:	4911      	ldr	r1, [pc, #68]	; (10006358 <z_tick_sleep+0x88>)
10006314:	3018      	adds	r0, #24
10006316:	f000 f911 	bl	1000653c <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
1000631a:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
1000631c:	68b2      	ldr	r2, [r6, #8]
1000631e:	9801      	ldr	r0, [sp, #4]
10006320:	7b51      	ldrb	r1, [r2, #13]
10006322:	430b      	orrs	r3, r1
10006324:	7353      	strb	r3, [r2, #13]
10006326:	f7fd fdf3 	bl	10003f10 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
1000632a:	f007 fd9b 	bl	1000de64 <sys_clock_tick_get_32>
1000632e:	2300      	movs	r3, #0
10006330:	003a      	movs	r2, r7
10006332:	0004      	movs	r4, r0
10006334:	001d      	movs	r5, r3
10006336:	1b12      	subs	r2, r2, r4
10006338:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
1000633a:	42ab      	cmp	r3, r5
1000633c:	dc02      	bgt.n	10006344 <z_tick_sleep+0x74>
1000633e:	d1d0      	bne.n	100062e2 <z_tick_sleep+0x12>
10006340:	42aa      	cmp	r2, r5
10006342:	d0ce      	beq.n	100062e2 <z_tick_sleep+0x12>
		return ticks;
10006344:	0010      	movs	r0, r2
10006346:	e7cd      	b.n	100062e4 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10006348:	2702      	movs	r7, #2
1000634a:	427f      	negs	r7, r7
1000634c:	1b3f      	subs	r7, r7, r4
1000634e:	e7d3      	b.n	100062f8 <z_tick_sleep+0x28>
10006350:	20002464 	.word	0x20002464
10006354:	20002484 	.word	0x20002484
10006358:	1000dd49 	.word	0x1000dd49

1000635c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
1000635c:	b510      	push	{r4, lr}
1000635e:	000b      	movs	r3, r1
10006360:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10006362:	1c42      	adds	r2, r0, #1
10006364:	d107      	bne.n	10006376 <z_impl_k_sleep+0x1a>
10006366:	3301      	adds	r3, #1
10006368:	d105      	bne.n	10006376 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
1000636a:	4b07      	ldr	r3, [pc, #28]	; (10006388 <z_impl_k_sleep+0x2c>)
1000636c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
1000636e:	f7ff ff17 	bl	100061a0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10006372:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10006374:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10006376:	0021      	movs	r1, r4
10006378:	f7ff ffaa 	bl	100062d0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
1000637c:	220a      	movs	r2, #10
1000637e:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10006380:	17c1      	asrs	r1, r0, #31
10006382:	f7f9 ffff 	bl	10000384 <__aeabi_uldivmod>
	return ret;
10006386:	e7f5      	b.n	10006374 <z_impl_k_sleep+0x18>
10006388:	20002464 	.word	0x20002464

1000638c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
1000638c:	4b01      	ldr	r3, [pc, #4]	; (10006394 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000638e:	6898      	ldr	r0, [r3, #8]
}
10006390:	4770      	bx	lr
10006392:	46c0      	nop			; (mov r8, r8)
10006394:	20002464 	.word	0x20002464

10006398 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10006398:	b570      	push	{r4, r5, r6, lr}
1000639a:	0004      	movs	r4, r0
1000639c:	f3ef 8610 	mrs	r6, PRIMASK
100063a0:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
100063a2:	7b03      	ldrb	r3, [r0, #12]
100063a4:	07db      	lsls	r3, r3, #31
100063a6:	d508      	bpl.n	100063ba <z_thread_abort+0x22>
	if (key != 0U) {
100063a8:	2e00      	cmp	r6, #0
100063aa:	d102      	bne.n	100063b2 <z_thread_abort+0x1a>
	__asm__ volatile(
100063ac:	b662      	cpsie	i
100063ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
100063b2:	2004      	movs	r0, #4
100063b4:	b662      	cpsie	i
100063b6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
100063b8:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
100063ba:	2308      	movs	r3, #8
100063bc:	7b42      	ldrb	r2, [r0, #13]
100063be:	421a      	tst	r2, r3
100063c0:	d005      	beq.n	100063ce <z_thread_abort+0x36>
	if (key != 0U) {
100063c2:	2e00      	cmp	r6, #0
100063c4:	d1f8      	bne.n	100063b8 <z_thread_abort+0x20>
	__asm__ volatile(
100063c6:	b662      	cpsie	i
100063c8:	f3bf 8f6f 	isb	sy
100063cc:	e7f4      	b.n	100063b8 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100063ce:	2120      	movs	r1, #32
100063d0:	0010      	movs	r0, r2
100063d2:	4388      	bics	r0, r1
100063d4:	0001      	movs	r1, r0
100063d6:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
100063d8:	b248      	sxtb	r0, r1
100063da:	2800      	cmp	r0, #0
100063dc:	db20      	blt.n	10006420 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100063de:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
100063e0:	68a3      	ldr	r3, [r4, #8]
100063e2:	2b00      	cmp	r3, #0
100063e4:	d002      	beq.n	100063ec <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
100063e6:	0020      	movs	r0, r4
100063e8:	f007 fc40 	bl	1000dc6c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
100063ec:	0020      	movs	r0, r4
100063ee:	3018      	adds	r0, #24
100063f0:	f007 fd25 	bl	1000de3e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100063f4:	0023      	movs	r3, r4
	return list->head == list;
100063f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
100063f8:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100063fa:	429d      	cmp	r5, r3
100063fc:	d001      	beq.n	10006402 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100063fe:	2d00      	cmp	r5, #0
10006400:	d116      	bne.n	10006430 <z_thread_abort+0x98>
		update_cache(1);
10006402:	2001      	movs	r0, #1
10006404:	f7ff fd52 	bl	10005eac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10006408:	4b10      	ldr	r3, [pc, #64]	; (1000644c <z_thread_abort+0xb4>)
1000640a:	689b      	ldr	r3, [r3, #8]
1000640c:	42a3      	cmp	r3, r4
1000640e:	d1d8      	bne.n	100063c2 <z_thread_abort+0x2a>
10006410:	f3ef 8305 	mrs	r3, IPSR
10006414:	2b00      	cmp	r3, #0
10006416:	d1d4      	bne.n	100063c2 <z_thread_abort+0x2a>
10006418:	0030      	movs	r0, r6
1000641a:	f7fd fd79 	bl	10003f10 <arch_swap>
	return ret;
1000641e:	e7d0      	b.n	100063c2 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10006420:	215f      	movs	r1, #95	; 0x5f
10006422:	400a      	ands	r2, r1
10006424:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10006426:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10006428:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000642a:	f007 fc17 	bl	1000dc5c <sys_dlist_remove>
}
1000642e:	e7d7      	b.n	100063e0 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10006430:	0028      	movs	r0, r5
10006432:	f007 fc1b 	bl	1000dc6c <unpend_thread_no_timeout>
10006436:	0028      	movs	r0, r5
10006438:	3018      	adds	r0, #24
1000643a:	f007 fd00 	bl	1000de3e <z_abort_timeout>
1000643e:	2300      	movs	r3, #0
		ready_thread(thread);
10006440:	0028      	movs	r0, r5
10006442:	672b      	str	r3, [r5, #112]	; 0x70
10006444:	f7ff fd90 	bl	10005f68 <ready_thread>
10006448:	e7d4      	b.n	100063f4 <z_thread_abort+0x5c>
1000644a:	46c0      	nop			; (mov r8, r8)
1000644c:	20002464 	.word	0x20002464

10006450 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10006450:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10006452:	9d06      	ldr	r5, [sp, #24]
10006454:	9e07      	ldr	r6, [sp, #28]
{
10006456:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10006458:	9500      	str	r5, [sp, #0]
1000645a:	9601      	str	r6, [sp, #4]
1000645c:	f7ff fe12 	bl	10006084 <z_pend_curr>

	if (data != NULL) {
10006460:	2c00      	cmp	r4, #0
10006462:	d003      	beq.n	1000646c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
10006464:	4b02      	ldr	r3, [pc, #8]	; (10006470 <z_sched_wait+0x20>)
10006466:	689b      	ldr	r3, [r3, #8]
10006468:	695b      	ldr	r3, [r3, #20]
1000646a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
1000646c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000646e:	46c0      	nop			; (mov r8, r8)
10006470:	20002464 	.word	0x20002464

10006474 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10006474:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10006476:	4806      	ldr	r0, [pc, #24]	; (10006490 <z_data_copy+0x1c>)
10006478:	4a06      	ldr	r2, [pc, #24]	; (10006494 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000647a:	4907      	ldr	r1, [pc, #28]	; (10006498 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
1000647c:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000647e:	f007 fbb0 	bl	1000dbe2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10006482:	4a06      	ldr	r2, [pc, #24]	; (1000649c <z_data_copy+0x28>)
10006484:	4906      	ldr	r1, [pc, #24]	; (100064a0 <z_data_copy+0x2c>)
10006486:	4807      	ldr	r0, [pc, #28]	; (100064a4 <z_data_copy+0x30>)
10006488:	f007 fbab 	bl	1000dbe2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
1000648c:	bd10      	pop	{r4, pc}
1000648e:	46c0      	nop			; (mov r8, r8)
10006490:	20000000 	.word	0x20000000
10006494:	200021ac 	.word	0x200021ac
10006498:	10012d28 	.word	0x10012d28
1000649c:	00000000 	.word	0x00000000
100064a0:	10012d28 	.word	0x10012d28
100064a4:	20000000 	.word	0x20000000

100064a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100064a8:	2000      	movs	r0, #0
{
100064aa:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100064ac:	4b03      	ldr	r3, [pc, #12]	; (100064bc <elapsed+0x14>)
100064ae:	681b      	ldr	r3, [r3, #0]
100064b0:	4283      	cmp	r3, r0
100064b2:	d101      	bne.n	100064b8 <elapsed+0x10>
100064b4:	f7fe fed2 	bl	1000525c <sys_clock_elapsed>
}
100064b8:	bd10      	pop	{r4, pc}
100064ba:	46c0      	nop			; (mov r8, r8)
100064bc:	20002490 	.word	0x20002490

100064c0 <next_timeout>:

static int32_t next_timeout(void)
{
100064c0:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
100064c2:	4b0e      	ldr	r3, [pc, #56]	; (100064fc <next_timeout+0x3c>)
100064c4:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100064c6:	429e      	cmp	r6, r3
100064c8:	d103      	bne.n	100064d2 <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
100064ca:	f7ff ffed 	bl	100064a8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
100064ce:	480c      	ldr	r0, [pc, #48]	; (10006500 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
100064d0:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
100064d2:	f7ff ffe9 	bl	100064a8 <elapsed>
	if ((to == NULL) ||
100064d6:	2e00      	cmp	r6, #0
100064d8:	d0f9      	beq.n	100064ce <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
100064da:	6932      	ldr	r2, [r6, #16]
100064dc:	6973      	ldr	r3, [r6, #20]
100064de:	0004      	movs	r4, r0
100064e0:	17c5      	asrs	r5, r0, #31
100064e2:	1b12      	subs	r2, r2, r4
100064e4:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
100064e6:	2b00      	cmp	r3, #0
100064e8:	dcf1      	bgt.n	100064ce <next_timeout+0xe>
100064ea:	d103      	bne.n	100064f4 <next_timeout+0x34>
100064ec:	2180      	movs	r1, #128	; 0x80
100064ee:	0609      	lsls	r1, r1, #24
100064f0:	428a      	cmp	r2, r1
100064f2:	d2ec      	bcs.n	100064ce <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
100064f4:	43d8      	mvns	r0, r3
100064f6:	17c0      	asrs	r0, r0, #31
100064f8:	4010      	ands	r0, r2
	return ret;
100064fa:	e7e9      	b.n	100064d0 <next_timeout+0x10>
100064fc:	200007dc 	.word	0x200007dc
10006500:	7fffffff 	.word	0x7fffffff

10006504 <remove_timeout>:
{
10006504:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10006506:	2800      	cmp	r0, #0
10006508:	d00e      	beq.n	10006528 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
1000650a:	4b0b      	ldr	r3, [pc, #44]	; (10006538 <remove_timeout+0x34>)
1000650c:	685b      	ldr	r3, [r3, #4]
1000650e:	4298      	cmp	r0, r3
10006510:	d00a      	beq.n	10006528 <remove_timeout+0x24>
10006512:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10006514:	2900      	cmp	r1, #0
10006516:	d007      	beq.n	10006528 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10006518:	690a      	ldr	r2, [r1, #16]
1000651a:	694b      	ldr	r3, [r1, #20]
1000651c:	6904      	ldr	r4, [r0, #16]
1000651e:	6945      	ldr	r5, [r0, #20]
10006520:	1912      	adds	r2, r2, r4
10006522:	416b      	adcs	r3, r5
10006524:	610a      	str	r2, [r1, #16]
10006526:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10006528:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000652a:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
1000652c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000652e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10006530:	2300      	movs	r3, #0
10006532:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10006534:	6043      	str	r3, [r0, #4]
}
10006536:	bd30      	pop	{r4, r5, pc}
10006538:	200007dc 	.word	0x200007dc

1000653c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
1000653c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000653e:	0004      	movs	r4, r0
10006540:	0016      	movs	r6, r2
10006542:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10006544:	1c53      	adds	r3, r2, #1
10006546:	d101      	bne.n	1000654c <z_add_timeout+0x10>
10006548:	1c7b      	adds	r3, r7, #1
1000654a:	d057      	beq.n	100065fc <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
1000654c:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
1000654e:	f3ef 8310 	mrs	r3, PRIMASK
10006552:	b672      	cpsid	i
10006554:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10006556:	2f00      	cmp	r7, #0
10006558:	da23      	bge.n	100065a2 <z_add_timeout+0x66>
1000655a:	1c7b      	adds	r3, r7, #1
1000655c:	d101      	bne.n	10006562 <z_add_timeout+0x26>
1000655e:	1cb3      	adds	r3, r6, #2
10006560:	d81f      	bhi.n	100065a2 <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10006562:	4b2b      	ldr	r3, [pc, #172]	; (10006610 <z_add_timeout+0xd4>)
10006564:	6818      	ldr	r0, [r3, #0]
10006566:	6859      	ldr	r1, [r3, #4]
10006568:	2202      	movs	r2, #2
1000656a:	4252      	negs	r2, r2
1000656c:	17d3      	asrs	r3, r2, #31
1000656e:	1a12      	subs	r2, r2, r0
10006570:	418b      	sbcs	r3, r1
10006572:	1b92      	subs	r2, r2, r6
10006574:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10006576:	2b00      	cmp	r3, #0
10006578:	dc04      	bgt.n	10006584 <z_add_timeout+0x48>
1000657a:	d101      	bne.n	10006580 <z_add_timeout+0x44>
1000657c:	2a00      	cmp	r2, #0
1000657e:	d101      	bne.n	10006584 <z_add_timeout+0x48>
10006580:	2201      	movs	r2, #1
10006582:	2300      	movs	r3, #0
	return list->head == list;
10006584:	4f23      	ldr	r7, [pc, #140]	; (10006614 <z_add_timeout+0xd8>)
10006586:	6122      	str	r2, [r4, #16]
10006588:	6163      	str	r3, [r4, #20]
1000658a:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000658c:	42bd      	cmp	r5, r7
1000658e:	d100      	bne.n	10006592 <z_add_timeout+0x56>
10006590:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
10006592:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10006594:	2d00      	cmp	r5, #0
10006596:	d10f      	bne.n	100065b8 <z_add_timeout+0x7c>
	node->next = list;
10006598:	6027      	str	r7, [r4, #0]
	node->prev = tail;
1000659a:	6066      	str	r6, [r4, #4]
	tail->next = node;
1000659c:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000659e:	607c      	str	r4, [r7, #4]
}
100065a0:	e01c      	b.n	100065dc <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
100065a2:	f7ff ff81 	bl	100064a8 <elapsed>
100065a6:	2201      	movs	r2, #1
100065a8:	2300      	movs	r3, #0
100065aa:	1992      	adds	r2, r2, r6
100065ac:	417b      	adcs	r3, r7
100065ae:	0006      	movs	r6, r0
100065b0:	17c7      	asrs	r7, r0, #31
100065b2:	1992      	adds	r2, r2, r6
100065b4:	417b      	adcs	r3, r7
100065b6:	e7e5      	b.n	10006584 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
100065b8:	6928      	ldr	r0, [r5, #16]
100065ba:	6969      	ldr	r1, [r5, #20]
100065bc:	6922      	ldr	r2, [r4, #16]
100065be:	6963      	ldr	r3, [r4, #20]
100065c0:	4299      	cmp	r1, r3
100065c2:	dc02      	bgt.n	100065ca <z_add_timeout+0x8e>
100065c4:	d11b      	bne.n	100065fe <z_add_timeout+0xc2>
100065c6:	4290      	cmp	r0, r2
100065c8:	d919      	bls.n	100065fe <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
100065ca:	1a80      	subs	r0, r0, r2
100065cc:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
100065ce:	686b      	ldr	r3, [r5, #4]
100065d0:	6128      	str	r0, [r5, #16]
100065d2:	6169      	str	r1, [r5, #20]
	node->prev = prev;
100065d4:	6063      	str	r3, [r4, #4]
	node->next = successor;
100065d6:	6025      	str	r5, [r4, #0]
	prev->next = node;
100065d8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
100065da:	606c      	str	r4, [r5, #4]
	return list->head == list;
100065dc:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100065de:	42bb      	cmp	r3, r7
100065e0:	d006      	beq.n	100065f0 <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
100065e2:	429c      	cmp	r4, r3
100065e4:	d104      	bne.n	100065f0 <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
100065e6:	f7ff ff6b 	bl	100064c0 <next_timeout>
100065ea:	2100      	movs	r1, #0
100065ec:	f7fe fdbe 	bl	1000516c <sys_clock_set_timeout>
	if (key != 0U) {
100065f0:	9b01      	ldr	r3, [sp, #4]
100065f2:	2b00      	cmp	r3, #0
100065f4:	d102      	bne.n	100065fc <z_add_timeout+0xc0>
	__asm__ volatile(
100065f6:	b662      	cpsie	i
100065f8:	f3bf 8f6f 	isb	sy
		}
	}
}
100065fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
100065fe:	1a12      	subs	r2, r2, r0
10006600:	418b      	sbcs	r3, r1
10006602:	6122      	str	r2, [r4, #16]
10006604:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10006606:	42b5      	cmp	r5, r6
10006608:	d0c6      	beq.n	10006598 <z_add_timeout+0x5c>
1000660a:	682d      	ldr	r5, [r5, #0]
1000660c:	e7c2      	b.n	10006594 <z_add_timeout+0x58>
1000660e:	46c0      	nop			; (mov r8, r8)
10006610:	200022c0 	.word	0x200022c0
10006614:	200007dc 	.word	0x200007dc

10006618 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10006618:	b5f0      	push	{r4, r5, r6, r7, lr}
1000661a:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
1000661c:	f3ef 8310 	mrs	r3, PRIMASK
10006620:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10006622:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10006624:	4b30      	ldr	r3, [pc, #192]	; (100066e8 <sys_clock_announce+0xd0>)
10006626:	6018      	str	r0, [r3, #0]
	return list->head == list;
10006628:	4b30      	ldr	r3, [pc, #192]	; (100066ec <sys_clock_announce+0xd4>)
1000662a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000662c:	429c      	cmp	r4, r3
1000662e:	d100      	bne.n	10006632 <sys_clock_announce+0x1a>
10006630:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
10006632:	4b2f      	ldr	r3, [pc, #188]	; (100066f0 <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
10006634:	4d2c      	ldr	r5, [pc, #176]	; (100066e8 <sys_clock_announce+0xd0>)
		curr_tick += dt;
10006636:	9303      	str	r3, [sp, #12]
10006638:	6818      	ldr	r0, [r3, #0]
1000663a:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
1000663c:	682b      	ldr	r3, [r5, #0]
1000663e:	469c      	mov	ip, r3
10006640:	2c00      	cmp	r4, #0
10006642:	d039      	beq.n	100066b8 <sys_clock_announce+0xa0>
10006644:	6962      	ldr	r2, [r4, #20]
10006646:	6926      	ldr	r6, [r4, #16]
10006648:	17db      	asrs	r3, r3, #31
1000664a:	429a      	cmp	r2, r3
1000664c:	dc02      	bgt.n	10006654 <sys_clock_announce+0x3c>
1000664e:	d10a      	bne.n	10006666 <sys_clock_announce+0x4e>
10006650:	4566      	cmp	r6, ip
10006652:	d908      	bls.n	10006666 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10006654:	001f      	movs	r7, r3
10006656:	6922      	ldr	r2, [r4, #16]
10006658:	6963      	ldr	r3, [r4, #20]
1000665a:	4666      	mov	r6, ip
1000665c:	1b92      	subs	r2, r2, r6
1000665e:	41bb      	sbcs	r3, r7
10006660:	6122      	str	r2, [r4, #16]
10006662:	6163      	str	r3, [r4, #20]
10006664:	e028      	b.n	100066b8 <sys_clock_announce+0xa0>
		curr_tick += dt;
10006666:	17f3      	asrs	r3, r6, #31
10006668:	9600      	str	r6, [sp, #0]
1000666a:	9301      	str	r3, [sp, #4]
1000666c:	9a00      	ldr	r2, [sp, #0]
1000666e:	9b01      	ldr	r3, [sp, #4]
10006670:	1880      	adds	r0, r0, r2
10006672:	4159      	adcs	r1, r3
		t->dticks = 0;
10006674:	2300      	movs	r3, #0
10006676:	2200      	movs	r2, #0
		curr_tick += dt;
10006678:	4f1d      	ldr	r7, [pc, #116]	; (100066f0 <sys_clock_announce+0xd8>)
		t->dticks = 0;
1000667a:	6122      	str	r2, [r4, #16]
1000667c:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
1000667e:	6038      	str	r0, [r7, #0]
10006680:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
10006682:	0020      	movs	r0, r4
10006684:	f7ff ff3e 	bl	10006504 <remove_timeout>
	if (key != 0U) {
10006688:	9b02      	ldr	r3, [sp, #8]
1000668a:	2b00      	cmp	r3, #0
1000668c:	d102      	bne.n	10006694 <sys_clock_announce+0x7c>
	__asm__ volatile(
1000668e:	b662      	cpsie	i
10006690:	f3bf 8f6f 	isb	sy
		t->fn(t);
10006694:	0020      	movs	r0, r4
10006696:	68a3      	ldr	r3, [r4, #8]
10006698:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000669a:	f3ef 8310 	mrs	r3, PRIMASK
1000669e:	b672      	cpsid	i
100066a0:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
100066a2:	4b11      	ldr	r3, [pc, #68]	; (100066e8 <sys_clock_announce+0xd0>)
100066a4:	681a      	ldr	r2, [r3, #0]
100066a6:	1b92      	subs	r2, r2, r6
100066a8:	601a      	str	r2, [r3, #0]
	return list->head == list;
100066aa:	4b10      	ldr	r3, [pc, #64]	; (100066ec <sys_clock_announce+0xd4>)
100066ac:	4694      	mov	ip, r2
100066ae:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100066b0:	429c      	cmp	r4, r3
100066b2:	d1be      	bne.n	10006632 <sys_clock_announce+0x1a>
		curr_tick += dt;
100066b4:	6838      	ldr	r0, [r7, #0]
100066b6:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
100066b8:	4662      	mov	r2, ip
100066ba:	17d3      	asrs	r3, r2, #31
100066bc:	1812      	adds	r2, r2, r0
100066be:	414b      	adcs	r3, r1
	announce_remaining = 0;
100066c0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
100066c2:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
100066c4:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
100066c6:	600a      	str	r2, [r1, #0]
100066c8:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
100066ca:	f7ff fef9 	bl	100064c0 <next_timeout>
100066ce:	0021      	movs	r1, r4
100066d0:	f7fe fd4c 	bl	1000516c <sys_clock_set_timeout>
	if (key != 0U) {
100066d4:	9b02      	ldr	r3, [sp, #8]
100066d6:	42a3      	cmp	r3, r4
100066d8:	d102      	bne.n	100066e0 <sys_clock_announce+0xc8>
	__asm__ volatile(
100066da:	b662      	cpsie	i
100066dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
100066e0:	f7ff fca4 	bl	1000602c <z_time_slice>
#endif
}
100066e4:	b005      	add	sp, #20
100066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100066e8:	20002490 	.word	0x20002490
100066ec:	200007dc 	.word	0x200007dc
100066f0:	200022c0 	.word	0x200022c0

100066f4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100066f4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100066f6:	f3ef 8410 	mrs	r4, PRIMASK
100066fa:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
100066fc:	f7ff fed4 	bl	100064a8 <elapsed>
10006700:	0002      	movs	r2, r0
10006702:	4906      	ldr	r1, [pc, #24]	; (1000671c <sys_clock_tick_get+0x28>)
10006704:	17c3      	asrs	r3, r0, #31
10006706:	6808      	ldr	r0, [r1, #0]
10006708:	6849      	ldr	r1, [r1, #4]
1000670a:	1880      	adds	r0, r0, r2
1000670c:	4159      	adcs	r1, r3
	if (key != 0U) {
1000670e:	2c00      	cmp	r4, #0
10006710:	d102      	bne.n	10006718 <sys_clock_tick_get+0x24>
	__asm__ volatile(
10006712:	b662      	cpsie	i
10006714:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10006718:	bd10      	pop	{r4, pc}
1000671a:	46c0      	nop			; (mov r8, r8)
1000671c:	200022c0 	.word	0x200022c0

10006720 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
10006720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10006722:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10006724:	f3ef 8510 	mrs	r5, PRIMASK
10006728:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
1000672a:	6803      	ldr	r3, [r0, #0]
1000672c:	9501      	str	r5, [sp, #4]
1000672e:	2b00      	cmp	r3, #0
10006730:	d005      	beq.n	1000673e <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
10006732:	2d00      	cmp	r5, #0
10006734:	d152      	bne.n	100067dc <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
10006736:	b662      	cpsie	i
10006738:	f3bf 8f6f 	isb	sy
1000673c:	e04e      	b.n	100067dc <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
1000673e:	6a82      	ldr	r2, [r0, #40]	; 0x28
10006740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
10006742:	2100      	movs	r1, #0
10006744:	2001      	movs	r0, #1
10006746:	1880      	adds	r0, r0, r2
10006748:	4159      	adcs	r1, r3
1000674a:	2900      	cmp	r1, #0
1000674c:	d101      	bne.n	10006752 <z_timer_expiration_handler+0x32>
1000674e:	2801      	cmp	r0, #1
10006750:	d929      	bls.n	100067a6 <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
10006752:	2b00      	cmp	r3, #0
10006754:	dc04      	bgt.n	10006760 <z_timer_expiration_handler+0x40>
10006756:	d101      	bne.n	1000675c <z_timer_expiration_handler+0x3c>
10006758:	2a00      	cmp	r2, #0
1000675a:	d101      	bne.n	10006760 <z_timer_expiration_handler+0x40>
1000675c:	2201      	movs	r2, #1
1000675e:	2300      	movs	r3, #0
10006760:	2601      	movs	r6, #1
10006762:	4276      	negs	r6, r6
10006764:	17f7      	asrs	r7, r6, #31
10006766:	18b6      	adds	r6, r6, r2
10006768:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
1000676a:	f007 fb7f 	bl	1000de6c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000676e:	2201      	movs	r2, #1
10006770:	2300      	movs	r3, #0
10006772:	1880      	adds	r0, r0, r2
10006774:	4159      	adcs	r1, r3
10006776:	1980      	adds	r0, r0, r6
10006778:	4179      	adcs	r1, r7
1000677a:	2900      	cmp	r1, #0
1000677c:	dc02      	bgt.n	10006784 <z_timer_expiration_handler+0x64>
1000677e:	d12e      	bne.n	100067de <z_timer_expiration_handler+0xbe>
10006780:	2800      	cmp	r0, #0
10006782:	d02c      	beq.n	100067de <z_timer_expiration_handler+0xbe>
10006784:	f007 fb72 	bl	1000de6c <z_impl_k_uptime_ticks>
10006788:	2201      	movs	r2, #1
1000678a:	2300      	movs	r3, #0
1000678c:	1880      	adds	r0, r0, r2
1000678e:	4159      	adcs	r1, r3
10006790:	2202      	movs	r2, #2
10006792:	4252      	negs	r2, r2
10006794:	17d3      	asrs	r3, r2, #31
10006796:	1980      	adds	r0, r0, r6
10006798:	4179      	adcs	r1, r7
1000679a:	1a12      	subs	r2, r2, r0
1000679c:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000679e:	0020      	movs	r0, r4
100067a0:	4918      	ldr	r1, [pc, #96]	; (10006804 <z_timer_expiration_handler+0xe4>)
100067a2:	f7ff fecb 	bl	1000653c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
100067a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
100067a8:	3301      	adds	r3, #1
100067aa:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100067ac:	6a23      	ldr	r3, [r4, #32]
100067ae:	2b00      	cmp	r3, #0
100067b0:	d00b      	beq.n	100067ca <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
100067b2:	2d00      	cmp	r5, #0
100067b4:	d102      	bne.n	100067bc <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
100067b6:	b662      	cpsie	i
100067b8:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
100067bc:	0020      	movs	r0, r4
100067be:	6a23      	ldr	r3, [r4, #32]
100067c0:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100067c2:	f3ef 8310 	mrs	r3, PRIMASK
100067c6:	b672      	cpsid	i
100067c8:	9301      	str	r3, [sp, #4]
	return list->head == list;
100067ca:	69a5      	ldr	r5, [r4, #24]
100067cc:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
100067ce:	42a5      	cmp	r5, r4
100067d0:	d001      	beq.n	100067d6 <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
100067d2:	2d00      	cmp	r5, #0
100067d4:	d107      	bne.n	100067e6 <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
100067d6:	9b01      	ldr	r3, [sp, #4]
100067d8:	2b00      	cmp	r3, #0
100067da:	d0ac      	beq.n	10006736 <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
100067dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
100067de:	2202      	movs	r2, #2
100067e0:	4252      	negs	r2, r2
100067e2:	17d3      	asrs	r3, r2, #31
100067e4:	e7db      	b.n	1000679e <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
100067e6:	0028      	movs	r0, r5
100067e8:	f007 fa80 	bl	1000dcec <z_unpend_thread_no_timeout>
100067ec:	2300      	movs	r3, #0
100067ee:	672b      	str	r3, [r5, #112]	; 0x70
100067f0:	9b01      	ldr	r3, [sp, #4]
100067f2:	2b00      	cmp	r3, #0
100067f4:	d102      	bne.n	100067fc <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
100067f6:	b662      	cpsie	i
100067f8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
100067fc:	0028      	movs	r0, r5
100067fe:	f007 fa69 	bl	1000dcd4 <z_ready_thread>
10006802:	e7eb      	b.n	100067dc <z_timer_expiration_handler+0xbc>
10006804:	10006721 	.word	0x10006721

10006808 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10006808:	b570      	push	{r4, r5, r6, lr}
1000680a:	0006      	movs	r6, r0
1000680c:	0014      	movs	r4, r2
1000680e:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
10006810:	1c51      	adds	r1, r2, #1
10006812:	d101      	bne.n	10006818 <z_impl_k_timer_start+0x10>
10006814:	1c59      	adds	r1, r3, #1
10006816:	d022      	beq.n	1000685e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
10006818:	2b00      	cmp	r3, #0
1000681a:	da03      	bge.n	10006824 <z_impl_k_timer_start+0x1c>
1000681c:	1c59      	adds	r1, r3, #1
1000681e:	d10f      	bne.n	10006840 <z_impl_k_timer_start+0x38>
10006820:	1c91      	adds	r1, r2, #2
10006822:	d90d      	bls.n	10006840 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
10006824:	0014      	movs	r4, r2
10006826:	1e1d      	subs	r5, r3, #0
10006828:	dc05      	bgt.n	10006836 <z_impl_k_timer_start+0x2e>
1000682a:	2b00      	cmp	r3, #0
1000682c:	d101      	bne.n	10006832 <z_impl_k_timer_start+0x2a>
1000682e:	2a00      	cmp	r2, #0
10006830:	d101      	bne.n	10006836 <z_impl_k_timer_start+0x2e>
10006832:	2401      	movs	r4, #1
10006834:	2500      	movs	r5, #0
10006836:	2201      	movs	r2, #1
10006838:	4252      	negs	r2, r2
1000683a:	17d3      	asrs	r3, r2, #31
1000683c:	18a4      	adds	r4, r4, r2
1000683e:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
10006840:	0030      	movs	r0, r6
10006842:	f007 fafc 	bl	1000de3e <z_abort_timeout>
	timer->period = period;
10006846:	9a04      	ldr	r2, [sp, #16]
10006848:	9b05      	ldr	r3, [sp, #20]
1000684a:	62b2      	str	r2, [r6, #40]	; 0x28
1000684c:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
1000684e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10006850:	0022      	movs	r2, r4
	timer->status = 0U;
10006852:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10006854:	0030      	movs	r0, r6
10006856:	002b      	movs	r3, r5
10006858:	4901      	ldr	r1, [pc, #4]	; (10006860 <z_impl_k_timer_start+0x58>)
1000685a:	f7ff fe6f 	bl	1000653c <z_add_timeout>
		     duration);
}
1000685e:	bd70      	pop	{r4, r5, r6, pc}
10006860:	10006721 	.word	0x10006721

10006864 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
10006864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct z_poller *poller = event->poller;
10006866:	6884      	ldr	r4, [r0, #8]
{
10006868:	0005      	movs	r5, r0
1000686a:	9101      	str	r1, [sp, #4]
	int retcode = 0;

	if (poller != NULL) {
1000686c:	2c00      	cmp	r4, #0
1000686e:	d00b      	beq.n	10006888 <signal_poll_event+0x24>
		if (poller->mode == MODE_POLL) {
10006870:	7863      	ldrb	r3, [r4, #1]
10006872:	2b01      	cmp	r3, #1
10006874:	d136      	bne.n	100068e4 <signal_poll_event+0x80>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
10006876:	0026      	movs	r6, r4
10006878:	3e60      	subs	r6, #96	; 0x60
	if (!z_is_thread_pending(thread)) {
1000687a:	7b72      	ldrb	r2, [r6, #13]
1000687c:	3301      	adds	r3, #1
1000687e:	0011      	movs	r1, r2
10006880:	4019      	ands	r1, r3
10006882:	421a      	tst	r2, r3
10006884:	d110      	bne.n	100068a8 <signal_poll_event+0x44>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
10006886:	7021      	strb	r1, [r4, #0]
	event->state |= state;
10006888:	68ea      	ldr	r2, [r5, #12]
1000688a:	9901      	ldr	r1, [sp, #4]
1000688c:	02d3      	lsls	r3, r2, #11
1000688e:	0e5b      	lsrs	r3, r3, #25
10006890:	4319      	orrs	r1, r3
10006892:	000b      	movs	r3, r1
10006894:	217f      	movs	r1, #127	; 0x7f
	event->poller = NULL;
10006896:	2000      	movs	r0, #0
	event->state |= state;
10006898:	400b      	ands	r3, r1
1000689a:	4922      	ldr	r1, [pc, #136]	; (10006924 <signal_poll_event+0xc0>)
1000689c:	039b      	lsls	r3, r3, #14
1000689e:	400a      	ands	r2, r1
100068a0:	431a      	orrs	r2, r3
	event->poller = NULL;
100068a2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
100068a4:	60ea      	str	r2, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
100068a6:	e03b      	b.n	10006920 <signal_poll_event+0xbc>
	if (z_is_thread_timeout_expired(thread)) {
100068a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
100068aa:	3302      	adds	r3, #2
100068ac:	d102      	bne.n	100068b4 <signal_poll_event+0x50>
100068ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
100068b0:	3301      	adds	r3, #1
100068b2:	d031      	beq.n	10006918 <signal_poll_event+0xb4>
	z_unpend_thread(thread);
100068b4:	0030      	movs	r0, r6
100068b6:	f007 fa7b 	bl	1000ddb0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
100068ba:	9b01      	ldr	r3, [sp, #4]
100068bc:	2b08      	cmp	r3, #8
100068be:	d00e      	beq.n	100068de <signal_poll_event+0x7a>
100068c0:	2300      	movs	r3, #0
100068c2:	6733      	str	r3, [r6, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100068c4:	7b73      	ldrb	r3, [r6, #13]
100068c6:	06db      	lsls	r3, r3, #27
100068c8:	d10e      	bne.n	100068e8 <signal_poll_event+0x84>
	return node->next != NULL;
100068ca:	0023      	movs	r3, r4
100068cc:	3b48      	subs	r3, #72	; 0x48
100068ce:	681f      	ldr	r7, [r3, #0]
100068d0:	2f00      	cmp	r7, #0
100068d2:	d109      	bne.n	100068e8 <signal_poll_event+0x84>
	z_ready_thread(thread);
100068d4:	0030      	movs	r0, r6
100068d6:	f007 f9fd 	bl	1000dcd4 <z_ready_thread>
		poller->is_polling = false;
100068da:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
100068dc:	e7d4      	b.n	10006888 <signal_poll_event+0x24>
	arch_thread_return_value_set(thread,
100068de:	2304      	movs	r3, #4
100068e0:	425b      	negs	r3, r3
100068e2:	e7ee      	b.n	100068c2 <signal_poll_event+0x5e>
		} else if (poller->mode == MODE_TRIGGERED) {
100068e4:	2b02      	cmp	r3, #2
100068e6:	d002      	beq.n	100068ee <signal_poll_event+0x8a>
		poller->is_polling = false;
100068e8:	2300      	movs	r3, #0
100068ea:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
100068ec:	e7cc      	b.n	10006888 <signal_poll_event+0x24>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
100068ee:	7823      	ldrb	r3, [r4, #0]
100068f0:	2b00      	cmp	r3, #0
100068f2:	d0c9      	beq.n	10006888 <signal_poll_event+0x24>
100068f4:	0027      	movs	r7, r4
100068f6:	3f14      	subs	r7, #20
100068f8:	693e      	ldr	r6, [r7, #16]
100068fa:	2e00      	cmp	r6, #0
100068fc:	d00a      	beq.n	10006914 <signal_poll_event+0xb0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
100068fe:	0020      	movs	r0, r4
10006900:	3014      	adds	r0, #20
10006902:	f007 fa9c 	bl	1000de3e <z_abort_timeout>
		twork->poll_result = 0;
10006906:	2300      	movs	r3, #0
		z_work_submit_to_queue(work_q, &twork->work);
10006908:	0039      	movs	r1, r7
1000690a:	0030      	movs	r0, r6
		twork->poll_result = 0;
1000690c:	643b      	str	r3, [r7, #64]	; 0x40
		z_work_submit_to_queue(work_q, &twork->work);
1000690e:	f007 fb1c 	bl	1000df4a <z_work_submit_to_queue>
10006912:	e7e9      	b.n	100068e8 <signal_poll_event+0x84>
		poller->is_polling = false;
10006914:	7026      	strb	r6, [r4, #0]
		if (retcode < 0) {
10006916:	e7b7      	b.n	10006888 <signal_poll_event+0x24>
		poller->is_polling = false;
10006918:	2300      	movs	r3, #0
		return -EAGAIN;
1000691a:	200b      	movs	r0, #11
		poller->is_polling = false;
1000691c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
1000691e:	4240      	negs	r0, r0
}
10006920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10006922:	46c0      	nop			; (mov r8, r8)
10006924:	ffe03fff 	.word	0xffe03fff

10006928 <z_impl_k_poll_signal_raise>:
{
10006928:	0003      	movs	r3, r0
1000692a:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000692c:	f3ef 8510 	mrs	r5, PRIMASK
10006930:	b672      	cpsid	i
	sig->result = result;
10006932:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
10006934:	2101      	movs	r1, #1
10006936:	6081      	str	r1, [r0, #8]
	return list->head == list;
10006938:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
1000693a:	4283      	cmp	r3, r0
1000693c:	d103      	bne.n	10006946 <z_impl_k_poll_signal_raise+0x1e>
	if (key != 0U) {
1000693e:	2d00      	cmp	r5, #0
10006940:	d011      	beq.n	10006966 <z_impl_k_poll_signal_raise+0x3e>
		return 0;
10006942:	2400      	movs	r4, #0
10006944:	e00d      	b.n	10006962 <z_impl_k_poll_signal_raise+0x3a>
	sys_dnode_t *const next = node->next;
10006946:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10006948:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
1000694a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000694c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000694e:	2300      	movs	r3, #0
10006950:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10006952:	6043      	str	r3, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
10006954:	f7ff ff86 	bl	10006864 <signal_poll_event>
	z_reschedule(&lock, key);
10006958:	0029      	movs	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
1000695a:	0004      	movs	r4, r0
	z_reschedule(&lock, key);
1000695c:	4804      	ldr	r0, [pc, #16]	; (10006970 <z_impl_k_poll_signal_raise+0x48>)
1000695e:	f7ff fbef 	bl	10006140 <z_reschedule>
}
10006962:	0020      	movs	r0, r4
10006964:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
10006966:	b662      	cpsie	i
10006968:	f3bf 8f6f 	isb	sy
1000696c:	e7e9      	b.n	10006942 <z_impl_k_poll_signal_raise+0x1a>
1000696e:	46c0      	nop			; (mov r8, r8)
10006970:	200024f9 	.word	0x200024f9

10006974 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
10006974:	4b01      	ldr	r3, [pc, #4]	; (1000697c <k_thread_system_pool_assign+0x8>)
10006976:	6683      	str	r3, [r0, #104]	; 0x68
}
10006978:	4770      	bx	lr
1000697a:	46c0      	nop			; (mov r8, r8)
1000697c:	20002170 	.word	0x20002170

10006980 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10006980:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10006982:	4802      	ldr	r0, [pc, #8]	; (1000698c <boot_banner+0xc>)
10006984:	f006 fa6c 	bl	1000ce60 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10006988:	bd10      	pop	{r4, pc}
1000698a:	46c0      	nop			; (mov r8, r8)
1000698c:	10012cdb 	.word	0x10012cdb

10006990 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
10006990:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
10006992:	4c06      	ldr	r4, [pc, #24]	; (100069ac <statics_init+0x1c>)
10006994:	4b06      	ldr	r3, [pc, #24]	; (100069b0 <statics_init+0x20>)
10006996:	429c      	cmp	r4, r3
10006998:	d301      	bcc.n	1000699e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
1000699a:	2000      	movs	r0, #0
1000699c:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
1000699e:	0020      	movs	r0, r4
100069a0:	68a2      	ldr	r2, [r4, #8]
100069a2:	6861      	ldr	r1, [r4, #4]
100069a4:	f007 fab4 	bl	1000df10 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
100069a8:	3414      	adds	r4, #20
100069aa:	e7f3      	b.n	10006994 <statics_init+0x4>
100069ac:	20002170 	.word	0x20002170
100069b0:	20002184 	.word	0x20002184

100069b4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
100069b4:	b530      	push	{r4, r5, lr}
	struct k_work_queue_config cfg = {
100069b6:	4b09      	ldr	r3, [pc, #36]	; (100069dc <k_sys_work_q_init+0x28>)
{
100069b8:	b085      	sub	sp, #20
	struct k_work_queue_config cfg = {
100069ba:	2400      	movs	r4, #0
100069bc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
100069be:	2280      	movs	r2, #128	; 0x80
100069c0:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
100069c2:	ad02      	add	r5, sp, #8
100069c4:	712c      	strb	r4, [r5, #4]
	k_work_queue_start(&k_sys_work_q,
100069c6:	4906      	ldr	r1, [pc, #24]	; (100069e0 <k_sys_work_q_init+0x2c>)
100069c8:	4806      	ldr	r0, [pc, #24]	; (100069e4 <k_sys_work_q_init+0x30>)
100069ca:	9500      	str	r5, [sp, #0]
100069cc:	425b      	negs	r3, r3
100069ce:	00d2      	lsls	r2, r2, #3
100069d0:	f000 f904 	bl	10006bdc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
100069d4:	0020      	movs	r0, r4
100069d6:	b005      	add	sp, #20
100069d8:	bd30      	pop	{r4, r5, pc}
100069da:	46c0      	nop			; (mov r8, r8)
100069dc:	10012d1d 	.word	0x10012d1d
100069e0:	20007200 	.word	0x20007200
100069e4:	200022c8 	.word	0x200022c8

100069e8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
100069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100069ea:	0005      	movs	r5, r0
100069ec:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
100069ee:	f3ef 8710 	mrs	r7, PRIMASK
100069f2:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100069f4:	002e      	movs	r6, r5
100069f6:	6fac      	ldr	r4, [r5, #120]	; 0x78
100069f8:	3690      	adds	r6, #144	; 0x90
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
100069fa:	2c00      	cmp	r4, #0
100069fc:	d113      	bne.n	10006a26 <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
100069fe:	2102      	movs	r1, #2
10006a00:	0030      	movs	r0, r6
10006a02:	f007 fa8d 	bl	1000df20 <flag_test_and_clear>
10006a06:	2800      	cmp	r0, #0
10006a08:	d13c      	bne.n	10006a84 <work_queue_main+0x9c>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
10006a0a:	2300      	movs	r3, #0
10006a0c:	002a      	movs	r2, r5
10006a0e:	9302      	str	r3, [sp, #8]
10006a10:	2301      	movs	r3, #1
10006a12:	425b      	negs	r3, r3
10006a14:	17dc      	asrs	r4, r3, #31
10006a16:	0039      	movs	r1, r7
10006a18:	9300      	str	r3, [sp, #0]
10006a1a:	9401      	str	r4, [sp, #4]
10006a1c:	3280      	adds	r2, #128	; 0x80
10006a1e:	4839      	ldr	r0, [pc, #228]	; (10006b04 <work_queue_main+0x11c>)
10006a20:	f7ff fd16 	bl	10006450 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
10006a24:	e7e3      	b.n	100069ee <work_queue_main+0x6>
	return node->next;
10006a26:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10006a28:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	list->head = node;
10006a2a:	67ab      	str	r3, [r5, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10006a2c:	4294      	cmp	r4, r2
10006a2e:	d100      	bne.n	10006a32 <work_queue_main+0x4a>
	list->tail = node;
10006a30:	67eb      	str	r3, [r5, #124]	; 0x7c
	*flagp |= BIT(bit);
10006a32:	2202      	movs	r2, #2
10006a34:	6833      	ldr	r3, [r6, #0]
10006a36:	4313      	orrs	r3, r2
10006a38:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
10006a3a:	2304      	movs	r3, #4
10006a3c:	68e2      	ldr	r2, [r4, #12]
10006a3e:	439a      	bics	r2, r3
10006a40:	3b03      	subs	r3, #3
10006a42:	4313      	orrs	r3, r2
10006a44:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10006a46:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10006a48:	2f00      	cmp	r7, #0
10006a4a:	d025      	beq.n	10006a98 <work_queue_main+0xb0>
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10006a4c:	0020      	movs	r0, r4
10006a4e:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10006a50:	f3ef 8310 	mrs	r3, PRIMASK
10006a54:	b672      	cpsid	i
10006a56:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
10006a58:	68e3      	ldr	r3, [r4, #12]
10006a5a:	2101      	movs	r1, #1
10006a5c:	001a      	movs	r2, r3
10006a5e:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
10006a60:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10006a62:	4208      	tst	r0, r1
10006a64:	d11c      	bne.n	10006aa0 <work_queue_main+0xb8>
	*flagp &= ~BIT(bit);
10006a66:	60e2      	str	r2, [r4, #12]
10006a68:	2202      	movs	r2, #2
10006a6a:	6833      	ldr	r3, [r6, #0]
10006a6c:	4393      	bics	r3, r2
	if (key != 0U) {
10006a6e:	9a05      	ldr	r2, [sp, #20]
10006a70:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
10006a72:	05db      	lsls	r3, r3, #23
10006a74:	0fdb      	lsrs	r3, r3, #31
10006a76:	2a00      	cmp	r2, #0
10006a78:	d03f      	beq.n	10006afa <work_queue_main+0x112>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
10006a7a:	2b00      	cmp	r3, #0
10006a7c:	d1b7      	bne.n	100069ee <work_queue_main+0x6>
	z_impl_k_yield();
10006a7e:	f7ff fbeb 	bl	10006258 <z_impl_k_yield>
}
10006a82:	e7b4      	b.n	100069ee <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
10006a84:	002c      	movs	r4, r5
10006a86:	3488      	adds	r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
10006a88:	2200      	movs	r2, #0
10006a8a:	2101      	movs	r1, #1
10006a8c:	0020      	movs	r0, r4
10006a8e:	f007 f9b8 	bl	1000de02 <z_sched_wake>
10006a92:	2800      	cmp	r0, #0
10006a94:	d1f8      	bne.n	10006a88 <work_queue_main+0xa0>
10006a96:	e7b8      	b.n	10006a0a <work_queue_main+0x22>
	__asm__ volatile(
10006a98:	b662      	cpsie	i
10006a9a:	f3bf 8f6f 	isb	sy
10006a9e:	e7d5      	b.n	10006a4c <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
10006aa0:	2203      	movs	r2, #3
10006aa2:	4393      	bics	r3, r2
10006aa4:	60e3      	str	r3, [r4, #12]
	return list->head;
10006aa6:	4b18      	ldr	r3, [pc, #96]	; (10006b08 <work_queue_main+0x120>)
10006aa8:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10006aaa:	2800      	cmp	r0, #0
10006aac:	d0dc      	beq.n	10006a68 <work_queue_main+0x80>
	return node->next;
10006aae:	2700      	movs	r7, #0
10006ab0:	6803      	ldr	r3, [r0, #0]
10006ab2:	9304      	str	r3, [sp, #16]
10006ab4:	2800      	cmp	r0, #0
10006ab6:	d0d7      	beq.n	10006a68 <work_queue_main+0x80>
		if (wc->work == work) {
10006ab8:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
10006aba:	0002      	movs	r2, r0
		if (wc->work == work) {
10006abc:	429c      	cmp	r4, r3
10006abe:	d10e      	bne.n	10006ade <work_queue_main+0xf6>
10006ac0:	6802      	ldr	r2, [r0, #0]
10006ac2:	4b11      	ldr	r3, [pc, #68]	; (10006b08 <work_queue_main+0x120>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
10006ac4:	2f00      	cmp	r7, #0
10006ac6:	d112      	bne.n	10006aee <work_queue_main+0x106>
10006ac8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
10006aca:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
10006acc:	4281      	cmp	r1, r0
10006ace:	d100      	bne.n	10006ad2 <work_queue_main+0xea>
	list->tail = node;
10006ad0:	605a      	str	r2, [r3, #4]
	parent->next = child;
10006ad2:	2300      	movs	r3, #0
10006ad4:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
10006ad6:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
10006ad8:	f7ff f94a 	bl	10005d70 <z_impl_k_sem_give>
}
10006adc:	003a      	movs	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10006ade:	9b04      	ldr	r3, [sp, #16]
10006ae0:	2b00      	cmp	r3, #0
10006ae2:	d000      	beq.n	10006ae6 <work_queue_main+0xfe>
	return node->next;
10006ae4:	681b      	ldr	r3, [r3, #0]
10006ae6:	9804      	ldr	r0, [sp, #16]
10006ae8:	0017      	movs	r7, r2
10006aea:	9304      	str	r3, [sp, #16]
10006aec:	e7e2      	b.n	10006ab4 <work_queue_main+0xcc>
	parent->next = child;
10006aee:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
10006af0:	685a      	ldr	r2, [r3, #4]
10006af2:	4282      	cmp	r2, r0
10006af4:	d1ed      	bne.n	10006ad2 <work_queue_main+0xea>
	list->tail = node;
10006af6:	605f      	str	r7, [r3, #4]
}
10006af8:	e7eb      	b.n	10006ad2 <work_queue_main+0xea>
10006afa:	b662      	cpsie	i
10006afc:	f3bf 8f6f 	isb	sy
10006b00:	e7bb      	b.n	10006a7a <work_queue_main+0x92>
10006b02:	46c0      	nop			; (mov r8, r8)
10006b04:	200024f9 	.word	0x200024f9
10006b08:	20002494 	.word	0x20002494

10006b0c <submit_to_queue_locked>:
{
10006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
10006b0e:	68c3      	ldr	r3, [r0, #12]
{
10006b10:	000d      	movs	r5, r1
	return (*flagp & BIT(bit)) != 0U;
10006b12:	0859      	lsrs	r1, r3, #1
10006b14:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10006b16:	000f      	movs	r7, r1
{
10006b18:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10006b1a:	4017      	ands	r7, r2
10006b1c:	4211      	tst	r1, r2
10006b1e:	d14b      	bne.n	10006bb8 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10006b20:	089b      	lsrs	r3, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
10006b22:	4213      	tst	r3, r2
10006b24:	d11d      	bne.n	10006b62 <submit_to_queue_locked+0x56>
		if (*queuep == NULL) {
10006b26:	682b      	ldr	r3, [r5, #0]
10006b28:	2b00      	cmp	r3, #0
10006b2a:	d101      	bne.n	10006b30 <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10006b2c:	6883      	ldr	r3, [r0, #8]
10006b2e:	602b      	str	r3, [r5, #0]
		ret = 1;
10006b30:	2701      	movs	r7, #1
	return (*flagp & BIT(bit)) != 0U;
10006b32:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10006b34:	423b      	tst	r3, r7
10006b36:	d002      	beq.n	10006b3e <submit_to_queue_locked+0x32>
			*queuep = work->queue;
10006b38:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10006b3a:	19ff      	adds	r7, r7, r7
			*queuep = work->queue;
10006b3c:	602b      	str	r3, [r5, #0]
		int rc = queue_submit_locked(*queuep, work);
10006b3e:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
10006b40:	2e00      	cmp	r6, #0
10006b42:	d047      	beq.n	10006bd4 <submit_to_queue_locked+0xc8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10006b44:	0032      	movs	r2, r6
10006b46:	4b24      	ldr	r3, [pc, #144]	; (10006bd8 <submit_to_queue_locked+0xcc>)
10006b48:	3290      	adds	r2, #144	; 0x90
10006b4a:	689b      	ldr	r3, [r3, #8]
10006b4c:	9201      	str	r2, [sp, #4]
10006b4e:	42b3      	cmp	r3, r6
10006b50:	d022      	beq.n	10006b98 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
10006b52:	2101      	movs	r1, #1
10006b54:	6812      	ldr	r2, [r2, #0]
10006b56:	0893      	lsrs	r3, r2, #2
10006b58:	400b      	ands	r3, r1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10006b5a:	420a      	tst	r2, r1
10006b5c:	d104      	bne.n	10006b68 <submit_to_queue_locked+0x5c>
		ret = -EBUSY;
10006b5e:	2713      	movs	r7, #19
		return -EINVAL;
10006b60:	427f      	negs	r7, r7
		*queuep = NULL;
10006b62:	2300      	movs	r3, #0
10006b64:	602b      	str	r3, [r5, #0]
	return ret;
10006b66:	e015      	b.n	10006b94 <submit_to_queue_locked+0x88>
	} else if (draining && !chained) {
10006b68:	2b00      	cmp	r3, #0
10006b6a:	d125      	bne.n	10006bb8 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10006b6c:	08d3      	lsrs	r3, r2, #3
10006b6e:	400b      	ands	r3, r1
	} else if (plugged && !draining) {
10006b70:	2b00      	cmp	r3, #0
10006b72:	d121      	bne.n	10006bb8 <submit_to_queue_locked+0xac>
	parent->next = child;
10006b74:	2300      	movs	r3, #0
10006b76:	6023      	str	r3, [r4, #0]
	return list->tail;
10006b78:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
10006b7a:	2b00      	cmp	r3, #0
10006b7c:	d127      	bne.n	10006bce <submit_to_queue_locked+0xc2>
	list->tail = node;
10006b7e:	67f4      	str	r4, [r6, #124]	; 0x7c
	list->head = node;
10006b80:	67b4      	str	r4, [r6, #120]	; 0x78
		(void)notify_queue_locked(queue);
10006b82:	0030      	movs	r0, r6
10006b84:	f007 f9d8 	bl	1000df38 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
10006b88:	2304      	movs	r3, #4
10006b8a:	68e2      	ldr	r2, [r4, #12]
10006b8c:	4313      	orrs	r3, r2
10006b8e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
10006b90:	682b      	ldr	r3, [r5, #0]
10006b92:	60a3      	str	r3, [r4, #8]
}
10006b94:	0038      	movs	r0, r7
10006b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10006b98:	f007 f827 	bl	1000dbea <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
10006b9c:	9b01      	ldr	r3, [sp, #4]
10006b9e:	2201      	movs	r2, #1
10006ba0:	681b      	ldr	r3, [r3, #0]
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10006ba2:	2800      	cmp	r0, #0
10006ba4:	d10a      	bne.n	10006bbc <submit_to_queue_locked+0xb0>
	return (*flagp & BIT(bit)) != 0U;
10006ba6:	08d9      	lsrs	r1, r3, #3
10006ba8:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10006baa:	4213      	tst	r3, r2
10006bac:	d0d7      	beq.n	10006b5e <submit_to_queue_locked+0x52>
	} else if (plugged && !draining) {
10006bae:	2900      	cmp	r1, #0
10006bb0:	d0e0      	beq.n	10006b74 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
10006bb2:	089b      	lsrs	r3, r3, #2
	} else if (plugged && !draining) {
10006bb4:	4213      	tst	r3, r2
10006bb6:	d1dd      	bne.n	10006b74 <submit_to_queue_locked+0x68>
		ret = -EBUSY;
10006bb8:	2710      	movs	r7, #16
10006bba:	e7d1      	b.n	10006b60 <submit_to_queue_locked+0x54>
	return (*flagp & BIT(bit)) != 0U;
10006bbc:	0899      	lsrs	r1, r3, #2
10006bbe:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10006bc0:	4213      	tst	r3, r2
10006bc2:	d0cc      	beq.n	10006b5e <submit_to_queue_locked+0x52>
	} else if (draining && !chained) {
10006bc4:	2900      	cmp	r1, #0
10006bc6:	d1f7      	bne.n	10006bb8 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10006bc8:	08db      	lsrs	r3, r3, #3
10006bca:	4013      	ands	r3, r2
10006bcc:	e7d0      	b.n	10006b70 <submit_to_queue_locked+0x64>
	parent->next = child;
10006bce:	601c      	str	r4, [r3, #0]
	list->tail = node;
10006bd0:	67f4      	str	r4, [r6, #124]	; 0x7c
}
10006bd2:	e7d6      	b.n	10006b82 <submit_to_queue_locked+0x76>
		return -EINVAL;
10006bd4:	2716      	movs	r7, #22
10006bd6:	e7c3      	b.n	10006b60 <submit_to_queue_locked+0x54>
10006bd8:	20002464 	.word	0x20002464

10006bdc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
10006bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10006bde:	0004      	movs	r4, r0
	list->head = NULL;
10006be0:	2000      	movs	r0, #0
	sys_dlist_init(&w->waitq);
10006be2:	0026      	movs	r6, r4
10006be4:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = NULL;
10006be6:	67e0      	str	r0, [r4, #124]	; 0x7c
10006be8:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10006bea:	1d20      	adds	r0, r4, #4
10006bec:	b089      	sub	sp, #36	; 0x24
10006bee:	67c6      	str	r6, [r0, #124]	; 0x7c
10006bf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
10006bf2:	3004      	adds	r0, #4
10006bf4:	67c6      	str	r6, [r0, #124]	; 0x7c
10006bf6:	3080      	adds	r0, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10006bf8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10006bfa:	6040      	str	r0, [r0, #4]
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
10006bfc:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10006bfe:	2d00      	cmp	r5, #0
10006c00:	d007      	beq.n	10006c12 <k_work_queue_start+0x36>
10006c02:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10006c04:	4246      	negs	r6, r0
10006c06:	4170      	adcs	r0, r6
10006c08:	26ff      	movs	r6, #255	; 0xff
10006c0a:	4240      	negs	r0, r0
10006c0c:	43b0      	bics	r0, r6
10006c0e:	3002      	adds	r0, #2
10006c10:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10006c12:	0026      	movs	r6, r4
10006c14:	3690      	adds	r6, #144	; 0x90
10006c16:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
10006c18:	2601      	movs	r6, #1
10006c1a:	4276      	negs	r6, r6
10006c1c:	17f7      	asrs	r7, r6, #31
10006c1e:	9606      	str	r6, [sp, #24]
10006c20:	9707      	str	r7, [sp, #28]
10006c22:	2600      	movs	r6, #0
10006c24:	480b      	ldr	r0, [pc, #44]	; (10006c54 <k_work_queue_start+0x78>)
10006c26:	9303      	str	r3, [sp, #12]
10006c28:	9604      	str	r6, [sp, #16]
10006c2a:	0003      	movs	r3, r0
10006c2c:	9602      	str	r6, [sp, #8]
10006c2e:	0020      	movs	r0, r4
10006c30:	9601      	str	r6, [sp, #4]
10006c32:	9400      	str	r4, [sp, #0]
10006c34:	f7fe ff76 	bl	10005b24 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
10006c38:	42b5      	cmp	r5, r6
10006c3a:	d005      	beq.n	10006c48 <k_work_queue_start+0x6c>
10006c3c:	6829      	ldr	r1, [r5, #0]
10006c3e:	42b1      	cmp	r1, r6
10006c40:	d002      	beq.n	10006c48 <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
10006c42:	0020      	movs	r0, r4
10006c44:	f006 ffd7 	bl	1000dbf6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
10006c48:	0020      	movs	r0, r4
10006c4a:	f006 ffd9 	bl	1000dc00 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
10006c4e:	b009      	add	sp, #36	; 0x24
10006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006c52:	46c0      	nop			; (mov r8, r8)
10006c54:	100069e9 	.word	0x100069e9

10006c58 <log>:
10006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006c5a:	0004      	movs	r4, r0
10006c5c:	000d      	movs	r5, r1
10006c5e:	f000 f839 	bl	10006cd4 <__ieee754_log>
10006c62:	4b19      	ldr	r3, [pc, #100]	; (10006cc8 <log+0x70>)
10006c64:	0006      	movs	r6, r0
10006c66:	781b      	ldrb	r3, [r3, #0]
10006c68:	000f      	movs	r7, r1
10006c6a:	b25b      	sxtb	r3, r3
10006c6c:	3301      	adds	r3, #1
10006c6e:	d01d      	beq.n	10006cac <log+0x54>
10006c70:	0022      	movs	r2, r4
10006c72:	002b      	movs	r3, r5
10006c74:	0020      	movs	r0, r4
10006c76:	0029      	movs	r1, r5
10006c78:	f7fb fa94 	bl	100021a4 <__aeabi_dcmpun>
10006c7c:	2800      	cmp	r0, #0
10006c7e:	d115      	bne.n	10006cac <log+0x54>
10006c80:	2200      	movs	r2, #0
10006c82:	2300      	movs	r3, #0
10006c84:	0020      	movs	r0, r4
10006c86:	0029      	movs	r1, r5
10006c88:	f7fb f8ee 	bl	10001e68 <__aeabi_dcmpgt>
10006c8c:	2800      	cmp	r0, #0
10006c8e:	d10d      	bne.n	10006cac <log+0x54>
10006c90:	2200      	movs	r2, #0
10006c92:	2300      	movs	r3, #0
10006c94:	0020      	movs	r0, r4
10006c96:	0029      	movs	r1, r5
10006c98:	f7fb f8cc 	bl	10001e34 <__aeabi_dcmpeq>
10006c9c:	2800      	cmp	r0, #0
10006c9e:	d008      	beq.n	10006cb2 <log+0x5a>
10006ca0:	f006 fae1 	bl	1000d266 <__errno>
10006ca4:	2322      	movs	r3, #34	; 0x22
10006ca6:	2600      	movs	r6, #0
10006ca8:	4f08      	ldr	r7, [pc, #32]	; (10006ccc <log+0x74>)
10006caa:	6003      	str	r3, [r0, #0]
10006cac:	0030      	movs	r0, r6
10006cae:	0039      	movs	r1, r7
10006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006cb2:	f006 fad8 	bl	1000d266 <__errno>
10006cb6:	2321      	movs	r3, #33	; 0x21
10006cb8:	6003      	str	r3, [r0, #0]
10006cba:	4805      	ldr	r0, [pc, #20]	; (10006cd0 <log+0x78>)
10006cbc:	f000 f9e2 	bl	10007084 <nan>
10006cc0:	0006      	movs	r6, r0
10006cc2:	000f      	movs	r7, r1
10006cc4:	e7f2      	b.n	10006cac <log+0x54>
10006cc6:	46c0      	nop			; (mov r8, r8)
10006cc8:	2000215c 	.word	0x2000215c
10006ccc:	fff00000 	.word	0xfff00000
10006cd0:	1000e5a8 	.word	0x1000e5a8

10006cd4 <__ieee754_log>:
10006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10006cd6:	46d6      	mov	lr, sl
10006cd8:	464f      	mov	r7, r9
10006cda:	4646      	mov	r6, r8
10006cdc:	2280      	movs	r2, #128	; 0x80
10006cde:	b5c0      	push	{r6, r7, lr}
10006ce0:	000b      	movs	r3, r1
10006ce2:	b086      	sub	sp, #24
10006ce4:	0352      	lsls	r2, r2, #13
10006ce6:	4291      	cmp	r1, r2
10006ce8:	da7b      	bge.n	10006de2 <__ieee754_log+0x10e>
10006cea:	004a      	lsls	r2, r1, #1
10006cec:	0852      	lsrs	r2, r2, #1
10006cee:	4302      	orrs	r2, r0
10006cf0:	d100      	bne.n	10006cf4 <__ieee754_log+0x20>
10006cf2:	e113      	b.n	10006f1c <__ieee754_log+0x248>
10006cf4:	2900      	cmp	r1, #0
10006cf6:	da00      	bge.n	10006cfa <__ieee754_log+0x26>
10006cf8:	e167      	b.n	10006fca <__ieee754_log+0x2f6>
10006cfa:	2200      	movs	r2, #0
10006cfc:	4bc4      	ldr	r3, [pc, #784]	; (10007010 <__ieee754_log+0x33c>)
10006cfe:	f7fa fa11 	bl	10001124 <__aeabi_dmul>
10006d02:	2436      	movs	r4, #54	; 0x36
10006d04:	4ac3      	ldr	r2, [pc, #780]	; (10007014 <__ieee754_log+0x340>)
10006d06:	000b      	movs	r3, r1
10006d08:	4264      	negs	r4, r4
10006d0a:	4293      	cmp	r3, r2
10006d0c:	dc6d      	bgt.n	10006dea <__ieee754_log+0x116>
10006d0e:	4dc2      	ldr	r5, [pc, #776]	; (10007018 <__ieee754_log+0x344>)
10006d10:	151a      	asrs	r2, r3, #20
10006d12:	46ac      	mov	ip, r5
10006d14:	031b      	lsls	r3, r3, #12
10006d16:	4462      	add	r2, ip
10006d18:	0b1b      	lsrs	r3, r3, #12
10006d1a:	4698      	mov	r8, r3
10006d1c:	1912      	adds	r2, r2, r4
10006d1e:	2480      	movs	r4, #128	; 0x80
10006d20:	4bbe      	ldr	r3, [pc, #760]	; (1000701c <__ieee754_log+0x348>)
10006d22:	0364      	lsls	r4, r4, #13
10006d24:	4443      	add	r3, r8
10006d26:	4023      	ands	r3, r4
10006d28:	4cbd      	ldr	r4, [pc, #756]	; (10007020 <__ieee754_log+0x34c>)
10006d2a:	4645      	mov	r5, r8
10006d2c:	405c      	eors	r4, r3
10006d2e:	151b      	asrs	r3, r3, #20
10006d30:	4699      	mov	r9, r3
10006d32:	4325      	orrs	r5, r4
10006d34:	4bba      	ldr	r3, [pc, #744]	; (10007020 <__ieee754_log+0x34c>)
10006d36:	0029      	movs	r1, r5
10006d38:	4491      	add	r9, r2
10006d3a:	2200      	movs	r2, #0
10006d3c:	f7fa fc1c 	bl	10001578 <__aeabi_dsub>
10006d40:	4643      	mov	r3, r8
10006d42:	3302      	adds	r3, #2
10006d44:	031b      	lsls	r3, r3, #12
10006d46:	0006      	movs	r6, r0
10006d48:	000f      	movs	r7, r1
10006d4a:	2200      	movs	r2, #0
10006d4c:	0b1b      	lsrs	r3, r3, #12
10006d4e:	2b02      	cmp	r3, #2
10006d50:	dc55      	bgt.n	10006dfe <__ieee754_log+0x12a>
10006d52:	2300      	movs	r3, #0
10006d54:	f7fb f86e 	bl	10001e34 <__aeabi_dcmpeq>
10006d58:	2800      	cmp	r0, #0
10006d5a:	d000      	beq.n	10006d5e <__ieee754_log+0x8a>
10006d5c:	e0e5      	b.n	10006f2a <__ieee754_log+0x256>
10006d5e:	4ab1      	ldr	r2, [pc, #708]	; (10007024 <__ieee754_log+0x350>)
10006d60:	4bb1      	ldr	r3, [pc, #708]	; (10007028 <__ieee754_log+0x354>)
10006d62:	0030      	movs	r0, r6
10006d64:	0039      	movs	r1, r7
10006d66:	f7fa f9dd 	bl	10001124 <__aeabi_dmul>
10006d6a:	0002      	movs	r2, r0
10006d6c:	000b      	movs	r3, r1
10006d6e:	2000      	movs	r0, #0
10006d70:	49ae      	ldr	r1, [pc, #696]	; (1000702c <__ieee754_log+0x358>)
10006d72:	f7fa fc01 	bl	10001578 <__aeabi_dsub>
10006d76:	0032      	movs	r2, r6
10006d78:	0004      	movs	r4, r0
10006d7a:	000d      	movs	r5, r1
10006d7c:	003b      	movs	r3, r7
10006d7e:	0030      	movs	r0, r6
10006d80:	0039      	movs	r1, r7
10006d82:	f7fa f9cf 	bl	10001124 <__aeabi_dmul>
10006d86:	000b      	movs	r3, r1
10006d88:	0002      	movs	r2, r0
10006d8a:	0029      	movs	r1, r5
10006d8c:	0020      	movs	r0, r4
10006d8e:	f7fa f9c9 	bl	10001124 <__aeabi_dmul>
10006d92:	464b      	mov	r3, r9
10006d94:	0004      	movs	r4, r0
10006d96:	000d      	movs	r5, r1
10006d98:	2b00      	cmp	r3, #0
10006d9a:	d100      	bne.n	10006d9e <__ieee754_log+0xca>
10006d9c:	e10e      	b.n	10006fbc <__ieee754_log+0x2e8>
10006d9e:	4648      	mov	r0, r9
10006da0:	f7fa fefe 	bl	10001ba0 <__aeabi_i2d>
10006da4:	4aa2      	ldr	r2, [pc, #648]	; (10007030 <__ieee754_log+0x35c>)
10006da6:	4ba3      	ldr	r3, [pc, #652]	; (10007034 <__ieee754_log+0x360>)
10006da8:	9000      	str	r0, [sp, #0]
10006daa:	9101      	str	r1, [sp, #4]
10006dac:	f7fa f9ba 	bl	10001124 <__aeabi_dmul>
10006db0:	4aa1      	ldr	r2, [pc, #644]	; (10007038 <__ieee754_log+0x364>)
10006db2:	9002      	str	r0, [sp, #8]
10006db4:	9103      	str	r1, [sp, #12]
10006db6:	9800      	ldr	r0, [sp, #0]
10006db8:	9901      	ldr	r1, [sp, #4]
10006dba:	4ba0      	ldr	r3, [pc, #640]	; (1000703c <__ieee754_log+0x368>)
10006dbc:	f7fa f9b2 	bl	10001124 <__aeabi_dmul>
10006dc0:	0002      	movs	r2, r0
10006dc2:	000b      	movs	r3, r1
10006dc4:	0020      	movs	r0, r4
10006dc6:	0029      	movs	r1, r5
10006dc8:	f7fa fbd6 	bl	10001578 <__aeabi_dsub>
10006dcc:	0032      	movs	r2, r6
10006dce:	003b      	movs	r3, r7
10006dd0:	f7fa fbd2 	bl	10001578 <__aeabi_dsub>
10006dd4:	0002      	movs	r2, r0
10006dd6:	000b      	movs	r3, r1
10006dd8:	9802      	ldr	r0, [sp, #8]
10006dda:	9903      	ldr	r1, [sp, #12]
10006ddc:	f7fa fbcc 	bl	10001578 <__aeabi_dsub>
10006de0:	e007      	b.n	10006df2 <__ieee754_log+0x11e>
10006de2:	4a8c      	ldr	r2, [pc, #560]	; (10007014 <__ieee754_log+0x340>)
10006de4:	2400      	movs	r4, #0
10006de6:	4293      	cmp	r3, r2
10006de8:	dd91      	ble.n	10006d0e <__ieee754_log+0x3a>
10006dea:	0002      	movs	r2, r0
10006dec:	000b      	movs	r3, r1
10006dee:	f7f9 fc27 	bl	10000640 <__aeabi_dadd>
10006df2:	b006      	add	sp, #24
10006df4:	bce0      	pop	{r5, r6, r7}
10006df6:	46ba      	mov	sl, r7
10006df8:	46b1      	mov	r9, r6
10006dfa:	46a8      	mov	r8, r5
10006dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006dfe:	2380      	movs	r3, #128	; 0x80
10006e00:	05db      	lsls	r3, r3, #23
10006e02:	f7f9 fc1d 	bl	10000640 <__aeabi_dadd>
10006e06:	0002      	movs	r2, r0
10006e08:	000b      	movs	r3, r1
10006e0a:	0030      	movs	r0, r6
10006e0c:	0039      	movs	r1, r7
10006e0e:	f7f9 ff07 	bl	10000c20 <__aeabi_ddiv>
10006e12:	0004      	movs	r4, r0
10006e14:	4648      	mov	r0, r9
10006e16:	000d      	movs	r5, r1
10006e18:	f7fa fec2 	bl	10001ba0 <__aeabi_i2d>
10006e1c:	0022      	movs	r2, r4
10006e1e:	002b      	movs	r3, r5
10006e20:	9004      	str	r0, [sp, #16]
10006e22:	9105      	str	r1, [sp, #20]
10006e24:	0020      	movs	r0, r4
10006e26:	0029      	movs	r1, r5
10006e28:	9402      	str	r4, [sp, #8]
10006e2a:	9503      	str	r5, [sp, #12]
10006e2c:	f7fa f97a 	bl	10001124 <__aeabi_dmul>
10006e30:	4b83      	ldr	r3, [pc, #524]	; (10007040 <__ieee754_log+0x36c>)
10006e32:	0002      	movs	r2, r0
10006e34:	4443      	add	r3, r8
10006e36:	469a      	mov	sl, r3
10006e38:	000b      	movs	r3, r1
10006e3a:	9000      	str	r0, [sp, #0]
10006e3c:	9101      	str	r1, [sp, #4]
10006e3e:	f7fa f971 	bl	10001124 <__aeabi_dmul>
10006e42:	0004      	movs	r4, r0
10006e44:	000d      	movs	r5, r1
10006e46:	4a7f      	ldr	r2, [pc, #508]	; (10007044 <__ieee754_log+0x370>)
10006e48:	4b7f      	ldr	r3, [pc, #508]	; (10007048 <__ieee754_log+0x374>)
10006e4a:	f7fa f96b 	bl	10001124 <__aeabi_dmul>
10006e4e:	4a7f      	ldr	r2, [pc, #508]	; (1000704c <__ieee754_log+0x378>)
10006e50:	4b7f      	ldr	r3, [pc, #508]	; (10007050 <__ieee754_log+0x37c>)
10006e52:	f7f9 fbf5 	bl	10000640 <__aeabi_dadd>
10006e56:	0022      	movs	r2, r4
10006e58:	002b      	movs	r3, r5
10006e5a:	f7fa f963 	bl	10001124 <__aeabi_dmul>
10006e5e:	4a7d      	ldr	r2, [pc, #500]	; (10007054 <__ieee754_log+0x380>)
10006e60:	4b7d      	ldr	r3, [pc, #500]	; (10007058 <__ieee754_log+0x384>)
10006e62:	f7f9 fbed 	bl	10000640 <__aeabi_dadd>
10006e66:	0022      	movs	r2, r4
10006e68:	002b      	movs	r3, r5
10006e6a:	f7fa f95b 	bl	10001124 <__aeabi_dmul>
10006e6e:	4a7b      	ldr	r2, [pc, #492]	; (1000705c <__ieee754_log+0x388>)
10006e70:	4b7b      	ldr	r3, [pc, #492]	; (10007060 <__ieee754_log+0x38c>)
10006e72:	f7f9 fbe5 	bl	10000640 <__aeabi_dadd>
10006e76:	9a00      	ldr	r2, [sp, #0]
10006e78:	9b01      	ldr	r3, [sp, #4]
10006e7a:	f7fa f953 	bl	10001124 <__aeabi_dmul>
10006e7e:	4a79      	ldr	r2, [pc, #484]	; (10007064 <__ieee754_log+0x390>)
10006e80:	9000      	str	r0, [sp, #0]
10006e82:	9101      	str	r1, [sp, #4]
10006e84:	4b78      	ldr	r3, [pc, #480]	; (10007068 <__ieee754_log+0x394>)
10006e86:	0020      	movs	r0, r4
10006e88:	0029      	movs	r1, r5
10006e8a:	f7fa f94b 	bl	10001124 <__aeabi_dmul>
10006e8e:	4a77      	ldr	r2, [pc, #476]	; (1000706c <__ieee754_log+0x398>)
10006e90:	4b77      	ldr	r3, [pc, #476]	; (10007070 <__ieee754_log+0x39c>)
10006e92:	f7f9 fbd5 	bl	10000640 <__aeabi_dadd>
10006e96:	0022      	movs	r2, r4
10006e98:	002b      	movs	r3, r5
10006e9a:	f7fa f943 	bl	10001124 <__aeabi_dmul>
10006e9e:	4a75      	ldr	r2, [pc, #468]	; (10007074 <__ieee754_log+0x3a0>)
10006ea0:	4b75      	ldr	r3, [pc, #468]	; (10007078 <__ieee754_log+0x3a4>)
10006ea2:	f7f9 fbcd 	bl	10000640 <__aeabi_dadd>
10006ea6:	0022      	movs	r2, r4
10006ea8:	002b      	movs	r3, r5
10006eaa:	f7fa f93b 	bl	10001124 <__aeabi_dmul>
10006eae:	000b      	movs	r3, r1
10006eb0:	0002      	movs	r2, r0
10006eb2:	9800      	ldr	r0, [sp, #0]
10006eb4:	9901      	ldr	r1, [sp, #4]
10006eb6:	f7f9 fbc3 	bl	10000640 <__aeabi_dadd>
10006eba:	000d      	movs	r5, r1
10006ebc:	4641      	mov	r1, r8
10006ebe:	4b6f      	ldr	r3, [pc, #444]	; (1000707c <__ieee754_log+0x3a8>)
10006ec0:	0004      	movs	r4, r0
10006ec2:	1a5b      	subs	r3, r3, r1
10006ec4:	4651      	mov	r1, sl
10006ec6:	430b      	orrs	r3, r1
10006ec8:	2b00      	cmp	r3, #0
10006eca:	dd49      	ble.n	10006f60 <__ieee754_log+0x28c>
10006ecc:	2200      	movs	r2, #0
10006ece:	4b57      	ldr	r3, [pc, #348]	; (1000702c <__ieee754_log+0x358>)
10006ed0:	0030      	movs	r0, r6
10006ed2:	0039      	movs	r1, r7
10006ed4:	f7fa f926 	bl	10001124 <__aeabi_dmul>
10006ed8:	0032      	movs	r2, r6
10006eda:	003b      	movs	r3, r7
10006edc:	f7fa f922 	bl	10001124 <__aeabi_dmul>
10006ee0:	0002      	movs	r2, r0
10006ee2:	000b      	movs	r3, r1
10006ee4:	9000      	str	r0, [sp, #0]
10006ee6:	9101      	str	r1, [sp, #4]
10006ee8:	0020      	movs	r0, r4
10006eea:	0029      	movs	r1, r5
10006eec:	f7f9 fba8 	bl	10000640 <__aeabi_dadd>
10006ef0:	9a02      	ldr	r2, [sp, #8]
10006ef2:	9b03      	ldr	r3, [sp, #12]
10006ef4:	f7fa f916 	bl	10001124 <__aeabi_dmul>
10006ef8:	464b      	mov	r3, r9
10006efa:	0004      	movs	r4, r0
10006efc:	000d      	movs	r5, r1
10006efe:	2b00      	cmp	r3, #0
10006f00:	d16b      	bne.n	10006fda <__ieee754_log+0x306>
10006f02:	0002      	movs	r2, r0
10006f04:	000b      	movs	r3, r1
10006f06:	9800      	ldr	r0, [sp, #0]
10006f08:	9901      	ldr	r1, [sp, #4]
10006f0a:	f7fa fb35 	bl	10001578 <__aeabi_dsub>
10006f0e:	0002      	movs	r2, r0
10006f10:	000b      	movs	r3, r1
10006f12:	0030      	movs	r0, r6
10006f14:	0039      	movs	r1, r7
10006f16:	f7fa fb2f 	bl	10001578 <__aeabi_dsub>
10006f1a:	e76a      	b.n	10006df2 <__ieee754_log+0x11e>
10006f1c:	2200      	movs	r2, #0
10006f1e:	2300      	movs	r3, #0
10006f20:	2000      	movs	r0, #0
10006f22:	4957      	ldr	r1, [pc, #348]	; (10007080 <__ieee754_log+0x3ac>)
10006f24:	f7f9 fe7c 	bl	10000c20 <__aeabi_ddiv>
10006f28:	e763      	b.n	10006df2 <__ieee754_log+0x11e>
10006f2a:	464b      	mov	r3, r9
10006f2c:	2b00      	cmp	r3, #0
10006f2e:	d06b      	beq.n	10007008 <__ieee754_log+0x334>
10006f30:	4648      	mov	r0, r9
10006f32:	f7fa fe35 	bl	10001ba0 <__aeabi_i2d>
10006f36:	4a3e      	ldr	r2, [pc, #248]	; (10007030 <__ieee754_log+0x35c>)
10006f38:	4b3e      	ldr	r3, [pc, #248]	; (10007034 <__ieee754_log+0x360>)
10006f3a:	0004      	movs	r4, r0
10006f3c:	000d      	movs	r5, r1
10006f3e:	f7fa f8f1 	bl	10001124 <__aeabi_dmul>
10006f42:	4a3d      	ldr	r2, [pc, #244]	; (10007038 <__ieee754_log+0x364>)
10006f44:	0006      	movs	r6, r0
10006f46:	000f      	movs	r7, r1
10006f48:	0020      	movs	r0, r4
10006f4a:	0029      	movs	r1, r5
10006f4c:	4b3b      	ldr	r3, [pc, #236]	; (1000703c <__ieee754_log+0x368>)
10006f4e:	f7fa f8e9 	bl	10001124 <__aeabi_dmul>
10006f52:	0002      	movs	r2, r0
10006f54:	000b      	movs	r3, r1
10006f56:	0030      	movs	r0, r6
10006f58:	0039      	movs	r1, r7
10006f5a:	f7f9 fb71 	bl	10000640 <__aeabi_dadd>
10006f5e:	e748      	b.n	10006df2 <__ieee754_log+0x11e>
10006f60:	0022      	movs	r2, r4
10006f62:	002b      	movs	r3, r5
10006f64:	0030      	movs	r0, r6
10006f66:	0039      	movs	r1, r7
10006f68:	f7fa fb06 	bl	10001578 <__aeabi_dsub>
10006f6c:	9a02      	ldr	r2, [sp, #8]
10006f6e:	9b03      	ldr	r3, [sp, #12]
10006f70:	f7fa f8d8 	bl	10001124 <__aeabi_dmul>
10006f74:	464b      	mov	r3, r9
10006f76:	0004      	movs	r4, r0
10006f78:	000d      	movs	r5, r1
10006f7a:	2b00      	cmp	r3, #0
10006f7c:	d01e      	beq.n	10006fbc <__ieee754_log+0x2e8>
10006f7e:	9804      	ldr	r0, [sp, #16]
10006f80:	9905      	ldr	r1, [sp, #20]
10006f82:	4a2b      	ldr	r2, [pc, #172]	; (10007030 <__ieee754_log+0x35c>)
10006f84:	4b2b      	ldr	r3, [pc, #172]	; (10007034 <__ieee754_log+0x360>)
10006f86:	f7fa f8cd 	bl	10001124 <__aeabi_dmul>
10006f8a:	4a2b      	ldr	r2, [pc, #172]	; (10007038 <__ieee754_log+0x364>)
10006f8c:	9000      	str	r0, [sp, #0]
10006f8e:	9101      	str	r1, [sp, #4]
10006f90:	9804      	ldr	r0, [sp, #16]
10006f92:	9905      	ldr	r1, [sp, #20]
10006f94:	4b29      	ldr	r3, [pc, #164]	; (1000703c <__ieee754_log+0x368>)
10006f96:	f7fa f8c5 	bl	10001124 <__aeabi_dmul>
10006f9a:	0002      	movs	r2, r0
10006f9c:	000b      	movs	r3, r1
10006f9e:	0020      	movs	r0, r4
10006fa0:	0029      	movs	r1, r5
10006fa2:	f7fa fae9 	bl	10001578 <__aeabi_dsub>
10006fa6:	0032      	movs	r2, r6
10006fa8:	003b      	movs	r3, r7
10006faa:	f7fa fae5 	bl	10001578 <__aeabi_dsub>
10006fae:	0002      	movs	r2, r0
10006fb0:	000b      	movs	r3, r1
10006fb2:	9800      	ldr	r0, [sp, #0]
10006fb4:	9901      	ldr	r1, [sp, #4]
10006fb6:	f7fa fadf 	bl	10001578 <__aeabi_dsub>
10006fba:	e71a      	b.n	10006df2 <__ieee754_log+0x11e>
10006fbc:	0022      	movs	r2, r4
10006fbe:	002b      	movs	r3, r5
10006fc0:	0030      	movs	r0, r6
10006fc2:	0039      	movs	r1, r7
10006fc4:	f7fa fad8 	bl	10001578 <__aeabi_dsub>
10006fc8:	e713      	b.n	10006df2 <__ieee754_log+0x11e>
10006fca:	0002      	movs	r2, r0
10006fcc:	f7fa fad4 	bl	10001578 <__aeabi_dsub>
10006fd0:	2200      	movs	r2, #0
10006fd2:	2300      	movs	r3, #0
10006fd4:	f7f9 fe24 	bl	10000c20 <__aeabi_ddiv>
10006fd8:	e70b      	b.n	10006df2 <__ieee754_log+0x11e>
10006fda:	4a15      	ldr	r2, [pc, #84]	; (10007030 <__ieee754_log+0x35c>)
10006fdc:	4b15      	ldr	r3, [pc, #84]	; (10007034 <__ieee754_log+0x360>)
10006fde:	9804      	ldr	r0, [sp, #16]
10006fe0:	9905      	ldr	r1, [sp, #20]
10006fe2:	f7fa f89f 	bl	10001124 <__aeabi_dmul>
10006fe6:	4a14      	ldr	r2, [pc, #80]	; (10007038 <__ieee754_log+0x364>)
10006fe8:	9002      	str	r0, [sp, #8]
10006fea:	9103      	str	r1, [sp, #12]
10006fec:	9804      	ldr	r0, [sp, #16]
10006fee:	9905      	ldr	r1, [sp, #20]
10006ff0:	4b12      	ldr	r3, [pc, #72]	; (1000703c <__ieee754_log+0x368>)
10006ff2:	f7fa f897 	bl	10001124 <__aeabi_dmul>
10006ff6:	0022      	movs	r2, r4
10006ff8:	002b      	movs	r3, r5
10006ffa:	f7f9 fb21 	bl	10000640 <__aeabi_dadd>
10006ffe:	0002      	movs	r2, r0
10007000:	000b      	movs	r3, r1
10007002:	9800      	ldr	r0, [sp, #0]
10007004:	9901      	ldr	r1, [sp, #4]
10007006:	e6df      	b.n	10006dc8 <__ieee754_log+0xf4>
10007008:	2000      	movs	r0, #0
1000700a:	2100      	movs	r1, #0
1000700c:	e6f1      	b.n	10006df2 <__ieee754_log+0x11e>
1000700e:	46c0      	nop			; (mov r8, r8)
10007010:	43500000 	.word	0x43500000
10007014:	7fefffff 	.word	0x7fefffff
10007018:	fffffc01 	.word	0xfffffc01
1000701c:	00095f64 	.word	0x00095f64
10007020:	3ff00000 	.word	0x3ff00000
10007024:	55555555 	.word	0x55555555
10007028:	3fd55555 	.word	0x3fd55555
1000702c:	3fe00000 	.word	0x3fe00000
10007030:	fee00000 	.word	0xfee00000
10007034:	3fe62e42 	.word	0x3fe62e42
10007038:	35793c76 	.word	0x35793c76
1000703c:	3dea39ef 	.word	0x3dea39ef
10007040:	fff9eb86 	.word	0xfff9eb86
10007044:	df3e5244 	.word	0xdf3e5244
10007048:	3fc2f112 	.word	0x3fc2f112
1000704c:	96cb03de 	.word	0x96cb03de
10007050:	3fc74664 	.word	0x3fc74664
10007054:	94229359 	.word	0x94229359
10007058:	3fd24924 	.word	0x3fd24924
1000705c:	55555593 	.word	0x55555593
10007060:	3fe55555 	.word	0x3fe55555
10007064:	d078c69f 	.word	0xd078c69f
10007068:	3fc39a09 	.word	0x3fc39a09
1000706c:	1d8e78af 	.word	0x1d8e78af
10007070:	3fcc71c5 	.word	0x3fcc71c5
10007074:	9997fa04 	.word	0x9997fa04
10007078:	3fd99999 	.word	0x3fd99999
1000707c:	0006b851 	.word	0x0006b851
10007080:	c3500000 	.word	0xc3500000

10007084 <nan>:
10007084:	2000      	movs	r0, #0
10007086:	4901      	ldr	r1, [pc, #4]	; (1000708c <nan+0x8>)
10007088:	4770      	bx	lr
1000708a:	46c0      	nop			; (mov r8, r8)
1000708c:	7ff80000 	.word	0x7ff80000

10007090 <__assert_func>:
10007090:	b570      	push	{r4, r5, r6, lr}
10007092:	0014      	movs	r4, r2
10007094:	001a      	movs	r2, r3
10007096:	4b0a      	ldr	r3, [pc, #40]	; (100070c0 <__assert_func+0x30>)
10007098:	0006      	movs	r6, r0
1000709a:	681b      	ldr	r3, [r3, #0]
1000709c:	b084      	sub	sp, #16
1000709e:	68d8      	ldr	r0, [r3, #12]
100070a0:	2c00      	cmp	r4, #0
100070a2:	d00a      	beq.n	100070ba <__assert_func+0x2a>
100070a4:	4b07      	ldr	r3, [pc, #28]	; (100070c4 <__assert_func+0x34>)
100070a6:	4d08      	ldr	r5, [pc, #32]	; (100070c8 <__assert_func+0x38>)
100070a8:	9301      	str	r3, [sp, #4]
100070aa:	9100      	str	r1, [sp, #0]
100070ac:	0033      	movs	r3, r6
100070ae:	0029      	movs	r1, r5
100070b0:	9402      	str	r4, [sp, #8]
100070b2:	f000 f80d 	bl	100070d0 <fiprintf>
100070b6:	f003 f92b 	bl	1000a310 <abort>
100070ba:	4b04      	ldr	r3, [pc, #16]	; (100070cc <__assert_func+0x3c>)
100070bc:	001c      	movs	r4, r3
100070be:	e7f2      	b.n	100070a6 <__assert_func+0x16>
100070c0:	200007e4 	.word	0x200007e4
100070c4:	1000e59c 	.word	0x1000e59c
100070c8:	1000e5ac 	.word	0x1000e5ac
100070cc:	1000e5a8 	.word	0x1000e5a8

100070d0 <fiprintf>:
100070d0:	b40e      	push	{r1, r2, r3}
100070d2:	b500      	push	{lr}
100070d4:	b082      	sub	sp, #8
100070d6:	ab03      	add	r3, sp, #12
100070d8:	0001      	movs	r1, r0
100070da:	4805      	ldr	r0, [pc, #20]	; (100070f0 <fiprintf+0x20>)
100070dc:	cb04      	ldmia	r3!, {r2}
100070de:	6800      	ldr	r0, [r0, #0]
100070e0:	9301      	str	r3, [sp, #4]
100070e2:	f000 fbdf 	bl	100078a4 <_vfiprintf_r>
100070e6:	b002      	add	sp, #8
100070e8:	bc08      	pop	{r3}
100070ea:	b003      	add	sp, #12
100070ec:	4718      	bx	r3
100070ee:	46c0      	nop			; (mov r8, r8)
100070f0:	200007e4 	.word	0x200007e4

100070f4 <malloc>:
100070f4:	b510      	push	{r4, lr}
100070f6:	4b03      	ldr	r3, [pc, #12]	; (10007104 <malloc+0x10>)
100070f8:	0001      	movs	r1, r0
100070fa:	6818      	ldr	r0, [r3, #0]
100070fc:	f000 f80e 	bl	1000711c <_malloc_r>
10007100:	bd10      	pop	{r4, pc}
10007102:	46c0      	nop			; (mov r8, r8)
10007104:	200007e4 	.word	0x200007e4

10007108 <free>:
10007108:	b510      	push	{r4, lr}
1000710a:	4b03      	ldr	r3, [pc, #12]	; (10007118 <free+0x10>)
1000710c:	0001      	movs	r1, r0
1000710e:	6818      	ldr	r0, [r3, #0]
10007110:	f004 fb2c 	bl	1000b76c <_free_r>
10007114:	bd10      	pop	{r4, pc}
10007116:	46c0      	nop			; (mov r8, r8)
10007118:	200007e4 	.word	0x200007e4

1000711c <_malloc_r>:
1000711c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000711e:	4645      	mov	r5, r8
10007120:	46de      	mov	lr, fp
10007122:	4657      	mov	r7, sl
10007124:	464e      	mov	r6, r9
10007126:	b5e0      	push	{r5, r6, r7, lr}
10007128:	000d      	movs	r5, r1
1000712a:	b083      	sub	sp, #12
1000712c:	350b      	adds	r5, #11
1000712e:	9000      	str	r0, [sp, #0]
10007130:	2d16      	cmp	r5, #22
10007132:	d827      	bhi.n	10007184 <_malloc_r+0x68>
10007134:	2910      	cmp	r1, #16
10007136:	d900      	bls.n	1000713a <_malloc_r+0x1e>
10007138:	e0c8      	b.n	100072cc <_malloc_r+0x1b0>
1000713a:	f000 fb2f 	bl	1000779c <__malloc_lock>
1000713e:	2510      	movs	r5, #16
10007140:	2318      	movs	r3, #24
10007142:	2102      	movs	r1, #2
10007144:	4fc5      	ldr	r7, [pc, #788]	; (1000745c <_malloc_r+0x340>)
10007146:	18fb      	adds	r3, r7, r3
10007148:	001a      	movs	r2, r3
1000714a:	685c      	ldr	r4, [r3, #4]
1000714c:	3a08      	subs	r2, #8
1000714e:	4294      	cmp	r4, r2
10007150:	d100      	bne.n	10007154 <_malloc_r+0x38>
10007152:	e123      	b.n	1000739c <_malloc_r+0x280>
10007154:	2203      	movs	r2, #3
10007156:	6863      	ldr	r3, [r4, #4]
10007158:	4393      	bics	r3, r2
1000715a:	68e2      	ldr	r2, [r4, #12]
1000715c:	68a1      	ldr	r1, [r4, #8]
1000715e:	60ca      	str	r2, [r1, #12]
10007160:	6091      	str	r1, [r2, #8]
10007162:	2101      	movs	r1, #1
10007164:	18e3      	adds	r3, r4, r3
10007166:	685a      	ldr	r2, [r3, #4]
10007168:	9800      	ldr	r0, [sp, #0]
1000716a:	430a      	orrs	r2, r1
1000716c:	605a      	str	r2, [r3, #4]
1000716e:	f000 fb1d 	bl	100077ac <__malloc_unlock>
10007172:	0020      	movs	r0, r4
10007174:	3008      	adds	r0, #8
10007176:	b003      	add	sp, #12
10007178:	bcf0      	pop	{r4, r5, r6, r7}
1000717a:	46bb      	mov	fp, r7
1000717c:	46b2      	mov	sl, r6
1000717e:	46a9      	mov	r9, r5
10007180:	46a0      	mov	r8, r4
10007182:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007184:	2307      	movs	r3, #7
10007186:	439d      	bics	r5, r3
10007188:	d500      	bpl.n	1000718c <_malloc_r+0x70>
1000718a:	e09f      	b.n	100072cc <_malloc_r+0x1b0>
1000718c:	42a9      	cmp	r1, r5
1000718e:	d900      	bls.n	10007192 <_malloc_r+0x76>
10007190:	e09c      	b.n	100072cc <_malloc_r+0x1b0>
10007192:	9800      	ldr	r0, [sp, #0]
10007194:	f000 fb02 	bl	1000779c <__malloc_lock>
10007198:	23fc      	movs	r3, #252	; 0xfc
1000719a:	005b      	lsls	r3, r3, #1
1000719c:	429d      	cmp	r5, r3
1000719e:	d200      	bcs.n	100071a2 <_malloc_r+0x86>
100071a0:	e157      	b.n	10007452 <_malloc_r+0x336>
100071a2:	0a69      	lsrs	r1, r5, #9
100071a4:	d100      	bne.n	100071a8 <_malloc_r+0x8c>
100071a6:	e096      	b.n	100072d6 <_malloc_r+0x1ba>
100071a8:	2904      	cmp	r1, #4
100071aa:	d900      	bls.n	100071ae <_malloc_r+0x92>
100071ac:	e122      	b.n	100073f4 <_malloc_r+0x2d8>
100071ae:	2338      	movs	r3, #56	; 0x38
100071b0:	469c      	mov	ip, r3
100071b2:	09a9      	lsrs	r1, r5, #6
100071b4:	448c      	add	ip, r1
100071b6:	3139      	adds	r1, #57	; 0x39
100071b8:	00c8      	lsls	r0, r1, #3
100071ba:	4fa8      	ldr	r7, [pc, #672]	; (1000745c <_malloc_r+0x340>)
100071bc:	1838      	adds	r0, r7, r0
100071be:	6844      	ldr	r4, [r0, #4]
100071c0:	3808      	subs	r0, #8
100071c2:	42a0      	cmp	r0, r4
100071c4:	d00c      	beq.n	100071e0 <_malloc_r+0xc4>
100071c6:	2603      	movs	r6, #3
100071c8:	e004      	b.n	100071d4 <_malloc_r+0xb8>
100071ca:	2a00      	cmp	r2, #0
100071cc:	dac5      	bge.n	1000715a <_malloc_r+0x3e>
100071ce:	68e4      	ldr	r4, [r4, #12]
100071d0:	42a0      	cmp	r0, r4
100071d2:	d005      	beq.n	100071e0 <_malloc_r+0xc4>
100071d4:	6863      	ldr	r3, [r4, #4]
100071d6:	43b3      	bics	r3, r6
100071d8:	1b5a      	subs	r2, r3, r5
100071da:	2a0f      	cmp	r2, #15
100071dc:	ddf5      	ble.n	100071ca <_malloc_r+0xae>
100071de:	4661      	mov	r1, ip
100071e0:	003a      	movs	r2, r7
100071e2:	693c      	ldr	r4, [r7, #16]
100071e4:	3208      	adds	r2, #8
100071e6:	4294      	cmp	r4, r2
100071e8:	d100      	bne.n	100071ec <_malloc_r+0xd0>
100071ea:	e0c6      	b.n	1000737a <_malloc_r+0x25e>
100071ec:	2003      	movs	r0, #3
100071ee:	6863      	ldr	r3, [r4, #4]
100071f0:	4383      	bics	r3, r0
100071f2:	1b58      	subs	r0, r3, r5
100071f4:	280f      	cmp	r0, #15
100071f6:	dd00      	ble.n	100071fa <_malloc_r+0xde>
100071f8:	e13e      	b.n	10007478 <_malloc_r+0x35c>
100071fa:	613a      	str	r2, [r7, #16]
100071fc:	617a      	str	r2, [r7, #20]
100071fe:	2800      	cmp	r0, #0
10007200:	daaf      	bge.n	10007162 <_malloc_r+0x46>
10007202:	687a      	ldr	r2, [r7, #4]
10007204:	4690      	mov	r8, r2
10007206:	2280      	movs	r2, #128	; 0x80
10007208:	0092      	lsls	r2, r2, #2
1000720a:	4293      	cmp	r3, r2
1000720c:	d300      	bcc.n	10007210 <_malloc_r+0xf4>
1000720e:	e0cb      	b.n	100073a8 <_malloc_r+0x28c>
10007210:	08da      	lsrs	r2, r3, #3
10007212:	0958      	lsrs	r0, r3, #5
10007214:	2301      	movs	r3, #1
10007216:	4083      	lsls	r3, r0
10007218:	4640      	mov	r0, r8
1000721a:	4318      	orrs	r0, r3
1000721c:	4680      	mov	r8, r0
1000721e:	00d3      	lsls	r3, r2, #3
10007220:	19db      	adds	r3, r3, r7
10007222:	689a      	ldr	r2, [r3, #8]
10007224:	6078      	str	r0, [r7, #4]
10007226:	60e3      	str	r3, [r4, #12]
10007228:	60a2      	str	r2, [r4, #8]
1000722a:	609c      	str	r4, [r3, #8]
1000722c:	60d4      	str	r4, [r2, #12]
1000722e:	2001      	movs	r0, #1
10007230:	108b      	asrs	r3, r1, #2
10007232:	4098      	lsls	r0, r3
10007234:	4540      	cmp	r0, r8
10007236:	d854      	bhi.n	100072e2 <_malloc_r+0x1c6>
10007238:	4643      	mov	r3, r8
1000723a:	4203      	tst	r3, r0
1000723c:	d106      	bne.n	1000724c <_malloc_r+0x130>
1000723e:	2303      	movs	r3, #3
10007240:	4399      	bics	r1, r3
10007242:	4643      	mov	r3, r8
10007244:	0040      	lsls	r0, r0, #1
10007246:	3104      	adds	r1, #4
10007248:	4203      	tst	r3, r0
1000724a:	d0fa      	beq.n	10007242 <_malloc_r+0x126>
1000724c:	2303      	movs	r3, #3
1000724e:	4698      	mov	r8, r3
10007250:	00cb      	lsls	r3, r1, #3
10007252:	4699      	mov	r9, r3
10007254:	44b9      	add	r9, r7
10007256:	46cc      	mov	ip, r9
10007258:	468a      	mov	sl, r1
1000725a:	4663      	mov	r3, ip
1000725c:	68db      	ldr	r3, [r3, #12]
1000725e:	e00b      	b.n	10007278 <_malloc_r+0x15c>
10007260:	4644      	mov	r4, r8
10007262:	685a      	ldr	r2, [r3, #4]
10007264:	43a2      	bics	r2, r4
10007266:	1b56      	subs	r6, r2, r5
10007268:	001c      	movs	r4, r3
1000726a:	68db      	ldr	r3, [r3, #12]
1000726c:	2e0f      	cmp	r6, #15
1000726e:	dd00      	ble.n	10007272 <_malloc_r+0x156>
10007270:	e0cc      	b.n	1000740c <_malloc_r+0x2f0>
10007272:	2e00      	cmp	r6, #0
10007274:	db00      	blt.n	10007278 <_malloc_r+0x15c>
10007276:	e0de      	b.n	10007436 <_malloc_r+0x31a>
10007278:	459c      	cmp	ip, r3
1000727a:	d1f1      	bne.n	10007260 <_malloc_r+0x144>
1000727c:	2308      	movs	r3, #8
1000727e:	469b      	mov	fp, r3
10007280:	3b07      	subs	r3, #7
10007282:	44dc      	add	ip, fp
10007284:	469b      	mov	fp, r3
10007286:	44da      	add	sl, fp
10007288:	4653      	mov	r3, sl
1000728a:	079b      	lsls	r3, r3, #30
1000728c:	d1e5      	bne.n	1000725a <_malloc_r+0x13e>
1000728e:	2203      	movs	r2, #3
10007290:	e009      	b.n	100072a6 <_malloc_r+0x18a>
10007292:	2308      	movs	r3, #8
10007294:	425b      	negs	r3, r3
10007296:	469c      	mov	ip, r3
10007298:	44e1      	add	r9, ip
1000729a:	464b      	mov	r3, r9
1000729c:	689b      	ldr	r3, [r3, #8]
1000729e:	3901      	subs	r1, #1
100072a0:	454b      	cmp	r3, r9
100072a2:	d000      	beq.n	100072a6 <_malloc_r+0x18a>
100072a4:	e1d6      	b.n	10007654 <_malloc_r+0x538>
100072a6:	420a      	tst	r2, r1
100072a8:	d1f3      	bne.n	10007292 <_malloc_r+0x176>
100072aa:	687b      	ldr	r3, [r7, #4]
100072ac:	4383      	bics	r3, r0
100072ae:	607b      	str	r3, [r7, #4]
100072b0:	0040      	lsls	r0, r0, #1
100072b2:	4298      	cmp	r0, r3
100072b4:	d815      	bhi.n	100072e2 <_malloc_r+0x1c6>
100072b6:	2800      	cmp	r0, #0
100072b8:	d104      	bne.n	100072c4 <_malloc_r+0x1a8>
100072ba:	e012      	b.n	100072e2 <_malloc_r+0x1c6>
100072bc:	2204      	movs	r2, #4
100072be:	4694      	mov	ip, r2
100072c0:	0040      	lsls	r0, r0, #1
100072c2:	44e2      	add	sl, ip
100072c4:	4203      	tst	r3, r0
100072c6:	d0f9      	beq.n	100072bc <_malloc_r+0x1a0>
100072c8:	4651      	mov	r1, sl
100072ca:	e7c1      	b.n	10007250 <_malloc_r+0x134>
100072cc:	230c      	movs	r3, #12
100072ce:	9a00      	ldr	r2, [sp, #0]
100072d0:	2000      	movs	r0, #0
100072d2:	6013      	str	r3, [r2, #0]
100072d4:	e74f      	b.n	10007176 <_malloc_r+0x5a>
100072d6:	2080      	movs	r0, #128	; 0x80
100072d8:	233f      	movs	r3, #63	; 0x3f
100072da:	2140      	movs	r1, #64	; 0x40
100072dc:	469c      	mov	ip, r3
100072de:	0080      	lsls	r0, r0, #2
100072e0:	e76b      	b.n	100071ba <_malloc_r+0x9e>
100072e2:	2203      	movs	r2, #3
100072e4:	68bc      	ldr	r4, [r7, #8]
100072e6:	6863      	ldr	r3, [r4, #4]
100072e8:	4393      	bics	r3, r2
100072ea:	4699      	mov	r9, r3
100072ec:	42ab      	cmp	r3, r5
100072ee:	d302      	bcc.n	100072f6 <_malloc_r+0x1da>
100072f0:	1b5b      	subs	r3, r3, r5
100072f2:	2b0f      	cmp	r3, #15
100072f4:	dc44      	bgt.n	10007380 <_malloc_r+0x264>
100072f6:	0023      	movs	r3, r4
100072f8:	444b      	add	r3, r9
100072fa:	4a59      	ldr	r2, [pc, #356]	; (10007460 <_malloc_r+0x344>)
100072fc:	9301      	str	r3, [sp, #4]
100072fe:	4b59      	ldr	r3, [pc, #356]	; (10007464 <_malloc_r+0x348>)
10007300:	4693      	mov	fp, r2
10007302:	681b      	ldr	r3, [r3, #0]
10007304:	6812      	ldr	r2, [r2, #0]
10007306:	18eb      	adds	r3, r5, r3
10007308:	3201      	adds	r2, #1
1000730a:	d100      	bne.n	1000730e <_malloc_r+0x1f2>
1000730c:	e132      	b.n	10007574 <_malloc_r+0x458>
1000730e:	4a56      	ldr	r2, [pc, #344]	; (10007468 <_malloc_r+0x34c>)
10007310:	4694      	mov	ip, r2
10007312:	4463      	add	r3, ip
10007314:	0b1b      	lsrs	r3, r3, #12
10007316:	031b      	lsls	r3, r3, #12
10007318:	001e      	movs	r6, r3
1000731a:	0031      	movs	r1, r6
1000731c:	9800      	ldr	r0, [sp, #0]
1000731e:	f000 fa5f 	bl	100077e0 <_sbrk_r>
10007322:	0003      	movs	r3, r0
10007324:	4680      	mov	r8, r0
10007326:	3301      	adds	r3, #1
10007328:	d100      	bne.n	1000732c <_malloc_r+0x210>
1000732a:	e0bf      	b.n	100074ac <_malloc_r+0x390>
1000732c:	9b01      	ldr	r3, [sp, #4]
1000732e:	4283      	cmp	r3, r0
10007330:	d900      	bls.n	10007334 <_malloc_r+0x218>
10007332:	e0b9      	b.n	100074a8 <_malloc_r+0x38c>
10007334:	46b4      	mov	ip, r6
10007336:	4b4d      	ldr	r3, [pc, #308]	; (1000746c <_malloc_r+0x350>)
10007338:	6819      	ldr	r1, [r3, #0]
1000733a:	469a      	mov	sl, r3
1000733c:	4461      	add	r1, ip
1000733e:	6019      	str	r1, [r3, #0]
10007340:	9b01      	ldr	r3, [sp, #4]
10007342:	000a      	movs	r2, r1
10007344:	4283      	cmp	r3, r0
10007346:	d000      	beq.n	1000734a <_malloc_r+0x22e>
10007348:	e0cb      	b.n	100074e2 <_malloc_r+0x3c6>
1000734a:	4643      	mov	r3, r8
1000734c:	051b      	lsls	r3, r3, #20
1000734e:	d000      	beq.n	10007352 <_malloc_r+0x236>
10007350:	e0c7      	b.n	100074e2 <_malloc_r+0x3c6>
10007352:	68bb      	ldr	r3, [r7, #8]
10007354:	0032      	movs	r2, r6
10007356:	4698      	mov	r8, r3
10007358:	2301      	movs	r3, #1
1000735a:	444a      	add	r2, r9
1000735c:	431a      	orrs	r2, r3
1000735e:	4643      	mov	r3, r8
10007360:	605a      	str	r2, [r3, #4]
10007362:	4b43      	ldr	r3, [pc, #268]	; (10007470 <_malloc_r+0x354>)
10007364:	6818      	ldr	r0, [r3, #0]
10007366:	4288      	cmp	r0, r1
10007368:	d200      	bcs.n	1000736c <_malloc_r+0x250>
1000736a:	6019      	str	r1, [r3, #0]
1000736c:	4b41      	ldr	r3, [pc, #260]	; (10007474 <_malloc_r+0x358>)
1000736e:	6818      	ldr	r0, [r3, #0]
10007370:	4288      	cmp	r0, r1
10007372:	d200      	bcs.n	10007376 <_malloc_r+0x25a>
10007374:	6019      	str	r1, [r3, #0]
10007376:	4644      	mov	r4, r8
10007378:	e09a      	b.n	100074b0 <_malloc_r+0x394>
1000737a:	687b      	ldr	r3, [r7, #4]
1000737c:	4698      	mov	r8, r3
1000737e:	e756      	b.n	1000722e <_malloc_r+0x112>
10007380:	2201      	movs	r2, #1
10007382:	0029      	movs	r1, r5
10007384:	4313      	orrs	r3, r2
10007386:	4311      	orrs	r1, r2
10007388:	1965      	adds	r5, r4, r5
1000738a:	6061      	str	r1, [r4, #4]
1000738c:	9800      	ldr	r0, [sp, #0]
1000738e:	60bd      	str	r5, [r7, #8]
10007390:	606b      	str	r3, [r5, #4]
10007392:	f000 fa0b 	bl	100077ac <__malloc_unlock>
10007396:	0020      	movs	r0, r4
10007398:	3008      	adds	r0, #8
1000739a:	e6ec      	b.n	10007176 <_malloc_r+0x5a>
1000739c:	68dc      	ldr	r4, [r3, #12]
1000739e:	3102      	adds	r1, #2
100073a0:	42a3      	cmp	r3, r4
100073a2:	d100      	bne.n	100073a6 <_malloc_r+0x28a>
100073a4:	e71c      	b.n	100071e0 <_malloc_r+0xc4>
100073a6:	e6d5      	b.n	10007154 <_malloc_r+0x38>
100073a8:	0a5a      	lsrs	r2, r3, #9
100073aa:	2a04      	cmp	r2, #4
100073ac:	d976      	bls.n	1000749c <_malloc_r+0x380>
100073ae:	2a14      	cmp	r2, #20
100073b0:	d900      	bls.n	100073b4 <_malloc_r+0x298>
100073b2:	e0f9      	b.n	100075a8 <_malloc_r+0x48c>
100073b4:	0010      	movs	r0, r2
100073b6:	325c      	adds	r2, #92	; 0x5c
100073b8:	305b      	adds	r0, #91	; 0x5b
100073ba:	00d2      	lsls	r2, r2, #3
100073bc:	2608      	movs	r6, #8
100073be:	4276      	negs	r6, r6
100073c0:	46b4      	mov	ip, r6
100073c2:	18ba      	adds	r2, r7, r2
100073c4:	4494      	add	ip, r2
100073c6:	4662      	mov	r2, ip
100073c8:	6892      	ldr	r2, [r2, #8]
100073ca:	360b      	adds	r6, #11
100073cc:	46b1      	mov	r9, r6
100073ce:	4594      	cmp	ip, r2
100073d0:	d103      	bne.n	100073da <_malloc_r+0x2be>
100073d2:	e0d2      	b.n	1000757a <_malloc_r+0x45e>
100073d4:	6892      	ldr	r2, [r2, #8]
100073d6:	4594      	cmp	ip, r2
100073d8:	d004      	beq.n	100073e4 <_malloc_r+0x2c8>
100073da:	464e      	mov	r6, r9
100073dc:	6850      	ldr	r0, [r2, #4]
100073de:	43b0      	bics	r0, r6
100073e0:	4298      	cmp	r0, r3
100073e2:	d8f7      	bhi.n	100073d4 <_malloc_r+0x2b8>
100073e4:	68d3      	ldr	r3, [r2, #12]
100073e6:	469c      	mov	ip, r3
100073e8:	4663      	mov	r3, ip
100073ea:	60a2      	str	r2, [r4, #8]
100073ec:	60e3      	str	r3, [r4, #12]
100073ee:	609c      	str	r4, [r3, #8]
100073f0:	60d4      	str	r4, [r2, #12]
100073f2:	e71c      	b.n	1000722e <_malloc_r+0x112>
100073f4:	2914      	cmp	r1, #20
100073f6:	d968      	bls.n	100074ca <_malloc_r+0x3ae>
100073f8:	2954      	cmp	r1, #84	; 0x54
100073fa:	d900      	bls.n	100073fe <_malloc_r+0x2e2>
100073fc:	e0dc      	b.n	100075b8 <_malloc_r+0x49c>
100073fe:	236e      	movs	r3, #110	; 0x6e
10007400:	469c      	mov	ip, r3
10007402:	0b29      	lsrs	r1, r5, #12
10007404:	448c      	add	ip, r1
10007406:	316f      	adds	r1, #111	; 0x6f
10007408:	00c8      	lsls	r0, r1, #3
1000740a:	e6d6      	b.n	100071ba <_malloc_r+0x9e>
1000740c:	2001      	movs	r0, #1
1000740e:	1961      	adds	r1, r4, r5
10007410:	4305      	orrs	r5, r0
10007412:	6065      	str	r5, [r4, #4]
10007414:	68a5      	ldr	r5, [r4, #8]
10007416:	3708      	adds	r7, #8
10007418:	60eb      	str	r3, [r5, #12]
1000741a:	4330      	orrs	r0, r6
1000741c:	609d      	str	r5, [r3, #8]
1000741e:	60b9      	str	r1, [r7, #8]
10007420:	60f9      	str	r1, [r7, #12]
10007422:	6048      	str	r0, [r1, #4]
10007424:	60cf      	str	r7, [r1, #12]
10007426:	9800      	ldr	r0, [sp, #0]
10007428:	608f      	str	r7, [r1, #8]
1000742a:	50a6      	str	r6, [r4, r2]
1000742c:	f000 f9be 	bl	100077ac <__malloc_unlock>
10007430:	0020      	movs	r0, r4
10007432:	3008      	adds	r0, #8
10007434:	e69f      	b.n	10007176 <_malloc_r+0x5a>
10007436:	2001      	movs	r0, #1
10007438:	18a2      	adds	r2, r4, r2
1000743a:	6851      	ldr	r1, [r2, #4]
1000743c:	4301      	orrs	r1, r0
1000743e:	6051      	str	r1, [r2, #4]
10007440:	68a2      	ldr	r2, [r4, #8]
10007442:	9800      	ldr	r0, [sp, #0]
10007444:	60d3      	str	r3, [r2, #12]
10007446:	609a      	str	r2, [r3, #8]
10007448:	f000 f9b0 	bl	100077ac <__malloc_unlock>
1000744c:	0020      	movs	r0, r4
1000744e:	3008      	adds	r0, #8
10007450:	e691      	b.n	10007176 <_malloc_r+0x5a>
10007452:	002b      	movs	r3, r5
10007454:	08e9      	lsrs	r1, r5, #3
10007456:	3308      	adds	r3, #8
10007458:	e674      	b.n	10007144 <_malloc_r+0x28>
1000745a:	46c0      	nop			; (mov r8, r8)
1000745c:	20000370 	.word	0x20000370
10007460:	200007e8 	.word	0x200007e8
10007464:	200024cc 	.word	0x200024cc
10007468:	0000100f 	.word	0x0000100f
1000746c:	2000249c 	.word	0x2000249c
10007470:	200024c8 	.word	0x200024c8
10007474:	200024c4 	.word	0x200024c4
10007478:	2601      	movs	r6, #1
1000747a:	1961      	adds	r1, r4, r5
1000747c:	4335      	orrs	r5, r6
1000747e:	6065      	str	r5, [r4, #4]
10007480:	6139      	str	r1, [r7, #16]
10007482:	6179      	str	r1, [r7, #20]
10007484:	60ca      	str	r2, [r1, #12]
10007486:	608a      	str	r2, [r1, #8]
10007488:	0032      	movs	r2, r6
1000748a:	4302      	orrs	r2, r0
1000748c:	604a      	str	r2, [r1, #4]
1000748e:	50e0      	str	r0, [r4, r3]
10007490:	9800      	ldr	r0, [sp, #0]
10007492:	f000 f98b 	bl	100077ac <__malloc_unlock>
10007496:	0020      	movs	r0, r4
10007498:	3008      	adds	r0, #8
1000749a:	e66c      	b.n	10007176 <_malloc_r+0x5a>
1000749c:	099a      	lsrs	r2, r3, #6
1000749e:	0010      	movs	r0, r2
100074a0:	3239      	adds	r2, #57	; 0x39
100074a2:	3038      	adds	r0, #56	; 0x38
100074a4:	00d2      	lsls	r2, r2, #3
100074a6:	e789      	b.n	100073bc <_malloc_r+0x2a0>
100074a8:	42bc      	cmp	r4, r7
100074aa:	d014      	beq.n	100074d6 <_malloc_r+0x3ba>
100074ac:	68bc      	ldr	r4, [r7, #8]
100074ae:	6862      	ldr	r2, [r4, #4]
100074b0:	2303      	movs	r3, #3
100074b2:	439a      	bics	r2, r3
100074b4:	1b53      	subs	r3, r2, r5
100074b6:	42aa      	cmp	r2, r5
100074b8:	d302      	bcc.n	100074c0 <_malloc_r+0x3a4>
100074ba:	2b0f      	cmp	r3, #15
100074bc:	dd00      	ble.n	100074c0 <_malloc_r+0x3a4>
100074be:	e75f      	b.n	10007380 <_malloc_r+0x264>
100074c0:	9800      	ldr	r0, [sp, #0]
100074c2:	f000 f973 	bl	100077ac <__malloc_unlock>
100074c6:	2000      	movs	r0, #0
100074c8:	e655      	b.n	10007176 <_malloc_r+0x5a>
100074ca:	235b      	movs	r3, #91	; 0x5b
100074cc:	469c      	mov	ip, r3
100074ce:	448c      	add	ip, r1
100074d0:	315c      	adds	r1, #92	; 0x5c
100074d2:	00c8      	lsls	r0, r1, #3
100074d4:	e671      	b.n	100071ba <_malloc_r+0x9e>
100074d6:	4b60      	ldr	r3, [pc, #384]	; (10007658 <_malloc_r+0x53c>)
100074d8:	46b4      	mov	ip, r6
100074da:	469a      	mov	sl, r3
100074dc:	681a      	ldr	r2, [r3, #0]
100074de:	4462      	add	r2, ip
100074e0:	601a      	str	r2, [r3, #0]
100074e2:	465b      	mov	r3, fp
100074e4:	681b      	ldr	r3, [r3, #0]
100074e6:	3301      	adds	r3, #1
100074e8:	d071      	beq.n	100075ce <_malloc_r+0x4b2>
100074ea:	4643      	mov	r3, r8
100074ec:	9901      	ldr	r1, [sp, #4]
100074ee:	1a5b      	subs	r3, r3, r1
100074f0:	189b      	adds	r3, r3, r2
100074f2:	4652      	mov	r2, sl
100074f4:	6013      	str	r3, [r2, #0]
100074f6:	2307      	movs	r3, #7
100074f8:	4642      	mov	r2, r8
100074fa:	4641      	mov	r1, r8
100074fc:	401a      	ands	r2, r3
100074fe:	9201      	str	r2, [sp, #4]
10007500:	4219      	tst	r1, r3
10007502:	d042      	beq.n	1000758a <_malloc_r+0x46e>
10007504:	1a8b      	subs	r3, r1, r2
10007506:	2108      	movs	r1, #8
10007508:	4688      	mov	r8, r1
1000750a:	0031      	movs	r1, r6
1000750c:	4498      	add	r8, r3
1000750e:	4b53      	ldr	r3, [pc, #332]	; (1000765c <_malloc_r+0x540>)
10007510:	4441      	add	r1, r8
10007512:	1a9b      	subs	r3, r3, r2
10007514:	1a5b      	subs	r3, r3, r1
10007516:	051b      	lsls	r3, r3, #20
10007518:	0d1b      	lsrs	r3, r3, #20
1000751a:	000e      	movs	r6, r1
1000751c:	9800      	ldr	r0, [sp, #0]
1000751e:	0019      	movs	r1, r3
10007520:	469b      	mov	fp, r3
10007522:	f000 f95d 	bl	100077e0 <_sbrk_r>
10007526:	1c43      	adds	r3, r0, #1
10007528:	d06c      	beq.n	10007604 <_malloc_r+0x4e8>
1000752a:	4643      	mov	r3, r8
1000752c:	1ac0      	subs	r0, r0, r3
1000752e:	0003      	movs	r3, r0
10007530:	445b      	add	r3, fp
10007532:	001e      	movs	r6, r3
10007534:	4653      	mov	r3, sl
10007536:	6819      	ldr	r1, [r3, #0]
10007538:	2001      	movs	r0, #1
1000753a:	0032      	movs	r2, r6
1000753c:	4459      	add	r1, fp
1000753e:	6019      	str	r1, [r3, #0]
10007540:	4643      	mov	r3, r8
10007542:	4302      	orrs	r2, r0
10007544:	60bb      	str	r3, [r7, #8]
10007546:	605a      	str	r2, [r3, #4]
10007548:	42bc      	cmp	r4, r7
1000754a:	d100      	bne.n	1000754e <_malloc_r+0x432>
1000754c:	e709      	b.n	10007362 <_malloc_r+0x246>
1000754e:	464b      	mov	r3, r9
10007550:	2b0f      	cmp	r3, #15
10007552:	d940      	bls.n	100075d6 <_malloc_r+0x4ba>
10007554:	2207      	movs	r2, #7
10007556:	3b0c      	subs	r3, #12
10007558:	4393      	bics	r3, r2
1000755a:	6862      	ldr	r2, [r4, #4]
1000755c:	4002      	ands	r2, r0
1000755e:	2005      	movs	r0, #5
10007560:	431a      	orrs	r2, r3
10007562:	6062      	str	r2, [r4, #4]
10007564:	18e2      	adds	r2, r4, r3
10007566:	6050      	str	r0, [r2, #4]
10007568:	6090      	str	r0, [r2, #8]
1000756a:	2b0f      	cmp	r3, #15
1000756c:	d854      	bhi.n	10007618 <_malloc_r+0x4fc>
1000756e:	4643      	mov	r3, r8
10007570:	685a      	ldr	r2, [r3, #4]
10007572:	e6f6      	b.n	10007362 <_malloc_r+0x246>
10007574:	3310      	adds	r3, #16
10007576:	001e      	movs	r6, r3
10007578:	e6cf      	b.n	1000731a <_malloc_r+0x1fe>
1000757a:	2301      	movs	r3, #1
1000757c:	1080      	asrs	r0, r0, #2
1000757e:	4083      	lsls	r3, r0
10007580:	4640      	mov	r0, r8
10007582:	4318      	orrs	r0, r3
10007584:	4680      	mov	r8, r0
10007586:	6078      	str	r0, [r7, #4]
10007588:	e72e      	b.n	100073e8 <_malloc_r+0x2cc>
1000758a:	0033      	movs	r3, r6
1000758c:	4443      	add	r3, r8
1000758e:	425b      	negs	r3, r3
10007590:	051b      	lsls	r3, r3, #20
10007592:	0d1b      	lsrs	r3, r3, #20
10007594:	0019      	movs	r1, r3
10007596:	9800      	ldr	r0, [sp, #0]
10007598:	469b      	mov	fp, r3
1000759a:	f000 f921 	bl	100077e0 <_sbrk_r>
1000759e:	1c43      	adds	r3, r0, #1
100075a0:	d1c3      	bne.n	1000752a <_malloc_r+0x40e>
100075a2:	2300      	movs	r3, #0
100075a4:	469b      	mov	fp, r3
100075a6:	e7c5      	b.n	10007534 <_malloc_r+0x418>
100075a8:	2a54      	cmp	r2, #84	; 0x54
100075aa:	d817      	bhi.n	100075dc <_malloc_r+0x4c0>
100075ac:	0b1a      	lsrs	r2, r3, #12
100075ae:	0010      	movs	r0, r2
100075b0:	326f      	adds	r2, #111	; 0x6f
100075b2:	306e      	adds	r0, #110	; 0x6e
100075b4:	00d2      	lsls	r2, r2, #3
100075b6:	e701      	b.n	100073bc <_malloc_r+0x2a0>
100075b8:	23aa      	movs	r3, #170	; 0xaa
100075ba:	005b      	lsls	r3, r3, #1
100075bc:	4299      	cmp	r1, r3
100075be:	d817      	bhi.n	100075f0 <_malloc_r+0x4d4>
100075c0:	3bdd      	subs	r3, #221	; 0xdd
100075c2:	469c      	mov	ip, r3
100075c4:	0be9      	lsrs	r1, r5, #15
100075c6:	448c      	add	ip, r1
100075c8:	3178      	adds	r1, #120	; 0x78
100075ca:	00c8      	lsls	r0, r1, #3
100075cc:	e5f5      	b.n	100071ba <_malloc_r+0x9e>
100075ce:	465b      	mov	r3, fp
100075d0:	4642      	mov	r2, r8
100075d2:	601a      	str	r2, [r3, #0]
100075d4:	e78f      	b.n	100074f6 <_malloc_r+0x3da>
100075d6:	4643      	mov	r3, r8
100075d8:	6058      	str	r0, [r3, #4]
100075da:	e771      	b.n	100074c0 <_malloc_r+0x3a4>
100075dc:	20aa      	movs	r0, #170	; 0xaa
100075de:	0040      	lsls	r0, r0, #1
100075e0:	4282      	cmp	r2, r0
100075e2:	d824      	bhi.n	1000762e <_malloc_r+0x512>
100075e4:	0bda      	lsrs	r2, r3, #15
100075e6:	0010      	movs	r0, r2
100075e8:	3278      	adds	r2, #120	; 0x78
100075ea:	3077      	adds	r0, #119	; 0x77
100075ec:	00d2      	lsls	r2, r2, #3
100075ee:	e6e5      	b.n	100073bc <_malloc_r+0x2a0>
100075f0:	4b1b      	ldr	r3, [pc, #108]	; (10007660 <_malloc_r+0x544>)
100075f2:	4299      	cmp	r1, r3
100075f4:	d824      	bhi.n	10007640 <_malloc_r+0x524>
100075f6:	237c      	movs	r3, #124	; 0x7c
100075f8:	469c      	mov	ip, r3
100075fa:	0ca9      	lsrs	r1, r5, #18
100075fc:	448c      	add	ip, r1
100075fe:	317d      	adds	r1, #125	; 0x7d
10007600:	00c8      	lsls	r0, r1, #3
10007602:	e5da      	b.n	100071ba <_malloc_r+0x9e>
10007604:	46b4      	mov	ip, r6
10007606:	4642      	mov	r2, r8
10007608:	9b01      	ldr	r3, [sp, #4]
1000760a:	3b08      	subs	r3, #8
1000760c:	4463      	add	r3, ip
1000760e:	1a9b      	subs	r3, r3, r2
10007610:	001e      	movs	r6, r3
10007612:	2300      	movs	r3, #0
10007614:	469b      	mov	fp, r3
10007616:	e78d      	b.n	10007534 <_malloc_r+0x418>
10007618:	0021      	movs	r1, r4
1000761a:	9800      	ldr	r0, [sp, #0]
1000761c:	3108      	adds	r1, #8
1000761e:	f004 f8a5 	bl	1000b76c <_free_r>
10007622:	4653      	mov	r3, sl
10007624:	6819      	ldr	r1, [r3, #0]
10007626:	68bb      	ldr	r3, [r7, #8]
10007628:	4698      	mov	r8, r3
1000762a:	685a      	ldr	r2, [r3, #4]
1000762c:	e699      	b.n	10007362 <_malloc_r+0x246>
1000762e:	480c      	ldr	r0, [pc, #48]	; (10007660 <_malloc_r+0x544>)
10007630:	4282      	cmp	r2, r0
10007632:	d80b      	bhi.n	1000764c <_malloc_r+0x530>
10007634:	0c9a      	lsrs	r2, r3, #18
10007636:	0010      	movs	r0, r2
10007638:	327d      	adds	r2, #125	; 0x7d
1000763a:	307c      	adds	r0, #124	; 0x7c
1000763c:	00d2      	lsls	r2, r2, #3
1000763e:	e6bd      	b.n	100073bc <_malloc_r+0x2a0>
10007640:	20fe      	movs	r0, #254	; 0xfe
10007642:	237e      	movs	r3, #126	; 0x7e
10007644:	217f      	movs	r1, #127	; 0x7f
10007646:	469c      	mov	ip, r3
10007648:	0080      	lsls	r0, r0, #2
1000764a:	e5b6      	b.n	100071ba <_malloc_r+0x9e>
1000764c:	22fe      	movs	r2, #254	; 0xfe
1000764e:	207e      	movs	r0, #126	; 0x7e
10007650:	0092      	lsls	r2, r2, #2
10007652:	e6b3      	b.n	100073bc <_malloc_r+0x2a0>
10007654:	687b      	ldr	r3, [r7, #4]
10007656:	e62b      	b.n	100072b0 <_malloc_r+0x194>
10007658:	2000249c 	.word	0x2000249c
1000765c:	00001008 	.word	0x00001008
10007660:	00000554 	.word	0x00000554

10007664 <memcpy>:
10007664:	b5f0      	push	{r4, r5, r6, r7, lr}
10007666:	0005      	movs	r5, r0
10007668:	2a0f      	cmp	r2, #15
1000766a:	d933      	bls.n	100076d4 <memcpy+0x70>
1000766c:	2403      	movs	r4, #3
1000766e:	0003      	movs	r3, r0
10007670:	0026      	movs	r6, r4
10007672:	430b      	orrs	r3, r1
10007674:	401e      	ands	r6, r3
10007676:	421c      	tst	r4, r3
10007678:	d137      	bne.n	100076ea <memcpy+0x86>
1000767a:	0015      	movs	r5, r2
1000767c:	3d10      	subs	r5, #16
1000767e:	092d      	lsrs	r5, r5, #4
10007680:	0003      	movs	r3, r0
10007682:	000c      	movs	r4, r1
10007684:	46ac      	mov	ip, r5
10007686:	012f      	lsls	r7, r5, #4
10007688:	183f      	adds	r7, r7, r0
1000768a:	6865      	ldr	r5, [r4, #4]
1000768c:	605d      	str	r5, [r3, #4]
1000768e:	68a5      	ldr	r5, [r4, #8]
10007690:	609d      	str	r5, [r3, #8]
10007692:	68e5      	ldr	r5, [r4, #12]
10007694:	60dd      	str	r5, [r3, #12]
10007696:	6825      	ldr	r5, [r4, #0]
10007698:	3410      	adds	r4, #16
1000769a:	601d      	str	r5, [r3, #0]
1000769c:	001d      	movs	r5, r3
1000769e:	3310      	adds	r3, #16
100076a0:	42bd      	cmp	r5, r7
100076a2:	d1f2      	bne.n	1000768a <memcpy+0x26>
100076a4:	4665      	mov	r5, ip
100076a6:	230f      	movs	r3, #15
100076a8:	240c      	movs	r4, #12
100076aa:	3501      	adds	r5, #1
100076ac:	012d      	lsls	r5, r5, #4
100076ae:	1949      	adds	r1, r1, r5
100076b0:	4013      	ands	r3, r2
100076b2:	1945      	adds	r5, r0, r5
100076b4:	4214      	tst	r4, r2
100076b6:	d01a      	beq.n	100076ee <memcpy+0x8a>
100076b8:	598c      	ldr	r4, [r1, r6]
100076ba:	51ac      	str	r4, [r5, r6]
100076bc:	3604      	adds	r6, #4
100076be:	1b9c      	subs	r4, r3, r6
100076c0:	2c03      	cmp	r4, #3
100076c2:	d8f9      	bhi.n	100076b8 <memcpy+0x54>
100076c4:	3b04      	subs	r3, #4
100076c6:	089b      	lsrs	r3, r3, #2
100076c8:	3301      	adds	r3, #1
100076ca:	009b      	lsls	r3, r3, #2
100076cc:	18ed      	adds	r5, r5, r3
100076ce:	18c9      	adds	r1, r1, r3
100076d0:	2303      	movs	r3, #3
100076d2:	401a      	ands	r2, r3
100076d4:	1e56      	subs	r6, r2, #1
100076d6:	2a00      	cmp	r2, #0
100076d8:	d006      	beq.n	100076e8 <memcpy+0x84>
100076da:	2300      	movs	r3, #0
100076dc:	5ccc      	ldrb	r4, [r1, r3]
100076de:	001a      	movs	r2, r3
100076e0:	54ec      	strb	r4, [r5, r3]
100076e2:	3301      	adds	r3, #1
100076e4:	4296      	cmp	r6, r2
100076e6:	d1f9      	bne.n	100076dc <memcpy+0x78>
100076e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100076ea:	1e56      	subs	r6, r2, #1
100076ec:	e7f5      	b.n	100076da <memcpy+0x76>
100076ee:	001a      	movs	r2, r3
100076f0:	e7f0      	b.n	100076d4 <memcpy+0x70>
100076f2:	46c0      	nop			; (mov r8, r8)

100076f4 <memset>:
100076f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100076f6:	0005      	movs	r5, r0
100076f8:	0783      	lsls	r3, r0, #30
100076fa:	d049      	beq.n	10007790 <memset+0x9c>
100076fc:	1e54      	subs	r4, r2, #1
100076fe:	2a00      	cmp	r2, #0
10007700:	d045      	beq.n	1000778e <memset+0x9a>
10007702:	0003      	movs	r3, r0
10007704:	2603      	movs	r6, #3
10007706:	b2ca      	uxtb	r2, r1
10007708:	e002      	b.n	10007710 <memset+0x1c>
1000770a:	3501      	adds	r5, #1
1000770c:	3c01      	subs	r4, #1
1000770e:	d33e      	bcc.n	1000778e <memset+0x9a>
10007710:	3301      	adds	r3, #1
10007712:	702a      	strb	r2, [r5, #0]
10007714:	4233      	tst	r3, r6
10007716:	d1f8      	bne.n	1000770a <memset+0x16>
10007718:	2c03      	cmp	r4, #3
1000771a:	d930      	bls.n	1000777e <memset+0x8a>
1000771c:	22ff      	movs	r2, #255	; 0xff
1000771e:	400a      	ands	r2, r1
10007720:	0215      	lsls	r5, r2, #8
10007722:	18ad      	adds	r5, r5, r2
10007724:	042a      	lsls	r2, r5, #16
10007726:	18ad      	adds	r5, r5, r2
10007728:	2c0f      	cmp	r4, #15
1000772a:	d934      	bls.n	10007796 <memset+0xa2>
1000772c:	0027      	movs	r7, r4
1000772e:	3f10      	subs	r7, #16
10007730:	093f      	lsrs	r7, r7, #4
10007732:	013e      	lsls	r6, r7, #4
10007734:	46b4      	mov	ip, r6
10007736:	001e      	movs	r6, r3
10007738:	001a      	movs	r2, r3
1000773a:	3610      	adds	r6, #16
1000773c:	4466      	add	r6, ip
1000773e:	6015      	str	r5, [r2, #0]
10007740:	6055      	str	r5, [r2, #4]
10007742:	6095      	str	r5, [r2, #8]
10007744:	60d5      	str	r5, [r2, #12]
10007746:	3210      	adds	r2, #16
10007748:	4296      	cmp	r6, r2
1000774a:	d1f8      	bne.n	1000773e <memset+0x4a>
1000774c:	3701      	adds	r7, #1
1000774e:	013f      	lsls	r7, r7, #4
10007750:	19db      	adds	r3, r3, r7
10007752:	270f      	movs	r7, #15
10007754:	220c      	movs	r2, #12
10007756:	4027      	ands	r7, r4
10007758:	4022      	ands	r2, r4
1000775a:	003c      	movs	r4, r7
1000775c:	2a00      	cmp	r2, #0
1000775e:	d00e      	beq.n	1000777e <memset+0x8a>
10007760:	1f3e      	subs	r6, r7, #4
10007762:	08b6      	lsrs	r6, r6, #2
10007764:	00b4      	lsls	r4, r6, #2
10007766:	46a4      	mov	ip, r4
10007768:	001a      	movs	r2, r3
1000776a:	1d1c      	adds	r4, r3, #4
1000776c:	4464      	add	r4, ip
1000776e:	c220      	stmia	r2!, {r5}
10007770:	42a2      	cmp	r2, r4
10007772:	d1fc      	bne.n	1000776e <memset+0x7a>
10007774:	2403      	movs	r4, #3
10007776:	3601      	adds	r6, #1
10007778:	00b6      	lsls	r6, r6, #2
1000777a:	199b      	adds	r3, r3, r6
1000777c:	403c      	ands	r4, r7
1000777e:	2c00      	cmp	r4, #0
10007780:	d005      	beq.n	1000778e <memset+0x9a>
10007782:	b2c9      	uxtb	r1, r1
10007784:	191c      	adds	r4, r3, r4
10007786:	7019      	strb	r1, [r3, #0]
10007788:	3301      	adds	r3, #1
1000778a:	429c      	cmp	r4, r3
1000778c:	d1fb      	bne.n	10007786 <memset+0x92>
1000778e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007790:	0003      	movs	r3, r0
10007792:	0014      	movs	r4, r2
10007794:	e7c0      	b.n	10007718 <memset+0x24>
10007796:	0027      	movs	r7, r4
10007798:	e7e2      	b.n	10007760 <memset+0x6c>
1000779a:	46c0      	nop			; (mov r8, r8)

1000779c <__malloc_lock>:
1000779c:	b510      	push	{r4, lr}
1000779e:	4802      	ldr	r0, [pc, #8]	; (100077a8 <__malloc_lock+0xc>)
100077a0:	f005 fd56 	bl	1000d250 <__retarget_lock_acquire_recursive>
100077a4:	bd10      	pop	{r4, pc}
100077a6:	46c0      	nop			; (mov r8, r8)
100077a8:	20002184 	.word	0x20002184

100077ac <__malloc_unlock>:
100077ac:	b510      	push	{r4, lr}
100077ae:	4802      	ldr	r0, [pc, #8]	; (100077b8 <__malloc_unlock+0xc>)
100077b0:	f005 fd55 	bl	1000d25e <__retarget_lock_release_recursive>
100077b4:	bd10      	pop	{r4, pc}
100077b6:	46c0      	nop			; (mov r8, r8)
100077b8:	20002184 	.word	0x20002184

100077bc <printf>:
100077bc:	b40f      	push	{r0, r1, r2, r3}
100077be:	b500      	push	{lr}
100077c0:	4906      	ldr	r1, [pc, #24]	; (100077dc <printf+0x20>)
100077c2:	b083      	sub	sp, #12
100077c4:	ab04      	add	r3, sp, #16
100077c6:	6808      	ldr	r0, [r1, #0]
100077c8:	cb04      	ldmia	r3!, {r2}
100077ca:	6881      	ldr	r1, [r0, #8]
100077cc:	9301      	str	r3, [sp, #4]
100077ce:	f000 ff5d 	bl	1000868c <_vfprintf_r>
100077d2:	b003      	add	sp, #12
100077d4:	bc08      	pop	{r3}
100077d6:	b004      	add	sp, #16
100077d8:	4718      	bx	r3
100077da:	46c0      	nop			; (mov r8, r8)
100077dc:	200007e4 	.word	0x200007e4

100077e0 <_sbrk_r>:
100077e0:	2300      	movs	r3, #0
100077e2:	b570      	push	{r4, r5, r6, lr}
100077e4:	4c06      	ldr	r4, [pc, #24]	; (10007800 <_sbrk_r+0x20>)
100077e6:	0005      	movs	r5, r0
100077e8:	0008      	movs	r0, r1
100077ea:	6023      	str	r3, [r4, #0]
100077ec:	f7fc fd44 	bl	10004278 <_sbrk>
100077f0:	1c43      	adds	r3, r0, #1
100077f2:	d000      	beq.n	100077f6 <_sbrk_r+0x16>
100077f4:	bd70      	pop	{r4, r5, r6, pc}
100077f6:	6823      	ldr	r3, [r4, #0]
100077f8:	2b00      	cmp	r3, #0
100077fa:	d0fb      	beq.n	100077f4 <_sbrk_r+0x14>
100077fc:	602b      	str	r3, [r5, #0]
100077fe:	e7f9      	b.n	100077f4 <_sbrk_r+0x14>
10007800:	200024d0 	.word	0x200024d0

10007804 <strlen>:
10007804:	b510      	push	{r4, lr}
10007806:	0783      	lsls	r3, r0, #30
10007808:	d00a      	beq.n	10007820 <strlen+0x1c>
1000780a:	0003      	movs	r3, r0
1000780c:	2103      	movs	r1, #3
1000780e:	e002      	b.n	10007816 <strlen+0x12>
10007810:	3301      	adds	r3, #1
10007812:	420b      	tst	r3, r1
10007814:	d005      	beq.n	10007822 <strlen+0x1e>
10007816:	781a      	ldrb	r2, [r3, #0]
10007818:	2a00      	cmp	r2, #0
1000781a:	d1f9      	bne.n	10007810 <strlen+0xc>
1000781c:	1a18      	subs	r0, r3, r0
1000781e:	bd10      	pop	{r4, pc}
10007820:	0003      	movs	r3, r0
10007822:	6819      	ldr	r1, [r3, #0]
10007824:	4a0c      	ldr	r2, [pc, #48]	; (10007858 <strlen+0x54>)
10007826:	4c0d      	ldr	r4, [pc, #52]	; (1000785c <strlen+0x58>)
10007828:	188a      	adds	r2, r1, r2
1000782a:	438a      	bics	r2, r1
1000782c:	4222      	tst	r2, r4
1000782e:	d10f      	bne.n	10007850 <strlen+0x4c>
10007830:	6859      	ldr	r1, [r3, #4]
10007832:	4a09      	ldr	r2, [pc, #36]	; (10007858 <strlen+0x54>)
10007834:	3304      	adds	r3, #4
10007836:	188a      	adds	r2, r1, r2
10007838:	438a      	bics	r2, r1
1000783a:	4222      	tst	r2, r4
1000783c:	d108      	bne.n	10007850 <strlen+0x4c>
1000783e:	6859      	ldr	r1, [r3, #4]
10007840:	4a05      	ldr	r2, [pc, #20]	; (10007858 <strlen+0x54>)
10007842:	3304      	adds	r3, #4
10007844:	188a      	adds	r2, r1, r2
10007846:	438a      	bics	r2, r1
10007848:	4222      	tst	r2, r4
1000784a:	d0f1      	beq.n	10007830 <strlen+0x2c>
1000784c:	e000      	b.n	10007850 <strlen+0x4c>
1000784e:	3301      	adds	r3, #1
10007850:	781a      	ldrb	r2, [r3, #0]
10007852:	2a00      	cmp	r2, #0
10007854:	d1fb      	bne.n	1000784e <strlen+0x4a>
10007856:	e7e1      	b.n	1000781c <strlen+0x18>
10007858:	fefefeff 	.word	0xfefefeff
1000785c:	80808080 	.word	0x80808080

10007860 <strnlen>:
10007860:	b510      	push	{r4, lr}
10007862:	0003      	movs	r3, r0
10007864:	1844      	adds	r4, r0, r1
10007866:	2900      	cmp	r1, #0
10007868:	d103      	bne.n	10007872 <strnlen+0x12>
1000786a:	e009      	b.n	10007880 <strnlen+0x20>
1000786c:	3301      	adds	r3, #1
1000786e:	429c      	cmp	r4, r3
10007870:	d004      	beq.n	1000787c <strnlen+0x1c>
10007872:	781a      	ldrb	r2, [r3, #0]
10007874:	2a00      	cmp	r2, #0
10007876:	d1f9      	bne.n	1000786c <strnlen+0xc>
10007878:	1a18      	subs	r0, r3, r0
1000787a:	bd10      	pop	{r4, pc}
1000787c:	1a20      	subs	r0, r4, r0
1000787e:	e7fc      	b.n	1000787a <strnlen+0x1a>
10007880:	2000      	movs	r0, #0
10007882:	e7fa      	b.n	1000787a <strnlen+0x1a>

10007884 <__sprint_r>:
10007884:	b510      	push	{r4, lr}
10007886:	0014      	movs	r4, r2
10007888:	6892      	ldr	r2, [r2, #8]
1000788a:	2300      	movs	r3, #0
1000788c:	2a00      	cmp	r2, #0
1000788e:	d005      	beq.n	1000789c <__sprint_r+0x18>
10007890:	0022      	movs	r2, r4
10007892:	f004 f855 	bl	1000b940 <__sfvwrite_r>
10007896:	2200      	movs	r2, #0
10007898:	0003      	movs	r3, r0
1000789a:	60a2      	str	r2, [r4, #8]
1000789c:	2200      	movs	r2, #0
1000789e:	0018      	movs	r0, r3
100078a0:	6062      	str	r2, [r4, #4]
100078a2:	bd10      	pop	{r4, pc}

100078a4 <_vfiprintf_r>:
100078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100078a6:	4657      	mov	r7, sl
100078a8:	46de      	mov	lr, fp
100078aa:	464e      	mov	r6, r9
100078ac:	4645      	mov	r5, r8
100078ae:	b5e0      	push	{r5, r6, r7, lr}
100078b0:	b0bf      	sub	sp, #252	; 0xfc
100078b2:	4692      	mov	sl, r2
100078b4:	001c      	movs	r4, r3
100078b6:	9001      	str	r0, [sp, #4]
100078b8:	9100      	str	r1, [sp, #0]
100078ba:	9305      	str	r3, [sp, #20]
100078bc:	2800      	cmp	r0, #0
100078be:	d003      	beq.n	100078c8 <_vfiprintf_r+0x24>
100078c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
100078c2:	2b00      	cmp	r3, #0
100078c4:	d100      	bne.n	100078c8 <_vfiprintf_r+0x24>
100078c6:	e1dd      	b.n	10007c84 <_vfiprintf_r+0x3e0>
100078c8:	9b00      	ldr	r3, [sp, #0]
100078ca:	210c      	movs	r1, #12
100078cc:	5e5a      	ldrsh	r2, [r3, r1]
100078ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100078d0:	07db      	lsls	r3, r3, #31
100078d2:	d403      	bmi.n	100078dc <_vfiprintf_r+0x38>
100078d4:	0593      	lsls	r3, r2, #22
100078d6:	d401      	bmi.n	100078dc <_vfiprintf_r+0x38>
100078d8:	f000 fd65 	bl	100083a6 <_vfiprintf_r+0xb02>
100078dc:	0713      	lsls	r3, r2, #28
100078de:	d55b      	bpl.n	10007998 <_vfiprintf_r+0xf4>
100078e0:	9b00      	ldr	r3, [sp, #0]
100078e2:	691b      	ldr	r3, [r3, #16]
100078e4:	2b00      	cmp	r3, #0
100078e6:	d057      	beq.n	10007998 <_vfiprintf_r+0xf4>
100078e8:	231a      	movs	r3, #26
100078ea:	4013      	ands	r3, r2
100078ec:	2b0a      	cmp	r3, #10
100078ee:	d063      	beq.n	100079b8 <_vfiprintf_r+0x114>
100078f0:	ab15      	add	r3, sp, #84	; 0x54
100078f2:	9312      	str	r3, [sp, #72]	; 0x48
100078f4:	2300      	movs	r3, #0
100078f6:	4655      	mov	r5, sl
100078f8:	9314      	str	r3, [sp, #80]	; 0x50
100078fa:	9313      	str	r3, [sp, #76]	; 0x4c
100078fc:	930c      	str	r3, [sp, #48]	; 0x30
100078fe:	930b      	str	r3, [sp, #44]	; 0x2c
10007900:	930f      	str	r3, [sp, #60]	; 0x3c
10007902:	930e      	str	r3, [sp, #56]	; 0x38
10007904:	9303      	str	r3, [sp, #12]
10007906:	4bc7      	ldr	r3, [pc, #796]	; (10007c24 <_vfiprintf_r+0x380>)
10007908:	ae15      	add	r6, sp, #84	; 0x54
1000790a:	930a      	str	r3, [sp, #40]	; 0x28
1000790c:	4bc6      	ldr	r3, [pc, #792]	; (10007c28 <_vfiprintf_r+0x384>)
1000790e:	930d      	str	r3, [sp, #52]	; 0x34
10007910:	782b      	ldrb	r3, [r5, #0]
10007912:	2b00      	cmp	r3, #0
10007914:	d100      	bne.n	10007918 <_vfiprintf_r+0x74>
10007916:	e134      	b.n	10007b82 <_vfiprintf_r+0x2de>
10007918:	002c      	movs	r4, r5
1000791a:	e003      	b.n	10007924 <_vfiprintf_r+0x80>
1000791c:	7863      	ldrb	r3, [r4, #1]
1000791e:	3401      	adds	r4, #1
10007920:	2b00      	cmp	r3, #0
10007922:	d065      	beq.n	100079f0 <_vfiprintf_r+0x14c>
10007924:	2b25      	cmp	r3, #37	; 0x25
10007926:	d1f9      	bne.n	1000791c <_vfiprintf_r+0x78>
10007928:	1b67      	subs	r7, r4, r5
1000792a:	42ac      	cmp	r4, r5
1000792c:	d164      	bne.n	100079f8 <_vfiprintf_r+0x154>
1000792e:	7823      	ldrb	r3, [r4, #0]
10007930:	2b00      	cmp	r3, #0
10007932:	d100      	bne.n	10007936 <_vfiprintf_r+0x92>
10007934:	e125      	b.n	10007b82 <_vfiprintf_r+0x2de>
10007936:	2300      	movs	r3, #0
10007938:	aa10      	add	r2, sp, #64	; 0x40
1000793a:	70d3      	strb	r3, [r2, #3]
1000793c:	3b01      	subs	r3, #1
1000793e:	4699      	mov	r9, r3
10007940:	2300      	movs	r3, #0
10007942:	7861      	ldrb	r1, [r4, #1]
10007944:	1c65      	adds	r5, r4, #1
10007946:	464f      	mov	r7, r9
10007948:	001c      	movs	r4, r3
1000794a:	9302      	str	r3, [sp, #8]
1000794c:	3501      	adds	r5, #1
1000794e:	000b      	movs	r3, r1
10007950:	3b20      	subs	r3, #32
10007952:	2b5a      	cmp	r3, #90	; 0x5a
10007954:	d900      	bls.n	10007958 <_vfiprintf_r+0xb4>
10007956:	e081      	b.n	10007a5c <_vfiprintf_r+0x1b8>
10007958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000795a:	009b      	lsls	r3, r3, #2
1000795c:	58d3      	ldr	r3, [r2, r3]
1000795e:	469f      	mov	pc, r3
10007960:	9b01      	ldr	r3, [sp, #4]
10007962:	0018      	movs	r0, r3
10007964:	4699      	mov	r9, r3
10007966:	f004 f997 	bl	1000bc98 <_localeconv_r>
1000796a:	6843      	ldr	r3, [r0, #4]
1000796c:	0018      	movs	r0, r3
1000796e:	930e      	str	r3, [sp, #56]	; 0x38
10007970:	f7ff ff48 	bl	10007804 <strlen>
10007974:	4680      	mov	r8, r0
10007976:	900f      	str	r0, [sp, #60]	; 0x3c
10007978:	4648      	mov	r0, r9
1000797a:	f004 f98d 	bl	1000bc98 <_localeconv_r>
1000797e:	6883      	ldr	r3, [r0, #8]
10007980:	930b      	str	r3, [sp, #44]	; 0x2c
10007982:	4643      	mov	r3, r8
10007984:	2b00      	cmp	r3, #0
10007986:	d001      	beq.n	1000798c <_vfiprintf_r+0xe8>
10007988:	f000 fcfd 	bl	10008386 <_vfiprintf_r+0xae2>
1000798c:	7829      	ldrb	r1, [r5, #0]
1000798e:	e7dd      	b.n	1000794c <_vfiprintf_r+0xa8>
10007990:	2320      	movs	r3, #32
10007992:	7829      	ldrb	r1, [r5, #0]
10007994:	431c      	orrs	r4, r3
10007996:	e7d9      	b.n	1000794c <_vfiprintf_r+0xa8>
10007998:	9d00      	ldr	r5, [sp, #0]
1000799a:	9801      	ldr	r0, [sp, #4]
1000799c:	0029      	movs	r1, r5
1000799e:	f002 fc4f 	bl	1000a240 <__swsetup_r>
100079a2:	2800      	cmp	r0, #0
100079a4:	d001      	beq.n	100079aa <_vfiprintf_r+0x106>
100079a6:	f000 fe02 	bl	100085ae <_vfiprintf_r+0xd0a>
100079aa:	002b      	movs	r3, r5
100079ac:	220c      	movs	r2, #12
100079ae:	5e9a      	ldrsh	r2, [r3, r2]
100079b0:	231a      	movs	r3, #26
100079b2:	4013      	ands	r3, r2
100079b4:	2b0a      	cmp	r3, #10
100079b6:	d19b      	bne.n	100078f0 <_vfiprintf_r+0x4c>
100079b8:	9900      	ldr	r1, [sp, #0]
100079ba:	200e      	movs	r0, #14
100079bc:	5e0b      	ldrsh	r3, [r1, r0]
100079be:	2b00      	cmp	r3, #0
100079c0:	db96      	blt.n	100078f0 <_vfiprintf_r+0x4c>
100079c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
100079c4:	07db      	lsls	r3, r3, #31
100079c6:	d403      	bmi.n	100079d0 <_vfiprintf_r+0x12c>
100079c8:	0592      	lsls	r2, r2, #22
100079ca:	d401      	bmi.n	100079d0 <_vfiprintf_r+0x12c>
100079cc:	f000 fdc6 	bl	1000855c <_vfiprintf_r+0xcb8>
100079d0:	0023      	movs	r3, r4
100079d2:	4652      	mov	r2, sl
100079d4:	9900      	ldr	r1, [sp, #0]
100079d6:	9801      	ldr	r0, [sp, #4]
100079d8:	f000 fe12 	bl	10008600 <__sbprintf>
100079dc:	9003      	str	r0, [sp, #12]
100079de:	e035      	b.n	10007a4c <_vfiprintf_r+0x1a8>
100079e0:	9a02      	ldr	r2, [sp, #8]
100079e2:	9305      	str	r3, [sp, #20]
100079e4:	4252      	negs	r2, r2
100079e6:	9202      	str	r2, [sp, #8]
100079e8:	2304      	movs	r3, #4
100079ea:	7829      	ldrb	r1, [r5, #0]
100079ec:	431c      	orrs	r4, r3
100079ee:	e7ad      	b.n	1000794c <_vfiprintf_r+0xa8>
100079f0:	1b67      	subs	r7, r4, r5
100079f2:	42ac      	cmp	r4, r5
100079f4:	d100      	bne.n	100079f8 <_vfiprintf_r+0x154>
100079f6:	e0c4      	b.n	10007b82 <_vfiprintf_r+0x2de>
100079f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
100079fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100079fc:	18ba      	adds	r2, r7, r2
100079fe:	3301      	adds	r3, #1
10007a00:	6035      	str	r5, [r6, #0]
10007a02:	6077      	str	r7, [r6, #4]
10007a04:	9214      	str	r2, [sp, #80]	; 0x50
10007a06:	9313      	str	r3, [sp, #76]	; 0x4c
10007a08:	3608      	adds	r6, #8
10007a0a:	2b07      	cmp	r3, #7
10007a0c:	dd03      	ble.n	10007a16 <_vfiprintf_r+0x172>
10007a0e:	2a00      	cmp	r2, #0
10007a10:	d107      	bne.n	10007a22 <_vfiprintf_r+0x17e>
10007a12:	9213      	str	r2, [sp, #76]	; 0x4c
10007a14:	ae15      	add	r6, sp, #84	; 0x54
10007a16:	9b03      	ldr	r3, [sp, #12]
10007a18:	469c      	mov	ip, r3
10007a1a:	44bc      	add	ip, r7
10007a1c:	4663      	mov	r3, ip
10007a1e:	9303      	str	r3, [sp, #12]
10007a20:	e785      	b.n	1000792e <_vfiprintf_r+0x8a>
10007a22:	9900      	ldr	r1, [sp, #0]
10007a24:	9801      	ldr	r0, [sp, #4]
10007a26:	aa12      	add	r2, sp, #72	; 0x48
10007a28:	f003 ff8a 	bl	1000b940 <__sfvwrite_r>
10007a2c:	2300      	movs	r3, #0
10007a2e:	9314      	str	r3, [sp, #80]	; 0x50
10007a30:	9313      	str	r3, [sp, #76]	; 0x4c
10007a32:	2800      	cmp	r0, #0
10007a34:	d0ee      	beq.n	10007a14 <_vfiprintf_r+0x170>
10007a36:	9a00      	ldr	r2, [sp, #0]
10007a38:	210c      	movs	r1, #12
10007a3a:	5e53      	ldrsh	r3, [r2, r1]
10007a3c:	6e52      	ldr	r2, [r2, #100]	; 0x64
10007a3e:	07d2      	lsls	r2, r2, #31
10007a40:	d400      	bmi.n	10007a44 <_vfiprintf_r+0x1a0>
10007a42:	e0b5      	b.n	10007bb0 <_vfiprintf_r+0x30c>
10007a44:	065b      	lsls	r3, r3, #25
10007a46:	d501      	bpl.n	10007a4c <_vfiprintf_r+0x1a8>
10007a48:	f000 fdbd 	bl	100085c6 <_vfiprintf_r+0xd22>
10007a4c:	9803      	ldr	r0, [sp, #12]
10007a4e:	b03f      	add	sp, #252	; 0xfc
10007a50:	bcf0      	pop	{r4, r5, r6, r7}
10007a52:	46bb      	mov	fp, r7
10007a54:	46b2      	mov	sl, r6
10007a56:	46a9      	mov	r9, r5
10007a58:	46a0      	mov	r8, r4
10007a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007a5c:	46a3      	mov	fp, r4
10007a5e:	2900      	cmp	r1, #0
10007a60:	d100      	bne.n	10007a64 <_vfiprintf_r+0x1c0>
10007a62:	e08e      	b.n	10007b82 <_vfiprintf_r+0x2de>
10007a64:	2300      	movs	r3, #0
10007a66:	aa10      	add	r2, sp, #64	; 0x40
10007a68:	70d3      	strb	r3, [r2, #3]
10007a6a:	3301      	adds	r3, #1
10007a6c:	469a      	mov	sl, r3
10007a6e:	ac25      	add	r4, sp, #148	; 0x94
10007a70:	7021      	strb	r1, [r4, #0]
10007a72:	9304      	str	r3, [sp, #16]
10007a74:	2300      	movs	r3, #0
10007a76:	4699      	mov	r9, r3
10007a78:	2302      	movs	r3, #2
10007a7a:	465a      	mov	r2, fp
10007a7c:	401a      	ands	r2, r3
10007a7e:	9206      	str	r2, [sp, #24]
10007a80:	465a      	mov	r2, fp
10007a82:	4213      	tst	r3, r2
10007a84:	d001      	beq.n	10007a8a <_vfiprintf_r+0x1e6>
10007a86:	469c      	mov	ip, r3
10007a88:	44e2      	add	sl, ip
10007a8a:	2784      	movs	r7, #132	; 0x84
10007a8c:	465b      	mov	r3, fp
10007a8e:	4659      	mov	r1, fp
10007a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10007a92:	403b      	ands	r3, r7
10007a94:	9307      	str	r3, [sp, #28]
10007a96:	1c53      	adds	r3, r2, #1
10007a98:	469c      	mov	ip, r3
10007a9a:	0018      	movs	r0, r3
10007a9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
10007a9e:	420f      	tst	r7, r1
10007aa0:	d105      	bne.n	10007aae <_vfiprintf_r+0x20a>
10007aa2:	4657      	mov	r7, sl
10007aa4:	9902      	ldr	r1, [sp, #8]
10007aa6:	1bcf      	subs	r7, r1, r7
10007aa8:	2f00      	cmp	r7, #0
10007aaa:	dd00      	ble.n	10007aae <_vfiprintf_r+0x20a>
10007aac:	e3b5      	b.n	1000821a <_vfiprintf_r+0x976>
10007aae:	a910      	add	r1, sp, #64	; 0x40
10007ab0:	78c9      	ldrb	r1, [r1, #3]
10007ab2:	2900      	cmp	r1, #0
10007ab4:	d100      	bne.n	10007ab8 <_vfiprintf_r+0x214>
10007ab6:	e291      	b.n	10007fdc <_vfiprintf_r+0x738>
10007ab8:	aa10      	add	r2, sp, #64	; 0x40
10007aba:	3203      	adds	r2, #3
10007abc:	6032      	str	r2, [r6, #0]
10007abe:	2201      	movs	r2, #1
10007ac0:	3301      	adds	r3, #1
10007ac2:	6072      	str	r2, [r6, #4]
10007ac4:	9314      	str	r3, [sp, #80]	; 0x50
10007ac6:	9013      	str	r0, [sp, #76]	; 0x4c
10007ac8:	2807      	cmp	r0, #7
10007aca:	dc00      	bgt.n	10007ace <_vfiprintf_r+0x22a>
10007acc:	e283      	b.n	10007fd6 <_vfiprintf_r+0x732>
10007ace:	2b00      	cmp	r3, #0
10007ad0:	d009      	beq.n	10007ae6 <_vfiprintf_r+0x242>
10007ad2:	9900      	ldr	r1, [sp, #0]
10007ad4:	9801      	ldr	r0, [sp, #4]
10007ad6:	aa12      	add	r2, sp, #72	; 0x48
10007ad8:	f003 ff32 	bl	1000b940 <__sfvwrite_r>
10007adc:	2300      	movs	r3, #0
10007ade:	9314      	str	r3, [sp, #80]	; 0x50
10007ae0:	9313      	str	r3, [sp, #76]	; 0x4c
10007ae2:	2800      	cmp	r0, #0
10007ae4:	d1a7      	bne.n	10007a36 <_vfiprintf_r+0x192>
10007ae6:	9b06      	ldr	r3, [sp, #24]
10007ae8:	2b00      	cmp	r3, #0
10007aea:	d100      	bne.n	10007aee <_vfiprintf_r+0x24a>
10007aec:	e287      	b.n	10007ffe <_vfiprintf_r+0x75a>
10007aee:	ab11      	add	r3, sp, #68	; 0x44
10007af0:	9315      	str	r3, [sp, #84]	; 0x54
10007af2:	2302      	movs	r3, #2
10007af4:	2001      	movs	r0, #1
10007af6:	9316      	str	r3, [sp, #88]	; 0x58
10007af8:	ae15      	add	r6, sp, #84	; 0x54
10007afa:	0002      	movs	r2, r0
10007afc:	3608      	adds	r6, #8
10007afe:	3001      	adds	r0, #1
10007b00:	9907      	ldr	r1, [sp, #28]
10007b02:	2980      	cmp	r1, #128	; 0x80
10007b04:	d100      	bne.n	10007b08 <_vfiprintf_r+0x264>
10007b06:	e282      	b.n	1000800e <_vfiprintf_r+0x76a>
10007b08:	4649      	mov	r1, r9
10007b0a:	9f04      	ldr	r7, [sp, #16]
10007b0c:	1bcf      	subs	r7, r1, r7
10007b0e:	2f00      	cmp	r7, #0
10007b10:	dd00      	ble.n	10007b14 <_vfiprintf_r+0x270>
10007b12:	e2b8      	b.n	10008086 <_vfiprintf_r+0x7e2>
10007b14:	9a04      	ldr	r2, [sp, #16]
10007b16:	6034      	str	r4, [r6, #0]
10007b18:	4694      	mov	ip, r2
10007b1a:	4463      	add	r3, ip
10007b1c:	6072      	str	r2, [r6, #4]
10007b1e:	9314      	str	r3, [sp, #80]	; 0x50
10007b20:	9013      	str	r0, [sp, #76]	; 0x4c
10007b22:	2807      	cmp	r0, #7
10007b24:	dc00      	bgt.n	10007b28 <_vfiprintf_r+0x284>
10007b26:	e2f2      	b.n	1000810e <_vfiprintf_r+0x86a>
10007b28:	2b00      	cmp	r3, #0
10007b2a:	d000      	beq.n	10007b2e <_vfiprintf_r+0x28a>
10007b2c:	e357      	b.n	100081de <_vfiprintf_r+0x93a>
10007b2e:	9313      	str	r3, [sp, #76]	; 0x4c
10007b30:	465b      	mov	r3, fp
10007b32:	075b      	lsls	r3, r3, #29
10007b34:	d400      	bmi.n	10007b38 <_vfiprintf_r+0x294>
10007b36:	e329      	b.n	1000818c <_vfiprintf_r+0x8e8>
10007b38:	4650      	mov	r0, sl
10007b3a:	9902      	ldr	r1, [sp, #8]
10007b3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
10007b3e:	aa15      	add	r2, sp, #84	; 0x54
10007b40:	1a0c      	subs	r4, r1, r0
10007b42:	2c00      	cmp	r4, #0
10007b44:	dd00      	ble.n	10007b48 <_vfiprintf_r+0x2a4>
10007b46:	e2ee      	b.n	10008126 <_vfiprintf_r+0x882>
10007b48:	9a02      	ldr	r2, [sp, #8]
10007b4a:	4552      	cmp	r2, sl
10007b4c:	da00      	bge.n	10007b50 <_vfiprintf_r+0x2ac>
10007b4e:	4652      	mov	r2, sl
10007b50:	9903      	ldr	r1, [sp, #12]
10007b52:	468c      	mov	ip, r1
10007b54:	4494      	add	ip, r2
10007b56:	4662      	mov	r2, ip
10007b58:	9203      	str	r2, [sp, #12]
10007b5a:	2b00      	cmp	r3, #0
10007b5c:	d00a      	beq.n	10007b74 <_vfiprintf_r+0x2d0>
10007b5e:	9900      	ldr	r1, [sp, #0]
10007b60:	9801      	ldr	r0, [sp, #4]
10007b62:	aa12      	add	r2, sp, #72	; 0x48
10007b64:	f003 feec 	bl	1000b940 <__sfvwrite_r>
10007b68:	2300      	movs	r3, #0
10007b6a:	9314      	str	r3, [sp, #80]	; 0x50
10007b6c:	9313      	str	r3, [sp, #76]	; 0x4c
10007b6e:	2800      	cmp	r0, #0
10007b70:	d000      	beq.n	10007b74 <_vfiprintf_r+0x2d0>
10007b72:	e760      	b.n	10007a36 <_vfiprintf_r+0x192>
10007b74:	2300      	movs	r3, #0
10007b76:	9313      	str	r3, [sp, #76]	; 0x4c
10007b78:	782b      	ldrb	r3, [r5, #0]
10007b7a:	ae15      	add	r6, sp, #84	; 0x54
10007b7c:	2b00      	cmp	r3, #0
10007b7e:	d000      	beq.n	10007b82 <_vfiprintf_r+0x2de>
10007b80:	e6ca      	b.n	10007918 <_vfiprintf_r+0x74>
10007b82:	9b14      	ldr	r3, [sp, #80]	; 0x50
10007b84:	2b00      	cmp	r3, #0
10007b86:	d001      	beq.n	10007b8c <_vfiprintf_r+0x2e8>
10007b88:	f000 fcfa 	bl	10008580 <_vfiprintf_r+0xcdc>
10007b8c:	2300      	movs	r3, #0
10007b8e:	9313      	str	r3, [sp, #76]	; 0x4c
10007b90:	e751      	b.n	10007a36 <_vfiprintf_r+0x192>
10007b92:	000a      	movs	r2, r1
10007b94:	2000      	movs	r0, #0
10007b96:	3a30      	subs	r2, #48	; 0x30
10007b98:	0083      	lsls	r3, r0, #2
10007b9a:	7829      	ldrb	r1, [r5, #0]
10007b9c:	181b      	adds	r3, r3, r0
10007b9e:	005b      	lsls	r3, r3, #1
10007ba0:	18d0      	adds	r0, r2, r3
10007ba2:	000a      	movs	r2, r1
10007ba4:	3a30      	subs	r2, #48	; 0x30
10007ba6:	3501      	adds	r5, #1
10007ba8:	2a09      	cmp	r2, #9
10007baa:	d9f5      	bls.n	10007b98 <_vfiprintf_r+0x2f4>
10007bac:	9002      	str	r0, [sp, #8]
10007bae:	e6ce      	b.n	1000794e <_vfiprintf_r+0xaa>
10007bb0:	059a      	lsls	r2, r3, #22
10007bb2:	d500      	bpl.n	10007bb6 <_vfiprintf_r+0x312>
10007bb4:	e746      	b.n	10007a44 <_vfiprintf_r+0x1a0>
10007bb6:	9c00      	ldr	r4, [sp, #0]
10007bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
10007bba:	f005 fb50 	bl	1000d25e <__retarget_lock_release_recursive>
10007bbe:	220c      	movs	r2, #12
10007bc0:	5ea3      	ldrsh	r3, [r4, r2]
10007bc2:	e73f      	b.n	10007a44 <_vfiprintf_r+0x1a0>
10007bc4:	46b9      	mov	r9, r7
10007bc6:	2300      	movs	r3, #0
10007bc8:	9f05      	ldr	r7, [sp, #20]
10007bca:	46a3      	mov	fp, r4
10007bcc:	cf10      	ldmia	r7!, {r4}
10007bce:	aa10      	add	r2, sp, #64	; 0x40
10007bd0:	70d3      	strb	r3, [r2, #3]
10007bd2:	464b      	mov	r3, r9
10007bd4:	2c00      	cmp	r4, #0
10007bd6:	d101      	bne.n	10007bdc <_vfiprintf_r+0x338>
10007bd8:	f000 fc95 	bl	10008506 <_vfiprintf_r+0xc62>
10007bdc:	3301      	adds	r3, #1
10007bde:	d101      	bne.n	10007be4 <_vfiprintf_r+0x340>
10007be0:	f000 fc4d 	bl	1000847e <_vfiprintf_r+0xbda>
10007be4:	464a      	mov	r2, r9
10007be6:	2100      	movs	r1, #0
10007be8:	0020      	movs	r0, r4
10007bea:	f004 f8b9 	bl	1000bd60 <memchr>
10007bee:	2800      	cmp	r0, #0
10007bf0:	d101      	bne.n	10007bf6 <_vfiprintf_r+0x352>
10007bf2:	f000 fcb8 	bl	10008566 <_vfiprintf_r+0xcc2>
10007bf6:	1b02      	subs	r2, r0, r4
10007bf8:	43d3      	mvns	r3, r2
10007bfa:	17db      	asrs	r3, r3, #31
10007bfc:	9204      	str	r2, [sp, #16]
10007bfe:	401a      	ands	r2, r3
10007c00:	2300      	movs	r3, #0
10007c02:	4692      	mov	sl, r2
10007c04:	4699      	mov	r9, r3
10007c06:	9705      	str	r7, [sp, #20]
10007c08:	e07b      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007c0a:	9b05      	ldr	r3, [sp, #20]
10007c0c:	46a3      	mov	fp, r4
10007c0e:	cb04      	ldmia	r3!, {r2}
10007c10:	ac25      	add	r4, sp, #148	; 0x94
10007c12:	7022      	strb	r2, [r4, #0]
10007c14:	9305      	str	r3, [sp, #20]
10007c16:	2200      	movs	r2, #0
10007c18:	2301      	movs	r3, #1
10007c1a:	a910      	add	r1, sp, #64	; 0x40
10007c1c:	469a      	mov	sl, r3
10007c1e:	70ca      	strb	r2, [r1, #3]
10007c20:	9304      	str	r3, [sp, #16]
10007c22:	e727      	b.n	10007a74 <_vfiprintf_r+0x1d0>
10007c24:	1000e710 	.word	0x1000e710
10007c28:	1000e87c 	.word	0x1000e87c
10007c2c:	46a3      	mov	fp, r4
10007c2e:	465b      	mov	r3, fp
10007c30:	46b9      	mov	r9, r7
10007c32:	9a05      	ldr	r2, [sp, #20]
10007c34:	069b      	lsls	r3, r3, #26
10007c36:	d573      	bpl.n	10007d20 <_vfiprintf_r+0x47c>
10007c38:	2307      	movs	r3, #7
10007c3a:	3207      	adds	r2, #7
10007c3c:	439a      	bics	r2, r3
10007c3e:	3301      	adds	r3, #1
10007c40:	469c      	mov	ip, r3
10007c42:	4494      	add	ip, r2
10007c44:	4663      	mov	r3, ip
10007c46:	9305      	str	r3, [sp, #20]
10007c48:	6853      	ldr	r3, [r2, #4]
10007c4a:	6812      	ldr	r2, [r2, #0]
10007c4c:	9309      	str	r3, [sp, #36]	; 0x24
10007c4e:	9208      	str	r2, [sp, #32]
10007c50:	2b00      	cmp	r3, #0
10007c52:	da00      	bge.n	10007c56 <_vfiprintf_r+0x3b2>
10007c54:	e13a      	b.n	10007ecc <_vfiprintf_r+0x628>
10007c56:	464b      	mov	r3, r9
10007c58:	3301      	adds	r3, #1
10007c5a:	d100      	bne.n	10007c5e <_vfiprintf_r+0x3ba>
10007c5c:	e147      	b.n	10007eee <_vfiprintf_r+0x64a>
10007c5e:	2380      	movs	r3, #128	; 0x80
10007c60:	465a      	mov	r2, fp
10007c62:	439a      	bics	r2, r3
10007c64:	4693      	mov	fp, r2
10007c66:	9a08      	ldr	r2, [sp, #32]
10007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007c6a:	0011      	movs	r1, r2
10007c6c:	4319      	orrs	r1, r3
10007c6e:	d000      	beq.n	10007c72 <_vfiprintf_r+0x3ce>
10007c70:	e13d      	b.n	10007eee <_vfiprintf_r+0x64a>
10007c72:	464b      	mov	r3, r9
10007c74:	2b00      	cmp	r3, #0
10007c76:	d001      	beq.n	10007c7c <_vfiprintf_r+0x3d8>
10007c78:	f000 fc7d 	bl	10008576 <_vfiprintf_r+0xcd2>
10007c7c:	46ca      	mov	sl, r9
10007c7e:	9304      	str	r3, [sp, #16]
10007c80:	ac3e      	add	r4, sp, #248	; 0xf8
10007c82:	e03e      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007c84:	f003 fc8c 	bl	1000b5a0 <__sinit>
10007c88:	e61e      	b.n	100078c8 <_vfiprintf_r+0x24>
10007c8a:	2110      	movs	r1, #16
10007c8c:	0023      	movs	r3, r4
10007c8e:	430b      	orrs	r3, r1
10007c90:	46b9      	mov	r9, r7
10007c92:	0019      	movs	r1, r3
10007c94:	9a05      	ldr	r2, [sp, #20]
10007c96:	068b      	lsls	r3, r1, #26
10007c98:	d400      	bmi.n	10007c9c <_vfiprintf_r+0x3f8>
10007c9a:	e331      	b.n	10008300 <_vfiprintf_r+0xa5c>
10007c9c:	2307      	movs	r3, #7
10007c9e:	3207      	adds	r2, #7
10007ca0:	439a      	bics	r2, r3
10007ca2:	3301      	adds	r3, #1
10007ca4:	469c      	mov	ip, r3
10007ca6:	4494      	add	ip, r2
10007ca8:	4663      	mov	r3, ip
10007caa:	9305      	str	r3, [sp, #20]
10007cac:	6813      	ldr	r3, [r2, #0]
10007cae:	6852      	ldr	r2, [r2, #4]
10007cb0:	48bd      	ldr	r0, [pc, #756]	; (10007fa8 <_vfiprintf_r+0x704>)
10007cb2:	ac10      	add	r4, sp, #64	; 0x40
10007cb4:	4008      	ands	r0, r1
10007cb6:	4683      	mov	fp, r0
10007cb8:	2000      	movs	r0, #0
10007cba:	70e0      	strb	r0, [r4, #3]
10007cbc:	4648      	mov	r0, r9
10007cbe:	3001      	adds	r0, #1
10007cc0:	d074      	beq.n	10007dac <_vfiprintf_r+0x508>
10007cc2:	48ba      	ldr	r0, [pc, #744]	; (10007fac <_vfiprintf_r+0x708>)
10007cc4:	4001      	ands	r1, r0
10007cc6:	0018      	movs	r0, r3
10007cc8:	4310      	orrs	r0, r2
10007cca:	d001      	beq.n	10007cd0 <_vfiprintf_r+0x42c>
10007ccc:	f000 fc07 	bl	100084de <_vfiprintf_r+0xc3a>
10007cd0:	465b      	mov	r3, fp
10007cd2:	2200      	movs	r2, #0
10007cd4:	468b      	mov	fp, r1
10007cd6:	4649      	mov	r1, r9
10007cd8:	2900      	cmp	r1, #0
10007cda:	d15f      	bne.n	10007d9c <_vfiprintf_r+0x4f8>
10007cdc:	2a00      	cmp	r2, #0
10007cde:	d000      	beq.n	10007ce2 <_vfiprintf_r+0x43e>
10007ce0:	e324      	b.n	1000832c <_vfiprintf_r+0xa88>
10007ce2:	3201      	adds	r2, #1
10007ce4:	0010      	movs	r0, r2
10007ce6:	4018      	ands	r0, r3
10007ce8:	9004      	str	r0, [sp, #16]
10007cea:	421a      	tst	r2, r3
10007cec:	d100      	bne.n	10007cf0 <_vfiprintf_r+0x44c>
10007cee:	e322      	b.n	10008336 <_vfiprintf_r+0xa92>
10007cf0:	2363      	movs	r3, #99	; 0x63
10007cf2:	2130      	movs	r1, #48	; 0x30
10007cf4:	aa25      	add	r2, sp, #148	; 0x94
10007cf6:	54d1      	strb	r1, [r2, r3]
10007cf8:	ab10      	add	r3, sp, #64	; 0x40
10007cfa:	24b7      	movs	r4, #183	; 0xb7
10007cfc:	469c      	mov	ip, r3
10007cfe:	4682      	mov	sl, r0
10007d00:	4464      	add	r4, ip
10007d02:	ab10      	add	r3, sp, #64	; 0x40
10007d04:	78db      	ldrb	r3, [r3, #3]
10007d06:	1e5a      	subs	r2, r3, #1
10007d08:	4193      	sbcs	r3, r2
10007d0a:	449a      	add	sl, r3
10007d0c:	e6b4      	b.n	10007a78 <_vfiprintf_r+0x1d4>
10007d0e:	2310      	movs	r3, #16
10007d10:	0022      	movs	r2, r4
10007d12:	431a      	orrs	r2, r3
10007d14:	4693      	mov	fp, r2
10007d16:	465b      	mov	r3, fp
10007d18:	46b9      	mov	r9, r7
10007d1a:	9a05      	ldr	r2, [sp, #20]
10007d1c:	069b      	lsls	r3, r3, #26
10007d1e:	d48b      	bmi.n	10007c38 <_vfiprintf_r+0x394>
10007d20:	ca08      	ldmia	r2!, {r3}
10007d22:	9205      	str	r2, [sp, #20]
10007d24:	465a      	mov	r2, fp
10007d26:	06d2      	lsls	r2, r2, #27
10007d28:	d500      	bpl.n	10007d2c <_vfiprintf_r+0x488>
10007d2a:	e2fb      	b.n	10008324 <_vfiprintf_r+0xa80>
10007d2c:	465a      	mov	r2, fp
10007d2e:	0652      	lsls	r2, r2, #25
10007d30:	d400      	bmi.n	10007d34 <_vfiprintf_r+0x490>
10007d32:	e2f3      	b.n	1000831c <_vfiprintf_r+0xa78>
10007d34:	b21b      	sxth	r3, r3
10007d36:	9308      	str	r3, [sp, #32]
10007d38:	17db      	asrs	r3, r3, #31
10007d3a:	9309      	str	r3, [sp, #36]	; 0x24
10007d3c:	e788      	b.n	10007c50 <_vfiprintf_r+0x3ac>
10007d3e:	7829      	ldrb	r1, [r5, #0]
10007d40:	2968      	cmp	r1, #104	; 0x68
10007d42:	d100      	bne.n	10007d46 <_vfiprintf_r+0x4a2>
10007d44:	e3cd      	b.n	100084e2 <_vfiprintf_r+0xc3e>
10007d46:	2340      	movs	r3, #64	; 0x40
10007d48:	431c      	orrs	r4, r3
10007d4a:	e5ff      	b.n	1000794c <_vfiprintf_r+0xa8>
10007d4c:	2310      	movs	r3, #16
10007d4e:	0022      	movs	r2, r4
10007d50:	431a      	orrs	r2, r3
10007d52:	46b9      	mov	r9, r7
10007d54:	0013      	movs	r3, r2
10007d56:	069a      	lsls	r2, r3, #26
10007d58:	d400      	bmi.n	10007d5c <_vfiprintf_r+0x4b8>
10007d5a:	e2c4      	b.n	100082e6 <_vfiprintf_r+0xa42>
10007d5c:	2107      	movs	r1, #7
10007d5e:	9a05      	ldr	r2, [sp, #20]
10007d60:	3207      	adds	r2, #7
10007d62:	438a      	bics	r2, r1
10007d64:	0010      	movs	r0, r2
10007d66:	c806      	ldmia	r0!, {r1, r2}
10007d68:	9108      	str	r1, [sp, #32]
10007d6a:	9209      	str	r2, [sp, #36]	; 0x24
10007d6c:	9005      	str	r0, [sp, #20]
10007d6e:	2200      	movs	r2, #0
10007d70:	a910      	add	r1, sp, #64	; 0x40
10007d72:	70ca      	strb	r2, [r1, #3]
10007d74:	464a      	mov	r2, r9
10007d76:	469b      	mov	fp, r3
10007d78:	3201      	adds	r2, #1
10007d7a:	d100      	bne.n	10007d7e <_vfiprintf_r+0x4da>
10007d7c:	e0b7      	b.n	10007eee <_vfiprintf_r+0x64a>
10007d7e:	2280      	movs	r2, #128	; 0x80
10007d80:	0019      	movs	r1, r3
10007d82:	4391      	bics	r1, r2
10007d84:	468b      	mov	fp, r1
10007d86:	9908      	ldr	r1, [sp, #32]
10007d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
10007d8a:	0008      	movs	r0, r1
10007d8c:	4310      	orrs	r0, r2
10007d8e:	1e02      	subs	r2, r0, #0
10007d90:	d000      	beq.n	10007d94 <_vfiprintf_r+0x4f0>
10007d92:	e0ac      	b.n	10007eee <_vfiprintf_r+0x64a>
10007d94:	4649      	mov	r1, r9
10007d96:	3201      	adds	r2, #1
10007d98:	2900      	cmp	r1, #0
10007d9a:	d09f      	beq.n	10007cdc <_vfiprintf_r+0x438>
10007d9c:	2a01      	cmp	r2, #1
10007d9e:	d100      	bne.n	10007da2 <_vfiprintf_r+0x4fe>
10007da0:	e3e9      	b.n	10008576 <_vfiprintf_r+0xcd2>
10007da2:	2300      	movs	r3, #0
10007da4:	2a02      	cmp	r2, #2
10007da6:	d100      	bne.n	10007daa <_vfiprintf_r+0x506>
10007da8:	e3b8      	b.n	1000851c <_vfiprintf_r+0xc78>
10007daa:	2200      	movs	r2, #0
10007dac:	2107      	movs	r1, #7
10007dae:	468c      	mov	ip, r1
10007db0:	ac3e      	add	r4, sp, #248	; 0xf8
10007db2:	4661      	mov	r1, ip
10007db4:	0750      	lsls	r0, r2, #29
10007db6:	4019      	ands	r1, r3
10007db8:	08db      	lsrs	r3, r3, #3
10007dba:	4303      	orrs	r3, r0
10007dbc:	0018      	movs	r0, r3
10007dbe:	0027      	movs	r7, r4
10007dc0:	3130      	adds	r1, #48	; 0x30
10007dc2:	3c01      	subs	r4, #1
10007dc4:	08d2      	lsrs	r2, r2, #3
10007dc6:	7021      	strb	r1, [r4, #0]
10007dc8:	4310      	orrs	r0, r2
10007dca:	d1f2      	bne.n	10007db2 <_vfiprintf_r+0x50e>
10007dcc:	465b      	mov	r3, fp
10007dce:	07db      	lsls	r3, r3, #31
10007dd0:	d400      	bmi.n	10007dd4 <_vfiprintf_r+0x530>
10007dd2:	e0e0      	b.n	10007f96 <_vfiprintf_r+0x6f2>
10007dd4:	2930      	cmp	r1, #48	; 0x30
10007dd6:	d100      	bne.n	10007dda <_vfiprintf_r+0x536>
10007dd8:	e0dd      	b.n	10007f96 <_vfiprintf_r+0x6f2>
10007dda:	2330      	movs	r3, #48	; 0x30
10007ddc:	3c01      	subs	r4, #1
10007dde:	3f02      	subs	r7, #2
10007de0:	7023      	strb	r3, [r4, #0]
10007de2:	ab3e      	add	r3, sp, #248	; 0xf8
10007de4:	1bdb      	subs	r3, r3, r7
10007de6:	469a      	mov	sl, r3
10007de8:	9304      	str	r3, [sp, #16]
10007dea:	454b      	cmp	r3, r9
10007dec:	da00      	bge.n	10007df0 <_vfiprintf_r+0x54c>
10007dee:	e2f8      	b.n	100083e2 <_vfiprintf_r+0xb3e>
10007df0:	003c      	movs	r4, r7
10007df2:	e786      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007df4:	2002      	movs	r0, #2
10007df6:	46b9      	mov	r9, r7
10007df8:	2200      	movs	r2, #0
10007dfa:	9905      	ldr	r1, [sp, #20]
10007dfc:	4304      	orrs	r4, r0
10007dfe:	c908      	ldmia	r1!, {r3}
10007e00:	46a3      	mov	fp, r4
10007e02:	9105      	str	r1, [sp, #20]
10007e04:	4c6a      	ldr	r4, [pc, #424]	; (10007fb0 <_vfiprintf_r+0x70c>)
10007e06:	496b      	ldr	r1, [pc, #428]	; (10007fb4 <_vfiprintf_r+0x710>)
10007e08:	a811      	add	r0, sp, #68	; 0x44
10007e0a:	8004      	strh	r4, [r0, #0]
10007e0c:	910c      	str	r1, [sp, #48]	; 0x30
10007e0e:	2100      	movs	r1, #0
10007e10:	a810      	add	r0, sp, #64	; 0x40
10007e12:	70c1      	strb	r1, [r0, #3]
10007e14:	4649      	mov	r1, r9
10007e16:	3101      	adds	r1, #1
10007e18:	d100      	bne.n	10007e1c <_vfiprintf_r+0x578>
10007e1a:	e1ee      	b.n	100081fa <_vfiprintf_r+0x956>
10007e1c:	2180      	movs	r1, #128	; 0x80
10007e1e:	4658      	mov	r0, fp
10007e20:	4388      	bics	r0, r1
10007e22:	0001      	movs	r1, r0
10007e24:	0018      	movs	r0, r3
10007e26:	4310      	orrs	r0, r2
10007e28:	d000      	beq.n	10007e2c <_vfiprintf_r+0x588>
10007e2a:	e1e5      	b.n	100081f8 <_vfiprintf_r+0x954>
10007e2c:	465b      	mov	r3, fp
10007e2e:	2202      	movs	r2, #2
10007e30:	468b      	mov	fp, r1
10007e32:	e750      	b.n	10007cd6 <_vfiprintf_r+0x432>
10007e34:	2380      	movs	r3, #128	; 0x80
10007e36:	7829      	ldrb	r1, [r5, #0]
10007e38:	431c      	orrs	r4, r3
10007e3a:	e587      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e3c:	0023      	movs	r3, r4
10007e3e:	069b      	lsls	r3, r3, #26
10007e40:	d400      	bmi.n	10007e44 <_vfiprintf_r+0x5a0>
10007e42:	e28f      	b.n	10008364 <_vfiprintf_r+0xac0>
10007e44:	9b05      	ldr	r3, [sp, #20]
10007e46:	9a03      	ldr	r2, [sp, #12]
10007e48:	681b      	ldr	r3, [r3, #0]
10007e4a:	601a      	str	r2, [r3, #0]
10007e4c:	17d2      	asrs	r2, r2, #31
10007e4e:	605a      	str	r2, [r3, #4]
10007e50:	9b05      	ldr	r3, [sp, #20]
10007e52:	3304      	adds	r3, #4
10007e54:	9305      	str	r3, [sp, #20]
10007e56:	e55b      	b.n	10007910 <_vfiprintf_r+0x6c>
10007e58:	7829      	ldrb	r1, [r5, #0]
10007e5a:	296c      	cmp	r1, #108	; 0x6c
10007e5c:	d100      	bne.n	10007e60 <_vfiprintf_r+0x5bc>
10007e5e:	e347      	b.n	100084f0 <_vfiprintf_r+0xc4c>
10007e60:	2310      	movs	r3, #16
10007e62:	431c      	orrs	r4, r3
10007e64:	e572      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e66:	9b05      	ldr	r3, [sp, #20]
10007e68:	cb04      	ldmia	r3!, {r2}
10007e6a:	9202      	str	r2, [sp, #8]
10007e6c:	2a00      	cmp	r2, #0
10007e6e:	da00      	bge.n	10007e72 <_vfiprintf_r+0x5ce>
10007e70:	e5b6      	b.n	100079e0 <_vfiprintf_r+0x13c>
10007e72:	7829      	ldrb	r1, [r5, #0]
10007e74:	9305      	str	r3, [sp, #20]
10007e76:	e569      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e78:	2301      	movs	r3, #1
10007e7a:	7829      	ldrb	r1, [r5, #0]
10007e7c:	431c      	orrs	r4, r3
10007e7e:	e565      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e80:	ab10      	add	r3, sp, #64	; 0x40
10007e82:	78db      	ldrb	r3, [r3, #3]
10007e84:	7829      	ldrb	r1, [r5, #0]
10007e86:	2b00      	cmp	r3, #0
10007e88:	d000      	beq.n	10007e8c <_vfiprintf_r+0x5e8>
10007e8a:	e55f      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e8c:	3320      	adds	r3, #32
10007e8e:	aa10      	add	r2, sp, #64	; 0x40
10007e90:	70d3      	strb	r3, [r2, #3]
10007e92:	e55b      	b.n	1000794c <_vfiprintf_r+0xa8>
10007e94:	7829      	ldrb	r1, [r5, #0]
10007e96:	1c6b      	adds	r3, r5, #1
10007e98:	292a      	cmp	r1, #42	; 0x2a
10007e9a:	d100      	bne.n	10007e9e <_vfiprintf_r+0x5fa>
10007e9c:	e398      	b.n	100085d0 <_vfiprintf_r+0xd2c>
10007e9e:	000a      	movs	r2, r1
10007ea0:	3a30      	subs	r2, #48	; 0x30
10007ea2:	001d      	movs	r5, r3
10007ea4:	2700      	movs	r7, #0
10007ea6:	2a09      	cmp	r2, #9
10007ea8:	d900      	bls.n	10007eac <_vfiprintf_r+0x608>
10007eaa:	e550      	b.n	1000794e <_vfiprintf_r+0xaa>
10007eac:	00bb      	lsls	r3, r7, #2
10007eae:	7829      	ldrb	r1, [r5, #0]
10007eb0:	19db      	adds	r3, r3, r7
10007eb2:	005b      	lsls	r3, r3, #1
10007eb4:	189f      	adds	r7, r3, r2
10007eb6:	000a      	movs	r2, r1
10007eb8:	3a30      	subs	r2, #48	; 0x30
10007eba:	3501      	adds	r5, #1
10007ebc:	2a09      	cmp	r2, #9
10007ebe:	d9f5      	bls.n	10007eac <_vfiprintf_r+0x608>
10007ec0:	e545      	b.n	1000794e <_vfiprintf_r+0xaa>
10007ec2:	232b      	movs	r3, #43	; 0x2b
10007ec4:	aa10      	add	r2, sp, #64	; 0x40
10007ec6:	7829      	ldrb	r1, [r5, #0]
10007ec8:	70d3      	strb	r3, [r2, #3]
10007eca:	e53f      	b.n	1000794c <_vfiprintf_r+0xa8>
10007ecc:	9908      	ldr	r1, [sp, #32]
10007ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
10007ed0:	2400      	movs	r4, #0
10007ed2:	424b      	negs	r3, r1
10007ed4:	4194      	sbcs	r4, r2
10007ed6:	9308      	str	r3, [sp, #32]
10007ed8:	9409      	str	r4, [sp, #36]	; 0x24
10007eda:	232d      	movs	r3, #45	; 0x2d
10007edc:	aa10      	add	r2, sp, #64	; 0x40
10007ede:	70d3      	strb	r3, [r2, #3]
10007ee0:	464b      	mov	r3, r9
10007ee2:	3301      	adds	r3, #1
10007ee4:	d003      	beq.n	10007eee <_vfiprintf_r+0x64a>
10007ee6:	465a      	mov	r2, fp
10007ee8:	2380      	movs	r3, #128	; 0x80
10007eea:	439a      	bics	r2, r3
10007eec:	4693      	mov	fp, r2
10007eee:	9b08      	ldr	r3, [sp, #32]
10007ef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
10007ef2:	2c00      	cmp	r4, #0
10007ef4:	d113      	bne.n	10007f1e <_vfiprintf_r+0x67a>
10007ef6:	2b09      	cmp	r3, #9
10007ef8:	d811      	bhi.n	10007f1e <_vfiprintf_r+0x67a>
10007efa:	3330      	adds	r3, #48	; 0x30
10007efc:	b2db      	uxtb	r3, r3
10007efe:	2263      	movs	r2, #99	; 0x63
10007f00:	a925      	add	r1, sp, #148	; 0x94
10007f02:	548b      	strb	r3, [r1, r2]
10007f04:	464b      	mov	r3, r9
10007f06:	46ca      	mov	sl, r9
10007f08:	2b00      	cmp	r3, #0
10007f0a:	dc01      	bgt.n	10007f10 <_vfiprintf_r+0x66c>
10007f0c:	2301      	movs	r3, #1
10007f0e:	469a      	mov	sl, r3
10007f10:	2301      	movs	r3, #1
10007f12:	9304      	str	r3, [sp, #16]
10007f14:	ab10      	add	r3, sp, #64	; 0x40
10007f16:	24b7      	movs	r4, #183	; 0xb7
10007f18:	469c      	mov	ip, r3
10007f1a:	4464      	add	r4, ip
10007f1c:	e6f1      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007f1e:	2380      	movs	r3, #128	; 0x80
10007f20:	465a      	mov	r2, fp
10007f22:	00db      	lsls	r3, r3, #3
10007f24:	401a      	ands	r2, r3
10007f26:	2300      	movs	r3, #0
10007f28:	4698      	mov	r8, r3
10007f2a:	465b      	mov	r3, fp
10007f2c:	9304      	str	r3, [sp, #16]
10007f2e:	464b      	mov	r3, r9
10007f30:	9607      	str	r6, [sp, #28]
10007f32:	4692      	mov	sl, r2
10007f34:	9e08      	ldr	r6, [sp, #32]
10007f36:	9f09      	ldr	r7, [sp, #36]	; 0x24
10007f38:	46ab      	mov	fp, r5
10007f3a:	ac3e      	add	r4, sp, #248	; 0xf8
10007f3c:	9306      	str	r3, [sp, #24]
10007f3e:	e004      	b.n	10007f4a <_vfiprintf_r+0x6a6>
10007f40:	2f00      	cmp	r7, #0
10007f42:	d100      	bne.n	10007f46 <_vfiprintf_r+0x6a2>
10007f44:	e2f4      	b.n	10008530 <_vfiprintf_r+0xc8c>
10007f46:	464e      	mov	r6, r9
10007f48:	002f      	movs	r7, r5
10007f4a:	220a      	movs	r2, #10
10007f4c:	2300      	movs	r3, #0
10007f4e:	0030      	movs	r0, r6
10007f50:	0039      	movs	r1, r7
10007f52:	f7f8 fa17 	bl	10000384 <__aeabi_uldivmod>
10007f56:	2301      	movs	r3, #1
10007f58:	469c      	mov	ip, r3
10007f5a:	4653      	mov	r3, sl
10007f5c:	3c01      	subs	r4, #1
10007f5e:	3230      	adds	r2, #48	; 0x30
10007f60:	4681      	mov	r9, r0
10007f62:	000d      	movs	r5, r1
10007f64:	7022      	strb	r2, [r4, #0]
10007f66:	44e0      	add	r8, ip
10007f68:	2b00      	cmp	r3, #0
10007f6a:	d0e9      	beq.n	10007f40 <_vfiprintf_r+0x69c>
10007f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007f6e:	781b      	ldrb	r3, [r3, #0]
10007f70:	4543      	cmp	r3, r8
10007f72:	d1e5      	bne.n	10007f40 <_vfiprintf_r+0x69c>
10007f74:	4643      	mov	r3, r8
10007f76:	2bff      	cmp	r3, #255	; 0xff
10007f78:	d0e2      	beq.n	10007f40 <_vfiprintf_r+0x69c>
10007f7a:	2f00      	cmp	r7, #0
10007f7c:	d000      	beq.n	10007f80 <_vfiprintf_r+0x6dc>
10007f7e:	e297      	b.n	100084b0 <_vfiprintf_r+0xc0c>
10007f80:	2e09      	cmp	r6, #9
10007f82:	d900      	bls.n	10007f86 <_vfiprintf_r+0x6e2>
10007f84:	e294      	b.n	100084b0 <_vfiprintf_r+0xc0c>
10007f86:	9b06      	ldr	r3, [sp, #24]
10007f88:	465d      	mov	r5, fp
10007f8a:	4699      	mov	r9, r3
10007f8c:	9b04      	ldr	r3, [sp, #16]
10007f8e:	9608      	str	r6, [sp, #32]
10007f90:	9709      	str	r7, [sp, #36]	; 0x24
10007f92:	469b      	mov	fp, r3
10007f94:	9e07      	ldr	r6, [sp, #28]
10007f96:	ab3e      	add	r3, sp, #248	; 0xf8
10007f98:	1b1b      	subs	r3, r3, r4
10007f9a:	469a      	mov	sl, r3
10007f9c:	9304      	str	r3, [sp, #16]
10007f9e:	454b      	cmp	r3, r9
10007fa0:	db00      	blt.n	10007fa4 <_vfiprintf_r+0x700>
10007fa2:	e6ae      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007fa4:	46ca      	mov	sl, r9
10007fa6:	e6ac      	b.n	10007d02 <_vfiprintf_r+0x45e>
10007fa8:	fffffbff 	.word	0xfffffbff
10007fac:	fffffb7f 	.word	0xfffffb7f
10007fb0:	00007830 	.word	0x00007830
10007fb4:	1000e6f4 	.word	0x1000e6f4
10007fb8:	2b00      	cmp	r3, #0
10007fba:	d000      	beq.n	10007fbe <_vfiprintf_r+0x71a>
10007fbc:	e1ff      	b.n	100083be <_vfiprintf_r+0xb1a>
10007fbe:	ab10      	add	r3, sp, #64	; 0x40
10007fc0:	78db      	ldrb	r3, [r3, #3]
10007fc2:	2b00      	cmp	r3, #0
10007fc4:	d100      	bne.n	10007fc8 <_vfiprintf_r+0x724>
10007fc6:	e1f6      	b.n	100083b6 <_vfiprintf_r+0xb12>
10007fc8:	ab10      	add	r3, sp, #64	; 0x40
10007fca:	3303      	adds	r3, #3
10007fcc:	9315      	str	r3, [sp, #84]	; 0x54
10007fce:	2301      	movs	r3, #1
10007fd0:	2001      	movs	r0, #1
10007fd2:	9316      	str	r3, [sp, #88]	; 0x58
10007fd4:	ae15      	add	r6, sp, #84	; 0x54
10007fd6:	0002      	movs	r2, r0
10007fd8:	3608      	adds	r6, #8
10007fda:	3001      	adds	r0, #1
10007fdc:	9906      	ldr	r1, [sp, #24]
10007fde:	2900      	cmp	r1, #0
10007fe0:	d100      	bne.n	10007fe4 <_vfiprintf_r+0x740>
10007fe2:	e58d      	b.n	10007b00 <_vfiprintf_r+0x25c>
10007fe4:	aa11      	add	r2, sp, #68	; 0x44
10007fe6:	6032      	str	r2, [r6, #0]
10007fe8:	2202      	movs	r2, #2
10007fea:	3302      	adds	r3, #2
10007fec:	6072      	str	r2, [r6, #4]
10007fee:	9314      	str	r3, [sp, #80]	; 0x50
10007ff0:	9013      	str	r0, [sp, #76]	; 0x4c
10007ff2:	2807      	cmp	r0, #7
10007ff4:	dc00      	bgt.n	10007ff8 <_vfiprintf_r+0x754>
10007ff6:	e580      	b.n	10007afa <_vfiprintf_r+0x256>
10007ff8:	2b00      	cmp	r3, #0
10007ffa:	d000      	beq.n	10007ffe <_vfiprintf_r+0x75a>
10007ffc:	e166      	b.n	100082cc <_vfiprintf_r+0xa28>
10007ffe:	9907      	ldr	r1, [sp, #28]
10008000:	2001      	movs	r0, #1
10008002:	2200      	movs	r2, #0
10008004:	2300      	movs	r3, #0
10008006:	ae15      	add	r6, sp, #84	; 0x54
10008008:	2980      	cmp	r1, #128	; 0x80
1000800a:	d000      	beq.n	1000800e <_vfiprintf_r+0x76a>
1000800c:	e57c      	b.n	10007b08 <_vfiprintf_r+0x264>
1000800e:	4657      	mov	r7, sl
10008010:	9902      	ldr	r1, [sp, #8]
10008012:	1bcf      	subs	r7, r1, r7
10008014:	2f00      	cmp	r7, #0
10008016:	dc00      	bgt.n	1000801a <_vfiprintf_r+0x776>
10008018:	e576      	b.n	10007b08 <_vfiprintf_r+0x264>
1000801a:	2f10      	cmp	r7, #16
1000801c:	dc00      	bgt.n	10008020 <_vfiprintf_r+0x77c>
1000801e:	e2c2      	b.n	100085a6 <_vfiprintf_r+0xd02>
10008020:	49ce      	ldr	r1, [pc, #824]	; (1000835c <_vfiprintf_r+0xab8>)
10008022:	46a0      	mov	r8, r4
10008024:	000c      	movs	r4, r1
10008026:	e005      	b.n	10008034 <_vfiprintf_r+0x790>
10008028:	3f10      	subs	r7, #16
1000802a:	1c90      	adds	r0, r2, #2
1000802c:	3608      	adds	r6, #8
1000802e:	000a      	movs	r2, r1
10008030:	2f10      	cmp	r7, #16
10008032:	dd12      	ble.n	1000805a <_vfiprintf_r+0x7b6>
10008034:	2110      	movs	r1, #16
10008036:	3310      	adds	r3, #16
10008038:	6071      	str	r1, [r6, #4]
1000803a:	1c51      	adds	r1, r2, #1
1000803c:	6034      	str	r4, [r6, #0]
1000803e:	9314      	str	r3, [sp, #80]	; 0x50
10008040:	9113      	str	r1, [sp, #76]	; 0x4c
10008042:	2907      	cmp	r1, #7
10008044:	ddf0      	ble.n	10008028 <_vfiprintf_r+0x784>
10008046:	2b00      	cmp	r3, #0
10008048:	d000      	beq.n	1000804c <_vfiprintf_r+0x7a8>
1000804a:	e0a9      	b.n	100081a0 <_vfiprintf_r+0x8fc>
1000804c:	3f10      	subs	r7, #16
1000804e:	2001      	movs	r0, #1
10008050:	2200      	movs	r2, #0
10008052:	2300      	movs	r3, #0
10008054:	ae15      	add	r6, sp, #84	; 0x54
10008056:	2f10      	cmp	r7, #16
10008058:	dcec      	bgt.n	10008034 <_vfiprintf_r+0x790>
1000805a:	0022      	movs	r2, r4
1000805c:	4684      	mov	ip, r0
1000805e:	4644      	mov	r4, r8
10008060:	4690      	mov	r8, r2
10008062:	4642      	mov	r2, r8
10008064:	6032      	str	r2, [r6, #0]
10008066:	4662      	mov	r2, ip
10008068:	19db      	adds	r3, r3, r7
1000806a:	6077      	str	r7, [r6, #4]
1000806c:	9314      	str	r3, [sp, #80]	; 0x50
1000806e:	9213      	str	r2, [sp, #76]	; 0x4c
10008070:	2a07      	cmp	r2, #7
10008072:	dd00      	ble.n	10008076 <_vfiprintf_r+0x7d2>
10008074:	e163      	b.n	1000833e <_vfiprintf_r+0xa9a>
10008076:	4649      	mov	r1, r9
10008078:	9f04      	ldr	r7, [sp, #16]
1000807a:	3608      	adds	r6, #8
1000807c:	1c50      	adds	r0, r2, #1
1000807e:	1bcf      	subs	r7, r1, r7
10008080:	2f00      	cmp	r7, #0
10008082:	dc00      	bgt.n	10008086 <_vfiprintf_r+0x7e2>
10008084:	e546      	b.n	10007b14 <_vfiprintf_r+0x270>
10008086:	990d      	ldr	r1, [sp, #52]	; 0x34
10008088:	4688      	mov	r8, r1
1000808a:	2f10      	cmp	r7, #16
1000808c:	dd20      	ble.n	100080d0 <_vfiprintf_r+0x82c>
1000808e:	2110      	movs	r1, #16
10008090:	4689      	mov	r9, r1
10008092:	4641      	mov	r1, r8
10008094:	46a0      	mov	r8, r4
10008096:	000c      	movs	r4, r1
10008098:	e005      	b.n	100080a6 <_vfiprintf_r+0x802>
1000809a:	3f10      	subs	r7, #16
1000809c:	1c90      	adds	r0, r2, #2
1000809e:	3608      	adds	r6, #8
100080a0:	000a      	movs	r2, r1
100080a2:	2f10      	cmp	r7, #16
100080a4:	dd11      	ble.n	100080ca <_vfiprintf_r+0x826>
100080a6:	4649      	mov	r1, r9
100080a8:	3310      	adds	r3, #16
100080aa:	6071      	str	r1, [r6, #4]
100080ac:	1c51      	adds	r1, r2, #1
100080ae:	6034      	str	r4, [r6, #0]
100080b0:	9314      	str	r3, [sp, #80]	; 0x50
100080b2:	9113      	str	r1, [sp, #76]	; 0x4c
100080b4:	2907      	cmp	r1, #7
100080b6:	ddf0      	ble.n	1000809a <_vfiprintf_r+0x7f6>
100080b8:	2b00      	cmp	r3, #0
100080ba:	d17d      	bne.n	100081b8 <_vfiprintf_r+0x914>
100080bc:	3f10      	subs	r7, #16
100080be:	2001      	movs	r0, #1
100080c0:	2200      	movs	r2, #0
100080c2:	2300      	movs	r3, #0
100080c4:	ae15      	add	r6, sp, #84	; 0x54
100080c6:	2f10      	cmp	r7, #16
100080c8:	dced      	bgt.n	100080a6 <_vfiprintf_r+0x802>
100080ca:	0022      	movs	r2, r4
100080cc:	4644      	mov	r4, r8
100080ce:	4690      	mov	r8, r2
100080d0:	4642      	mov	r2, r8
100080d2:	19db      	adds	r3, r3, r7
100080d4:	6032      	str	r2, [r6, #0]
100080d6:	6077      	str	r7, [r6, #4]
100080d8:	9314      	str	r3, [sp, #80]	; 0x50
100080da:	9013      	str	r0, [sp, #76]	; 0x4c
100080dc:	2807      	cmp	r0, #7
100080de:	dc02      	bgt.n	100080e6 <_vfiprintf_r+0x842>
100080e0:	3608      	adds	r6, #8
100080e2:	3001      	adds	r0, #1
100080e4:	e516      	b.n	10007b14 <_vfiprintf_r+0x270>
100080e6:	2b00      	cmp	r3, #0
100080e8:	d00a      	beq.n	10008100 <_vfiprintf_r+0x85c>
100080ea:	9900      	ldr	r1, [sp, #0]
100080ec:	9801      	ldr	r0, [sp, #4]
100080ee:	aa12      	add	r2, sp, #72	; 0x48
100080f0:	f003 fc26 	bl	1000b940 <__sfvwrite_r>
100080f4:	2300      	movs	r3, #0
100080f6:	9314      	str	r3, [sp, #80]	; 0x50
100080f8:	9313      	str	r3, [sp, #76]	; 0x4c
100080fa:	2800      	cmp	r0, #0
100080fc:	d000      	beq.n	10008100 <_vfiprintf_r+0x85c>
100080fe:	e49a      	b.n	10007a36 <_vfiprintf_r+0x192>
10008100:	2201      	movs	r2, #1
10008102:	9b04      	ldr	r3, [sp, #16]
10008104:	9415      	str	r4, [sp, #84]	; 0x54
10008106:	9316      	str	r3, [sp, #88]	; 0x58
10008108:	9314      	str	r3, [sp, #80]	; 0x50
1000810a:	9213      	str	r2, [sp, #76]	; 0x4c
1000810c:	ae15      	add	r6, sp, #84	; 0x54
1000810e:	465a      	mov	r2, fp
10008110:	0752      	lsls	r2, r2, #29
10008112:	d400      	bmi.n	10008116 <_vfiprintf_r+0x872>
10008114:	e518      	b.n	10007b48 <_vfiprintf_r+0x2a4>
10008116:	0032      	movs	r2, r6
10008118:	4650      	mov	r0, sl
1000811a:	9902      	ldr	r1, [sp, #8]
1000811c:	3208      	adds	r2, #8
1000811e:	1a0c      	subs	r4, r1, r0
10008120:	2c00      	cmp	r4, #0
10008122:	dc00      	bgt.n	10008126 <_vfiprintf_r+0x882>
10008124:	e510      	b.n	10007b48 <_vfiprintf_r+0x2a4>
10008126:	9813      	ldr	r0, [sp, #76]	; 0x4c
10008128:	2c10      	cmp	r4, #16
1000812a:	dc00      	bgt.n	1000812e <_vfiprintf_r+0x88a>
1000812c:	e236      	b.n	1000859c <_vfiprintf_r+0xcf8>
1000812e:	498c      	ldr	r1, [pc, #560]	; (10008360 <_vfiprintf_r+0xabc>)
10008130:	46a8      	mov	r8, r5
10008132:	2710      	movs	r7, #16
10008134:	2600      	movs	r6, #0
10008136:	000d      	movs	r5, r1
10008138:	e006      	b.n	10008148 <_vfiprintf_r+0x8a4>
1000813a:	3002      	adds	r0, #2
1000813c:	3c10      	subs	r4, #16
1000813e:	4684      	mov	ip, r0
10008140:	3208      	adds	r2, #8
10008142:	0008      	movs	r0, r1
10008144:	2c10      	cmp	r4, #16
10008146:	dd12      	ble.n	1000816e <_vfiprintf_r+0x8ca>
10008148:	3310      	adds	r3, #16
1000814a:	1c41      	adds	r1, r0, #1
1000814c:	6015      	str	r5, [r2, #0]
1000814e:	6057      	str	r7, [r2, #4]
10008150:	9314      	str	r3, [sp, #80]	; 0x50
10008152:	9113      	str	r1, [sp, #76]	; 0x4c
10008154:	2907      	cmp	r1, #7
10008156:	ddf0      	ble.n	1000813a <_vfiprintf_r+0x896>
10008158:	2b00      	cmp	r3, #0
1000815a:	d000      	beq.n	1000815e <_vfiprintf_r+0x8ba>
1000815c:	e0a3      	b.n	100082a6 <_vfiprintf_r+0xa02>
1000815e:	2301      	movs	r3, #1
10008160:	3c10      	subs	r4, #16
10008162:	469c      	mov	ip, r3
10008164:	2000      	movs	r0, #0
10008166:	2300      	movs	r3, #0
10008168:	aa15      	add	r2, sp, #84	; 0x54
1000816a:	2c10      	cmp	r4, #16
1000816c:	dcec      	bgt.n	10008148 <_vfiprintf_r+0x8a4>
1000816e:	0029      	movs	r1, r5
10008170:	4645      	mov	r5, r8
10008172:	4688      	mov	r8, r1
10008174:	4641      	mov	r1, r8
10008176:	c212      	stmia	r2!, {r1, r4}
10008178:	4662      	mov	r2, ip
1000817a:	191b      	adds	r3, r3, r4
1000817c:	9314      	str	r3, [sp, #80]	; 0x50
1000817e:	9213      	str	r2, [sp, #76]	; 0x4c
10008180:	2a07      	cmp	r2, #7
10008182:	dc00      	bgt.n	10008186 <_vfiprintf_r+0x8e2>
10008184:	e4e0      	b.n	10007b48 <_vfiprintf_r+0x2a4>
10008186:	2b00      	cmp	r3, #0
10008188:	d000      	beq.n	1000818c <_vfiprintf_r+0x8e8>
1000818a:	e12d      	b.n	100083e8 <_vfiprintf_r+0xb44>
1000818c:	9b02      	ldr	r3, [sp, #8]
1000818e:	4553      	cmp	r3, sl
10008190:	da00      	bge.n	10008194 <_vfiprintf_r+0x8f0>
10008192:	4653      	mov	r3, sl
10008194:	9a03      	ldr	r2, [sp, #12]
10008196:	4694      	mov	ip, r2
10008198:	449c      	add	ip, r3
1000819a:	4663      	mov	r3, ip
1000819c:	9303      	str	r3, [sp, #12]
1000819e:	e4e9      	b.n	10007b74 <_vfiprintf_r+0x2d0>
100081a0:	9900      	ldr	r1, [sp, #0]
100081a2:	9801      	ldr	r0, [sp, #4]
100081a4:	aa12      	add	r2, sp, #72	; 0x48
100081a6:	f003 fbcb 	bl	1000b940 <__sfvwrite_r>
100081aa:	2300      	movs	r3, #0
100081ac:	9314      	str	r3, [sp, #80]	; 0x50
100081ae:	9313      	str	r3, [sp, #76]	; 0x4c
100081b0:	2800      	cmp	r0, #0
100081b2:	d100      	bne.n	100081b6 <_vfiprintf_r+0x912>
100081b4:	e74a      	b.n	1000804c <_vfiprintf_r+0x7a8>
100081b6:	e43e      	b.n	10007a36 <_vfiprintf_r+0x192>
100081b8:	9900      	ldr	r1, [sp, #0]
100081ba:	9801      	ldr	r0, [sp, #4]
100081bc:	aa12      	add	r2, sp, #72	; 0x48
100081be:	f003 fbbf 	bl	1000b940 <__sfvwrite_r>
100081c2:	2300      	movs	r3, #0
100081c4:	9314      	str	r3, [sp, #80]	; 0x50
100081c6:	9313      	str	r3, [sp, #76]	; 0x4c
100081c8:	2800      	cmp	r0, #0
100081ca:	d100      	bne.n	100081ce <_vfiprintf_r+0x92a>
100081cc:	e776      	b.n	100080bc <_vfiprintf_r+0x818>
100081ce:	9a00      	ldr	r2, [sp, #0]
100081d0:	210c      	movs	r1, #12
100081d2:	5e53      	ldrsh	r3, [r2, r1]
100081d4:	6e52      	ldr	r2, [r2, #100]	; 0x64
100081d6:	07d2      	lsls	r2, r2, #31
100081d8:	d500      	bpl.n	100081dc <_vfiprintf_r+0x938>
100081da:	e433      	b.n	10007a44 <_vfiprintf_r+0x1a0>
100081dc:	e4e8      	b.n	10007bb0 <_vfiprintf_r+0x30c>
100081de:	9900      	ldr	r1, [sp, #0]
100081e0:	9801      	ldr	r0, [sp, #4]
100081e2:	aa12      	add	r2, sp, #72	; 0x48
100081e4:	f003 fbac 	bl	1000b940 <__sfvwrite_r>
100081e8:	2300      	movs	r3, #0
100081ea:	9314      	str	r3, [sp, #80]	; 0x50
100081ec:	9313      	str	r3, [sp, #76]	; 0x4c
100081ee:	2800      	cmp	r0, #0
100081f0:	d100      	bne.n	100081f4 <_vfiprintf_r+0x950>
100081f2:	e49d      	b.n	10007b30 <_vfiprintf_r+0x28c>
100081f4:	f7ff fc1f 	bl	10007a36 <_vfiprintf_r+0x192>
100081f8:	468b      	mov	fp, r1
100081fa:	200f      	movs	r0, #15
100081fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
100081fe:	ac3e      	add	r4, sp, #248	; 0xf8
10008200:	0019      	movs	r1, r3
10008202:	4001      	ands	r1, r0
10008204:	5c79      	ldrb	r1, [r7, r1]
10008206:	3c01      	subs	r4, #1
10008208:	7021      	strb	r1, [r4, #0]
1000820a:	091b      	lsrs	r3, r3, #4
1000820c:	0711      	lsls	r1, r2, #28
1000820e:	430b      	orrs	r3, r1
10008210:	0019      	movs	r1, r3
10008212:	0912      	lsrs	r2, r2, #4
10008214:	4311      	orrs	r1, r2
10008216:	d1f3      	bne.n	10008200 <_vfiprintf_r+0x95c>
10008218:	e6bd      	b.n	10007f96 <_vfiprintf_r+0x6f2>
1000821a:	2f10      	cmp	r7, #16
1000821c:	dc00      	bgt.n	10008220 <_vfiprintf_r+0x97c>
1000821e:	e1ac      	b.n	1000857a <_vfiprintf_r+0xcd6>
10008220:	494f      	ldr	r1, [pc, #316]	; (10008360 <_vfiprintf_r+0xabc>)
10008222:	4688      	mov	r8, r1
10008224:	4640      	mov	r0, r8
10008226:	4661      	mov	r1, ip
10008228:	46a0      	mov	r8, r4
1000822a:	0004      	movs	r4, r0
1000822c:	e006      	b.n	1000823c <_vfiprintf_r+0x998>
1000822e:	3f10      	subs	r7, #16
10008230:	1c90      	adds	r0, r2, #2
10008232:	3608      	adds	r6, #8
10008234:	000a      	movs	r2, r1
10008236:	2f10      	cmp	r7, #16
10008238:	dd11      	ble.n	1000825e <_vfiprintf_r+0x9ba>
1000823a:	1c51      	adds	r1, r2, #1
1000823c:	2010      	movs	r0, #16
1000823e:	3310      	adds	r3, #16
10008240:	6034      	str	r4, [r6, #0]
10008242:	6070      	str	r0, [r6, #4]
10008244:	9314      	str	r3, [sp, #80]	; 0x50
10008246:	9113      	str	r1, [sp, #76]	; 0x4c
10008248:	2907      	cmp	r1, #7
1000824a:	ddf0      	ble.n	1000822e <_vfiprintf_r+0x98a>
1000824c:	2b00      	cmp	r3, #0
1000824e:	d117      	bne.n	10008280 <_vfiprintf_r+0x9dc>
10008250:	3f10      	subs	r7, #16
10008252:	2200      	movs	r2, #0
10008254:	2001      	movs	r0, #1
10008256:	2300      	movs	r3, #0
10008258:	ae15      	add	r6, sp, #84	; 0x54
1000825a:	2f10      	cmp	r7, #16
1000825c:	dced      	bgt.n	1000823a <_vfiprintf_r+0x996>
1000825e:	0022      	movs	r2, r4
10008260:	4684      	mov	ip, r0
10008262:	4644      	mov	r4, r8
10008264:	4690      	mov	r8, r2
10008266:	4642      	mov	r2, r8
10008268:	6032      	str	r2, [r6, #0]
1000826a:	4662      	mov	r2, ip
1000826c:	19db      	adds	r3, r3, r7
1000826e:	6077      	str	r7, [r6, #4]
10008270:	9314      	str	r3, [sp, #80]	; 0x50
10008272:	9213      	str	r2, [sp, #76]	; 0x4c
10008274:	2a07      	cmp	r2, #7
10008276:	dd00      	ble.n	1000827a <_vfiprintf_r+0x9d6>
10008278:	e69e      	b.n	10007fb8 <_vfiprintf_r+0x714>
1000827a:	3608      	adds	r6, #8
1000827c:	1c50      	adds	r0, r2, #1
1000827e:	e416      	b.n	10007aae <_vfiprintf_r+0x20a>
10008280:	9900      	ldr	r1, [sp, #0]
10008282:	9801      	ldr	r0, [sp, #4]
10008284:	aa12      	add	r2, sp, #72	; 0x48
10008286:	f003 fb5b 	bl	1000b940 <__sfvwrite_r>
1000828a:	2300      	movs	r3, #0
1000828c:	9314      	str	r3, [sp, #80]	; 0x50
1000828e:	9313      	str	r3, [sp, #76]	; 0x4c
10008290:	2800      	cmp	r0, #0
10008292:	d0dd      	beq.n	10008250 <_vfiprintf_r+0x9ac>
10008294:	9a00      	ldr	r2, [sp, #0]
10008296:	210c      	movs	r1, #12
10008298:	5e53      	ldrsh	r3, [r2, r1]
1000829a:	6e52      	ldr	r2, [r2, #100]	; 0x64
1000829c:	07d2      	lsls	r2, r2, #31
1000829e:	d501      	bpl.n	100082a4 <_vfiprintf_r+0xa00>
100082a0:	f7ff fbd0 	bl	10007a44 <_vfiprintf_r+0x1a0>
100082a4:	e484      	b.n	10007bb0 <_vfiprintf_r+0x30c>
100082a6:	9900      	ldr	r1, [sp, #0]
100082a8:	9801      	ldr	r0, [sp, #4]
100082aa:	aa12      	add	r2, sp, #72	; 0x48
100082ac:	f003 fb48 	bl	1000b940 <__sfvwrite_r>
100082b0:	9614      	str	r6, [sp, #80]	; 0x50
100082b2:	9613      	str	r6, [sp, #76]	; 0x4c
100082b4:	2800      	cmp	r0, #0
100082b6:	d100      	bne.n	100082ba <_vfiprintf_r+0xa16>
100082b8:	e751      	b.n	1000815e <_vfiprintf_r+0x8ba>
100082ba:	9a00      	ldr	r2, [sp, #0]
100082bc:	210c      	movs	r1, #12
100082be:	5e53      	ldrsh	r3, [r2, r1]
100082c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
100082c2:	07d2      	lsls	r2, r2, #31
100082c4:	d501      	bpl.n	100082ca <_vfiprintf_r+0xa26>
100082c6:	f7ff fbbd 	bl	10007a44 <_vfiprintf_r+0x1a0>
100082ca:	e471      	b.n	10007bb0 <_vfiprintf_r+0x30c>
100082cc:	9900      	ldr	r1, [sp, #0]
100082ce:	9801      	ldr	r0, [sp, #4]
100082d0:	aa12      	add	r2, sp, #72	; 0x48
100082d2:	f003 fb35 	bl	1000b940 <__sfvwrite_r>
100082d6:	2300      	movs	r3, #0
100082d8:	9314      	str	r3, [sp, #80]	; 0x50
100082da:	9313      	str	r3, [sp, #76]	; 0x4c
100082dc:	2800      	cmp	r0, #0
100082de:	d100      	bne.n	100082e2 <_vfiprintf_r+0xa3e>
100082e0:	e68d      	b.n	10007ffe <_vfiprintf_r+0x75a>
100082e2:	f7ff fba8 	bl	10007a36 <_vfiprintf_r+0x192>
100082e6:	9905      	ldr	r1, [sp, #20]
100082e8:	c904      	ldmia	r1!, {r2}
100082ea:	9105      	str	r1, [sp, #20]
100082ec:	06d9      	lsls	r1, r3, #27
100082ee:	d403      	bmi.n	100082f8 <_vfiprintf_r+0xa54>
100082f0:	0659      	lsls	r1, r3, #25
100082f2:	d400      	bmi.n	100082f6 <_vfiprintf_r+0xa52>
100082f4:	e114      	b.n	10008520 <_vfiprintf_r+0xc7c>
100082f6:	b292      	uxth	r2, r2
100082f8:	9208      	str	r2, [sp, #32]
100082fa:	2200      	movs	r2, #0
100082fc:	9209      	str	r2, [sp, #36]	; 0x24
100082fe:	e536      	b.n	10007d6e <_vfiprintf_r+0x4ca>
10008300:	ca08      	ldmia	r2!, {r3}
10008302:	9205      	str	r2, [sp, #20]
10008304:	06ca      	lsls	r2, r1, #27
10008306:	d407      	bmi.n	10008318 <_vfiprintf_r+0xa74>
10008308:	064a      	lsls	r2, r1, #25
1000830a:	d502      	bpl.n	10008312 <_vfiprintf_r+0xa6e>
1000830c:	2200      	movs	r2, #0
1000830e:	b29b      	uxth	r3, r3
10008310:	e4ce      	b.n	10007cb0 <_vfiprintf_r+0x40c>
10008312:	058a      	lsls	r2, r1, #22
10008314:	d500      	bpl.n	10008318 <_vfiprintf_r+0xa74>
10008316:	e10f      	b.n	10008538 <_vfiprintf_r+0xc94>
10008318:	2200      	movs	r2, #0
1000831a:	e4c9      	b.n	10007cb0 <_vfiprintf_r+0x40c>
1000831c:	465a      	mov	r2, fp
1000831e:	0592      	lsls	r2, r2, #22
10008320:	d500      	bpl.n	10008324 <_vfiprintf_r+0xa80>
10008322:	e10d      	b.n	10008540 <_vfiprintf_r+0xc9c>
10008324:	9308      	str	r3, [sp, #32]
10008326:	17db      	asrs	r3, r3, #31
10008328:	9309      	str	r3, [sp, #36]	; 0x24
1000832a:	e491      	b.n	10007c50 <_vfiprintf_r+0x3ac>
1000832c:	2300      	movs	r3, #0
1000832e:	ac3e      	add	r4, sp, #248	; 0xf8
10008330:	469a      	mov	sl, r3
10008332:	9304      	str	r3, [sp, #16]
10008334:	e4e5      	b.n	10007d02 <_vfiprintf_r+0x45e>
10008336:	2300      	movs	r3, #0
10008338:	ac3e      	add	r4, sp, #248	; 0xf8
1000833a:	469a      	mov	sl, r3
1000833c:	e4e1      	b.n	10007d02 <_vfiprintf_r+0x45e>
1000833e:	2b00      	cmp	r3, #0
10008340:	d000      	beq.n	10008344 <_vfiprintf_r+0xaa0>
10008342:	e0a2      	b.n	1000848a <_vfiprintf_r+0xbe6>
10008344:	464b      	mov	r3, r9
10008346:	9a04      	ldr	r2, [sp, #16]
10008348:	1a9f      	subs	r7, r3, r2
1000834a:	2f00      	cmp	r7, #0
1000834c:	dc00      	bgt.n	10008350 <_vfiprintf_r+0xaac>
1000834e:	e6d7      	b.n	10008100 <_vfiprintf_r+0x85c>
10008350:	2300      	movs	r3, #0
10008352:	2200      	movs	r2, #0
10008354:	2001      	movs	r0, #1
10008356:	ae15      	add	r6, sp, #84	; 0x54
10008358:	e697      	b.n	1000808a <_vfiprintf_r+0x7e6>
1000835a:	46c0      	nop			; (mov r8, r8)
1000835c:	1000e87c 	.word	0x1000e87c
10008360:	1000e88c 	.word	0x1000e88c
10008364:	0023      	movs	r3, r4
10008366:	06db      	lsls	r3, r3, #27
10008368:	d500      	bpl.n	1000836c <_vfiprintf_r+0xac8>
1000836a:	e0c7      	b.n	100084fc <_vfiprintf_r+0xc58>
1000836c:	0023      	movs	r3, r4
1000836e:	065b      	lsls	r3, r3, #25
10008370:	d500      	bpl.n	10008374 <_vfiprintf_r+0xad0>
10008372:	e0ee      	b.n	10008552 <_vfiprintf_r+0xcae>
10008374:	0023      	movs	r3, r4
10008376:	059b      	lsls	r3, r3, #22
10008378:	d400      	bmi.n	1000837c <_vfiprintf_r+0xad8>
1000837a:	e0bf      	b.n	100084fc <_vfiprintf_r+0xc58>
1000837c:	9b05      	ldr	r3, [sp, #20]
1000837e:	9a03      	ldr	r2, [sp, #12]
10008380:	681b      	ldr	r3, [r3, #0]
10008382:	701a      	strb	r2, [r3, #0]
10008384:	e564      	b.n	10007e50 <_vfiprintf_r+0x5ac>
10008386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008388:	7829      	ldrb	r1, [r5, #0]
1000838a:	2b00      	cmp	r3, #0
1000838c:	d101      	bne.n	10008392 <_vfiprintf_r+0xaee>
1000838e:	f7ff fadd 	bl	1000794c <_vfiprintf_r+0xa8>
10008392:	781b      	ldrb	r3, [r3, #0]
10008394:	2b00      	cmp	r3, #0
10008396:	d101      	bne.n	1000839c <_vfiprintf_r+0xaf8>
10008398:	f7ff fad8 	bl	1000794c <_vfiprintf_r+0xa8>
1000839c:	2380      	movs	r3, #128	; 0x80
1000839e:	00db      	lsls	r3, r3, #3
100083a0:	431c      	orrs	r4, r3
100083a2:	f7ff fad3 	bl	1000794c <_vfiprintf_r+0xa8>
100083a6:	9d00      	ldr	r5, [sp, #0]
100083a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
100083aa:	f004 ff51 	bl	1000d250 <__retarget_lock_acquire_recursive>
100083ae:	230c      	movs	r3, #12
100083b0:	5eea      	ldrsh	r2, [r5, r3]
100083b2:	f7ff fa93 	bl	100078dc <_vfiprintf_r+0x38>
100083b6:	2200      	movs	r2, #0
100083b8:	2001      	movs	r0, #1
100083ba:	ae15      	add	r6, sp, #84	; 0x54
100083bc:	e60e      	b.n	10007fdc <_vfiprintf_r+0x738>
100083be:	9900      	ldr	r1, [sp, #0]
100083c0:	9801      	ldr	r0, [sp, #4]
100083c2:	aa12      	add	r2, sp, #72	; 0x48
100083c4:	f003 fabc 	bl	1000b940 <__sfvwrite_r>
100083c8:	2300      	movs	r3, #0
100083ca:	9314      	str	r3, [sp, #80]	; 0x50
100083cc:	9313      	str	r3, [sp, #76]	; 0x4c
100083ce:	2800      	cmp	r0, #0
100083d0:	d001      	beq.n	100083d6 <_vfiprintf_r+0xb32>
100083d2:	f7ff fb30 	bl	10007a36 <_vfiprintf_r+0x192>
100083d6:	ab10      	add	r3, sp, #64	; 0x40
100083d8:	78db      	ldrb	r3, [r3, #3]
100083da:	2b00      	cmp	r3, #0
100083dc:	d000      	beq.n	100083e0 <_vfiprintf_r+0xb3c>
100083de:	e5f3      	b.n	10007fc8 <_vfiprintf_r+0x724>
100083e0:	e7e9      	b.n	100083b6 <_vfiprintf_r+0xb12>
100083e2:	46ca      	mov	sl, r9
100083e4:	003c      	movs	r4, r7
100083e6:	e48c      	b.n	10007d02 <_vfiprintf_r+0x45e>
100083e8:	9900      	ldr	r1, [sp, #0]
100083ea:	9801      	ldr	r0, [sp, #4]
100083ec:	aa12      	add	r2, sp, #72	; 0x48
100083ee:	f003 faa7 	bl	1000b940 <__sfvwrite_r>
100083f2:	2300      	movs	r3, #0
100083f4:	9314      	str	r3, [sp, #80]	; 0x50
100083f6:	9313      	str	r3, [sp, #76]	; 0x4c
100083f8:	2800      	cmp	r0, #0
100083fa:	d100      	bne.n	100083fe <_vfiprintf_r+0xb5a>
100083fc:	e6c6      	b.n	1000818c <_vfiprintf_r+0x8e8>
100083fe:	f7ff fb1a 	bl	10007a36 <_vfiprintf_r+0x192>
10008402:	46b9      	mov	r9, r7
10008404:	0023      	movs	r3, r4
10008406:	e4a6      	b.n	10007d56 <_vfiprintf_r+0x4b2>
10008408:	46a3      	mov	fp, r4
1000840a:	4b77      	ldr	r3, [pc, #476]	; (100085e8 <_vfiprintf_r+0xd44>)
1000840c:	46b9      	mov	r9, r7
1000840e:	930c      	str	r3, [sp, #48]	; 0x30
10008410:	465b      	mov	r3, fp
10008412:	9a05      	ldr	r2, [sp, #20]
10008414:	069b      	lsls	r3, r3, #26
10008416:	d527      	bpl.n	10008468 <_vfiprintf_r+0xbc4>
10008418:	2307      	movs	r3, #7
1000841a:	3207      	adds	r2, #7
1000841c:	439a      	bics	r2, r3
1000841e:	3301      	adds	r3, #1
10008420:	469c      	mov	ip, r3
10008422:	4494      	add	ip, r2
10008424:	4663      	mov	r3, ip
10008426:	9305      	str	r3, [sp, #20]
10008428:	6813      	ldr	r3, [r2, #0]
1000842a:	6852      	ldr	r2, [r2, #4]
1000842c:	4658      	mov	r0, fp
1000842e:	07c0      	lsls	r0, r0, #31
10008430:	d50a      	bpl.n	10008448 <_vfiprintf_r+0xba4>
10008432:	0018      	movs	r0, r3
10008434:	4310      	orrs	r0, r2
10008436:	d007      	beq.n	10008448 <_vfiprintf_r+0xba4>
10008438:	2430      	movs	r4, #48	; 0x30
1000843a:	a811      	add	r0, sp, #68	; 0x44
1000843c:	7041      	strb	r1, [r0, #1]
1000843e:	7004      	strb	r4, [r0, #0]
10008440:	2102      	movs	r1, #2
10008442:	4658      	mov	r0, fp
10008444:	4308      	orrs	r0, r1
10008446:	4683      	mov	fp, r0
10008448:	4658      	mov	r0, fp
1000844a:	4968      	ldr	r1, [pc, #416]	; (100085ec <_vfiprintf_r+0xd48>)
1000844c:	4008      	ands	r0, r1
1000844e:	4683      	mov	fp, r0
10008450:	e4dd      	b.n	10007e0e <_vfiprintf_r+0x56a>
10008452:	46b9      	mov	r9, r7
10008454:	0021      	movs	r1, r4
10008456:	e41d      	b.n	10007c94 <_vfiprintf_r+0x3f0>
10008458:	46a3      	mov	fp, r4
1000845a:	4b65      	ldr	r3, [pc, #404]	; (100085f0 <_vfiprintf_r+0xd4c>)
1000845c:	46b9      	mov	r9, r7
1000845e:	930c      	str	r3, [sp, #48]	; 0x30
10008460:	465b      	mov	r3, fp
10008462:	9a05      	ldr	r2, [sp, #20]
10008464:	069b      	lsls	r3, r3, #26
10008466:	d4d7      	bmi.n	10008418 <_vfiprintf_r+0xb74>
10008468:	ca08      	ldmia	r2!, {r3}
1000846a:	9205      	str	r2, [sp, #20]
1000846c:	465a      	mov	r2, fp
1000846e:	06d2      	lsls	r2, r2, #27
10008470:	d433      	bmi.n	100084da <_vfiprintf_r+0xc36>
10008472:	465a      	mov	r2, fp
10008474:	0652      	lsls	r2, r2, #25
10008476:	d52d      	bpl.n	100084d4 <_vfiprintf_r+0xc30>
10008478:	2200      	movs	r2, #0
1000847a:	b29b      	uxth	r3, r3
1000847c:	e7d6      	b.n	1000842c <_vfiprintf_r+0xb88>
1000847e:	0020      	movs	r0, r4
10008480:	f7ff f9c0 	bl	10007804 <strlen>
10008484:	0002      	movs	r2, r0
10008486:	f7ff fbb7 	bl	10007bf8 <_vfiprintf_r+0x354>
1000848a:	9900      	ldr	r1, [sp, #0]
1000848c:	9801      	ldr	r0, [sp, #4]
1000848e:	aa12      	add	r2, sp, #72	; 0x48
10008490:	f003 fa56 	bl	1000b940 <__sfvwrite_r>
10008494:	2300      	movs	r3, #0
10008496:	9314      	str	r3, [sp, #80]	; 0x50
10008498:	9313      	str	r3, [sp, #76]	; 0x4c
1000849a:	2800      	cmp	r0, #0
1000849c:	d001      	beq.n	100084a2 <_vfiprintf_r+0xbfe>
1000849e:	f7ff faca 	bl	10007a36 <_vfiprintf_r+0x192>
100084a2:	464b      	mov	r3, r9
100084a4:	9a04      	ldr	r2, [sp, #16]
100084a6:	1a9f      	subs	r7, r3, r2
100084a8:	2f00      	cmp	r7, #0
100084aa:	dc00      	bgt.n	100084ae <_vfiprintf_r+0xc0a>
100084ac:	e628      	b.n	10008100 <_vfiprintf_r+0x85c>
100084ae:	e74f      	b.n	10008350 <_vfiprintf_r+0xaac>
100084b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100084b2:	990e      	ldr	r1, [sp, #56]	; 0x38
100084b4:	1ae4      	subs	r4, r4, r3
100084b6:	001a      	movs	r2, r3
100084b8:	0020      	movs	r0, r4
100084ba:	f004 fb75 	bl	1000cba8 <strncpy>
100084be:	990b      	ldr	r1, [sp, #44]	; 0x2c
100084c0:	784b      	ldrb	r3, [r1, #1]
100084c2:	468c      	mov	ip, r1
100084c4:	1e5a      	subs	r2, r3, #1
100084c6:	4193      	sbcs	r3, r2
100084c8:	449c      	add	ip, r3
100084ca:	4663      	mov	r3, ip
100084cc:	930b      	str	r3, [sp, #44]	; 0x2c
100084ce:	2300      	movs	r3, #0
100084d0:	4698      	mov	r8, r3
100084d2:	e538      	b.n	10007f46 <_vfiprintf_r+0x6a2>
100084d4:	465a      	mov	r2, fp
100084d6:	0592      	lsls	r2, r2, #22
100084d8:	d438      	bmi.n	1000854c <_vfiprintf_r+0xca8>
100084da:	2200      	movs	r2, #0
100084dc:	e7a6      	b.n	1000842c <_vfiprintf_r+0xb88>
100084de:	468b      	mov	fp, r1
100084e0:	e464      	b.n	10007dac <_vfiprintf_r+0x508>
100084e2:	2380      	movs	r3, #128	; 0x80
100084e4:	009b      	lsls	r3, r3, #2
100084e6:	7869      	ldrb	r1, [r5, #1]
100084e8:	431c      	orrs	r4, r3
100084ea:	3501      	adds	r5, #1
100084ec:	f7ff fa2e 	bl	1000794c <_vfiprintf_r+0xa8>
100084f0:	2320      	movs	r3, #32
100084f2:	7869      	ldrb	r1, [r5, #1]
100084f4:	431c      	orrs	r4, r3
100084f6:	3501      	adds	r5, #1
100084f8:	f7ff fa28 	bl	1000794c <_vfiprintf_r+0xa8>
100084fc:	9b05      	ldr	r3, [sp, #20]
100084fe:	9a03      	ldr	r2, [sp, #12]
10008500:	681b      	ldr	r3, [r3, #0]
10008502:	601a      	str	r2, [r3, #0]
10008504:	e4a4      	b.n	10007e50 <_vfiprintf_r+0x5ac>
10008506:	9304      	str	r3, [sp, #16]
10008508:	2b06      	cmp	r3, #6
1000850a:	d901      	bls.n	10008510 <_vfiprintf_r+0xc6c>
1000850c:	2306      	movs	r3, #6
1000850e:	9304      	str	r3, [sp, #16]
10008510:	9b04      	ldr	r3, [sp, #16]
10008512:	4c38      	ldr	r4, [pc, #224]	; (100085f4 <_vfiprintf_r+0xd50>)
10008514:	469a      	mov	sl, r3
10008516:	9705      	str	r7, [sp, #20]
10008518:	f7ff faac 	bl	10007a74 <_vfiprintf_r+0x1d0>
1000851c:	2200      	movs	r2, #0
1000851e:	e66c      	b.n	100081fa <_vfiprintf_r+0x956>
10008520:	0599      	lsls	r1, r3, #22
10008522:	d400      	bmi.n	10008526 <_vfiprintf_r+0xc82>
10008524:	e6e8      	b.n	100082f8 <_vfiprintf_r+0xa54>
10008526:	b2d2      	uxtb	r2, r2
10008528:	9208      	str	r2, [sp, #32]
1000852a:	2200      	movs	r2, #0
1000852c:	9209      	str	r2, [sp, #36]	; 0x24
1000852e:	e41e      	b.n	10007d6e <_vfiprintf_r+0x4ca>
10008530:	2e09      	cmp	r6, #9
10008532:	d900      	bls.n	10008536 <_vfiprintf_r+0xc92>
10008534:	e507      	b.n	10007f46 <_vfiprintf_r+0x6a2>
10008536:	e526      	b.n	10007f86 <_vfiprintf_r+0x6e2>
10008538:	2200      	movs	r2, #0
1000853a:	b2db      	uxtb	r3, r3
1000853c:	f7ff fbb8 	bl	10007cb0 <_vfiprintf_r+0x40c>
10008540:	b25b      	sxtb	r3, r3
10008542:	9308      	str	r3, [sp, #32]
10008544:	17db      	asrs	r3, r3, #31
10008546:	9309      	str	r3, [sp, #36]	; 0x24
10008548:	f7ff fb82 	bl	10007c50 <_vfiprintf_r+0x3ac>
1000854c:	2200      	movs	r2, #0
1000854e:	b2db      	uxtb	r3, r3
10008550:	e76c      	b.n	1000842c <_vfiprintf_r+0xb88>
10008552:	9b05      	ldr	r3, [sp, #20]
10008554:	9a03      	ldr	r2, [sp, #12]
10008556:	681b      	ldr	r3, [r3, #0]
10008558:	801a      	strh	r2, [r3, #0]
1000855a:	e479      	b.n	10007e50 <_vfiprintf_r+0x5ac>
1000855c:	6d88      	ldr	r0, [r1, #88]	; 0x58
1000855e:	f004 fe7e 	bl	1000d25e <__retarget_lock_release_recursive>
10008562:	f7ff fa35 	bl	100079d0 <_vfiprintf_r+0x12c>
10008566:	464b      	mov	r3, r9
10008568:	9304      	str	r3, [sp, #16]
1000856a:	2300      	movs	r3, #0
1000856c:	46ca      	mov	sl, r9
1000856e:	9705      	str	r7, [sp, #20]
10008570:	4699      	mov	r9, r3
10008572:	f7ff fbc6 	bl	10007d02 <_vfiprintf_r+0x45e>
10008576:	2330      	movs	r3, #48	; 0x30
10008578:	e4c1      	b.n	10007efe <_vfiprintf_r+0x65a>
1000857a:	4a1f      	ldr	r2, [pc, #124]	; (100085f8 <_vfiprintf_r+0xd54>)
1000857c:	4690      	mov	r8, r2
1000857e:	e672      	b.n	10008266 <_vfiprintf_r+0x9c2>
10008580:	9900      	ldr	r1, [sp, #0]
10008582:	9801      	ldr	r0, [sp, #4]
10008584:	aa12      	add	r2, sp, #72	; 0x48
10008586:	f003 f9db 	bl	1000b940 <__sfvwrite_r>
1000858a:	2300      	movs	r3, #0
1000858c:	9314      	str	r3, [sp, #80]	; 0x50
1000858e:	9313      	str	r3, [sp, #76]	; 0x4c
10008590:	2800      	cmp	r0, #0
10008592:	d101      	bne.n	10008598 <_vfiprintf_r+0xcf4>
10008594:	f7ff fafa 	bl	10007b8c <_vfiprintf_r+0x2e8>
10008598:	f7ff fa4d 	bl	10007a36 <_vfiprintf_r+0x192>
1000859c:	1c41      	adds	r1, r0, #1
1000859e:	468c      	mov	ip, r1
100085a0:	4915      	ldr	r1, [pc, #84]	; (100085f8 <_vfiprintf_r+0xd54>)
100085a2:	4688      	mov	r8, r1
100085a4:	e5e6      	b.n	10008174 <_vfiprintf_r+0x8d0>
100085a6:	4a15      	ldr	r2, [pc, #84]	; (100085fc <_vfiprintf_r+0xd58>)
100085a8:	4684      	mov	ip, r0
100085aa:	4690      	mov	r8, r2
100085ac:	e559      	b.n	10008062 <_vfiprintf_r+0x7be>
100085ae:	9b00      	ldr	r3, [sp, #0]
100085b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100085b2:	07db      	lsls	r3, r3, #31
100085b4:	d407      	bmi.n	100085c6 <_vfiprintf_r+0xd22>
100085b6:	9b00      	ldr	r3, [sp, #0]
100085b8:	899b      	ldrh	r3, [r3, #12]
100085ba:	059b      	lsls	r3, r3, #22
100085bc:	d403      	bmi.n	100085c6 <_vfiprintf_r+0xd22>
100085be:	9b00      	ldr	r3, [sp, #0]
100085c0:	6d98      	ldr	r0, [r3, #88]	; 0x58
100085c2:	f004 fe4c 	bl	1000d25e <__retarget_lock_release_recursive>
100085c6:	2301      	movs	r3, #1
100085c8:	425b      	negs	r3, r3
100085ca:	9303      	str	r3, [sp, #12]
100085cc:	f7ff fa3e 	bl	10007a4c <_vfiprintf_r+0x1a8>
100085d0:	9a05      	ldr	r2, [sp, #20]
100085d2:	ca80      	ldmia	r2!, {r7}
100085d4:	2f00      	cmp	r7, #0
100085d6:	da01      	bge.n	100085dc <_vfiprintf_r+0xd38>
100085d8:	2701      	movs	r7, #1
100085da:	427f      	negs	r7, r7
100085dc:	7869      	ldrb	r1, [r5, #1]
100085de:	9205      	str	r2, [sp, #20]
100085e0:	001d      	movs	r5, r3
100085e2:	f7ff f9b3 	bl	1000794c <_vfiprintf_r+0xa8>
100085e6:	46c0      	nop			; (mov r8, r8)
100085e8:	1000e6e0 	.word	0x1000e6e0
100085ec:	fffffbff 	.word	0xfffffbff
100085f0:	1000e6f4 	.word	0x1000e6f4
100085f4:	1000e708 	.word	0x1000e708
100085f8:	1000e88c 	.word	0x1000e88c
100085fc:	1000e87c 	.word	0x1000e87c

10008600 <__sbprintf>:
10008600:	b5f0      	push	{r4, r5, r6, r7, lr}
10008602:	001f      	movs	r7, r3
10008604:	2302      	movs	r3, #2
10008606:	4c1f      	ldr	r4, [pc, #124]	; (10008684 <__sbprintf+0x84>)
10008608:	0015      	movs	r5, r2
1000860a:	44a5      	add	sp, r4
1000860c:	000c      	movs	r4, r1
1000860e:	8989      	ldrh	r1, [r1, #12]
10008610:	466a      	mov	r2, sp
10008612:	4399      	bics	r1, r3
10008614:	466b      	mov	r3, sp
10008616:	8199      	strh	r1, [r3, #12]
10008618:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000861a:	2180      	movs	r1, #128	; 0x80
1000861c:	9319      	str	r3, [sp, #100]	; 0x64
1000861e:	89e3      	ldrh	r3, [r4, #14]
10008620:	0006      	movs	r6, r0
10008622:	81d3      	strh	r3, [r2, #14]
10008624:	69e3      	ldr	r3, [r4, #28]
10008626:	00c9      	lsls	r1, r1, #3
10008628:	9307      	str	r3, [sp, #28]
1000862a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000862c:	a816      	add	r0, sp, #88	; 0x58
1000862e:	9309      	str	r3, [sp, #36]	; 0x24
10008630:	ab1a      	add	r3, sp, #104	; 0x68
10008632:	9300      	str	r3, [sp, #0]
10008634:	9304      	str	r3, [sp, #16]
10008636:	2300      	movs	r3, #0
10008638:	9102      	str	r1, [sp, #8]
1000863a:	9105      	str	r1, [sp, #20]
1000863c:	9306      	str	r3, [sp, #24]
1000863e:	f004 fdfa 	bl	1000d236 <__retarget_lock_init_recursive>
10008642:	002a      	movs	r2, r5
10008644:	003b      	movs	r3, r7
10008646:	4669      	mov	r1, sp
10008648:	0030      	movs	r0, r6
1000864a:	f7ff f92b 	bl	100078a4 <_vfiprintf_r>
1000864e:	1e05      	subs	r5, r0, #0
10008650:	da0e      	bge.n	10008670 <__sbprintf+0x70>
10008652:	466b      	mov	r3, sp
10008654:	899b      	ldrh	r3, [r3, #12]
10008656:	065b      	lsls	r3, r3, #25
10008658:	d503      	bpl.n	10008662 <__sbprintf+0x62>
1000865a:	2240      	movs	r2, #64	; 0x40
1000865c:	89a3      	ldrh	r3, [r4, #12]
1000865e:	4313      	orrs	r3, r2
10008660:	81a3      	strh	r3, [r4, #12]
10008662:	9816      	ldr	r0, [sp, #88]	; 0x58
10008664:	f004 fdf0 	bl	1000d248 <__retarget_lock_close_recursive>
10008668:	0028      	movs	r0, r5
1000866a:	4b07      	ldr	r3, [pc, #28]	; (10008688 <__sbprintf+0x88>)
1000866c:	449d      	add	sp, r3
1000866e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008670:	4669      	mov	r1, sp
10008672:	0030      	movs	r0, r6
10008674:	f002 ff56 	bl	1000b524 <_fflush_r>
10008678:	2800      	cmp	r0, #0
1000867a:	d0ea      	beq.n	10008652 <__sbprintf+0x52>
1000867c:	2501      	movs	r5, #1
1000867e:	426d      	negs	r5, r5
10008680:	e7e7      	b.n	10008652 <__sbprintf+0x52>
10008682:	46c0      	nop			; (mov r8, r8)
10008684:	fffffb94 	.word	0xfffffb94
10008688:	0000046c 	.word	0x0000046c

1000868c <_vfprintf_r>:
1000868c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000868e:	46de      	mov	lr, fp
10008690:	4645      	mov	r5, r8
10008692:	4657      	mov	r7, sl
10008694:	464e      	mov	r6, r9
10008696:	b5e0      	push	{r5, r6, r7, lr}
10008698:	b0db      	sub	sp, #364	; 0x16c
1000869a:	4688      	mov	r8, r1
1000869c:	4692      	mov	sl, r2
1000869e:	001c      	movs	r4, r3
100086a0:	930f      	str	r3, [sp, #60]	; 0x3c
100086a2:	0005      	movs	r5, r0
100086a4:	9006      	str	r0, [sp, #24]
100086a6:	f003 faf7 	bl	1000bc98 <_localeconv_r>
100086aa:	6803      	ldr	r3, [r0, #0]
100086ac:	0018      	movs	r0, r3
100086ae:	931b      	str	r3, [sp, #108]	; 0x6c
100086b0:	f7ff f8a8 	bl	10007804 <strlen>
100086b4:	9019      	str	r0, [sp, #100]	; 0x64
100086b6:	2d00      	cmp	r5, #0
100086b8:	d003      	beq.n	100086c2 <_vfprintf_r+0x36>
100086ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
100086bc:	2b00      	cmp	r3, #0
100086be:	d100      	bne.n	100086c2 <_vfprintf_r+0x36>
100086c0:	e1a8      	b.n	10008a14 <_vfprintf_r+0x388>
100086c2:	4643      	mov	r3, r8
100086c4:	220c      	movs	r2, #12
100086c6:	5e9b      	ldrsh	r3, [r3, r2]
100086c8:	4642      	mov	r2, r8
100086ca:	6e52      	ldr	r2, [r2, #100]	; 0x64
100086cc:	07d2      	lsls	r2, r2, #31
100086ce:	d403      	bmi.n	100086d8 <_vfprintf_r+0x4c>
100086d0:	059a      	lsls	r2, r3, #22
100086d2:	d401      	bmi.n	100086d8 <_vfprintf_r+0x4c>
100086d4:	f000 fe6b 	bl	100093ae <_vfprintf_r+0xd22>
100086d8:	071a      	lsls	r2, r3, #28
100086da:	d54a      	bpl.n	10008772 <_vfprintf_r+0xe6>
100086dc:	4642      	mov	r2, r8
100086de:	6912      	ldr	r2, [r2, #16]
100086e0:	2a00      	cmp	r2, #0
100086e2:	d046      	beq.n	10008772 <_vfprintf_r+0xe6>
100086e4:	221a      	movs	r2, #26
100086e6:	401a      	ands	r2, r3
100086e8:	2a0a      	cmp	r2, #10
100086ea:	d051      	beq.n	10008790 <_vfprintf_r+0x104>
100086ec:	ab31      	add	r3, sp, #196	; 0xc4
100086ee:	932e      	str	r3, [sp, #184]	; 0xb8
100086f0:	2300      	movs	r3, #0
100086f2:	2400      	movs	r4, #0
100086f4:	9330      	str	r3, [sp, #192]	; 0xc0
100086f6:	932f      	str	r3, [sp, #188]	; 0xbc
100086f8:	9315      	str	r3, [sp, #84]	; 0x54
100086fa:	2300      	movs	r3, #0
100086fc:	9316      	str	r3, [sp, #88]	; 0x58
100086fe:	9417      	str	r4, [sp, #92]	; 0x5c
10008700:	2300      	movs	r3, #0
10008702:	931d      	str	r3, [sp, #116]	; 0x74
10008704:	931e      	str	r3, [sp, #120]	; 0x78
10008706:	931a      	str	r3, [sp, #104]	; 0x68
10008708:	9324      	str	r3, [sp, #144]	; 0x90
1000870a:	931f      	str	r3, [sp, #124]	; 0x7c
1000870c:	9309      	str	r3, [sp, #36]	; 0x24
1000870e:	4bcf      	ldr	r3, [pc, #828]	; (10008a4c <_vfprintf_r+0x3c0>)
10008710:	4656      	mov	r6, sl
10008712:	9310      	str	r3, [sp, #64]	; 0x40
10008714:	4bce      	ldr	r3, [pc, #824]	; (10008a50 <_vfprintf_r+0x3c4>)
10008716:	af31      	add	r7, sp, #196	; 0xc4
10008718:	931c      	str	r3, [sp, #112]	; 0x70
1000871a:	4643      	mov	r3, r8
1000871c:	9307      	str	r3, [sp, #28]
1000871e:	7833      	ldrb	r3, [r6, #0]
10008720:	2b00      	cmp	r3, #0
10008722:	d100      	bne.n	10008726 <_vfprintf_r+0x9a>
10008724:	e101      	b.n	1000892a <_vfprintf_r+0x29e>
10008726:	0034      	movs	r4, r6
10008728:	e003      	b.n	10008732 <_vfprintf_r+0xa6>
1000872a:	7863      	ldrb	r3, [r4, #1]
1000872c:	3401      	adds	r4, #1
1000872e:	2b00      	cmp	r3, #0
10008730:	d044      	beq.n	100087bc <_vfprintf_r+0x130>
10008732:	2b25      	cmp	r3, #37	; 0x25
10008734:	d1f9      	bne.n	1000872a <_vfprintf_r+0x9e>
10008736:	1ba5      	subs	r5, r4, r6
10008738:	42b4      	cmp	r4, r6
1000873a:	d143      	bne.n	100087c4 <_vfprintf_r+0x138>
1000873c:	7823      	ldrb	r3, [r4, #0]
1000873e:	2b00      	cmp	r3, #0
10008740:	d100      	bne.n	10008744 <_vfprintf_r+0xb8>
10008742:	e0f2      	b.n	1000892a <_vfprintf_r+0x29e>
10008744:	1c63      	adds	r3, r4, #1
10008746:	469a      	mov	sl, r3
10008748:	2300      	movs	r3, #0
1000874a:	aa20      	add	r2, sp, #128	; 0x80
1000874c:	76d3      	strb	r3, [r2, #27]
1000874e:	2201      	movs	r2, #1
10008750:	4252      	negs	r2, r2
10008752:	4691      	mov	r9, r2
10008754:	2200      	movs	r2, #0
10008756:	7863      	ldrb	r3, [r4, #1]
10008758:	0015      	movs	r5, r2
1000875a:	4654      	mov	r4, sl
1000875c:	920a      	str	r2, [sp, #40]	; 0x28
1000875e:	4648      	mov	r0, r9
10008760:	3401      	adds	r4, #1
10008762:	001a      	movs	r2, r3
10008764:	3a20      	subs	r2, #32
10008766:	2a5a      	cmp	r2, #90	; 0x5a
10008768:	d848      	bhi.n	100087fc <_vfprintf_r+0x170>
1000876a:	9910      	ldr	r1, [sp, #64]	; 0x40
1000876c:	0092      	lsls	r2, r2, #2
1000876e:	588a      	ldr	r2, [r1, r2]
10008770:	4697      	mov	pc, r2
10008772:	4641      	mov	r1, r8
10008774:	9806      	ldr	r0, [sp, #24]
10008776:	f001 fd63 	bl	1000a240 <__swsetup_r>
1000877a:	4643      	mov	r3, r8
1000877c:	2800      	cmp	r0, #0
1000877e:	d001      	beq.n	10008784 <_vfprintf_r+0xf8>
10008780:	f001 fbda 	bl	10009f38 <_vfprintf_r+0x18ac>
10008784:	220c      	movs	r2, #12
10008786:	5e9b      	ldrsh	r3, [r3, r2]
10008788:	221a      	movs	r2, #26
1000878a:	401a      	ands	r2, r3
1000878c:	2a0a      	cmp	r2, #10
1000878e:	d1ad      	bne.n	100086ec <_vfprintf_r+0x60>
10008790:	4642      	mov	r2, r8
10008792:	210e      	movs	r1, #14
10008794:	5e52      	ldrsh	r2, [r2, r1]
10008796:	2a00      	cmp	r2, #0
10008798:	dba8      	blt.n	100086ec <_vfprintf_r+0x60>
1000879a:	4642      	mov	r2, r8
1000879c:	6e52      	ldr	r2, [r2, #100]	; 0x64
1000879e:	07d2      	lsls	r2, r2, #31
100087a0:	d403      	bmi.n	100087aa <_vfprintf_r+0x11e>
100087a2:	059b      	lsls	r3, r3, #22
100087a4:	d401      	bmi.n	100087aa <_vfprintf_r+0x11e>
100087a6:	f001 fa11 	bl	10009bcc <_vfprintf_r+0x1540>
100087aa:	0023      	movs	r3, r4
100087ac:	4652      	mov	r2, sl
100087ae:	4641      	mov	r1, r8
100087b0:	9806      	ldr	r0, [sp, #24]
100087b2:	f001 fcff 	bl	1000a1b4 <__sbprintf>
100087b6:	9009      	str	r0, [sp, #36]	; 0x24
100087b8:	f000 fbfc 	bl	10008fb4 <_vfprintf_r+0x928>
100087bc:	1ba5      	subs	r5, r4, r6
100087be:	42b4      	cmp	r4, r6
100087c0:	d100      	bne.n	100087c4 <_vfprintf_r+0x138>
100087c2:	e0b2      	b.n	1000892a <_vfprintf_r+0x29e>
100087c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100087c6:	603e      	str	r6, [r7, #0]
100087c8:	195b      	adds	r3, r3, r5
100087ca:	9330      	str	r3, [sp, #192]	; 0xc0
100087cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
100087ce:	607d      	str	r5, [r7, #4]
100087d0:	3301      	adds	r3, #1
100087d2:	932f      	str	r3, [sp, #188]	; 0xbc
100087d4:	2b07      	cmp	r3, #7
100087d6:	dc06      	bgt.n	100087e6 <_vfprintf_r+0x15a>
100087d8:	3708      	adds	r7, #8
100087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100087dc:	469c      	mov	ip, r3
100087de:	44ac      	add	ip, r5
100087e0:	4663      	mov	r3, ip
100087e2:	9309      	str	r3, [sp, #36]	; 0x24
100087e4:	e7aa      	b.n	1000873c <_vfprintf_r+0xb0>
100087e6:	9907      	ldr	r1, [sp, #28]
100087e8:	9806      	ldr	r0, [sp, #24]
100087ea:	aa2e      	add	r2, sp, #184	; 0xb8
100087ec:	f7ff f84a 	bl	10007884 <__sprint_r>
100087f0:	2800      	cmp	r0, #0
100087f2:	d001      	beq.n	100087f8 <_vfprintf_r+0x16c>
100087f4:	f001 fc45 	bl	1000a082 <_vfprintf_r+0x19f6>
100087f8:	af31      	add	r7, sp, #196	; 0xc4
100087fa:	e7ee      	b.n	100087da <_vfprintf_r+0x14e>
100087fc:	46a2      	mov	sl, r4
100087fe:	46ab      	mov	fp, r5
10008800:	4698      	mov	r8, r3
10008802:	2b00      	cmp	r3, #0
10008804:	d100      	bne.n	10008808 <_vfprintf_r+0x17c>
10008806:	e090      	b.n	1000892a <_vfprintf_r+0x29e>
10008808:	ae41      	add	r6, sp, #260	; 0x104
1000880a:	7033      	strb	r3, [r6, #0]
1000880c:	2300      	movs	r3, #0
1000880e:	aa20      	add	r2, sp, #128	; 0x80
10008810:	76d3      	strb	r3, [r2, #27]
10008812:	3301      	adds	r3, #1
10008814:	9308      	str	r3, [sp, #32]
10008816:	2200      	movs	r2, #0
10008818:	2300      	movs	r3, #0
1000881a:	920e      	str	r2, [sp, #56]	; 0x38
1000881c:	3201      	adds	r2, #1
1000881e:	920b      	str	r2, [sp, #44]	; 0x2c
10008820:	2200      	movs	r2, #0
10008822:	4691      	mov	r9, r2
10008824:	9218      	str	r2, [sp, #96]	; 0x60
10008826:	9214      	str	r2, [sp, #80]	; 0x50
10008828:	9213      	str	r2, [sp, #76]	; 0x4c
1000882a:	2202      	movs	r2, #2
1000882c:	4659      	mov	r1, fp
1000882e:	4011      	ands	r1, r2
10008830:	9111      	str	r1, [sp, #68]	; 0x44
10008832:	4659      	mov	r1, fp
10008834:	420a      	tst	r2, r1
10008836:	d002      	beq.n	1000883e <_vfprintf_r+0x1b2>
10008838:	9a08      	ldr	r2, [sp, #32]
1000883a:	3202      	adds	r2, #2
1000883c:	9208      	str	r2, [sp, #32]
1000883e:	2284      	movs	r2, #132	; 0x84
10008840:	4659      	mov	r1, fp
10008842:	4011      	ands	r1, r2
10008844:	9112      	str	r1, [sp, #72]	; 0x48
10008846:	4659      	mov	r1, fp
10008848:	420a      	tst	r2, r1
1000884a:	d106      	bne.n	1000885a <_vfprintf_r+0x1ce>
1000884c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000884e:	9908      	ldr	r1, [sp, #32]
10008850:	1a54      	subs	r4, r2, r1
10008852:	2c00      	cmp	r4, #0
10008854:	dd01      	ble.n	1000885a <_vfprintf_r+0x1ce>
10008856:	f000 fc04 	bl	10009062 <_vfprintf_r+0x9d6>
1000885a:	2b00      	cmp	r3, #0
1000885c:	d011      	beq.n	10008882 <_vfprintf_r+0x1f6>
1000885e:	aa20      	add	r2, sp, #128	; 0x80
10008860:	231b      	movs	r3, #27
10008862:	4694      	mov	ip, r2
10008864:	4463      	add	r3, ip
10008866:	603b      	str	r3, [r7, #0]
10008868:	2301      	movs	r3, #1
1000886a:	607b      	str	r3, [r7, #4]
1000886c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
1000886e:	3301      	adds	r3, #1
10008870:	9330      	str	r3, [sp, #192]	; 0xc0
10008872:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008874:	3301      	adds	r3, #1
10008876:	932f      	str	r3, [sp, #188]	; 0xbc
10008878:	2b07      	cmp	r3, #7
1000887a:	dd01      	ble.n	10008880 <_vfprintf_r+0x1f4>
1000887c:	f000 fc3c 	bl	100090f8 <_vfprintf_r+0xa6c>
10008880:	3708      	adds	r7, #8
10008882:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008884:	2b00      	cmp	r3, #0
10008886:	d00e      	beq.n	100088a6 <_vfprintf_r+0x21a>
10008888:	ab27      	add	r3, sp, #156	; 0x9c
1000888a:	603b      	str	r3, [r7, #0]
1000888c:	2302      	movs	r3, #2
1000888e:	607b      	str	r3, [r7, #4]
10008890:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008892:	3302      	adds	r3, #2
10008894:	9330      	str	r3, [sp, #192]	; 0xc0
10008896:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008898:	3301      	adds	r3, #1
1000889a:	932f      	str	r3, [sp, #188]	; 0xbc
1000889c:	2b07      	cmp	r3, #7
1000889e:	dd01      	ble.n	100088a4 <_vfprintf_r+0x218>
100088a0:	f000 fc35 	bl	1000910e <_vfprintf_r+0xa82>
100088a4:	3708      	adds	r7, #8
100088a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
100088a8:	2b80      	cmp	r3, #128	; 0x80
100088aa:	d100      	bne.n	100088ae <_vfprintf_r+0x222>
100088ac:	e2f9      	b.n	10008ea2 <_vfprintf_r+0x816>
100088ae:	464b      	mov	r3, r9
100088b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100088b2:	1a9c      	subs	r4, r3, r2
100088b4:	2c00      	cmp	r4, #0
100088b6:	dd00      	ble.n	100088ba <_vfprintf_r+0x22e>
100088b8:	e329      	b.n	10008f0e <_vfprintf_r+0x882>
100088ba:	465b      	mov	r3, fp
100088bc:	05db      	lsls	r3, r3, #23
100088be:	d500      	bpl.n	100088c2 <_vfprintf_r+0x236>
100088c0:	e243      	b.n	10008d4a <_vfprintf_r+0x6be>
100088c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100088c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100088c6:	4694      	mov	ip, r2
100088c8:	607a      	str	r2, [r7, #4]
100088ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
100088cc:	4463      	add	r3, ip
100088ce:	3201      	adds	r2, #1
100088d0:	603e      	str	r6, [r7, #0]
100088d2:	9330      	str	r3, [sp, #192]	; 0xc0
100088d4:	922f      	str	r2, [sp, #188]	; 0xbc
100088d6:	2a07      	cmp	r2, #7
100088d8:	dd00      	ble.n	100088dc <_vfprintf_r+0x250>
100088da:	e090      	b.n	100089fe <_vfprintf_r+0x372>
100088dc:	3708      	adds	r7, #8
100088de:	465a      	mov	r2, fp
100088e0:	0752      	lsls	r2, r2, #29
100088e2:	d506      	bpl.n	100088f2 <_vfprintf_r+0x266>
100088e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100088e6:	9908      	ldr	r1, [sp, #32]
100088e8:	1a56      	subs	r6, r2, r1
100088ea:	2e00      	cmp	r6, #0
100088ec:	dd01      	ble.n	100088f2 <_vfprintf_r+0x266>
100088ee:	f000 fc19 	bl	10009124 <_vfprintf_r+0xa98>
100088f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100088f4:	9908      	ldr	r1, [sp, #32]
100088f6:	428a      	cmp	r2, r1
100088f8:	da00      	bge.n	100088fc <_vfprintf_r+0x270>
100088fa:	000a      	movs	r2, r1
100088fc:	9909      	ldr	r1, [sp, #36]	; 0x24
100088fe:	468c      	mov	ip, r1
10008900:	4494      	add	ip, r2
10008902:	4662      	mov	r2, ip
10008904:	9209      	str	r2, [sp, #36]	; 0x24
10008906:	2b00      	cmp	r3, #0
10008908:	d000      	beq.n	1000890c <_vfprintf_r+0x280>
1000890a:	e334      	b.n	10008f76 <_vfprintf_r+0x8ea>
1000890c:	2300      	movs	r3, #0
1000890e:	932f      	str	r3, [sp, #188]	; 0xbc
10008910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008912:	2b00      	cmp	r3, #0
10008914:	d003      	beq.n	1000891e <_vfprintf_r+0x292>
10008916:	990e      	ldr	r1, [sp, #56]	; 0x38
10008918:	9806      	ldr	r0, [sp, #24]
1000891a:	f002 ff27 	bl	1000b76c <_free_r>
1000891e:	4656      	mov	r6, sl
10008920:	af31      	add	r7, sp, #196	; 0xc4
10008922:	7833      	ldrb	r3, [r6, #0]
10008924:	2b00      	cmp	r3, #0
10008926:	d000      	beq.n	1000892a <_vfprintf_r+0x29e>
10008928:	e6fd      	b.n	10008726 <_vfprintf_r+0x9a>
1000892a:	9b07      	ldr	r3, [sp, #28]
1000892c:	4698      	mov	r8, r3
1000892e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008930:	2b00      	cmp	r3, #0
10008932:	d001      	beq.n	10008938 <_vfprintf_r+0x2ac>
10008934:	f001 f841 	bl	100099ba <_vfprintf_r+0x132e>
10008938:	2300      	movs	r3, #0
1000893a:	932f      	str	r3, [sp, #188]	; 0xbc
1000893c:	e32b      	b.n	10008f96 <_vfprintf_r+0x90a>
1000893e:	3b30      	subs	r3, #48	; 0x30
10008940:	2100      	movs	r1, #0
10008942:	001a      	movs	r2, r3
10008944:	008b      	lsls	r3, r1, #2
10008946:	185b      	adds	r3, r3, r1
10008948:	005b      	lsls	r3, r3, #1
1000894a:	18d1      	adds	r1, r2, r3
1000894c:	7823      	ldrb	r3, [r4, #0]
1000894e:	3401      	adds	r4, #1
10008950:	001a      	movs	r2, r3
10008952:	3a30      	subs	r2, #48	; 0x30
10008954:	2a09      	cmp	r2, #9
10008956:	d9f5      	bls.n	10008944 <_vfprintf_r+0x2b8>
10008958:	910a      	str	r1, [sp, #40]	; 0x28
1000895a:	e702      	b.n	10008762 <_vfprintf_r+0xd6>
1000895c:	2207      	movs	r2, #7
1000895e:	4698      	mov	r8, r3
10008960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008962:	46a2      	mov	sl, r4
10008964:	3307      	adds	r3, #7
10008966:	4393      	bics	r3, r2
10008968:	2201      	movs	r2, #1
1000896a:	46ab      	mov	fp, r5
1000896c:	cb30      	ldmia	r3!, {r4, r5}
1000896e:	930f      	str	r3, [sp, #60]	; 0x3c
10008970:	006b      	lsls	r3, r5, #1
10008972:	085b      	lsrs	r3, r3, #1
10008974:	9321      	str	r3, [sp, #132]	; 0x84
10008976:	9420      	str	r4, [sp, #128]	; 0x80
10008978:	4681      	mov	r9, r0
1000897a:	9820      	ldr	r0, [sp, #128]	; 0x80
1000897c:	9921      	ldr	r1, [sp, #132]	; 0x84
1000897e:	4b35      	ldr	r3, [pc, #212]	; (10008a54 <_vfprintf_r+0x3c8>)
10008980:	4252      	negs	r2, r2
10008982:	9416      	str	r4, [sp, #88]	; 0x58
10008984:	9517      	str	r5, [sp, #92]	; 0x5c
10008986:	f7f9 fc0d 	bl	100021a4 <__aeabi_dcmpun>
1000898a:	2800      	cmp	r0, #0
1000898c:	d001      	beq.n	10008992 <_vfprintf_r+0x306>
1000898e:	f000 fd7e 	bl	1000948e <_vfprintf_r+0xe02>
10008992:	9820      	ldr	r0, [sp, #128]	; 0x80
10008994:	9921      	ldr	r1, [sp, #132]	; 0x84
10008996:	2201      	movs	r2, #1
10008998:	4b2e      	ldr	r3, [pc, #184]	; (10008a54 <_vfprintf_r+0x3c8>)
1000899a:	4252      	negs	r2, r2
1000899c:	f7f9 fa5a 	bl	10001e54 <__aeabi_dcmple>
100089a0:	2800      	cmp	r0, #0
100089a2:	d001      	beq.n	100089a8 <_vfprintf_r+0x31c>
100089a4:	f000 fd73 	bl	1000948e <_vfprintf_r+0xe02>
100089a8:	2200      	movs	r2, #0
100089aa:	2300      	movs	r3, #0
100089ac:	0020      	movs	r0, r4
100089ae:	0029      	movs	r1, r5
100089b0:	f7f9 fa46 	bl	10001e40 <__aeabi_dcmplt>
100089b4:	2800      	cmp	r0, #0
100089b6:	d001      	beq.n	100089bc <_vfprintf_r+0x330>
100089b8:	f000 fffa 	bl	100099b0 <_vfprintf_r+0x1324>
100089bc:	ab20      	add	r3, sp, #128	; 0x80
100089be:	7edb      	ldrb	r3, [r3, #27]
100089c0:	4642      	mov	r2, r8
100089c2:	2a47      	cmp	r2, #71	; 0x47
100089c4:	dc01      	bgt.n	100089ca <_vfprintf_r+0x33e>
100089c6:	f000 ffd6 	bl	10009976 <_vfprintf_r+0x12ea>
100089ca:	4e23      	ldr	r6, [pc, #140]	; (10008a58 <_vfprintf_r+0x3cc>)
100089cc:	2280      	movs	r2, #128	; 0x80
100089ce:	4659      	mov	r1, fp
100089d0:	4391      	bics	r1, r2
100089d2:	3a7d      	subs	r2, #125	; 0x7d
100089d4:	9208      	str	r2, [sp, #32]
100089d6:	2200      	movs	r2, #0
100089d8:	468b      	mov	fp, r1
100089da:	920e      	str	r2, [sp, #56]	; 0x38
100089dc:	3203      	adds	r2, #3
100089de:	920b      	str	r2, [sp, #44]	; 0x2c
100089e0:	2200      	movs	r2, #0
100089e2:	4691      	mov	r9, r2
100089e4:	9218      	str	r2, [sp, #96]	; 0x60
100089e6:	9214      	str	r2, [sp, #80]	; 0x50
100089e8:	9213      	str	r2, [sp, #76]	; 0x4c
100089ea:	e0b2      	b.n	10008b52 <_vfprintf_r+0x4c6>
100089ec:	199b      	adds	r3, r3, r6
100089ee:	3201      	adds	r2, #1
100089f0:	603d      	str	r5, [r7, #0]
100089f2:	607e      	str	r6, [r7, #4]
100089f4:	9330      	str	r3, [sp, #192]	; 0xc0
100089f6:	922f      	str	r2, [sp, #188]	; 0xbc
100089f8:	2a07      	cmp	r2, #7
100089fa:	dc00      	bgt.n	100089fe <_vfprintf_r+0x372>
100089fc:	e76e      	b.n	100088dc <_vfprintf_r+0x250>
100089fe:	9907      	ldr	r1, [sp, #28]
10008a00:	9806      	ldr	r0, [sp, #24]
10008a02:	aa2e      	add	r2, sp, #184	; 0xb8
10008a04:	f7fe ff3e 	bl	10007884 <__sprint_r>
10008a08:	2800      	cmp	r0, #0
10008a0a:	d000      	beq.n	10008a0e <_vfprintf_r+0x382>
10008a0c:	e2bb      	b.n	10008f86 <_vfprintf_r+0x8fa>
10008a0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008a10:	af31      	add	r7, sp, #196	; 0xc4
10008a12:	e764      	b.n	100088de <_vfprintf_r+0x252>
10008a14:	9806      	ldr	r0, [sp, #24]
10008a16:	f002 fdc3 	bl	1000b5a0 <__sinit>
10008a1a:	e652      	b.n	100086c2 <_vfprintf_r+0x36>
10008a1c:	4681      	mov	r9, r0
10008a1e:	7823      	ldrb	r3, [r4, #0]
10008a20:	e69d      	b.n	1000875e <_vfprintf_r+0xd2>
10008a22:	2320      	movs	r3, #32
10008a24:	4681      	mov	r9, r0
10008a26:	431d      	orrs	r5, r3
10008a28:	7823      	ldrb	r3, [r4, #0]
10008a2a:	e698      	b.n	1000875e <_vfprintf_r+0xd2>
10008a2c:	4698      	mov	r8, r3
10008a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008a30:	ae41      	add	r6, sp, #260	; 0x104
10008a32:	cb04      	ldmia	r3!, {r2}
10008a34:	a920      	add	r1, sp, #128	; 0x80
10008a36:	7032      	strb	r2, [r6, #0]
10008a38:	930f      	str	r3, [sp, #60]	; 0x3c
10008a3a:	2200      	movs	r2, #0
10008a3c:	2301      	movs	r3, #1
10008a3e:	46a2      	mov	sl, r4
10008a40:	9308      	str	r3, [sp, #32]
10008a42:	46ab      	mov	fp, r5
10008a44:	2300      	movs	r3, #0
10008a46:	76ca      	strb	r2, [r1, #27]
10008a48:	e6e7      	b.n	1000881a <_vfprintf_r+0x18e>
10008a4a:	46c0      	nop			; (mov r8, r8)
10008a4c:	1000e8b0 	.word	0x1000e8b0
10008a50:	1000eab4 	.word	0x1000eab4
10008a54:	7fefffff 	.word	0x7fefffff
10008a58:	1000e8a0 	.word	0x1000e8a0
10008a5c:	4698      	mov	r8, r3
10008a5e:	2300      	movs	r3, #0
10008a60:	46a2      	mov	sl, r4
10008a62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10008a64:	aa20      	add	r2, sp, #128	; 0x80
10008a66:	cc40      	ldmia	r4!, {r6}
10008a68:	76d3      	strb	r3, [r2, #27]
10008a6a:	46ab      	mov	fp, r5
10008a6c:	4681      	mov	r9, r0
10008a6e:	0003      	movs	r3, r0
10008a70:	2e00      	cmp	r6, #0
10008a72:	d101      	bne.n	10008a78 <_vfprintf_r+0x3ec>
10008a74:	f000 fdbc 	bl	100095f0 <_vfprintf_r+0xf64>
10008a78:	3301      	adds	r3, #1
10008a7a:	d101      	bne.n	10008a80 <_vfprintf_r+0x3f4>
10008a7c:	f000 ff53 	bl	10009926 <_vfprintf_r+0x129a>
10008a80:	0002      	movs	r2, r0
10008a82:	2100      	movs	r1, #0
10008a84:	0030      	movs	r0, r6
10008a86:	f003 f96b 	bl	1000bd60 <memchr>
10008a8a:	900e      	str	r0, [sp, #56]	; 0x38
10008a8c:	2800      	cmp	r0, #0
10008a8e:	d101      	bne.n	10008a94 <_vfprintf_r+0x408>
10008a90:	f001 fa1c 	bl	10009ecc <_vfprintf_r+0x1840>
10008a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008a96:	1b99      	subs	r1, r3, r6
10008a98:	43ca      	mvns	r2, r1
10008a9a:	17d2      	asrs	r2, r2, #31
10008a9c:	910b      	str	r1, [sp, #44]	; 0x2c
10008a9e:	4011      	ands	r1, r2
10008aa0:	2200      	movs	r2, #0
10008aa2:	ab20      	add	r3, sp, #128	; 0x80
10008aa4:	4691      	mov	r9, r2
10008aa6:	7edb      	ldrb	r3, [r3, #27]
10008aa8:	9108      	str	r1, [sp, #32]
10008aaa:	940f      	str	r4, [sp, #60]	; 0x3c
10008aac:	920e      	str	r2, [sp, #56]	; 0x38
10008aae:	9218      	str	r2, [sp, #96]	; 0x60
10008ab0:	9214      	str	r2, [sp, #80]	; 0x50
10008ab2:	9213      	str	r2, [sp, #76]	; 0x4c
10008ab4:	e04d      	b.n	10008b52 <_vfprintf_r+0x4c6>
10008ab6:	7823      	ldrb	r3, [r4, #0]
10008ab8:	4681      	mov	r9, r0
10008aba:	2b68      	cmp	r3, #104	; 0x68
10008abc:	d101      	bne.n	10008ac2 <_vfprintf_r+0x436>
10008abe:	f000 fd7e 	bl	100095be <_vfprintf_r+0xf32>
10008ac2:	2240      	movs	r2, #64	; 0x40
10008ac4:	4315      	orrs	r5, r2
10008ac6:	e64a      	b.n	1000875e <_vfprintf_r+0xd2>
10008ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008aca:	46ab      	mov	fp, r5
10008acc:	cb04      	ldmia	r3!, {r2}
10008ace:	2502      	movs	r5, #2
10008ad0:	920c      	str	r2, [sp, #48]	; 0x30
10008ad2:	2200      	movs	r2, #0
10008ad4:	920d      	str	r2, [sp, #52]	; 0x34
10008ad6:	465a      	mov	r2, fp
10008ad8:	49c8      	ldr	r1, [pc, #800]	; (10008dfc <_vfprintf_r+0x770>)
10008ada:	432a      	orrs	r2, r5
10008adc:	0015      	movs	r5, r2
10008ade:	aa27      	add	r2, sp, #156	; 0x9c
10008ae0:	8011      	strh	r1, [r2, #0]
10008ae2:	2278      	movs	r2, #120	; 0x78
10008ae4:	930f      	str	r3, [sp, #60]	; 0x3c
10008ae6:	4bc6      	ldr	r3, [pc, #792]	; (10008e00 <_vfprintf_r+0x774>)
10008ae8:	46a2      	mov	sl, r4
10008aea:	931d      	str	r3, [sp, #116]	; 0x74
10008aec:	4681      	mov	r9, r0
10008aee:	2302      	movs	r3, #2
10008af0:	4690      	mov	r8, r2
10008af2:	2200      	movs	r2, #0
10008af4:	a920      	add	r1, sp, #128	; 0x80
10008af6:	76ca      	strb	r2, [r1, #27]
10008af8:	464a      	mov	r2, r9
10008afa:	3201      	adds	r2, #1
10008afc:	d100      	bne.n	10008b00 <_vfprintf_r+0x474>
10008afe:	e188      	b.n	10008e12 <_vfprintf_r+0x786>
10008b00:	2280      	movs	r2, #128	; 0x80
10008b02:	0029      	movs	r1, r5
10008b04:	4391      	bics	r1, r2
10008b06:	468b      	mov	fp, r1
10008b08:	990c      	ldr	r1, [sp, #48]	; 0x30
10008b0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10008b0c:	0008      	movs	r0, r1
10008b0e:	4310      	orrs	r0, r2
10008b10:	d000      	beq.n	10008b14 <_vfprintf_r+0x488>
10008b12:	e17d      	b.n	10008e10 <_vfprintf_r+0x784>
10008b14:	464a      	mov	r2, r9
10008b16:	2a00      	cmp	r2, #0
10008b18:	d001      	beq.n	10008b1e <_vfprintf_r+0x492>
10008b1a:	f000 fec5 	bl	100098a8 <_vfprintf_r+0x121c>
10008b1e:	2b00      	cmp	r3, #0
10008b20:	d001      	beq.n	10008b26 <_vfprintf_r+0x49a>
10008b22:	f000 fc3f 	bl	100093a4 <_vfprintf_r+0xd18>
10008b26:	3301      	adds	r3, #1
10008b28:	001a      	movs	r2, r3
10008b2a:	402a      	ands	r2, r5
10008b2c:	920b      	str	r2, [sp, #44]	; 0x2c
10008b2e:	ae5a      	add	r6, sp, #360	; 0x168
10008b30:	422b      	tst	r3, r5
10008b32:	d001      	beq.n	10008b38 <_vfprintf_r+0x4ac>
10008b34:	f000 fc74 	bl	10009420 <_vfprintf_r+0xd94>
10008b38:	464a      	mov	r2, r9
10008b3a:	9208      	str	r2, [sp, #32]
10008b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008b3e:	ab20      	add	r3, sp, #128	; 0x80
10008b40:	7edb      	ldrb	r3, [r3, #27]
10008b42:	4591      	cmp	r9, r2
10008b44:	da00      	bge.n	10008b48 <_vfprintf_r+0x4bc>
10008b46:	9208      	str	r2, [sp, #32]
10008b48:	2200      	movs	r2, #0
10008b4a:	920e      	str	r2, [sp, #56]	; 0x38
10008b4c:	9218      	str	r2, [sp, #96]	; 0x60
10008b4e:	9214      	str	r2, [sp, #80]	; 0x50
10008b50:	9213      	str	r2, [sp, #76]	; 0x4c
10008b52:	2b00      	cmp	r3, #0
10008b54:	d100      	bne.n	10008b58 <_vfprintf_r+0x4cc>
10008b56:	e668      	b.n	1000882a <_vfprintf_r+0x19e>
10008b58:	9a08      	ldr	r2, [sp, #32]
10008b5a:	3201      	adds	r2, #1
10008b5c:	9208      	str	r2, [sp, #32]
10008b5e:	e664      	b.n	1000882a <_vfprintf_r+0x19e>
10008b60:	002b      	movs	r3, r5
10008b62:	46a2      	mov	sl, r4
10008b64:	069b      	lsls	r3, r3, #26
10008b66:	d401      	bmi.n	10008b6c <_vfprintf_r+0x4e0>
10008b68:	f000 fc7f 	bl	1000946a <_vfprintf_r+0xdde>
10008b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008b70:	681b      	ldr	r3, [r3, #0]
10008b72:	601a      	str	r2, [r3, #0]
10008b74:	17d2      	asrs	r2, r2, #31
10008b76:	605a      	str	r2, [r3, #4]
10008b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008b7a:	4656      	mov	r6, sl
10008b7c:	3304      	adds	r3, #4
10008b7e:	930f      	str	r3, [sp, #60]	; 0x3c
10008b80:	e6cf      	b.n	10008922 <_vfprintf_r+0x296>
10008b82:	7823      	ldrb	r3, [r4, #0]
10008b84:	4681      	mov	r9, r0
10008b86:	2b6c      	cmp	r3, #108	; 0x6c
10008b88:	d101      	bne.n	10008b8e <_vfprintf_r+0x502>
10008b8a:	f000 fd1f 	bl	100095cc <_vfprintf_r+0xf40>
10008b8e:	2210      	movs	r2, #16
10008b90:	4315      	orrs	r5, r2
10008b92:	e5e4      	b.n	1000875e <_vfprintf_r+0xd2>
10008b94:	4698      	mov	r8, r3
10008b96:	002a      	movs	r2, r5
10008b98:	2310      	movs	r3, #16
10008b9a:	431a      	orrs	r2, r3
10008b9c:	46a2      	mov	sl, r4
10008b9e:	4681      	mov	r9, r0
10008ba0:	4693      	mov	fp, r2
10008ba2:	465b      	mov	r3, fp
10008ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008ba6:	069b      	lsls	r3, r3, #26
10008ba8:	d400      	bmi.n	10008bac <_vfprintf_r+0x520>
10008baa:	e3d4      	b.n	10009356 <_vfprintf_r+0xcca>
10008bac:	2307      	movs	r3, #7
10008bae:	3207      	adds	r2, #7
10008bb0:	439a      	bics	r2, r3
10008bb2:	3301      	adds	r3, #1
10008bb4:	469c      	mov	ip, r3
10008bb6:	4494      	add	ip, r2
10008bb8:	4663      	mov	r3, ip
10008bba:	930f      	str	r3, [sp, #60]	; 0x3c
10008bbc:	6853      	ldr	r3, [r2, #4]
10008bbe:	6812      	ldr	r2, [r2, #0]
10008bc0:	930d      	str	r3, [sp, #52]	; 0x34
10008bc2:	920c      	str	r2, [sp, #48]	; 0x30
10008bc4:	2b00      	cmp	r3, #0
10008bc6:	da01      	bge.n	10008bcc <_vfprintf_r+0x540>
10008bc8:	f000 fbe0 	bl	1000938c <_vfprintf_r+0xd00>
10008bcc:	464b      	mov	r3, r9
10008bce:	465d      	mov	r5, fp
10008bd0:	3301      	adds	r3, #1
10008bd2:	d00d      	beq.n	10008bf0 <_vfprintf_r+0x564>
10008bd4:	2380      	movs	r3, #128	; 0x80
10008bd6:	439d      	bics	r5, r3
10008bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008bdc:	0011      	movs	r1, r2
10008bde:	4319      	orrs	r1, r3
10008be0:	d106      	bne.n	10008bf0 <_vfprintf_r+0x564>
10008be2:	464b      	mov	r3, r9
10008be4:	2b00      	cmp	r3, #0
10008be6:	d10d      	bne.n	10008c04 <_vfprintf_r+0x578>
10008be8:	46ab      	mov	fp, r5
10008bea:	930b      	str	r3, [sp, #44]	; 0x2c
10008bec:	ae5a      	add	r6, sp, #360	; 0x168
10008bee:	e7a3      	b.n	10008b38 <_vfprintf_r+0x4ac>
10008bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008bf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008bf4:	2c00      	cmp	r4, #0
10008bf6:	d001      	beq.n	10008bfc <_vfprintf_r+0x570>
10008bf8:	f000 fd0c 	bl	10009614 <_vfprintf_r+0xf88>
10008bfc:	2b09      	cmp	r3, #9
10008bfe:	d901      	bls.n	10008c04 <_vfprintf_r+0x578>
10008c00:	f000 fd08 	bl	10009614 <_vfprintf_r+0xf88>
10008c04:	2263      	movs	r2, #99	; 0x63
10008c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008c08:	a941      	add	r1, sp, #260	; 0x104
10008c0a:	3330      	adds	r3, #48	; 0x30
10008c0c:	548b      	strb	r3, [r1, r2]
10008c0e:	2301      	movs	r3, #1
10008c10:	930b      	str	r3, [sp, #44]	; 0x2c
10008c12:	ab20      	add	r3, sp, #128	; 0x80
10008c14:	26e7      	movs	r6, #231	; 0xe7
10008c16:	469c      	mov	ip, r3
10008c18:	46ab      	mov	fp, r5
10008c1a:	4466      	add	r6, ip
10008c1c:	e78c      	b.n	10008b38 <_vfprintf_r+0x4ac>
10008c1e:	46ab      	mov	fp, r5
10008c20:	4698      	mov	r8, r3
10008c22:	2510      	movs	r5, #16
10008c24:	465b      	mov	r3, fp
10008c26:	432b      	orrs	r3, r5
10008c28:	46a2      	mov	sl, r4
10008c2a:	4681      	mov	r9, r0
10008c2c:	001d      	movs	r5, r3
10008c2e:	06ab      	lsls	r3, r5, #26
10008c30:	d400      	bmi.n	10008c34 <_vfprintf_r+0x5a8>
10008c32:	e382      	b.n	1000933a <_vfprintf_r+0xcae>
10008c34:	2207      	movs	r2, #7
10008c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008c38:	3307      	adds	r3, #7
10008c3a:	4393      	bics	r3, r2
10008c3c:	001a      	movs	r2, r3
10008c3e:	ca18      	ldmia	r2!, {r3, r4}
10008c40:	930c      	str	r3, [sp, #48]	; 0x30
10008c42:	940d      	str	r4, [sp, #52]	; 0x34
10008c44:	920f      	str	r2, [sp, #60]	; 0x3c
10008c46:	2301      	movs	r3, #1
10008c48:	e753      	b.n	10008af2 <_vfprintf_r+0x466>
10008c4a:	2380      	movs	r3, #128	; 0x80
10008c4c:	4681      	mov	r9, r0
10008c4e:	431d      	orrs	r5, r3
10008c50:	7823      	ldrb	r3, [r4, #0]
10008c52:	e584      	b.n	1000875e <_vfprintf_r+0xd2>
10008c54:	4698      	mov	r8, r3
10008c56:	002a      	movs	r2, r5
10008c58:	2310      	movs	r3, #16
10008c5a:	431a      	orrs	r2, r3
10008c5c:	46a2      	mov	sl, r4
10008c5e:	4681      	mov	r9, r0
10008c60:	4693      	mov	fp, r2
10008c62:	465b      	mov	r3, fp
10008c64:	069b      	lsls	r3, r3, #26
10008c66:	d400      	bmi.n	10008c6a <_vfprintf_r+0x5de>
10008c68:	e382      	b.n	10009370 <_vfprintf_r+0xce4>
10008c6a:	2207      	movs	r2, #7
10008c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008c6e:	3307      	adds	r3, #7
10008c70:	4393      	bics	r3, r2
10008c72:	001a      	movs	r2, r3
10008c74:	ca18      	ldmia	r2!, {r3, r4}
10008c76:	930c      	str	r3, [sp, #48]	; 0x30
10008c78:	940d      	str	r4, [sp, #52]	; 0x34
10008c7a:	920f      	str	r2, [sp, #60]	; 0x3c
10008c7c:	465b      	mov	r3, fp
10008c7e:	4d61      	ldr	r5, [pc, #388]	; (10008e04 <_vfprintf_r+0x778>)
10008c80:	402b      	ands	r3, r5
10008c82:	001d      	movs	r5, r3
10008c84:	2300      	movs	r3, #0
10008c86:	e734      	b.n	10008af2 <_vfprintf_r+0x466>
10008c88:	2308      	movs	r3, #8
10008c8a:	4681      	mov	r9, r0
10008c8c:	431d      	orrs	r5, r3
10008c8e:	7823      	ldrb	r3, [r4, #0]
10008c90:	e565      	b.n	1000875e <_vfprintf_r+0xd2>
10008c92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008c94:	4681      	mov	r9, r0
10008c96:	ca08      	ldmia	r2!, {r3}
10008c98:	930a      	str	r3, [sp, #40]	; 0x28
10008c9a:	2b00      	cmp	r3, #0
10008c9c:	da01      	bge.n	10008ca2 <_vfprintf_r+0x616>
10008c9e:	f000 fc2f 	bl	10009500 <_vfprintf_r+0xe74>
10008ca2:	7823      	ldrb	r3, [r4, #0]
10008ca4:	920f      	str	r2, [sp, #60]	; 0x3c
10008ca6:	e55a      	b.n	1000875e <_vfprintf_r+0xd2>
10008ca8:	9b06      	ldr	r3, [sp, #24]
10008caa:	4681      	mov	r9, r0
10008cac:	0018      	movs	r0, r3
10008cae:	469a      	mov	sl, r3
10008cb0:	f002 fff2 	bl	1000bc98 <_localeconv_r>
10008cb4:	6843      	ldr	r3, [r0, #4]
10008cb6:	0018      	movs	r0, r3
10008cb8:	931f      	str	r3, [sp, #124]	; 0x7c
10008cba:	f7fe fda3 	bl	10007804 <strlen>
10008cbe:	4680      	mov	r8, r0
10008cc0:	9024      	str	r0, [sp, #144]	; 0x90
10008cc2:	4650      	mov	r0, sl
10008cc4:	f002 ffe8 	bl	1000bc98 <_localeconv_r>
10008cc8:	6883      	ldr	r3, [r0, #8]
10008cca:	931a      	str	r3, [sp, #104]	; 0x68
10008ccc:	4643      	mov	r3, r8
10008cce:	2b00      	cmp	r3, #0
10008cd0:	d100      	bne.n	10008cd4 <_vfprintf_r+0x648>
10008cd2:	e6a4      	b.n	10008a1e <_vfprintf_r+0x392>
10008cd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
10008cd6:	7823      	ldrb	r3, [r4, #0]
10008cd8:	2a00      	cmp	r2, #0
10008cda:	d100      	bne.n	10008cde <_vfprintf_r+0x652>
10008cdc:	e53f      	b.n	1000875e <_vfprintf_r+0xd2>
10008cde:	7812      	ldrb	r2, [r2, #0]
10008ce0:	2a00      	cmp	r2, #0
10008ce2:	d100      	bne.n	10008ce6 <_vfprintf_r+0x65a>
10008ce4:	e53b      	b.n	1000875e <_vfprintf_r+0xd2>
10008ce6:	2280      	movs	r2, #128	; 0x80
10008ce8:	00d2      	lsls	r2, r2, #3
10008cea:	4315      	orrs	r5, r2
10008cec:	e537      	b.n	1000875e <_vfprintf_r+0xd2>
10008cee:	2301      	movs	r3, #1
10008cf0:	4681      	mov	r9, r0
10008cf2:	431d      	orrs	r5, r3
10008cf4:	7823      	ldrb	r3, [r4, #0]
10008cf6:	e532      	b.n	1000875e <_vfprintf_r+0xd2>
10008cf8:	aa20      	add	r2, sp, #128	; 0x80
10008cfa:	7ed2      	ldrb	r2, [r2, #27]
10008cfc:	4681      	mov	r9, r0
10008cfe:	7823      	ldrb	r3, [r4, #0]
10008d00:	2a00      	cmp	r2, #0
10008d02:	d000      	beq.n	10008d06 <_vfprintf_r+0x67a>
10008d04:	e52b      	b.n	1000875e <_vfprintf_r+0xd2>
10008d06:	3220      	adds	r2, #32
10008d08:	a920      	add	r1, sp, #128	; 0x80
10008d0a:	76ca      	strb	r2, [r1, #27]
10008d0c:	e527      	b.n	1000875e <_vfprintf_r+0xd2>
10008d0e:	232b      	movs	r3, #43	; 0x2b
10008d10:	aa20      	add	r2, sp, #128	; 0x80
10008d12:	76d3      	strb	r3, [r2, #27]
10008d14:	4681      	mov	r9, r0
10008d16:	7823      	ldrb	r3, [r4, #0]
10008d18:	e521      	b.n	1000875e <_vfprintf_r+0xd2>
10008d1a:	7823      	ldrb	r3, [r4, #0]
10008d1c:	1c61      	adds	r1, r4, #1
10008d1e:	2b2a      	cmp	r3, #42	; 0x2a
10008d20:	d101      	bne.n	10008d26 <_vfprintf_r+0x69a>
10008d22:	f001 fa24 	bl	1000a16e <_vfprintf_r+0x1ae2>
10008d26:	001a      	movs	r2, r3
10008d28:	3a30      	subs	r2, #48	; 0x30
10008d2a:	000c      	movs	r4, r1
10008d2c:	2000      	movs	r0, #0
10008d2e:	2a09      	cmp	r2, #9
10008d30:	d900      	bls.n	10008d34 <_vfprintf_r+0x6a8>
10008d32:	e516      	b.n	10008762 <_vfprintf_r+0xd6>
10008d34:	0083      	lsls	r3, r0, #2
10008d36:	181b      	adds	r3, r3, r0
10008d38:	005b      	lsls	r3, r3, #1
10008d3a:	1898      	adds	r0, r3, r2
10008d3c:	7823      	ldrb	r3, [r4, #0]
10008d3e:	3401      	adds	r4, #1
10008d40:	001a      	movs	r2, r3
10008d42:	3a30      	subs	r2, #48	; 0x30
10008d44:	2a09      	cmp	r2, #9
10008d46:	d9f5      	bls.n	10008d34 <_vfprintf_r+0x6a8>
10008d48:	e50b      	b.n	10008762 <_vfprintf_r+0xd6>
10008d4a:	4643      	mov	r3, r8
10008d4c:	2b65      	cmp	r3, #101	; 0x65
10008d4e:	dc00      	bgt.n	10008d52 <_vfprintf_r+0x6c6>
10008d50:	e138      	b.n	10008fc4 <_vfprintf_r+0x938>
10008d52:	9816      	ldr	r0, [sp, #88]	; 0x58
10008d54:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008d56:	2200      	movs	r2, #0
10008d58:	2300      	movs	r3, #0
10008d5a:	f7f9 f86b 	bl	10001e34 <__aeabi_dcmpeq>
10008d5e:	2800      	cmp	r0, #0
10008d60:	d100      	bne.n	10008d64 <_vfprintf_r+0x6d8>
10008d62:	e217      	b.n	10009194 <_vfprintf_r+0xb08>
10008d64:	4b28      	ldr	r3, [pc, #160]	; (10008e08 <_vfprintf_r+0x77c>)
10008d66:	603b      	str	r3, [r7, #0]
10008d68:	2301      	movs	r3, #1
10008d6a:	607b      	str	r3, [r7, #4]
10008d6c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008d6e:	3301      	adds	r3, #1
10008d70:	9330      	str	r3, [sp, #192]	; 0xc0
10008d72:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008d74:	3301      	adds	r3, #1
10008d76:	932f      	str	r3, [sp, #188]	; 0xbc
10008d78:	2b07      	cmp	r3, #7
10008d7a:	dd01      	ble.n	10008d80 <_vfprintf_r+0x6f4>
10008d7c:	f000 fd88 	bl	10009890 <_vfprintf_r+0x1204>
10008d80:	3708      	adds	r7, #8
10008d82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10008d84:	9a15      	ldr	r2, [sp, #84]	; 0x54
10008d86:	4293      	cmp	r3, r2
10008d88:	db04      	blt.n	10008d94 <_vfprintf_r+0x708>
10008d8a:	465b      	mov	r3, fp
10008d8c:	07db      	lsls	r3, r3, #31
10008d8e:	d401      	bmi.n	10008d94 <_vfprintf_r+0x708>
10008d90:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008d92:	e5a4      	b.n	100088de <_vfprintf_r+0x252>
10008d94:	9a19      	ldr	r2, [sp, #100]	; 0x64
10008d96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10008d98:	4694      	mov	ip, r2
10008d9a:	603b      	str	r3, [r7, #0]
10008d9c:	607a      	str	r2, [r7, #4]
10008d9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008da0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10008da2:	4463      	add	r3, ip
10008da4:	3201      	adds	r2, #1
10008da6:	9330      	str	r3, [sp, #192]	; 0xc0
10008da8:	922f      	str	r2, [sp, #188]	; 0xbc
10008daa:	2a07      	cmp	r2, #7
10008dac:	dd01      	ble.n	10008db2 <_vfprintf_r+0x726>
10008dae:	f000 fbf2 	bl	10009596 <_vfprintf_r+0xf0a>
10008db2:	3708      	adds	r7, #8
10008db4:	9a15      	ldr	r2, [sp, #84]	; 0x54
10008db6:	1e56      	subs	r6, r2, #1
10008db8:	2e00      	cmp	r6, #0
10008dba:	dc00      	bgt.n	10008dbe <_vfprintf_r+0x732>
10008dbc:	e58f      	b.n	100088de <_vfprintf_r+0x252>
10008dbe:	2410      	movs	r4, #16
10008dc0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10008dc2:	4d12      	ldr	r5, [pc, #72]	; (10008e0c <_vfprintf_r+0x780>)
10008dc4:	2e10      	cmp	r6, #16
10008dc6:	dc05      	bgt.n	10008dd4 <_vfprintf_r+0x748>
10008dc8:	e610      	b.n	100089ec <_vfprintf_r+0x360>
10008dca:	3708      	adds	r7, #8
10008dcc:	3e10      	subs	r6, #16
10008dce:	2e10      	cmp	r6, #16
10008dd0:	dc00      	bgt.n	10008dd4 <_vfprintf_r+0x748>
10008dd2:	e60b      	b.n	100089ec <_vfprintf_r+0x360>
10008dd4:	3310      	adds	r3, #16
10008dd6:	3201      	adds	r2, #1
10008dd8:	603d      	str	r5, [r7, #0]
10008dda:	607c      	str	r4, [r7, #4]
10008ddc:	9330      	str	r3, [sp, #192]	; 0xc0
10008dde:	922f      	str	r2, [sp, #188]	; 0xbc
10008de0:	2a07      	cmp	r2, #7
10008de2:	ddf2      	ble.n	10008dca <_vfprintf_r+0x73e>
10008de4:	9907      	ldr	r1, [sp, #28]
10008de6:	9806      	ldr	r0, [sp, #24]
10008de8:	aa2e      	add	r2, sp, #184	; 0xb8
10008dea:	f7fe fd4b 	bl	10007884 <__sprint_r>
10008dee:	2800      	cmp	r0, #0
10008df0:	d000      	beq.n	10008df4 <_vfprintf_r+0x768>
10008df2:	e0c8      	b.n	10008f86 <_vfprintf_r+0x8fa>
10008df4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10008df6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10008df8:	af31      	add	r7, sp, #196	; 0xc4
10008dfa:	e7e7      	b.n	10008dcc <_vfprintf_r+0x740>
10008dfc:	00007830 	.word	0x00007830
10008e00:	1000e6f4 	.word	0x1000e6f4
10008e04:	fffffbff 	.word	0xfffffbff
10008e08:	1000e8ac 	.word	0x1000e8ac
10008e0c:	1000eab4 	.word	0x1000eab4
10008e10:	465d      	mov	r5, fp
10008e12:	2b01      	cmp	r3, #1
10008e14:	d100      	bne.n	10008e18 <_vfprintf_r+0x78c>
10008e16:	e6eb      	b.n	10008bf0 <_vfprintf_r+0x564>
10008e18:	ae5a      	add	r6, sp, #360	; 0x168
10008e1a:	2b02      	cmp	r3, #2
10008e1c:	d100      	bne.n	10008e20 <_vfprintf_r+0x794>
10008e1e:	e14f      	b.n	100090c0 <_vfprintf_r+0xa34>
10008e20:	2307      	movs	r3, #7
10008e22:	46bb      	mov	fp, r7
10008e24:	469c      	mov	ip, r3
10008e26:	4653      	mov	r3, sl
10008e28:	46aa      	mov	sl, r5
10008e2a:	9308      	str	r3, [sp, #32]
10008e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008e30:	075d      	lsls	r5, r3, #29
10008e32:	08d4      	lsrs	r4, r2, #3
10008e34:	4661      	mov	r1, ip
10008e36:	08d8      	lsrs	r0, r3, #3
10008e38:	4325      	orrs	r5, r4
10008e3a:	0003      	movs	r3, r0
10008e3c:	0028      	movs	r0, r5
10008e3e:	4011      	ands	r1, r2
10008e40:	0037      	movs	r7, r6
10008e42:	3130      	adds	r1, #48	; 0x30
10008e44:	3e01      	subs	r6, #1
10008e46:	002a      	movs	r2, r5
10008e48:	7031      	strb	r1, [r6, #0]
10008e4a:	4318      	orrs	r0, r3
10008e4c:	d1f0      	bne.n	10008e30 <_vfprintf_r+0x7a4>
10008e4e:	4655      	mov	r5, sl
10008e50:	9808      	ldr	r0, [sp, #32]
10008e52:	003c      	movs	r4, r7
10008e54:	4682      	mov	sl, r0
10008e56:	465f      	mov	r7, fp
10008e58:	920c      	str	r2, [sp, #48]	; 0x30
10008e5a:	930d      	str	r3, [sp, #52]	; 0x34
10008e5c:	07ea      	lsls	r2, r5, #31
10008e5e:	d51b      	bpl.n	10008e98 <_vfprintf_r+0x80c>
10008e60:	2930      	cmp	r1, #48	; 0x30
10008e62:	d019      	beq.n	10008e98 <_vfprintf_r+0x80c>
10008e64:	2330      	movs	r3, #48	; 0x30
10008e66:	3e01      	subs	r6, #1
10008e68:	3c02      	subs	r4, #2
10008e6a:	7033      	strb	r3, [r6, #0]
10008e6c:	ab5a      	add	r3, sp, #360	; 0x168
10008e6e:	1b1b      	subs	r3, r3, r4
10008e70:	46ab      	mov	fp, r5
10008e72:	0026      	movs	r6, r4
10008e74:	930b      	str	r3, [sp, #44]	; 0x2c
10008e76:	e65f      	b.n	10008b38 <_vfprintf_r+0x4ac>
10008e78:	2c09      	cmp	r4, #9
10008e7a:	d901      	bls.n	10008e80 <_vfprintf_r+0x7f4>
10008e7c:	f000 fbe0 	bl	10009640 <_vfprintf_r+0xfb4>
10008e80:	464b      	mov	r3, r9
10008e82:	9315      	str	r3, [sp, #84]	; 0x54
10008e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008e86:	4657      	mov	r7, sl
10008e88:	4698      	mov	r8, r3
10008e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008e8c:	940c      	str	r4, [sp, #48]	; 0x30
10008e8e:	950d      	str	r5, [sp, #52]	; 0x34
10008e90:	4699      	mov	r9, r3
10008e92:	9b08      	ldr	r3, [sp, #32]
10008e94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10008e96:	469a      	mov	sl, r3
10008e98:	ab5a      	add	r3, sp, #360	; 0x168
10008e9a:	1b9b      	subs	r3, r3, r6
10008e9c:	46ab      	mov	fp, r5
10008e9e:	930b      	str	r3, [sp, #44]	; 0x2c
10008ea0:	e64a      	b.n	10008b38 <_vfprintf_r+0x4ac>
10008ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008ea4:	9a08      	ldr	r2, [sp, #32]
10008ea6:	1a9c      	subs	r4, r3, r2
10008ea8:	2c00      	cmp	r4, #0
10008eaa:	dc00      	bgt.n	10008eae <_vfprintf_r+0x822>
10008eac:	e4ff      	b.n	100088ae <_vfprintf_r+0x222>
10008eae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10008eb0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008eb2:	4db6      	ldr	r5, [pc, #728]	; (1000918c <_vfprintf_r+0xb00>)
10008eb4:	2c10      	cmp	r4, #16
10008eb6:	dc04      	bgt.n	10008ec2 <_vfprintf_r+0x836>
10008eb8:	e019      	b.n	10008eee <_vfprintf_r+0x862>
10008eba:	3c10      	subs	r4, #16
10008ebc:	3708      	adds	r7, #8
10008ebe:	2c10      	cmp	r4, #16
10008ec0:	dd15      	ble.n	10008eee <_vfprintf_r+0x862>
10008ec2:	2110      	movs	r1, #16
10008ec4:	3210      	adds	r2, #16
10008ec6:	3301      	adds	r3, #1
10008ec8:	603d      	str	r5, [r7, #0]
10008eca:	6079      	str	r1, [r7, #4]
10008ecc:	9230      	str	r2, [sp, #192]	; 0xc0
10008ece:	932f      	str	r3, [sp, #188]	; 0xbc
10008ed0:	2b07      	cmp	r3, #7
10008ed2:	ddf2      	ble.n	10008eba <_vfprintf_r+0x82e>
10008ed4:	9907      	ldr	r1, [sp, #28]
10008ed6:	9806      	ldr	r0, [sp, #24]
10008ed8:	aa2e      	add	r2, sp, #184	; 0xb8
10008eda:	f7fe fcd3 	bl	10007884 <__sprint_r>
10008ede:	2800      	cmp	r0, #0
10008ee0:	d151      	bne.n	10008f86 <_vfprintf_r+0x8fa>
10008ee2:	3c10      	subs	r4, #16
10008ee4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10008ee6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008ee8:	af31      	add	r7, sp, #196	; 0xc4
10008eea:	2c10      	cmp	r4, #16
10008eec:	dce9      	bgt.n	10008ec2 <_vfprintf_r+0x836>
10008eee:	607c      	str	r4, [r7, #4]
10008ef0:	3301      	adds	r3, #1
10008ef2:	18a4      	adds	r4, r4, r2
10008ef4:	603d      	str	r5, [r7, #0]
10008ef6:	9430      	str	r4, [sp, #192]	; 0xc0
10008ef8:	932f      	str	r3, [sp, #188]	; 0xbc
10008efa:	2b07      	cmp	r3, #7
10008efc:	dd00      	ble.n	10008f00 <_vfprintf_r+0x874>
10008efe:	e308      	b.n	10009512 <_vfprintf_r+0xe86>
10008f00:	464b      	mov	r3, r9
10008f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008f04:	3708      	adds	r7, #8
10008f06:	1a9c      	subs	r4, r3, r2
10008f08:	2c00      	cmp	r4, #0
10008f0a:	dc00      	bgt.n	10008f0e <_vfprintf_r+0x882>
10008f0c:	e4d5      	b.n	100088ba <_vfprintf_r+0x22e>
10008f0e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10008f10:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008f12:	2c10      	cmp	r4, #16
10008f14:	dc01      	bgt.n	10008f1a <_vfprintf_r+0x88e>
10008f16:	f000 fd31 	bl	1000997c <_vfprintf_r+0x12f0>
10008f1a:	2110      	movs	r1, #16
10008f1c:	981c      	ldr	r0, [sp, #112]	; 0x70
10008f1e:	4689      	mov	r9, r1
10008f20:	0005      	movs	r5, r0
10008f22:	0039      	movs	r1, r7
10008f24:	0007      	movs	r7, r0
10008f26:	e003      	b.n	10008f30 <_vfprintf_r+0x8a4>
10008f28:	3c10      	subs	r4, #16
10008f2a:	3108      	adds	r1, #8
10008f2c:	2c10      	cmp	r4, #16
10008f2e:	dd15      	ble.n	10008f5c <_vfprintf_r+0x8d0>
10008f30:	4648      	mov	r0, r9
10008f32:	3210      	adds	r2, #16
10008f34:	3301      	adds	r3, #1
10008f36:	600d      	str	r5, [r1, #0]
10008f38:	6048      	str	r0, [r1, #4]
10008f3a:	9230      	str	r2, [sp, #192]	; 0xc0
10008f3c:	932f      	str	r3, [sp, #188]	; 0xbc
10008f3e:	2b07      	cmp	r3, #7
10008f40:	ddf2      	ble.n	10008f28 <_vfprintf_r+0x89c>
10008f42:	9907      	ldr	r1, [sp, #28]
10008f44:	9806      	ldr	r0, [sp, #24]
10008f46:	aa2e      	add	r2, sp, #184	; 0xb8
10008f48:	f7fe fc9c 	bl	10007884 <__sprint_r>
10008f4c:	2800      	cmp	r0, #0
10008f4e:	d11a      	bne.n	10008f86 <_vfprintf_r+0x8fa>
10008f50:	3c10      	subs	r4, #16
10008f52:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10008f54:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10008f56:	a931      	add	r1, sp, #196	; 0xc4
10008f58:	2c10      	cmp	r4, #16
10008f5a:	dce9      	bgt.n	10008f30 <_vfprintf_r+0x8a4>
10008f5c:	003d      	movs	r5, r7
10008f5e:	000f      	movs	r7, r1
10008f60:	607c      	str	r4, [r7, #4]
10008f62:	3301      	adds	r3, #1
10008f64:	18a4      	adds	r4, r4, r2
10008f66:	603d      	str	r5, [r7, #0]
10008f68:	9430      	str	r4, [sp, #192]	; 0xc0
10008f6a:	932f      	str	r3, [sp, #188]	; 0xbc
10008f6c:	2b07      	cmp	r3, #7
10008f6e:	dd00      	ble.n	10008f72 <_vfprintf_r+0x8e6>
10008f70:	e1d8      	b.n	10009324 <_vfprintf_r+0xc98>
10008f72:	3708      	adds	r7, #8
10008f74:	e4a1      	b.n	100088ba <_vfprintf_r+0x22e>
10008f76:	9907      	ldr	r1, [sp, #28]
10008f78:	9806      	ldr	r0, [sp, #24]
10008f7a:	aa2e      	add	r2, sp, #184	; 0xb8
10008f7c:	f7fe fc82 	bl	10007884 <__sprint_r>
10008f80:	2800      	cmp	r0, #0
10008f82:	d100      	bne.n	10008f86 <_vfprintf_r+0x8fa>
10008f84:	e4c2      	b.n	1000890c <_vfprintf_r+0x280>
10008f86:	9b07      	ldr	r3, [sp, #28]
10008f88:	990e      	ldr	r1, [sp, #56]	; 0x38
10008f8a:	4698      	mov	r8, r3
10008f8c:	2900      	cmp	r1, #0
10008f8e:	d002      	beq.n	10008f96 <_vfprintf_r+0x90a>
10008f90:	9806      	ldr	r0, [sp, #24]
10008f92:	f002 fbeb 	bl	1000b76c <_free_r>
10008f96:	4643      	mov	r3, r8
10008f98:	220c      	movs	r2, #12
10008f9a:	5e9b      	ldrsh	r3, [r3, r2]
10008f9c:	4642      	mov	r2, r8
10008f9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
10008fa0:	07d2      	lsls	r2, r2, #31
10008fa2:	d403      	bmi.n	10008fac <_vfprintf_r+0x920>
10008fa4:	059a      	lsls	r2, r3, #22
10008fa6:	d401      	bmi.n	10008fac <_vfprintf_r+0x920>
10008fa8:	f000 fc5b 	bl	10009862 <_vfprintf_r+0x11d6>
10008fac:	065b      	lsls	r3, r3, #25
10008fae:	d501      	bpl.n	10008fb4 <_vfprintf_r+0x928>
10008fb0:	f000 ffcd 	bl	10009f4e <_vfprintf_r+0x18c2>
10008fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
10008fb6:	b05b      	add	sp, #364	; 0x16c
10008fb8:	bcf0      	pop	{r4, r5, r6, r7}
10008fba:	46bb      	mov	fp, r7
10008fbc:	46b2      	mov	sl, r6
10008fbe:	46a9      	mov	r9, r5
10008fc0:	46a0      	mov	r8, r4
10008fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008fc4:	2308      	movs	r3, #8
10008fc6:	4698      	mov	r8, r3
10008fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
10008fca:	44b8      	add	r8, r7
10008fcc:	603e      	str	r6, [r7, #0]
10008fce:	2b01      	cmp	r3, #1
10008fd0:	dc00      	bgt.n	10008fd4 <_vfprintf_r+0x948>
10008fd2:	e165      	b.n	100092a0 <_vfprintf_r+0xc14>
10008fd4:	2301      	movs	r3, #1
10008fd6:	9c30      	ldr	r4, [sp, #192]	; 0xc0
10008fd8:	607b      	str	r3, [r7, #4]
10008fda:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
10008fdc:	3401      	adds	r4, #1
10008fde:	3701      	adds	r7, #1
10008fe0:	9430      	str	r4, [sp, #192]	; 0xc0
10008fe2:	972f      	str	r7, [sp, #188]	; 0xbc
10008fe4:	2f07      	cmp	r7, #7
10008fe6:	dd01      	ble.n	10008fec <_vfprintf_r+0x960>
10008fe8:	f000 fc15 	bl	10009816 <_vfprintf_r+0x118a>
10008fec:	4643      	mov	r3, r8
10008fee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
10008ff0:	3701      	adds	r7, #1
10008ff2:	601a      	str	r2, [r3, #0]
10008ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
10008ff6:	4642      	mov	r2, r8
10008ff8:	469c      	mov	ip, r3
10008ffa:	4464      	add	r4, ip
10008ffc:	6053      	str	r3, [r2, #4]
10008ffe:	9430      	str	r4, [sp, #192]	; 0xc0
10009000:	972f      	str	r7, [sp, #188]	; 0xbc
10009002:	2f07      	cmp	r7, #7
10009004:	dd01      	ble.n	1000900a <_vfprintf_r+0x97e>
10009006:	f000 fc15 	bl	10009834 <_vfprintf_r+0x11a8>
1000900a:	2308      	movs	r3, #8
1000900c:	469c      	mov	ip, r3
1000900e:	44e0      	add	r8, ip
10009010:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009012:	2200      	movs	r2, #0
10009014:	9816      	ldr	r0, [sp, #88]	; 0x58
10009016:	9917      	ldr	r1, [sp, #92]	; 0x5c
10009018:	3b01      	subs	r3, #1
1000901a:	4699      	mov	r9, r3
1000901c:	2300      	movs	r3, #0
1000901e:	f7f8 ff09 	bl	10001e34 <__aeabi_dcmpeq>
10009022:	2800      	cmp	r0, #0
10009024:	d000      	beq.n	10009028 <_vfprintf_r+0x99c>
10009026:	e157      	b.n	100092d8 <_vfprintf_r+0xc4c>
10009028:	4643      	mov	r3, r8
1000902a:	464a      	mov	r2, r9
1000902c:	3701      	adds	r7, #1
1000902e:	3601      	adds	r6, #1
10009030:	444c      	add	r4, r9
10009032:	601e      	str	r6, [r3, #0]
10009034:	605a      	str	r2, [r3, #4]
10009036:	9430      	str	r4, [sp, #192]	; 0xc0
10009038:	972f      	str	r7, [sp, #188]	; 0xbc
1000903a:	2f07      	cmp	r7, #7
1000903c:	dd00      	ble.n	10009040 <_vfprintf_r+0x9b4>
1000903e:	e13e      	b.n	100092be <_vfprintf_r+0xc32>
10009040:	2308      	movs	r3, #8
10009042:	469c      	mov	ip, r3
10009044:	44e0      	add	r8, ip
10009046:	4642      	mov	r2, r8
10009048:	ab2a      	add	r3, sp, #168	; 0xa8
1000904a:	6013      	str	r3, [r2, #0]
1000904c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1000904e:	3701      	adds	r7, #1
10009050:	6053      	str	r3, [r2, #4]
10009052:	191b      	adds	r3, r3, r4
10009054:	9330      	str	r3, [sp, #192]	; 0xc0
10009056:	972f      	str	r7, [sp, #188]	; 0xbc
10009058:	2f07      	cmp	r7, #7
1000905a:	dd00      	ble.n	1000905e <_vfprintf_r+0x9d2>
1000905c:	e4cf      	b.n	100089fe <_vfprintf_r+0x372>
1000905e:	4647      	mov	r7, r8
10009060:	e43c      	b.n	100088dc <_vfprintf_r+0x250>
10009062:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10009064:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10009066:	4d4a      	ldr	r5, [pc, #296]	; (10009190 <_vfprintf_r+0xb04>)
10009068:	2c10      	cmp	r4, #16
1000906a:	dc04      	bgt.n	10009076 <_vfprintf_r+0x9ea>
1000906c:	e01a      	b.n	100090a4 <_vfprintf_r+0xa18>
1000906e:	3c10      	subs	r4, #16
10009070:	3708      	adds	r7, #8
10009072:	2c10      	cmp	r4, #16
10009074:	dd16      	ble.n	100090a4 <_vfprintf_r+0xa18>
10009076:	2110      	movs	r1, #16
10009078:	3210      	adds	r2, #16
1000907a:	3301      	adds	r3, #1
1000907c:	603d      	str	r5, [r7, #0]
1000907e:	6079      	str	r1, [r7, #4]
10009080:	9230      	str	r2, [sp, #192]	; 0xc0
10009082:	932f      	str	r3, [sp, #188]	; 0xbc
10009084:	2b07      	cmp	r3, #7
10009086:	ddf2      	ble.n	1000906e <_vfprintf_r+0x9e2>
10009088:	9907      	ldr	r1, [sp, #28]
1000908a:	9806      	ldr	r0, [sp, #24]
1000908c:	aa2e      	add	r2, sp, #184	; 0xb8
1000908e:	f7fe fbf9 	bl	10007884 <__sprint_r>
10009092:	2800      	cmp	r0, #0
10009094:	d000      	beq.n	10009098 <_vfprintf_r+0xa0c>
10009096:	e776      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009098:	3c10      	subs	r4, #16
1000909a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
1000909c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
1000909e:	af31      	add	r7, sp, #196	; 0xc4
100090a0:	2c10      	cmp	r4, #16
100090a2:	dce8      	bgt.n	10009076 <_vfprintf_r+0x9ea>
100090a4:	607c      	str	r4, [r7, #4]
100090a6:	3301      	adds	r3, #1
100090a8:	18a4      	adds	r4, r4, r2
100090aa:	603d      	str	r5, [r7, #0]
100090ac:	9430      	str	r4, [sp, #192]	; 0xc0
100090ae:	932f      	str	r3, [sp, #188]	; 0xbc
100090b0:	2b07      	cmp	r3, #7
100090b2:	dd00      	ble.n	100090b6 <_vfprintf_r+0xa2a>
100090b4:	e3de      	b.n	10009874 <_vfprintf_r+0x11e8>
100090b6:	ab20      	add	r3, sp, #128	; 0x80
100090b8:	7edb      	ldrb	r3, [r3, #27]
100090ba:	3708      	adds	r7, #8
100090bc:	f7ff fbcd 	bl	1000885a <_vfprintf_r+0x1ce>
100090c0:	210f      	movs	r1, #15
100090c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100090c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100090c6:	46bb      	mov	fp, r7
100090c8:	46ac      	mov	ip, r5
100090ca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
100090cc:	0008      	movs	r0, r1
100090ce:	4010      	ands	r0, r2
100090d0:	5c28      	ldrb	r0, [r5, r0]
100090d2:	071f      	lsls	r7, r3, #28
100090d4:	0914      	lsrs	r4, r2, #4
100090d6:	3e01      	subs	r6, #1
100090d8:	4327      	orrs	r7, r4
100090da:	7030      	strb	r0, [r6, #0]
100090dc:	0918      	lsrs	r0, r3, #4
100090de:	0003      	movs	r3, r0
100090e0:	0038      	movs	r0, r7
100090e2:	003a      	movs	r2, r7
100090e4:	4318      	orrs	r0, r3
100090e6:	d1f1      	bne.n	100090cc <_vfprintf_r+0xa40>
100090e8:	920c      	str	r2, [sp, #48]	; 0x30
100090ea:	930d      	str	r3, [sp, #52]	; 0x34
100090ec:	ab5a      	add	r3, sp, #360	; 0x168
100090ee:	1b9b      	subs	r3, r3, r6
100090f0:	465f      	mov	r7, fp
100090f2:	930b      	str	r3, [sp, #44]	; 0x2c
100090f4:	46e3      	mov	fp, ip
100090f6:	e51f      	b.n	10008b38 <_vfprintf_r+0x4ac>
100090f8:	9907      	ldr	r1, [sp, #28]
100090fa:	9806      	ldr	r0, [sp, #24]
100090fc:	aa2e      	add	r2, sp, #184	; 0xb8
100090fe:	f7fe fbc1 	bl	10007884 <__sprint_r>
10009102:	2800      	cmp	r0, #0
10009104:	d000      	beq.n	10009108 <_vfprintf_r+0xa7c>
10009106:	e73e      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009108:	af31      	add	r7, sp, #196	; 0xc4
1000910a:	f7ff fbba 	bl	10008882 <_vfprintf_r+0x1f6>
1000910e:	9907      	ldr	r1, [sp, #28]
10009110:	9806      	ldr	r0, [sp, #24]
10009112:	aa2e      	add	r2, sp, #184	; 0xb8
10009114:	f7fe fbb6 	bl	10007884 <__sprint_r>
10009118:	2800      	cmp	r0, #0
1000911a:	d000      	beq.n	1000911e <_vfprintf_r+0xa92>
1000911c:	e733      	b.n	10008f86 <_vfprintf_r+0x8fa>
1000911e:	af31      	add	r7, sp, #196	; 0xc4
10009120:	f7ff fbc1 	bl	100088a6 <_vfprintf_r+0x21a>
10009124:	2410      	movs	r4, #16
10009126:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009128:	4d19      	ldr	r5, [pc, #100]	; (10009190 <_vfprintf_r+0xb04>)
1000912a:	2e10      	cmp	r6, #16
1000912c:	dc04      	bgt.n	10009138 <_vfprintf_r+0xaac>
1000912e:	e019      	b.n	10009164 <_vfprintf_r+0xad8>
10009130:	3e10      	subs	r6, #16
10009132:	3708      	adds	r7, #8
10009134:	2e10      	cmp	r6, #16
10009136:	dd15      	ble.n	10009164 <_vfprintf_r+0xad8>
10009138:	3310      	adds	r3, #16
1000913a:	3201      	adds	r2, #1
1000913c:	603d      	str	r5, [r7, #0]
1000913e:	607c      	str	r4, [r7, #4]
10009140:	9330      	str	r3, [sp, #192]	; 0xc0
10009142:	922f      	str	r2, [sp, #188]	; 0xbc
10009144:	2a07      	cmp	r2, #7
10009146:	ddf3      	ble.n	10009130 <_vfprintf_r+0xaa4>
10009148:	9907      	ldr	r1, [sp, #28]
1000914a:	9806      	ldr	r0, [sp, #24]
1000914c:	aa2e      	add	r2, sp, #184	; 0xb8
1000914e:	f7fe fb99 	bl	10007884 <__sprint_r>
10009152:	2800      	cmp	r0, #0
10009154:	d000      	beq.n	10009158 <_vfprintf_r+0xacc>
10009156:	e716      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009158:	3e10      	subs	r6, #16
1000915a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
1000915c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000915e:	af31      	add	r7, sp, #196	; 0xc4
10009160:	2e10      	cmp	r6, #16
10009162:	dce9      	bgt.n	10009138 <_vfprintf_r+0xaac>
10009164:	199b      	adds	r3, r3, r6
10009166:	3201      	adds	r2, #1
10009168:	c760      	stmia	r7!, {r5, r6}
1000916a:	9330      	str	r3, [sp, #192]	; 0xc0
1000916c:	922f      	str	r2, [sp, #188]	; 0xbc
1000916e:	2a07      	cmp	r2, #7
10009170:	dc01      	bgt.n	10009176 <_vfprintf_r+0xaea>
10009172:	f7ff fbbe 	bl	100088f2 <_vfprintf_r+0x266>
10009176:	9907      	ldr	r1, [sp, #28]
10009178:	9806      	ldr	r0, [sp, #24]
1000917a:	aa2e      	add	r2, sp, #184	; 0xb8
1000917c:	f7fe fb82 	bl	10007884 <__sprint_r>
10009180:	2800      	cmp	r0, #0
10009182:	d000      	beq.n	10009186 <_vfprintf_r+0xafa>
10009184:	e6ff      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009186:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009188:	f7ff fbb3 	bl	100088f2 <_vfprintf_r+0x266>
1000918c:	1000eab4 	.word	0x1000eab4
10009190:	1000eac4 	.word	0x1000eac4
10009194:	9928      	ldr	r1, [sp, #160]	; 0xa0
10009196:	2900      	cmp	r1, #0
10009198:	dc00      	bgt.n	1000919c <_vfprintf_r+0xb10>
1000919a:	e117      	b.n	100093cc <_vfprintf_r+0xd40>
1000919c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000919e:	469c      	mov	ip, r3
100091a0:	44b4      	add	ip, r6
100091a2:	4662      	mov	r2, ip
100091a4:	920b      	str	r2, [sp, #44]	; 0x2c
100091a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100091a8:	0014      	movs	r4, r2
100091aa:	429a      	cmp	r2, r3
100091ac:	dd00      	ble.n	100091b0 <_vfprintf_r+0xb24>
100091ae:	001c      	movs	r4, r3
100091b0:	2c00      	cmp	r4, #0
100091b2:	dd0c      	ble.n	100091ce <_vfprintf_r+0xb42>
100091b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100091b6:	603e      	str	r6, [r7, #0]
100091b8:	191b      	adds	r3, r3, r4
100091ba:	9330      	str	r3, [sp, #192]	; 0xc0
100091bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
100091be:	607c      	str	r4, [r7, #4]
100091c0:	3301      	adds	r3, #1
100091c2:	932f      	str	r3, [sp, #188]	; 0xbc
100091c4:	2b07      	cmp	r3, #7
100091c6:	dd01      	ble.n	100091cc <_vfprintf_r+0xb40>
100091c8:	f000 fe60 	bl	10009e8c <_vfprintf_r+0x1800>
100091cc:	3708      	adds	r7, #8
100091ce:	43e3      	mvns	r3, r4
100091d0:	17db      	asrs	r3, r3, #31
100091d2:	401c      	ands	r4, r3
100091d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100091d6:	1b1c      	subs	r4, r3, r4
100091d8:	2c00      	cmp	r4, #0
100091da:	dd00      	ble.n	100091de <_vfprintf_r+0xb52>
100091dc:	e371      	b.n	100098c2 <_vfprintf_r+0x1236>
100091de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100091e0:	4699      	mov	r9, r3
100091e2:	465b      	mov	r3, fp
100091e4:	44b1      	add	r9, r6
100091e6:	055b      	lsls	r3, r3, #21
100091e8:	d501      	bpl.n	100091ee <_vfprintf_r+0xb62>
100091ea:	f000 fd59 	bl	10009ca0 <_vfprintf_r+0x1614>
100091ee:	9e28      	ldr	r6, [sp, #160]	; 0xa0
100091f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
100091f2:	4296      	cmp	r6, r2
100091f4:	db04      	blt.n	10009200 <_vfprintf_r+0xb74>
100091f6:	465b      	mov	r3, fp
100091f8:	07db      	lsls	r3, r3, #31
100091fa:	d401      	bmi.n	10009200 <_vfprintf_r+0xb74>
100091fc:	f000 fcb5 	bl	10009b6a <_vfprintf_r+0x14de>
10009200:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009202:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10009204:	4694      	mov	ip, r2
10009206:	603b      	str	r3, [r7, #0]
10009208:	607a      	str	r2, [r7, #4]
1000920a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
1000920c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000920e:	4463      	add	r3, ip
10009210:	3201      	adds	r2, #1
10009212:	9330      	str	r3, [sp, #192]	; 0xc0
10009214:	922f      	str	r2, [sp, #188]	; 0xbc
10009216:	2a07      	cmp	r2, #7
10009218:	dd01      	ble.n	1000921e <_vfprintf_r+0xb92>
1000921a:	f000 fe49 	bl	10009eb0 <_vfprintf_r+0x1824>
1000921e:	3708      	adds	r7, #8
10009220:	4649      	mov	r1, r9
10009222:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009224:	1b96      	subs	r6, r2, r6
10009226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009228:	1a55      	subs	r5, r2, r1
1000922a:	42b5      	cmp	r5, r6
1000922c:	dd00      	ble.n	10009230 <_vfprintf_r+0xba4>
1000922e:	0035      	movs	r5, r6
10009230:	2d00      	cmp	r5, #0
10009232:	dd0c      	ble.n	1000924e <_vfprintf_r+0xbc2>
10009234:	464a      	mov	r2, r9
10009236:	603a      	str	r2, [r7, #0]
10009238:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000923a:	195b      	adds	r3, r3, r5
1000923c:	3201      	adds	r2, #1
1000923e:	607d      	str	r5, [r7, #4]
10009240:	9330      	str	r3, [sp, #192]	; 0xc0
10009242:	922f      	str	r2, [sp, #188]	; 0xbc
10009244:	2a07      	cmp	r2, #7
10009246:	dd01      	ble.n	1000924c <_vfprintf_r+0xbc0>
10009248:	f000 fe47 	bl	10009eda <_vfprintf_r+0x184e>
1000924c:	3708      	adds	r7, #8
1000924e:	43ea      	mvns	r2, r5
10009250:	17d2      	asrs	r2, r2, #31
10009252:	4015      	ands	r5, r2
10009254:	1b76      	subs	r6, r6, r5
10009256:	2e00      	cmp	r6, #0
10009258:	dc01      	bgt.n	1000925e <_vfprintf_r+0xbd2>
1000925a:	f7ff fb40 	bl	100088de <_vfprintf_r+0x252>
1000925e:	2410      	movs	r4, #16
10009260:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009262:	4ddd      	ldr	r5, [pc, #884]	; (100095d8 <_vfprintf_r+0xf4c>)
10009264:	2e10      	cmp	r6, #16
10009266:	dc07      	bgt.n	10009278 <_vfprintf_r+0xbec>
10009268:	f7ff fbc0 	bl	100089ec <_vfprintf_r+0x360>
1000926c:	3708      	adds	r7, #8
1000926e:	3e10      	subs	r6, #16
10009270:	2e10      	cmp	r6, #16
10009272:	dc01      	bgt.n	10009278 <_vfprintf_r+0xbec>
10009274:	f7ff fbba 	bl	100089ec <_vfprintf_r+0x360>
10009278:	3310      	adds	r3, #16
1000927a:	3201      	adds	r2, #1
1000927c:	603d      	str	r5, [r7, #0]
1000927e:	607c      	str	r4, [r7, #4]
10009280:	9330      	str	r3, [sp, #192]	; 0xc0
10009282:	922f      	str	r2, [sp, #188]	; 0xbc
10009284:	2a07      	cmp	r2, #7
10009286:	ddf1      	ble.n	1000926c <_vfprintf_r+0xbe0>
10009288:	9907      	ldr	r1, [sp, #28]
1000928a:	9806      	ldr	r0, [sp, #24]
1000928c:	aa2e      	add	r2, sp, #184	; 0xb8
1000928e:	f7fe faf9 	bl	10007884 <__sprint_r>
10009292:	2800      	cmp	r0, #0
10009294:	d000      	beq.n	10009298 <_vfprintf_r+0xc0c>
10009296:	e676      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009298:	9b30      	ldr	r3, [sp, #192]	; 0xc0
1000929a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000929c:	af31      	add	r7, sp, #196	; 0xc4
1000929e:	e7e6      	b.n	1000926e <_vfprintf_r+0xbe2>
100092a0:	2301      	movs	r3, #1
100092a2:	465a      	mov	r2, fp
100092a4:	4213      	tst	r3, r2
100092a6:	d000      	beq.n	100092aa <_vfprintf_r+0xc1e>
100092a8:	e694      	b.n	10008fd4 <_vfprintf_r+0x948>
100092aa:	9c30      	ldr	r4, [sp, #192]	; 0xc0
100092ac:	607b      	str	r3, [r7, #4]
100092ae:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
100092b0:	3401      	adds	r4, #1
100092b2:	3701      	adds	r7, #1
100092b4:	9430      	str	r4, [sp, #192]	; 0xc0
100092b6:	972f      	str	r7, [sp, #188]	; 0xbc
100092b8:	2f07      	cmp	r7, #7
100092ba:	dc00      	bgt.n	100092be <_vfprintf_r+0xc32>
100092bc:	e6c3      	b.n	10009046 <_vfprintf_r+0x9ba>
100092be:	9907      	ldr	r1, [sp, #28]
100092c0:	9806      	ldr	r0, [sp, #24]
100092c2:	aa2e      	add	r2, sp, #184	; 0xb8
100092c4:	f7fe fade 	bl	10007884 <__sprint_r>
100092c8:	2800      	cmp	r0, #0
100092ca:	d000      	beq.n	100092ce <_vfprintf_r+0xc42>
100092cc:	e65b      	b.n	10008f86 <_vfprintf_r+0x8fa>
100092ce:	ab31      	add	r3, sp, #196	; 0xc4
100092d0:	4698      	mov	r8, r3
100092d2:	9c30      	ldr	r4, [sp, #192]	; 0xc0
100092d4:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
100092d6:	e6b6      	b.n	10009046 <_vfprintf_r+0x9ba>
100092d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
100092da:	2b01      	cmp	r3, #1
100092dc:	dc00      	bgt.n	100092e0 <_vfprintf_r+0xc54>
100092de:	e6b2      	b.n	10009046 <_vfprintf_r+0x9ba>
100092e0:	4dbd      	ldr	r5, [pc, #756]	; (100095d8 <_vfprintf_r+0xf4c>)
100092e2:	2b11      	cmp	r3, #17
100092e4:	dc00      	bgt.n	100092e8 <_vfprintf_r+0xc5c>
100092e6:	e311      	b.n	1000990c <_vfprintf_r+0x1280>
100092e8:	0022      	movs	r2, r4
100092ea:	2610      	movs	r6, #16
100092ec:	464c      	mov	r4, r9
100092ee:	4643      	mov	r3, r8
100092f0:	e004      	b.n	100092fc <_vfprintf_r+0xc70>
100092f2:	3308      	adds	r3, #8
100092f4:	3c10      	subs	r4, #16
100092f6:	2c10      	cmp	r4, #16
100092f8:	dc00      	bgt.n	100092fc <_vfprintf_r+0xc70>
100092fa:	e304      	b.n	10009906 <_vfprintf_r+0x127a>
100092fc:	3210      	adds	r2, #16
100092fe:	3701      	adds	r7, #1
10009300:	601d      	str	r5, [r3, #0]
10009302:	605e      	str	r6, [r3, #4]
10009304:	9230      	str	r2, [sp, #192]	; 0xc0
10009306:	972f      	str	r7, [sp, #188]	; 0xbc
10009308:	2f07      	cmp	r7, #7
1000930a:	ddf2      	ble.n	100092f2 <_vfprintf_r+0xc66>
1000930c:	9907      	ldr	r1, [sp, #28]
1000930e:	9806      	ldr	r0, [sp, #24]
10009310:	aa2e      	add	r2, sp, #184	; 0xb8
10009312:	f7fe fab7 	bl	10007884 <__sprint_r>
10009316:	2800      	cmp	r0, #0
10009318:	d000      	beq.n	1000931c <_vfprintf_r+0xc90>
1000931a:	e634      	b.n	10008f86 <_vfprintf_r+0x8fa>
1000931c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
1000931e:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
10009320:	ab31      	add	r3, sp, #196	; 0xc4
10009322:	e7e7      	b.n	100092f4 <_vfprintf_r+0xc68>
10009324:	9907      	ldr	r1, [sp, #28]
10009326:	9806      	ldr	r0, [sp, #24]
10009328:	aa2e      	add	r2, sp, #184	; 0xb8
1000932a:	f7fe faab 	bl	10007884 <__sprint_r>
1000932e:	2800      	cmp	r0, #0
10009330:	d000      	beq.n	10009334 <_vfprintf_r+0xca8>
10009332:	e628      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009334:	af31      	add	r7, sp, #196	; 0xc4
10009336:	f7ff fac0 	bl	100088ba <_vfprintf_r+0x22e>
1000933a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000933c:	ca08      	ldmia	r2!, {r3}
1000933e:	920f      	str	r2, [sp, #60]	; 0x3c
10009340:	06ea      	lsls	r2, r5, #27
10009342:	d47a      	bmi.n	1000943a <_vfprintf_r+0xdae>
10009344:	066a      	lsls	r2, r5, #25
10009346:	d575      	bpl.n	10009434 <_vfprintf_r+0xda8>
10009348:	b29b      	uxth	r3, r3
1000934a:	930c      	str	r3, [sp, #48]	; 0x30
1000934c:	2300      	movs	r3, #0
1000934e:	930d      	str	r3, [sp, #52]	; 0x34
10009350:	3301      	adds	r3, #1
10009352:	f7ff fbce 	bl	10008af2 <_vfprintf_r+0x466>
10009356:	ca08      	ldmia	r2!, {r3}
10009358:	920f      	str	r2, [sp, #60]	; 0x3c
1000935a:	465a      	mov	r2, fp
1000935c:	06d2      	lsls	r2, r2, #27
1000935e:	d476      	bmi.n	1000944e <_vfprintf_r+0xdc2>
10009360:	465a      	mov	r2, fp
10009362:	0652      	lsls	r2, r2, #25
10009364:	d56f      	bpl.n	10009446 <_vfprintf_r+0xdba>
10009366:	b21b      	sxth	r3, r3
10009368:	930c      	str	r3, [sp, #48]	; 0x30
1000936a:	17db      	asrs	r3, r3, #31
1000936c:	930d      	str	r3, [sp, #52]	; 0x34
1000936e:	e429      	b.n	10008bc4 <_vfprintf_r+0x538>
10009370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009372:	ca08      	ldmia	r2!, {r3}
10009374:	920f      	str	r2, [sp, #60]	; 0x3c
10009376:	465a      	mov	r2, fp
10009378:	06d2      	lsls	r2, r2, #27
1000937a:	d471      	bmi.n	10009460 <_vfprintf_r+0xdd4>
1000937c:	465a      	mov	r2, fp
1000937e:	0652      	lsls	r2, r2, #25
10009380:	d56a      	bpl.n	10009458 <_vfprintf_r+0xdcc>
10009382:	b29b      	uxth	r3, r3
10009384:	930c      	str	r3, [sp, #48]	; 0x30
10009386:	2300      	movs	r3, #0
10009388:	930d      	str	r3, [sp, #52]	; 0x34
1000938a:	e477      	b.n	10008c7c <_vfprintf_r+0x5f0>
1000938c:	990c      	ldr	r1, [sp, #48]	; 0x30
1000938e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10009390:	2400      	movs	r4, #0
10009392:	424b      	negs	r3, r1
10009394:	4194      	sbcs	r4, r2
10009396:	465d      	mov	r5, fp
10009398:	930c      	str	r3, [sp, #48]	; 0x30
1000939a:	940d      	str	r4, [sp, #52]	; 0x34
1000939c:	222d      	movs	r2, #45	; 0x2d
1000939e:	2301      	movs	r3, #1
100093a0:	f7ff fba8 	bl	10008af4 <_vfprintf_r+0x468>
100093a4:	2300      	movs	r3, #0
100093a6:	ae5a      	add	r6, sp, #360	; 0x168
100093a8:	930b      	str	r3, [sp, #44]	; 0x2c
100093aa:	f7ff fbc5 	bl	10008b38 <_vfprintf_r+0x4ac>
100093ae:	4643      	mov	r3, r8
100093b0:	6d98      	ldr	r0, [r3, #88]	; 0x58
100093b2:	f003 ff4d 	bl	1000d250 <__retarget_lock_acquire_recursive>
100093b6:	4643      	mov	r3, r8
100093b8:	220c      	movs	r2, #12
100093ba:	5e9b      	ldrsh	r3, [r3, r2]
100093bc:	f7ff f98c 	bl	100086d8 <_vfprintf_r+0x4c>
100093c0:	46a2      	mov	sl, r4
100093c2:	46ab      	mov	fp, r5
100093c4:	4698      	mov	r8, r3
100093c6:	4681      	mov	r9, r0
100093c8:	f7ff fbeb 	bl	10008ba2 <_vfprintf_r+0x516>
100093cc:	4b83      	ldr	r3, [pc, #524]	; (100095dc <_vfprintf_r+0xf50>)
100093ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
100093d0:	603b      	str	r3, [r7, #0]
100093d2:	2301      	movs	r3, #1
100093d4:	607b      	str	r3, [r7, #4]
100093d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100093d8:	3201      	adds	r2, #1
100093da:	3301      	adds	r3, #1
100093dc:	9330      	str	r3, [sp, #192]	; 0xc0
100093de:	922f      	str	r2, [sp, #188]	; 0xbc
100093e0:	2a07      	cmp	r2, #7
100093e2:	dd01      	ble.n	100093e8 <_vfprintf_r+0xd5c>
100093e4:	f000 fd06 	bl	10009df4 <_vfprintf_r+0x1768>
100093e8:	3708      	adds	r7, #8
100093ea:	2900      	cmp	r1, #0
100093ec:	d000      	beq.n	100093f0 <_vfprintf_r+0xd64>
100093ee:	e2a0      	b.n	10009932 <_vfprintf_r+0x12a6>
100093f0:	4659      	mov	r1, fp
100093f2:	2201      	movs	r2, #1
100093f4:	400a      	ands	r2, r1
100093f6:	9915      	ldr	r1, [sp, #84]	; 0x54
100093f8:	430a      	orrs	r2, r1
100093fa:	d101      	bne.n	10009400 <_vfprintf_r+0xd74>
100093fc:	f7ff fa6f 	bl	100088de <_vfprintf_r+0x252>
10009400:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
10009402:	603a      	str	r2, [r7, #0]
10009404:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009406:	4694      	mov	ip, r2
10009408:	607a      	str	r2, [r7, #4]
1000940a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000940c:	4463      	add	r3, ip
1000940e:	3201      	adds	r2, #1
10009410:	9330      	str	r3, [sp, #192]	; 0xc0
10009412:	922f      	str	r2, [sp, #188]	; 0xbc
10009414:	2a07      	cmp	r2, #7
10009416:	dd00      	ble.n	1000941a <_vfprintf_r+0xd8e>
10009418:	e3ca      	b.n	10009bb0 <_vfprintf_r+0x1524>
1000941a:	0038      	movs	r0, r7
1000941c:	3008      	adds	r0, #8
1000941e:	e29a      	b.n	10009956 <_vfprintf_r+0x12ca>
10009420:	2130      	movs	r1, #48	; 0x30
10009422:	3362      	adds	r3, #98	; 0x62
10009424:	aa41      	add	r2, sp, #260	; 0x104
10009426:	54d1      	strb	r1, [r2, r3]
10009428:	ab20      	add	r3, sp, #128	; 0x80
1000942a:	26e7      	movs	r6, #231	; 0xe7
1000942c:	469c      	mov	ip, r3
1000942e:	4466      	add	r6, ip
10009430:	f7ff fb82 	bl	10008b38 <_vfprintf_r+0x4ac>
10009434:	05aa      	lsls	r2, r5, #22
10009436:	d500      	bpl.n	1000943a <_vfprintf_r+0xdae>
10009438:	b2db      	uxtb	r3, r3
1000943a:	930c      	str	r3, [sp, #48]	; 0x30
1000943c:	2300      	movs	r3, #0
1000943e:	930d      	str	r3, [sp, #52]	; 0x34
10009440:	3301      	adds	r3, #1
10009442:	f7ff fb56 	bl	10008af2 <_vfprintf_r+0x466>
10009446:	465a      	mov	r2, fp
10009448:	0592      	lsls	r2, r2, #22
1000944a:	d500      	bpl.n	1000944e <_vfprintf_r+0xdc2>
1000944c:	e3aa      	b.n	10009ba4 <_vfprintf_r+0x1518>
1000944e:	930c      	str	r3, [sp, #48]	; 0x30
10009450:	17db      	asrs	r3, r3, #31
10009452:	930d      	str	r3, [sp, #52]	; 0x34
10009454:	f7ff fbb6 	bl	10008bc4 <_vfprintf_r+0x538>
10009458:	465a      	mov	r2, fp
1000945a:	0592      	lsls	r2, r2, #22
1000945c:	d500      	bpl.n	10009460 <_vfprintf_r+0xdd4>
1000945e:	e39b      	b.n	10009b98 <_vfprintf_r+0x150c>
10009460:	930c      	str	r3, [sp, #48]	; 0x30
10009462:	2300      	movs	r3, #0
10009464:	930d      	str	r3, [sp, #52]	; 0x34
10009466:	f7ff fc09 	bl	10008c7c <_vfprintf_r+0x5f0>
1000946a:	002b      	movs	r3, r5
1000946c:	06db      	lsls	r3, r3, #27
1000946e:	d500      	bpl.n	10009472 <_vfprintf_r+0xde6>
10009470:	e221      	b.n	100098b6 <_vfprintf_r+0x122a>
10009472:	002b      	movs	r3, r5
10009474:	065b      	lsls	r3, r3, #25
10009476:	d500      	bpl.n	1000947a <_vfprintf_r+0xdee>
10009478:	e383      	b.n	10009b82 <_vfprintf_r+0x14f6>
1000947a:	002b      	movs	r3, r5
1000947c:	059b      	lsls	r3, r3, #22
1000947e:	d400      	bmi.n	10009482 <_vfprintf_r+0xdf6>
10009480:	e219      	b.n	100098b6 <_vfprintf_r+0x122a>
10009482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009484:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009486:	681b      	ldr	r3, [r3, #0]
10009488:	701a      	strb	r2, [r3, #0]
1000948a:	f7ff fb75 	bl	10008b78 <_vfprintf_r+0x4ec>
1000948e:	9816      	ldr	r0, [sp, #88]	; 0x58
10009490:	9917      	ldr	r1, [sp, #92]	; 0x5c
10009492:	0002      	movs	r2, r0
10009494:	000b      	movs	r3, r1
10009496:	f7f8 fe85 	bl	100021a4 <__aeabi_dcmpun>
1000949a:	2800      	cmp	r0, #0
1000949c:	d001      	beq.n	100094a2 <_vfprintf_r+0xe16>
1000949e:	f000 fdf4 	bl	1000a08a <_vfprintf_r+0x19fe>
100094a2:	4643      	mov	r3, r8
100094a4:	2b61      	cmp	r3, #97	; 0x61
100094a6:	d100      	bne.n	100094aa <_vfprintf_r+0xe1e>
100094a8:	e0fc      	b.n	100096a4 <_vfprintf_r+0x1018>
100094aa:	2258      	movs	r2, #88	; 0x58
100094ac:	2b41      	cmp	r3, #65	; 0x41
100094ae:	d100      	bne.n	100094b2 <_vfprintf_r+0xe26>
100094b0:	e0f9      	b.n	100096a6 <_vfprintf_r+0x101a>
100094b2:	464b      	mov	r3, r9
100094b4:	3301      	adds	r3, #1
100094b6:	d101      	bne.n	100094bc <_vfprintf_r+0xe30>
100094b8:	f000 fddf 	bl	1000a07a <_vfprintf_r+0x19ee>
100094bc:	2320      	movs	r3, #32
100094be:	4642      	mov	r2, r8
100094c0:	439a      	bics	r2, r3
100094c2:	2a47      	cmp	r2, #71	; 0x47
100094c4:	d101      	bne.n	100094ca <_vfprintf_r+0xe3e>
100094c6:	f000 fdcf 	bl	1000a068 <_vfprintf_r+0x19dc>
100094ca:	2380      	movs	r3, #128	; 0x80
100094cc:	465a      	mov	r2, fp
100094ce:	005b      	lsls	r3, r3, #1
100094d0:	431a      	orrs	r2, r3
100094d2:	9212      	str	r2, [sp, #72]	; 0x48
100094d4:	9916      	ldr	r1, [sp, #88]	; 0x58
100094d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
100094d8:	2a00      	cmp	r2, #0
100094da:	da01      	bge.n	100094e0 <_vfprintf_r+0xe54>
100094dc:	f000 fc98 	bl	10009e10 <_vfprintf_r+0x1784>
100094e0:	465b      	mov	r3, fp
100094e2:	9311      	str	r3, [sp, #68]	; 0x44
100094e4:	2300      	movs	r3, #0
100094e6:	9122      	str	r1, [sp, #136]	; 0x88
100094e8:	9223      	str	r2, [sp, #140]	; 0x8c
100094ea:	9325      	str	r3, [sp, #148]	; 0x94
100094ec:	930e      	str	r3, [sp, #56]	; 0x38
100094ee:	4643      	mov	r3, r8
100094f0:	3b41      	subs	r3, #65	; 0x41
100094f2:	2b25      	cmp	r3, #37	; 0x25
100094f4:	d900      	bls.n	100094f8 <_vfprintf_r+0xe6c>
100094f6:	e26b      	b.n	100099d0 <_vfprintf_r+0x1344>
100094f8:	4a39      	ldr	r2, [pc, #228]	; (100095e0 <_vfprintf_r+0xf54>)
100094fa:	009b      	lsls	r3, r3, #2
100094fc:	58d3      	ldr	r3, [r2, r3]
100094fe:	469f      	mov	pc, r3
10009500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10009502:	920f      	str	r2, [sp, #60]	; 0x3c
10009504:	425b      	negs	r3, r3
10009506:	930a      	str	r3, [sp, #40]	; 0x28
10009508:	2304      	movs	r3, #4
1000950a:	431d      	orrs	r5, r3
1000950c:	7823      	ldrb	r3, [r4, #0]
1000950e:	f7ff f926 	bl	1000875e <_vfprintf_r+0xd2>
10009512:	9907      	ldr	r1, [sp, #28]
10009514:	9806      	ldr	r0, [sp, #24]
10009516:	aa2e      	add	r2, sp, #184	; 0xb8
10009518:	f7fe f9b4 	bl	10007884 <__sprint_r>
1000951c:	2800      	cmp	r0, #0
1000951e:	d000      	beq.n	10009522 <_vfprintf_r+0xe96>
10009520:	e531      	b.n	10008f86 <_vfprintf_r+0x8fa>
10009522:	af31      	add	r7, sp, #196	; 0xc4
10009524:	f7ff f9c3 	bl	100088ae <_vfprintf_r+0x222>
10009528:	46a2      	mov	sl, r4
1000952a:	4698      	mov	r8, r3
1000952c:	4681      	mov	r9, r0
1000952e:	f7ff fb7e 	bl	10008c2e <_vfprintf_r+0x5a2>
10009532:	46a2      	mov	sl, r4
10009534:	46ab      	mov	fp, r5
10009536:	4681      	mov	r9, r0
10009538:	4698      	mov	r8, r3
1000953a:	4b2a      	ldr	r3, [pc, #168]	; (100095e4 <_vfprintf_r+0xf58>)
1000953c:	931d      	str	r3, [sp, #116]	; 0x74
1000953e:	465b      	mov	r3, fp
10009540:	069b      	lsls	r3, r3, #26
10009542:	d400      	bmi.n	10009546 <_vfprintf_r+0xeba>
10009544:	e159      	b.n	100097fa <_vfprintf_r+0x116e>
10009546:	2207      	movs	r2, #7
10009548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000954a:	3307      	adds	r3, #7
1000954c:	4393      	bics	r3, r2
1000954e:	001a      	movs	r2, r3
10009550:	ca18      	ldmia	r2!, {r3, r4}
10009552:	930c      	str	r3, [sp, #48]	; 0x30
10009554:	940d      	str	r4, [sp, #52]	; 0x34
10009556:	920f      	str	r2, [sp, #60]	; 0x3c
10009558:	465b      	mov	r3, fp
1000955a:	07db      	lsls	r3, r3, #31
1000955c:	d50d      	bpl.n	1000957a <_vfprintf_r+0xeee>
1000955e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10009560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10009562:	0011      	movs	r1, r2
10009564:	4319      	orrs	r1, r3
10009566:	d008      	beq.n	1000957a <_vfprintf_r+0xeee>
10009568:	2230      	movs	r2, #48	; 0x30
1000956a:	ab27      	add	r3, sp, #156	; 0x9c
1000956c:	701a      	strb	r2, [r3, #0]
1000956e:	4642      	mov	r2, r8
10009570:	705a      	strb	r2, [r3, #1]
10009572:	465a      	mov	r2, fp
10009574:	2302      	movs	r3, #2
10009576:	431a      	orrs	r2, r3
10009578:	4693      	mov	fp, r2
1000957a:	465b      	mov	r3, fp
1000957c:	4d1a      	ldr	r5, [pc, #104]	; (100095e8 <_vfprintf_r+0xf5c>)
1000957e:	402b      	ands	r3, r5
10009580:	001d      	movs	r5, r3
10009582:	2302      	movs	r3, #2
10009584:	f7ff fab5 	bl	10008af2 <_vfprintf_r+0x466>
10009588:	4698      	mov	r8, r3
1000958a:	4b18      	ldr	r3, [pc, #96]	; (100095ec <_vfprintf_r+0xf60>)
1000958c:	46a2      	mov	sl, r4
1000958e:	46ab      	mov	fp, r5
10009590:	4681      	mov	r9, r0
10009592:	931d      	str	r3, [sp, #116]	; 0x74
10009594:	e7d3      	b.n	1000953e <_vfprintf_r+0xeb2>
10009596:	9907      	ldr	r1, [sp, #28]
10009598:	9806      	ldr	r0, [sp, #24]
1000959a:	aa2e      	add	r2, sp, #184	; 0xb8
1000959c:	f7fe f972 	bl	10007884 <__sprint_r>
100095a0:	2800      	cmp	r0, #0
100095a2:	d000      	beq.n	100095a6 <_vfprintf_r+0xf1a>
100095a4:	e4ef      	b.n	10008f86 <_vfprintf_r+0x8fa>
100095a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100095a8:	af31      	add	r7, sp, #196	; 0xc4
100095aa:	f7ff fc03 	bl	10008db4 <_vfprintf_r+0x728>
100095ae:	46a2      	mov	sl, r4
100095b0:	46ab      	mov	fp, r5
100095b2:	4698      	mov	r8, r3
100095b4:	4681      	mov	r9, r0
100095b6:	f7ff fb54 	bl	10008c62 <_vfprintf_r+0x5d6>
100095ba:	4681      	mov	r9, r0
100095bc:	e7a4      	b.n	10009508 <_vfprintf_r+0xe7c>
100095be:	3399      	adds	r3, #153	; 0x99
100095c0:	33ff      	adds	r3, #255	; 0xff
100095c2:	431d      	orrs	r5, r3
100095c4:	3401      	adds	r4, #1
100095c6:	7823      	ldrb	r3, [r4, #0]
100095c8:	f7ff f8c9 	bl	1000875e <_vfprintf_r+0xd2>
100095cc:	3b4c      	subs	r3, #76	; 0x4c
100095ce:	431d      	orrs	r5, r3
100095d0:	3401      	adds	r4, #1
100095d2:	7823      	ldrb	r3, [r4, #0]
100095d4:	f7ff f8c3 	bl	1000875e <_vfprintf_r+0xd2>
100095d8:	1000eab4 	.word	0x1000eab4
100095dc:	1000e8ac 	.word	0x1000e8ac
100095e0:	1000ea1c 	.word	0x1000ea1c
100095e4:	1000e6e0 	.word	0x1000e6e0
100095e8:	fffffbff 	.word	0xfffffbff
100095ec:	1000e6f4 	.word	0x1000e6f4
100095f0:	9008      	str	r0, [sp, #32]
100095f2:	2806      	cmp	r0, #6
100095f4:	d900      	bls.n	100095f8 <_vfprintf_r+0xf6c>
100095f6:	e2b5      	b.n	10009b64 <_vfprintf_r+0x14d8>
100095f8:	2300      	movs	r3, #0
100095fa:	2200      	movs	r2, #0
100095fc:	930e      	str	r3, [sp, #56]	; 0x38
100095fe:	9b08      	ldr	r3, [sp, #32]
10009600:	4691      	mov	r9, r2
10009602:	930b      	str	r3, [sp, #44]	; 0x2c
10009604:	4ee4      	ldr	r6, [pc, #912]	; (10009998 <_vfprintf_r+0x130c>)
10009606:	2300      	movs	r3, #0
10009608:	940f      	str	r4, [sp, #60]	; 0x3c
1000960a:	9218      	str	r2, [sp, #96]	; 0x60
1000960c:	9214      	str	r2, [sp, #80]	; 0x50
1000960e:	9213      	str	r2, [sp, #76]	; 0x4c
10009610:	f7ff f90b 	bl	1000882a <_vfprintf_r+0x19e>
10009614:	4652      	mov	r2, sl
10009616:	2380      	movs	r3, #128	; 0x80
10009618:	9208      	str	r2, [sp, #32]
1000961a:	4642      	mov	r2, r8
1000961c:	00db      	lsls	r3, r3, #3
1000961e:	402b      	ands	r3, r5
10009620:	469b      	mov	fp, r3
10009622:	920b      	str	r2, [sp, #44]	; 0x2c
10009624:	2300      	movs	r3, #0
10009626:	464a      	mov	r2, r9
10009628:	950e      	str	r5, [sp, #56]	; 0x38
1000962a:	4699      	mov	r9, r3
1000962c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000962e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10009630:	46ba      	mov	sl, r7
10009632:	ae5a      	add	r6, sp, #360	; 0x168
10009634:	9211      	str	r2, [sp, #68]	; 0x44
10009636:	e005      	b.n	10009644 <_vfprintf_r+0xfb8>
10009638:	2d00      	cmp	r5, #0
1000963a:	d101      	bne.n	10009640 <_vfprintf_r+0xfb4>
1000963c:	f7ff fc1c 	bl	10008e78 <_vfprintf_r+0x7ec>
10009640:	4644      	mov	r4, r8
10009642:	003d      	movs	r5, r7
10009644:	220a      	movs	r2, #10
10009646:	2300      	movs	r3, #0
10009648:	0020      	movs	r0, r4
1000964a:	0029      	movs	r1, r5
1000964c:	f7f6 fe9a 	bl	10000384 <__aeabi_uldivmod>
10009650:	2301      	movs	r3, #1
10009652:	469c      	mov	ip, r3
10009654:	465b      	mov	r3, fp
10009656:	3e01      	subs	r6, #1
10009658:	3230      	adds	r2, #48	; 0x30
1000965a:	4680      	mov	r8, r0
1000965c:	000f      	movs	r7, r1
1000965e:	7032      	strb	r2, [r6, #0]
10009660:	44e1      	add	r9, ip
10009662:	2b00      	cmp	r3, #0
10009664:	d0e8      	beq.n	10009638 <_vfprintf_r+0xfac>
10009666:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10009668:	781b      	ldrb	r3, [r3, #0]
1000966a:	4599      	cmp	r9, r3
1000966c:	d1e4      	bne.n	10009638 <_vfprintf_r+0xfac>
1000966e:	464b      	mov	r3, r9
10009670:	2bff      	cmp	r3, #255	; 0xff
10009672:	d0e1      	beq.n	10009638 <_vfprintf_r+0xfac>
10009674:	2d00      	cmp	r5, #0
10009676:	d103      	bne.n	10009680 <_vfprintf_r+0xff4>
10009678:	2c09      	cmp	r4, #9
1000967a:	d801      	bhi.n	10009680 <_vfprintf_r+0xff4>
1000967c:	f7ff fc01 	bl	10008e82 <_vfprintf_r+0x7f6>
10009680:	9b24      	ldr	r3, [sp, #144]	; 0x90
10009682:	991f      	ldr	r1, [sp, #124]	; 0x7c
10009684:	1af6      	subs	r6, r6, r3
10009686:	001a      	movs	r2, r3
10009688:	0030      	movs	r0, r6
1000968a:	f003 fa8d 	bl	1000cba8 <strncpy>
1000968e:	991a      	ldr	r1, [sp, #104]	; 0x68
10009690:	784b      	ldrb	r3, [r1, #1]
10009692:	468c      	mov	ip, r1
10009694:	1e5a      	subs	r2, r3, #1
10009696:	4193      	sbcs	r3, r2
10009698:	449c      	add	ip, r3
1000969a:	4663      	mov	r3, ip
1000969c:	931a      	str	r3, [sp, #104]	; 0x68
1000969e:	2300      	movs	r3, #0
100096a0:	4699      	mov	r9, r3
100096a2:	e7cd      	b.n	10009640 <_vfprintf_r+0xfb4>
100096a4:	2278      	movs	r2, #120	; 0x78
100096a6:	2130      	movs	r1, #48	; 0x30
100096a8:	ab27      	add	r3, sp, #156	; 0x9c
100096aa:	705a      	strb	r2, [r3, #1]
100096ac:	7019      	strb	r1, [r3, #0]
100096ae:	465a      	mov	r2, fp
100096b0:	2302      	movs	r3, #2
100096b2:	431a      	orrs	r2, r3
100096b4:	464b      	mov	r3, r9
100096b6:	9211      	str	r2, [sp, #68]	; 0x44
100096b8:	2b63      	cmp	r3, #99	; 0x63
100096ba:	dd00      	ble.n	100096be <_vfprintf_r+0x1032>
100096bc:	e28c      	b.n	10009bd8 <_vfprintf_r+0x154c>
100096be:	2300      	movs	r3, #0
100096c0:	ae41      	add	r6, sp, #260	; 0x104
100096c2:	930e      	str	r3, [sp, #56]	; 0x38
100096c4:	2381      	movs	r3, #129	; 0x81
100096c6:	465a      	mov	r2, fp
100096c8:	005b      	lsls	r3, r3, #1
100096ca:	431a      	orrs	r2, r3
100096cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
100096ce:	9212      	str	r2, [sp, #72]	; 0x48
100096d0:	2b00      	cmp	r3, #0
100096d2:	da00      	bge.n	100096d6 <_vfprintf_r+0x104a>
100096d4:	e3a0      	b.n	10009e18 <_vfprintf_r+0x178c>
100096d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
100096d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
100096da:	9322      	str	r3, [sp, #136]	; 0x88
100096dc:	9423      	str	r4, [sp, #140]	; 0x8c
100096de:	2300      	movs	r3, #0
100096e0:	9325      	str	r3, [sp, #148]	; 0x94
100096e2:	4643      	mov	r3, r8
100096e4:	2b61      	cmp	r3, #97	; 0x61
100096e6:	d000      	beq.n	100096ea <_vfprintf_r+0x105e>
100096e8:	e701      	b.n	100094ee <_vfprintf_r+0xe62>
100096ea:	9822      	ldr	r0, [sp, #136]	; 0x88
100096ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
100096ee:	aa28      	add	r2, sp, #160	; 0xa0
100096f0:	f003 f98e 	bl	1000ca10 <frexp>
100096f4:	23ff      	movs	r3, #255	; 0xff
100096f6:	2200      	movs	r2, #0
100096f8:	059b      	lsls	r3, r3, #22
100096fa:	f7f7 fd13 	bl	10001124 <__aeabi_dmul>
100096fe:	2200      	movs	r2, #0
10009700:	2300      	movs	r3, #0
10009702:	0004      	movs	r4, r0
10009704:	000d      	movs	r5, r1
10009706:	f7f8 fb95 	bl	10001e34 <__aeabi_dcmpeq>
1000970a:	2800      	cmp	r0, #0
1000970c:	d000      	beq.n	10009710 <_vfprintf_r+0x1084>
1000970e:	e29e      	b.n	10009c4e <_vfprintf_r+0x15c2>
10009710:	4ba2      	ldr	r3, [pc, #648]	; (1000999c <_vfprintf_r+0x1310>)
10009712:	9308      	str	r3, [sp, #32]
10009714:	0033      	movs	r3, r6
10009716:	444b      	add	r3, r9
10009718:	930b      	str	r3, [sp, #44]	; 0x2c
1000971a:	4653      	mov	r3, sl
1000971c:	9313      	str	r3, [sp, #76]	; 0x4c
1000971e:	4643      	mov	r3, r8
10009720:	46cb      	mov	fp, r9
10009722:	46ba      	mov	sl, r7
10009724:	46b1      	mov	r9, r6
10009726:	9318      	str	r3, [sp, #96]	; 0x60
10009728:	e007      	b.n	1000973a <_vfprintf_r+0x10ae>
1000972a:	2200      	movs	r2, #0
1000972c:	2300      	movs	r3, #0
1000972e:	f7f8 fb81 	bl	10001e34 <__aeabi_dcmpeq>
10009732:	2800      	cmp	r0, #0
10009734:	d001      	beq.n	1000973a <_vfprintf_r+0x10ae>
10009736:	f000 fc85 	bl	1000a044 <_vfprintf_r+0x19b8>
1000973a:	2200      	movs	r2, #0
1000973c:	4b98      	ldr	r3, [pc, #608]	; (100099a0 <_vfprintf_r+0x1314>)
1000973e:	0020      	movs	r0, r4
10009740:	0029      	movs	r1, r5
10009742:	f7f7 fcef 	bl	10001124 <__aeabi_dmul>
10009746:	000d      	movs	r5, r1
10009748:	0004      	movs	r4, r0
1000974a:	f7f8 fcf9 	bl	10002140 <__aeabi_d2iz>
1000974e:	0007      	movs	r7, r0
10009750:	f7f8 fa26 	bl	10001ba0 <__aeabi_i2d>
10009754:	46b0      	mov	r8, r6
10009756:	0002      	movs	r2, r0
10009758:	000b      	movs	r3, r1
1000975a:	0020      	movs	r0, r4
1000975c:	0029      	movs	r1, r5
1000975e:	f7f7 ff0b 	bl	10001578 <__aeabi_dsub>
10009762:	4642      	mov	r2, r8
10009764:	9b08      	ldr	r3, [sp, #32]
10009766:	0004      	movs	r4, r0
10009768:	5ddb      	ldrb	r3, [r3, r7]
1000976a:	000d      	movs	r5, r1
1000976c:	7013      	strb	r3, [r2, #0]
1000976e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009770:	3601      	adds	r6, #1
10009772:	4543      	cmp	r3, r8
10009774:	d1d9      	bne.n	1000972a <_vfprintf_r+0x109e>
10009776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009778:	9714      	str	r7, [sp, #80]	; 0x50
1000977a:	4657      	mov	r7, sl
1000977c:	469a      	mov	sl, r3
1000977e:	9b18      	ldr	r3, [sp, #96]	; 0x60
10009780:	9215      	str	r2, [sp, #84]	; 0x54
10009782:	4698      	mov	r8, r3
10009784:	464b      	mov	r3, r9
10009786:	46d9      	mov	r9, fp
10009788:	46b3      	mov	fp, r6
1000978a:	001e      	movs	r6, r3
1000978c:	2301      	movs	r3, #1
1000978e:	425b      	negs	r3, r3
10009790:	9313      	str	r3, [sp, #76]	; 0x4c
10009792:	465b      	mov	r3, fp
10009794:	2200      	movs	r2, #0
10009796:	930b      	str	r3, [sp, #44]	; 0x2c
10009798:	0020      	movs	r0, r4
1000979a:	0029      	movs	r1, r5
1000979c:	4b81      	ldr	r3, [pc, #516]	; (100099a4 <_vfprintf_r+0x1318>)
1000979e:	f7f8 fb63 	bl	10001e68 <__aeabi_dcmpgt>
100097a2:	2800      	cmp	r0, #0
100097a4:	d001      	beq.n	100097aa <_vfprintf_r+0x111e>
100097a6:	f000 fc03 	bl	10009fb0 <_vfprintf_r+0x1924>
100097aa:	2200      	movs	r2, #0
100097ac:	0020      	movs	r0, r4
100097ae:	0029      	movs	r1, r5
100097b0:	4b7c      	ldr	r3, [pc, #496]	; (100099a4 <_vfprintf_r+0x1318>)
100097b2:	f7f8 fb3f 	bl	10001e34 <__aeabi_dcmpeq>
100097b6:	2800      	cmp	r0, #0
100097b8:	d004      	beq.n	100097c4 <_vfprintf_r+0x1138>
100097ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
100097bc:	07db      	lsls	r3, r3, #31
100097be:	d501      	bpl.n	100097c4 <_vfprintf_r+0x1138>
100097c0:	f000 fbf6 	bl	10009fb0 <_vfprintf_r+0x1924>
100097c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100097c6:	2230      	movs	r2, #48	; 0x30
100097c8:	0019      	movs	r1, r3
100097ca:	4459      	add	r1, fp
100097cc:	2b00      	cmp	r3, #0
100097ce:	db0c      	blt.n	100097ea <_vfprintf_r+0x115e>
100097d0:	465b      	mov	r3, fp
100097d2:	0018      	movs	r0, r3
100097d4:	701a      	strb	r2, [r3, #0]
100097d6:	3301      	adds	r3, #1
100097d8:	4281      	cmp	r1, r0
100097da:	d1fa      	bne.n	100097d2 <_vfprintf_r+0x1146>
100097dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100097de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100097e0:	4694      	mov	ip, r2
100097e2:	3301      	adds	r3, #1
100097e4:	449c      	add	ip, r3
100097e6:	4663      	mov	r3, ip
100097e8:	930b      	str	r3, [sp, #44]	; 0x2c
100097ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100097ec:	4642      	mov	r2, r8
100097ee:	1b9b      	subs	r3, r3, r6
100097f0:	9315      	str	r3, [sp, #84]	; 0x54
100097f2:	2320      	movs	r3, #32
100097f4:	439a      	bics	r2, r3
100097f6:	4693      	mov	fp, r2
100097f8:	e123      	b.n	10009a42 <_vfprintf_r+0x13b6>
100097fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100097fc:	ca08      	ldmia	r2!, {r3}
100097fe:	920f      	str	r2, [sp, #60]	; 0x3c
10009800:	465a      	mov	r2, fp
10009802:	06d2      	lsls	r2, r2, #27
10009804:	d429      	bmi.n	1000985a <_vfprintf_r+0x11ce>
10009806:	465a      	mov	r2, fp
10009808:	0652      	lsls	r2, r2, #25
1000980a:	d522      	bpl.n	10009852 <_vfprintf_r+0x11c6>
1000980c:	b29b      	uxth	r3, r3
1000980e:	930c      	str	r3, [sp, #48]	; 0x30
10009810:	2300      	movs	r3, #0
10009812:	930d      	str	r3, [sp, #52]	; 0x34
10009814:	e6a0      	b.n	10009558 <_vfprintf_r+0xecc>
10009816:	9907      	ldr	r1, [sp, #28]
10009818:	9806      	ldr	r0, [sp, #24]
1000981a:	aa2e      	add	r2, sp, #184	; 0xb8
1000981c:	f7fe f832 	bl	10007884 <__sprint_r>
10009820:	2800      	cmp	r0, #0
10009822:	d001      	beq.n	10009828 <_vfprintf_r+0x119c>
10009824:	f7ff fbaf 	bl	10008f86 <_vfprintf_r+0x8fa>
10009828:	ab31      	add	r3, sp, #196	; 0xc4
1000982a:	4698      	mov	r8, r3
1000982c:	9c30      	ldr	r4, [sp, #192]	; 0xc0
1000982e:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
10009830:	f7ff fbdc 	bl	10008fec <_vfprintf_r+0x960>
10009834:	9907      	ldr	r1, [sp, #28]
10009836:	9806      	ldr	r0, [sp, #24]
10009838:	aa2e      	add	r2, sp, #184	; 0xb8
1000983a:	f7fe f823 	bl	10007884 <__sprint_r>
1000983e:	2800      	cmp	r0, #0
10009840:	d001      	beq.n	10009846 <_vfprintf_r+0x11ba>
10009842:	f7ff fba0 	bl	10008f86 <_vfprintf_r+0x8fa>
10009846:	ab31      	add	r3, sp, #196	; 0xc4
10009848:	4698      	mov	r8, r3
1000984a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
1000984c:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
1000984e:	f7ff fbdf 	bl	10009010 <_vfprintf_r+0x984>
10009852:	465a      	mov	r2, fp
10009854:	0592      	lsls	r2, r2, #22
10009856:	d500      	bpl.n	1000985a <_vfprintf_r+0x11ce>
10009858:	e199      	b.n	10009b8e <_vfprintf_r+0x1502>
1000985a:	930c      	str	r3, [sp, #48]	; 0x30
1000985c:	2300      	movs	r3, #0
1000985e:	930d      	str	r3, [sp, #52]	; 0x34
10009860:	e67a      	b.n	10009558 <_vfprintf_r+0xecc>
10009862:	4643      	mov	r3, r8
10009864:	6d98      	ldr	r0, [r3, #88]	; 0x58
10009866:	f003 fcfa 	bl	1000d25e <__retarget_lock_release_recursive>
1000986a:	4643      	mov	r3, r8
1000986c:	220c      	movs	r2, #12
1000986e:	5e9b      	ldrsh	r3, [r3, r2]
10009870:	f7ff fb9c 	bl	10008fac <_vfprintf_r+0x920>
10009874:	9907      	ldr	r1, [sp, #28]
10009876:	9806      	ldr	r0, [sp, #24]
10009878:	aa2e      	add	r2, sp, #184	; 0xb8
1000987a:	f7fe f803 	bl	10007884 <__sprint_r>
1000987e:	2800      	cmp	r0, #0
10009880:	d001      	beq.n	10009886 <_vfprintf_r+0x11fa>
10009882:	f7ff fb80 	bl	10008f86 <_vfprintf_r+0x8fa>
10009886:	ab20      	add	r3, sp, #128	; 0x80
10009888:	7edb      	ldrb	r3, [r3, #27]
1000988a:	af31      	add	r7, sp, #196	; 0xc4
1000988c:	f7fe ffe5 	bl	1000885a <_vfprintf_r+0x1ce>
10009890:	9907      	ldr	r1, [sp, #28]
10009892:	9806      	ldr	r0, [sp, #24]
10009894:	aa2e      	add	r2, sp, #184	; 0xb8
10009896:	f7fd fff5 	bl	10007884 <__sprint_r>
1000989a:	2800      	cmp	r0, #0
1000989c:	d001      	beq.n	100098a2 <_vfprintf_r+0x1216>
1000989e:	f7ff fb72 	bl	10008f86 <_vfprintf_r+0x8fa>
100098a2:	af31      	add	r7, sp, #196	; 0xc4
100098a4:	f7ff fa6d 	bl	10008d82 <_vfprintf_r+0x6f6>
100098a8:	465d      	mov	r5, fp
100098aa:	2b01      	cmp	r3, #1
100098ac:	d001      	beq.n	100098b2 <_vfprintf_r+0x1226>
100098ae:	f7ff fab3 	bl	10008e18 <_vfprintf_r+0x78c>
100098b2:	f7ff f9a7 	bl	10008c04 <_vfprintf_r+0x578>
100098b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100098b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100098ba:	681b      	ldr	r3, [r3, #0]
100098bc:	601a      	str	r2, [r3, #0]
100098be:	f7ff f95b 	bl	10008b78 <_vfprintf_r+0x4ec>
100098c2:	2110      	movs	r1, #16
100098c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
100098c6:	4688      	mov	r8, r1
100098c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
100098ca:	4d37      	ldr	r5, [pc, #220]	; (100099a8 <_vfprintf_r+0x131c>)
100098cc:	2c10      	cmp	r4, #16
100098ce:	dc04      	bgt.n	100098da <_vfprintf_r+0x124e>
100098d0:	e057      	b.n	10009982 <_vfprintf_r+0x12f6>
100098d2:	3708      	adds	r7, #8
100098d4:	3c10      	subs	r4, #16
100098d6:	2c10      	cmp	r4, #16
100098d8:	dd53      	ble.n	10009982 <_vfprintf_r+0x12f6>
100098da:	4641      	mov	r1, r8
100098dc:	3210      	adds	r2, #16
100098de:	3301      	adds	r3, #1
100098e0:	603d      	str	r5, [r7, #0]
100098e2:	6079      	str	r1, [r7, #4]
100098e4:	9230      	str	r2, [sp, #192]	; 0xc0
100098e6:	932f      	str	r3, [sp, #188]	; 0xbc
100098e8:	2b07      	cmp	r3, #7
100098ea:	ddf2      	ble.n	100098d2 <_vfprintf_r+0x1246>
100098ec:	9907      	ldr	r1, [sp, #28]
100098ee:	9806      	ldr	r0, [sp, #24]
100098f0:	aa2e      	add	r2, sp, #184	; 0xb8
100098f2:	f7fd ffc7 	bl	10007884 <__sprint_r>
100098f6:	2800      	cmp	r0, #0
100098f8:	d001      	beq.n	100098fe <_vfprintf_r+0x1272>
100098fa:	f7ff fb44 	bl	10008f86 <_vfprintf_r+0x8fa>
100098fe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10009900:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
10009902:	af31      	add	r7, sp, #196	; 0xc4
10009904:	e7e6      	b.n	100098d4 <_vfprintf_r+0x1248>
10009906:	46a1      	mov	r9, r4
10009908:	4698      	mov	r8, r3
1000990a:	0014      	movs	r4, r2
1000990c:	4643      	mov	r3, r8
1000990e:	464a      	mov	r2, r9
10009910:	444c      	add	r4, r9
10009912:	3701      	adds	r7, #1
10009914:	601d      	str	r5, [r3, #0]
10009916:	605a      	str	r2, [r3, #4]
10009918:	9430      	str	r4, [sp, #192]	; 0xc0
1000991a:	972f      	str	r7, [sp, #188]	; 0xbc
1000991c:	2f07      	cmp	r7, #7
1000991e:	dc01      	bgt.n	10009924 <_vfprintf_r+0x1298>
10009920:	f7ff fb8e 	bl	10009040 <_vfprintf_r+0x9b4>
10009924:	e4cb      	b.n	100092be <_vfprintf_r+0xc32>
10009926:	0030      	movs	r0, r6
10009928:	f7fd ff6c 	bl	10007804 <strlen>
1000992c:	0001      	movs	r1, r0
1000992e:	f7ff f8b3 	bl	10008a98 <_vfprintf_r+0x40c>
10009932:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
10009934:	603a      	str	r2, [r7, #0]
10009936:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009938:	4694      	mov	ip, r2
1000993a:	607a      	str	r2, [r7, #4]
1000993c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000993e:	4463      	add	r3, ip
10009940:	3201      	adds	r2, #1
10009942:	9330      	str	r3, [sp, #192]	; 0xc0
10009944:	922f      	str	r2, [sp, #188]	; 0xbc
10009946:	2a07      	cmp	r2, #7
10009948:	dd00      	ble.n	1000994c <_vfprintf_r+0x12c0>
1000994a:	e131      	b.n	10009bb0 <_vfprintf_r+0x1524>
1000994c:	0038      	movs	r0, r7
1000994e:	3008      	adds	r0, #8
10009950:	2900      	cmp	r1, #0
10009952:	da00      	bge.n	10009956 <_vfprintf_r+0x12ca>
10009954:	e2d1      	b.n	10009efa <_vfprintf_r+0x186e>
10009956:	9915      	ldr	r1, [sp, #84]	; 0x54
10009958:	3201      	adds	r2, #1
1000995a:	468c      	mov	ip, r1
1000995c:	4463      	add	r3, ip
1000995e:	6006      	str	r6, [r0, #0]
10009960:	6041      	str	r1, [r0, #4]
10009962:	9330      	str	r3, [sp, #192]	; 0xc0
10009964:	922f      	str	r2, [sp, #188]	; 0xbc
10009966:	2a07      	cmp	r2, #7
10009968:	dd01      	ble.n	1000996e <_vfprintf_r+0x12e2>
1000996a:	f7ff f848 	bl	100089fe <_vfprintf_r+0x372>
1000996e:	3008      	adds	r0, #8
10009970:	0007      	movs	r7, r0
10009972:	f7fe ffb4 	bl	100088de <_vfprintf_r+0x252>
10009976:	4e0d      	ldr	r6, [pc, #52]	; (100099ac <_vfprintf_r+0x1320>)
10009978:	f7ff f828 	bl	100089cc <_vfprintf_r+0x340>
1000997c:	4d0a      	ldr	r5, [pc, #40]	; (100099a8 <_vfprintf_r+0x131c>)
1000997e:	f7ff faef 	bl	10008f60 <_vfprintf_r+0x8d4>
10009982:	607c      	str	r4, [r7, #4]
10009984:	3301      	adds	r3, #1
10009986:	18a4      	adds	r4, r4, r2
10009988:	603d      	str	r5, [r7, #0]
1000998a:	9430      	str	r4, [sp, #192]	; 0xc0
1000998c:	932f      	str	r3, [sp, #188]	; 0xbc
1000998e:	2b07      	cmp	r3, #7
10009990:	dd00      	ble.n	10009994 <_vfprintf_r+0x1308>
10009992:	e12a      	b.n	10009bea <_vfprintf_r+0x155e>
10009994:	3708      	adds	r7, #8
10009996:	e422      	b.n	100091de <_vfprintf_r+0xb52>
10009998:	1000e708 	.word	0x1000e708
1000999c:	1000e6f4 	.word	0x1000e6f4
100099a0:	40300000 	.word	0x40300000
100099a4:	3fe00000 	.word	0x3fe00000
100099a8:	1000eab4 	.word	0x1000eab4
100099ac:	1000e89c 	.word	0x1000e89c
100099b0:	232d      	movs	r3, #45	; 0x2d
100099b2:	aa20      	add	r2, sp, #128	; 0x80
100099b4:	76d3      	strb	r3, [r2, #27]
100099b6:	f7ff f803 	bl	100089c0 <_vfprintf_r+0x334>
100099ba:	4641      	mov	r1, r8
100099bc:	9806      	ldr	r0, [sp, #24]
100099be:	aa2e      	add	r2, sp, #184	; 0xb8
100099c0:	f7fd ff60 	bl	10007884 <__sprint_r>
100099c4:	2800      	cmp	r0, #0
100099c6:	d101      	bne.n	100099cc <_vfprintf_r+0x1340>
100099c8:	f7fe ffb6 	bl	10008938 <_vfprintf_r+0x2ac>
100099cc:	f7ff fae3 	bl	10008f96 <_vfprintf_r+0x90a>
100099d0:	464d      	mov	r5, r9
100099d2:	2302      	movs	r3, #2
100099d4:	aa2c      	add	r2, sp, #176	; 0xb0
100099d6:	9204      	str	r2, [sp, #16]
100099d8:	aa29      	add	r2, sp, #164	; 0xa4
100099da:	9203      	str	r2, [sp, #12]
100099dc:	aa28      	add	r2, sp, #160	; 0xa0
100099de:	9202      	str	r2, [sp, #8]
100099e0:	9300      	str	r3, [sp, #0]
100099e2:	9806      	ldr	r0, [sp, #24]
100099e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
100099e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100099e8:	9501      	str	r5, [sp, #4]
100099ea:	f000 fd43 	bl	1000a474 <_dtoa_r>
100099ee:	4643      	mov	r3, r8
100099f0:	0006      	movs	r6, r0
100099f2:	2b67      	cmp	r3, #103	; 0x67
100099f4:	d100      	bne.n	100099f8 <_vfprintf_r+0x136c>
100099f6:	e133      	b.n	10009c60 <_vfprintf_r+0x15d4>
100099f8:	2b47      	cmp	r3, #71	; 0x47
100099fa:	d100      	bne.n	100099fe <_vfprintf_r+0x1372>
100099fc:	e130      	b.n	10009c60 <_vfprintf_r+0x15d4>
100099fe:	2320      	movs	r3, #32
10009a00:	4642      	mov	r2, r8
10009a02:	439a      	bics	r2, r3
10009a04:	4693      	mov	fp, r2
10009a06:	1944      	adds	r4, r0, r5
10009a08:	2a46      	cmp	r2, #70	; 0x46
10009a0a:	d105      	bne.n	10009a18 <_vfprintf_r+0x138c>
10009a0c:	7803      	ldrb	r3, [r0, #0]
10009a0e:	2b30      	cmp	r3, #48	; 0x30
10009a10:	d100      	bne.n	10009a14 <_vfprintf_r+0x1388>
10009a12:	e0f6      	b.n	10009c02 <_vfprintf_r+0x1576>
10009a14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10009a16:	18e4      	adds	r4, r4, r3
10009a18:	2300      	movs	r3, #0
10009a1a:	9822      	ldr	r0, [sp, #136]	; 0x88
10009a1c:	9923      	ldr	r1, [sp, #140]	; 0x8c
10009a1e:	2200      	movs	r2, #0
10009a20:	f7f8 fa08 	bl	10001e34 <__aeabi_dcmpeq>
10009a24:	0023      	movs	r3, r4
10009a26:	2800      	cmp	r0, #0
10009a28:	d109      	bne.n	10009a3e <_vfprintf_r+0x13b2>
10009a2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10009a2c:	42a3      	cmp	r3, r4
10009a2e:	d206      	bcs.n	10009a3e <_vfprintf_r+0x13b2>
10009a30:	2130      	movs	r1, #48	; 0x30
10009a32:	1c5a      	adds	r2, r3, #1
10009a34:	922c      	str	r2, [sp, #176]	; 0xb0
10009a36:	7019      	strb	r1, [r3, #0]
10009a38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10009a3a:	429c      	cmp	r4, r3
10009a3c:	d8f9      	bhi.n	10009a32 <_vfprintf_r+0x13a6>
10009a3e:	1b9b      	subs	r3, r3, r6
10009a40:	9315      	str	r3, [sp, #84]	; 0x54
10009a42:	465b      	mov	r3, fp
10009a44:	9928      	ldr	r1, [sp, #160]	; 0xa0
10009a46:	9113      	str	r1, [sp, #76]	; 0x4c
10009a48:	2b47      	cmp	r3, #71	; 0x47
10009a4a:	d100      	bne.n	10009a4e <_vfprintf_r+0x13c2>
10009a4c:	e110      	b.n	10009c70 <_vfprintf_r+0x15e4>
10009a4e:	2b46      	cmp	r3, #70	; 0x46
10009a50:	d100      	bne.n	10009a54 <_vfprintf_r+0x13c8>
10009a52:	e298      	b.n	10009f86 <_vfprintf_r+0x18fa>
10009a54:	1e4b      	subs	r3, r1, #1
10009a56:	469b      	mov	fp, r3
10009a58:	9328      	str	r3, [sp, #160]	; 0xa0
10009a5a:	4643      	mov	r3, r8
10009a5c:	2b61      	cmp	r3, #97	; 0x61
10009a5e:	d100      	bne.n	10009a62 <_vfprintf_r+0x13d6>
10009a60:	e37c      	b.n	1000a15c <_vfprintf_r+0x1ad0>
10009a62:	4642      	mov	r2, r8
10009a64:	2350      	movs	r3, #80	; 0x50
10009a66:	2a41      	cmp	r2, #65	; 0x41
10009a68:	d000      	beq.n	10009a6c <_vfprintf_r+0x13e0>
10009a6a:	e10e      	b.n	10009c8a <_vfprintf_r+0x15fe>
10009a6c:	2201      	movs	r2, #1
10009a6e:	2428      	movs	r4, #40	; 0x28
10009a70:	a820      	add	r0, sp, #128	; 0x80
10009a72:	1900      	adds	r0, r0, r4
10009a74:	7003      	strb	r3, [r0, #0]
10009a76:	4658      	mov	r0, fp
10009a78:	232b      	movs	r3, #43	; 0x2b
10009a7a:	2800      	cmp	r0, #0
10009a7c:	da03      	bge.n	10009a86 <_vfprintf_r+0x13fa>
10009a7e:	2001      	movs	r0, #1
10009a80:	1a43      	subs	r3, r0, r1
10009a82:	469b      	mov	fp, r3
10009a84:	232d      	movs	r3, #45	; 0x2d
10009a86:	2029      	movs	r0, #41	; 0x29
10009a88:	a920      	add	r1, sp, #128	; 0x80
10009a8a:	1809      	adds	r1, r1, r0
10009a8c:	700b      	strb	r3, [r1, #0]
10009a8e:	465b      	mov	r3, fp
10009a90:	2b09      	cmp	r3, #9
10009a92:	dc00      	bgt.n	10009a96 <_vfprintf_r+0x140a>
10009a94:	e2bc      	b.n	1000a010 <_vfprintf_r+0x1984>
10009a96:	aa20      	add	r2, sp, #128	; 0x80
10009a98:	2337      	movs	r3, #55	; 0x37
10009a9a:	4694      	mov	ip, r2
10009a9c:	4463      	add	r3, ip
10009a9e:	465d      	mov	r5, fp
10009aa0:	001c      	movs	r4, r3
10009aa2:	46bb      	mov	fp, r7
10009aa4:	46b1      	mov	r9, r6
10009aa6:	0028      	movs	r0, r5
10009aa8:	210a      	movs	r1, #10
10009aaa:	f7f6 fc21 	bl	100002f0 <__aeabi_idivmod>
10009aae:	0026      	movs	r6, r4
10009ab0:	3130      	adds	r1, #48	; 0x30
10009ab2:	3c01      	subs	r4, #1
10009ab4:	0028      	movs	r0, r5
10009ab6:	7021      	strb	r1, [r4, #0]
10009ab8:	210a      	movs	r1, #10
10009aba:	f7f6 fbcf 	bl	1000025c <__divsi3>
10009abe:	002f      	movs	r7, r5
10009ac0:	0005      	movs	r5, r0
10009ac2:	2f63      	cmp	r7, #99	; 0x63
10009ac4:	dcef      	bgt.n	10009aa6 <_vfprintf_r+0x141a>
10009ac6:	464b      	mov	r3, r9
10009ac8:	46b1      	mov	r9, r6
10009aca:	a920      	add	r1, sp, #128	; 0x80
10009acc:	001e      	movs	r6, r3
10009ace:	2237      	movs	r2, #55	; 0x37
10009ad0:	464b      	mov	r3, r9
10009ad2:	468c      	mov	ip, r1
10009ad4:	3b02      	subs	r3, #2
10009ad6:	3030      	adds	r0, #48	; 0x30
10009ad8:	4462      	add	r2, ip
10009ada:	465f      	mov	r7, fp
10009adc:	7018      	strb	r0, [r3, #0]
10009ade:	4293      	cmp	r3, r2
10009ae0:	d300      	bcc.n	10009ae4 <_vfprintf_r+0x1458>
10009ae2:	e351      	b.n	1000a188 <_vfprintf_r+0x1afc>
10009ae4:	222a      	movs	r2, #42	; 0x2a
10009ae6:	4462      	add	r2, ip
10009ae8:	7819      	ldrb	r1, [r3, #0]
10009aea:	a820      	add	r0, sp, #128	; 0x80
10009aec:	7011      	strb	r1, [r2, #0]
10009aee:	4684      	mov	ip, r0
10009af0:	2137      	movs	r1, #55	; 0x37
10009af2:	3301      	adds	r3, #1
10009af4:	4461      	add	r1, ip
10009af6:	3201      	adds	r2, #1
10009af8:	4299      	cmp	r1, r3
10009afa:	d1f5      	bne.n	10009ae8 <_vfprintf_r+0x145c>
10009afc:	2339      	movs	r3, #57	; 0x39
10009afe:	464a      	mov	r2, r9
10009b00:	4463      	add	r3, ip
10009b02:	1a9b      	subs	r3, r3, r2
10009b04:	222a      	movs	r2, #42	; 0x2a
10009b06:	4462      	add	r2, ip
10009b08:	4694      	mov	ip, r2
10009b0a:	aa2a      	add	r2, sp, #168	; 0xa8
10009b0c:	4463      	add	r3, ip
10009b0e:	1a9b      	subs	r3, r3, r2
10009b10:	931e      	str	r3, [sp, #120]	; 0x78
10009b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009b14:	991e      	ldr	r1, [sp, #120]	; 0x78
10009b16:	001a      	movs	r2, r3
10009b18:	468c      	mov	ip, r1
10009b1a:	4462      	add	r2, ip
10009b1c:	920b      	str	r2, [sp, #44]	; 0x2c
10009b1e:	2b01      	cmp	r3, #1
10009b20:	dc00      	bgt.n	10009b24 <_vfprintf_r+0x1498>
10009b22:	e28a      	b.n	1000a03a <_vfprintf_r+0x19ae>
10009b24:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009b28:	4694      	mov	ip, r2
10009b2a:	4463      	add	r3, ip
10009b2c:	930b      	str	r3, [sp, #44]	; 0x2c
10009b2e:	4bdd      	ldr	r3, [pc, #884]	; (10009ea4 <_vfprintf_r+0x1818>)
10009b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009b32:	401a      	ands	r2, r3
10009b34:	0013      	movs	r3, r2
10009b36:	2280      	movs	r2, #128	; 0x80
10009b38:	0052      	lsls	r2, r2, #1
10009b3a:	431a      	orrs	r2, r3
10009b3c:	4693      	mov	fp, r2
10009b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009b40:	43d3      	mvns	r3, r2
10009b42:	17db      	asrs	r3, r3, #31
10009b44:	401a      	ands	r2, r3
10009b46:	2300      	movs	r3, #0
10009b48:	9208      	str	r2, [sp, #32]
10009b4a:	9318      	str	r3, [sp, #96]	; 0x60
10009b4c:	9314      	str	r3, [sp, #80]	; 0x50
10009b4e:	9313      	str	r3, [sp, #76]	; 0x4c
10009b50:	9b25      	ldr	r3, [sp, #148]	; 0x94
10009b52:	2b00      	cmp	r3, #0
10009b54:	d000      	beq.n	10009b58 <_vfprintf_r+0x14cc>
10009b56:	e09c      	b.n	10009c92 <_vfprintf_r+0x1606>
10009b58:	2200      	movs	r2, #0
10009b5a:	ab20      	add	r3, sp, #128	; 0x80
10009b5c:	4691      	mov	r9, r2
10009b5e:	7edb      	ldrb	r3, [r3, #27]
10009b60:	f7fe fff7 	bl	10008b52 <_vfprintf_r+0x4c6>
10009b64:	2306      	movs	r3, #6
10009b66:	9308      	str	r3, [sp, #32]
10009b68:	e546      	b.n	100095f8 <_vfprintf_r+0xf6c>
10009b6a:	4649      	mov	r1, r9
10009b6c:	1b96      	subs	r6, r2, r6
10009b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009b70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009b72:	1a55      	subs	r5, r2, r1
10009b74:	42b5      	cmp	r5, r6
10009b76:	dc01      	bgt.n	10009b7c <_vfprintf_r+0x14f0>
10009b78:	f7ff fb69 	bl	1000924e <_vfprintf_r+0xbc2>
10009b7c:	0035      	movs	r5, r6
10009b7e:	f7ff fb66 	bl	1000924e <_vfprintf_r+0xbc2>
10009b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009b86:	681b      	ldr	r3, [r3, #0]
10009b88:	801a      	strh	r2, [r3, #0]
10009b8a:	f7fe fff5 	bl	10008b78 <_vfprintf_r+0x4ec>
10009b8e:	b2db      	uxtb	r3, r3
10009b90:	930c      	str	r3, [sp, #48]	; 0x30
10009b92:	2300      	movs	r3, #0
10009b94:	930d      	str	r3, [sp, #52]	; 0x34
10009b96:	e4df      	b.n	10009558 <_vfprintf_r+0xecc>
10009b98:	b2db      	uxtb	r3, r3
10009b9a:	930c      	str	r3, [sp, #48]	; 0x30
10009b9c:	2300      	movs	r3, #0
10009b9e:	930d      	str	r3, [sp, #52]	; 0x34
10009ba0:	f7ff f86c 	bl	10008c7c <_vfprintf_r+0x5f0>
10009ba4:	b25b      	sxtb	r3, r3
10009ba6:	930c      	str	r3, [sp, #48]	; 0x30
10009ba8:	17db      	asrs	r3, r3, #31
10009baa:	930d      	str	r3, [sp, #52]	; 0x34
10009bac:	f7ff f80a 	bl	10008bc4 <_vfprintf_r+0x538>
10009bb0:	9907      	ldr	r1, [sp, #28]
10009bb2:	9806      	ldr	r0, [sp, #24]
10009bb4:	aa2e      	add	r2, sp, #184	; 0xb8
10009bb6:	f7fd fe65 	bl	10007884 <__sprint_r>
10009bba:	2800      	cmp	r0, #0
10009bbc:	d001      	beq.n	10009bc2 <_vfprintf_r+0x1536>
10009bbe:	f7ff f9e2 	bl	10008f86 <_vfprintf_r+0x8fa>
10009bc2:	9928      	ldr	r1, [sp, #160]	; 0xa0
10009bc4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009bc6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009bc8:	a831      	add	r0, sp, #196	; 0xc4
10009bca:	e6c1      	b.n	10009950 <_vfprintf_r+0x12c4>
10009bcc:	4643      	mov	r3, r8
10009bce:	6d98      	ldr	r0, [r3, #88]	; 0x58
10009bd0:	f003 fb45 	bl	1000d25e <__retarget_lock_release_recursive>
10009bd4:	f7fe fde9 	bl	100087aa <_vfprintf_r+0x11e>
10009bd8:	9806      	ldr	r0, [sp, #24]
10009bda:	1c59      	adds	r1, r3, #1
10009bdc:	f7fd fa9e 	bl	1000711c <_malloc_r>
10009be0:	1e06      	subs	r6, r0, #0
10009be2:	d100      	bne.n	10009be6 <_vfprintf_r+0x155a>
10009be4:	e2d3      	b.n	1000a18e <_vfprintf_r+0x1b02>
10009be6:	900e      	str	r0, [sp, #56]	; 0x38
10009be8:	e56c      	b.n	100096c4 <_vfprintf_r+0x1038>
10009bea:	9907      	ldr	r1, [sp, #28]
10009bec:	9806      	ldr	r0, [sp, #24]
10009bee:	aa2e      	add	r2, sp, #184	; 0xb8
10009bf0:	f7fd fe48 	bl	10007884 <__sprint_r>
10009bf4:	2800      	cmp	r0, #0
10009bf6:	d001      	beq.n	10009bfc <_vfprintf_r+0x1570>
10009bf8:	f7ff f9c5 	bl	10008f86 <_vfprintf_r+0x8fa>
10009bfc:	af31      	add	r7, sp, #196	; 0xc4
10009bfe:	f7ff faee 	bl	100091de <_vfprintf_r+0xb52>
10009c02:	2200      	movs	r2, #0
10009c04:	9822      	ldr	r0, [sp, #136]	; 0x88
10009c06:	9923      	ldr	r1, [sp, #140]	; 0x8c
10009c08:	2300      	movs	r3, #0
10009c0a:	f7f8 f913 	bl	10001e34 <__aeabi_dcmpeq>
10009c0e:	2800      	cmp	r0, #0
10009c10:	d000      	beq.n	10009c14 <_vfprintf_r+0x1588>
10009c12:	e6ff      	b.n	10009a14 <_vfprintf_r+0x1388>
10009c14:	2301      	movs	r3, #1
10009c16:	1b5b      	subs	r3, r3, r5
10009c18:	9328      	str	r3, [sp, #160]	; 0xa0
10009c1a:	e6fc      	b.n	10009a16 <_vfprintf_r+0x138a>
10009c1c:	464b      	mov	r3, r9
10009c1e:	1c5d      	adds	r5, r3, #1
10009c20:	2302      	movs	r3, #2
10009c22:	e6d7      	b.n	100099d4 <_vfprintf_r+0x1348>
10009c24:	464d      	mov	r5, r9
10009c26:	2303      	movs	r3, #3
10009c28:	e6d4      	b.n	100099d4 <_vfprintf_r+0x1348>
10009c2a:	aa28      	add	r2, sp, #160	; 0xa0
10009c2c:	9822      	ldr	r0, [sp, #136]	; 0x88
10009c2e:	9923      	ldr	r1, [sp, #140]	; 0x8c
10009c30:	f002 feee 	bl	1000ca10 <frexp>
10009c34:	23ff      	movs	r3, #255	; 0xff
10009c36:	2200      	movs	r2, #0
10009c38:	059b      	lsls	r3, r3, #22
10009c3a:	f7f7 fa73 	bl	10001124 <__aeabi_dmul>
10009c3e:	2200      	movs	r2, #0
10009c40:	2300      	movs	r3, #0
10009c42:	0004      	movs	r4, r0
10009c44:	000d      	movs	r5, r1
10009c46:	f7f8 f8f5 	bl	10001e34 <__aeabi_dcmpeq>
10009c4a:	2800      	cmp	r0, #0
10009c4c:	d005      	beq.n	10009c5a <_vfprintf_r+0x15ce>
10009c4e:	2301      	movs	r3, #1
10009c50:	9328      	str	r3, [sp, #160]	; 0xa0
10009c52:	4643      	mov	r3, r8
10009c54:	2b61      	cmp	r3, #97	; 0x61
10009c56:	d100      	bne.n	10009c5a <_vfprintf_r+0x15ce>
10009c58:	e55a      	b.n	10009710 <_vfprintf_r+0x1084>
10009c5a:	4b93      	ldr	r3, [pc, #588]	; (10009ea8 <_vfprintf_r+0x181c>)
10009c5c:	9308      	str	r3, [sp, #32]
10009c5e:	e559      	b.n	10009714 <_vfprintf_r+0x1088>
10009c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009c62:	07db      	lsls	r3, r3, #31
10009c64:	d500      	bpl.n	10009c68 <_vfprintf_r+0x15dc>
10009c66:	e19f      	b.n	10009fa8 <_vfprintf_r+0x191c>
10009c68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10009c6a:	9928      	ldr	r1, [sp, #160]	; 0xa0
10009c6c:	1b9b      	subs	r3, r3, r6
10009c6e:	9315      	str	r3, [sp, #84]	; 0x54
10009c70:	9113      	str	r1, [sp, #76]	; 0x4c
10009c72:	1ccb      	adds	r3, r1, #3
10009c74:	db02      	blt.n	10009c7c <_vfprintf_r+0x15f0>
10009c76:	4589      	cmp	r9, r1
10009c78:	db00      	blt.n	10009c7c <_vfprintf_r+0x15f0>
10009c7a:	e0d9      	b.n	10009e30 <_vfprintf_r+0x17a4>
10009c7c:	2302      	movs	r3, #2
10009c7e:	425b      	negs	r3, r3
10009c80:	469c      	mov	ip, r3
10009c82:	1e4b      	subs	r3, r1, #1
10009c84:	469b      	mov	fp, r3
10009c86:	44e0      	add	r8, ip
10009c88:	9328      	str	r3, [sp, #160]	; 0xa0
10009c8a:	4643      	mov	r3, r8
10009c8c:	2200      	movs	r2, #0
10009c8e:	b2db      	uxtb	r3, r3
10009c90:	e6ed      	b.n	10009a6e <_vfprintf_r+0x13e2>
10009c92:	232d      	movs	r3, #45	; 0x2d
10009c94:	aa20      	add	r2, sp, #128	; 0x80
10009c96:	76d3      	strb	r3, [r2, #27]
10009c98:	2200      	movs	r2, #0
10009c9a:	4691      	mov	r9, r2
10009c9c:	f7fe ff5c 	bl	10008b58 <_vfprintf_r+0x4cc>
10009ca0:	4653      	mov	r3, sl
10009ca2:	9312      	str	r3, [sp, #72]	; 0x48
10009ca4:	465b      	mov	r3, fp
10009ca6:	9313      	str	r3, [sp, #76]	; 0x4c
10009ca8:	9b24      	ldr	r3, [sp, #144]	; 0x90
10009caa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
10009cac:	469a      	mov	sl, r3
10009cae:	9b18      	ldr	r3, [sp, #96]	; 0x60
10009cb0:	2610      	movs	r6, #16
10009cb2:	4698      	mov	r8, r3
10009cb4:	003b      	movs	r3, r7
10009cb6:	464f      	mov	r7, r9
10009cb8:	4691      	mov	r9, r2
10009cba:	9a06      	ldr	r2, [sp, #24]
10009cbc:	4d7b      	ldr	r5, [pc, #492]	; (10009eac <_vfprintf_r+0x1820>)
10009cbe:	4693      	mov	fp, r2
10009cc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009cc2:	2a00      	cmp	r2, #0
10009cc4:	d033      	beq.n	10009d2e <_vfprintf_r+0x16a2>
10009cc6:	4642      	mov	r2, r8
10009cc8:	2a00      	cmp	r2, #0
10009cca:	d07e      	beq.n	10009dca <_vfprintf_r+0x173e>
10009ccc:	2201      	movs	r2, #1
10009cce:	4252      	negs	r2, r2
10009cd0:	4694      	mov	ip, r2
10009cd2:	44e0      	add	r8, ip
10009cd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
10009cd6:	601a      	str	r2, [r3, #0]
10009cd8:	4652      	mov	r2, sl
10009cda:	605a      	str	r2, [r3, #4]
10009cdc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10009cde:	4452      	add	r2, sl
10009ce0:	9230      	str	r2, [sp, #192]	; 0xc0
10009ce2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009ce4:	3201      	adds	r2, #1
10009ce6:	922f      	str	r2, [sp, #188]	; 0xbc
10009ce8:	2a07      	cmp	r2, #7
10009cea:	dc63      	bgt.n	10009db4 <_vfprintf_r+0x1728>
10009cec:	3308      	adds	r3, #8
10009cee:	464a      	mov	r2, r9
10009cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10009cf2:	7812      	ldrb	r2, [r2, #0]
10009cf4:	1bcc      	subs	r4, r1, r7
10009cf6:	4294      	cmp	r4, r2
10009cf8:	dd00      	ble.n	10009cfc <_vfprintf_r+0x1670>
10009cfa:	0014      	movs	r4, r2
10009cfc:	2c00      	cmp	r4, #0
10009cfe:	dd0c      	ble.n	10009d1a <_vfprintf_r+0x168e>
10009d00:	9a30      	ldr	r2, [sp, #192]	; 0xc0
10009d02:	601f      	str	r7, [r3, #0]
10009d04:	1912      	adds	r2, r2, r4
10009d06:	9230      	str	r2, [sp, #192]	; 0xc0
10009d08:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009d0a:	605c      	str	r4, [r3, #4]
10009d0c:	3201      	adds	r2, #1
10009d0e:	922f      	str	r2, [sp, #188]	; 0xbc
10009d10:	2a07      	cmp	r2, #7
10009d12:	dc62      	bgt.n	10009dda <_vfprintf_r+0x174e>
10009d14:	464a      	mov	r2, r9
10009d16:	7812      	ldrb	r2, [r2, #0]
10009d18:	3308      	adds	r3, #8
10009d1a:	43e1      	mvns	r1, r4
10009d1c:	17c9      	asrs	r1, r1, #31
10009d1e:	400c      	ands	r4, r1
10009d20:	1b14      	subs	r4, r2, r4
10009d22:	2c00      	cmp	r4, #0
10009d24:	dc16      	bgt.n	10009d54 <_vfprintf_r+0x16c8>
10009d26:	18bf      	adds	r7, r7, r2
10009d28:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009d2a:	2a00      	cmp	r2, #0
10009d2c:	d1cb      	bne.n	10009cc6 <_vfprintf_r+0x163a>
10009d2e:	4642      	mov	r2, r8
10009d30:	2a00      	cmp	r2, #0
10009d32:	d1cb      	bne.n	10009ccc <_vfprintf_r+0x1640>
10009d34:	464a      	mov	r2, r9
10009d36:	46b9      	mov	r9, r7
10009d38:	921a      	str	r2, [sp, #104]	; 0x68
10009d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009d3c:	001f      	movs	r7, r3
10009d3e:	4692      	mov	sl, r2
10009d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009d42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009d44:	4693      	mov	fp, r2
10009d46:	4599      	cmp	r9, r3
10009d48:	d801      	bhi.n	10009d4e <_vfprintf_r+0x16c2>
10009d4a:	f7ff fa50 	bl	100091ee <_vfprintf_r+0xb62>
10009d4e:	4699      	mov	r9, r3
10009d50:	f7ff fa4d 	bl	100091ee <_vfprintf_r+0xb62>
10009d54:	9930      	ldr	r1, [sp, #192]	; 0xc0
10009d56:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009d58:	2c10      	cmp	r4, #16
10009d5a:	dc00      	bgt.n	10009d5e <_vfprintf_r+0x16d2>
10009d5c:	e1d4      	b.n	1000a108 <_vfprintf_r+0x1a7c>
10009d5e:	9511      	str	r5, [sp, #68]	; 0x44
10009d60:	e003      	b.n	10009d6a <_vfprintf_r+0x16de>
10009d62:	3c10      	subs	r4, #16
10009d64:	3308      	adds	r3, #8
10009d66:	2c10      	cmp	r4, #16
10009d68:	dd16      	ble.n	10009d98 <_vfprintf_r+0x170c>
10009d6a:	3110      	adds	r1, #16
10009d6c:	3201      	adds	r2, #1
10009d6e:	601d      	str	r5, [r3, #0]
10009d70:	605e      	str	r6, [r3, #4]
10009d72:	9130      	str	r1, [sp, #192]	; 0xc0
10009d74:	922f      	str	r2, [sp, #188]	; 0xbc
10009d76:	2a07      	cmp	r2, #7
10009d78:	ddf3      	ble.n	10009d62 <_vfprintf_r+0x16d6>
10009d7a:	4658      	mov	r0, fp
10009d7c:	9907      	ldr	r1, [sp, #28]
10009d7e:	aa2e      	add	r2, sp, #184	; 0xb8
10009d80:	f7fd fd80 	bl	10007884 <__sprint_r>
10009d84:	2800      	cmp	r0, #0
10009d86:	d001      	beq.n	10009d8c <_vfprintf_r+0x1700>
10009d88:	f7ff f8fd 	bl	10008f86 <_vfprintf_r+0x8fa>
10009d8c:	3c10      	subs	r4, #16
10009d8e:	9930      	ldr	r1, [sp, #192]	; 0xc0
10009d90:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009d92:	ab31      	add	r3, sp, #196	; 0xc4
10009d94:	2c10      	cmp	r4, #16
10009d96:	dce8      	bgt.n	10009d6a <_vfprintf_r+0x16de>
10009d98:	9811      	ldr	r0, [sp, #68]	; 0x44
10009d9a:	605c      	str	r4, [r3, #4]
10009d9c:	3201      	adds	r2, #1
10009d9e:	1864      	adds	r4, r4, r1
10009da0:	6018      	str	r0, [r3, #0]
10009da2:	9430      	str	r4, [sp, #192]	; 0xc0
10009da4:	922f      	str	r2, [sp, #188]	; 0xbc
10009da6:	2a07      	cmp	r2, #7
10009da8:	dc62      	bgt.n	10009e70 <_vfprintf_r+0x17e4>
10009daa:	464a      	mov	r2, r9
10009dac:	7812      	ldrb	r2, [r2, #0]
10009dae:	3308      	adds	r3, #8
10009db0:	18bf      	adds	r7, r7, r2
10009db2:	e7b9      	b.n	10009d28 <_vfprintf_r+0x169c>
10009db4:	4658      	mov	r0, fp
10009db6:	9907      	ldr	r1, [sp, #28]
10009db8:	aa2e      	add	r2, sp, #184	; 0xb8
10009dba:	f7fd fd63 	bl	10007884 <__sprint_r>
10009dbe:	2800      	cmp	r0, #0
10009dc0:	d001      	beq.n	10009dc6 <_vfprintf_r+0x173a>
10009dc2:	f7ff f8e0 	bl	10008f86 <_vfprintf_r+0x8fa>
10009dc6:	ab31      	add	r3, sp, #196	; 0xc4
10009dc8:	e791      	b.n	10009cee <_vfprintf_r+0x1662>
10009dca:	2201      	movs	r2, #1
10009dcc:	4252      	negs	r2, r2
10009dce:	4694      	mov	ip, r2
10009dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009dd2:	44e1      	add	r9, ip
10009dd4:	4462      	add	r2, ip
10009dd6:	9214      	str	r2, [sp, #80]	; 0x50
10009dd8:	e77c      	b.n	10009cd4 <_vfprintf_r+0x1648>
10009dda:	4658      	mov	r0, fp
10009ddc:	9907      	ldr	r1, [sp, #28]
10009dde:	aa2e      	add	r2, sp, #184	; 0xb8
10009de0:	f7fd fd50 	bl	10007884 <__sprint_r>
10009de4:	2800      	cmp	r0, #0
10009de6:	d001      	beq.n	10009dec <_vfprintf_r+0x1760>
10009de8:	f7ff f8cd 	bl	10008f86 <_vfprintf_r+0x8fa>
10009dec:	464b      	mov	r3, r9
10009dee:	781a      	ldrb	r2, [r3, #0]
10009df0:	ab31      	add	r3, sp, #196	; 0xc4
10009df2:	e792      	b.n	10009d1a <_vfprintf_r+0x168e>
10009df4:	9907      	ldr	r1, [sp, #28]
10009df6:	9806      	ldr	r0, [sp, #24]
10009df8:	aa2e      	add	r2, sp, #184	; 0xb8
10009dfa:	f7fd fd43 	bl	10007884 <__sprint_r>
10009dfe:	2800      	cmp	r0, #0
10009e00:	d001      	beq.n	10009e06 <_vfprintf_r+0x177a>
10009e02:	f7ff f8c0 	bl	10008f86 <_vfprintf_r+0x8fa>
10009e06:	9928      	ldr	r1, [sp, #160]	; 0xa0
10009e08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009e0a:	af31      	add	r7, sp, #196	; 0xc4
10009e0c:	f7ff faed 	bl	100093ea <_vfprintf_r+0xd5e>
10009e10:	465b      	mov	r3, fp
10009e12:	9311      	str	r3, [sp, #68]	; 0x44
10009e14:	2300      	movs	r3, #0
10009e16:	930e      	str	r3, [sp, #56]	; 0x38
10009e18:	9916      	ldr	r1, [sp, #88]	; 0x58
10009e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009e1c:	0013      	movs	r3, r2
10009e1e:	2280      	movs	r2, #128	; 0x80
10009e20:	0612      	lsls	r2, r2, #24
10009e22:	4694      	mov	ip, r2
10009e24:	4463      	add	r3, ip
10009e26:	9323      	str	r3, [sp, #140]	; 0x8c
10009e28:	232d      	movs	r3, #45	; 0x2d
10009e2a:	9122      	str	r1, [sp, #136]	; 0x88
10009e2c:	9325      	str	r3, [sp, #148]	; 0x94
10009e2e:	e458      	b.n	100096e2 <_vfprintf_r+0x1056>
10009e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009e32:	428b      	cmp	r3, r1
10009e34:	dd00      	ble.n	10009e38 <_vfprintf_r+0x17ac>
10009e36:	e08f      	b.n	10009f58 <_vfprintf_r+0x18cc>
10009e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009e3a:	910b      	str	r1, [sp, #44]	; 0x2c
10009e3c:	07db      	lsls	r3, r3, #31
10009e3e:	d504      	bpl.n	10009e4a <_vfprintf_r+0x17be>
10009e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
10009e42:	469c      	mov	ip, r3
10009e44:	448c      	add	ip, r1
10009e46:	4663      	mov	r3, ip
10009e48:	930b      	str	r3, [sp, #44]	; 0x2c
10009e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009e4c:	055b      	lsls	r3, r3, #21
10009e4e:	d502      	bpl.n	10009e56 <_vfprintf_r+0x17ca>
10009e50:	2900      	cmp	r1, #0
10009e52:	dd00      	ble.n	10009e56 <_vfprintf_r+0x17ca>
10009e54:	e124      	b.n	1000a0a0 <_vfprintf_r+0x1a14>
10009e56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009e58:	43d3      	mvns	r3, r2
10009e5a:	17db      	asrs	r3, r3, #31
10009e5c:	401a      	ands	r2, r3
10009e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10009e60:	9208      	str	r2, [sp, #32]
10009e62:	469b      	mov	fp, r3
10009e64:	2367      	movs	r3, #103	; 0x67
10009e66:	4698      	mov	r8, r3
10009e68:	2300      	movs	r3, #0
10009e6a:	9318      	str	r3, [sp, #96]	; 0x60
10009e6c:	9314      	str	r3, [sp, #80]	; 0x50
10009e6e:	e66f      	b.n	10009b50 <_vfprintf_r+0x14c4>
10009e70:	4658      	mov	r0, fp
10009e72:	9907      	ldr	r1, [sp, #28]
10009e74:	aa2e      	add	r2, sp, #184	; 0xb8
10009e76:	f7fd fd05 	bl	10007884 <__sprint_r>
10009e7a:	2800      	cmp	r0, #0
10009e7c:	d001      	beq.n	10009e82 <_vfprintf_r+0x17f6>
10009e7e:	f7ff f882 	bl	10008f86 <_vfprintf_r+0x8fa>
10009e82:	464b      	mov	r3, r9
10009e84:	781a      	ldrb	r2, [r3, #0]
10009e86:	ab31      	add	r3, sp, #196	; 0xc4
10009e88:	18bf      	adds	r7, r7, r2
10009e8a:	e74d      	b.n	10009d28 <_vfprintf_r+0x169c>
10009e8c:	9907      	ldr	r1, [sp, #28]
10009e8e:	9806      	ldr	r0, [sp, #24]
10009e90:	aa2e      	add	r2, sp, #184	; 0xb8
10009e92:	f7fd fcf7 	bl	10007884 <__sprint_r>
10009e96:	2800      	cmp	r0, #0
10009e98:	d001      	beq.n	10009e9e <_vfprintf_r+0x1812>
10009e9a:	f7ff f874 	bl	10008f86 <_vfprintf_r+0x8fa>
10009e9e:	af31      	add	r7, sp, #196	; 0xc4
10009ea0:	f7ff f995 	bl	100091ce <_vfprintf_r+0xb42>
10009ea4:	fffffbff 	.word	0xfffffbff
10009ea8:	1000e6e0 	.word	0x1000e6e0
10009eac:	1000eab4 	.word	0x1000eab4
10009eb0:	9907      	ldr	r1, [sp, #28]
10009eb2:	9806      	ldr	r0, [sp, #24]
10009eb4:	aa2e      	add	r2, sp, #184	; 0xb8
10009eb6:	f7fd fce5 	bl	10007884 <__sprint_r>
10009eba:	2800      	cmp	r0, #0
10009ebc:	d001      	beq.n	10009ec2 <_vfprintf_r+0x1836>
10009ebe:	f7ff f862 	bl	10008f86 <_vfprintf_r+0x8fa>
10009ec2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
10009ec4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009ec6:	af31      	add	r7, sp, #196	; 0xc4
10009ec8:	f7ff f9aa 	bl	10009220 <_vfprintf_r+0xb94>
10009ecc:	464a      	mov	r2, r9
10009ece:	ab20      	add	r3, sp, #128	; 0x80
10009ed0:	7edb      	ldrb	r3, [r3, #27]
10009ed2:	9208      	str	r2, [sp, #32]
10009ed4:	940f      	str	r4, [sp, #60]	; 0x3c
10009ed6:	f7fe fd82 	bl	100089de <_vfprintf_r+0x352>
10009eda:	9907      	ldr	r1, [sp, #28]
10009edc:	9806      	ldr	r0, [sp, #24]
10009ede:	aa2e      	add	r2, sp, #184	; 0xb8
10009ee0:	f7fd fcd0 	bl	10007884 <__sprint_r>
10009ee4:	2800      	cmp	r0, #0
10009ee6:	d001      	beq.n	10009eec <_vfprintf_r+0x1860>
10009ee8:	f7ff f84d 	bl	10008f86 <_vfprintf_r+0x8fa>
10009eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009eee:	9e28      	ldr	r6, [sp, #160]	; 0xa0
10009ef0:	af31      	add	r7, sp, #196	; 0xc4
10009ef2:	1b9e      	subs	r6, r3, r6
10009ef4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009ef6:	f7ff f9aa 	bl	1000924e <_vfprintf_r+0xbc2>
10009efa:	2710      	movs	r7, #16
10009efc:	4daa      	ldr	r5, [pc, #680]	; (1000a1a8 <_vfprintf_r+0x1b1c>)
10009efe:	424c      	negs	r4, r1
10009f00:	3110      	adds	r1, #16
10009f02:	db04      	blt.n	10009f0e <_vfprintf_r+0x1882>
10009f04:	e06d      	b.n	10009fe2 <_vfprintf_r+0x1956>
10009f06:	3008      	adds	r0, #8
10009f08:	3c10      	subs	r4, #16
10009f0a:	2c10      	cmp	r4, #16
10009f0c:	dd69      	ble.n	10009fe2 <_vfprintf_r+0x1956>
10009f0e:	3310      	adds	r3, #16
10009f10:	3201      	adds	r2, #1
10009f12:	6005      	str	r5, [r0, #0]
10009f14:	6047      	str	r7, [r0, #4]
10009f16:	9330      	str	r3, [sp, #192]	; 0xc0
10009f18:	922f      	str	r2, [sp, #188]	; 0xbc
10009f1a:	2a07      	cmp	r2, #7
10009f1c:	ddf3      	ble.n	10009f06 <_vfprintf_r+0x187a>
10009f1e:	9907      	ldr	r1, [sp, #28]
10009f20:	9806      	ldr	r0, [sp, #24]
10009f22:	aa2e      	add	r2, sp, #184	; 0xb8
10009f24:	f7fd fcae 	bl	10007884 <__sprint_r>
10009f28:	2800      	cmp	r0, #0
10009f2a:	d001      	beq.n	10009f30 <_vfprintf_r+0x18a4>
10009f2c:	f7ff f82b 	bl	10008f86 <_vfprintf_r+0x8fa>
10009f30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10009f32:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
10009f34:	a831      	add	r0, sp, #196	; 0xc4
10009f36:	e7e7      	b.n	10009f08 <_vfprintf_r+0x187c>
10009f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10009f3a:	07db      	lsls	r3, r3, #31
10009f3c:	d407      	bmi.n	10009f4e <_vfprintf_r+0x18c2>
10009f3e:	4643      	mov	r3, r8
10009f40:	899b      	ldrh	r3, [r3, #12]
10009f42:	059b      	lsls	r3, r3, #22
10009f44:	d403      	bmi.n	10009f4e <_vfprintf_r+0x18c2>
10009f46:	4643      	mov	r3, r8
10009f48:	6d98      	ldr	r0, [r3, #88]	; 0x58
10009f4a:	f003 f988 	bl	1000d25e <__retarget_lock_release_recursive>
10009f4e:	2301      	movs	r3, #1
10009f50:	425b      	negs	r3, r3
10009f52:	9309      	str	r3, [sp, #36]	; 0x24
10009f54:	f7ff f82e 	bl	10008fb4 <_vfprintf_r+0x928>
10009f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009f5c:	4694      	mov	ip, r2
10009f5e:	2267      	movs	r2, #103	; 0x67
10009f60:	4690      	mov	r8, r2
10009f62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009f64:	4463      	add	r3, ip
10009f66:	930b      	str	r3, [sp, #44]	; 0x2c
10009f68:	2a00      	cmp	r2, #0
10009f6a:	dc00      	bgt.n	10009f6e <_vfprintf_r+0x18e2>
10009f6c:	e0c8      	b.n	1000a100 <_vfprintf_r+0x1a74>
10009f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009f70:	055b      	lsls	r3, r3, #21
10009f72:	d500      	bpl.n	10009f76 <_vfprintf_r+0x18ea>
10009f74:	e096      	b.n	1000a0a4 <_vfprintf_r+0x1a18>
10009f76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009f78:	43d3      	mvns	r3, r2
10009f7a:	17db      	asrs	r3, r3, #31
10009f7c:	401a      	ands	r2, r3
10009f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10009f80:	9208      	str	r2, [sp, #32]
10009f82:	469b      	mov	fp, r3
10009f84:	e770      	b.n	10009e68 <_vfprintf_r+0x17dc>
10009f86:	2301      	movs	r3, #1
10009f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009f8a:	4013      	ands	r3, r2
10009f8c:	464a      	mov	r2, r9
10009f8e:	4313      	orrs	r3, r2
10009f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009f92:	2a00      	cmp	r2, #0
10009f94:	dc00      	bgt.n	10009f98 <_vfprintf_r+0x190c>
10009f96:	e0c3      	b.n	1000a120 <_vfprintf_r+0x1a94>
10009f98:	2b00      	cmp	r3, #0
10009f9a:	d000      	beq.n	10009f9e <_vfprintf_r+0x1912>
10009f9c:	e0b7      	b.n	1000a10e <_vfprintf_r+0x1a82>
10009f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009fa0:	930b      	str	r3, [sp, #44]	; 0x2c
10009fa2:	2366      	movs	r3, #102	; 0x66
10009fa4:	4698      	mov	r8, r3
10009fa6:	e7e2      	b.n	10009f6e <_vfprintf_r+0x18e2>
10009fa8:	2347      	movs	r3, #71	; 0x47
10009faa:	1974      	adds	r4, r6, r5
10009fac:	469b      	mov	fp, r3
10009fae:	e533      	b.n	10009a18 <_vfprintf_r+0x138c>
10009fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009fb2:	9908      	ldr	r1, [sp, #32]
10009fb4:	932c      	str	r3, [sp, #176]	; 0xb0
10009fb6:	465b      	mov	r3, fp
10009fb8:	3b01      	subs	r3, #1
10009fba:	781a      	ldrb	r2, [r3, #0]
10009fbc:	7bc9      	ldrb	r1, [r1, #15]
10009fbe:	4291      	cmp	r1, r2
10009fc0:	d107      	bne.n	10009fd2 <_vfprintf_r+0x1946>
10009fc2:	2030      	movs	r0, #48	; 0x30
10009fc4:	7018      	strb	r0, [r3, #0]
10009fc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10009fc8:	3b01      	subs	r3, #1
10009fca:	932c      	str	r3, [sp, #176]	; 0xb0
10009fcc:	781a      	ldrb	r2, [r3, #0]
10009fce:	4291      	cmp	r1, r2
10009fd0:	d0f8      	beq.n	10009fc4 <_vfprintf_r+0x1938>
10009fd2:	2a39      	cmp	r2, #57	; 0x39
10009fd4:	d100      	bne.n	10009fd8 <_vfprintf_r+0x194c>
10009fd6:	e0ae      	b.n	1000a136 <_vfprintf_r+0x1aaa>
10009fd8:	3201      	adds	r2, #1
10009fda:	b2d2      	uxtb	r2, r2
10009fdc:	701a      	strb	r2, [r3, #0]
10009fde:	f7ff fc04 	bl	100097ea <_vfprintf_r+0x115e>
10009fe2:	191b      	adds	r3, r3, r4
10009fe4:	3201      	adds	r2, #1
10009fe6:	6005      	str	r5, [r0, #0]
10009fe8:	6044      	str	r4, [r0, #4]
10009fea:	9330      	str	r3, [sp, #192]	; 0xc0
10009fec:	922f      	str	r2, [sp, #188]	; 0xbc
10009fee:	2a07      	cmp	r2, #7
10009ff0:	dc01      	bgt.n	10009ff6 <_vfprintf_r+0x196a>
10009ff2:	f7ff fa13 	bl	1000941c <_vfprintf_r+0xd90>
10009ff6:	9907      	ldr	r1, [sp, #28]
10009ff8:	9806      	ldr	r0, [sp, #24]
10009ffa:	aa2e      	add	r2, sp, #184	; 0xb8
10009ffc:	f7fd fc42 	bl	10007884 <__sprint_r>
1000a000:	2800      	cmp	r0, #0
1000a002:	d001      	beq.n	1000a008 <_vfprintf_r+0x197c>
1000a004:	f7fe ffbf 	bl	10008f86 <_vfprintf_r+0x8fa>
1000a008:	9b30      	ldr	r3, [sp, #192]	; 0xc0
1000a00a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
1000a00c:	a831      	add	r0, sp, #196	; 0xc4
1000a00e:	e4a2      	b.n	10009956 <_vfprintf_r+0x12ca>
1000a010:	a920      	add	r1, sp, #128	; 0x80
1000a012:	232a      	movs	r3, #42	; 0x2a
1000a014:	468c      	mov	ip, r1
1000a016:	4463      	add	r3, ip
1000a018:	2a00      	cmp	r2, #0
1000a01a:	d106      	bne.n	1000a02a <_vfprintf_r+0x199e>
1000a01c:	000a      	movs	r2, r1
1000a01e:	212a      	movs	r1, #42	; 0x2a
1000a020:	2330      	movs	r3, #48	; 0x30
1000a022:	1852      	adds	r2, r2, r1
1000a024:	7013      	strb	r3, [r2, #0]
1000a026:	3b05      	subs	r3, #5
1000a028:	4463      	add	r3, ip
1000a02a:	4658      	mov	r0, fp
1000a02c:	3030      	adds	r0, #48	; 0x30
1000a02e:	7018      	strb	r0, [r3, #0]
1000a030:	aa2a      	add	r2, sp, #168	; 0xa8
1000a032:	3301      	adds	r3, #1
1000a034:	1a9b      	subs	r3, r3, r2
1000a036:	931e      	str	r3, [sp, #120]	; 0x78
1000a038:	e56b      	b.n	10009b12 <_vfprintf_r+0x1486>
1000a03a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a03c:	07db      	lsls	r3, r3, #31
1000a03e:	d400      	bmi.n	1000a042 <_vfprintf_r+0x19b6>
1000a040:	e575      	b.n	10009b2e <_vfprintf_r+0x14a2>
1000a042:	e56f      	b.n	10009b24 <_vfprintf_r+0x1498>
1000a044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000a046:	9714      	str	r7, [sp, #80]	; 0x50
1000a048:	4657      	mov	r7, sl
1000a04a:	469a      	mov	sl, r3
1000a04c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a04e:	4642      	mov	r2, r8
1000a050:	4698      	mov	r8, r3
1000a052:	464b      	mov	r3, r9
1000a054:	46d9      	mov	r9, fp
1000a056:	46b3      	mov	fp, r6
1000a058:	001e      	movs	r6, r3
1000a05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a05c:	9215      	str	r2, [sp, #84]	; 0x54
1000a05e:	3b01      	subs	r3, #1
1000a060:	1a9b      	subs	r3, r3, r2
1000a062:	9313      	str	r3, [sp, #76]	; 0x4c
1000a064:	f7ff fb95 	bl	10009792 <_vfprintf_r+0x1106>
1000a068:	464b      	mov	r3, r9
1000a06a:	2b00      	cmp	r3, #0
1000a06c:	d001      	beq.n	1000a072 <_vfprintf_r+0x19e6>
1000a06e:	f7ff fa2c 	bl	100094ca <_vfprintf_r+0xe3e>
1000a072:	3301      	adds	r3, #1
1000a074:	4699      	mov	r9, r3
1000a076:	f7ff fa28 	bl	100094ca <_vfprintf_r+0xe3e>
1000a07a:	2306      	movs	r3, #6
1000a07c:	4699      	mov	r9, r3
1000a07e:	f7ff fa24 	bl	100094ca <_vfprintf_r+0xe3e>
1000a082:	9b07      	ldr	r3, [sp, #28]
1000a084:	4698      	mov	r8, r3
1000a086:	f7fe ff86 	bl	10008f96 <_vfprintf_r+0x90a>
1000a08a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000a08c:	2b00      	cmp	r3, #0
1000a08e:	db6a      	blt.n	1000a166 <_vfprintf_r+0x1ada>
1000a090:	ab20      	add	r3, sp, #128	; 0x80
1000a092:	7edb      	ldrb	r3, [r3, #27]
1000a094:	4642      	mov	r2, r8
1000a096:	2a47      	cmp	r2, #71	; 0x47
1000a098:	dd62      	ble.n	1000a160 <_vfprintf_r+0x1ad4>
1000a09a:	4e44      	ldr	r6, [pc, #272]	; (1000a1ac <_vfprintf_r+0x1b20>)
1000a09c:	f7fe fc96 	bl	100089cc <_vfprintf_r+0x340>
1000a0a0:	2367      	movs	r3, #103	; 0x67
1000a0a2:	4698      	mov	r8, r3
1000a0a4:	991a      	ldr	r1, [sp, #104]	; 0x68
1000a0a6:	780b      	ldrb	r3, [r1, #0]
1000a0a8:	2bff      	cmp	r3, #255	; 0xff
1000a0aa:	d079      	beq.n	1000a1a0 <_vfprintf_r+0x1b14>
1000a0ac:	2200      	movs	r2, #0
1000a0ae:	9218      	str	r2, [sp, #96]	; 0x60
1000a0b0:	9214      	str	r2, [sp, #80]	; 0x50
1000a0b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a0b4:	e005      	b.n	1000a0c2 <_vfprintf_r+0x1a36>
1000a0b6:	9814      	ldr	r0, [sp, #80]	; 0x50
1000a0b8:	3101      	adds	r1, #1
1000a0ba:	3001      	adds	r0, #1
1000a0bc:	9014      	str	r0, [sp, #80]	; 0x50
1000a0be:	2bff      	cmp	r3, #255	; 0xff
1000a0c0:	d00a      	beq.n	1000a0d8 <_vfprintf_r+0x1a4c>
1000a0c2:	4293      	cmp	r3, r2
1000a0c4:	da08      	bge.n	1000a0d8 <_vfprintf_r+0x1a4c>
1000a0c6:	1ad2      	subs	r2, r2, r3
1000a0c8:	784b      	ldrb	r3, [r1, #1]
1000a0ca:	2b00      	cmp	r3, #0
1000a0cc:	d1f3      	bne.n	1000a0b6 <_vfprintf_r+0x1a2a>
1000a0ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a0d0:	3301      	adds	r3, #1
1000a0d2:	9318      	str	r3, [sp, #96]	; 0x60
1000a0d4:	780b      	ldrb	r3, [r1, #0]
1000a0d6:	e7f2      	b.n	1000a0be <_vfprintf_r+0x1a32>
1000a0d8:	9213      	str	r2, [sp, #76]	; 0x4c
1000a0da:	911a      	str	r1, [sp, #104]	; 0x68
1000a0dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000a0de:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000a0e0:	4694      	mov	ip, r2
1000a0e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000a0e4:	4463      	add	r3, ip
1000a0e6:	4353      	muls	r3, r2
1000a0e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000a0ea:	4694      	mov	ip, r2
1000a0ec:	449c      	add	ip, r3
1000a0ee:	4662      	mov	r2, ip
1000a0f0:	43d3      	mvns	r3, r2
1000a0f2:	17db      	asrs	r3, r3, #31
1000a0f4:	920b      	str	r2, [sp, #44]	; 0x2c
1000a0f6:	401a      	ands	r2, r3
1000a0f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a0fa:	9208      	str	r2, [sp, #32]
1000a0fc:	469b      	mov	fp, r3
1000a0fe:	e527      	b.n	10009b50 <_vfprintf_r+0x14c4>
1000a100:	1a9b      	subs	r3, r3, r2
1000a102:	1c5a      	adds	r2, r3, #1
1000a104:	920b      	str	r2, [sp, #44]	; 0x2c
1000a106:	e737      	b.n	10009f78 <_vfprintf_r+0x18ec>
1000a108:	4827      	ldr	r0, [pc, #156]	; (1000a1a8 <_vfprintf_r+0x1b1c>)
1000a10a:	9011      	str	r0, [sp, #68]	; 0x44
1000a10c:	e644      	b.n	10009d98 <_vfprintf_r+0x170c>
1000a10e:	0013      	movs	r3, r2
1000a110:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a112:	4694      	mov	ip, r2
1000a114:	4463      	add	r3, ip
1000a116:	444b      	add	r3, r9
1000a118:	930b      	str	r3, [sp, #44]	; 0x2c
1000a11a:	2366      	movs	r3, #102	; 0x66
1000a11c:	4698      	mov	r8, r3
1000a11e:	e726      	b.n	10009f6e <_vfprintf_r+0x18e2>
1000a120:	2b00      	cmp	r3, #0
1000a122:	d10d      	bne.n	1000a140 <_vfprintf_r+0x1ab4>
1000a124:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a126:	469b      	mov	fp, r3
1000a128:	2301      	movs	r3, #1
1000a12a:	9308      	str	r3, [sp, #32]
1000a12c:	3365      	adds	r3, #101	; 0x65
1000a12e:	4698      	mov	r8, r3
1000a130:	3b65      	subs	r3, #101	; 0x65
1000a132:	930b      	str	r3, [sp, #44]	; 0x2c
1000a134:	e698      	b.n	10009e68 <_vfprintf_r+0x17dc>
1000a136:	9a08      	ldr	r2, [sp, #32]
1000a138:	7a92      	ldrb	r2, [r2, #10]
1000a13a:	701a      	strb	r2, [r3, #0]
1000a13c:	f7ff fb55 	bl	100097ea <_vfprintf_r+0x115e>
1000a140:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000a142:	3301      	adds	r3, #1
1000a144:	001a      	movs	r2, r3
1000a146:	444a      	add	r2, r9
1000a148:	43d3      	mvns	r3, r2
1000a14a:	17db      	asrs	r3, r3, #31
1000a14c:	920b      	str	r2, [sp, #44]	; 0x2c
1000a14e:	401a      	ands	r2, r3
1000a150:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a152:	9208      	str	r2, [sp, #32]
1000a154:	469b      	mov	fp, r3
1000a156:	2366      	movs	r3, #102	; 0x66
1000a158:	4698      	mov	r8, r3
1000a15a:	e685      	b.n	10009e68 <_vfprintf_r+0x17dc>
1000a15c:	2370      	movs	r3, #112	; 0x70
1000a15e:	e485      	b.n	10009a6c <_vfprintf_r+0x13e0>
1000a160:	4e13      	ldr	r6, [pc, #76]	; (1000a1b0 <_vfprintf_r+0x1b24>)
1000a162:	f7fe fc33 	bl	100089cc <_vfprintf_r+0x340>
1000a166:	232d      	movs	r3, #45	; 0x2d
1000a168:	aa20      	add	r2, sp, #128	; 0x80
1000a16a:	76d3      	strb	r3, [r2, #27]
1000a16c:	e792      	b.n	1000a094 <_vfprintf_r+0x1a08>
1000a16e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000a170:	ca08      	ldmia	r2!, {r3}
1000a172:	4699      	mov	r9, r3
1000a174:	2b00      	cmp	r3, #0
1000a176:	da02      	bge.n	1000a17e <_vfprintf_r+0x1af2>
1000a178:	2301      	movs	r3, #1
1000a17a:	425b      	negs	r3, r3
1000a17c:	4699      	mov	r9, r3
1000a17e:	7863      	ldrb	r3, [r4, #1]
1000a180:	920f      	str	r2, [sp, #60]	; 0x3c
1000a182:	000c      	movs	r4, r1
1000a184:	f7fe faeb 	bl	1000875e <_vfprintf_r+0xd2>
1000a188:	2302      	movs	r3, #2
1000a18a:	931e      	str	r3, [sp, #120]	; 0x78
1000a18c:	e4c1      	b.n	10009b12 <_vfprintf_r+0x1486>
1000a18e:	9b07      	ldr	r3, [sp, #28]
1000a190:	899a      	ldrh	r2, [r3, #12]
1000a192:	4698      	mov	r8, r3
1000a194:	2340      	movs	r3, #64	; 0x40
1000a196:	4313      	orrs	r3, r2
1000a198:	4642      	mov	r2, r8
1000a19a:	8193      	strh	r3, [r2, #12]
1000a19c:	f7fe fefb 	bl	10008f96 <_vfprintf_r+0x90a>
1000a1a0:	2300      	movs	r3, #0
1000a1a2:	9318      	str	r3, [sp, #96]	; 0x60
1000a1a4:	9314      	str	r3, [sp, #80]	; 0x50
1000a1a6:	e799      	b.n	1000a0dc <_vfprintf_r+0x1a50>
1000a1a8:	1000eab4 	.word	0x1000eab4
1000a1ac:	1000e8a8 	.word	0x1000e8a8
1000a1b0:	1000e8a4 	.word	0x1000e8a4

1000a1b4 <__sbprintf>:
1000a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1b6:	001f      	movs	r7, r3
1000a1b8:	2302      	movs	r3, #2
1000a1ba:	4c1f      	ldr	r4, [pc, #124]	; (1000a238 <__sbprintf+0x84>)
1000a1bc:	0015      	movs	r5, r2
1000a1be:	44a5      	add	sp, r4
1000a1c0:	000c      	movs	r4, r1
1000a1c2:	8989      	ldrh	r1, [r1, #12]
1000a1c4:	466a      	mov	r2, sp
1000a1c6:	4399      	bics	r1, r3
1000a1c8:	466b      	mov	r3, sp
1000a1ca:	8199      	strh	r1, [r3, #12]
1000a1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000a1ce:	2180      	movs	r1, #128	; 0x80
1000a1d0:	9319      	str	r3, [sp, #100]	; 0x64
1000a1d2:	89e3      	ldrh	r3, [r4, #14]
1000a1d4:	0006      	movs	r6, r0
1000a1d6:	81d3      	strh	r3, [r2, #14]
1000a1d8:	69e3      	ldr	r3, [r4, #28]
1000a1da:	00c9      	lsls	r1, r1, #3
1000a1dc:	9307      	str	r3, [sp, #28]
1000a1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000a1e0:	a816      	add	r0, sp, #88	; 0x58
1000a1e2:	9309      	str	r3, [sp, #36]	; 0x24
1000a1e4:	ab1a      	add	r3, sp, #104	; 0x68
1000a1e6:	9300      	str	r3, [sp, #0]
1000a1e8:	9304      	str	r3, [sp, #16]
1000a1ea:	2300      	movs	r3, #0
1000a1ec:	9102      	str	r1, [sp, #8]
1000a1ee:	9105      	str	r1, [sp, #20]
1000a1f0:	9306      	str	r3, [sp, #24]
1000a1f2:	f003 f820 	bl	1000d236 <__retarget_lock_init_recursive>
1000a1f6:	002a      	movs	r2, r5
1000a1f8:	003b      	movs	r3, r7
1000a1fa:	4669      	mov	r1, sp
1000a1fc:	0030      	movs	r0, r6
1000a1fe:	f7fe fa45 	bl	1000868c <_vfprintf_r>
1000a202:	1e05      	subs	r5, r0, #0
1000a204:	da0e      	bge.n	1000a224 <__sbprintf+0x70>
1000a206:	466b      	mov	r3, sp
1000a208:	899b      	ldrh	r3, [r3, #12]
1000a20a:	065b      	lsls	r3, r3, #25
1000a20c:	d503      	bpl.n	1000a216 <__sbprintf+0x62>
1000a20e:	2240      	movs	r2, #64	; 0x40
1000a210:	89a3      	ldrh	r3, [r4, #12]
1000a212:	4313      	orrs	r3, r2
1000a214:	81a3      	strh	r3, [r4, #12]
1000a216:	9816      	ldr	r0, [sp, #88]	; 0x58
1000a218:	f003 f816 	bl	1000d248 <__retarget_lock_close_recursive>
1000a21c:	0028      	movs	r0, r5
1000a21e:	4b07      	ldr	r3, [pc, #28]	; (1000a23c <__sbprintf+0x88>)
1000a220:	449d      	add	sp, r3
1000a222:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a224:	4669      	mov	r1, sp
1000a226:	0030      	movs	r0, r6
1000a228:	f001 f97c 	bl	1000b524 <_fflush_r>
1000a22c:	2800      	cmp	r0, #0
1000a22e:	d0ea      	beq.n	1000a206 <__sbprintf+0x52>
1000a230:	2501      	movs	r5, #1
1000a232:	426d      	negs	r5, r5
1000a234:	e7e7      	b.n	1000a206 <__sbprintf+0x52>
1000a236:	46c0      	nop			; (mov r8, r8)
1000a238:	fffffb94 	.word	0xfffffb94
1000a23c:	0000046c 	.word	0x0000046c

1000a240 <__swsetup_r>:
1000a240:	4b32      	ldr	r3, [pc, #200]	; (1000a30c <__swsetup_r+0xcc>)
1000a242:	b570      	push	{r4, r5, r6, lr}
1000a244:	0005      	movs	r5, r0
1000a246:	6818      	ldr	r0, [r3, #0]
1000a248:	000c      	movs	r4, r1
1000a24a:	2800      	cmp	r0, #0
1000a24c:	d002      	beq.n	1000a254 <__swsetup_r+0x14>
1000a24e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a250:	2b00      	cmp	r3, #0
1000a252:	d021      	beq.n	1000a298 <__swsetup_r+0x58>
1000a254:	220c      	movs	r2, #12
1000a256:	5ea3      	ldrsh	r3, [r4, r2]
1000a258:	071a      	lsls	r2, r3, #28
1000a25a:	d523      	bpl.n	1000a2a4 <__swsetup_r+0x64>
1000a25c:	6922      	ldr	r2, [r4, #16]
1000a25e:	2a00      	cmp	r2, #0
1000a260:	d02a      	beq.n	1000a2b8 <__swsetup_r+0x78>
1000a262:	07d9      	lsls	r1, r3, #31
1000a264:	d508      	bpl.n	1000a278 <__swsetup_r+0x38>
1000a266:	2100      	movs	r1, #0
1000a268:	60a1      	str	r1, [r4, #8]
1000a26a:	6961      	ldr	r1, [r4, #20]
1000a26c:	2000      	movs	r0, #0
1000a26e:	4249      	negs	r1, r1
1000a270:	61a1      	str	r1, [r4, #24]
1000a272:	2a00      	cmp	r2, #0
1000a274:	d008      	beq.n	1000a288 <__swsetup_r+0x48>
1000a276:	bd70      	pop	{r4, r5, r6, pc}
1000a278:	2100      	movs	r1, #0
1000a27a:	0798      	lsls	r0, r3, #30
1000a27c:	d400      	bmi.n	1000a280 <__swsetup_r+0x40>
1000a27e:	6961      	ldr	r1, [r4, #20]
1000a280:	2000      	movs	r0, #0
1000a282:	60a1      	str	r1, [r4, #8]
1000a284:	2a00      	cmp	r2, #0
1000a286:	d1f6      	bne.n	1000a276 <__swsetup_r+0x36>
1000a288:	061a      	lsls	r2, r3, #24
1000a28a:	d5f4      	bpl.n	1000a276 <__swsetup_r+0x36>
1000a28c:	2240      	movs	r2, #64	; 0x40
1000a28e:	4313      	orrs	r3, r2
1000a290:	2001      	movs	r0, #1
1000a292:	81a3      	strh	r3, [r4, #12]
1000a294:	4240      	negs	r0, r0
1000a296:	e7ee      	b.n	1000a276 <__swsetup_r+0x36>
1000a298:	f001 f982 	bl	1000b5a0 <__sinit>
1000a29c:	220c      	movs	r2, #12
1000a29e:	5ea3      	ldrsh	r3, [r4, r2]
1000a2a0:	071a      	lsls	r2, r3, #28
1000a2a2:	d4db      	bmi.n	1000a25c <__swsetup_r+0x1c>
1000a2a4:	06da      	lsls	r2, r3, #27
1000a2a6:	d52b      	bpl.n	1000a300 <__swsetup_r+0xc0>
1000a2a8:	075a      	lsls	r2, r3, #29
1000a2aa:	d414      	bmi.n	1000a2d6 <__swsetup_r+0x96>
1000a2ac:	6922      	ldr	r2, [r4, #16]
1000a2ae:	2108      	movs	r1, #8
1000a2b0:	430b      	orrs	r3, r1
1000a2b2:	81a3      	strh	r3, [r4, #12]
1000a2b4:	2a00      	cmp	r2, #0
1000a2b6:	d1d4      	bne.n	1000a262 <__swsetup_r+0x22>
1000a2b8:	21a0      	movs	r1, #160	; 0xa0
1000a2ba:	2080      	movs	r0, #128	; 0x80
1000a2bc:	0089      	lsls	r1, r1, #2
1000a2be:	0080      	lsls	r0, r0, #2
1000a2c0:	4019      	ands	r1, r3
1000a2c2:	4281      	cmp	r1, r0
1000a2c4:	d0cd      	beq.n	1000a262 <__swsetup_r+0x22>
1000a2c6:	0021      	movs	r1, r4
1000a2c8:	0028      	movs	r0, r5
1000a2ca:	f001 fce9 	bl	1000bca0 <__smakebuf_r>
1000a2ce:	220c      	movs	r2, #12
1000a2d0:	5ea3      	ldrsh	r3, [r4, r2]
1000a2d2:	6922      	ldr	r2, [r4, #16]
1000a2d4:	e7c5      	b.n	1000a262 <__swsetup_r+0x22>
1000a2d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000a2d8:	2900      	cmp	r1, #0
1000a2da:	d00a      	beq.n	1000a2f2 <__swsetup_r+0xb2>
1000a2dc:	0022      	movs	r2, r4
1000a2de:	3240      	adds	r2, #64	; 0x40
1000a2e0:	4291      	cmp	r1, r2
1000a2e2:	d004      	beq.n	1000a2ee <__swsetup_r+0xae>
1000a2e4:	0028      	movs	r0, r5
1000a2e6:	f001 fa41 	bl	1000b76c <_free_r>
1000a2ea:	220c      	movs	r2, #12
1000a2ec:	5ea3      	ldrsh	r3, [r4, r2]
1000a2ee:	2200      	movs	r2, #0
1000a2f0:	6322      	str	r2, [r4, #48]	; 0x30
1000a2f2:	2224      	movs	r2, #36	; 0x24
1000a2f4:	4393      	bics	r3, r2
1000a2f6:	2200      	movs	r2, #0
1000a2f8:	6062      	str	r2, [r4, #4]
1000a2fa:	6922      	ldr	r2, [r4, #16]
1000a2fc:	6022      	str	r2, [r4, #0]
1000a2fe:	e7d6      	b.n	1000a2ae <__swsetup_r+0x6e>
1000a300:	2209      	movs	r2, #9
1000a302:	602a      	str	r2, [r5, #0]
1000a304:	3237      	adds	r2, #55	; 0x37
1000a306:	4313      	orrs	r3, r2
1000a308:	e7c2      	b.n	1000a290 <__swsetup_r+0x50>
1000a30a:	46c0      	nop			; (mov r8, r8)
1000a30c:	200007e4 	.word	0x200007e4

1000a310 <abort>:
1000a310:	2006      	movs	r0, #6
1000a312:	b510      	push	{r4, lr}
1000a314:	f002 fbb0 	bl	1000ca78 <raise>
1000a318:	2001      	movs	r0, #1
1000a31a:	f7f9 ffa5 	bl	10004268 <_exit>
1000a31e:	46c0      	nop			; (mov r8, r8)

1000a320 <quorem>:
1000a320:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a322:	4645      	mov	r5, r8
1000a324:	46de      	mov	lr, fp
1000a326:	4657      	mov	r7, sl
1000a328:	464e      	mov	r6, r9
1000a32a:	b5e0      	push	{r5, r6, r7, lr}
1000a32c:	6903      	ldr	r3, [r0, #16]
1000a32e:	690d      	ldr	r5, [r1, #16]
1000a330:	b085      	sub	sp, #20
1000a332:	4680      	mov	r8, r0
1000a334:	000a      	movs	r2, r1
1000a336:	9101      	str	r1, [sp, #4]
1000a338:	42ab      	cmp	r3, r5
1000a33a:	da00      	bge.n	1000a33e <quorem+0x1e>
1000a33c:	e098      	b.n	1000a470 <quorem+0x150>
1000a33e:	0007      	movs	r7, r0
1000a340:	3d01      	subs	r5, #1
1000a342:	3214      	adds	r2, #20
1000a344:	00ab      	lsls	r3, r5, #2
1000a346:	3714      	adds	r7, #20
1000a348:	18d6      	adds	r6, r2, r3
1000a34a:	18fb      	adds	r3, r7, r3
1000a34c:	9303      	str	r3, [sp, #12]
1000a34e:	681b      	ldr	r3, [r3, #0]
1000a350:	9202      	str	r2, [sp, #8]
1000a352:	469a      	mov	sl, r3
1000a354:	6833      	ldr	r3, [r6, #0]
1000a356:	4650      	mov	r0, sl
1000a358:	3301      	adds	r3, #1
1000a35a:	0019      	movs	r1, r3
1000a35c:	4699      	mov	r9, r3
1000a35e:	f7f5 ff37 	bl	100001d0 <__udivsi3>
1000a362:	0004      	movs	r4, r0
1000a364:	45ca      	cmp	sl, r9
1000a366:	d343      	bcc.n	1000a3f0 <quorem+0xd0>
1000a368:	2300      	movs	r3, #0
1000a36a:	46b9      	mov	r9, r7
1000a36c:	469b      	mov	fp, r3
1000a36e:	46b4      	mov	ip, r6
1000a370:	001e      	movs	r6, r3
1000a372:	003b      	movs	r3, r7
1000a374:	9a02      	ldr	r2, [sp, #8]
1000a376:	0027      	movs	r7, r4
1000a378:	0010      	movs	r0, r2
1000a37a:	464c      	mov	r4, r9
1000a37c:	469a      	mov	sl, r3
1000a37e:	46a9      	mov	r9, r5
1000a380:	465d      	mov	r5, fp
1000a382:	c804      	ldmia	r0!, {r2}
1000a384:	0411      	lsls	r1, r2, #16
1000a386:	0c09      	lsrs	r1, r1, #16
1000a388:	4379      	muls	r1, r7
1000a38a:	0c12      	lsrs	r2, r2, #16
1000a38c:	437a      	muls	r2, r7
1000a38e:	1989      	adds	r1, r1, r6
1000a390:	0c0b      	lsrs	r3, r1, #16
1000a392:	18d2      	adds	r2, r2, r3
1000a394:	6823      	ldr	r3, [r4, #0]
1000a396:	0409      	lsls	r1, r1, #16
1000a398:	469b      	mov	fp, r3
1000a39a:	041b      	lsls	r3, r3, #16
1000a39c:	0c09      	lsrs	r1, r1, #16
1000a39e:	0c1b      	lsrs	r3, r3, #16
1000a3a0:	1a5b      	subs	r3, r3, r1
1000a3a2:	4659      	mov	r1, fp
1000a3a4:	0c16      	lsrs	r6, r2, #16
1000a3a6:	0412      	lsls	r2, r2, #16
1000a3a8:	195b      	adds	r3, r3, r5
1000a3aa:	0c09      	lsrs	r1, r1, #16
1000a3ac:	0c12      	lsrs	r2, r2, #16
1000a3ae:	1a8a      	subs	r2, r1, r2
1000a3b0:	1419      	asrs	r1, r3, #16
1000a3b2:	1852      	adds	r2, r2, r1
1000a3b4:	041b      	lsls	r3, r3, #16
1000a3b6:	1415      	asrs	r5, r2, #16
1000a3b8:	0c1b      	lsrs	r3, r3, #16
1000a3ba:	0412      	lsls	r2, r2, #16
1000a3bc:	4313      	orrs	r3, r2
1000a3be:	c408      	stmia	r4!, {r3}
1000a3c0:	4584      	cmp	ip, r0
1000a3c2:	d2de      	bcs.n	1000a382 <quorem+0x62>
1000a3c4:	9a03      	ldr	r2, [sp, #12]
1000a3c6:	003c      	movs	r4, r7
1000a3c8:	6813      	ldr	r3, [r2, #0]
1000a3ca:	4666      	mov	r6, ip
1000a3cc:	464d      	mov	r5, r9
1000a3ce:	4657      	mov	r7, sl
1000a3d0:	2b00      	cmp	r3, #0
1000a3d2:	d10d      	bne.n	1000a3f0 <quorem+0xd0>
1000a3d4:	0013      	movs	r3, r2
1000a3d6:	3b04      	subs	r3, #4
1000a3d8:	4553      	cmp	r3, sl
1000a3da:	d804      	bhi.n	1000a3e6 <quorem+0xc6>
1000a3dc:	e006      	b.n	1000a3ec <quorem+0xcc>
1000a3de:	3b04      	subs	r3, #4
1000a3e0:	3d01      	subs	r5, #1
1000a3e2:	42bb      	cmp	r3, r7
1000a3e4:	d902      	bls.n	1000a3ec <quorem+0xcc>
1000a3e6:	681a      	ldr	r2, [r3, #0]
1000a3e8:	2a00      	cmp	r2, #0
1000a3ea:	d0f8      	beq.n	1000a3de <quorem+0xbe>
1000a3ec:	4643      	mov	r3, r8
1000a3ee:	611d      	str	r5, [r3, #16]
1000a3f0:	4640      	mov	r0, r8
1000a3f2:	9901      	ldr	r1, [sp, #4]
1000a3f4:	f002 f80e 	bl	1000c414 <__mcmp>
1000a3f8:	2800      	cmp	r0, #0
1000a3fa:	db26      	blt.n	1000a44a <quorem+0x12a>
1000a3fc:	2300      	movs	r3, #0
1000a3fe:	469c      	mov	ip, r3
1000a400:	0023      	movs	r3, r4
1000a402:	0039      	movs	r1, r7
1000a404:	4664      	mov	r4, ip
1000a406:	46a9      	mov	r9, r5
1000a408:	46ba      	mov	sl, r7
1000a40a:	469c      	mov	ip, r3
1000a40c:	9802      	ldr	r0, [sp, #8]
1000a40e:	c820      	ldmia	r0!, {r5}
1000a410:	680a      	ldr	r2, [r1, #0]
1000a412:	042f      	lsls	r7, r5, #16
1000a414:	0413      	lsls	r3, r2, #16
1000a416:	0c1b      	lsrs	r3, r3, #16
1000a418:	0c3f      	lsrs	r7, r7, #16
1000a41a:	1bdb      	subs	r3, r3, r7
1000a41c:	191b      	adds	r3, r3, r4
1000a41e:	0c12      	lsrs	r2, r2, #16
1000a420:	0c2c      	lsrs	r4, r5, #16
1000a422:	1b12      	subs	r2, r2, r4
1000a424:	141c      	asrs	r4, r3, #16
1000a426:	1912      	adds	r2, r2, r4
1000a428:	041b      	lsls	r3, r3, #16
1000a42a:	1414      	asrs	r4, r2, #16
1000a42c:	0c1b      	lsrs	r3, r3, #16
1000a42e:	0412      	lsls	r2, r2, #16
1000a430:	4313      	orrs	r3, r2
1000a432:	c108      	stmia	r1!, {r3}
1000a434:	4286      	cmp	r6, r0
1000a436:	d2ea      	bcs.n	1000a40e <quorem+0xee>
1000a438:	464d      	mov	r5, r9
1000a43a:	4657      	mov	r7, sl
1000a43c:	00ab      	lsls	r3, r5, #2
1000a43e:	18fb      	adds	r3, r7, r3
1000a440:	681a      	ldr	r2, [r3, #0]
1000a442:	4664      	mov	r4, ip
1000a444:	2a00      	cmp	r2, #0
1000a446:	d00c      	beq.n	1000a462 <quorem+0x142>
1000a448:	3401      	adds	r4, #1
1000a44a:	0020      	movs	r0, r4
1000a44c:	b005      	add	sp, #20
1000a44e:	bcf0      	pop	{r4, r5, r6, r7}
1000a450:	46bb      	mov	fp, r7
1000a452:	46b2      	mov	sl, r6
1000a454:	46a9      	mov	r9, r5
1000a456:	46a0      	mov	r8, r4
1000a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a45a:	681a      	ldr	r2, [r3, #0]
1000a45c:	2a00      	cmp	r2, #0
1000a45e:	d103      	bne.n	1000a468 <quorem+0x148>
1000a460:	3d01      	subs	r5, #1
1000a462:	3b04      	subs	r3, #4
1000a464:	42bb      	cmp	r3, r7
1000a466:	d8f8      	bhi.n	1000a45a <quorem+0x13a>
1000a468:	4643      	mov	r3, r8
1000a46a:	3401      	adds	r4, #1
1000a46c:	611d      	str	r5, [r3, #16]
1000a46e:	e7ec      	b.n	1000a44a <quorem+0x12a>
1000a470:	2000      	movs	r0, #0
1000a472:	e7eb      	b.n	1000a44c <quorem+0x12c>

1000a474 <_dtoa_r>:
1000a474:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a476:	464e      	mov	r6, r9
1000a478:	4645      	mov	r5, r8
1000a47a:	46de      	mov	lr, fp
1000a47c:	4657      	mov	r7, sl
1000a47e:	0014      	movs	r4, r2
1000a480:	b5e0      	push	{r5, r6, r7, lr}
1000a482:	001d      	movs	r5, r3
1000a484:	6c01      	ldr	r1, [r0, #64]	; 0x40
1000a486:	b09d      	sub	sp, #116	; 0x74
1000a488:	4681      	mov	r9, r0
1000a48a:	9402      	str	r4, [sp, #8]
1000a48c:	9503      	str	r5, [sp, #12]
1000a48e:	2900      	cmp	r1, #0
1000a490:	d009      	beq.n	1000a4a6 <_dtoa_r+0x32>
1000a492:	2301      	movs	r3, #1
1000a494:	6c42      	ldr	r2, [r0, #68]	; 0x44
1000a496:	4093      	lsls	r3, r2
1000a498:	604a      	str	r2, [r1, #4]
1000a49a:	608b      	str	r3, [r1, #8]
1000a49c:	f001 fd1a 	bl	1000bed4 <_Bfree>
1000a4a0:	2300      	movs	r3, #0
1000a4a2:	464a      	mov	r2, r9
1000a4a4:	6413      	str	r3, [r2, #64]	; 0x40
1000a4a6:	002e      	movs	r6, r5
1000a4a8:	2300      	movs	r3, #0
1000a4aa:	2d00      	cmp	r5, #0
1000a4ac:	da03      	bge.n	1000a4b6 <_dtoa_r+0x42>
1000a4ae:	006e      	lsls	r6, r5, #1
1000a4b0:	0876      	lsrs	r6, r6, #1
1000a4b2:	9603      	str	r6, [sp, #12]
1000a4b4:	3301      	adds	r3, #1
1000a4b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1000a4b8:	6013      	str	r3, [r2, #0]
1000a4ba:	0032      	movs	r2, r6
1000a4bc:	4bd2      	ldr	r3, [pc, #840]	; (1000a808 <_dtoa_r+0x394>)
1000a4be:	401a      	ands	r2, r3
1000a4c0:	429a      	cmp	r2, r3
1000a4c2:	d100      	bne.n	1000a4c6 <_dtoa_r+0x52>
1000a4c4:	e18d      	b.n	1000a7e2 <_dtoa_r+0x36e>
1000a4c6:	9a02      	ldr	r2, [sp, #8]
1000a4c8:	9b03      	ldr	r3, [sp, #12]
1000a4ca:	0010      	movs	r0, r2
1000a4cc:	0019      	movs	r1, r3
1000a4ce:	2200      	movs	r2, #0
1000a4d0:	2300      	movs	r3, #0
1000a4d2:	9004      	str	r0, [sp, #16]
1000a4d4:	9105      	str	r1, [sp, #20]
1000a4d6:	f7f7 fcad 	bl	10001e34 <__aeabi_dcmpeq>
1000a4da:	2800      	cmp	r0, #0
1000a4dc:	d012      	beq.n	1000a504 <_dtoa_r+0x90>
1000a4de:	2301      	movs	r3, #1
1000a4e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000a4e2:	6013      	str	r3, [r2, #0]
1000a4e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1000a4e6:	2b00      	cmp	r3, #0
1000a4e8:	d002      	beq.n	1000a4f0 <_dtoa_r+0x7c>
1000a4ea:	4bc8      	ldr	r3, [pc, #800]	; (1000a80c <_dtoa_r+0x398>)
1000a4ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
1000a4ee:	6013      	str	r3, [r2, #0]
1000a4f0:	4bc7      	ldr	r3, [pc, #796]	; (1000a810 <_dtoa_r+0x39c>)
1000a4f2:	9306      	str	r3, [sp, #24]
1000a4f4:	9806      	ldr	r0, [sp, #24]
1000a4f6:	b01d      	add	sp, #116	; 0x74
1000a4f8:	bcf0      	pop	{r4, r5, r6, r7}
1000a4fa:	46bb      	mov	fp, r7
1000a4fc:	46b2      	mov	sl, r6
1000a4fe:	46a9      	mov	r9, r5
1000a500:	46a0      	mov	r8, r4
1000a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a504:	ab1a      	add	r3, sp, #104	; 0x68
1000a506:	9301      	str	r3, [sp, #4]
1000a508:	ab1b      	add	r3, sp, #108	; 0x6c
1000a50a:	9300      	str	r3, [sp, #0]
1000a50c:	4648      	mov	r0, r9
1000a50e:	9a04      	ldr	r2, [sp, #16]
1000a510:	9b05      	ldr	r3, [sp, #20]
1000a512:	f002 f86f 	bl	1000c5f4 <__d2b>
1000a516:	0d33      	lsrs	r3, r6, #20
1000a518:	4683      	mov	fp, r0
1000a51a:	d000      	beq.n	1000a51e <_dtoa_r+0xaa>
1000a51c:	e19e      	b.n	1000a85c <_dtoa_r+0x3e8>
1000a51e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000a520:	9f1a      	ldr	r7, [sp, #104]	; 0x68
1000a522:	4698      	mov	r8, r3
1000a524:	4bbb      	ldr	r3, [pc, #748]	; (1000a814 <_dtoa_r+0x3a0>)
1000a526:	44b8      	add	r8, r7
1000a528:	4443      	add	r3, r8
1000a52a:	2b20      	cmp	r3, #32
1000a52c:	dc00      	bgt.n	1000a530 <_dtoa_r+0xbc>
1000a52e:	e33e      	b.n	1000abae <_dtoa_r+0x73a>
1000a530:	2240      	movs	r2, #64	; 0x40
1000a532:	1ad3      	subs	r3, r2, r3
1000a534:	409e      	lsls	r6, r3
1000a536:	4bb8      	ldr	r3, [pc, #736]	; (1000a818 <_dtoa_r+0x3a4>)
1000a538:	0030      	movs	r0, r6
1000a53a:	4443      	add	r3, r8
1000a53c:	40dc      	lsrs	r4, r3
1000a53e:	4320      	orrs	r0, r4
1000a540:	f7f7 fb58 	bl	10001bf4 <__aeabi_ui2d>
1000a544:	4646      	mov	r6, r8
1000a546:	2301      	movs	r3, #1
1000a548:	4cb4      	ldr	r4, [pc, #720]	; (1000a81c <_dtoa_r+0x3a8>)
1000a54a:	3e01      	subs	r6, #1
1000a54c:	1909      	adds	r1, r1, r4
1000a54e:	930e      	str	r3, [sp, #56]	; 0x38
1000a550:	2200      	movs	r2, #0
1000a552:	4bb3      	ldr	r3, [pc, #716]	; (1000a820 <_dtoa_r+0x3ac>)
1000a554:	f7f7 f810 	bl	10001578 <__aeabi_dsub>
1000a558:	4ab2      	ldr	r2, [pc, #712]	; (1000a824 <_dtoa_r+0x3b0>)
1000a55a:	4bb3      	ldr	r3, [pc, #716]	; (1000a828 <_dtoa_r+0x3b4>)
1000a55c:	f7f6 fde2 	bl	10001124 <__aeabi_dmul>
1000a560:	4ab2      	ldr	r2, [pc, #712]	; (1000a82c <_dtoa_r+0x3b8>)
1000a562:	4bb3      	ldr	r3, [pc, #716]	; (1000a830 <_dtoa_r+0x3bc>)
1000a564:	f7f6 f86c 	bl	10000640 <__aeabi_dadd>
1000a568:	0004      	movs	r4, r0
1000a56a:	0030      	movs	r0, r6
1000a56c:	000d      	movs	r5, r1
1000a56e:	f7f7 fb17 	bl	10001ba0 <__aeabi_i2d>
1000a572:	4ab0      	ldr	r2, [pc, #704]	; (1000a834 <_dtoa_r+0x3c0>)
1000a574:	4bb0      	ldr	r3, [pc, #704]	; (1000a838 <_dtoa_r+0x3c4>)
1000a576:	f7f6 fdd5 	bl	10001124 <__aeabi_dmul>
1000a57a:	0002      	movs	r2, r0
1000a57c:	000b      	movs	r3, r1
1000a57e:	0020      	movs	r0, r4
1000a580:	0029      	movs	r1, r5
1000a582:	f7f6 f85d 	bl	10000640 <__aeabi_dadd>
1000a586:	0004      	movs	r4, r0
1000a588:	000d      	movs	r5, r1
1000a58a:	f7f7 fdd9 	bl	10002140 <__aeabi_d2iz>
1000a58e:	2200      	movs	r2, #0
1000a590:	4682      	mov	sl, r0
1000a592:	2300      	movs	r3, #0
1000a594:	0020      	movs	r0, r4
1000a596:	0029      	movs	r1, r5
1000a598:	f7f7 fc52 	bl	10001e40 <__aeabi_dcmplt>
1000a59c:	2800      	cmp	r0, #0
1000a59e:	d00b      	beq.n	1000a5b8 <_dtoa_r+0x144>
1000a5a0:	4650      	mov	r0, sl
1000a5a2:	f7f7 fafd 	bl	10001ba0 <__aeabi_i2d>
1000a5a6:	002b      	movs	r3, r5
1000a5a8:	0022      	movs	r2, r4
1000a5aa:	f7f7 fc43 	bl	10001e34 <__aeabi_dcmpeq>
1000a5ae:	4243      	negs	r3, r0
1000a5b0:	4158      	adcs	r0, r3
1000a5b2:	4653      	mov	r3, sl
1000a5b4:	1a1b      	subs	r3, r3, r0
1000a5b6:	469a      	mov	sl, r3
1000a5b8:	1bbf      	subs	r7, r7, r6
1000a5ba:	1e7b      	subs	r3, r7, #1
1000a5bc:	4698      	mov	r8, r3
1000a5be:	4653      	mov	r3, sl
1000a5c0:	2b16      	cmp	r3, #22
1000a5c2:	d900      	bls.n	1000a5c6 <_dtoa_r+0x152>
1000a5c4:	e2c1      	b.n	1000ab4a <_dtoa_r+0x6d6>
1000a5c6:	9804      	ldr	r0, [sp, #16]
1000a5c8:	9905      	ldr	r1, [sp, #20]
1000a5ca:	4e9c      	ldr	r6, [pc, #624]	; (1000a83c <_dtoa_r+0x3c8>)
1000a5cc:	00db      	lsls	r3, r3, #3
1000a5ce:	18f3      	adds	r3, r6, r3
1000a5d0:	681a      	ldr	r2, [r3, #0]
1000a5d2:	685b      	ldr	r3, [r3, #4]
1000a5d4:	f7f7 fc34 	bl	10001e40 <__aeabi_dcmplt>
1000a5d8:	2800      	cmp	r0, #0
1000a5da:	d100      	bne.n	1000a5de <_dtoa_r+0x16a>
1000a5dc:	e1af      	b.n	1000a93e <_dtoa_r+0x4ca>
1000a5de:	2301      	movs	r3, #1
1000a5e0:	425b      	negs	r3, r3
1000a5e2:	469c      	mov	ip, r3
1000a5e4:	2300      	movs	r3, #0
1000a5e6:	44e2      	add	sl, ip
1000a5e8:	930c      	str	r3, [sp, #48]	; 0x30
1000a5ea:	2300      	movs	r3, #0
1000a5ec:	9308      	str	r3, [sp, #32]
1000a5ee:	4643      	mov	r3, r8
1000a5f0:	2b00      	cmp	r3, #0
1000a5f2:	da04      	bge.n	1000a5fe <_dtoa_r+0x18a>
1000a5f4:	2301      	movs	r3, #1
1000a5f6:	1bdb      	subs	r3, r3, r7
1000a5f8:	9308      	str	r3, [sp, #32]
1000a5fa:	2300      	movs	r3, #0
1000a5fc:	4698      	mov	r8, r3
1000a5fe:	4653      	mov	r3, sl
1000a600:	2b00      	cmp	r3, #0
1000a602:	db00      	blt.n	1000a606 <_dtoa_r+0x192>
1000a604:	e1a1      	b.n	1000a94a <_dtoa_r+0x4d6>
1000a606:	4652      	mov	r2, sl
1000a608:	9b08      	ldr	r3, [sp, #32]
1000a60a:	9209      	str	r2, [sp, #36]	; 0x24
1000a60c:	1a9b      	subs	r3, r3, r2
1000a60e:	9308      	str	r3, [sp, #32]
1000a610:	4253      	negs	r3, r2
1000a612:	930b      	str	r3, [sp, #44]	; 0x2c
1000a614:	2300      	movs	r3, #0
1000a616:	469a      	mov	sl, r3
1000a618:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a61a:	2b09      	cmp	r3, #9
1000a61c:	d900      	bls.n	1000a620 <_dtoa_r+0x1ac>
1000a61e:	e19d      	b.n	1000a95c <_dtoa_r+0x4e8>
1000a620:	2b05      	cmp	r3, #5
1000a622:	dc00      	bgt.n	1000a626 <_dtoa_r+0x1b2>
1000a624:	e2ad      	b.n	1000ab82 <_dtoa_r+0x70e>
1000a626:	3b04      	subs	r3, #4
1000a628:	2400      	movs	r4, #0
1000a62a:	9326      	str	r3, [sp, #152]	; 0x98
1000a62c:	2b03      	cmp	r3, #3
1000a62e:	d101      	bne.n	1000a634 <_dtoa_r+0x1c0>
1000a630:	f000 fc40 	bl	1000aeb4 <_dtoa_r+0xa40>
1000a634:	dc01      	bgt.n	1000a63a <_dtoa_r+0x1c6>
1000a636:	f000 fc31 	bl	1000ae9c <_dtoa_r+0xa28>
1000a63a:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a63c:	2b04      	cmp	r3, #4
1000a63e:	d101      	bne.n	1000a644 <_dtoa_r+0x1d0>
1000a640:	f000 fbe9 	bl	1000ae16 <_dtoa_r+0x9a2>
1000a644:	2305      	movs	r3, #5
1000a646:	9326      	str	r3, [sp, #152]	; 0x98
1000a648:	3b04      	subs	r3, #4
1000a64a:	930a      	str	r3, [sp, #40]	; 0x28
1000a64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a64e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000a650:	4694      	mov	ip, r2
1000a652:	4463      	add	r3, ip
1000a654:	9318      	str	r3, [sp, #96]	; 0x60
1000a656:	3301      	adds	r3, #1
1000a658:	1e1d      	subs	r5, r3, #0
1000a65a:	9307      	str	r3, [sp, #28]
1000a65c:	dc01      	bgt.n	1000a662 <_dtoa_r+0x1ee>
1000a65e:	f000 feb3 	bl	1000b3c8 <_dtoa_r+0xf54>
1000a662:	2201      	movs	r2, #1
1000a664:	2304      	movs	r3, #4
1000a666:	2d17      	cmp	r5, #23
1000a668:	dc01      	bgt.n	1000a66e <_dtoa_r+0x1fa>
1000a66a:	f000 fead 	bl	1000b3c8 <_dtoa_r+0xf54>
1000a66e:	005b      	lsls	r3, r3, #1
1000a670:	0018      	movs	r0, r3
1000a672:	3014      	adds	r0, #20
1000a674:	0011      	movs	r1, r2
1000a676:	3201      	adds	r2, #1
1000a678:	42a8      	cmp	r0, r5
1000a67a:	d9f8      	bls.n	1000a66e <_dtoa_r+0x1fa>
1000a67c:	464b      	mov	r3, r9
1000a67e:	6459      	str	r1, [r3, #68]	; 0x44
1000a680:	4648      	mov	r0, r9
1000a682:	f001 fbff 	bl	1000be84 <_Balloc>
1000a686:	9006      	str	r0, [sp, #24]
1000a688:	2800      	cmp	r0, #0
1000a68a:	d101      	bne.n	1000a690 <_dtoa_r+0x21c>
1000a68c:	f000 fe91 	bl	1000b3b2 <_dtoa_r+0xf3e>
1000a690:	464b      	mov	r3, r9
1000a692:	9a06      	ldr	r2, [sp, #24]
1000a694:	641a      	str	r2, [r3, #64]	; 0x40
1000a696:	9b07      	ldr	r3, [sp, #28]
1000a698:	2b0e      	cmp	r3, #14
1000a69a:	d872      	bhi.n	1000a782 <_dtoa_r+0x30e>
1000a69c:	2c00      	cmp	r4, #0
1000a69e:	d070      	beq.n	1000a782 <_dtoa_r+0x30e>
1000a6a0:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a6a2:	2900      	cmp	r1, #0
1000a6a4:	dc01      	bgt.n	1000a6aa <_dtoa_r+0x236>
1000a6a6:	f000 fce7 	bl	1000b078 <_dtoa_r+0xc04>
1000a6aa:	220f      	movs	r2, #15
1000a6ac:	000b      	movs	r3, r1
1000a6ae:	4e63      	ldr	r6, [pc, #396]	; (1000a83c <_dtoa_r+0x3c8>)
1000a6b0:	4013      	ands	r3, r2
1000a6b2:	00db      	lsls	r3, r3, #3
1000a6b4:	18f3      	adds	r3, r6, r3
1000a6b6:	681c      	ldr	r4, [r3, #0]
1000a6b8:	685d      	ldr	r5, [r3, #4]
1000a6ba:	110e      	asrs	r6, r1, #4
1000a6bc:	05cb      	lsls	r3, r1, #23
1000a6be:	d500      	bpl.n	1000a6c2 <_dtoa_r+0x24e>
1000a6c0:	e3de      	b.n	1000ae80 <_dtoa_r+0xa0c>
1000a6c2:	9a04      	ldr	r2, [sp, #16]
1000a6c4:	9b05      	ldr	r3, [sp, #20]
1000a6c6:	9210      	str	r2, [sp, #64]	; 0x40
1000a6c8:	9311      	str	r3, [sp, #68]	; 0x44
1000a6ca:	2302      	movs	r3, #2
1000a6cc:	930d      	str	r3, [sp, #52]	; 0x34
1000a6ce:	2e00      	cmp	r6, #0
1000a6d0:	d012      	beq.n	1000a6f8 <_dtoa_r+0x284>
1000a6d2:	4f5b      	ldr	r7, [pc, #364]	; (1000a840 <_dtoa_r+0x3cc>)
1000a6d4:	2301      	movs	r3, #1
1000a6d6:	4233      	tst	r3, r6
1000a6d8:	d00a      	beq.n	1000a6f0 <_dtoa_r+0x27c>
1000a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a6dc:	0020      	movs	r0, r4
1000a6de:	3301      	adds	r3, #1
1000a6e0:	0029      	movs	r1, r5
1000a6e2:	930d      	str	r3, [sp, #52]	; 0x34
1000a6e4:	683a      	ldr	r2, [r7, #0]
1000a6e6:	687b      	ldr	r3, [r7, #4]
1000a6e8:	f7f6 fd1c 	bl	10001124 <__aeabi_dmul>
1000a6ec:	0004      	movs	r4, r0
1000a6ee:	000d      	movs	r5, r1
1000a6f0:	1076      	asrs	r6, r6, #1
1000a6f2:	3708      	adds	r7, #8
1000a6f4:	2e00      	cmp	r6, #0
1000a6f6:	d1ed      	bne.n	1000a6d4 <_dtoa_r+0x260>
1000a6f8:	9810      	ldr	r0, [sp, #64]	; 0x40
1000a6fa:	9911      	ldr	r1, [sp, #68]	; 0x44
1000a6fc:	0022      	movs	r2, r4
1000a6fe:	002b      	movs	r3, r5
1000a700:	f7f6 fa8e 	bl	10000c20 <__aeabi_ddiv>
1000a704:	9010      	str	r0, [sp, #64]	; 0x40
1000a706:	9111      	str	r1, [sp, #68]	; 0x44
1000a708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a70a:	2b00      	cmp	r3, #0
1000a70c:	d00a      	beq.n	1000a724 <_dtoa_r+0x2b0>
1000a70e:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000a710:	9d11      	ldr	r5, [sp, #68]	; 0x44
1000a712:	2200      	movs	r2, #0
1000a714:	0020      	movs	r0, r4
1000a716:	0029      	movs	r1, r5
1000a718:	4b4a      	ldr	r3, [pc, #296]	; (1000a844 <_dtoa_r+0x3d0>)
1000a71a:	f7f7 fb91 	bl	10001e40 <__aeabi_dcmplt>
1000a71e:	2800      	cmp	r0, #0
1000a720:	d000      	beq.n	1000a724 <_dtoa_r+0x2b0>
1000a722:	e3cb      	b.n	1000aebc <_dtoa_r+0xa48>
1000a724:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a726:	f7f7 fa3b 	bl	10001ba0 <__aeabi_i2d>
1000a72a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a72e:	f7f6 fcf9 	bl	10001124 <__aeabi_dmul>
1000a732:	4b45      	ldr	r3, [pc, #276]	; (1000a848 <_dtoa_r+0x3d4>)
1000a734:	2200      	movs	r2, #0
1000a736:	f7f5 ff83 	bl	10000640 <__aeabi_dadd>
1000a73a:	4b44      	ldr	r3, [pc, #272]	; (1000a84c <_dtoa_r+0x3d8>)
1000a73c:	0006      	movs	r6, r0
1000a73e:	18cf      	adds	r7, r1, r3
1000a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a742:	9312      	str	r3, [sp, #72]	; 0x48
1000a744:	9b07      	ldr	r3, [sp, #28]
1000a746:	930d      	str	r3, [sp, #52]	; 0x34
1000a748:	2b00      	cmp	r3, #0
1000a74a:	d000      	beq.n	1000a74e <_dtoa_r+0x2da>
1000a74c:	e3dc      	b.n	1000af08 <_dtoa_r+0xa94>
1000a74e:	9810      	ldr	r0, [sp, #64]	; 0x40
1000a750:	9911      	ldr	r1, [sp, #68]	; 0x44
1000a752:	2200      	movs	r2, #0
1000a754:	4b3e      	ldr	r3, [pc, #248]	; (1000a850 <_dtoa_r+0x3dc>)
1000a756:	f7f6 ff0f 	bl	10001578 <__aeabi_dsub>
1000a75a:	0032      	movs	r2, r6
1000a75c:	003b      	movs	r3, r7
1000a75e:	0004      	movs	r4, r0
1000a760:	000d      	movs	r5, r1
1000a762:	f7f7 fb81 	bl	10001e68 <__aeabi_dcmpgt>
1000a766:	2800      	cmp	r0, #0
1000a768:	d001      	beq.n	1000a76e <_dtoa_r+0x2fa>
1000a76a:	f000 fdab 	bl	1000b2c4 <_dtoa_r+0xe50>
1000a76e:	2180      	movs	r1, #128	; 0x80
1000a770:	0609      	lsls	r1, r1, #24
1000a772:	187b      	adds	r3, r7, r1
1000a774:	0032      	movs	r2, r6
1000a776:	0020      	movs	r0, r4
1000a778:	0029      	movs	r1, r5
1000a77a:	f7f7 fb61 	bl	10001e40 <__aeabi_dcmplt>
1000a77e:	2800      	cmp	r0, #0
1000a780:	d128      	bne.n	1000a7d4 <_dtoa_r+0x360>
1000a782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000a784:	2b00      	cmp	r3, #0
1000a786:	da00      	bge.n	1000a78a <_dtoa_r+0x316>
1000a788:	e0f7      	b.n	1000a97a <_dtoa_r+0x506>
1000a78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a78c:	2a0e      	cmp	r2, #14
1000a78e:	dd00      	ble.n	1000a792 <_dtoa_r+0x31e>
1000a790:	e0f3      	b.n	1000a97a <_dtoa_r+0x506>
1000a792:	4e2a      	ldr	r6, [pc, #168]	; (1000a83c <_dtoa_r+0x3c8>)
1000a794:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a796:	00db      	lsls	r3, r3, #3
1000a798:	18f3      	adds	r3, r6, r3
1000a79a:	685c      	ldr	r4, [r3, #4]
1000a79c:	681b      	ldr	r3, [r3, #0]
1000a79e:	9302      	str	r3, [sp, #8]
1000a7a0:	9403      	str	r4, [sp, #12]
1000a7a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000a7a4:	2b00      	cmp	r3, #0
1000a7a6:	da6e      	bge.n	1000a886 <_dtoa_r+0x412>
1000a7a8:	9b07      	ldr	r3, [sp, #28]
1000a7aa:	2b00      	cmp	r3, #0
1000a7ac:	dc6b      	bgt.n	1000a886 <_dtoa_r+0x412>
1000a7ae:	9b07      	ldr	r3, [sp, #28]
1000a7b0:	2b00      	cmp	r3, #0
1000a7b2:	d10f      	bne.n	1000a7d4 <_dtoa_r+0x360>
1000a7b4:	9802      	ldr	r0, [sp, #8]
1000a7b6:	9903      	ldr	r1, [sp, #12]
1000a7b8:	2200      	movs	r2, #0
1000a7ba:	4b25      	ldr	r3, [pc, #148]	; (1000a850 <_dtoa_r+0x3dc>)
1000a7bc:	f7f6 fcb2 	bl	10001124 <__aeabi_dmul>
1000a7c0:	0002      	movs	r2, r0
1000a7c2:	000b      	movs	r3, r1
1000a7c4:	9804      	ldr	r0, [sp, #16]
1000a7c6:	9905      	ldr	r1, [sp, #20]
1000a7c8:	f7f7 fb44 	bl	10001e54 <__aeabi_dcmple>
1000a7cc:	2800      	cmp	r0, #0
1000a7ce:	d101      	bne.n	1000a7d4 <_dtoa_r+0x360>
1000a7d0:	f000 fd78 	bl	1000b2c4 <_dtoa_r+0xe50>
1000a7d4:	2300      	movs	r3, #0
1000a7d6:	2400      	movs	r4, #0
1000a7d8:	9e06      	ldr	r6, [sp, #24]
1000a7da:	9304      	str	r3, [sp, #16]
1000a7dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000a7de:	43dd      	mvns	r5, r3
1000a7e0:	e2d8      	b.n	1000ad94 <_dtoa_r+0x920>
1000a7e2:	4b1c      	ldr	r3, [pc, #112]	; (1000a854 <_dtoa_r+0x3e0>)
1000a7e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000a7e6:	0336      	lsls	r6, r6, #12
1000a7e8:	0b36      	lsrs	r6, r6, #12
1000a7ea:	6013      	str	r3, [r2, #0]
1000a7ec:	4326      	orrs	r6, r4
1000a7ee:	d143      	bne.n	1000a878 <_dtoa_r+0x404>
1000a7f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1000a7f2:	2b00      	cmp	r3, #0
1000a7f4:	d101      	bne.n	1000a7fa <_dtoa_r+0x386>
1000a7f6:	f000 fde3 	bl	1000b3c0 <_dtoa_r+0xf4c>
1000a7fa:	4b17      	ldr	r3, [pc, #92]	; (1000a858 <_dtoa_r+0x3e4>)
1000a7fc:	9306      	str	r3, [sp, #24]
1000a7fe:	3308      	adds	r3, #8
1000a800:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
1000a802:	6013      	str	r3, [r2, #0]
1000a804:	e676      	b.n	1000a4f4 <_dtoa_r+0x80>
1000a806:	46c0      	nop			; (mov r8, r8)
1000a808:	7ff00000 	.word	0x7ff00000
1000a80c:	1000e8ad 	.word	0x1000e8ad
1000a810:	1000e8ac 	.word	0x1000e8ac
1000a814:	00000432 	.word	0x00000432
1000a818:	00000412 	.word	0x00000412
1000a81c:	fe100000 	.word	0xfe100000
1000a820:	3ff80000 	.word	0x3ff80000
1000a824:	636f4361 	.word	0x636f4361
1000a828:	3fd287a7 	.word	0x3fd287a7
1000a82c:	8b60c8b3 	.word	0x8b60c8b3
1000a830:	3fc68a28 	.word	0x3fc68a28
1000a834:	509f79fb 	.word	0x509f79fb
1000a838:	3fd34413 	.word	0x3fd34413
1000a83c:	1000e260 	.word	0x1000e260
1000a840:	1000e238 	.word	0x1000e238
1000a844:	3ff00000 	.word	0x3ff00000
1000a848:	401c0000 	.word	0x401c0000
1000a84c:	fcc00000 	.word	0xfcc00000
1000a850:	40140000 	.word	0x40140000
1000a854:	0000270f 	.word	0x0000270f
1000a858:	1000ead4 	.word	0x1000ead4
1000a85c:	9c04      	ldr	r4, [sp, #16]
1000a85e:	9d05      	ldr	r5, [sp, #20]
1000a860:	0020      	movs	r0, r4
1000a862:	032a      	lsls	r2, r5, #12
1000a864:	4cd4      	ldr	r4, [pc, #848]	; (1000abb8 <_dtoa_r+0x744>)
1000a866:	0b12      	lsrs	r2, r2, #12
1000a868:	4314      	orrs	r4, r2
1000a86a:	4ad4      	ldr	r2, [pc, #848]	; (1000abbc <_dtoa_r+0x748>)
1000a86c:	0021      	movs	r1, r4
1000a86e:	189e      	adds	r6, r3, r2
1000a870:	2300      	movs	r3, #0
1000a872:	9f1a      	ldr	r7, [sp, #104]	; 0x68
1000a874:	930e      	str	r3, [sp, #56]	; 0x38
1000a876:	e66b      	b.n	1000a550 <_dtoa_r+0xdc>
1000a878:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1000a87a:	2b00      	cmp	r3, #0
1000a87c:	d000      	beq.n	1000a880 <_dtoa_r+0x40c>
1000a87e:	e2c6      	b.n	1000ae0e <_dtoa_r+0x99a>
1000a880:	4bcf      	ldr	r3, [pc, #828]	; (1000abc0 <_dtoa_r+0x74c>)
1000a882:	9306      	str	r3, [sp, #24]
1000a884:	e636      	b.n	1000a4f4 <_dtoa_r+0x80>
1000a886:	9a02      	ldr	r2, [sp, #8]
1000a888:	9b03      	ldr	r3, [sp, #12]
1000a88a:	9c04      	ldr	r4, [sp, #16]
1000a88c:	9d05      	ldr	r5, [sp, #20]
1000a88e:	0020      	movs	r0, r4
1000a890:	0029      	movs	r1, r5
1000a892:	f7f6 f9c5 	bl	10000c20 <__aeabi_ddiv>
1000a896:	f7f7 fc53 	bl	10002140 <__aeabi_d2iz>
1000a89a:	0006      	movs	r6, r0
1000a89c:	f7f7 f980 	bl	10001ba0 <__aeabi_i2d>
1000a8a0:	9a02      	ldr	r2, [sp, #8]
1000a8a2:	9b03      	ldr	r3, [sp, #12]
1000a8a4:	f7f6 fc3e 	bl	10001124 <__aeabi_dmul>
1000a8a8:	0002      	movs	r2, r0
1000a8aa:	000b      	movs	r3, r1
1000a8ac:	0020      	movs	r0, r4
1000a8ae:	0029      	movs	r1, r5
1000a8b0:	f7f6 fe62 	bl	10001578 <__aeabi_dsub>
1000a8b4:	0033      	movs	r3, r6
1000a8b6:	9a06      	ldr	r2, [sp, #24]
1000a8b8:	3330      	adds	r3, #48	; 0x30
1000a8ba:	7013      	strb	r3, [r2, #0]
1000a8bc:	9b07      	ldr	r3, [sp, #28]
1000a8be:	1c57      	adds	r7, r2, #1
1000a8c0:	2b01      	cmp	r3, #1
1000a8c2:	d101      	bne.n	1000a8c8 <_dtoa_r+0x454>
1000a8c4:	f000 fc13 	bl	1000b0ee <_dtoa_r+0xc7a>
1000a8c8:	2301      	movs	r3, #1
1000a8ca:	4698      	mov	r8, r3
1000a8cc:	1e53      	subs	r3, r2, #1
1000a8ce:	469a      	mov	sl, r3
1000a8d0:	4643      	mov	r3, r8
1000a8d2:	46b8      	mov	r8, r7
1000a8d4:	001f      	movs	r7, r3
1000a8d6:	e020      	b.n	1000a91a <_dtoa_r+0x4a6>
1000a8d8:	9a02      	ldr	r2, [sp, #8]
1000a8da:	9b03      	ldr	r3, [sp, #12]
1000a8dc:	0020      	movs	r0, r4
1000a8de:	0029      	movs	r1, r5
1000a8e0:	f7f6 f99e 	bl	10000c20 <__aeabi_ddiv>
1000a8e4:	f7f7 fc2c 	bl	10002140 <__aeabi_d2iz>
1000a8e8:	0006      	movs	r6, r0
1000a8ea:	f7f7 f959 	bl	10001ba0 <__aeabi_i2d>
1000a8ee:	9a02      	ldr	r2, [sp, #8]
1000a8f0:	9b03      	ldr	r3, [sp, #12]
1000a8f2:	f7f6 fc17 	bl	10001124 <__aeabi_dmul>
1000a8f6:	0002      	movs	r2, r0
1000a8f8:	000b      	movs	r3, r1
1000a8fa:	0020      	movs	r0, r4
1000a8fc:	0029      	movs	r1, r5
1000a8fe:	f7f6 fe3b 	bl	10001578 <__aeabi_dsub>
1000a902:	2301      	movs	r3, #1
1000a904:	469c      	mov	ip, r3
1000a906:	0033      	movs	r3, r6
1000a908:	4652      	mov	r2, sl
1000a90a:	3330      	adds	r3, #48	; 0x30
1000a90c:	3701      	adds	r7, #1
1000a90e:	55d3      	strb	r3, [r2, r7]
1000a910:	9b07      	ldr	r3, [sp, #28]
1000a912:	44e0      	add	r8, ip
1000a914:	42bb      	cmp	r3, r7
1000a916:	d100      	bne.n	1000a91a <_dtoa_r+0x4a6>
1000a918:	e3e8      	b.n	1000b0ec <_dtoa_r+0xc78>
1000a91a:	2200      	movs	r2, #0
1000a91c:	4ba9      	ldr	r3, [pc, #676]	; (1000abc4 <_dtoa_r+0x750>)
1000a91e:	f7f6 fc01 	bl	10001124 <__aeabi_dmul>
1000a922:	2200      	movs	r2, #0
1000a924:	2300      	movs	r3, #0
1000a926:	0004      	movs	r4, r0
1000a928:	000d      	movs	r5, r1
1000a92a:	f7f7 fa83 	bl	10001e34 <__aeabi_dcmpeq>
1000a92e:	2800      	cmp	r0, #0
1000a930:	d0d2      	beq.n	1000a8d8 <_dtoa_r+0x464>
1000a932:	4647      	mov	r7, r8
1000a934:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a936:	003e      	movs	r6, r7
1000a938:	3301      	adds	r3, #1
1000a93a:	9308      	str	r3, [sp, #32]
1000a93c:	e0db      	b.n	1000aaf6 <_dtoa_r+0x682>
1000a93e:	2f00      	cmp	r7, #0
1000a940:	dc00      	bgt.n	1000a944 <_dtoa_r+0x4d0>
1000a942:	e3cc      	b.n	1000b0de <_dtoa_r+0xc6a>
1000a944:	2300      	movs	r3, #0
1000a946:	930c      	str	r3, [sp, #48]	; 0x30
1000a948:	9308      	str	r3, [sp, #32]
1000a94a:	4653      	mov	r3, sl
1000a94c:	9309      	str	r3, [sp, #36]	; 0x24
1000a94e:	2300      	movs	r3, #0
1000a950:	930b      	str	r3, [sp, #44]	; 0x2c
1000a952:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a954:	44d0      	add	r8, sl
1000a956:	2b09      	cmp	r3, #9
1000a958:	d800      	bhi.n	1000a95c <_dtoa_r+0x4e8>
1000a95a:	e661      	b.n	1000a620 <_dtoa_r+0x1ac>
1000a95c:	2201      	movs	r2, #1
1000a95e:	2300      	movs	r3, #0
1000a960:	2401      	movs	r4, #1
1000a962:	920a      	str	r2, [sp, #40]	; 0x28
1000a964:	3a02      	subs	r2, #2
1000a966:	9326      	str	r3, [sp, #152]	; 0x98
1000a968:	9207      	str	r2, [sp, #28]
1000a96a:	9327      	str	r3, [sp, #156]	; 0x9c
1000a96c:	2300      	movs	r3, #0
1000a96e:	464a      	mov	r2, r9
1000a970:	6453      	str	r3, [r2, #68]	; 0x44
1000a972:	9b07      	ldr	r3, [sp, #28]
1000a974:	2100      	movs	r1, #0
1000a976:	9318      	str	r3, [sp, #96]	; 0x60
1000a978:	e682      	b.n	1000a680 <_dtoa_r+0x20c>
1000a97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a97c:	2a00      	cmp	r2, #0
1000a97e:	d000      	beq.n	1000a982 <_dtoa_r+0x50e>
1000a980:	e0e6      	b.n	1000ab50 <_dtoa_r+0x6dc>
1000a982:	2300      	movs	r3, #0
1000a984:	2400      	movs	r4, #0
1000a986:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000a988:	9d08      	ldr	r5, [sp, #32]
1000a98a:	930a      	str	r3, [sp, #40]	; 0x28
1000a98c:	2d00      	cmp	r5, #0
1000a98e:	d00d      	beq.n	1000a9ac <_dtoa_r+0x538>
1000a990:	4643      	mov	r3, r8
1000a992:	2b00      	cmp	r3, #0
1000a994:	dd0a      	ble.n	1000a9ac <_dtoa_r+0x538>
1000a996:	002b      	movs	r3, r5
1000a998:	4545      	cmp	r5, r8
1000a99a:	dd00      	ble.n	1000a99e <_dtoa_r+0x52a>
1000a99c:	e253      	b.n	1000ae46 <_dtoa_r+0x9d2>
1000a99e:	9a08      	ldr	r2, [sp, #32]
1000a9a0:	1aed      	subs	r5, r5, r3
1000a9a2:	1ad2      	subs	r2, r2, r3
1000a9a4:	9208      	str	r2, [sp, #32]
1000a9a6:	4642      	mov	r2, r8
1000a9a8:	1ad3      	subs	r3, r2, r3
1000a9aa:	4698      	mov	r8, r3
1000a9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a9ae:	2b00      	cmp	r3, #0
1000a9b0:	d00b      	beq.n	1000a9ca <_dtoa_r+0x556>
1000a9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a9b4:	2b00      	cmp	r3, #0
1000a9b6:	d002      	beq.n	1000a9be <_dtoa_r+0x54a>
1000a9b8:	2e00      	cmp	r6, #0
1000a9ba:	d000      	beq.n	1000a9be <_dtoa_r+0x54a>
1000a9bc:	e3de      	b.n	1000b17c <_dtoa_r+0xd08>
1000a9be:	4659      	mov	r1, fp
1000a9c0:	4648      	mov	r0, r9
1000a9c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000a9c4:	f001 fc40 	bl	1000c248 <__pow5mult>
1000a9c8:	4683      	mov	fp, r0
1000a9ca:	2101      	movs	r1, #1
1000a9cc:	4648      	mov	r0, r9
1000a9ce:	f001 fb33 	bl	1000c038 <__i2b>
1000a9d2:	4653      	mov	r3, sl
1000a9d4:	9004      	str	r0, [sp, #16]
1000a9d6:	2b00      	cmp	r3, #0
1000a9d8:	d000      	beq.n	1000a9dc <_dtoa_r+0x568>
1000a9da:	e201      	b.n	1000ade0 <_dtoa_r+0x96c>
1000a9dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000a9de:	2b01      	cmp	r3, #1
1000a9e0:	dc00      	bgt.n	1000a9e4 <_dtoa_r+0x570>
1000a9e2:	e097      	b.n	1000ab14 <_dtoa_r+0x6a0>
1000a9e4:	2301      	movs	r3, #1
1000a9e6:	221f      	movs	r2, #31
1000a9e8:	0011      	movs	r1, r2
1000a9ea:	4443      	add	r3, r8
1000a9ec:	4019      	ands	r1, r3
1000a9ee:	421a      	tst	r2, r3
1000a9f0:	d100      	bne.n	1000a9f4 <_dtoa_r+0x580>
1000a9f2:	e0c4      	b.n	1000ab7e <_dtoa_r+0x70a>
1000a9f4:	2320      	movs	r3, #32
1000a9f6:	1a5b      	subs	r3, r3, r1
1000a9f8:	2b04      	cmp	r3, #4
1000a9fa:	dc00      	bgt.n	1000a9fe <_dtoa_r+0x58a>
1000a9fc:	e212      	b.n	1000ae24 <_dtoa_r+0x9b0>
1000a9fe:	231c      	movs	r3, #28
1000aa00:	1a5b      	subs	r3, r3, r1
1000aa02:	9a08      	ldr	r2, [sp, #32]
1000aa04:	18ed      	adds	r5, r5, r3
1000aa06:	4694      	mov	ip, r2
1000aa08:	449c      	add	ip, r3
1000aa0a:	4662      	mov	r2, ip
1000aa0c:	4498      	add	r8, r3
1000aa0e:	9208      	str	r2, [sp, #32]
1000aa10:	9b08      	ldr	r3, [sp, #32]
1000aa12:	2b00      	cmp	r3, #0
1000aa14:	dd05      	ble.n	1000aa22 <_dtoa_r+0x5ae>
1000aa16:	4659      	mov	r1, fp
1000aa18:	001a      	movs	r2, r3
1000aa1a:	4648      	mov	r0, r9
1000aa1c:	f001 fc7c 	bl	1000c318 <__lshift>
1000aa20:	4683      	mov	fp, r0
1000aa22:	4643      	mov	r3, r8
1000aa24:	2b00      	cmp	r3, #0
1000aa26:	dd05      	ble.n	1000aa34 <_dtoa_r+0x5c0>
1000aa28:	4642      	mov	r2, r8
1000aa2a:	4648      	mov	r0, r9
1000aa2c:	9904      	ldr	r1, [sp, #16]
1000aa2e:	f001 fc73 	bl	1000c318 <__lshift>
1000aa32:	9004      	str	r0, [sp, #16]
1000aa34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000aa36:	2b00      	cmp	r3, #0
1000aa38:	d000      	beq.n	1000aa3c <_dtoa_r+0x5c8>
1000aa3a:	e1b5      	b.n	1000ada8 <_dtoa_r+0x934>
1000aa3c:	9b07      	ldr	r3, [sp, #28]
1000aa3e:	2b00      	cmp	r3, #0
1000aa40:	dc00      	bgt.n	1000aa44 <_dtoa_r+0x5d0>
1000aa42:	e18b      	b.n	1000ad5c <_dtoa_r+0x8e8>
1000aa44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000aa46:	2b00      	cmp	r3, #0
1000aa48:	d000      	beq.n	1000aa4c <_dtoa_r+0x5d8>
1000aa4a:	e0cc      	b.n	1000abe6 <_dtoa_r+0x772>
1000aa4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000aa4e:	3301      	adds	r3, #1
1000aa50:	9308      	str	r3, [sp, #32]
1000aa52:	2501      	movs	r5, #1
1000aa54:	9b06      	ldr	r3, [sp, #24]
1000aa56:	002f      	movs	r7, r5
1000aa58:	1e5e      	subs	r6, r3, #1
1000aa5a:	9b04      	ldr	r3, [sp, #16]
1000aa5c:	46a2      	mov	sl, r4
1000aa5e:	465d      	mov	r5, fp
1000aa60:	4698      	mov	r8, r3
1000aa62:	9c07      	ldr	r4, [sp, #28]
1000aa64:	e007      	b.n	1000aa76 <_dtoa_r+0x602>
1000aa66:	0029      	movs	r1, r5
1000aa68:	2300      	movs	r3, #0
1000aa6a:	220a      	movs	r2, #10
1000aa6c:	4648      	mov	r0, r9
1000aa6e:	f001 fa3b 	bl	1000bee8 <__multadd>
1000aa72:	0005      	movs	r5, r0
1000aa74:	3701      	adds	r7, #1
1000aa76:	4641      	mov	r1, r8
1000aa78:	0028      	movs	r0, r5
1000aa7a:	f7ff fc51 	bl	1000a320 <quorem>
1000aa7e:	3030      	adds	r0, #48	; 0x30
1000aa80:	55f0      	strb	r0, [r6, r7]
1000aa82:	42bc      	cmp	r4, r7
1000aa84:	dcef      	bgt.n	1000aa66 <_dtoa_r+0x5f2>
1000aa86:	0007      	movs	r7, r0
1000aa88:	46ab      	mov	fp, r5
1000aa8a:	4654      	mov	r4, sl
1000aa8c:	9b07      	ldr	r3, [sp, #28]
1000aa8e:	2501      	movs	r5, #1
1000aa90:	2b00      	cmp	r3, #0
1000aa92:	dd00      	ble.n	1000aa96 <_dtoa_r+0x622>
1000aa94:	001d      	movs	r5, r3
1000aa96:	9b06      	ldr	r3, [sp, #24]
1000aa98:	469c      	mov	ip, r3
1000aa9a:	2300      	movs	r3, #0
1000aa9c:	469a      	mov	sl, r3
1000aa9e:	4465      	add	r5, ip
1000aaa0:	4659      	mov	r1, fp
1000aaa2:	2201      	movs	r2, #1
1000aaa4:	4648      	mov	r0, r9
1000aaa6:	f001 fc37 	bl	1000c318 <__lshift>
1000aaaa:	9904      	ldr	r1, [sp, #16]
1000aaac:	4683      	mov	fp, r0
1000aaae:	f001 fcb1 	bl	1000c414 <__mcmp>
1000aab2:	2800      	cmp	r0, #0
1000aab4:	dc00      	bgt.n	1000aab8 <_dtoa_r+0x644>
1000aab6:	e1bb      	b.n	1000ae30 <_dtoa_r+0x9bc>
1000aab8:	9a06      	ldr	r2, [sp, #24]
1000aaba:	e002      	b.n	1000aac2 <_dtoa_r+0x64e>
1000aabc:	42aa      	cmp	r2, r5
1000aabe:	d100      	bne.n	1000aac2 <_dtoa_r+0x64e>
1000aac0:	e2d3      	b.n	1000b06a <_dtoa_r+0xbf6>
1000aac2:	002e      	movs	r6, r5
1000aac4:	3d01      	subs	r5, #1
1000aac6:	782b      	ldrb	r3, [r5, #0]
1000aac8:	2b39      	cmp	r3, #57	; 0x39
1000aaca:	d0f7      	beq.n	1000aabc <_dtoa_r+0x648>
1000aacc:	3301      	adds	r3, #1
1000aace:	702b      	strb	r3, [r5, #0]
1000aad0:	4648      	mov	r0, r9
1000aad2:	9904      	ldr	r1, [sp, #16]
1000aad4:	f001 f9fe 	bl	1000bed4 <_Bfree>
1000aad8:	2c00      	cmp	r4, #0
1000aada:	d00c      	beq.n	1000aaf6 <_dtoa_r+0x682>
1000aadc:	4653      	mov	r3, sl
1000aade:	2b00      	cmp	r3, #0
1000aae0:	d005      	beq.n	1000aaee <_dtoa_r+0x67a>
1000aae2:	45a2      	cmp	sl, r4
1000aae4:	d003      	beq.n	1000aaee <_dtoa_r+0x67a>
1000aae6:	4651      	mov	r1, sl
1000aae8:	4648      	mov	r0, r9
1000aaea:	f001 f9f3 	bl	1000bed4 <_Bfree>
1000aaee:	0021      	movs	r1, r4
1000aaf0:	4648      	mov	r0, r9
1000aaf2:	f001 f9ef 	bl	1000bed4 <_Bfree>
1000aaf6:	4659      	mov	r1, fp
1000aaf8:	4648      	mov	r0, r9
1000aafa:	f001 f9eb 	bl	1000bed4 <_Bfree>
1000aafe:	2300      	movs	r3, #0
1000ab00:	9a08      	ldr	r2, [sp, #32]
1000ab02:	7033      	strb	r3, [r6, #0]
1000ab04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1000ab06:	601a      	str	r2, [r3, #0]
1000ab08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1000ab0a:	2b00      	cmp	r3, #0
1000ab0c:	d100      	bne.n	1000ab10 <_dtoa_r+0x69c>
1000ab0e:	e4f1      	b.n	1000a4f4 <_dtoa_r+0x80>
1000ab10:	601e      	str	r6, [r3, #0]
1000ab12:	e4ef      	b.n	1000a4f4 <_dtoa_r+0x80>
1000ab14:	9b02      	ldr	r3, [sp, #8]
1000ab16:	2b00      	cmp	r3, #0
1000ab18:	d000      	beq.n	1000ab1c <_dtoa_r+0x6a8>
1000ab1a:	e763      	b.n	1000a9e4 <_dtoa_r+0x570>
1000ab1c:	9902      	ldr	r1, [sp, #8]
1000ab1e:	9a03      	ldr	r2, [sp, #12]
1000ab20:	0013      	movs	r3, r2
1000ab22:	0312      	lsls	r2, r2, #12
1000ab24:	d000      	beq.n	1000ab28 <_dtoa_r+0x6b4>
1000ab26:	e75d      	b.n	1000a9e4 <_dtoa_r+0x570>
1000ab28:	4927      	ldr	r1, [pc, #156]	; (1000abc8 <_dtoa_r+0x754>)
1000ab2a:	2200      	movs	r2, #0
1000ab2c:	420b      	tst	r3, r1
1000ab2e:	d006      	beq.n	1000ab3e <_dtoa_r+0x6ca>
1000ab30:	9b08      	ldr	r3, [sp, #32]
1000ab32:	3201      	adds	r2, #1
1000ab34:	3301      	adds	r3, #1
1000ab36:	9308      	str	r3, [sp, #32]
1000ab38:	2301      	movs	r3, #1
1000ab3a:	469c      	mov	ip, r3
1000ab3c:	44e0      	add	r8, ip
1000ab3e:	4653      	mov	r3, sl
1000ab40:	4692      	mov	sl, r2
1000ab42:	2b00      	cmp	r3, #0
1000ab44:	d100      	bne.n	1000ab48 <_dtoa_r+0x6d4>
1000ab46:	e74d      	b.n	1000a9e4 <_dtoa_r+0x570>
1000ab48:	e155      	b.n	1000adf6 <_dtoa_r+0x982>
1000ab4a:	2301      	movs	r3, #1
1000ab4c:	930c      	str	r3, [sp, #48]	; 0x30
1000ab4e:	e54c      	b.n	1000a5ea <_dtoa_r+0x176>
1000ab50:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000ab52:	2a01      	cmp	r2, #1
1000ab54:	dc00      	bgt.n	1000ab58 <_dtoa_r+0x6e4>
1000ab56:	e278      	b.n	1000b04a <_dtoa_r+0xbd6>
1000ab58:	9b07      	ldr	r3, [sp, #28]
1000ab5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000ab5c:	1e5e      	subs	r6, r3, #1
1000ab5e:	42b2      	cmp	r2, r6
1000ab60:	da00      	bge.n	1000ab64 <_dtoa_r+0x6f0>
1000ab62:	e172      	b.n	1000ae4a <_dtoa_r+0x9d6>
1000ab64:	1b96      	subs	r6, r2, r6
1000ab66:	9a08      	ldr	r2, [sp, #32]
1000ab68:	1ad5      	subs	r5, r2, r3
1000ab6a:	2b00      	cmp	r3, #0
1000ab6c:	da00      	bge.n	1000ab70 <_dtoa_r+0x6fc>
1000ab6e:	e178      	b.n	1000ae62 <_dtoa_r+0x9ee>
1000ab70:	469c      	mov	ip, r3
1000ab72:	9a08      	ldr	r2, [sp, #32]
1000ab74:	44e0      	add	r8, ip
1000ab76:	0015      	movs	r5, r2
1000ab78:	4462      	add	r2, ip
1000ab7a:	9208      	str	r2, [sp, #32]
1000ab7c:	e171      	b.n	1000ae62 <_dtoa_r+0x9ee>
1000ab7e:	231c      	movs	r3, #28
1000ab80:	e73f      	b.n	1000aa02 <_dtoa_r+0x58e>
1000ab82:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000ab84:	2401      	movs	r4, #1
1000ab86:	2b03      	cmp	r3, #3
1000ab88:	d100      	bne.n	1000ab8c <_dtoa_r+0x718>
1000ab8a:	e193      	b.n	1000aeb4 <_dtoa_r+0xa40>
1000ab8c:	dd00      	ble.n	1000ab90 <_dtoa_r+0x71c>
1000ab8e:	e554      	b.n	1000a63a <_dtoa_r+0x1c6>
1000ab90:	2300      	movs	r3, #0
1000ab92:	930a      	str	r3, [sp, #40]	; 0x28
1000ab94:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000ab96:	2b02      	cmp	r3, #2
1000ab98:	d001      	beq.n	1000ab9e <_dtoa_r+0x72a>
1000ab9a:	f000 fbeb 	bl	1000b374 <_dtoa_r+0xf00>
1000ab9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000aba0:	2b00      	cmp	r3, #0
1000aba2:	dc00      	bgt.n	1000aba6 <_dtoa_r+0x732>
1000aba4:	e13a      	b.n	1000ae1c <_dtoa_r+0x9a8>
1000aba6:	001d      	movs	r5, r3
1000aba8:	9318      	str	r3, [sp, #96]	; 0x60
1000abaa:	9307      	str	r3, [sp, #28]
1000abac:	e559      	b.n	1000a662 <_dtoa_r+0x1ee>
1000abae:	2220      	movs	r2, #32
1000abb0:	0020      	movs	r0, r4
1000abb2:	1ad3      	subs	r3, r2, r3
1000abb4:	4098      	lsls	r0, r3
1000abb6:	e4c3      	b.n	1000a540 <_dtoa_r+0xcc>
1000abb8:	3ff00000 	.word	0x3ff00000
1000abbc:	fffffc01 	.word	0xfffffc01
1000abc0:	1000eae0 	.word	0x1000eae0
1000abc4:	40240000 	.word	0x40240000
1000abc8:	7ff00000 	.word	0x7ff00000
1000abcc:	2300      	movs	r3, #0
1000abce:	0021      	movs	r1, r4
1000abd0:	220a      	movs	r2, #10
1000abd2:	4648      	mov	r0, r9
1000abd4:	f001 f988 	bl	1000bee8 <__multadd>
1000abd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000abda:	0004      	movs	r4, r0
1000abdc:	9609      	str	r6, [sp, #36]	; 0x24
1000abde:	2b00      	cmp	r3, #0
1000abe0:	dc00      	bgt.n	1000abe4 <_dtoa_r+0x770>
1000abe2:	e3b8      	b.n	1000b356 <_dtoa_r+0xee2>
1000abe4:	9307      	str	r3, [sp, #28]
1000abe6:	2d00      	cmp	r5, #0
1000abe8:	dd05      	ble.n	1000abf6 <_dtoa_r+0x782>
1000abea:	0021      	movs	r1, r4
1000abec:	002a      	movs	r2, r5
1000abee:	4648      	mov	r0, r9
1000abf0:	f001 fb92 	bl	1000c318 <__lshift>
1000abf4:	0004      	movs	r4, r0
1000abf6:	4653      	mov	r3, sl
1000abf8:	46a0      	mov	r8, r4
1000abfa:	2b00      	cmp	r3, #0
1000abfc:	d000      	beq.n	1000ac00 <_dtoa_r+0x78c>
1000abfe:	e294      	b.n	1000b12a <_dtoa_r+0xcb6>
1000ac00:	9a07      	ldr	r2, [sp, #28]
1000ac02:	9b06      	ldr	r3, [sp, #24]
1000ac04:	4694      	mov	ip, r2
1000ac06:	469a      	mov	sl, r3
1000ac08:	3b01      	subs	r3, #1
1000ac0a:	449c      	add	ip, r3
1000ac0c:	4663      	mov	r3, ip
1000ac0e:	9308      	str	r3, [sp, #32]
1000ac10:	2301      	movs	r3, #1
1000ac12:	4657      	mov	r7, sl
1000ac14:	465e      	mov	r6, fp
1000ac16:	46c2      	mov	sl, r8
1000ac18:	9a02      	ldr	r2, [sp, #8]
1000ac1a:	401a      	ands	r2, r3
1000ac1c:	920b      	str	r2, [sp, #44]	; 0x2c
1000ac1e:	9d04      	ldr	r5, [sp, #16]
1000ac20:	0030      	movs	r0, r6
1000ac22:	0029      	movs	r1, r5
1000ac24:	f7ff fb7c 	bl	1000a320 <quorem>
1000ac28:	2230      	movs	r2, #48	; 0x30
1000ac2a:	0003      	movs	r3, r0
1000ac2c:	4694      	mov	ip, r2
1000ac2e:	0021      	movs	r1, r4
1000ac30:	4463      	add	r3, ip
1000ac32:	900a      	str	r0, [sp, #40]	; 0x28
1000ac34:	0030      	movs	r0, r6
1000ac36:	469b      	mov	fp, r3
1000ac38:	f001 fbec 	bl	1000c414 <__mcmp>
1000ac3c:	0029      	movs	r1, r5
1000ac3e:	4680      	mov	r8, r0
1000ac40:	4652      	mov	r2, sl
1000ac42:	4648      	mov	r0, r9
1000ac44:	f001 fc04 	bl	1000c450 <__mdiff>
1000ac48:	68c3      	ldr	r3, [r0, #12]
1000ac4a:	0005      	movs	r5, r0
1000ac4c:	2b00      	cmp	r3, #0
1000ac4e:	d134      	bne.n	1000acba <_dtoa_r+0x846>
1000ac50:	0001      	movs	r1, r0
1000ac52:	0030      	movs	r0, r6
1000ac54:	f001 fbde 	bl	1000c414 <__mcmp>
1000ac58:	0029      	movs	r1, r5
1000ac5a:	9007      	str	r0, [sp, #28]
1000ac5c:	4648      	mov	r0, r9
1000ac5e:	f001 f939 	bl	1000bed4 <_Bfree>
1000ac62:	9b07      	ldr	r3, [sp, #28]
1000ac64:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000ac66:	4313      	orrs	r3, r2
1000ac68:	d159      	bne.n	1000ad1e <_dtoa_r+0x8aa>
1000ac6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ac6c:	2b00      	cmp	r3, #0
1000ac6e:	d100      	bne.n	1000ac72 <_dtoa_r+0x7fe>
1000ac70:	e32c      	b.n	1000b2cc <_dtoa_r+0xe58>
1000ac72:	4643      	mov	r3, r8
1000ac74:	2b00      	cmp	r3, #0
1000ac76:	da00      	bge.n	1000ac7a <_dtoa_r+0x806>
1000ac78:	e333      	b.n	1000b2e2 <_dtoa_r+0xe6e>
1000ac7a:	465b      	mov	r3, fp
1000ac7c:	703b      	strb	r3, [r7, #0]
1000ac7e:	9b08      	ldr	r3, [sp, #32]
1000ac80:	1c7d      	adds	r5, r7, #1
1000ac82:	429f      	cmp	r7, r3
1000ac84:	d100      	bne.n	1000ac88 <_dtoa_r+0x814>
1000ac86:	e2f9      	b.n	1000b27c <_dtoa_r+0xe08>
1000ac88:	0031      	movs	r1, r6
1000ac8a:	2300      	movs	r3, #0
1000ac8c:	220a      	movs	r2, #10
1000ac8e:	4648      	mov	r0, r9
1000ac90:	f001 f92a 	bl	1000bee8 <__multadd>
1000ac94:	2300      	movs	r3, #0
1000ac96:	0006      	movs	r6, r0
1000ac98:	220a      	movs	r2, #10
1000ac9a:	0021      	movs	r1, r4
1000ac9c:	4648      	mov	r0, r9
1000ac9e:	4554      	cmp	r4, sl
1000aca0:	d037      	beq.n	1000ad12 <_dtoa_r+0x89e>
1000aca2:	f001 f921 	bl	1000bee8 <__multadd>
1000aca6:	4651      	mov	r1, sl
1000aca8:	0004      	movs	r4, r0
1000acaa:	2300      	movs	r3, #0
1000acac:	220a      	movs	r2, #10
1000acae:	4648      	mov	r0, r9
1000acb0:	f001 f91a 	bl	1000bee8 <__multadd>
1000acb4:	002f      	movs	r7, r5
1000acb6:	4682      	mov	sl, r0
1000acb8:	e7b1      	b.n	1000ac1e <_dtoa_r+0x7aa>
1000acba:	4645      	mov	r5, r8
1000acbc:	0001      	movs	r1, r0
1000acbe:	4648      	mov	r0, r9
1000acc0:	46d0      	mov	r8, sl
1000acc2:	46ba      	mov	sl, r7
1000acc4:	465f      	mov	r7, fp
1000acc6:	46b3      	mov	fp, r6
1000acc8:	f001 f904 	bl	1000bed4 <_Bfree>
1000accc:	2d00      	cmp	r5, #0
1000acce:	db06      	blt.n	1000acde <_dtoa_r+0x86a>
1000acd0:	2301      	movs	r3, #1
1000acd2:	9a02      	ldr	r2, [sp, #8]
1000acd4:	4013      	ands	r3, r2
1000acd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000acd8:	4315      	orrs	r5, r2
1000acda:	432b      	orrs	r3, r5
1000acdc:	d130      	bne.n	1000ad40 <_dtoa_r+0x8cc>
1000acde:	4659      	mov	r1, fp
1000ace0:	2201      	movs	r2, #1
1000ace2:	4648      	mov	r0, r9
1000ace4:	f001 fb18 	bl	1000c318 <__lshift>
1000ace8:	9904      	ldr	r1, [sp, #16]
1000acea:	4683      	mov	fp, r0
1000acec:	f001 fb92 	bl	1000c414 <__mcmp>
1000acf0:	2800      	cmp	r0, #0
1000acf2:	dc00      	bgt.n	1000acf6 <_dtoa_r+0x882>
1000acf4:	e0d7      	b.n	1000aea6 <_dtoa_r+0xa32>
1000acf6:	2f39      	cmp	r7, #57	; 0x39
1000acf8:	d100      	bne.n	1000acfc <_dtoa_r+0x888>
1000acfa:	e2d6      	b.n	1000b2aa <_dtoa_r+0xe36>
1000acfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1000acfe:	3731      	adds	r7, #49	; 0x31
1000ad00:	4653      	mov	r3, sl
1000ad02:	1c5e      	adds	r6, r3, #1
1000ad04:	701f      	strb	r7, [r3, #0]
1000ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ad08:	46a2      	mov	sl, r4
1000ad0a:	3301      	adds	r3, #1
1000ad0c:	4644      	mov	r4, r8
1000ad0e:	9308      	str	r3, [sp, #32]
1000ad10:	e6de      	b.n	1000aad0 <_dtoa_r+0x65c>
1000ad12:	f001 f8e9 	bl	1000bee8 <__multadd>
1000ad16:	002f      	movs	r7, r5
1000ad18:	0004      	movs	r4, r0
1000ad1a:	4682      	mov	sl, r0
1000ad1c:	e77f      	b.n	1000ac1e <_dtoa_r+0x7aa>
1000ad1e:	4643      	mov	r3, r8
1000ad20:	2b00      	cmp	r3, #0
1000ad22:	da00      	bge.n	1000ad26 <_dtoa_r+0x8b2>
1000ad24:	e33c      	b.n	1000b3a0 <_dtoa_r+0xf2c>
1000ad26:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000ad28:	4313      	orrs	r3, r2
1000ad2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000ad2c:	4313      	orrs	r3, r2
1000ad2e:	d100      	bne.n	1000ad32 <_dtoa_r+0x8be>
1000ad30:	e336      	b.n	1000b3a0 <_dtoa_r+0xf2c>
1000ad32:	9b07      	ldr	r3, [sp, #28]
1000ad34:	2b00      	cmp	r3, #0
1000ad36:	dda0      	ble.n	1000ac7a <_dtoa_r+0x806>
1000ad38:	46d0      	mov	r8, sl
1000ad3a:	46ba      	mov	sl, r7
1000ad3c:	465f      	mov	r7, fp
1000ad3e:	46b3      	mov	fp, r6
1000ad40:	2f39      	cmp	r7, #57	; 0x39
1000ad42:	d100      	bne.n	1000ad46 <_dtoa_r+0x8d2>
1000ad44:	e2b1      	b.n	1000b2aa <_dtoa_r+0xe36>
1000ad46:	4653      	mov	r3, sl
1000ad48:	1c5e      	adds	r6, r3, #1
1000ad4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ad4c:	3701      	adds	r7, #1
1000ad4e:	3301      	adds	r3, #1
1000ad50:	9308      	str	r3, [sp, #32]
1000ad52:	4653      	mov	r3, sl
1000ad54:	46a2      	mov	sl, r4
1000ad56:	701f      	strb	r7, [r3, #0]
1000ad58:	4644      	mov	r4, r8
1000ad5a:	e6b9      	b.n	1000aad0 <_dtoa_r+0x65c>
1000ad5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000ad5e:	2b02      	cmp	r3, #2
1000ad60:	dc00      	bgt.n	1000ad64 <_dtoa_r+0x8f0>
1000ad62:	e66f      	b.n	1000aa44 <_dtoa_r+0x5d0>
1000ad64:	9b07      	ldr	r3, [sp, #28]
1000ad66:	9e06      	ldr	r6, [sp, #24]
1000ad68:	2b00      	cmp	r3, #0
1000ad6a:	d000      	beq.n	1000ad6e <_dtoa_r+0x8fa>
1000ad6c:	e536      	b.n	1000a7dc <_dtoa_r+0x368>
1000ad6e:	9904      	ldr	r1, [sp, #16]
1000ad70:	2205      	movs	r2, #5
1000ad72:	4648      	mov	r0, r9
1000ad74:	f001 f8b8 	bl	1000bee8 <__multadd>
1000ad78:	0001      	movs	r1, r0
1000ad7a:	9004      	str	r0, [sp, #16]
1000ad7c:	4658      	mov	r0, fp
1000ad7e:	f001 fb49 	bl	1000c414 <__mcmp>
1000ad82:	2800      	cmp	r0, #0
1000ad84:	dc00      	bgt.n	1000ad88 <_dtoa_r+0x914>
1000ad86:	e529      	b.n	1000a7dc <_dtoa_r+0x368>
1000ad88:	2331      	movs	r3, #49	; 0x31
1000ad8a:	9a06      	ldr	r2, [sp, #24]
1000ad8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1000ad8e:	1c56      	adds	r6, r2, #1
1000ad90:	7013      	strb	r3, [r2, #0]
1000ad92:	3501      	adds	r5, #1
1000ad94:	4648      	mov	r0, r9
1000ad96:	9904      	ldr	r1, [sp, #16]
1000ad98:	f001 f89c 	bl	1000bed4 <_Bfree>
1000ad9c:	1c6b      	adds	r3, r5, #1
1000ad9e:	9308      	str	r3, [sp, #32]
1000ada0:	2c00      	cmp	r4, #0
1000ada2:	d000      	beq.n	1000ada6 <_dtoa_r+0x932>
1000ada4:	e6a3      	b.n	1000aaee <_dtoa_r+0x67a>
1000ada6:	e6a6      	b.n	1000aaf6 <_dtoa_r+0x682>
1000ada8:	4658      	mov	r0, fp
1000adaa:	9904      	ldr	r1, [sp, #16]
1000adac:	f001 fb32 	bl	1000c414 <__mcmp>
1000adb0:	2800      	cmp	r0, #0
1000adb2:	db00      	blt.n	1000adb6 <_dtoa_r+0x942>
1000adb4:	e642      	b.n	1000aa3c <_dtoa_r+0x5c8>
1000adb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000adb8:	4659      	mov	r1, fp
1000adba:	220a      	movs	r2, #10
1000adbc:	4648      	mov	r0, r9
1000adbe:	1e5e      	subs	r6, r3, #1
1000adc0:	2300      	movs	r3, #0
1000adc2:	f001 f891 	bl	1000bee8 <__multadd>
1000adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000adc8:	4683      	mov	fp, r0
1000adca:	2b00      	cmp	r3, #0
1000adcc:	d000      	beq.n	1000add0 <_dtoa_r+0x95c>
1000adce:	e6fd      	b.n	1000abcc <_dtoa_r+0x758>
1000add0:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000add2:	2b00      	cmp	r3, #0
1000add4:	dc00      	bgt.n	1000add8 <_dtoa_r+0x964>
1000add6:	e2aa      	b.n	1000b32e <_dtoa_r+0xeba>
1000add8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000adda:	9307      	str	r3, [sp, #28]
1000addc:	9208      	str	r2, [sp, #32]
1000adde:	e638      	b.n	1000aa52 <_dtoa_r+0x5de>
1000ade0:	0001      	movs	r1, r0
1000ade2:	4652      	mov	r2, sl
1000ade4:	4648      	mov	r0, r9
1000ade6:	f001 fa2f 	bl	1000c248 <__pow5mult>
1000adea:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000adec:	9004      	str	r0, [sp, #16]
1000adee:	2b01      	cmp	r3, #1
1000adf0:	dd3d      	ble.n	1000ae6e <_dtoa_r+0x9fa>
1000adf2:	2300      	movs	r3, #0
1000adf4:	469a      	mov	sl, r3
1000adf6:	9a04      	ldr	r2, [sp, #16]
1000adf8:	4694      	mov	ip, r2
1000adfa:	6913      	ldr	r3, [r2, #16]
1000adfc:	3303      	adds	r3, #3
1000adfe:	009b      	lsls	r3, r3, #2
1000ae00:	4463      	add	r3, ip
1000ae02:	6858      	ldr	r0, [r3, #4]
1000ae04:	f001 f8c4 	bl	1000bf90 <__hi0bits>
1000ae08:	2320      	movs	r3, #32
1000ae0a:	1a1b      	subs	r3, r3, r0
1000ae0c:	e5eb      	b.n	1000a9e6 <_dtoa_r+0x572>
1000ae0e:	4bd2      	ldr	r3, [pc, #840]	; (1000b158 <_dtoa_r+0xce4>)
1000ae10:	9306      	str	r3, [sp, #24]
1000ae12:	3303      	adds	r3, #3
1000ae14:	e4f4      	b.n	1000a800 <_dtoa_r+0x38c>
1000ae16:	2301      	movs	r3, #1
1000ae18:	930a      	str	r3, [sp, #40]	; 0x28
1000ae1a:	e6c0      	b.n	1000ab9e <_dtoa_r+0x72a>
1000ae1c:	2301      	movs	r3, #1
1000ae1e:	9307      	str	r3, [sp, #28]
1000ae20:	9327      	str	r3, [sp, #156]	; 0x9c
1000ae22:	e5a3      	b.n	1000a96c <_dtoa_r+0x4f8>
1000ae24:	2b04      	cmp	r3, #4
1000ae26:	d100      	bne.n	1000ae2a <_dtoa_r+0x9b6>
1000ae28:	e5f2      	b.n	1000aa10 <_dtoa_r+0x59c>
1000ae2a:	233c      	movs	r3, #60	; 0x3c
1000ae2c:	1a5b      	subs	r3, r3, r1
1000ae2e:	e5e8      	b.n	1000aa02 <_dtoa_r+0x58e>
1000ae30:	2800      	cmp	r0, #0
1000ae32:	d102      	bne.n	1000ae3a <_dtoa_r+0x9c6>
1000ae34:	07ff      	lsls	r7, r7, #31
1000ae36:	d500      	bpl.n	1000ae3a <_dtoa_r+0x9c6>
1000ae38:	e63e      	b.n	1000aab8 <_dtoa_r+0x644>
1000ae3a:	002e      	movs	r6, r5
1000ae3c:	3d01      	subs	r5, #1
1000ae3e:	782b      	ldrb	r3, [r5, #0]
1000ae40:	2b30      	cmp	r3, #48	; 0x30
1000ae42:	d0fa      	beq.n	1000ae3a <_dtoa_r+0x9c6>
1000ae44:	e644      	b.n	1000aad0 <_dtoa_r+0x65c>
1000ae46:	4643      	mov	r3, r8
1000ae48:	e5a9      	b.n	1000a99e <_dtoa_r+0x52a>
1000ae4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ae4c:	960b      	str	r6, [sp, #44]	; 0x2c
1000ae4e:	1af3      	subs	r3, r6, r3
1000ae50:	449a      	add	sl, r3
1000ae52:	9b07      	ldr	r3, [sp, #28]
1000ae54:	2600      	movs	r6, #0
1000ae56:	469c      	mov	ip, r3
1000ae58:	9a08      	ldr	r2, [sp, #32]
1000ae5a:	44e0      	add	r8, ip
1000ae5c:	0015      	movs	r5, r2
1000ae5e:	4462      	add	r2, ip
1000ae60:	9208      	str	r2, [sp, #32]
1000ae62:	2101      	movs	r1, #1
1000ae64:	4648      	mov	r0, r9
1000ae66:	f001 f8e7 	bl	1000c038 <__i2b>
1000ae6a:	0004      	movs	r4, r0
1000ae6c:	e58e      	b.n	1000a98c <_dtoa_r+0x518>
1000ae6e:	9b02      	ldr	r3, [sp, #8]
1000ae70:	2b00      	cmp	r3, #0
1000ae72:	d1be      	bne.n	1000adf2 <_dtoa_r+0x97e>
1000ae74:	9902      	ldr	r1, [sp, #8]
1000ae76:	9a03      	ldr	r2, [sp, #12]
1000ae78:	0013      	movs	r3, r2
1000ae7a:	0312      	lsls	r2, r2, #12
1000ae7c:	d1b9      	bne.n	1000adf2 <_dtoa_r+0x97e>
1000ae7e:	e653      	b.n	1000ab28 <_dtoa_r+0x6b4>
1000ae80:	4bb6      	ldr	r3, [pc, #728]	; (1000b15c <_dtoa_r+0xce8>)
1000ae82:	4016      	ands	r6, r2
1000ae84:	9804      	ldr	r0, [sp, #16]
1000ae86:	9905      	ldr	r1, [sp, #20]
1000ae88:	6a1a      	ldr	r2, [r3, #32]
1000ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ae8c:	f7f5 fec8 	bl	10000c20 <__aeabi_ddiv>
1000ae90:	2303      	movs	r3, #3
1000ae92:	9010      	str	r0, [sp, #64]	; 0x40
1000ae94:	9111      	str	r1, [sp, #68]	; 0x44
1000ae96:	930d      	str	r3, [sp, #52]	; 0x34
1000ae98:	f7ff fc19 	bl	1000a6ce <_dtoa_r+0x25a>
1000ae9c:	2302      	movs	r3, #2
1000ae9e:	9326      	str	r3, [sp, #152]	; 0x98
1000aea0:	2300      	movs	r3, #0
1000aea2:	930a      	str	r3, [sp, #40]	; 0x28
1000aea4:	e67b      	b.n	1000ab9e <_dtoa_r+0x72a>
1000aea6:	2800      	cmp	r0, #0
1000aea8:	d000      	beq.n	1000aeac <_dtoa_r+0xa38>
1000aeaa:	e729      	b.n	1000ad00 <_dtoa_r+0x88c>
1000aeac:	07fb      	lsls	r3, r7, #31
1000aeae:	d500      	bpl.n	1000aeb2 <_dtoa_r+0xa3e>
1000aeb0:	e721      	b.n	1000acf6 <_dtoa_r+0x882>
1000aeb2:	e725      	b.n	1000ad00 <_dtoa_r+0x88c>
1000aeb4:	2300      	movs	r3, #0
1000aeb6:	930a      	str	r3, [sp, #40]	; 0x28
1000aeb8:	f7ff fbc8 	bl	1000a64c <_dtoa_r+0x1d8>
1000aebc:	9b07      	ldr	r3, [sp, #28]
1000aebe:	2b00      	cmp	r3, #0
1000aec0:	d100      	bne.n	1000aec4 <_dtoa_r+0xa50>
1000aec2:	e213      	b.n	1000b2ec <_dtoa_r+0xe78>
1000aec4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000aec6:	2b00      	cmp	r3, #0
1000aec8:	dc00      	bgt.n	1000aecc <_dtoa_r+0xa58>
1000aeca:	e45a      	b.n	1000a782 <_dtoa_r+0x30e>
1000aecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000aece:	4ba4      	ldr	r3, [pc, #656]	; (1000b160 <_dtoa_r+0xcec>)
1000aed0:	3a01      	subs	r2, #1
1000aed2:	0020      	movs	r0, r4
1000aed4:	0029      	movs	r1, r5
1000aed6:	9212      	str	r2, [sp, #72]	; 0x48
1000aed8:	2200      	movs	r2, #0
1000aeda:	f7f6 f923 	bl	10001124 <__aeabi_dmul>
1000aede:	0004      	movs	r4, r0
1000aee0:	000d      	movs	r5, r1
1000aee2:	980d      	ldr	r0, [sp, #52]	; 0x34
1000aee4:	9410      	str	r4, [sp, #64]	; 0x40
1000aee6:	9511      	str	r5, [sp, #68]	; 0x44
1000aee8:	3001      	adds	r0, #1
1000aeea:	f7f6 fe59 	bl	10001ba0 <__aeabi_i2d>
1000aeee:	0022      	movs	r2, r4
1000aef0:	002b      	movs	r3, r5
1000aef2:	f7f6 f917 	bl	10001124 <__aeabi_dmul>
1000aef6:	2200      	movs	r2, #0
1000aef8:	4b9a      	ldr	r3, [pc, #616]	; (1000b164 <_dtoa_r+0xcf0>)
1000aefa:	f7f5 fba1 	bl	10000640 <__aeabi_dadd>
1000aefe:	0006      	movs	r6, r0
1000af00:	4a99      	ldr	r2, [pc, #612]	; (1000b168 <_dtoa_r+0xcf4>)
1000af02:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000af04:	188f      	adds	r7, r1, r2
1000af06:	930d      	str	r3, [sp, #52]	; 0x34
1000af08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000af0a:	9614      	str	r6, [sp, #80]	; 0x50
1000af0c:	9715      	str	r7, [sp, #84]	; 0x54
1000af0e:	3b01      	subs	r3, #1
1000af10:	4e96      	ldr	r6, [pc, #600]	; (1000b16c <_dtoa_r+0xcf8>)
1000af12:	00db      	lsls	r3, r3, #3
1000af14:	18f3      	adds	r3, r6, r3
1000af16:	685c      	ldr	r4, [r3, #4]
1000af18:	681b      	ldr	r3, [r3, #0]
1000af1a:	9316      	str	r3, [sp, #88]	; 0x58
1000af1c:	9417      	str	r4, [sp, #92]	; 0x5c
1000af1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000af20:	9d11      	ldr	r5, [sp, #68]	; 0x44
1000af22:	0029      	movs	r1, r5
1000af24:	0020      	movs	r0, r4
1000af26:	f7f7 f90b 	bl	10002140 <__aeabi_d2iz>
1000af2a:	9010      	str	r0, [sp, #64]	; 0x40
1000af2c:	f7f6 fe38 	bl	10001ba0 <__aeabi_i2d>
1000af30:	0002      	movs	r2, r0
1000af32:	000b      	movs	r3, r1
1000af34:	0020      	movs	r0, r4
1000af36:	0029      	movs	r1, r5
1000af38:	f7f6 fb1e 	bl	10001578 <__aeabi_dsub>
1000af3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000af3e:	000d      	movs	r5, r1
1000af40:	9906      	ldr	r1, [sp, #24]
1000af42:	3330      	adds	r3, #48	; 0x30
1000af44:	1c4f      	adds	r7, r1, #1
1000af46:	990a      	ldr	r1, [sp, #40]	; 0x28
1000af48:	0004      	movs	r4, r0
1000af4a:	b2d8      	uxtb	r0, r3
1000af4c:	9010      	str	r0, [sp, #64]	; 0x40
1000af4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000af50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000af52:	2900      	cmp	r1, #0
1000af54:	d100      	bne.n	1000af58 <_dtoa_r+0xae4>
1000af56:	e12e      	b.n	1000b1b6 <_dtoa_r+0xd42>
1000af58:	2000      	movs	r0, #0
1000af5a:	4985      	ldr	r1, [pc, #532]	; (1000b170 <_dtoa_r+0xcfc>)
1000af5c:	f7f5 fe60 	bl	10000c20 <__aeabi_ddiv>
1000af60:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000af62:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000af64:	f7f6 fb08 	bl	10001578 <__aeabi_dsub>
1000af68:	9b06      	ldr	r3, [sp, #24]
1000af6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000af6c:	9014      	str	r0, [sp, #80]	; 0x50
1000af6e:	9115      	str	r1, [sp, #84]	; 0x54
1000af70:	701a      	strb	r2, [r3, #0]
1000af72:	0022      	movs	r2, r4
1000af74:	002b      	movs	r3, r5
1000af76:	f7f6 ff77 	bl	10001e68 <__aeabi_dcmpgt>
1000af7a:	2800      	cmp	r0, #0
1000af7c:	d000      	beq.n	1000af80 <_dtoa_r+0xb0c>
1000af7e:	e1c8      	b.n	1000b312 <_dtoa_r+0xe9e>
1000af80:	4652      	mov	r2, sl
1000af82:	9216      	str	r2, [sp, #88]	; 0x58
1000af84:	4642      	mov	r2, r8
1000af86:	2300      	movs	r3, #0
1000af88:	9219      	str	r2, [sp, #100]	; 0x64
1000af8a:	465a      	mov	r2, fp
1000af8c:	469a      	mov	sl, r3
1000af8e:	46bb      	mov	fp, r7
1000af90:	9e14      	ldr	r6, [sp, #80]	; 0x50
1000af92:	9f15      	ldr	r7, [sp, #84]	; 0x54
1000af94:	9210      	str	r2, [sp, #64]	; 0x40
1000af96:	e034      	b.n	1000b002 <_dtoa_r+0xb8e>
1000af98:	2301      	movs	r3, #1
1000af9a:	469c      	mov	ip, r3
1000af9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000af9e:	44e2      	add	sl, ip
1000afa0:	459a      	cmp	sl, r3
1000afa2:	db00      	blt.n	1000afa6 <_dtoa_r+0xb32>
1000afa4:	e1bb      	b.n	1000b31e <_dtoa_r+0xeaa>
1000afa6:	2200      	movs	r2, #0
1000afa8:	0030      	movs	r0, r6
1000afaa:	0039      	movs	r1, r7
1000afac:	4b6c      	ldr	r3, [pc, #432]	; (1000b160 <_dtoa_r+0xcec>)
1000afae:	f7f6 f8b9 	bl	10001124 <__aeabi_dmul>
1000afb2:	2200      	movs	r2, #0
1000afb4:	4b6a      	ldr	r3, [pc, #424]	; (1000b160 <_dtoa_r+0xcec>)
1000afb6:	0006      	movs	r6, r0
1000afb8:	000f      	movs	r7, r1
1000afba:	0020      	movs	r0, r4
1000afbc:	0029      	movs	r1, r5
1000afbe:	f7f6 f8b1 	bl	10001124 <__aeabi_dmul>
1000afc2:	000d      	movs	r5, r1
1000afc4:	0004      	movs	r4, r0
1000afc6:	f7f7 f8bb 	bl	10002140 <__aeabi_d2iz>
1000afca:	4680      	mov	r8, r0
1000afcc:	f7f6 fde8 	bl	10001ba0 <__aeabi_i2d>
1000afd0:	0002      	movs	r2, r0
1000afd2:	000b      	movs	r3, r1
1000afd4:	0020      	movs	r0, r4
1000afd6:	0029      	movs	r1, r5
1000afd8:	f7f6 face 	bl	10001578 <__aeabi_dsub>
1000afdc:	2301      	movs	r3, #1
1000afde:	469c      	mov	ip, r3
1000afe0:	4643      	mov	r3, r8
1000afe2:	000d      	movs	r5, r1
1000afe4:	0004      	movs	r4, r0
1000afe6:	4651      	mov	r1, sl
1000afe8:	9a06      	ldr	r2, [sp, #24]
1000afea:	3330      	adds	r3, #48	; 0x30
1000afec:	5453      	strb	r3, [r2, r1]
1000afee:	0020      	movs	r0, r4
1000aff0:	0032      	movs	r2, r6
1000aff2:	003b      	movs	r3, r7
1000aff4:	0029      	movs	r1, r5
1000aff6:	44e3      	add	fp, ip
1000aff8:	f7f6 ff22 	bl	10001e40 <__aeabi_dcmplt>
1000affc:	2800      	cmp	r0, #0
1000affe:	d000      	beq.n	1000b002 <_dtoa_r+0xb8e>
1000b000:	e184      	b.n	1000b30c <_dtoa_r+0xe98>
1000b002:	0022      	movs	r2, r4
1000b004:	002b      	movs	r3, r5
1000b006:	2000      	movs	r0, #0
1000b008:	495a      	ldr	r1, [pc, #360]	; (1000b174 <_dtoa_r+0xd00>)
1000b00a:	f7f6 fab5 	bl	10001578 <__aeabi_dsub>
1000b00e:	0032      	movs	r2, r6
1000b010:	003b      	movs	r3, r7
1000b012:	f7f6 ff15 	bl	10001e40 <__aeabi_dcmplt>
1000b016:	2800      	cmp	r0, #0
1000b018:	d0be      	beq.n	1000af98 <_dtoa_r+0xb24>
1000b01a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b01c:	465f      	mov	r7, fp
1000b01e:	469b      	mov	fp, r3
1000b020:	2201      	movs	r2, #1
1000b022:	4694      	mov	ip, r2
1000b024:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b026:	9a06      	ldr	r2, [sp, #24]
1000b028:	4463      	add	r3, ip
1000b02a:	4698      	mov	r8, r3
1000b02c:	e002      	b.n	1000b034 <_dtoa_r+0xbc0>
1000b02e:	42ba      	cmp	r2, r7
1000b030:	d100      	bne.n	1000b034 <_dtoa_r+0xbc0>
1000b032:	e135      	b.n	1000b2a0 <_dtoa_r+0xe2c>
1000b034:	003e      	movs	r6, r7
1000b036:	3f01      	subs	r7, #1
1000b038:	783b      	ldrb	r3, [r7, #0]
1000b03a:	2b39      	cmp	r3, #57	; 0x39
1000b03c:	d0f7      	beq.n	1000b02e <_dtoa_r+0xbba>
1000b03e:	3301      	adds	r3, #1
1000b040:	b2db      	uxtb	r3, r3
1000b042:	703b      	strb	r3, [r7, #0]
1000b044:	4643      	mov	r3, r8
1000b046:	9308      	str	r3, [sp, #32]
1000b048:	e555      	b.n	1000aaf6 <_dtoa_r+0x682>
1000b04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b04c:	2a00      	cmp	r2, #0
1000b04e:	d100      	bne.n	1000b052 <_dtoa_r+0xbde>
1000b050:	e0ad      	b.n	1000b1ae <_dtoa_r+0xd3a>
1000b052:	4a49      	ldr	r2, [pc, #292]	; (1000b178 <_dtoa_r+0xd04>)
1000b054:	4694      	mov	ip, r2
1000b056:	4463      	add	r3, ip
1000b058:	9a08      	ldr	r2, [sp, #32]
1000b05a:	4498      	add	r8, r3
1000b05c:	4694      	mov	ip, r2
1000b05e:	449c      	add	ip, r3
1000b060:	4663      	mov	r3, ip
1000b062:	0015      	movs	r5, r2
1000b064:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1000b066:	9308      	str	r3, [sp, #32]
1000b068:	e6fb      	b.n	1000ae62 <_dtoa_r+0x9ee>
1000b06a:	2331      	movs	r3, #49	; 0x31
1000b06c:	9a06      	ldr	r2, [sp, #24]
1000b06e:	7013      	strb	r3, [r2, #0]
1000b070:	9b08      	ldr	r3, [sp, #32]
1000b072:	3301      	adds	r3, #1
1000b074:	9308      	str	r3, [sp, #32]
1000b076:	e52b      	b.n	1000aad0 <_dtoa_r+0x65c>
1000b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b07a:	2b00      	cmp	r3, #0
1000b07c:	d100      	bne.n	1000b080 <_dtoa_r+0xc0c>
1000b07e:	e107      	b.n	1000b290 <_dtoa_r+0xe1c>
1000b080:	9804      	ldr	r0, [sp, #16]
1000b082:	9905      	ldr	r1, [sp, #20]
1000b084:	425c      	negs	r4, r3
1000b086:	230f      	movs	r3, #15
1000b088:	4e38      	ldr	r6, [pc, #224]	; (1000b16c <_dtoa_r+0xcf8>)
1000b08a:	4023      	ands	r3, r4
1000b08c:	00db      	lsls	r3, r3, #3
1000b08e:	18f3      	adds	r3, r6, r3
1000b090:	681a      	ldr	r2, [r3, #0]
1000b092:	685b      	ldr	r3, [r3, #4]
1000b094:	f7f6 f846 	bl	10001124 <__aeabi_dmul>
1000b098:	1124      	asrs	r4, r4, #4
1000b09a:	9012      	str	r0, [sp, #72]	; 0x48
1000b09c:	9113      	str	r1, [sp, #76]	; 0x4c
1000b09e:	2c00      	cmp	r4, #0
1000b0a0:	d100      	bne.n	1000b0a4 <_dtoa_r+0xc30>
1000b0a2:	e15f      	b.n	1000b364 <_dtoa_r+0xef0>
1000b0a4:	2300      	movs	r3, #0
1000b0a6:	2702      	movs	r7, #2
1000b0a8:	2601      	movs	r6, #1
1000b0aa:	4d2c      	ldr	r5, [pc, #176]	; (1000b15c <_dtoa_r+0xce8>)
1000b0ac:	4226      	tst	r6, r4
1000b0ae:	d005      	beq.n	1000b0bc <_dtoa_r+0xc48>
1000b0b0:	682a      	ldr	r2, [r5, #0]
1000b0b2:	686b      	ldr	r3, [r5, #4]
1000b0b4:	f7f6 f836 	bl	10001124 <__aeabi_dmul>
1000b0b8:	2301      	movs	r3, #1
1000b0ba:	3701      	adds	r7, #1
1000b0bc:	1064      	asrs	r4, r4, #1
1000b0be:	3508      	adds	r5, #8
1000b0c0:	2c00      	cmp	r4, #0
1000b0c2:	d1f3      	bne.n	1000b0ac <_dtoa_r+0xc38>
1000b0c4:	9010      	str	r0, [sp, #64]	; 0x40
1000b0c6:	9111      	str	r1, [sp, #68]	; 0x44
1000b0c8:	970d      	str	r7, [sp, #52]	; 0x34
1000b0ca:	2b00      	cmp	r3, #0
1000b0cc:	d001      	beq.n	1000b0d2 <_dtoa_r+0xc5e>
1000b0ce:	f7ff fb1b 	bl	1000a708 <_dtoa_r+0x294>
1000b0d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b0d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
1000b0d6:	9310      	str	r3, [sp, #64]	; 0x40
1000b0d8:	9411      	str	r4, [sp, #68]	; 0x44
1000b0da:	f7ff fb15 	bl	1000a708 <_dtoa_r+0x294>
1000b0de:	2301      	movs	r3, #1
1000b0e0:	1bdb      	subs	r3, r3, r7
1000b0e2:	9308      	str	r3, [sp, #32]
1000b0e4:	2300      	movs	r3, #0
1000b0e6:	4698      	mov	r8, r3
1000b0e8:	930c      	str	r3, [sp, #48]	; 0x30
1000b0ea:	e42e      	b.n	1000a94a <_dtoa_r+0x4d6>
1000b0ec:	4647      	mov	r7, r8
1000b0ee:	0002      	movs	r2, r0
1000b0f0:	000b      	movs	r3, r1
1000b0f2:	f7f5 faa5 	bl	10000640 <__aeabi_dadd>
1000b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b0f8:	0004      	movs	r4, r0
1000b0fa:	3301      	adds	r3, #1
1000b0fc:	4698      	mov	r8, r3
1000b0fe:	9308      	str	r3, [sp, #32]
1000b100:	9a02      	ldr	r2, [sp, #8]
1000b102:	9b03      	ldr	r3, [sp, #12]
1000b104:	000d      	movs	r5, r1
1000b106:	f7f6 feaf 	bl	10001e68 <__aeabi_dcmpgt>
1000b10a:	2800      	cmp	r0, #0
1000b10c:	d109      	bne.n	1000b122 <_dtoa_r+0xcae>
1000b10e:	9a02      	ldr	r2, [sp, #8]
1000b110:	9b03      	ldr	r3, [sp, #12]
1000b112:	0020      	movs	r0, r4
1000b114:	0029      	movs	r1, r5
1000b116:	f7f6 fe8d 	bl	10001e34 <__aeabi_dcmpeq>
1000b11a:	2800      	cmp	r0, #0
1000b11c:	d003      	beq.n	1000b126 <_dtoa_r+0xcb2>
1000b11e:	07f6      	lsls	r6, r6, #31
1000b120:	d501      	bpl.n	1000b126 <_dtoa_r+0xcb2>
1000b122:	9a06      	ldr	r2, [sp, #24]
1000b124:	e786      	b.n	1000b034 <_dtoa_r+0xbc0>
1000b126:	003e      	movs	r6, r7
1000b128:	e4e5      	b.n	1000aaf6 <_dtoa_r+0x682>
1000b12a:	4648      	mov	r0, r9
1000b12c:	6861      	ldr	r1, [r4, #4]
1000b12e:	f000 fea9 	bl	1000be84 <_Balloc>
1000b132:	1e05      	subs	r5, r0, #0
1000b134:	d100      	bne.n	1000b138 <_dtoa_r+0xcc4>
1000b136:	e14c      	b.n	1000b3d2 <_dtoa_r+0xf5e>
1000b138:	0021      	movs	r1, r4
1000b13a:	6922      	ldr	r2, [r4, #16]
1000b13c:	310c      	adds	r1, #12
1000b13e:	3202      	adds	r2, #2
1000b140:	0092      	lsls	r2, r2, #2
1000b142:	300c      	adds	r0, #12
1000b144:	f7fc fa8e 	bl	10007664 <memcpy>
1000b148:	2201      	movs	r2, #1
1000b14a:	0029      	movs	r1, r5
1000b14c:	4648      	mov	r0, r9
1000b14e:	f001 f8e3 	bl	1000c318 <__lshift>
1000b152:	4680      	mov	r8, r0
1000b154:	e554      	b.n	1000ac00 <_dtoa_r+0x78c>
1000b156:	46c0      	nop			; (mov r8, r8)
1000b158:	1000eae0 	.word	0x1000eae0
1000b15c:	1000e238 	.word	0x1000e238
1000b160:	40240000 	.word	0x40240000
1000b164:	401c0000 	.word	0x401c0000
1000b168:	fcc00000 	.word	0xfcc00000
1000b16c:	1000e260 	.word	0x1000e260
1000b170:	3fe00000 	.word	0x3fe00000
1000b174:	3ff00000 	.word	0x3ff00000
1000b178:	00000433 	.word	0x00000433
1000b17c:	0021      	movs	r1, r4
1000b17e:	0032      	movs	r2, r6
1000b180:	4648      	mov	r0, r9
1000b182:	f001 f861 	bl	1000c248 <__pow5mult>
1000b186:	465a      	mov	r2, fp
1000b188:	0001      	movs	r1, r0
1000b18a:	0004      	movs	r4, r0
1000b18c:	4648      	mov	r0, r9
1000b18e:	f000 ff83 	bl	1000c098 <__multiply>
1000b192:	0007      	movs	r7, r0
1000b194:	4659      	mov	r1, fp
1000b196:	4648      	mov	r0, r9
1000b198:	f000 fe9c 	bl	1000bed4 <_Bfree>
1000b19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b19e:	46bb      	mov	fp, r7
1000b1a0:	1b9b      	subs	r3, r3, r6
1000b1a2:	930b      	str	r3, [sp, #44]	; 0x2c
1000b1a4:	d101      	bne.n	1000b1aa <_dtoa_r+0xd36>
1000b1a6:	f7ff fc10 	bl	1000a9ca <_dtoa_r+0x556>
1000b1aa:	f7ff fc08 	bl	1000a9be <_dtoa_r+0x54a>
1000b1ae:	2336      	movs	r3, #54	; 0x36
1000b1b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
1000b1b2:	1a9b      	subs	r3, r3, r2
1000b1b4:	e750      	b.n	1000b058 <_dtoa_r+0xbe4>
1000b1b6:	9814      	ldr	r0, [sp, #80]	; 0x50
1000b1b8:	9915      	ldr	r1, [sp, #84]	; 0x54
1000b1ba:	f7f5 ffb3 	bl	10001124 <__aeabi_dmul>
1000b1be:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b1c0:	900e      	str	r0, [sp, #56]	; 0x38
1000b1c2:	910f      	str	r1, [sp, #60]	; 0x3c
1000b1c4:	9906      	ldr	r1, [sp, #24]
1000b1c6:	700b      	strb	r3, [r1, #0]
1000b1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b1ca:	468c      	mov	ip, r1
1000b1cc:	001a      	movs	r2, r3
1000b1ce:	4462      	add	r2, ip
1000b1d0:	920a      	str	r2, [sp, #40]	; 0x28
1000b1d2:	2b01      	cmp	r3, #1
1000b1d4:	d024      	beq.n	1000b220 <_dtoa_r+0xdac>
1000b1d6:	4653      	mov	r3, sl
1000b1d8:	46c2      	mov	sl, r8
1000b1da:	46b0      	mov	r8, r6
1000b1dc:	003e      	movs	r6, r7
1000b1de:	930d      	str	r3, [sp, #52]	; 0x34
1000b1e0:	2200      	movs	r2, #0
1000b1e2:	4b7f      	ldr	r3, [pc, #508]	; (1000b3e0 <_dtoa_r+0xf6c>)
1000b1e4:	0020      	movs	r0, r4
1000b1e6:	0029      	movs	r1, r5
1000b1e8:	f7f5 ff9c 	bl	10001124 <__aeabi_dmul>
1000b1ec:	000d      	movs	r5, r1
1000b1ee:	0004      	movs	r4, r0
1000b1f0:	f7f6 ffa6 	bl	10002140 <__aeabi_d2iz>
1000b1f4:	0007      	movs	r7, r0
1000b1f6:	f7f6 fcd3 	bl	10001ba0 <__aeabi_i2d>
1000b1fa:	000b      	movs	r3, r1
1000b1fc:	0002      	movs	r2, r0
1000b1fe:	0029      	movs	r1, r5
1000b200:	0020      	movs	r0, r4
1000b202:	f7f6 f9b9 	bl	10001578 <__aeabi_dsub>
1000b206:	3730      	adds	r7, #48	; 0x30
1000b208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000b20a:	7037      	strb	r7, [r6, #0]
1000b20c:	3601      	adds	r6, #1
1000b20e:	0004      	movs	r4, r0
1000b210:	000d      	movs	r5, r1
1000b212:	42b3      	cmp	r3, r6
1000b214:	d1e4      	bne.n	1000b1e0 <_dtoa_r+0xd6c>
1000b216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b218:	4646      	mov	r6, r8
1000b21a:	46d0      	mov	r8, sl
1000b21c:	469a      	mov	sl, r3
1000b21e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1000b220:	2200      	movs	r2, #0
1000b222:	980e      	ldr	r0, [sp, #56]	; 0x38
1000b224:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000b226:	4b6f      	ldr	r3, [pc, #444]	; (1000b3e4 <_dtoa_r+0xf70>)
1000b228:	f7f5 fa0a 	bl	10000640 <__aeabi_dadd>
1000b22c:	0022      	movs	r2, r4
1000b22e:	002b      	movs	r3, r5
1000b230:	f7f6 fe06 	bl	10001e40 <__aeabi_dcmplt>
1000b234:	2800      	cmp	r0, #0
1000b236:	d000      	beq.n	1000b23a <_dtoa_r+0xdc6>
1000b238:	e6f2      	b.n	1000b020 <_dtoa_r+0xbac>
1000b23a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b23e:	2000      	movs	r0, #0
1000b240:	4968      	ldr	r1, [pc, #416]	; (1000b3e4 <_dtoa_r+0xf70>)
1000b242:	f7f6 f999 	bl	10001578 <__aeabi_dsub>
1000b246:	0022      	movs	r2, r4
1000b248:	002b      	movs	r3, r5
1000b24a:	f7f6 fe0d 	bl	10001e68 <__aeabi_dcmpgt>
1000b24e:	2800      	cmp	r0, #0
1000b250:	d10b      	bne.n	1000b26a <_dtoa_r+0xdf6>
1000b252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1000b254:	2b00      	cmp	r3, #0
1000b256:	da01      	bge.n	1000b25c <_dtoa_r+0xde8>
1000b258:	f7ff fb93 	bl	1000a982 <_dtoa_r+0x50e>
1000b25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b25e:	2b0e      	cmp	r3, #14
1000b260:	dd01      	ble.n	1000b266 <_dtoa_r+0xdf2>
1000b262:	f7ff fb8e 	bl	1000a982 <_dtoa_r+0x50e>
1000b266:	f7ff fa95 	bl	1000a794 <_dtoa_r+0x320>
1000b26a:	003e      	movs	r6, r7
1000b26c:	3f01      	subs	r7, #1
1000b26e:	783b      	ldrb	r3, [r7, #0]
1000b270:	2b30      	cmp	r3, #48	; 0x30
1000b272:	d0fa      	beq.n	1000b26a <_dtoa_r+0xdf6>
1000b274:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b276:	3301      	adds	r3, #1
1000b278:	9308      	str	r3, [sp, #32]
1000b27a:	e43c      	b.n	1000aaf6 <_dtoa_r+0x682>
1000b27c:	46d0      	mov	r8, sl
1000b27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b280:	465f      	mov	r7, fp
1000b282:	3301      	adds	r3, #1
1000b284:	46a2      	mov	sl, r4
1000b286:	46b3      	mov	fp, r6
1000b288:	4644      	mov	r4, r8
1000b28a:	9308      	str	r3, [sp, #32]
1000b28c:	f7ff fc08 	bl	1000aaa0 <_dtoa_r+0x62c>
1000b290:	9b04      	ldr	r3, [sp, #16]
1000b292:	9c05      	ldr	r4, [sp, #20]
1000b294:	9310      	str	r3, [sp, #64]	; 0x40
1000b296:	9411      	str	r4, [sp, #68]	; 0x44
1000b298:	2302      	movs	r3, #2
1000b29a:	930d      	str	r3, [sp, #52]	; 0x34
1000b29c:	f7ff fa34 	bl	1000a708 <_dtoa_r+0x294>
1000b2a0:	2201      	movs	r2, #1
1000b2a2:	4694      	mov	ip, r2
1000b2a4:	2331      	movs	r3, #49	; 0x31
1000b2a6:	44e0      	add	r8, ip
1000b2a8:	e6cb      	b.n	1000b042 <_dtoa_r+0xbce>
1000b2aa:	4653      	mov	r3, sl
1000b2ac:	4652      	mov	r2, sl
1000b2ae:	1c5d      	adds	r5, r3, #1
1000b2b0:	2339      	movs	r3, #57	; 0x39
1000b2b2:	7013      	strb	r3, [r2, #0]
1000b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b2b6:	46a2      	mov	sl, r4
1000b2b8:	3301      	adds	r3, #1
1000b2ba:	4644      	mov	r4, r8
1000b2bc:	9a06      	ldr	r2, [sp, #24]
1000b2be:	9308      	str	r3, [sp, #32]
1000b2c0:	f7ff fbff 	bl	1000aac2 <_dtoa_r+0x64e>
1000b2c4:	2300      	movs	r3, #0
1000b2c6:	2400      	movs	r4, #0
1000b2c8:	9304      	str	r3, [sp, #16]
1000b2ca:	e55d      	b.n	1000ad88 <_dtoa_r+0x914>
1000b2cc:	4645      	mov	r5, r8
1000b2ce:	46d0      	mov	r8, sl
1000b2d0:	46ba      	mov	sl, r7
1000b2d2:	465f      	mov	r7, fp
1000b2d4:	46b3      	mov	fp, r6
1000b2d6:	2f39      	cmp	r7, #57	; 0x39
1000b2d8:	d0e7      	beq.n	1000b2aa <_dtoa_r+0xe36>
1000b2da:	2d00      	cmp	r5, #0
1000b2dc:	dd00      	ble.n	1000b2e0 <_dtoa_r+0xe6c>
1000b2de:	e50d      	b.n	1000acfc <_dtoa_r+0x888>
1000b2e0:	e50e      	b.n	1000ad00 <_dtoa_r+0x88c>
1000b2e2:	46d0      	mov	r8, sl
1000b2e4:	46ba      	mov	sl, r7
1000b2e6:	465f      	mov	r7, fp
1000b2e8:	46b3      	mov	fp, r6
1000b2ea:	e509      	b.n	1000ad00 <_dtoa_r+0x88c>
1000b2ec:	980d      	ldr	r0, [sp, #52]	; 0x34
1000b2ee:	f7f6 fc57 	bl	10001ba0 <__aeabi_i2d>
1000b2f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000b2f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b2f6:	f7f5 ff15 	bl	10001124 <__aeabi_dmul>
1000b2fa:	4b3b      	ldr	r3, [pc, #236]	; (1000b3e8 <_dtoa_r+0xf74>)
1000b2fc:	2200      	movs	r2, #0
1000b2fe:	f7f5 f99f 	bl	10000640 <__aeabi_dadd>
1000b302:	4b3a      	ldr	r3, [pc, #232]	; (1000b3ec <_dtoa_r+0xf78>)
1000b304:	0006      	movs	r6, r0
1000b306:	18cf      	adds	r7, r1, r3
1000b308:	f7ff fa21 	bl	1000a74e <_dtoa_r+0x2da>
1000b30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b30e:	465f      	mov	r7, fp
1000b310:	469b      	mov	fp, r3
1000b312:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b314:	003e      	movs	r6, r7
1000b316:	3301      	adds	r3, #1
1000b318:	9308      	str	r3, [sp, #32]
1000b31a:	f7ff fbec 	bl	1000aaf6 <_dtoa_r+0x682>
1000b31e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000b320:	469a      	mov	sl, r3
1000b322:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000b324:	4698      	mov	r8, r3
1000b326:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b328:	469b      	mov	fp, r3
1000b32a:	f7ff fa2a 	bl	1000a782 <_dtoa_r+0x30e>
1000b32e:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000b330:	2b02      	cmp	r3, #2
1000b332:	dd03      	ble.n	1000b33c <_dtoa_r+0xec8>
1000b334:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000b336:	9609      	str	r6, [sp, #36]	; 0x24
1000b338:	9307      	str	r3, [sp, #28]
1000b33a:	e513      	b.n	1000ad64 <_dtoa_r+0x8f0>
1000b33c:	9904      	ldr	r1, [sp, #16]
1000b33e:	f7fe ffef 	bl	1000a320 <quorem>
1000b342:	9b06      	ldr	r3, [sp, #24]
1000b344:	3030      	adds	r0, #48	; 0x30
1000b346:	7018      	strb	r0, [r3, #0]
1000b348:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b34a:	0007      	movs	r7, r0
1000b34c:	9308      	str	r3, [sp, #32]
1000b34e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000b350:	9307      	str	r3, [sp, #28]
1000b352:	f7ff fb9b 	bl	1000aa8c <_dtoa_r+0x618>
1000b356:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000b358:	9307      	str	r3, [sp, #28]
1000b35a:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000b35c:	2b02      	cmp	r3, #2
1000b35e:	dd00      	ble.n	1000b362 <_dtoa_r+0xeee>
1000b360:	e500      	b.n	1000ad64 <_dtoa_r+0x8f0>
1000b362:	e440      	b.n	1000abe6 <_dtoa_r+0x772>
1000b364:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b366:	9c13      	ldr	r4, [sp, #76]	; 0x4c
1000b368:	9310      	str	r3, [sp, #64]	; 0x40
1000b36a:	9411      	str	r4, [sp, #68]	; 0x44
1000b36c:	2302      	movs	r3, #2
1000b36e:	930d      	str	r3, [sp, #52]	; 0x34
1000b370:	f7ff f9ca 	bl	1000a708 <_dtoa_r+0x294>
1000b374:	464b      	mov	r3, r9
1000b376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000b378:	2100      	movs	r1, #0
1000b37a:	4648      	mov	r0, r9
1000b37c:	645a      	str	r2, [r3, #68]	; 0x44
1000b37e:	f000 fd81 	bl	1000be84 <_Balloc>
1000b382:	9006      	str	r0, [sp, #24]
1000b384:	2800      	cmp	r0, #0
1000b386:	d014      	beq.n	1000b3b2 <_dtoa_r+0xf3e>
1000b388:	464b      	mov	r3, r9
1000b38a:	9a06      	ldr	r2, [sp, #24]
1000b38c:	641a      	str	r2, [r3, #64]	; 0x40
1000b38e:	2301      	movs	r3, #1
1000b390:	2200      	movs	r2, #0
1000b392:	930a      	str	r3, [sp, #40]	; 0x28
1000b394:	3b02      	subs	r3, #2
1000b396:	9318      	str	r3, [sp, #96]	; 0x60
1000b398:	9227      	str	r2, [sp, #156]	; 0x9c
1000b39a:	9307      	str	r3, [sp, #28]
1000b39c:	f7ff f9f1 	bl	1000a782 <_dtoa_r+0x30e>
1000b3a0:	9b07      	ldr	r3, [sp, #28]
1000b3a2:	46d0      	mov	r8, sl
1000b3a4:	46ba      	mov	sl, r7
1000b3a6:	465f      	mov	r7, fp
1000b3a8:	46b3      	mov	fp, r6
1000b3aa:	2b00      	cmp	r3, #0
1000b3ac:	dc00      	bgt.n	1000b3b0 <_dtoa_r+0xf3c>
1000b3ae:	e4a7      	b.n	1000ad00 <_dtoa_r+0x88c>
1000b3b0:	e495      	b.n	1000acde <_dtoa_r+0x86a>
1000b3b2:	21d5      	movs	r1, #213	; 0xd5
1000b3b4:	2200      	movs	r2, #0
1000b3b6:	4b0e      	ldr	r3, [pc, #56]	; (1000b3f0 <_dtoa_r+0xf7c>)
1000b3b8:	480e      	ldr	r0, [pc, #56]	; (1000b3f4 <_dtoa_r+0xf80>)
1000b3ba:	0049      	lsls	r1, r1, #1
1000b3bc:	f7fb fe68 	bl	10007090 <__assert_func>
1000b3c0:	4b0d      	ldr	r3, [pc, #52]	; (1000b3f8 <_dtoa_r+0xf84>)
1000b3c2:	9306      	str	r3, [sp, #24]
1000b3c4:	f7ff f896 	bl	1000a4f4 <_dtoa_r+0x80>
1000b3c8:	2100      	movs	r1, #0
1000b3ca:	464b      	mov	r3, r9
1000b3cc:	6459      	str	r1, [r3, #68]	; 0x44
1000b3ce:	f7ff f957 	bl	1000a680 <_dtoa_r+0x20c>
1000b3d2:	2200      	movs	r2, #0
1000b3d4:	4b06      	ldr	r3, [pc, #24]	; (1000b3f0 <_dtoa_r+0xf7c>)
1000b3d6:	4807      	ldr	r0, [pc, #28]	; (1000b3f4 <_dtoa_r+0xf80>)
1000b3d8:	4908      	ldr	r1, [pc, #32]	; (1000b3fc <_dtoa_r+0xf88>)
1000b3da:	f7fb fe59 	bl	10007090 <__assert_func>
1000b3de:	46c0      	nop			; (mov r8, r8)
1000b3e0:	40240000 	.word	0x40240000
1000b3e4:	3fe00000 	.word	0x3fe00000
1000b3e8:	401c0000 	.word	0x401c0000
1000b3ec:	fcc00000 	.word	0xfcc00000
1000b3f0:	1000eae4 	.word	0x1000eae4
1000b3f4:	1000eaf8 	.word	0x1000eaf8
1000b3f8:	1000ead4 	.word	0x1000ead4
1000b3fc:	000002ea 	.word	0x000002ea

1000b400 <__sflush_r>:
1000b400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b402:	46c6      	mov	lr, r8
1000b404:	b500      	push	{lr}
1000b406:	220c      	movs	r2, #12
1000b408:	5e8b      	ldrsh	r3, [r1, r2]
1000b40a:	0007      	movs	r7, r0
1000b40c:	000c      	movs	r4, r1
1000b40e:	071a      	lsls	r2, r3, #28
1000b410:	d43c      	bmi.n	1000b48c <__sflush_r+0x8c>
1000b412:	684a      	ldr	r2, [r1, #4]
1000b414:	2a00      	cmp	r2, #0
1000b416:	dd5c      	ble.n	1000b4d2 <__sflush_r+0xd2>
1000b418:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000b41a:	2e00      	cmp	r6, #0
1000b41c:	d032      	beq.n	1000b484 <__sflush_r+0x84>
1000b41e:	2200      	movs	r2, #0
1000b420:	683d      	ldr	r5, [r7, #0]
1000b422:	69e1      	ldr	r1, [r4, #28]
1000b424:	603a      	str	r2, [r7, #0]
1000b426:	04da      	lsls	r2, r3, #19
1000b428:	d457      	bmi.n	1000b4da <__sflush_r+0xda>
1000b42a:	2200      	movs	r2, #0
1000b42c:	2301      	movs	r3, #1
1000b42e:	0038      	movs	r0, r7
1000b430:	47b0      	blx	r6
1000b432:	0002      	movs	r2, r0
1000b434:	1c43      	adds	r3, r0, #1
1000b436:	d067      	beq.n	1000b508 <__sflush_r+0x108>
1000b438:	210c      	movs	r1, #12
1000b43a:	5e63      	ldrsh	r3, [r4, r1]
1000b43c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000b43e:	69e1      	ldr	r1, [r4, #28]
1000b440:	075b      	lsls	r3, r3, #29
1000b442:	d506      	bpl.n	1000b452 <__sflush_r+0x52>
1000b444:	6863      	ldr	r3, [r4, #4]
1000b446:	1ad2      	subs	r2, r2, r3
1000b448:	6b23      	ldr	r3, [r4, #48]	; 0x30
1000b44a:	2b00      	cmp	r3, #0
1000b44c:	d001      	beq.n	1000b452 <__sflush_r+0x52>
1000b44e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1000b450:	1ad2      	subs	r2, r2, r3
1000b452:	2300      	movs	r3, #0
1000b454:	0038      	movs	r0, r7
1000b456:	47b0      	blx	r6
1000b458:	1c43      	adds	r3, r0, #1
1000b45a:	d047      	beq.n	1000b4ec <__sflush_r+0xec>
1000b45c:	2300      	movs	r3, #0
1000b45e:	6063      	str	r3, [r4, #4]
1000b460:	6923      	ldr	r3, [r4, #16]
1000b462:	6023      	str	r3, [r4, #0]
1000b464:	89a3      	ldrh	r3, [r4, #12]
1000b466:	04db      	lsls	r3, r3, #19
1000b468:	d43e      	bmi.n	1000b4e8 <__sflush_r+0xe8>
1000b46a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000b46c:	603d      	str	r5, [r7, #0]
1000b46e:	2900      	cmp	r1, #0
1000b470:	d008      	beq.n	1000b484 <__sflush_r+0x84>
1000b472:	0023      	movs	r3, r4
1000b474:	3340      	adds	r3, #64	; 0x40
1000b476:	4299      	cmp	r1, r3
1000b478:	d002      	beq.n	1000b480 <__sflush_r+0x80>
1000b47a:	0038      	movs	r0, r7
1000b47c:	f000 f976 	bl	1000b76c <_free_r>
1000b480:	2300      	movs	r3, #0
1000b482:	6323      	str	r3, [r4, #48]	; 0x30
1000b484:	2000      	movs	r0, #0
1000b486:	bc80      	pop	{r7}
1000b488:	46b8      	mov	r8, r7
1000b48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b48c:	690e      	ldr	r6, [r1, #16]
1000b48e:	2e00      	cmp	r6, #0
1000b490:	d0f8      	beq.n	1000b484 <__sflush_r+0x84>
1000b492:	680d      	ldr	r5, [r1, #0]
1000b494:	2200      	movs	r2, #0
1000b496:	1bad      	subs	r5, r5, r6
1000b498:	600e      	str	r6, [r1, #0]
1000b49a:	079b      	lsls	r3, r3, #30
1000b49c:	d100      	bne.n	1000b4a0 <__sflush_r+0xa0>
1000b49e:	694a      	ldr	r2, [r1, #20]
1000b4a0:	60a2      	str	r2, [r4, #8]
1000b4a2:	2d00      	cmp	r5, #0
1000b4a4:	dc04      	bgt.n	1000b4b0 <__sflush_r+0xb0>
1000b4a6:	e7ed      	b.n	1000b484 <__sflush_r+0x84>
1000b4a8:	1836      	adds	r6, r6, r0
1000b4aa:	1a2d      	subs	r5, r5, r0
1000b4ac:	2d00      	cmp	r5, #0
1000b4ae:	dde9      	ble.n	1000b484 <__sflush_r+0x84>
1000b4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000b4b2:	0032      	movs	r2, r6
1000b4b4:	4698      	mov	r8, r3
1000b4b6:	0038      	movs	r0, r7
1000b4b8:	002b      	movs	r3, r5
1000b4ba:	69e1      	ldr	r1, [r4, #28]
1000b4bc:	47c0      	blx	r8
1000b4be:	2800      	cmp	r0, #0
1000b4c0:	dcf2      	bgt.n	1000b4a8 <__sflush_r+0xa8>
1000b4c2:	2240      	movs	r2, #64	; 0x40
1000b4c4:	89a3      	ldrh	r3, [r4, #12]
1000b4c6:	4313      	orrs	r3, r2
1000b4c8:	b21b      	sxth	r3, r3
1000b4ca:	2001      	movs	r0, #1
1000b4cc:	81a3      	strh	r3, [r4, #12]
1000b4ce:	4240      	negs	r0, r0
1000b4d0:	e7d9      	b.n	1000b486 <__sflush_r+0x86>
1000b4d2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
1000b4d4:	2a00      	cmp	r2, #0
1000b4d6:	dc9f      	bgt.n	1000b418 <__sflush_r+0x18>
1000b4d8:	e7d4      	b.n	1000b484 <__sflush_r+0x84>
1000b4da:	6d22      	ldr	r2, [r4, #80]	; 0x50
1000b4dc:	e7b0      	b.n	1000b440 <__sflush_r+0x40>
1000b4de:	6062      	str	r2, [r4, #4]
1000b4e0:	6922      	ldr	r2, [r4, #16]
1000b4e2:	6022      	str	r2, [r4, #0]
1000b4e4:	04db      	lsls	r3, r3, #19
1000b4e6:	d5c0      	bpl.n	1000b46a <__sflush_r+0x6a>
1000b4e8:	6520      	str	r0, [r4, #80]	; 0x50
1000b4ea:	e7be      	b.n	1000b46a <__sflush_r+0x6a>
1000b4ec:	683a      	ldr	r2, [r7, #0]
1000b4ee:	210c      	movs	r1, #12
1000b4f0:	5e63      	ldrsh	r3, [r4, r1]
1000b4f2:	2a00      	cmp	r2, #0
1000b4f4:	d0f3      	beq.n	1000b4de <__sflush_r+0xde>
1000b4f6:	2a1d      	cmp	r2, #29
1000b4f8:	d001      	beq.n	1000b4fe <__sflush_r+0xfe>
1000b4fa:	2a16      	cmp	r2, #22
1000b4fc:	d10e      	bne.n	1000b51c <__sflush_r+0x11c>
1000b4fe:	2300      	movs	r3, #0
1000b500:	6063      	str	r3, [r4, #4]
1000b502:	6923      	ldr	r3, [r4, #16]
1000b504:	6023      	str	r3, [r4, #0]
1000b506:	e7b0      	b.n	1000b46a <__sflush_r+0x6a>
1000b508:	683b      	ldr	r3, [r7, #0]
1000b50a:	2b00      	cmp	r3, #0
1000b50c:	d100      	bne.n	1000b510 <__sflush_r+0x110>
1000b50e:	e793      	b.n	1000b438 <__sflush_r+0x38>
1000b510:	2b1d      	cmp	r3, #29
1000b512:	d001      	beq.n	1000b518 <__sflush_r+0x118>
1000b514:	2b16      	cmp	r3, #22
1000b516:	d1d4      	bne.n	1000b4c2 <__sflush_r+0xc2>
1000b518:	603d      	str	r5, [r7, #0]
1000b51a:	e7b3      	b.n	1000b484 <__sflush_r+0x84>
1000b51c:	2240      	movs	r2, #64	; 0x40
1000b51e:	4313      	orrs	r3, r2
1000b520:	e7d3      	b.n	1000b4ca <__sflush_r+0xca>
1000b522:	46c0      	nop			; (mov r8, r8)

1000b524 <_fflush_r>:
1000b524:	b570      	push	{r4, r5, r6, lr}
1000b526:	0005      	movs	r5, r0
1000b528:	000c      	movs	r4, r1
1000b52a:	2800      	cmp	r0, #0
1000b52c:	d002      	beq.n	1000b534 <_fflush_r+0x10>
1000b52e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000b530:	2b00      	cmp	r3, #0
1000b532:	d015      	beq.n	1000b560 <_fflush_r+0x3c>
1000b534:	220c      	movs	r2, #12
1000b536:	5ea3      	ldrsh	r3, [r4, r2]
1000b538:	2b00      	cmp	r3, #0
1000b53a:	d017      	beq.n	1000b56c <_fflush_r+0x48>
1000b53c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000b53e:	07d2      	lsls	r2, r2, #31
1000b540:	d401      	bmi.n	1000b546 <_fflush_r+0x22>
1000b542:	059b      	lsls	r3, r3, #22
1000b544:	d514      	bpl.n	1000b570 <_fflush_r+0x4c>
1000b546:	0028      	movs	r0, r5
1000b548:	0021      	movs	r1, r4
1000b54a:	f7ff ff59 	bl	1000b400 <__sflush_r>
1000b54e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000b550:	0005      	movs	r5, r0
1000b552:	07db      	lsls	r3, r3, #31
1000b554:	d402      	bmi.n	1000b55c <_fflush_r+0x38>
1000b556:	89a3      	ldrh	r3, [r4, #12]
1000b558:	059b      	lsls	r3, r3, #22
1000b55a:	d515      	bpl.n	1000b588 <_fflush_r+0x64>
1000b55c:	0028      	movs	r0, r5
1000b55e:	bd70      	pop	{r4, r5, r6, pc}
1000b560:	f000 f81e 	bl	1000b5a0 <__sinit>
1000b564:	220c      	movs	r2, #12
1000b566:	5ea3      	ldrsh	r3, [r4, r2]
1000b568:	2b00      	cmp	r3, #0
1000b56a:	d1e7      	bne.n	1000b53c <_fflush_r+0x18>
1000b56c:	2500      	movs	r5, #0
1000b56e:	e7f5      	b.n	1000b55c <_fflush_r+0x38>
1000b570:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000b572:	f001 fe6d 	bl	1000d250 <__retarget_lock_acquire_recursive>
1000b576:	0028      	movs	r0, r5
1000b578:	0021      	movs	r1, r4
1000b57a:	f7ff ff41 	bl	1000b400 <__sflush_r>
1000b57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000b580:	0005      	movs	r5, r0
1000b582:	07db      	lsls	r3, r3, #31
1000b584:	d4ea      	bmi.n	1000b55c <_fflush_r+0x38>
1000b586:	e7e6      	b.n	1000b556 <_fflush_r+0x32>
1000b588:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000b58a:	f001 fe68 	bl	1000d25e <__retarget_lock_release_recursive>
1000b58e:	e7e5      	b.n	1000b55c <_fflush_r+0x38>

1000b590 <_cleanup_r>:
1000b590:	b510      	push	{r4, lr}
1000b592:	4902      	ldr	r1, [pc, #8]	; (1000b59c <_cleanup_r+0xc>)
1000b594:	f000 fb5c 	bl	1000bc50 <_fwalk_reent>
1000b598:	bd10      	pop	{r4, pc}
1000b59a:	46c0      	nop			; (mov r8, r8)
1000b59c:	1000b525 	.word	0x1000b525

1000b5a0 <__sinit>:
1000b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b5a2:	46de      	mov	lr, fp
1000b5a4:	4657      	mov	r7, sl
1000b5a6:	464e      	mov	r6, r9
1000b5a8:	4645      	mov	r5, r8
1000b5aa:	b5e0      	push	{r5, r6, r7, lr}
1000b5ac:	0006      	movs	r6, r0
1000b5ae:	4f3d      	ldr	r7, [pc, #244]	; (1000b6a4 <__sinit+0x104>)
1000b5b0:	0038      	movs	r0, r7
1000b5b2:	f001 fe4d 	bl	1000d250 <__retarget_lock_acquire_recursive>
1000b5b6:	6bb4      	ldr	r4, [r6, #56]	; 0x38
1000b5b8:	2c00      	cmp	r4, #0
1000b5ba:	d16a      	bne.n	1000b692 <__sinit+0xf2>
1000b5bc:	4b3a      	ldr	r3, [pc, #232]	; (1000b6a8 <__sinit+0x108>)
1000b5be:	2203      	movs	r2, #3
1000b5c0:	63f3      	str	r3, [r6, #60]	; 0x3c
1000b5c2:	23a6      	movs	r3, #166	; 0xa6
1000b5c4:	005b      	lsls	r3, r3, #1
1000b5c6:	50f4      	str	r4, [r6, r3]
1000b5c8:	3304      	adds	r3, #4
1000b5ca:	50f2      	str	r2, [r6, r3]
1000b5cc:	0032      	movs	r2, r6
1000b5ce:	6875      	ldr	r5, [r6, #4]
1000b5d0:	3259      	adds	r2, #89	; 0x59
1000b5d2:	0028      	movs	r0, r5
1000b5d4:	32ff      	adds	r2, #255	; 0xff
1000b5d6:	3304      	adds	r3, #4
1000b5d8:	50f2      	str	r2, [r6, r3]
1000b5da:	3b51      	subs	r3, #81	; 0x51
1000b5dc:	3bff      	subs	r3, #255	; 0xff
1000b5de:	2208      	movs	r2, #8
1000b5e0:	2100      	movs	r1, #0
1000b5e2:	60eb      	str	r3, [r5, #12]
1000b5e4:	602c      	str	r4, [r5, #0]
1000b5e6:	606c      	str	r4, [r5, #4]
1000b5e8:	60ac      	str	r4, [r5, #8]
1000b5ea:	666c      	str	r4, [r5, #100]	; 0x64
1000b5ec:	612c      	str	r4, [r5, #16]
1000b5ee:	616c      	str	r4, [r5, #20]
1000b5f0:	61ac      	str	r4, [r5, #24]
1000b5f2:	305c      	adds	r0, #92	; 0x5c
1000b5f4:	f7fc f87e 	bl	100076f4 <memset>
1000b5f8:	0028      	movs	r0, r5
1000b5fa:	4b2c      	ldr	r3, [pc, #176]	; (1000b6ac <__sinit+0x10c>)
1000b5fc:	61ed      	str	r5, [r5, #28]
1000b5fe:	469b      	mov	fp, r3
1000b600:	622b      	str	r3, [r5, #32]
1000b602:	4b2b      	ldr	r3, [pc, #172]	; (1000b6b0 <__sinit+0x110>)
1000b604:	3058      	adds	r0, #88	; 0x58
1000b606:	469a      	mov	sl, r3
1000b608:	626b      	str	r3, [r5, #36]	; 0x24
1000b60a:	4b2a      	ldr	r3, [pc, #168]	; (1000b6b4 <__sinit+0x114>)
1000b60c:	4699      	mov	r9, r3
1000b60e:	62ab      	str	r3, [r5, #40]	; 0x28
1000b610:	4b29      	ldr	r3, [pc, #164]	; (1000b6b8 <__sinit+0x118>)
1000b612:	62eb      	str	r3, [r5, #44]	; 0x2c
1000b614:	4698      	mov	r8, r3
1000b616:	f001 fe0e 	bl	1000d236 <__retarget_lock_init_recursive>
1000b61a:	68b5      	ldr	r5, [r6, #8]
1000b61c:	4b27      	ldr	r3, [pc, #156]	; (1000b6bc <__sinit+0x11c>)
1000b61e:	0028      	movs	r0, r5
1000b620:	2208      	movs	r2, #8
1000b622:	2100      	movs	r1, #0
1000b624:	60eb      	str	r3, [r5, #12]
1000b626:	602c      	str	r4, [r5, #0]
1000b628:	606c      	str	r4, [r5, #4]
1000b62a:	60ac      	str	r4, [r5, #8]
1000b62c:	666c      	str	r4, [r5, #100]	; 0x64
1000b62e:	612c      	str	r4, [r5, #16]
1000b630:	616c      	str	r4, [r5, #20]
1000b632:	61ac      	str	r4, [r5, #24]
1000b634:	305c      	adds	r0, #92	; 0x5c
1000b636:	f7fc f85d 	bl	100076f4 <memset>
1000b63a:	465b      	mov	r3, fp
1000b63c:	622b      	str	r3, [r5, #32]
1000b63e:	4653      	mov	r3, sl
1000b640:	626b      	str	r3, [r5, #36]	; 0x24
1000b642:	464b      	mov	r3, r9
1000b644:	0028      	movs	r0, r5
1000b646:	62ab      	str	r3, [r5, #40]	; 0x28
1000b648:	4643      	mov	r3, r8
1000b64a:	61ed      	str	r5, [r5, #28]
1000b64c:	62eb      	str	r3, [r5, #44]	; 0x2c
1000b64e:	3058      	adds	r0, #88	; 0x58
1000b650:	f001 fdf1 	bl	1000d236 <__retarget_lock_init_recursive>
1000b654:	68f5      	ldr	r5, [r6, #12]
1000b656:	4b1a      	ldr	r3, [pc, #104]	; (1000b6c0 <__sinit+0x120>)
1000b658:	0028      	movs	r0, r5
1000b65a:	2208      	movs	r2, #8
1000b65c:	2100      	movs	r1, #0
1000b65e:	60eb      	str	r3, [r5, #12]
1000b660:	602c      	str	r4, [r5, #0]
1000b662:	606c      	str	r4, [r5, #4]
1000b664:	60ac      	str	r4, [r5, #8]
1000b666:	666c      	str	r4, [r5, #100]	; 0x64
1000b668:	612c      	str	r4, [r5, #16]
1000b66a:	616c      	str	r4, [r5, #20]
1000b66c:	61ac      	str	r4, [r5, #24]
1000b66e:	305c      	adds	r0, #92	; 0x5c
1000b670:	f7fc f840 	bl	100076f4 <memset>
1000b674:	465b      	mov	r3, fp
1000b676:	622b      	str	r3, [r5, #32]
1000b678:	4653      	mov	r3, sl
1000b67a:	626b      	str	r3, [r5, #36]	; 0x24
1000b67c:	464b      	mov	r3, r9
1000b67e:	0028      	movs	r0, r5
1000b680:	62ab      	str	r3, [r5, #40]	; 0x28
1000b682:	4643      	mov	r3, r8
1000b684:	61ed      	str	r5, [r5, #28]
1000b686:	62eb      	str	r3, [r5, #44]	; 0x2c
1000b688:	3058      	adds	r0, #88	; 0x58
1000b68a:	f001 fdd4 	bl	1000d236 <__retarget_lock_init_recursive>
1000b68e:	2301      	movs	r3, #1
1000b690:	63b3      	str	r3, [r6, #56]	; 0x38
1000b692:	0038      	movs	r0, r7
1000b694:	f001 fde3 	bl	1000d25e <__retarget_lock_release_recursive>
1000b698:	bcf0      	pop	{r4, r5, r6, r7}
1000b69a:	46bb      	mov	fp, r7
1000b69c:	46b2      	mov	sl, r6
1000b69e:	46a9      	mov	r9, r5
1000b6a0:	46a0      	mov	r8, r4
1000b6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b6a4:	20002198 	.word	0x20002198
1000b6a8:	1000b591 	.word	0x1000b591
1000b6ac:	1000cb05 	.word	0x1000cb05
1000b6b0:	1000cb2d 	.word	0x1000cb2d
1000b6b4:	1000cb6d 	.word	0x1000cb6d
1000b6b8:	1000cb9d 	.word	0x1000cb9d
1000b6bc:	00010009 	.word	0x00010009
1000b6c0:	00020012 	.word	0x00020012

1000b6c4 <_malloc_trim_r>:
1000b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6c6:	46c6      	mov	lr, r8
1000b6c8:	b500      	push	{lr}
1000b6ca:	4688      	mov	r8, r1
1000b6cc:	0005      	movs	r5, r0
1000b6ce:	f7fc f865 	bl	1000779c <__malloc_lock>
1000b6d2:	4f22      	ldr	r7, [pc, #136]	; (1000b75c <_malloc_trim_r+0x98>)
1000b6d4:	68bb      	ldr	r3, [r7, #8]
1000b6d6:	685e      	ldr	r6, [r3, #4]
1000b6d8:	2303      	movs	r3, #3
1000b6da:	439e      	bics	r6, r3
1000b6dc:	4b20      	ldr	r3, [pc, #128]	; (1000b760 <_malloc_trim_r+0x9c>)
1000b6de:	18f4      	adds	r4, r6, r3
1000b6e0:	4643      	mov	r3, r8
1000b6e2:	1ae4      	subs	r4, r4, r3
1000b6e4:	2380      	movs	r3, #128	; 0x80
1000b6e6:	0b24      	lsrs	r4, r4, #12
1000b6e8:	3c01      	subs	r4, #1
1000b6ea:	0324      	lsls	r4, r4, #12
1000b6ec:	015b      	lsls	r3, r3, #5
1000b6ee:	429c      	cmp	r4, r3
1000b6f0:	db07      	blt.n	1000b702 <_malloc_trim_r+0x3e>
1000b6f2:	2100      	movs	r1, #0
1000b6f4:	0028      	movs	r0, r5
1000b6f6:	f7fc f873 	bl	100077e0 <_sbrk_r>
1000b6fa:	68bb      	ldr	r3, [r7, #8]
1000b6fc:	199b      	adds	r3, r3, r6
1000b6fe:	4298      	cmp	r0, r3
1000b700:	d006      	beq.n	1000b710 <_malloc_trim_r+0x4c>
1000b702:	0028      	movs	r0, r5
1000b704:	f7fc f852 	bl	100077ac <__malloc_unlock>
1000b708:	2000      	movs	r0, #0
1000b70a:	bc80      	pop	{r7}
1000b70c:	46b8      	mov	r8, r7
1000b70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b710:	0028      	movs	r0, r5
1000b712:	4261      	negs	r1, r4
1000b714:	f7fc f864 	bl	100077e0 <_sbrk_r>
1000b718:	3001      	adds	r0, #1
1000b71a:	d00d      	beq.n	1000b738 <_malloc_trim_r+0x74>
1000b71c:	2201      	movs	r2, #1
1000b71e:	1b36      	subs	r6, r6, r4
1000b720:	68bb      	ldr	r3, [r7, #8]
1000b722:	4316      	orrs	r6, r2
1000b724:	4a0f      	ldr	r2, [pc, #60]	; (1000b764 <_malloc_trim_r+0xa0>)
1000b726:	605e      	str	r6, [r3, #4]
1000b728:	6813      	ldr	r3, [r2, #0]
1000b72a:	0028      	movs	r0, r5
1000b72c:	1b1b      	subs	r3, r3, r4
1000b72e:	6013      	str	r3, [r2, #0]
1000b730:	f7fc f83c 	bl	100077ac <__malloc_unlock>
1000b734:	2001      	movs	r0, #1
1000b736:	e7e8      	b.n	1000b70a <_malloc_trim_r+0x46>
1000b738:	2100      	movs	r1, #0
1000b73a:	0028      	movs	r0, r5
1000b73c:	f7fc f850 	bl	100077e0 <_sbrk_r>
1000b740:	68ba      	ldr	r2, [r7, #8]
1000b742:	1a83      	subs	r3, r0, r2
1000b744:	2b0f      	cmp	r3, #15
1000b746:	dddc      	ble.n	1000b702 <_malloc_trim_r+0x3e>
1000b748:	4c07      	ldr	r4, [pc, #28]	; (1000b768 <_malloc_trim_r+0xa4>)
1000b74a:	4906      	ldr	r1, [pc, #24]	; (1000b764 <_malloc_trim_r+0xa0>)
1000b74c:	6824      	ldr	r4, [r4, #0]
1000b74e:	1b00      	subs	r0, r0, r4
1000b750:	6008      	str	r0, [r1, #0]
1000b752:	2101      	movs	r1, #1
1000b754:	430b      	orrs	r3, r1
1000b756:	6053      	str	r3, [r2, #4]
1000b758:	e7d3      	b.n	1000b702 <_malloc_trim_r+0x3e>
1000b75a:	46c0      	nop			; (mov r8, r8)
1000b75c:	20000370 	.word	0x20000370
1000b760:	00000fef 	.word	0x00000fef
1000b764:	2000249c 	.word	0x2000249c
1000b768:	200007e8 	.word	0x200007e8

1000b76c <_free_r>:
1000b76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b76e:	46ce      	mov	lr, r9
1000b770:	4647      	mov	r7, r8
1000b772:	0005      	movs	r5, r0
1000b774:	000c      	movs	r4, r1
1000b776:	b580      	push	{r7, lr}
1000b778:	2900      	cmp	r1, #0
1000b77a:	d057      	beq.n	1000b82c <_free_r+0xc0>
1000b77c:	f7fc f80e 	bl	1000779c <__malloc_lock>
1000b780:	2301      	movs	r3, #1
1000b782:	0021      	movs	r1, r4
1000b784:	469c      	mov	ip, r3
1000b786:	3908      	subs	r1, #8
1000b788:	6848      	ldr	r0, [r1, #4]
1000b78a:	4662      	mov	r2, ip
1000b78c:	0003      	movs	r3, r0
1000b78e:	2403      	movs	r4, #3
1000b790:	4393      	bics	r3, r2
1000b792:	18cf      	adds	r7, r1, r3
1000b794:	687a      	ldr	r2, [r7, #4]
1000b796:	4e65      	ldr	r6, [pc, #404]	; (1000b92c <_free_r+0x1c0>)
1000b798:	43a2      	bics	r2, r4
1000b79a:	68b4      	ldr	r4, [r6, #8]
1000b79c:	42bc      	cmp	r4, r7
1000b79e:	d100      	bne.n	1000b7a2 <_free_r+0x36>
1000b7a0:	e070      	b.n	1000b884 <_free_r+0x118>
1000b7a2:	18bc      	adds	r4, r7, r2
1000b7a4:	46a1      	mov	r9, r4
1000b7a6:	4664      	mov	r4, ip
1000b7a8:	607a      	str	r2, [r7, #4]
1000b7aa:	4204      	tst	r4, r0
1000b7ac:	d121      	bne.n	1000b7f2 <_free_r+0x86>
1000b7ae:	6808      	ldr	r0, [r1, #0]
1000b7b0:	1a09      	subs	r1, r1, r0
1000b7b2:	181b      	adds	r3, r3, r0
1000b7b4:	6888      	ldr	r0, [r1, #8]
1000b7b6:	4680      	mov	r8, r0
1000b7b8:	4648      	mov	r0, r9
1000b7ba:	6840      	ldr	r0, [r0, #4]
1000b7bc:	4020      	ands	r0, r4
1000b7be:	0034      	movs	r4, r6
1000b7c0:	3408      	adds	r4, #8
1000b7c2:	4681      	mov	r9, r0
1000b7c4:	45a0      	cmp	r8, r4
1000b7c6:	d051      	beq.n	1000b86c <_free_r+0x100>
1000b7c8:	4640      	mov	r0, r8
1000b7ca:	68cc      	ldr	r4, [r1, #12]
1000b7cc:	60c4      	str	r4, [r0, #12]
1000b7ce:	60a0      	str	r0, [r4, #8]
1000b7d0:	4648      	mov	r0, r9
1000b7d2:	2800      	cmp	r0, #0
1000b7d4:	d111      	bne.n	1000b7fa <_free_r+0x8e>
1000b7d6:	189b      	adds	r3, r3, r2
1000b7d8:	4855      	ldr	r0, [pc, #340]	; (1000b930 <_free_r+0x1c4>)
1000b7da:	68ba      	ldr	r2, [r7, #8]
1000b7dc:	4282      	cmp	r2, r0
1000b7de:	d100      	bne.n	1000b7e2 <_free_r+0x76>
1000b7e0:	e07f      	b.n	1000b8e2 <_free_r+0x176>
1000b7e2:	68f8      	ldr	r0, [r7, #12]
1000b7e4:	60d0      	str	r0, [r2, #12]
1000b7e6:	6082      	str	r2, [r0, #8]
1000b7e8:	2201      	movs	r2, #1
1000b7ea:	431a      	orrs	r2, r3
1000b7ec:	604a      	str	r2, [r1, #4]
1000b7ee:	50cb      	str	r3, [r1, r3]
1000b7f0:	e007      	b.n	1000b802 <_free_r+0x96>
1000b7f2:	4648      	mov	r0, r9
1000b7f4:	6840      	ldr	r0, [r0, #4]
1000b7f6:	4220      	tst	r0, r4
1000b7f8:	d0ed      	beq.n	1000b7d6 <_free_r+0x6a>
1000b7fa:	4662      	mov	r2, ip
1000b7fc:	431a      	orrs	r2, r3
1000b7fe:	604a      	str	r2, [r1, #4]
1000b800:	603b      	str	r3, [r7, #0]
1000b802:	2280      	movs	r2, #128	; 0x80
1000b804:	0092      	lsls	r2, r2, #2
1000b806:	4293      	cmp	r3, r2
1000b808:	d214      	bcs.n	1000b834 <_free_r+0xc8>
1000b80a:	08da      	lsrs	r2, r3, #3
1000b80c:	0958      	lsrs	r0, r3, #5
1000b80e:	2301      	movs	r3, #1
1000b810:	4083      	lsls	r3, r0
1000b812:	6870      	ldr	r0, [r6, #4]
1000b814:	4303      	orrs	r3, r0
1000b816:	6073      	str	r3, [r6, #4]
1000b818:	00d3      	lsls	r3, r2, #3
1000b81a:	199b      	adds	r3, r3, r6
1000b81c:	689a      	ldr	r2, [r3, #8]
1000b81e:	60cb      	str	r3, [r1, #12]
1000b820:	608a      	str	r2, [r1, #8]
1000b822:	6099      	str	r1, [r3, #8]
1000b824:	60d1      	str	r1, [r2, #12]
1000b826:	0028      	movs	r0, r5
1000b828:	f7fb ffc0 	bl	100077ac <__malloc_unlock>
1000b82c:	bcc0      	pop	{r6, r7}
1000b82e:	46b9      	mov	r9, r7
1000b830:	46b0      	mov	r8, r6
1000b832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b834:	0a5c      	lsrs	r4, r3, #9
1000b836:	2c04      	cmp	r4, #4
1000b838:	d83d      	bhi.n	1000b8b6 <_free_r+0x14a>
1000b83a:	099c      	lsrs	r4, r3, #6
1000b83c:	0020      	movs	r0, r4
1000b83e:	3439      	adds	r4, #57	; 0x39
1000b840:	3038      	adds	r0, #56	; 0x38
1000b842:	00e4      	lsls	r4, r4, #3
1000b844:	1934      	adds	r4, r6, r4
1000b846:	6822      	ldr	r2, [r4, #0]
1000b848:	3c08      	subs	r4, #8
1000b84a:	2703      	movs	r7, #3
1000b84c:	4294      	cmp	r4, r2
1000b84e:	d103      	bne.n	1000b858 <_free_r+0xec>
1000b850:	e040      	b.n	1000b8d4 <_free_r+0x168>
1000b852:	6892      	ldr	r2, [r2, #8]
1000b854:	4294      	cmp	r4, r2
1000b856:	d003      	beq.n	1000b860 <_free_r+0xf4>
1000b858:	6850      	ldr	r0, [r2, #4]
1000b85a:	43b8      	bics	r0, r7
1000b85c:	4298      	cmp	r0, r3
1000b85e:	d8f8      	bhi.n	1000b852 <_free_r+0xe6>
1000b860:	68d4      	ldr	r4, [r2, #12]
1000b862:	60cc      	str	r4, [r1, #12]
1000b864:	608a      	str	r2, [r1, #8]
1000b866:	60a1      	str	r1, [r4, #8]
1000b868:	60d1      	str	r1, [r2, #12]
1000b86a:	e7dc      	b.n	1000b826 <_free_r+0xba>
1000b86c:	2800      	cmp	r0, #0
1000b86e:	d158      	bne.n	1000b922 <_free_r+0x1b6>
1000b870:	68b8      	ldr	r0, [r7, #8]
1000b872:	18d2      	adds	r2, r2, r3
1000b874:	68fb      	ldr	r3, [r7, #12]
1000b876:	60c3      	str	r3, [r0, #12]
1000b878:	6098      	str	r0, [r3, #8]
1000b87a:	4663      	mov	r3, ip
1000b87c:	4313      	orrs	r3, r2
1000b87e:	604b      	str	r3, [r1, #4]
1000b880:	508a      	str	r2, [r1, r2]
1000b882:	e7d0      	b.n	1000b826 <_free_r+0xba>
1000b884:	189a      	adds	r2, r3, r2
1000b886:	4663      	mov	r3, ip
1000b888:	4203      	tst	r3, r0
1000b88a:	d106      	bne.n	1000b89a <_free_r+0x12e>
1000b88c:	680b      	ldr	r3, [r1, #0]
1000b88e:	1ac9      	subs	r1, r1, r3
1000b890:	6888      	ldr	r0, [r1, #8]
1000b892:	18d2      	adds	r2, r2, r3
1000b894:	68cb      	ldr	r3, [r1, #12]
1000b896:	60c3      	str	r3, [r0, #12]
1000b898:	6098      	str	r0, [r3, #8]
1000b89a:	2301      	movs	r3, #1
1000b89c:	4313      	orrs	r3, r2
1000b89e:	604b      	str	r3, [r1, #4]
1000b8a0:	4b24      	ldr	r3, [pc, #144]	; (1000b934 <_free_r+0x1c8>)
1000b8a2:	60b1      	str	r1, [r6, #8]
1000b8a4:	681b      	ldr	r3, [r3, #0]
1000b8a6:	4293      	cmp	r3, r2
1000b8a8:	d8bd      	bhi.n	1000b826 <_free_r+0xba>
1000b8aa:	4b23      	ldr	r3, [pc, #140]	; (1000b938 <_free_r+0x1cc>)
1000b8ac:	0028      	movs	r0, r5
1000b8ae:	6819      	ldr	r1, [r3, #0]
1000b8b0:	f7ff ff08 	bl	1000b6c4 <_malloc_trim_r>
1000b8b4:	e7b7      	b.n	1000b826 <_free_r+0xba>
1000b8b6:	2c14      	cmp	r4, #20
1000b8b8:	d907      	bls.n	1000b8ca <_free_r+0x15e>
1000b8ba:	2c54      	cmp	r4, #84	; 0x54
1000b8bc:	d81a      	bhi.n	1000b8f4 <_free_r+0x188>
1000b8be:	0b1c      	lsrs	r4, r3, #12
1000b8c0:	0020      	movs	r0, r4
1000b8c2:	346f      	adds	r4, #111	; 0x6f
1000b8c4:	306e      	adds	r0, #110	; 0x6e
1000b8c6:	00e4      	lsls	r4, r4, #3
1000b8c8:	e7bc      	b.n	1000b844 <_free_r+0xd8>
1000b8ca:	0020      	movs	r0, r4
1000b8cc:	345c      	adds	r4, #92	; 0x5c
1000b8ce:	305b      	adds	r0, #91	; 0x5b
1000b8d0:	00e4      	lsls	r4, r4, #3
1000b8d2:	e7b7      	b.n	1000b844 <_free_r+0xd8>
1000b8d4:	2301      	movs	r3, #1
1000b8d6:	1080      	asrs	r0, r0, #2
1000b8d8:	4083      	lsls	r3, r0
1000b8da:	6870      	ldr	r0, [r6, #4]
1000b8dc:	4303      	orrs	r3, r0
1000b8de:	6073      	str	r3, [r6, #4]
1000b8e0:	e7bf      	b.n	1000b862 <_free_r+0xf6>
1000b8e2:	60d1      	str	r1, [r2, #12]
1000b8e4:	6091      	str	r1, [r2, #8]
1000b8e6:	60ca      	str	r2, [r1, #12]
1000b8e8:	608a      	str	r2, [r1, #8]
1000b8ea:	2201      	movs	r2, #1
1000b8ec:	431a      	orrs	r2, r3
1000b8ee:	604a      	str	r2, [r1, #4]
1000b8f0:	50cb      	str	r3, [r1, r3]
1000b8f2:	e798      	b.n	1000b826 <_free_r+0xba>
1000b8f4:	22aa      	movs	r2, #170	; 0xaa
1000b8f6:	0052      	lsls	r2, r2, #1
1000b8f8:	4294      	cmp	r4, r2
1000b8fa:	d805      	bhi.n	1000b908 <_free_r+0x19c>
1000b8fc:	0bdc      	lsrs	r4, r3, #15
1000b8fe:	0020      	movs	r0, r4
1000b900:	3478      	adds	r4, #120	; 0x78
1000b902:	3077      	adds	r0, #119	; 0x77
1000b904:	00e4      	lsls	r4, r4, #3
1000b906:	e79d      	b.n	1000b844 <_free_r+0xd8>
1000b908:	4a0c      	ldr	r2, [pc, #48]	; (1000b93c <_free_r+0x1d0>)
1000b90a:	4294      	cmp	r4, r2
1000b90c:	d805      	bhi.n	1000b91a <_free_r+0x1ae>
1000b90e:	0c9c      	lsrs	r4, r3, #18
1000b910:	0020      	movs	r0, r4
1000b912:	347d      	adds	r4, #125	; 0x7d
1000b914:	307c      	adds	r0, #124	; 0x7c
1000b916:	00e4      	lsls	r4, r4, #3
1000b918:	e794      	b.n	1000b844 <_free_r+0xd8>
1000b91a:	24fe      	movs	r4, #254	; 0xfe
1000b91c:	207e      	movs	r0, #126	; 0x7e
1000b91e:	00a4      	lsls	r4, r4, #2
1000b920:	e790      	b.n	1000b844 <_free_r+0xd8>
1000b922:	4662      	mov	r2, ip
1000b924:	431a      	orrs	r2, r3
1000b926:	604a      	str	r2, [r1, #4]
1000b928:	603b      	str	r3, [r7, #0]
1000b92a:	e77c      	b.n	1000b826 <_free_r+0xba>
1000b92c:	20000370 	.word	0x20000370
1000b930:	20000378 	.word	0x20000378
1000b934:	200007ec 	.word	0x200007ec
1000b938:	200024cc 	.word	0x200024cc
1000b93c:	00000554 	.word	0x00000554

1000b940 <__sfvwrite_r>:
1000b940:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b942:	464e      	mov	r6, r9
1000b944:	46de      	mov	lr, fp
1000b946:	4657      	mov	r7, sl
1000b948:	4645      	mov	r5, r8
1000b94a:	b5e0      	push	{r5, r6, r7, lr}
1000b94c:	6893      	ldr	r3, [r2, #8]
1000b94e:	b083      	sub	sp, #12
1000b950:	000c      	movs	r4, r1
1000b952:	4691      	mov	r9, r2
1000b954:	9000      	str	r0, [sp, #0]
1000b956:	2b00      	cmp	r3, #0
1000b958:	d05f      	beq.n	1000ba1a <__sfvwrite_r+0xda>
1000b95a:	230c      	movs	r3, #12
1000b95c:	5eca      	ldrsh	r2, [r1, r3]
1000b95e:	0713      	lsls	r3, r2, #28
1000b960:	d563      	bpl.n	1000ba2a <__sfvwrite_r+0xea>
1000b962:	690b      	ldr	r3, [r1, #16]
1000b964:	2b00      	cmp	r3, #0
1000b966:	d060      	beq.n	1000ba2a <__sfvwrite_r+0xea>
1000b968:	464b      	mov	r3, r9
1000b96a:	681f      	ldr	r7, [r3, #0]
1000b96c:	0793      	lsls	r3, r2, #30
1000b96e:	d523      	bpl.n	1000b9b8 <__sfvwrite_r+0x78>
1000b970:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000b972:	2600      	movs	r6, #0
1000b974:	469a      	mov	sl, r3
1000b976:	4bb3      	ldr	r3, [pc, #716]	; (1000bc44 <__sfvwrite_r+0x304>)
1000b978:	2500      	movs	r5, #0
1000b97a:	4698      	mov	r8, r3
1000b97c:	69e1      	ldr	r1, [r4, #28]
1000b97e:	2d00      	cmp	r5, #0
1000b980:	d016      	beq.n	1000b9b0 <__sfvwrite_r+0x70>
1000b982:	002b      	movs	r3, r5
1000b984:	4545      	cmp	r5, r8
1000b986:	d900      	bls.n	1000b98a <__sfvwrite_r+0x4a>
1000b988:	4bae      	ldr	r3, [pc, #696]	; (1000bc44 <__sfvwrite_r+0x304>)
1000b98a:	0032      	movs	r2, r6
1000b98c:	9800      	ldr	r0, [sp, #0]
1000b98e:	47d0      	blx	sl
1000b990:	2800      	cmp	r0, #0
1000b992:	dd59      	ble.n	1000ba48 <__sfvwrite_r+0x108>
1000b994:	464b      	mov	r3, r9
1000b996:	464a      	mov	r2, r9
1000b998:	689b      	ldr	r3, [r3, #8]
1000b99a:	1836      	adds	r6, r6, r0
1000b99c:	1a1b      	subs	r3, r3, r0
1000b99e:	1a2d      	subs	r5, r5, r0
1000b9a0:	6093      	str	r3, [r2, #8]
1000b9a2:	2b00      	cmp	r3, #0
1000b9a4:	d039      	beq.n	1000ba1a <__sfvwrite_r+0xda>
1000b9a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000b9a8:	69e1      	ldr	r1, [r4, #28]
1000b9aa:	469a      	mov	sl, r3
1000b9ac:	2d00      	cmp	r5, #0
1000b9ae:	d1e8      	bne.n	1000b982 <__sfvwrite_r+0x42>
1000b9b0:	683e      	ldr	r6, [r7, #0]
1000b9b2:	687d      	ldr	r5, [r7, #4]
1000b9b4:	3708      	adds	r7, #8
1000b9b6:	e7e2      	b.n	1000b97e <__sfvwrite_r+0x3e>
1000b9b8:	07d3      	lsls	r3, r2, #31
1000b9ba:	d562      	bpl.n	1000ba82 <__sfvwrite_r+0x142>
1000b9bc:	2300      	movs	r3, #0
1000b9be:	46b8      	mov	r8, r7
1000b9c0:	2000      	movs	r0, #0
1000b9c2:	469a      	mov	sl, r3
1000b9c4:	2600      	movs	r6, #0
1000b9c6:	001f      	movs	r7, r3
1000b9c8:	2e00      	cmp	r6, #0
1000b9ca:	d045      	beq.n	1000ba58 <__sfvwrite_r+0x118>
1000b9cc:	2800      	cmp	r0, #0
1000b9ce:	d04c      	beq.n	1000ba6a <__sfvwrite_r+0x12a>
1000b9d0:	003b      	movs	r3, r7
1000b9d2:	46b3      	mov	fp, r6
1000b9d4:	429e      	cmp	r6, r3
1000b9d6:	d900      	bls.n	1000b9da <__sfvwrite_r+0x9a>
1000b9d8:	469b      	mov	fp, r3
1000b9da:	6820      	ldr	r0, [r4, #0]
1000b9dc:	6922      	ldr	r2, [r4, #16]
1000b9de:	68a5      	ldr	r5, [r4, #8]
1000b9e0:	6963      	ldr	r3, [r4, #20]
1000b9e2:	4290      	cmp	r0, r2
1000b9e4:	d903      	bls.n	1000b9ee <__sfvwrite_r+0xae>
1000b9e6:	18ed      	adds	r5, r5, r3
1000b9e8:	45ab      	cmp	fp, r5
1000b9ea:	dd00      	ble.n	1000b9ee <__sfvwrite_r+0xae>
1000b9ec:	e0fe      	b.n	1000bbec <__sfvwrite_r+0x2ac>
1000b9ee:	455b      	cmp	r3, fp
1000b9f0:	dd00      	ble.n	1000b9f4 <__sfvwrite_r+0xb4>
1000b9f2:	e0ee      	b.n	1000bbd2 <__sfvwrite_r+0x292>
1000b9f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
1000b9f6:	4652      	mov	r2, sl
1000b9f8:	69e1      	ldr	r1, [r4, #28]
1000b9fa:	9800      	ldr	r0, [sp, #0]
1000b9fc:	47a8      	blx	r5
1000b9fe:	1e05      	subs	r5, r0, #0
1000ba00:	dd22      	ble.n	1000ba48 <__sfvwrite_r+0x108>
1000ba02:	2001      	movs	r0, #1
1000ba04:	1b7f      	subs	r7, r7, r5
1000ba06:	d019      	beq.n	1000ba3c <__sfvwrite_r+0xfc>
1000ba08:	464b      	mov	r3, r9
1000ba0a:	464a      	mov	r2, r9
1000ba0c:	689b      	ldr	r3, [r3, #8]
1000ba0e:	44aa      	add	sl, r5
1000ba10:	1b5b      	subs	r3, r3, r5
1000ba12:	1b76      	subs	r6, r6, r5
1000ba14:	6093      	str	r3, [r2, #8]
1000ba16:	2b00      	cmp	r3, #0
1000ba18:	d1d6      	bne.n	1000b9c8 <__sfvwrite_r+0x88>
1000ba1a:	2000      	movs	r0, #0
1000ba1c:	b003      	add	sp, #12
1000ba1e:	bcf0      	pop	{r4, r5, r6, r7}
1000ba20:	46bb      	mov	fp, r7
1000ba22:	46b2      	mov	sl, r6
1000ba24:	46a9      	mov	r9, r5
1000ba26:	46a0      	mov	r8, r4
1000ba28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba2a:	0021      	movs	r1, r4
1000ba2c:	9800      	ldr	r0, [sp, #0]
1000ba2e:	f7fe fc07 	bl	1000a240 <__swsetup_r>
1000ba32:	2800      	cmp	r0, #0
1000ba34:	d10d      	bne.n	1000ba52 <__sfvwrite_r+0x112>
1000ba36:	230c      	movs	r3, #12
1000ba38:	5ee2      	ldrsh	r2, [r4, r3]
1000ba3a:	e795      	b.n	1000b968 <__sfvwrite_r+0x28>
1000ba3c:	0021      	movs	r1, r4
1000ba3e:	9800      	ldr	r0, [sp, #0]
1000ba40:	f7ff fd70 	bl	1000b524 <_fflush_r>
1000ba44:	2800      	cmp	r0, #0
1000ba46:	d0df      	beq.n	1000ba08 <__sfvwrite_r+0xc8>
1000ba48:	220c      	movs	r2, #12
1000ba4a:	5ea3      	ldrsh	r3, [r4, r2]
1000ba4c:	2240      	movs	r2, #64	; 0x40
1000ba4e:	4313      	orrs	r3, r2
1000ba50:	81a3      	strh	r3, [r4, #12]
1000ba52:	2001      	movs	r0, #1
1000ba54:	4240      	negs	r0, r0
1000ba56:	e7e1      	b.n	1000ba1c <__sfvwrite_r+0xdc>
1000ba58:	2208      	movs	r2, #8
1000ba5a:	4643      	mov	r3, r8
1000ba5c:	4694      	mov	ip, r2
1000ba5e:	685e      	ldr	r6, [r3, #4]
1000ba60:	44e0      	add	r8, ip
1000ba62:	2e00      	cmp	r6, #0
1000ba64:	d0f8      	beq.n	1000ba58 <__sfvwrite_r+0x118>
1000ba66:	681b      	ldr	r3, [r3, #0]
1000ba68:	469a      	mov	sl, r3
1000ba6a:	0032      	movs	r2, r6
1000ba6c:	210a      	movs	r1, #10
1000ba6e:	4650      	mov	r0, sl
1000ba70:	f000 f976 	bl	1000bd60 <memchr>
1000ba74:	2800      	cmp	r0, #0
1000ba76:	d100      	bne.n	1000ba7a <__sfvwrite_r+0x13a>
1000ba78:	e0db      	b.n	1000bc32 <__sfvwrite_r+0x2f2>
1000ba7a:	4653      	mov	r3, sl
1000ba7c:	3001      	adds	r0, #1
1000ba7e:	1ac7      	subs	r7, r0, r3
1000ba80:	e7a6      	b.n	1000b9d0 <__sfvwrite_r+0x90>
1000ba82:	2300      	movs	r3, #0
1000ba84:	2180      	movs	r1, #128	; 0x80
1000ba86:	469a      	mov	sl, r3
1000ba88:	0089      	lsls	r1, r1, #2
1000ba8a:	468b      	mov	fp, r1
1000ba8c:	4656      	mov	r6, sl
1000ba8e:	4655      	mov	r5, sl
1000ba90:	6820      	ldr	r0, [r4, #0]
1000ba92:	68a3      	ldr	r3, [r4, #8]
1000ba94:	4684      	mov	ip, r0
1000ba96:	4698      	mov	r8, r3
1000ba98:	2d00      	cmp	r5, #0
1000ba9a:	d05c      	beq.n	1000bb56 <__sfvwrite_r+0x216>
1000ba9c:	4659      	mov	r1, fp
1000ba9e:	420a      	tst	r2, r1
1000baa0:	d05d      	beq.n	1000bb5e <__sfvwrite_r+0x21e>
1000baa2:	469a      	mov	sl, r3
1000baa4:	42ab      	cmp	r3, r5
1000baa6:	d900      	bls.n	1000baaa <__sfvwrite_r+0x16a>
1000baa8:	e090      	b.n	1000bbcc <__sfvwrite_r+0x28c>
1000baaa:	2390      	movs	r3, #144	; 0x90
1000baac:	00db      	lsls	r3, r3, #3
1000baae:	421a      	tst	r2, r3
1000bab0:	d032      	beq.n	1000bb18 <__sfvwrite_r+0x1d8>
1000bab2:	6921      	ldr	r1, [r4, #16]
1000bab4:	1a43      	subs	r3, r0, r1
1000bab6:	6960      	ldr	r0, [r4, #20]
1000bab8:	9301      	str	r3, [sp, #4]
1000baba:	0043      	lsls	r3, r0, #1
1000babc:	181b      	adds	r3, r3, r0
1000babe:	0fd8      	lsrs	r0, r3, #31
1000bac0:	18c3      	adds	r3, r0, r3
1000bac2:	1058      	asrs	r0, r3, #1
1000bac4:	9b01      	ldr	r3, [sp, #4]
1000bac6:	4682      	mov	sl, r0
1000bac8:	3301      	adds	r3, #1
1000baca:	195b      	adds	r3, r3, r5
1000bacc:	4283      	cmp	r3, r0
1000bace:	d901      	bls.n	1000bad4 <__sfvwrite_r+0x194>
1000bad0:	469a      	mov	sl, r3
1000bad2:	0018      	movs	r0, r3
1000bad4:	0552      	lsls	r2, r2, #21
1000bad6:	d400      	bmi.n	1000bada <__sfvwrite_r+0x19a>
1000bad8:	e097      	b.n	1000bc0a <__sfvwrite_r+0x2ca>
1000bada:	0001      	movs	r1, r0
1000badc:	9800      	ldr	r0, [sp, #0]
1000bade:	f7fb fb1d 	bl	1000711c <_malloc_r>
1000bae2:	4680      	mov	r8, r0
1000bae4:	1e03      	subs	r3, r0, #0
1000bae6:	d100      	bne.n	1000baea <__sfvwrite_r+0x1aa>
1000bae8:	e0a6      	b.n	1000bc38 <__sfvwrite_r+0x2f8>
1000baea:	9a01      	ldr	r2, [sp, #4]
1000baec:	6921      	ldr	r1, [r4, #16]
1000baee:	f7fb fdb9 	bl	10007664 <memcpy>
1000baf2:	89a3      	ldrh	r3, [r4, #12]
1000baf4:	4a54      	ldr	r2, [pc, #336]	; (1000bc48 <__sfvwrite_r+0x308>)
1000baf6:	4013      	ands	r3, r2
1000baf8:	2280      	movs	r2, #128	; 0x80
1000bafa:	4313      	orrs	r3, r2
1000bafc:	81a3      	strh	r3, [r4, #12]
1000bafe:	4643      	mov	r3, r8
1000bb00:	6123      	str	r3, [r4, #16]
1000bb02:	9b01      	ldr	r3, [sp, #4]
1000bb04:	001a      	movs	r2, r3
1000bb06:	4442      	add	r2, r8
1000bb08:	4694      	mov	ip, r2
1000bb0a:	6022      	str	r2, [r4, #0]
1000bb0c:	4652      	mov	r2, sl
1000bb0e:	46a8      	mov	r8, r5
1000bb10:	46aa      	mov	sl, r5
1000bb12:	1ad3      	subs	r3, r2, r3
1000bb14:	6162      	str	r2, [r4, #20]
1000bb16:	60a3      	str	r3, [r4, #8]
1000bb18:	4652      	mov	r2, sl
1000bb1a:	0031      	movs	r1, r6
1000bb1c:	4660      	mov	r0, ip
1000bb1e:	f000 f959 	bl	1000bdd4 <memmove>
1000bb22:	4642      	mov	r2, r8
1000bb24:	46a8      	mov	r8, r5
1000bb26:	2500      	movs	r5, #0
1000bb28:	68a3      	ldr	r3, [r4, #8]
1000bb2a:	6820      	ldr	r0, [r4, #0]
1000bb2c:	1a9b      	subs	r3, r3, r2
1000bb2e:	4450      	add	r0, sl
1000bb30:	60a3      	str	r3, [r4, #8]
1000bb32:	6020      	str	r0, [r4, #0]
1000bb34:	464b      	mov	r3, r9
1000bb36:	4642      	mov	r2, r8
1000bb38:	689b      	ldr	r3, [r3, #8]
1000bb3a:	4446      	add	r6, r8
1000bb3c:	1a9b      	subs	r3, r3, r2
1000bb3e:	464a      	mov	r2, r9
1000bb40:	6093      	str	r3, [r2, #8]
1000bb42:	d100      	bne.n	1000bb46 <__sfvwrite_r+0x206>
1000bb44:	e769      	b.n	1000ba1a <__sfvwrite_r+0xda>
1000bb46:	230c      	movs	r3, #12
1000bb48:	5ee2      	ldrsh	r2, [r4, r3]
1000bb4a:	6820      	ldr	r0, [r4, #0]
1000bb4c:	68a3      	ldr	r3, [r4, #8]
1000bb4e:	4684      	mov	ip, r0
1000bb50:	4698      	mov	r8, r3
1000bb52:	2d00      	cmp	r5, #0
1000bb54:	d1a2      	bne.n	1000ba9c <__sfvwrite_r+0x15c>
1000bb56:	683e      	ldr	r6, [r7, #0]
1000bb58:	687d      	ldr	r5, [r7, #4]
1000bb5a:	3708      	adds	r7, #8
1000bb5c:	e79a      	b.n	1000ba94 <__sfvwrite_r+0x154>
1000bb5e:	6922      	ldr	r2, [r4, #16]
1000bb60:	4282      	cmp	r2, r0
1000bb62:	d31b      	bcc.n	1000bb9c <__sfvwrite_r+0x25c>
1000bb64:	6962      	ldr	r2, [r4, #20]
1000bb66:	4690      	mov	r8, r2
1000bb68:	42aa      	cmp	r2, r5
1000bb6a:	d817      	bhi.n	1000bb9c <__sfvwrite_r+0x25c>
1000bb6c:	2380      	movs	r3, #128	; 0x80
1000bb6e:	0028      	movs	r0, r5
1000bb70:	061b      	lsls	r3, r3, #24
1000bb72:	429d      	cmp	r5, r3
1000bb74:	d300      	bcc.n	1000bb78 <__sfvwrite_r+0x238>
1000bb76:	4835      	ldr	r0, [pc, #212]	; (1000bc4c <__sfvwrite_r+0x30c>)
1000bb78:	4641      	mov	r1, r8
1000bb7a:	f7f4 fb6f 	bl	1000025c <__divsi3>
1000bb7e:	4643      	mov	r3, r8
1000bb80:	6a62      	ldr	r2, [r4, #36]	; 0x24
1000bb82:	4343      	muls	r3, r0
1000bb84:	4690      	mov	r8, r2
1000bb86:	69e1      	ldr	r1, [r4, #28]
1000bb88:	0032      	movs	r2, r6
1000bb8a:	9800      	ldr	r0, [sp, #0]
1000bb8c:	47c0      	blx	r8
1000bb8e:	2800      	cmp	r0, #0
1000bb90:	dc00      	bgt.n	1000bb94 <__sfvwrite_r+0x254>
1000bb92:	e759      	b.n	1000ba48 <__sfvwrite_r+0x108>
1000bb94:	4680      	mov	r8, r0
1000bb96:	4643      	mov	r3, r8
1000bb98:	1aed      	subs	r5, r5, r3
1000bb9a:	e7cb      	b.n	1000bb34 <__sfvwrite_r+0x1f4>
1000bb9c:	4698      	mov	r8, r3
1000bb9e:	42ab      	cmp	r3, r5
1000bba0:	d900      	bls.n	1000bba4 <__sfvwrite_r+0x264>
1000bba2:	46a8      	mov	r8, r5
1000bba4:	4642      	mov	r2, r8
1000bba6:	0031      	movs	r1, r6
1000bba8:	f000 f914 	bl	1000bdd4 <memmove>
1000bbac:	4642      	mov	r2, r8
1000bbae:	68a3      	ldr	r3, [r4, #8]
1000bbb0:	6820      	ldr	r0, [r4, #0]
1000bbb2:	1a9b      	subs	r3, r3, r2
1000bbb4:	4440      	add	r0, r8
1000bbb6:	60a3      	str	r3, [r4, #8]
1000bbb8:	6020      	str	r0, [r4, #0]
1000bbba:	2b00      	cmp	r3, #0
1000bbbc:	d1eb      	bne.n	1000bb96 <__sfvwrite_r+0x256>
1000bbbe:	0021      	movs	r1, r4
1000bbc0:	9800      	ldr	r0, [sp, #0]
1000bbc2:	f7ff fcaf 	bl	1000b524 <_fflush_r>
1000bbc6:	2800      	cmp	r0, #0
1000bbc8:	d0e5      	beq.n	1000bb96 <__sfvwrite_r+0x256>
1000bbca:	e73d      	b.n	1000ba48 <__sfvwrite_r+0x108>
1000bbcc:	46a8      	mov	r8, r5
1000bbce:	46aa      	mov	sl, r5
1000bbd0:	e7a2      	b.n	1000bb18 <__sfvwrite_r+0x1d8>
1000bbd2:	465a      	mov	r2, fp
1000bbd4:	4651      	mov	r1, sl
1000bbd6:	f000 f8fd 	bl	1000bdd4 <memmove>
1000bbda:	465a      	mov	r2, fp
1000bbdc:	68a3      	ldr	r3, [r4, #8]
1000bbde:	465d      	mov	r5, fp
1000bbe0:	1a9b      	subs	r3, r3, r2
1000bbe2:	60a3      	str	r3, [r4, #8]
1000bbe4:	6823      	ldr	r3, [r4, #0]
1000bbe6:	445b      	add	r3, fp
1000bbe8:	6023      	str	r3, [r4, #0]
1000bbea:	e70a      	b.n	1000ba02 <__sfvwrite_r+0xc2>
1000bbec:	4651      	mov	r1, sl
1000bbee:	002a      	movs	r2, r5
1000bbf0:	f000 f8f0 	bl	1000bdd4 <memmove>
1000bbf4:	6823      	ldr	r3, [r4, #0]
1000bbf6:	0021      	movs	r1, r4
1000bbf8:	195b      	adds	r3, r3, r5
1000bbfa:	9800      	ldr	r0, [sp, #0]
1000bbfc:	6023      	str	r3, [r4, #0]
1000bbfe:	f7ff fc91 	bl	1000b524 <_fflush_r>
1000bc02:	2800      	cmp	r0, #0
1000bc04:	d100      	bne.n	1000bc08 <__sfvwrite_r+0x2c8>
1000bc06:	e6fc      	b.n	1000ba02 <__sfvwrite_r+0xc2>
1000bc08:	e71e      	b.n	1000ba48 <__sfvwrite_r+0x108>
1000bc0a:	0002      	movs	r2, r0
1000bc0c:	9800      	ldr	r0, [sp, #0]
1000bc0e:	f000 fd57 	bl	1000c6c0 <_realloc_r>
1000bc12:	4680      	mov	r8, r0
1000bc14:	2800      	cmp	r0, #0
1000bc16:	d000      	beq.n	1000bc1a <__sfvwrite_r+0x2da>
1000bc18:	e771      	b.n	1000bafe <__sfvwrite_r+0x1be>
1000bc1a:	9d00      	ldr	r5, [sp, #0]
1000bc1c:	6921      	ldr	r1, [r4, #16]
1000bc1e:	0028      	movs	r0, r5
1000bc20:	f7ff fda4 	bl	1000b76c <_free_r>
1000bc24:	2280      	movs	r2, #128	; 0x80
1000bc26:	89a3      	ldrh	r3, [r4, #12]
1000bc28:	4393      	bics	r3, r2
1000bc2a:	3a74      	subs	r2, #116	; 0x74
1000bc2c:	b21b      	sxth	r3, r3
1000bc2e:	602a      	str	r2, [r5, #0]
1000bc30:	e70c      	b.n	1000ba4c <__sfvwrite_r+0x10c>
1000bc32:	1c73      	adds	r3, r6, #1
1000bc34:	001f      	movs	r7, r3
1000bc36:	e6cc      	b.n	1000b9d2 <__sfvwrite_r+0x92>
1000bc38:	9a00      	ldr	r2, [sp, #0]
1000bc3a:	330c      	adds	r3, #12
1000bc3c:	6013      	str	r3, [r2, #0]
1000bc3e:	220c      	movs	r2, #12
1000bc40:	5ea3      	ldrsh	r3, [r4, r2]
1000bc42:	e703      	b.n	1000ba4c <__sfvwrite_r+0x10c>
1000bc44:	7ffffc00 	.word	0x7ffffc00
1000bc48:	fffffb7f 	.word	0xfffffb7f
1000bc4c:	7fffffff 	.word	0x7fffffff

1000bc50 <_fwalk_reent>:
1000bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bc52:	4647      	mov	r7, r8
1000bc54:	46ce      	mov	lr, r9
1000bc56:	b580      	push	{r7, lr}
1000bc58:	0007      	movs	r7, r0
1000bc5a:	4680      	mov	r8, r0
1000bc5c:	4689      	mov	r9, r1
1000bc5e:	2600      	movs	r6, #0
1000bc60:	374d      	adds	r7, #77	; 0x4d
1000bc62:	37ff      	adds	r7, #255	; 0xff
1000bc64:	687d      	ldr	r5, [r7, #4]
1000bc66:	68bc      	ldr	r4, [r7, #8]
1000bc68:	3d01      	subs	r5, #1
1000bc6a:	d40d      	bmi.n	1000bc88 <_fwalk_reent+0x38>
1000bc6c:	89a3      	ldrh	r3, [r4, #12]
1000bc6e:	2b01      	cmp	r3, #1
1000bc70:	d907      	bls.n	1000bc82 <_fwalk_reent+0x32>
1000bc72:	220e      	movs	r2, #14
1000bc74:	5ea3      	ldrsh	r3, [r4, r2]
1000bc76:	3301      	adds	r3, #1
1000bc78:	d003      	beq.n	1000bc82 <_fwalk_reent+0x32>
1000bc7a:	0021      	movs	r1, r4
1000bc7c:	4640      	mov	r0, r8
1000bc7e:	47c8      	blx	r9
1000bc80:	4306      	orrs	r6, r0
1000bc82:	3468      	adds	r4, #104	; 0x68
1000bc84:	3d01      	subs	r5, #1
1000bc86:	d2f1      	bcs.n	1000bc6c <_fwalk_reent+0x1c>
1000bc88:	683f      	ldr	r7, [r7, #0]
1000bc8a:	2f00      	cmp	r7, #0
1000bc8c:	d1ea      	bne.n	1000bc64 <_fwalk_reent+0x14>
1000bc8e:	0030      	movs	r0, r6
1000bc90:	bcc0      	pop	{r6, r7}
1000bc92:	46b9      	mov	r9, r7
1000bc94:	46b0      	mov	r8, r6
1000bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000bc98 <_localeconv_r>:
1000bc98:	4800      	ldr	r0, [pc, #0]	; (1000bc9c <_localeconv_r+0x4>)
1000bc9a:	4770      	bx	lr
1000bc9c:	200008e0 	.word	0x200008e0

1000bca0 <__smakebuf_r>:
1000bca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bca2:	220c      	movs	r2, #12
1000bca4:	5e8b      	ldrsh	r3, [r1, r2]
1000bca6:	0006      	movs	r6, r0
1000bca8:	000c      	movs	r4, r1
1000bcaa:	b097      	sub	sp, #92	; 0x5c
1000bcac:	079a      	lsls	r2, r3, #30
1000bcae:	d507      	bpl.n	1000bcc0 <__smakebuf_r+0x20>
1000bcb0:	0023      	movs	r3, r4
1000bcb2:	3343      	adds	r3, #67	; 0x43
1000bcb4:	6023      	str	r3, [r4, #0]
1000bcb6:	6123      	str	r3, [r4, #16]
1000bcb8:	2301      	movs	r3, #1
1000bcba:	6163      	str	r3, [r4, #20]
1000bcbc:	b017      	add	sp, #92	; 0x5c
1000bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bcc0:	220e      	movs	r2, #14
1000bcc2:	5e89      	ldrsh	r1, [r1, r2]
1000bcc4:	2900      	cmp	r1, #0
1000bcc6:	db30      	blt.n	1000bd2a <__smakebuf_r+0x8a>
1000bcc8:	466a      	mov	r2, sp
1000bcca:	f000 fff1 	bl	1000ccb0 <_fstat_r>
1000bcce:	2800      	cmp	r0, #0
1000bcd0:	db29      	blt.n	1000bd26 <__smakebuf_r+0x86>
1000bcd2:	23f0      	movs	r3, #240	; 0xf0
1000bcd4:	9d01      	ldr	r5, [sp, #4]
1000bcd6:	021b      	lsls	r3, r3, #8
1000bcd8:	401d      	ands	r5, r3
1000bcda:	4b1f      	ldr	r3, [pc, #124]	; (1000bd58 <__smakebuf_r+0xb8>)
1000bcdc:	2780      	movs	r7, #128	; 0x80
1000bcde:	469c      	mov	ip, r3
1000bce0:	4465      	add	r5, ip
1000bce2:	426b      	negs	r3, r5
1000bce4:	415d      	adcs	r5, r3
1000bce6:	00ff      	lsls	r7, r7, #3
1000bce8:	0039      	movs	r1, r7
1000bcea:	0030      	movs	r0, r6
1000bcec:	f7fb fa16 	bl	1000711c <_malloc_r>
1000bcf0:	2800      	cmp	r0, #0
1000bcf2:	d026      	beq.n	1000bd42 <__smakebuf_r+0xa2>
1000bcf4:	2180      	movs	r1, #128	; 0x80
1000bcf6:	4a19      	ldr	r2, [pc, #100]	; (1000bd5c <__smakebuf_r+0xbc>)
1000bcf8:	63f2      	str	r2, [r6, #60]	; 0x3c
1000bcfa:	89a2      	ldrh	r2, [r4, #12]
1000bcfc:	6020      	str	r0, [r4, #0]
1000bcfe:	430a      	orrs	r2, r1
1000bd00:	81a2      	strh	r2, [r4, #12]
1000bd02:	6120      	str	r0, [r4, #16]
1000bd04:	6167      	str	r7, [r4, #20]
1000bd06:	2d00      	cmp	r5, #0
1000bd08:	d0d8      	beq.n	1000bcbc <__smakebuf_r+0x1c>
1000bd0a:	0030      	movs	r0, r6
1000bd0c:	230e      	movs	r3, #14
1000bd0e:	5ee1      	ldrsh	r1, [r4, r3]
1000bd10:	f000 ffe2 	bl	1000ccd8 <_isatty_r>
1000bd14:	2800      	cmp	r0, #0
1000bd16:	d0d1      	beq.n	1000bcbc <__smakebuf_r+0x1c>
1000bd18:	2203      	movs	r2, #3
1000bd1a:	89a3      	ldrh	r3, [r4, #12]
1000bd1c:	4393      	bics	r3, r2
1000bd1e:	2201      	movs	r2, #1
1000bd20:	4313      	orrs	r3, r2
1000bd22:	81a3      	strh	r3, [r4, #12]
1000bd24:	e7ca      	b.n	1000bcbc <__smakebuf_r+0x1c>
1000bd26:	220c      	movs	r2, #12
1000bd28:	5ea3      	ldrsh	r3, [r4, r2]
1000bd2a:	2500      	movs	r5, #0
1000bd2c:	2740      	movs	r7, #64	; 0x40
1000bd2e:	061b      	lsls	r3, r3, #24
1000bd30:	d4da      	bmi.n	1000bce8 <__smakebuf_r+0x48>
1000bd32:	2780      	movs	r7, #128	; 0x80
1000bd34:	00ff      	lsls	r7, r7, #3
1000bd36:	0039      	movs	r1, r7
1000bd38:	0030      	movs	r0, r6
1000bd3a:	f7fb f9ef 	bl	1000711c <_malloc_r>
1000bd3e:	2800      	cmp	r0, #0
1000bd40:	d1d8      	bne.n	1000bcf4 <__smakebuf_r+0x54>
1000bd42:	220c      	movs	r2, #12
1000bd44:	5ea3      	ldrsh	r3, [r4, r2]
1000bd46:	059a      	lsls	r2, r3, #22
1000bd48:	d4b8      	bmi.n	1000bcbc <__smakebuf_r+0x1c>
1000bd4a:	2203      	movs	r2, #3
1000bd4c:	4393      	bics	r3, r2
1000bd4e:	2202      	movs	r2, #2
1000bd50:	4313      	orrs	r3, r2
1000bd52:	81a3      	strh	r3, [r4, #12]
1000bd54:	e7ac      	b.n	1000bcb0 <__smakebuf_r+0x10>
1000bd56:	46c0      	nop			; (mov r8, r8)
1000bd58:	ffffe000 	.word	0xffffe000
1000bd5c:	1000b591 	.word	0x1000b591

1000bd60 <memchr>:
1000bd60:	b570      	push	{r4, r5, r6, lr}
1000bd62:	b2cc      	uxtb	r4, r1
1000bd64:	0783      	lsls	r3, r0, #30
1000bd66:	d00f      	beq.n	1000bd88 <memchr+0x28>
1000bd68:	1e53      	subs	r3, r2, #1
1000bd6a:	2a00      	cmp	r2, #0
1000bd6c:	d00a      	beq.n	1000bd84 <memchr+0x24>
1000bd6e:	2503      	movs	r5, #3
1000bd70:	e004      	b.n	1000bd7c <memchr+0x1c>
1000bd72:	3001      	adds	r0, #1
1000bd74:	4228      	tst	r0, r5
1000bd76:	d008      	beq.n	1000bd8a <memchr+0x2a>
1000bd78:	3b01      	subs	r3, #1
1000bd7a:	d303      	bcc.n	1000bd84 <memchr+0x24>
1000bd7c:	7802      	ldrb	r2, [r0, #0]
1000bd7e:	42a2      	cmp	r2, r4
1000bd80:	d1f7      	bne.n	1000bd72 <memchr+0x12>
1000bd82:	bd70      	pop	{r4, r5, r6, pc}
1000bd84:	2000      	movs	r0, #0
1000bd86:	e7fc      	b.n	1000bd82 <memchr+0x22>
1000bd88:	0013      	movs	r3, r2
1000bd8a:	2b03      	cmp	r3, #3
1000bd8c:	d912      	bls.n	1000bdb4 <memchr+0x54>
1000bd8e:	22ff      	movs	r2, #255	; 0xff
1000bd90:	400a      	ands	r2, r1
1000bd92:	0215      	lsls	r5, r2, #8
1000bd94:	18ad      	adds	r5, r5, r2
1000bd96:	042a      	lsls	r2, r5, #16
1000bd98:	4e0c      	ldr	r6, [pc, #48]	; (1000bdcc <memchr+0x6c>)
1000bd9a:	18ad      	adds	r5, r5, r2
1000bd9c:	e003      	b.n	1000bda6 <memchr+0x46>
1000bd9e:	3b04      	subs	r3, #4
1000bda0:	3004      	adds	r0, #4
1000bda2:	2b03      	cmp	r3, #3
1000bda4:	d906      	bls.n	1000bdb4 <memchr+0x54>
1000bda6:	6802      	ldr	r2, [r0, #0]
1000bda8:	4909      	ldr	r1, [pc, #36]	; (1000bdd0 <memchr+0x70>)
1000bdaa:	406a      	eors	r2, r5
1000bdac:	1851      	adds	r1, r2, r1
1000bdae:	4391      	bics	r1, r2
1000bdb0:	4231      	tst	r1, r6
1000bdb2:	d0f4      	beq.n	1000bd9e <memchr+0x3e>
1000bdb4:	18c2      	adds	r2, r0, r3
1000bdb6:	2b00      	cmp	r3, #0
1000bdb8:	d103      	bne.n	1000bdc2 <memchr+0x62>
1000bdba:	e7e3      	b.n	1000bd84 <memchr+0x24>
1000bdbc:	3001      	adds	r0, #1
1000bdbe:	4290      	cmp	r0, r2
1000bdc0:	d0e0      	beq.n	1000bd84 <memchr+0x24>
1000bdc2:	7803      	ldrb	r3, [r0, #0]
1000bdc4:	42a3      	cmp	r3, r4
1000bdc6:	d1f9      	bne.n	1000bdbc <memchr+0x5c>
1000bdc8:	e7db      	b.n	1000bd82 <memchr+0x22>
1000bdca:	46c0      	nop			; (mov r8, r8)
1000bdcc:	80808080 	.word	0x80808080
1000bdd0:	fefefeff 	.word	0xfefefeff

1000bdd4 <memmove>:
1000bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdd6:	4288      	cmp	r0, r1
1000bdd8:	d90a      	bls.n	1000bdf0 <memmove+0x1c>
1000bdda:	188b      	adds	r3, r1, r2
1000bddc:	4298      	cmp	r0, r3
1000bdde:	d207      	bcs.n	1000bdf0 <memmove+0x1c>
1000bde0:	1e53      	subs	r3, r2, #1
1000bde2:	2a00      	cmp	r2, #0
1000bde4:	d003      	beq.n	1000bdee <memmove+0x1a>
1000bde6:	5cca      	ldrb	r2, [r1, r3]
1000bde8:	54c2      	strb	r2, [r0, r3]
1000bdea:	3b01      	subs	r3, #1
1000bdec:	d2fb      	bcs.n	1000bde6 <memmove+0x12>
1000bdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bdf0:	0005      	movs	r5, r0
1000bdf2:	2a0f      	cmp	r2, #15
1000bdf4:	d80a      	bhi.n	1000be0c <memmove+0x38>
1000bdf6:	1e56      	subs	r6, r2, #1
1000bdf8:	2a00      	cmp	r2, #0
1000bdfa:	d0f8      	beq.n	1000bdee <memmove+0x1a>
1000bdfc:	2300      	movs	r3, #0
1000bdfe:	5ccc      	ldrb	r4, [r1, r3]
1000be00:	001a      	movs	r2, r3
1000be02:	54ec      	strb	r4, [r5, r3]
1000be04:	3301      	adds	r3, #1
1000be06:	4296      	cmp	r6, r2
1000be08:	d1f9      	bne.n	1000bdfe <memmove+0x2a>
1000be0a:	e7f0      	b.n	1000bdee <memmove+0x1a>
1000be0c:	2403      	movs	r4, #3
1000be0e:	0003      	movs	r3, r0
1000be10:	0026      	movs	r6, r4
1000be12:	430b      	orrs	r3, r1
1000be14:	401e      	ands	r6, r3
1000be16:	421c      	tst	r4, r3
1000be18:	d130      	bne.n	1000be7c <memmove+0xa8>
1000be1a:	0015      	movs	r5, r2
1000be1c:	3d10      	subs	r5, #16
1000be1e:	092d      	lsrs	r5, r5, #4
1000be20:	0003      	movs	r3, r0
1000be22:	000c      	movs	r4, r1
1000be24:	46ac      	mov	ip, r5
1000be26:	012f      	lsls	r7, r5, #4
1000be28:	183f      	adds	r7, r7, r0
1000be2a:	6825      	ldr	r5, [r4, #0]
1000be2c:	601d      	str	r5, [r3, #0]
1000be2e:	6865      	ldr	r5, [r4, #4]
1000be30:	605d      	str	r5, [r3, #4]
1000be32:	68a5      	ldr	r5, [r4, #8]
1000be34:	609d      	str	r5, [r3, #8]
1000be36:	68e5      	ldr	r5, [r4, #12]
1000be38:	3410      	adds	r4, #16
1000be3a:	60dd      	str	r5, [r3, #12]
1000be3c:	001d      	movs	r5, r3
1000be3e:	3310      	adds	r3, #16
1000be40:	42bd      	cmp	r5, r7
1000be42:	d1f2      	bne.n	1000be2a <memmove+0x56>
1000be44:	4665      	mov	r5, ip
1000be46:	230f      	movs	r3, #15
1000be48:	240c      	movs	r4, #12
1000be4a:	3501      	adds	r5, #1
1000be4c:	012d      	lsls	r5, r5, #4
1000be4e:	1949      	adds	r1, r1, r5
1000be50:	4013      	ands	r3, r2
1000be52:	1945      	adds	r5, r0, r5
1000be54:	4214      	tst	r4, r2
1000be56:	d013      	beq.n	1000be80 <memmove+0xac>
1000be58:	598c      	ldr	r4, [r1, r6]
1000be5a:	51ac      	str	r4, [r5, r6]
1000be5c:	3604      	adds	r6, #4
1000be5e:	1b9c      	subs	r4, r3, r6
1000be60:	2c03      	cmp	r4, #3
1000be62:	d8f9      	bhi.n	1000be58 <memmove+0x84>
1000be64:	3b04      	subs	r3, #4
1000be66:	089b      	lsrs	r3, r3, #2
1000be68:	3301      	adds	r3, #1
1000be6a:	009b      	lsls	r3, r3, #2
1000be6c:	18ed      	adds	r5, r5, r3
1000be6e:	18c9      	adds	r1, r1, r3
1000be70:	2303      	movs	r3, #3
1000be72:	401a      	ands	r2, r3
1000be74:	1e56      	subs	r6, r2, #1
1000be76:	2a00      	cmp	r2, #0
1000be78:	d1c0      	bne.n	1000bdfc <memmove+0x28>
1000be7a:	e7b8      	b.n	1000bdee <memmove+0x1a>
1000be7c:	1e56      	subs	r6, r2, #1
1000be7e:	e7bd      	b.n	1000bdfc <memmove+0x28>
1000be80:	001a      	movs	r2, r3
1000be82:	e7b8      	b.n	1000bdf6 <memmove+0x22>

1000be84 <_Balloc>:
1000be84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000be86:	b570      	push	{r4, r5, r6, lr}
1000be88:	0004      	movs	r4, r0
1000be8a:	000d      	movs	r5, r1
1000be8c:	2b00      	cmp	r3, #0
1000be8e:	d00a      	beq.n	1000bea6 <_Balloc+0x22>
1000be90:	00aa      	lsls	r2, r5, #2
1000be92:	189b      	adds	r3, r3, r2
1000be94:	6818      	ldr	r0, [r3, #0]
1000be96:	2800      	cmp	r0, #0
1000be98:	d00e      	beq.n	1000beb8 <_Balloc+0x34>
1000be9a:	6802      	ldr	r2, [r0, #0]
1000be9c:	601a      	str	r2, [r3, #0]
1000be9e:	2300      	movs	r3, #0
1000bea0:	6103      	str	r3, [r0, #16]
1000bea2:	60c3      	str	r3, [r0, #12]
1000bea4:	bd70      	pop	{r4, r5, r6, pc}
1000bea6:	2221      	movs	r2, #33	; 0x21
1000bea8:	2104      	movs	r1, #4
1000beaa:	f000 fec1 	bl	1000cc30 <_calloc_r>
1000beae:	1e03      	subs	r3, r0, #0
1000beb0:	64e0      	str	r0, [r4, #76]	; 0x4c
1000beb2:	d1ed      	bne.n	1000be90 <_Balloc+0xc>
1000beb4:	2000      	movs	r0, #0
1000beb6:	e7f5      	b.n	1000bea4 <_Balloc+0x20>
1000beb8:	2601      	movs	r6, #1
1000beba:	40ae      	lsls	r6, r5
1000bebc:	1d72      	adds	r2, r6, #5
1000bebe:	2101      	movs	r1, #1
1000bec0:	0020      	movs	r0, r4
1000bec2:	0092      	lsls	r2, r2, #2
1000bec4:	f000 feb4 	bl	1000cc30 <_calloc_r>
1000bec8:	2800      	cmp	r0, #0
1000beca:	d0f3      	beq.n	1000beb4 <_Balloc+0x30>
1000becc:	6045      	str	r5, [r0, #4]
1000bece:	6086      	str	r6, [r0, #8]
1000bed0:	e7e5      	b.n	1000be9e <_Balloc+0x1a>
1000bed2:	46c0      	nop			; (mov r8, r8)

1000bed4 <_Bfree>:
1000bed4:	2900      	cmp	r1, #0
1000bed6:	d006      	beq.n	1000bee6 <_Bfree+0x12>
1000bed8:	684a      	ldr	r2, [r1, #4]
1000beda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000bedc:	0092      	lsls	r2, r2, #2
1000bede:	189b      	adds	r3, r3, r2
1000bee0:	681a      	ldr	r2, [r3, #0]
1000bee2:	600a      	str	r2, [r1, #0]
1000bee4:	6019      	str	r1, [r3, #0]
1000bee6:	4770      	bx	lr

1000bee8 <__multadd>:
1000bee8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000beea:	46c6      	mov	lr, r8
1000beec:	001f      	movs	r7, r3
1000beee:	4680      	mov	r8, r0
1000bef0:	2300      	movs	r3, #0
1000bef2:	b500      	push	{lr}
1000bef4:	000e      	movs	r6, r1
1000bef6:	690d      	ldr	r5, [r1, #16]
1000bef8:	3114      	adds	r1, #20
1000befa:	680c      	ldr	r4, [r1, #0]
1000befc:	3301      	adds	r3, #1
1000befe:	0420      	lsls	r0, r4, #16
1000bf00:	0c00      	lsrs	r0, r0, #16
1000bf02:	4350      	muls	r0, r2
1000bf04:	0c24      	lsrs	r4, r4, #16
1000bf06:	4354      	muls	r4, r2
1000bf08:	19c0      	adds	r0, r0, r7
1000bf0a:	0c07      	lsrs	r7, r0, #16
1000bf0c:	19e4      	adds	r4, r4, r7
1000bf0e:	0400      	lsls	r0, r0, #16
1000bf10:	0c27      	lsrs	r7, r4, #16
1000bf12:	0c00      	lsrs	r0, r0, #16
1000bf14:	0424      	lsls	r4, r4, #16
1000bf16:	1824      	adds	r4, r4, r0
1000bf18:	c110      	stmia	r1!, {r4}
1000bf1a:	429d      	cmp	r5, r3
1000bf1c:	dced      	bgt.n	1000befa <__multadd+0x12>
1000bf1e:	2f00      	cmp	r7, #0
1000bf20:	d008      	beq.n	1000bf34 <__multadd+0x4c>
1000bf22:	68b3      	ldr	r3, [r6, #8]
1000bf24:	42ab      	cmp	r3, r5
1000bf26:	dd09      	ble.n	1000bf3c <__multadd+0x54>
1000bf28:	1d2b      	adds	r3, r5, #4
1000bf2a:	009b      	lsls	r3, r3, #2
1000bf2c:	18f3      	adds	r3, r6, r3
1000bf2e:	3501      	adds	r5, #1
1000bf30:	605f      	str	r7, [r3, #4]
1000bf32:	6135      	str	r5, [r6, #16]
1000bf34:	0030      	movs	r0, r6
1000bf36:	bc80      	pop	{r7}
1000bf38:	46b8      	mov	r8, r7
1000bf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf3c:	6871      	ldr	r1, [r6, #4]
1000bf3e:	4640      	mov	r0, r8
1000bf40:	3101      	adds	r1, #1
1000bf42:	f7ff ff9f 	bl	1000be84 <_Balloc>
1000bf46:	1e04      	subs	r4, r0, #0
1000bf48:	d017      	beq.n	1000bf7a <__multadd+0x92>
1000bf4a:	0031      	movs	r1, r6
1000bf4c:	6932      	ldr	r2, [r6, #16]
1000bf4e:	310c      	adds	r1, #12
1000bf50:	3202      	adds	r2, #2
1000bf52:	0092      	lsls	r2, r2, #2
1000bf54:	300c      	adds	r0, #12
1000bf56:	f7fb fb85 	bl	10007664 <memcpy>
1000bf5a:	4643      	mov	r3, r8
1000bf5c:	6872      	ldr	r2, [r6, #4]
1000bf5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000bf60:	0092      	lsls	r2, r2, #2
1000bf62:	189b      	adds	r3, r3, r2
1000bf64:	681a      	ldr	r2, [r3, #0]
1000bf66:	6032      	str	r2, [r6, #0]
1000bf68:	601e      	str	r6, [r3, #0]
1000bf6a:	0026      	movs	r6, r4
1000bf6c:	1d2b      	adds	r3, r5, #4
1000bf6e:	009b      	lsls	r3, r3, #2
1000bf70:	18f3      	adds	r3, r6, r3
1000bf72:	3501      	adds	r5, #1
1000bf74:	605f      	str	r7, [r3, #4]
1000bf76:	6135      	str	r5, [r6, #16]
1000bf78:	e7dc      	b.n	1000bf34 <__multadd+0x4c>
1000bf7a:	2200      	movs	r2, #0
1000bf7c:	21b5      	movs	r1, #181	; 0xb5
1000bf7e:	4b02      	ldr	r3, [pc, #8]	; (1000bf88 <__multadd+0xa0>)
1000bf80:	4802      	ldr	r0, [pc, #8]	; (1000bf8c <__multadd+0xa4>)
1000bf82:	f7fb f885 	bl	10007090 <__assert_func>
1000bf86:	46c0      	nop			; (mov r8, r8)
1000bf88:	1000eae4 	.word	0x1000eae4
1000bf8c:	1000eb68 	.word	0x1000eb68

1000bf90 <__hi0bits>:
1000bf90:	2280      	movs	r2, #128	; 0x80
1000bf92:	0003      	movs	r3, r0
1000bf94:	0252      	lsls	r2, r2, #9
1000bf96:	2000      	movs	r0, #0
1000bf98:	4293      	cmp	r3, r2
1000bf9a:	d201      	bcs.n	1000bfa0 <__hi0bits+0x10>
1000bf9c:	041b      	lsls	r3, r3, #16
1000bf9e:	3010      	adds	r0, #16
1000bfa0:	2280      	movs	r2, #128	; 0x80
1000bfa2:	0452      	lsls	r2, r2, #17
1000bfa4:	4293      	cmp	r3, r2
1000bfa6:	d201      	bcs.n	1000bfac <__hi0bits+0x1c>
1000bfa8:	3008      	adds	r0, #8
1000bfaa:	021b      	lsls	r3, r3, #8
1000bfac:	2280      	movs	r2, #128	; 0x80
1000bfae:	0552      	lsls	r2, r2, #21
1000bfb0:	4293      	cmp	r3, r2
1000bfb2:	d201      	bcs.n	1000bfb8 <__hi0bits+0x28>
1000bfb4:	3004      	adds	r0, #4
1000bfb6:	011b      	lsls	r3, r3, #4
1000bfb8:	2280      	movs	r2, #128	; 0x80
1000bfba:	05d2      	lsls	r2, r2, #23
1000bfbc:	4293      	cmp	r3, r2
1000bfbe:	d303      	bcc.n	1000bfc8 <__hi0bits+0x38>
1000bfc0:	43db      	mvns	r3, r3
1000bfc2:	0fdb      	lsrs	r3, r3, #31
1000bfc4:	18c0      	adds	r0, r0, r3
1000bfc6:	4770      	bx	lr
1000bfc8:	0099      	lsls	r1, r3, #2
1000bfca:	009b      	lsls	r3, r3, #2
1000bfcc:	d404      	bmi.n	1000bfd8 <__hi0bits+0x48>
1000bfce:	3003      	adds	r0, #3
1000bfd0:	4211      	tst	r1, r2
1000bfd2:	d1f8      	bne.n	1000bfc6 <__hi0bits+0x36>
1000bfd4:	2020      	movs	r0, #32
1000bfd6:	e7f6      	b.n	1000bfc6 <__hi0bits+0x36>
1000bfd8:	3002      	adds	r0, #2
1000bfda:	e7f4      	b.n	1000bfc6 <__hi0bits+0x36>

1000bfdc <__lo0bits>:
1000bfdc:	6803      	ldr	r3, [r0, #0]
1000bfde:	0002      	movs	r2, r0
1000bfe0:	0759      	lsls	r1, r3, #29
1000bfe2:	d007      	beq.n	1000bff4 <__lo0bits+0x18>
1000bfe4:	07d9      	lsls	r1, r3, #31
1000bfe6:	d41e      	bmi.n	1000c026 <__lo0bits+0x4a>
1000bfe8:	0799      	lsls	r1, r3, #30
1000bfea:	d520      	bpl.n	1000c02e <__lo0bits+0x52>
1000bfec:	085b      	lsrs	r3, r3, #1
1000bfee:	6003      	str	r3, [r0, #0]
1000bff0:	2001      	movs	r0, #1
1000bff2:	4770      	bx	lr
1000bff4:	2000      	movs	r0, #0
1000bff6:	0419      	lsls	r1, r3, #16
1000bff8:	d101      	bne.n	1000bffe <__lo0bits+0x22>
1000bffa:	0c1b      	lsrs	r3, r3, #16
1000bffc:	3010      	adds	r0, #16
1000bffe:	21ff      	movs	r1, #255	; 0xff
1000c000:	4219      	tst	r1, r3
1000c002:	d101      	bne.n	1000c008 <__lo0bits+0x2c>
1000c004:	3008      	adds	r0, #8
1000c006:	0a1b      	lsrs	r3, r3, #8
1000c008:	0719      	lsls	r1, r3, #28
1000c00a:	d101      	bne.n	1000c010 <__lo0bits+0x34>
1000c00c:	3004      	adds	r0, #4
1000c00e:	091b      	lsrs	r3, r3, #4
1000c010:	0799      	lsls	r1, r3, #30
1000c012:	d101      	bne.n	1000c018 <__lo0bits+0x3c>
1000c014:	3002      	adds	r0, #2
1000c016:	089b      	lsrs	r3, r3, #2
1000c018:	07d9      	lsls	r1, r3, #31
1000c01a:	d402      	bmi.n	1000c022 <__lo0bits+0x46>
1000c01c:	3001      	adds	r0, #1
1000c01e:	085b      	lsrs	r3, r3, #1
1000c020:	d003      	beq.n	1000c02a <__lo0bits+0x4e>
1000c022:	6013      	str	r3, [r2, #0]
1000c024:	e7e5      	b.n	1000bff2 <__lo0bits+0x16>
1000c026:	2000      	movs	r0, #0
1000c028:	e7e3      	b.n	1000bff2 <__lo0bits+0x16>
1000c02a:	2020      	movs	r0, #32
1000c02c:	e7e1      	b.n	1000bff2 <__lo0bits+0x16>
1000c02e:	089b      	lsrs	r3, r3, #2
1000c030:	6003      	str	r3, [r0, #0]
1000c032:	2002      	movs	r0, #2
1000c034:	e7dd      	b.n	1000bff2 <__lo0bits+0x16>
1000c036:	46c0      	nop			; (mov r8, r8)

1000c038 <__i2b>:
1000c038:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000c03a:	b570      	push	{r4, r5, r6, lr}
1000c03c:	0004      	movs	r4, r0
1000c03e:	000d      	movs	r5, r1
1000c040:	2b00      	cmp	r3, #0
1000c042:	d00a      	beq.n	1000c05a <__i2b+0x22>
1000c044:	6858      	ldr	r0, [r3, #4]
1000c046:	2800      	cmp	r0, #0
1000c048:	d015      	beq.n	1000c076 <__i2b+0x3e>
1000c04a:	6802      	ldr	r2, [r0, #0]
1000c04c:	605a      	str	r2, [r3, #4]
1000c04e:	2300      	movs	r3, #0
1000c050:	60c3      	str	r3, [r0, #12]
1000c052:	3301      	adds	r3, #1
1000c054:	6145      	str	r5, [r0, #20]
1000c056:	6103      	str	r3, [r0, #16]
1000c058:	bd70      	pop	{r4, r5, r6, pc}
1000c05a:	2221      	movs	r2, #33	; 0x21
1000c05c:	2104      	movs	r1, #4
1000c05e:	f000 fde7 	bl	1000cc30 <_calloc_r>
1000c062:	1e03      	subs	r3, r0, #0
1000c064:	64e0      	str	r0, [r4, #76]	; 0x4c
1000c066:	d1ed      	bne.n	1000c044 <__i2b+0xc>
1000c068:	21a0      	movs	r1, #160	; 0xa0
1000c06a:	2200      	movs	r2, #0
1000c06c:	4b08      	ldr	r3, [pc, #32]	; (1000c090 <__i2b+0x58>)
1000c06e:	4809      	ldr	r0, [pc, #36]	; (1000c094 <__i2b+0x5c>)
1000c070:	0049      	lsls	r1, r1, #1
1000c072:	f7fb f80d 	bl	10007090 <__assert_func>
1000c076:	221c      	movs	r2, #28
1000c078:	2101      	movs	r1, #1
1000c07a:	0020      	movs	r0, r4
1000c07c:	f000 fdd8 	bl	1000cc30 <_calloc_r>
1000c080:	2800      	cmp	r0, #0
1000c082:	d0f1      	beq.n	1000c068 <__i2b+0x30>
1000c084:	2301      	movs	r3, #1
1000c086:	6043      	str	r3, [r0, #4]
1000c088:	3301      	adds	r3, #1
1000c08a:	6083      	str	r3, [r0, #8]
1000c08c:	e7df      	b.n	1000c04e <__i2b+0x16>
1000c08e:	46c0      	nop			; (mov r8, r8)
1000c090:	1000eae4 	.word	0x1000eae4
1000c094:	1000eb68 	.word	0x1000eb68

1000c098 <__multiply>:
1000c098:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c09a:	464e      	mov	r6, r9
1000c09c:	4657      	mov	r7, sl
1000c09e:	4645      	mov	r5, r8
1000c0a0:	46de      	mov	lr, fp
1000c0a2:	b5e0      	push	{r5, r6, r7, lr}
1000c0a4:	690b      	ldr	r3, [r1, #16]
1000c0a6:	6916      	ldr	r6, [r2, #16]
1000c0a8:	468a      	mov	sl, r1
1000c0aa:	4691      	mov	r9, r2
1000c0ac:	4698      	mov	r8, r3
1000c0ae:	b085      	sub	sp, #20
1000c0b0:	42b3      	cmp	r3, r6
1000c0b2:	db04      	blt.n	1000c0be <__multiply+0x26>
1000c0b4:	0033      	movs	r3, r6
1000c0b6:	4689      	mov	r9, r1
1000c0b8:	4646      	mov	r6, r8
1000c0ba:	4692      	mov	sl, r2
1000c0bc:	4698      	mov	r8, r3
1000c0be:	464b      	mov	r3, r9
1000c0c0:	6859      	ldr	r1, [r3, #4]
1000c0c2:	4643      	mov	r3, r8
1000c0c4:	18f5      	adds	r5, r6, r3
1000c0c6:	464b      	mov	r3, r9
1000c0c8:	689b      	ldr	r3, [r3, #8]
1000c0ca:	42ab      	cmp	r3, r5
1000c0cc:	da00      	bge.n	1000c0d0 <__multiply+0x38>
1000c0ce:	3101      	adds	r1, #1
1000c0d0:	f7ff fed8 	bl	1000be84 <_Balloc>
1000c0d4:	1e07      	subs	r7, r0, #0
1000c0d6:	d100      	bne.n	1000c0da <__multiply+0x42>
1000c0d8:	e0aa      	b.n	1000c230 <__multiply+0x198>
1000c0da:	2314      	movs	r3, #20
1000c0dc:	469c      	mov	ip, r3
1000c0de:	4484      	add	ip, r0
1000c0e0:	4663      	mov	r3, ip
1000c0e2:	00ac      	lsls	r4, r5, #2
1000c0e4:	4464      	add	r4, ip
1000c0e6:	0018      	movs	r0, r3
1000c0e8:	2200      	movs	r2, #0
1000c0ea:	42a3      	cmp	r3, r4
1000c0ec:	d202      	bcs.n	1000c0f4 <__multiply+0x5c>
1000c0ee:	c304      	stmia	r3!, {r2}
1000c0f0:	429c      	cmp	r4, r3
1000c0f2:	d8fc      	bhi.n	1000c0ee <__multiply+0x56>
1000c0f4:	2314      	movs	r3, #20
1000c0f6:	444b      	add	r3, r9
1000c0f8:	469b      	mov	fp, r3
1000c0fa:	4643      	mov	r3, r8
1000c0fc:	4651      	mov	r1, sl
1000c0fe:	009b      	lsls	r3, r3, #2
1000c100:	4698      	mov	r8, r3
1000c102:	3114      	adds	r1, #20
1000c104:	00b6      	lsls	r6, r6, #2
1000c106:	4488      	add	r8, r1
1000c108:	445e      	add	r6, fp
1000c10a:	4541      	cmp	r1, r8
1000c10c:	d275      	bcs.n	1000c1fa <__multiply+0x162>
1000c10e:	2304      	movs	r3, #4
1000c110:	469a      	mov	sl, r3
1000c112:	464b      	mov	r3, r9
1000c114:	3315      	adds	r3, #21
1000c116:	429e      	cmp	r6, r3
1000c118:	d300      	bcc.n	1000c11c <__multiply+0x84>
1000c11a:	e081      	b.n	1000c220 <__multiply+0x188>
1000c11c:	4643      	mov	r3, r8
1000c11e:	9300      	str	r3, [sp, #0]
1000c120:	4653      	mov	r3, sl
1000c122:	9301      	str	r3, [sp, #4]
1000c124:	465b      	mov	r3, fp
1000c126:	46a2      	mov	sl, r4
1000c128:	46b4      	mov	ip, r6
1000c12a:	46b9      	mov	r9, r7
1000c12c:	000c      	movs	r4, r1
1000c12e:	46ab      	mov	fp, r5
1000c130:	9302      	str	r3, [sp, #8]
1000c132:	e006      	b.n	1000c142 <__multiply+0xaa>
1000c134:	0c2d      	lsrs	r5, r5, #16
1000c136:	d132      	bne.n	1000c19e <__multiply+0x106>
1000c138:	9b00      	ldr	r3, [sp, #0]
1000c13a:	3404      	adds	r4, #4
1000c13c:	3004      	adds	r0, #4
1000c13e:	42a3      	cmp	r3, r4
1000c140:	d958      	bls.n	1000c1f4 <__multiply+0x15c>
1000c142:	6825      	ldr	r5, [r4, #0]
1000c144:	042b      	lsls	r3, r5, #16
1000c146:	0c19      	lsrs	r1, r3, #16
1000c148:	2b00      	cmp	r3, #0
1000c14a:	d0f3      	beq.n	1000c134 <__multiply+0x9c>
1000c14c:	9d02      	ldr	r5, [sp, #8]
1000c14e:	4653      	mov	r3, sl
1000c150:	0007      	movs	r7, r0
1000c152:	46a0      	mov	r8, r4
1000c154:	4682      	mov	sl, r0
1000c156:	2600      	movs	r6, #0
1000c158:	000c      	movs	r4, r1
1000c15a:	0028      	movs	r0, r5
1000c15c:	9303      	str	r3, [sp, #12]
1000c15e:	c808      	ldmia	r0!, {r3}
1000c160:	6839      	ldr	r1, [r7, #0]
1000c162:	041a      	lsls	r2, r3, #16
1000c164:	0c12      	lsrs	r2, r2, #16
1000c166:	4362      	muls	r2, r4
1000c168:	0c1b      	lsrs	r3, r3, #16
1000c16a:	040d      	lsls	r5, r1, #16
1000c16c:	4363      	muls	r3, r4
1000c16e:	0c2d      	lsrs	r5, r5, #16
1000c170:	1952      	adds	r2, r2, r5
1000c172:	1992      	adds	r2, r2, r6
1000c174:	0c09      	lsrs	r1, r1, #16
1000c176:	185b      	adds	r3, r3, r1
1000c178:	0c11      	lsrs	r1, r2, #16
1000c17a:	185b      	adds	r3, r3, r1
1000c17c:	0412      	lsls	r2, r2, #16
1000c17e:	0c1e      	lsrs	r6, r3, #16
1000c180:	0c12      	lsrs	r2, r2, #16
1000c182:	041b      	lsls	r3, r3, #16
1000c184:	4313      	orrs	r3, r2
1000c186:	c708      	stmia	r7!, {r3}
1000c188:	4584      	cmp	ip, r0
1000c18a:	d8e8      	bhi.n	1000c15e <__multiply+0xc6>
1000c18c:	4650      	mov	r0, sl
1000c18e:	4644      	mov	r4, r8
1000c190:	9b03      	ldr	r3, [sp, #12]
1000c192:	469a      	mov	sl, r3
1000c194:	9b01      	ldr	r3, [sp, #4]
1000c196:	50c6      	str	r6, [r0, r3]
1000c198:	6825      	ldr	r5, [r4, #0]
1000c19a:	0c2d      	lsrs	r5, r5, #16
1000c19c:	d0cc      	beq.n	1000c138 <__multiply+0xa0>
1000c19e:	0006      	movs	r6, r0
1000c1a0:	2200      	movs	r2, #0
1000c1a2:	6803      	ldr	r3, [r0, #0]
1000c1a4:	46a0      	mov	r8, r4
1000c1a6:	4660      	mov	r0, ip
1000c1a8:	0019      	movs	r1, r3
1000c1aa:	0014      	movs	r4, r2
1000c1ac:	46b4      	mov	ip, r6
1000c1ae:	9f02      	ldr	r7, [sp, #8]
1000c1b0:	883a      	ldrh	r2, [r7, #0]
1000c1b2:	0c09      	lsrs	r1, r1, #16
1000c1b4:	436a      	muls	r2, r5
1000c1b6:	1912      	adds	r2, r2, r4
1000c1b8:	1852      	adds	r2, r2, r1
1000c1ba:	041b      	lsls	r3, r3, #16
1000c1bc:	0411      	lsls	r1, r2, #16
1000c1be:	0c1b      	lsrs	r3, r3, #16
1000c1c0:	430b      	orrs	r3, r1
1000c1c2:	6033      	str	r3, [r6, #0]
1000c1c4:	cf10      	ldmia	r7!, {r4}
1000c1c6:	6871      	ldr	r1, [r6, #4]
1000c1c8:	0c24      	lsrs	r4, r4, #16
1000c1ca:	436c      	muls	r4, r5
1000c1cc:	040b      	lsls	r3, r1, #16
1000c1ce:	0c1b      	lsrs	r3, r3, #16
1000c1d0:	18e3      	adds	r3, r4, r3
1000c1d2:	0c12      	lsrs	r2, r2, #16
1000c1d4:	189b      	adds	r3, r3, r2
1000c1d6:	0c1c      	lsrs	r4, r3, #16
1000c1d8:	3604      	adds	r6, #4
1000c1da:	42b8      	cmp	r0, r7
1000c1dc:	d8e8      	bhi.n	1000c1b0 <__multiply+0x118>
1000c1de:	4662      	mov	r2, ip
1000c1e0:	4684      	mov	ip, r0
1000c1e2:	0010      	movs	r0, r2
1000c1e4:	4644      	mov	r4, r8
1000c1e6:	9a01      	ldr	r2, [sp, #4]
1000c1e8:	3404      	adds	r4, #4
1000c1ea:	5083      	str	r3, [r0, r2]
1000c1ec:	9b00      	ldr	r3, [sp, #0]
1000c1ee:	3004      	adds	r0, #4
1000c1f0:	42a3      	cmp	r3, r4
1000c1f2:	d8a6      	bhi.n	1000c142 <__multiply+0xaa>
1000c1f4:	4654      	mov	r4, sl
1000c1f6:	465d      	mov	r5, fp
1000c1f8:	464f      	mov	r7, r9
1000c1fa:	2d00      	cmp	r5, #0
1000c1fc:	dc03      	bgt.n	1000c206 <__multiply+0x16e>
1000c1fe:	e006      	b.n	1000c20e <__multiply+0x176>
1000c200:	3d01      	subs	r5, #1
1000c202:	2d00      	cmp	r5, #0
1000c204:	d003      	beq.n	1000c20e <__multiply+0x176>
1000c206:	3c04      	subs	r4, #4
1000c208:	6823      	ldr	r3, [r4, #0]
1000c20a:	2b00      	cmp	r3, #0
1000c20c:	d0f8      	beq.n	1000c200 <__multiply+0x168>
1000c20e:	0038      	movs	r0, r7
1000c210:	613d      	str	r5, [r7, #16]
1000c212:	b005      	add	sp, #20
1000c214:	bcf0      	pop	{r4, r5, r6, r7}
1000c216:	46bb      	mov	fp, r7
1000c218:	46b2      	mov	sl, r6
1000c21a:	46a9      	mov	r9, r5
1000c21c:	46a0      	mov	r8, r4
1000c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c220:	464b      	mov	r3, r9
1000c222:	1af3      	subs	r3, r6, r3
1000c224:	3b15      	subs	r3, #21
1000c226:	089b      	lsrs	r3, r3, #2
1000c228:	3301      	adds	r3, #1
1000c22a:	009b      	lsls	r3, r3, #2
1000c22c:	469a      	mov	sl, r3
1000c22e:	e775      	b.n	1000c11c <__multiply+0x84>
1000c230:	215e      	movs	r1, #94	; 0x5e
1000c232:	2200      	movs	r2, #0
1000c234:	4b02      	ldr	r3, [pc, #8]	; (1000c240 <__multiply+0x1a8>)
1000c236:	4803      	ldr	r0, [pc, #12]	; (1000c244 <__multiply+0x1ac>)
1000c238:	31ff      	adds	r1, #255	; 0xff
1000c23a:	f7fa ff29 	bl	10007090 <__assert_func>
1000c23e:	46c0      	nop			; (mov r8, r8)
1000c240:	1000eae4 	.word	0x1000eae4
1000c244:	1000eb68 	.word	0x1000eb68

1000c248 <__pow5mult>:
1000c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c24a:	2303      	movs	r3, #3
1000c24c:	4647      	mov	r7, r8
1000c24e:	0014      	movs	r4, r2
1000c250:	46ce      	mov	lr, r9
1000c252:	001a      	movs	r2, r3
1000c254:	b580      	push	{r7, lr}
1000c256:	000e      	movs	r6, r1
1000c258:	0007      	movs	r7, r0
1000c25a:	4022      	ands	r2, r4
1000c25c:	4223      	tst	r3, r4
1000c25e:	d134      	bne.n	1000c2ca <__pow5mult+0x82>
1000c260:	10a4      	asrs	r4, r4, #2
1000c262:	d023      	beq.n	1000c2ac <__pow5mult+0x64>
1000c264:	6cbd      	ldr	r5, [r7, #72]	; 0x48
1000c266:	2d00      	cmp	r5, #0
1000c268:	d038      	beq.n	1000c2dc <__pow5mult+0x94>
1000c26a:	2301      	movs	r3, #1
1000c26c:	4698      	mov	r8, r3
1000c26e:	2300      	movs	r3, #0
1000c270:	4699      	mov	r9, r3
1000c272:	4643      	mov	r3, r8
1000c274:	4223      	tst	r3, r4
1000c276:	d108      	bne.n	1000c28a <__pow5mult+0x42>
1000c278:	1064      	asrs	r4, r4, #1
1000c27a:	d017      	beq.n	1000c2ac <__pow5mult+0x64>
1000c27c:	6828      	ldr	r0, [r5, #0]
1000c27e:	2800      	cmp	r0, #0
1000c280:	d019      	beq.n	1000c2b6 <__pow5mult+0x6e>
1000c282:	0005      	movs	r5, r0
1000c284:	4643      	mov	r3, r8
1000c286:	4223      	tst	r3, r4
1000c288:	d0f6      	beq.n	1000c278 <__pow5mult+0x30>
1000c28a:	002a      	movs	r2, r5
1000c28c:	0031      	movs	r1, r6
1000c28e:	0038      	movs	r0, r7
1000c290:	f7ff ff02 	bl	1000c098 <__multiply>
1000c294:	2e00      	cmp	r6, #0
1000c296:	d006      	beq.n	1000c2a6 <__pow5mult+0x5e>
1000c298:	6872      	ldr	r2, [r6, #4]
1000c29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000c29c:	0092      	lsls	r2, r2, #2
1000c29e:	189b      	adds	r3, r3, r2
1000c2a0:	681a      	ldr	r2, [r3, #0]
1000c2a2:	6032      	str	r2, [r6, #0]
1000c2a4:	601e      	str	r6, [r3, #0]
1000c2a6:	0006      	movs	r6, r0
1000c2a8:	1064      	asrs	r4, r4, #1
1000c2aa:	d1e7      	bne.n	1000c27c <__pow5mult+0x34>
1000c2ac:	0030      	movs	r0, r6
1000c2ae:	bcc0      	pop	{r6, r7}
1000c2b0:	46b9      	mov	r9, r7
1000c2b2:	46b0      	mov	r8, r6
1000c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c2b6:	002a      	movs	r2, r5
1000c2b8:	0029      	movs	r1, r5
1000c2ba:	0038      	movs	r0, r7
1000c2bc:	f7ff feec 	bl	1000c098 <__multiply>
1000c2c0:	464b      	mov	r3, r9
1000c2c2:	6028      	str	r0, [r5, #0]
1000c2c4:	0005      	movs	r5, r0
1000c2c6:	6003      	str	r3, [r0, #0]
1000c2c8:	e7dc      	b.n	1000c284 <__pow5mult+0x3c>
1000c2ca:	4b0f      	ldr	r3, [pc, #60]	; (1000c308 <__pow5mult+0xc0>)
1000c2cc:	3a01      	subs	r2, #1
1000c2ce:	0092      	lsls	r2, r2, #2
1000c2d0:	58d2      	ldr	r2, [r2, r3]
1000c2d2:	2300      	movs	r3, #0
1000c2d4:	f7ff fe08 	bl	1000bee8 <__multadd>
1000c2d8:	0006      	movs	r6, r0
1000c2da:	e7c1      	b.n	1000c260 <__pow5mult+0x18>
1000c2dc:	2101      	movs	r1, #1
1000c2de:	0038      	movs	r0, r7
1000c2e0:	f7ff fdd0 	bl	1000be84 <_Balloc>
1000c2e4:	1e05      	subs	r5, r0, #0
1000c2e6:	d007      	beq.n	1000c2f8 <__pow5mult+0xb0>
1000c2e8:	4b08      	ldr	r3, [pc, #32]	; (1000c30c <__pow5mult+0xc4>)
1000c2ea:	6143      	str	r3, [r0, #20]
1000c2ec:	2301      	movs	r3, #1
1000c2ee:	6103      	str	r3, [r0, #16]
1000c2f0:	2300      	movs	r3, #0
1000c2f2:	64b8      	str	r0, [r7, #72]	; 0x48
1000c2f4:	6003      	str	r3, [r0, #0]
1000c2f6:	e7b8      	b.n	1000c26a <__pow5mult+0x22>
1000c2f8:	21a0      	movs	r1, #160	; 0xa0
1000c2fa:	2200      	movs	r2, #0
1000c2fc:	4b04      	ldr	r3, [pc, #16]	; (1000c310 <__pow5mult+0xc8>)
1000c2fe:	4805      	ldr	r0, [pc, #20]	; (1000c314 <__pow5mult+0xcc>)
1000c300:	0049      	lsls	r1, r1, #1
1000c302:	f7fa fec5 	bl	10007090 <__assert_func>
1000c306:	46c0      	nop			; (mov r8, r8)
1000c308:	1000ebd8 	.word	0x1000ebd8
1000c30c:	00000271 	.word	0x00000271
1000c310:	1000eae4 	.word	0x1000eae4
1000c314:	1000eb68 	.word	0x1000eb68

1000c318 <__lshift>:
1000c318:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c31a:	4645      	mov	r5, r8
1000c31c:	46de      	mov	lr, fp
1000c31e:	4657      	mov	r7, sl
1000c320:	464e      	mov	r6, r9
1000c322:	b5e0      	push	{r5, r6, r7, lr}
1000c324:	000d      	movs	r5, r1
1000c326:	692b      	ldr	r3, [r5, #16]
1000c328:	1154      	asrs	r4, r2, #5
1000c32a:	4698      	mov	r8, r3
1000c32c:	44a0      	add	r8, r4
1000c32e:	4643      	mov	r3, r8
1000c330:	1c5e      	adds	r6, r3, #1
1000c332:	68ab      	ldr	r3, [r5, #8]
1000c334:	4683      	mov	fp, r0
1000c336:	0017      	movs	r7, r2
1000c338:	6849      	ldr	r1, [r1, #4]
1000c33a:	b083      	sub	sp, #12
1000c33c:	429e      	cmp	r6, r3
1000c33e:	dd03      	ble.n	1000c348 <__lshift+0x30>
1000c340:	3101      	adds	r1, #1
1000c342:	005b      	lsls	r3, r3, #1
1000c344:	429e      	cmp	r6, r3
1000c346:	dcfb      	bgt.n	1000c340 <__lshift+0x28>
1000c348:	4658      	mov	r0, fp
1000c34a:	f7ff fd9b 	bl	1000be84 <_Balloc>
1000c34e:	4684      	mov	ip, r0
1000c350:	2800      	cmp	r0, #0
1000c352:	d053      	beq.n	1000c3fc <__lshift+0xe4>
1000c354:	0001      	movs	r1, r0
1000c356:	3114      	adds	r1, #20
1000c358:	000b      	movs	r3, r1
1000c35a:	9101      	str	r1, [sp, #4]
1000c35c:	2c00      	cmp	r4, #0
1000c35e:	dd0c      	ble.n	1000c37a <__lshift+0x62>
1000c360:	00a4      	lsls	r4, r4, #2
1000c362:	0022      	movs	r2, r4
1000c364:	2000      	movs	r0, #0
1000c366:	3214      	adds	r2, #20
1000c368:	4462      	add	r2, ip
1000c36a:	c301      	stmia	r3!, {r0}
1000c36c:	4293      	cmp	r3, r2
1000c36e:	d1fc      	bne.n	1000c36a <__lshift+0x52>
1000c370:	9b01      	ldr	r3, [sp, #4]
1000c372:	4699      	mov	r9, r3
1000c374:	44a1      	add	r9, r4
1000c376:	464b      	mov	r3, r9
1000c378:	9301      	str	r3, [sp, #4]
1000c37a:	221f      	movs	r2, #31
1000c37c:	002b      	movs	r3, r5
1000c37e:	0011      	movs	r1, r2
1000c380:	692c      	ldr	r4, [r5, #16]
1000c382:	3314      	adds	r3, #20
1000c384:	00a4      	lsls	r4, r4, #2
1000c386:	4039      	ands	r1, r7
1000c388:	468a      	mov	sl, r1
1000c38a:	191c      	adds	r4, r3, r4
1000c38c:	423a      	tst	r2, r7
1000c38e:	d02f      	beq.n	1000c3f0 <__lshift+0xd8>
1000c390:	3201      	adds	r2, #1
1000c392:	1a52      	subs	r2, r2, r1
1000c394:	4691      	mov	r9, r2
1000c396:	2700      	movs	r7, #0
1000c398:	9801      	ldr	r0, [sp, #4]
1000c39a:	4651      	mov	r1, sl
1000c39c:	681a      	ldr	r2, [r3, #0]
1000c39e:	408a      	lsls	r2, r1
1000c3a0:	433a      	orrs	r2, r7
1000c3a2:	c004      	stmia	r0!, {r2}
1000c3a4:	464a      	mov	r2, r9
1000c3a6:	cb80      	ldmia	r3!, {r7}
1000c3a8:	40d7      	lsrs	r7, r2
1000c3aa:	429c      	cmp	r4, r3
1000c3ac:	d8f5      	bhi.n	1000c39a <__lshift+0x82>
1000c3ae:	002a      	movs	r2, r5
1000c3b0:	3215      	adds	r2, #21
1000c3b2:	2304      	movs	r3, #4
1000c3b4:	4294      	cmp	r4, r2
1000c3b6:	d304      	bcc.n	1000c3c2 <__lshift+0xaa>
1000c3b8:	1b63      	subs	r3, r4, r5
1000c3ba:	3b15      	subs	r3, #21
1000c3bc:	089b      	lsrs	r3, r3, #2
1000c3be:	3301      	adds	r3, #1
1000c3c0:	009b      	lsls	r3, r3, #2
1000c3c2:	9a01      	ldr	r2, [sp, #4]
1000c3c4:	50d7      	str	r7, [r2, r3]
1000c3c6:	2f00      	cmp	r7, #0
1000c3c8:	d100      	bne.n	1000c3cc <__lshift+0xb4>
1000c3ca:	4646      	mov	r6, r8
1000c3cc:	4663      	mov	r3, ip
1000c3ce:	611e      	str	r6, [r3, #16]
1000c3d0:	465b      	mov	r3, fp
1000c3d2:	4660      	mov	r0, ip
1000c3d4:	686a      	ldr	r2, [r5, #4]
1000c3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000c3d8:	0092      	lsls	r2, r2, #2
1000c3da:	189b      	adds	r3, r3, r2
1000c3dc:	681a      	ldr	r2, [r3, #0]
1000c3de:	602a      	str	r2, [r5, #0]
1000c3e0:	601d      	str	r5, [r3, #0]
1000c3e2:	b003      	add	sp, #12
1000c3e4:	bcf0      	pop	{r4, r5, r6, r7}
1000c3e6:	46bb      	mov	fp, r7
1000c3e8:	46b2      	mov	sl, r6
1000c3ea:	46a9      	mov	r9, r5
1000c3ec:	46a0      	mov	r8, r4
1000c3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c3f0:	9901      	ldr	r1, [sp, #4]
1000c3f2:	cb04      	ldmia	r3!, {r2}
1000c3f4:	c104      	stmia	r1!, {r2}
1000c3f6:	429c      	cmp	r4, r3
1000c3f8:	d8fb      	bhi.n	1000c3f2 <__lshift+0xda>
1000c3fa:	e7e6      	b.n	1000c3ca <__lshift+0xb2>
1000c3fc:	21da      	movs	r1, #218	; 0xda
1000c3fe:	2200      	movs	r2, #0
1000c400:	4b02      	ldr	r3, [pc, #8]	; (1000c40c <__lshift+0xf4>)
1000c402:	4803      	ldr	r0, [pc, #12]	; (1000c410 <__lshift+0xf8>)
1000c404:	31ff      	adds	r1, #255	; 0xff
1000c406:	f7fa fe43 	bl	10007090 <__assert_func>
1000c40a:	46c0      	nop			; (mov r8, r8)
1000c40c:	1000eae4 	.word	0x1000eae4
1000c410:	1000eb68 	.word	0x1000eb68

1000c414 <__mcmp>:
1000c414:	6902      	ldr	r2, [r0, #16]
1000c416:	690b      	ldr	r3, [r1, #16]
1000c418:	b530      	push	{r4, r5, lr}
1000c41a:	0005      	movs	r5, r0
1000c41c:	1ad0      	subs	r0, r2, r3
1000c41e:	429a      	cmp	r2, r3
1000c420:	d114      	bne.n	1000c44c <__mcmp+0x38>
1000c422:	009b      	lsls	r3, r3, #2
1000c424:	3514      	adds	r5, #20
1000c426:	3114      	adds	r1, #20
1000c428:	18ea      	adds	r2, r5, r3
1000c42a:	18cb      	adds	r3, r1, r3
1000c42c:	e001      	b.n	1000c432 <__mcmp+0x1e>
1000c42e:	4295      	cmp	r5, r2
1000c430:	d20c      	bcs.n	1000c44c <__mcmp+0x38>
1000c432:	3a04      	subs	r2, #4
1000c434:	3b04      	subs	r3, #4
1000c436:	6814      	ldr	r4, [r2, #0]
1000c438:	6819      	ldr	r1, [r3, #0]
1000c43a:	428c      	cmp	r4, r1
1000c43c:	d0f7      	beq.n	1000c42e <__mcmp+0x1a>
1000c43e:	2300      	movs	r3, #0
1000c440:	428c      	cmp	r4, r1
1000c442:	415b      	adcs	r3, r3
1000c444:	2002      	movs	r0, #2
1000c446:	425b      	negs	r3, r3
1000c448:	4018      	ands	r0, r3
1000c44a:	3801      	subs	r0, #1
1000c44c:	bd30      	pop	{r4, r5, pc}
1000c44e:	46c0      	nop			; (mov r8, r8)

1000c450 <__mdiff>:
1000c450:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c452:	4657      	mov	r7, sl
1000c454:	4645      	mov	r5, r8
1000c456:	46de      	mov	lr, fp
1000c458:	464e      	mov	r6, r9
1000c45a:	b5e0      	push	{r5, r6, r7, lr}
1000c45c:	0017      	movs	r7, r2
1000c45e:	4688      	mov	r8, r1
1000c460:	690a      	ldr	r2, [r1, #16]
1000c462:	6939      	ldr	r1, [r7, #16]
1000c464:	b083      	sub	sp, #12
1000c466:	1a54      	subs	r4, r2, r1
1000c468:	428a      	cmp	r2, r1
1000c46a:	d116      	bne.n	1000c49a <__mdiff+0x4a>
1000c46c:	4646      	mov	r6, r8
1000c46e:	003a      	movs	r2, r7
1000c470:	0089      	lsls	r1, r1, #2
1000c472:	3614      	adds	r6, #20
1000c474:	3214      	adds	r2, #20
1000c476:	1873      	adds	r3, r6, r1
1000c478:	1852      	adds	r2, r2, r1
1000c47a:	e002      	b.n	1000c482 <__mdiff+0x32>
1000c47c:	429e      	cmp	r6, r3
1000c47e:	d300      	bcc.n	1000c482 <__mdiff+0x32>
1000c480:	e091      	b.n	1000c5a6 <__mdiff+0x156>
1000c482:	3b04      	subs	r3, #4
1000c484:	3a04      	subs	r2, #4
1000c486:	681d      	ldr	r5, [r3, #0]
1000c488:	6811      	ldr	r1, [r2, #0]
1000c48a:	428d      	cmp	r5, r1
1000c48c:	d0f6      	beq.n	1000c47c <__mdiff+0x2c>
1000c48e:	d207      	bcs.n	1000c4a0 <__mdiff+0x50>
1000c490:	4643      	mov	r3, r8
1000c492:	2401      	movs	r4, #1
1000c494:	46b8      	mov	r8, r7
1000c496:	001f      	movs	r7, r3
1000c498:	e002      	b.n	1000c4a0 <__mdiff+0x50>
1000c49a:	2c00      	cmp	r4, #0
1000c49c:	dbf8      	blt.n	1000c490 <__mdiff+0x40>
1000c49e:	2400      	movs	r4, #0
1000c4a0:	4643      	mov	r3, r8
1000c4a2:	6859      	ldr	r1, [r3, #4]
1000c4a4:	f7ff fcee 	bl	1000be84 <_Balloc>
1000c4a8:	2800      	cmp	r0, #0
1000c4aa:	d100      	bne.n	1000c4ae <__mdiff+0x5e>
1000c4ac:	e094      	b.n	1000c5d8 <__mdiff+0x188>
1000c4ae:	2214      	movs	r2, #20
1000c4b0:	4442      	add	r2, r8
1000c4b2:	4691      	mov	r9, r2
1000c4b4:	693a      	ldr	r2, [r7, #16]
1000c4b6:	4643      	mov	r3, r8
1000c4b8:	0092      	lsls	r2, r2, #2
1000c4ba:	4694      	mov	ip, r2
1000c4bc:	2214      	movs	r2, #20
1000c4be:	0039      	movs	r1, r7
1000c4c0:	4692      	mov	sl, r2
1000c4c2:	2200      	movs	r2, #0
1000c4c4:	691b      	ldr	r3, [r3, #16]
1000c4c6:	3114      	adds	r1, #20
1000c4c8:	464d      	mov	r5, r9
1000c4ca:	60c4      	str	r4, [r0, #12]
1000c4cc:	448c      	add	ip, r1
1000c4ce:	009c      	lsls	r4, r3, #2
1000c4d0:	444c      	add	r4, r9
1000c4d2:	46bb      	mov	fp, r7
1000c4d4:	4482      	add	sl, r0
1000c4d6:	4667      	mov	r7, ip
1000c4d8:	2614      	movs	r6, #20
1000c4da:	4684      	mov	ip, r0
1000c4dc:	4699      	mov	r9, r3
1000c4de:	0010      	movs	r0, r2
1000c4e0:	000a      	movs	r2, r1
1000c4e2:	9500      	str	r5, [sp, #0]
1000c4e4:	9401      	str	r4, [sp, #4]
1000c4e6:	4643      	mov	r3, r8
1000c4e8:	ca02      	ldmia	r2!, {r1}
1000c4ea:	599d      	ldr	r5, [r3, r6]
1000c4ec:	040b      	lsls	r3, r1, #16
1000c4ee:	042c      	lsls	r4, r5, #16
1000c4f0:	0c1b      	lsrs	r3, r3, #16
1000c4f2:	0c24      	lsrs	r4, r4, #16
1000c4f4:	1ae4      	subs	r4, r4, r3
1000c4f6:	4663      	mov	r3, ip
1000c4f8:	1824      	adds	r4, r4, r0
1000c4fa:	0c09      	lsrs	r1, r1, #16
1000c4fc:	0c2d      	lsrs	r5, r5, #16
1000c4fe:	1a6d      	subs	r5, r5, r1
1000c500:	1421      	asrs	r1, r4, #16
1000c502:	1869      	adds	r1, r5, r1
1000c504:	0424      	lsls	r4, r4, #16
1000c506:	1408      	asrs	r0, r1, #16
1000c508:	0c24      	lsrs	r4, r4, #16
1000c50a:	0409      	lsls	r1, r1, #16
1000c50c:	430c      	orrs	r4, r1
1000c50e:	519c      	str	r4, [r3, r6]
1000c510:	3604      	adds	r6, #4
1000c512:	4297      	cmp	r7, r2
1000c514:	d8e7      	bhi.n	1000c4e6 <__mdiff+0x96>
1000c516:	9900      	ldr	r1, [sp, #0]
1000c518:	0002      	movs	r2, r0
1000c51a:	464b      	mov	r3, r9
1000c51c:	4660      	mov	r0, ip
1000c51e:	4689      	mov	r9, r1
1000c520:	46bc      	mov	ip, r7
1000c522:	2115      	movs	r1, #21
1000c524:	465f      	mov	r7, fp
1000c526:	4688      	mov	r8, r1
1000c528:	4661      	mov	r1, ip
1000c52a:	1bcf      	subs	r7, r1, r7
1000c52c:	3f15      	subs	r7, #21
1000c52e:	08b9      	lsrs	r1, r7, #2
1000c530:	44d8      	add	r8, fp
1000c532:	0025      	movs	r5, r4
1000c534:	468b      	mov	fp, r1
1000c536:	9c01      	ldr	r4, [sp, #4]
1000c538:	2104      	movs	r1, #4
1000c53a:	45c4      	cmp	ip, r8
1000c53c:	d302      	bcc.n	1000c544 <__mdiff+0xf4>
1000c53e:	4659      	mov	r1, fp
1000c540:	3101      	adds	r1, #1
1000c542:	0089      	lsls	r1, r1, #2
1000c544:	4489      	add	r9, r1
1000c546:	464e      	mov	r6, r9
1000c548:	4451      	add	r1, sl
1000c54a:	454c      	cmp	r4, r9
1000c54c:	d935      	bls.n	1000c5ba <__mdiff+0x16a>
1000c54e:	469c      	mov	ip, r3
1000c550:	4688      	mov	r8, r1
1000c552:	000b      	movs	r3, r1
1000c554:	0017      	movs	r7, r2
1000c556:	0039      	movs	r1, r7
1000c558:	ce04      	ldmia	r6!, {r2}
1000c55a:	0415      	lsls	r5, r2, #16
1000c55c:	0c2d      	lsrs	r5, r5, #16
1000c55e:	19ed      	adds	r5, r5, r7
1000c560:	142d      	asrs	r5, r5, #16
1000c562:	0c17      	lsrs	r7, r2, #16
1000c564:	1852      	adds	r2, r2, r1
1000c566:	19ed      	adds	r5, r5, r7
1000c568:	0412      	lsls	r2, r2, #16
1000c56a:	142f      	asrs	r7, r5, #16
1000c56c:	0c12      	lsrs	r2, r2, #16
1000c56e:	042d      	lsls	r5, r5, #16
1000c570:	4315      	orrs	r5, r2
1000c572:	c320      	stmia	r3!, {r5}
1000c574:	42b4      	cmp	r4, r6
1000c576:	d8ee      	bhi.n	1000c556 <__mdiff+0x106>
1000c578:	464a      	mov	r2, r9
1000c57a:	4641      	mov	r1, r8
1000c57c:	4663      	mov	r3, ip
1000c57e:	3c01      	subs	r4, #1
1000c580:	1aa2      	subs	r2, r4, r2
1000c582:	0892      	lsrs	r2, r2, #2
1000c584:	0092      	lsls	r2, r2, #2
1000c586:	1889      	adds	r1, r1, r2
1000c588:	2d00      	cmp	r5, #0
1000c58a:	d104      	bne.n	1000c596 <__mdiff+0x146>
1000c58c:	3904      	subs	r1, #4
1000c58e:	680a      	ldr	r2, [r1, #0]
1000c590:	3b01      	subs	r3, #1
1000c592:	2a00      	cmp	r2, #0
1000c594:	d0fa      	beq.n	1000c58c <__mdiff+0x13c>
1000c596:	6103      	str	r3, [r0, #16]
1000c598:	b003      	add	sp, #12
1000c59a:	bcf0      	pop	{r4, r5, r6, r7}
1000c59c:	46bb      	mov	fp, r7
1000c59e:	46b2      	mov	sl, r6
1000c5a0:	46a9      	mov	r9, r5
1000c5a2:	46a0      	mov	r8, r4
1000c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5a6:	2100      	movs	r1, #0
1000c5a8:	f7ff fc6c 	bl	1000be84 <_Balloc>
1000c5ac:	2800      	cmp	r0, #0
1000c5ae:	d00d      	beq.n	1000c5cc <__mdiff+0x17c>
1000c5b0:	2301      	movs	r3, #1
1000c5b2:	6103      	str	r3, [r0, #16]
1000c5b4:	2300      	movs	r3, #0
1000c5b6:	6143      	str	r3, [r0, #20]
1000c5b8:	e7ee      	b.n	1000c598 <__mdiff+0x148>
1000c5ba:	2100      	movs	r1, #0
1000c5bc:	45c4      	cmp	ip, r8
1000c5be:	d201      	bcs.n	1000c5c4 <__mdiff+0x174>
1000c5c0:	4451      	add	r1, sl
1000c5c2:	e7e1      	b.n	1000c588 <__mdiff+0x138>
1000c5c4:	465a      	mov	r2, fp
1000c5c6:	0091      	lsls	r1, r2, #2
1000c5c8:	4451      	add	r1, sl
1000c5ca:	e7dd      	b.n	1000c588 <__mdiff+0x138>
1000c5cc:	2200      	movs	r2, #0
1000c5ce:	4b06      	ldr	r3, [pc, #24]	; (1000c5e8 <__mdiff+0x198>)
1000c5d0:	4806      	ldr	r0, [pc, #24]	; (1000c5ec <__mdiff+0x19c>)
1000c5d2:	4907      	ldr	r1, [pc, #28]	; (1000c5f0 <__mdiff+0x1a0>)
1000c5d4:	f7fa fd5c 	bl	10007090 <__assert_func>
1000c5d8:	2190      	movs	r1, #144	; 0x90
1000c5da:	2200      	movs	r2, #0
1000c5dc:	4b02      	ldr	r3, [pc, #8]	; (1000c5e8 <__mdiff+0x198>)
1000c5de:	4803      	ldr	r0, [pc, #12]	; (1000c5ec <__mdiff+0x19c>)
1000c5e0:	0089      	lsls	r1, r1, #2
1000c5e2:	f7fa fd55 	bl	10007090 <__assert_func>
1000c5e6:	46c0      	nop			; (mov r8, r8)
1000c5e8:	1000eae4 	.word	0x1000eae4
1000c5ec:	1000eb68 	.word	0x1000eb68
1000c5f0:	00000232 	.word	0x00000232

1000c5f4 <__d2b>:
1000c5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5f6:	2101      	movs	r1, #1
1000c5f8:	b083      	sub	sp, #12
1000c5fa:	0014      	movs	r4, r2
1000c5fc:	001d      	movs	r5, r3
1000c5fe:	f7ff fc41 	bl	1000be84 <_Balloc>
1000c602:	1e06      	subs	r6, r0, #0
1000c604:	d04a      	beq.n	1000c69c <__d2b+0xa8>
1000c606:	032b      	lsls	r3, r5, #12
1000c608:	006f      	lsls	r7, r5, #1
1000c60a:	0b1b      	lsrs	r3, r3, #12
1000c60c:	0d7f      	lsrs	r7, r7, #21
1000c60e:	d002      	beq.n	1000c616 <__d2b+0x22>
1000c610:	2280      	movs	r2, #128	; 0x80
1000c612:	0352      	lsls	r2, r2, #13
1000c614:	4313      	orrs	r3, r2
1000c616:	9301      	str	r3, [sp, #4]
1000c618:	2c00      	cmp	r4, #0
1000c61a:	d116      	bne.n	1000c64a <__d2b+0x56>
1000c61c:	a801      	add	r0, sp, #4
1000c61e:	f7ff fcdd 	bl	1000bfdc <__lo0bits>
1000c622:	2401      	movs	r4, #1
1000c624:	9b01      	ldr	r3, [sp, #4]
1000c626:	3020      	adds	r0, #32
1000c628:	6173      	str	r3, [r6, #20]
1000c62a:	6134      	str	r4, [r6, #16]
1000c62c:	2f00      	cmp	r7, #0
1000c62e:	d024      	beq.n	1000c67a <__d2b+0x86>
1000c630:	4b1d      	ldr	r3, [pc, #116]	; (1000c6a8 <__d2b+0xb4>)
1000c632:	2435      	movs	r4, #53	; 0x35
1000c634:	469c      	mov	ip, r3
1000c636:	9b08      	ldr	r3, [sp, #32]
1000c638:	4467      	add	r7, ip
1000c63a:	183f      	adds	r7, r7, r0
1000c63c:	601f      	str	r7, [r3, #0]
1000c63e:	1a24      	subs	r4, r4, r0
1000c640:	0030      	movs	r0, r6
1000c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c644:	601c      	str	r4, [r3, #0]
1000c646:	b003      	add	sp, #12
1000c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c64a:	4668      	mov	r0, sp
1000c64c:	9400      	str	r4, [sp, #0]
1000c64e:	f7ff fcc5 	bl	1000bfdc <__lo0bits>
1000c652:	9c01      	ldr	r4, [sp, #4]
1000c654:	2800      	cmp	r0, #0
1000c656:	d01f      	beq.n	1000c698 <__d2b+0xa4>
1000c658:	2320      	movs	r3, #32
1000c65a:	0022      	movs	r2, r4
1000c65c:	1a1b      	subs	r3, r3, r0
1000c65e:	409a      	lsls	r2, r3
1000c660:	40c4      	lsrs	r4, r0
1000c662:	0013      	movs	r3, r2
1000c664:	9a00      	ldr	r2, [sp, #0]
1000c666:	9401      	str	r4, [sp, #4]
1000c668:	4313      	orrs	r3, r2
1000c66a:	6173      	str	r3, [r6, #20]
1000c66c:	61b4      	str	r4, [r6, #24]
1000c66e:	1e63      	subs	r3, r4, #1
1000c670:	419c      	sbcs	r4, r3
1000c672:	3401      	adds	r4, #1
1000c674:	6134      	str	r4, [r6, #16]
1000c676:	2f00      	cmp	r7, #0
1000c678:	d1da      	bne.n	1000c630 <__d2b+0x3c>
1000c67a:	4b0c      	ldr	r3, [pc, #48]	; (1000c6ac <__d2b+0xb8>)
1000c67c:	469c      	mov	ip, r3
1000c67e:	9b08      	ldr	r3, [sp, #32]
1000c680:	4460      	add	r0, ip
1000c682:	6018      	str	r0, [r3, #0]
1000c684:	4b0a      	ldr	r3, [pc, #40]	; (1000c6b0 <__d2b+0xbc>)
1000c686:	18e3      	adds	r3, r4, r3
1000c688:	009b      	lsls	r3, r3, #2
1000c68a:	18f3      	adds	r3, r6, r3
1000c68c:	6958      	ldr	r0, [r3, #20]
1000c68e:	f7ff fc7f 	bl	1000bf90 <__hi0bits>
1000c692:	0164      	lsls	r4, r4, #5
1000c694:	1a24      	subs	r4, r4, r0
1000c696:	e7d3      	b.n	1000c640 <__d2b+0x4c>
1000c698:	9b00      	ldr	r3, [sp, #0]
1000c69a:	e7e6      	b.n	1000c66a <__d2b+0x76>
1000c69c:	2200      	movs	r2, #0
1000c69e:	4b05      	ldr	r3, [pc, #20]	; (1000c6b4 <__d2b+0xc0>)
1000c6a0:	4805      	ldr	r0, [pc, #20]	; (1000c6b8 <__d2b+0xc4>)
1000c6a2:	4906      	ldr	r1, [pc, #24]	; (1000c6bc <__d2b+0xc8>)
1000c6a4:	f7fa fcf4 	bl	10007090 <__assert_func>
1000c6a8:	fffffbcd 	.word	0xfffffbcd
1000c6ac:	fffffbce 	.word	0xfffffbce
1000c6b0:	3fffffff 	.word	0x3fffffff
1000c6b4:	1000eae4 	.word	0x1000eae4
1000c6b8:	1000eb68 	.word	0x1000eb68
1000c6bc:	0000030a 	.word	0x0000030a

1000c6c0 <_realloc_r>:
1000c6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6c2:	4657      	mov	r7, sl
1000c6c4:	464e      	mov	r6, r9
1000c6c6:	46de      	mov	lr, fp
1000c6c8:	4645      	mov	r5, r8
1000c6ca:	b5e0      	push	{r5, r6, r7, lr}
1000c6cc:	000c      	movs	r4, r1
1000c6ce:	0006      	movs	r6, r0
1000c6d0:	0017      	movs	r7, r2
1000c6d2:	b083      	sub	sp, #12
1000c6d4:	2900      	cmp	r1, #0
1000c6d6:	d100      	bne.n	1000c6da <_realloc_r+0x1a>
1000c6d8:	e0ac      	b.n	1000c834 <_realloc_r+0x174>
1000c6da:	f7fb f85f 	bl	1000779c <__malloc_lock>
1000c6de:	2308      	movs	r3, #8
1000c6e0:	425b      	negs	r3, r3
1000c6e2:	4699      	mov	r9, r3
1000c6e4:	44a1      	add	r9, r4
1000c6e6:	464b      	mov	r3, r9
1000c6e8:	685b      	ldr	r3, [r3, #4]
1000c6ea:	2203      	movs	r2, #3
1000c6ec:	0019      	movs	r1, r3
1000c6ee:	003d      	movs	r5, r7
1000c6f0:	4391      	bics	r1, r2
1000c6f2:	350b      	adds	r5, #11
1000c6f4:	46ca      	mov	sl, r9
1000c6f6:	4688      	mov	r8, r1
1000c6f8:	2d16      	cmp	r5, #22
1000c6fa:	d867      	bhi.n	1000c7cc <_realloc_r+0x10c>
1000c6fc:	2510      	movs	r5, #16
1000c6fe:	42af      	cmp	r7, r5
1000c700:	d867      	bhi.n	1000c7d2 <_realloc_r+0x112>
1000c702:	45a8      	cmp	r8, r5
1000c704:	da6e      	bge.n	1000c7e4 <_realloc_r+0x124>
1000c706:	4649      	mov	r1, r9
1000c708:	48c0      	ldr	r0, [pc, #768]	; (1000ca0c <_realloc_r+0x34c>)
1000c70a:	4441      	add	r1, r8
1000c70c:	684a      	ldr	r2, [r1, #4]
1000c70e:	9000      	str	r0, [sp, #0]
1000c710:	6880      	ldr	r0, [r0, #8]
1000c712:	4693      	mov	fp, r2
1000c714:	4288      	cmp	r0, r1
1000c716:	d100      	bne.n	1000c71a <_realloc_r+0x5a>
1000c718:	e0a0      	b.n	1000c85c <_realloc_r+0x19c>
1000c71a:	2001      	movs	r0, #1
1000c71c:	4684      	mov	ip, r0
1000c71e:	0010      	movs	r0, r2
1000c720:	4662      	mov	r2, ip
1000c722:	4390      	bics	r0, r2
1000c724:	1808      	adds	r0, r1, r0
1000c726:	6840      	ldr	r0, [r0, #4]
1000c728:	4210      	tst	r0, r2
1000c72a:	d000      	beq.n	1000c72e <_realloc_r+0x6e>
1000c72c:	e077      	b.n	1000c81e <_realloc_r+0x15e>
1000c72e:	465a      	mov	r2, fp
1000c730:	2003      	movs	r0, #3
1000c732:	4382      	bics	r2, r0
1000c734:	4693      	mov	fp, r2
1000c736:	44c3      	add	fp, r8
1000c738:	455d      	cmp	r5, fp
1000c73a:	dd4e      	ble.n	1000c7da <_realloc_r+0x11a>
1000c73c:	4660      	mov	r0, ip
1000c73e:	4218      	tst	r0, r3
1000c740:	d112      	bne.n	1000c768 <_realloc_r+0xa8>
1000c742:	464b      	mov	r3, r9
1000c744:	4648      	mov	r0, r9
1000c746:	681b      	ldr	r3, [r3, #0]
1000c748:	1ac3      	subs	r3, r0, r3
1000c74a:	2003      	movs	r0, #3
1000c74c:	469b      	mov	fp, r3
1000c74e:	685b      	ldr	r3, [r3, #4]
1000c750:	4383      	bics	r3, r0
1000c752:	18d2      	adds	r2, r2, r3
1000c754:	4442      	add	r2, r8
1000c756:	9200      	str	r2, [sp, #0]
1000c758:	4295      	cmp	r5, r2
1000c75a:	dc00      	bgt.n	1000c75e <_realloc_r+0x9e>
1000c75c:	e0cc      	b.n	1000c8f8 <_realloc_r+0x238>
1000c75e:	4443      	add	r3, r8
1000c760:	9300      	str	r3, [sp, #0]
1000c762:	429d      	cmp	r5, r3
1000c764:	dc00      	bgt.n	1000c768 <_realloc_r+0xa8>
1000c766:	e0cb      	b.n	1000c900 <_realloc_r+0x240>
1000c768:	0039      	movs	r1, r7
1000c76a:	0030      	movs	r0, r6
1000c76c:	f7fa fcd6 	bl	1000711c <_malloc_r>
1000c770:	1e07      	subs	r7, r0, #0
1000c772:	d100      	bne.n	1000c776 <_realloc_r+0xb6>
1000c774:	e11e      	b.n	1000c9b4 <_realloc_r+0x2f4>
1000c776:	464b      	mov	r3, r9
1000c778:	2201      	movs	r2, #1
1000c77a:	685b      	ldr	r3, [r3, #4]
1000c77c:	4393      	bics	r3, r2
1000c77e:	0002      	movs	r2, r0
1000c780:	444b      	add	r3, r9
1000c782:	3a08      	subs	r2, #8
1000c784:	4293      	cmp	r3, r2
1000c786:	d100      	bne.n	1000c78a <_realloc_r+0xca>
1000c788:	e0e3      	b.n	1000c952 <_realloc_r+0x292>
1000c78a:	4642      	mov	r2, r8
1000c78c:	3a04      	subs	r2, #4
1000c78e:	2a24      	cmp	r2, #36	; 0x24
1000c790:	d900      	bls.n	1000c794 <_realloc_r+0xd4>
1000c792:	e0e3      	b.n	1000c95c <_realloc_r+0x29c>
1000c794:	0003      	movs	r3, r0
1000c796:	0021      	movs	r1, r4
1000c798:	2a13      	cmp	r2, #19
1000c79a:	d909      	bls.n	1000c7b0 <_realloc_r+0xf0>
1000c79c:	6823      	ldr	r3, [r4, #0]
1000c79e:	6003      	str	r3, [r0, #0]
1000c7a0:	6863      	ldr	r3, [r4, #4]
1000c7a2:	6043      	str	r3, [r0, #4]
1000c7a4:	2a1b      	cmp	r2, #27
1000c7a6:	d900      	bls.n	1000c7aa <_realloc_r+0xea>
1000c7a8:	e0dc      	b.n	1000c964 <_realloc_r+0x2a4>
1000c7aa:	0003      	movs	r3, r0
1000c7ac:	3108      	adds	r1, #8
1000c7ae:	3308      	adds	r3, #8
1000c7b0:	680a      	ldr	r2, [r1, #0]
1000c7b2:	601a      	str	r2, [r3, #0]
1000c7b4:	684a      	ldr	r2, [r1, #4]
1000c7b6:	605a      	str	r2, [r3, #4]
1000c7b8:	688a      	ldr	r2, [r1, #8]
1000c7ba:	609a      	str	r2, [r3, #8]
1000c7bc:	0030      	movs	r0, r6
1000c7be:	0021      	movs	r1, r4
1000c7c0:	f7fe ffd4 	bl	1000b76c <_free_r>
1000c7c4:	0030      	movs	r0, r6
1000c7c6:	f7fa fff1 	bl	100077ac <__malloc_unlock>
1000c7ca:	e020      	b.n	1000c80e <_realloc_r+0x14e>
1000c7cc:	3204      	adds	r2, #4
1000c7ce:	4395      	bics	r5, r2
1000c7d0:	d595      	bpl.n	1000c6fe <_realloc_r+0x3e>
1000c7d2:	230c      	movs	r3, #12
1000c7d4:	2700      	movs	r7, #0
1000c7d6:	6033      	str	r3, [r6, #0]
1000c7d8:	e019      	b.n	1000c80e <_realloc_r+0x14e>
1000c7da:	46d8      	mov	r8, fp
1000c7dc:	68cb      	ldr	r3, [r1, #12]
1000c7de:	688a      	ldr	r2, [r1, #8]
1000c7e0:	60d3      	str	r3, [r2, #12]
1000c7e2:	609a      	str	r2, [r3, #8]
1000c7e4:	4643      	mov	r3, r8
1000c7e6:	1b5f      	subs	r7, r3, r5
1000c7e8:	4653      	mov	r3, sl
1000c7ea:	2201      	movs	r2, #1
1000c7ec:	4650      	mov	r0, sl
1000c7ee:	685b      	ldr	r3, [r3, #4]
1000c7f0:	4440      	add	r0, r8
1000c7f2:	4013      	ands	r3, r2
1000c7f4:	2f0f      	cmp	r7, #15
1000c7f6:	d822      	bhi.n	1000c83e <_realloc_r+0x17e>
1000c7f8:	4641      	mov	r1, r8
1000c7fa:	430b      	orrs	r3, r1
1000c7fc:	4651      	mov	r1, sl
1000c7fe:	604b      	str	r3, [r1, #4]
1000c800:	6843      	ldr	r3, [r0, #4]
1000c802:	4313      	orrs	r3, r2
1000c804:	6043      	str	r3, [r0, #4]
1000c806:	0030      	movs	r0, r6
1000c808:	f7fa ffd0 	bl	100077ac <__malloc_unlock>
1000c80c:	0027      	movs	r7, r4
1000c80e:	0038      	movs	r0, r7
1000c810:	b003      	add	sp, #12
1000c812:	bcf0      	pop	{r4, r5, r6, r7}
1000c814:	46bb      	mov	fp, r7
1000c816:	46b2      	mov	sl, r6
1000c818:	46a9      	mov	r9, r5
1000c81a:	46a0      	mov	r8, r4
1000c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c81e:	421a      	tst	r2, r3
1000c820:	d1a2      	bne.n	1000c768 <_realloc_r+0xa8>
1000c822:	464b      	mov	r3, r9
1000c824:	464a      	mov	r2, r9
1000c826:	681b      	ldr	r3, [r3, #0]
1000c828:	1ad3      	subs	r3, r2, r3
1000c82a:	2203      	movs	r2, #3
1000c82c:	469b      	mov	fp, r3
1000c82e:	685b      	ldr	r3, [r3, #4]
1000c830:	4393      	bics	r3, r2
1000c832:	e794      	b.n	1000c75e <_realloc_r+0x9e>
1000c834:	0011      	movs	r1, r2
1000c836:	f7fa fc71 	bl	1000711c <_malloc_r>
1000c83a:	0007      	movs	r7, r0
1000c83c:	e7e7      	b.n	1000c80e <_realloc_r+0x14e>
1000c83e:	4651      	mov	r1, sl
1000c840:	432b      	orrs	r3, r5
1000c842:	1949      	adds	r1, r1, r5
1000c844:	4655      	mov	r5, sl
1000c846:	4317      	orrs	r7, r2
1000c848:	606b      	str	r3, [r5, #4]
1000c84a:	604f      	str	r7, [r1, #4]
1000c84c:	6843      	ldr	r3, [r0, #4]
1000c84e:	3108      	adds	r1, #8
1000c850:	4313      	orrs	r3, r2
1000c852:	6043      	str	r3, [r0, #4]
1000c854:	0030      	movs	r0, r6
1000c856:	f7fe ff89 	bl	1000b76c <_free_r>
1000c85a:	e7d4      	b.n	1000c806 <_realloc_r+0x146>
1000c85c:	2103      	movs	r1, #3
1000c85e:	438a      	bics	r2, r1
1000c860:	4694      	mov	ip, r2
1000c862:	0029      	movs	r1, r5
1000c864:	44c4      	add	ip, r8
1000c866:	3110      	adds	r1, #16
1000c868:	458c      	cmp	ip, r1
1000c86a:	db00      	blt.n	1000c86e <_realloc_r+0x1ae>
1000c86c:	e084      	b.n	1000c978 <_realloc_r+0x2b8>
1000c86e:	07db      	lsls	r3, r3, #31
1000c870:	d500      	bpl.n	1000c874 <_realloc_r+0x1b4>
1000c872:	e779      	b.n	1000c768 <_realloc_r+0xa8>
1000c874:	464b      	mov	r3, r9
1000c876:	4648      	mov	r0, r9
1000c878:	681b      	ldr	r3, [r3, #0]
1000c87a:	1ac3      	subs	r3, r0, r3
1000c87c:	2003      	movs	r0, #3
1000c87e:	469b      	mov	fp, r3
1000c880:	685b      	ldr	r3, [r3, #4]
1000c882:	4383      	bics	r3, r0
1000c884:	18d2      	adds	r2, r2, r3
1000c886:	4442      	add	r2, r8
1000c888:	9201      	str	r2, [sp, #4]
1000c88a:	4291      	cmp	r1, r2
1000c88c:	dd00      	ble.n	1000c890 <_realloc_r+0x1d0>
1000c88e:	e766      	b.n	1000c75e <_realloc_r+0x9e>
1000c890:	465b      	mov	r3, fp
1000c892:	465a      	mov	r2, fp
1000c894:	68db      	ldr	r3, [r3, #12]
1000c896:	6892      	ldr	r2, [r2, #8]
1000c898:	465f      	mov	r7, fp
1000c89a:	60d3      	str	r3, [r2, #12]
1000c89c:	609a      	str	r2, [r3, #8]
1000c89e:	4642      	mov	r2, r8
1000c8a0:	3a04      	subs	r2, #4
1000c8a2:	3708      	adds	r7, #8
1000c8a4:	2a24      	cmp	r2, #36	; 0x24
1000c8a6:	d900      	bls.n	1000c8aa <_realloc_r+0x1ea>
1000c8a8:	e099      	b.n	1000c9de <_realloc_r+0x31e>
1000c8aa:	003b      	movs	r3, r7
1000c8ac:	2a13      	cmp	r2, #19
1000c8ae:	d90a      	bls.n	1000c8c6 <_realloc_r+0x206>
1000c8b0:	4659      	mov	r1, fp
1000c8b2:	6823      	ldr	r3, [r4, #0]
1000c8b4:	608b      	str	r3, [r1, #8]
1000c8b6:	6863      	ldr	r3, [r4, #4]
1000c8b8:	60cb      	str	r3, [r1, #12]
1000c8ba:	2a1b      	cmp	r2, #27
1000c8bc:	d900      	bls.n	1000c8c0 <_realloc_r+0x200>
1000c8be:	e093      	b.n	1000c9e8 <_realloc_r+0x328>
1000c8c0:	465b      	mov	r3, fp
1000c8c2:	3408      	adds	r4, #8
1000c8c4:	3310      	adds	r3, #16
1000c8c6:	6822      	ldr	r2, [r4, #0]
1000c8c8:	601a      	str	r2, [r3, #0]
1000c8ca:	6862      	ldr	r2, [r4, #4]
1000c8cc:	605a      	str	r2, [r3, #4]
1000c8ce:	68a2      	ldr	r2, [r4, #8]
1000c8d0:	609a      	str	r2, [r3, #8]
1000c8d2:	465b      	mov	r3, fp
1000c8d4:	2201      	movs	r2, #1
1000c8d6:	1959      	adds	r1, r3, r5
1000c8d8:	9b00      	ldr	r3, [sp, #0]
1000c8da:	0030      	movs	r0, r6
1000c8dc:	6099      	str	r1, [r3, #8]
1000c8de:	9b01      	ldr	r3, [sp, #4]
1000c8e0:	1b5b      	subs	r3, r3, r5
1000c8e2:	4313      	orrs	r3, r2
1000c8e4:	604b      	str	r3, [r1, #4]
1000c8e6:	465b      	mov	r3, fp
1000c8e8:	685b      	ldr	r3, [r3, #4]
1000c8ea:	4013      	ands	r3, r2
1000c8ec:	465a      	mov	r2, fp
1000c8ee:	432b      	orrs	r3, r5
1000c8f0:	6053      	str	r3, [r2, #4]
1000c8f2:	f7fa ff5b 	bl	100077ac <__malloc_unlock>
1000c8f6:	e78a      	b.n	1000c80e <_realloc_r+0x14e>
1000c8f8:	68cb      	ldr	r3, [r1, #12]
1000c8fa:	688a      	ldr	r2, [r1, #8]
1000c8fc:	60d3      	str	r3, [r2, #12]
1000c8fe:	609a      	str	r2, [r3, #8]
1000c900:	465b      	mov	r3, fp
1000c902:	465a      	mov	r2, fp
1000c904:	68db      	ldr	r3, [r3, #12]
1000c906:	6892      	ldr	r2, [r2, #8]
1000c908:	465f      	mov	r7, fp
1000c90a:	60d3      	str	r3, [r2, #12]
1000c90c:	609a      	str	r2, [r3, #8]
1000c90e:	4642      	mov	r2, r8
1000c910:	3a04      	subs	r2, #4
1000c912:	3708      	adds	r7, #8
1000c914:	2a24      	cmp	r2, #36	; 0x24
1000c916:	d817      	bhi.n	1000c948 <_realloc_r+0x288>
1000c918:	003b      	movs	r3, r7
1000c91a:	2a13      	cmp	r2, #19
1000c91c:	d909      	bls.n	1000c932 <_realloc_r+0x272>
1000c91e:	4659      	mov	r1, fp
1000c920:	6823      	ldr	r3, [r4, #0]
1000c922:	608b      	str	r3, [r1, #8]
1000c924:	6863      	ldr	r3, [r4, #4]
1000c926:	60cb      	str	r3, [r1, #12]
1000c928:	2a1b      	cmp	r2, #27
1000c92a:	d839      	bhi.n	1000c9a0 <_realloc_r+0x2e0>
1000c92c:	465b      	mov	r3, fp
1000c92e:	3408      	adds	r4, #8
1000c930:	3310      	adds	r3, #16
1000c932:	6822      	ldr	r2, [r4, #0]
1000c934:	601a      	str	r2, [r3, #0]
1000c936:	6862      	ldr	r2, [r4, #4]
1000c938:	605a      	str	r2, [r3, #4]
1000c93a:	68a2      	ldr	r2, [r4, #8]
1000c93c:	609a      	str	r2, [r3, #8]
1000c93e:	9b00      	ldr	r3, [sp, #0]
1000c940:	003c      	movs	r4, r7
1000c942:	4698      	mov	r8, r3
1000c944:	46da      	mov	sl, fp
1000c946:	e74d      	b.n	1000c7e4 <_realloc_r+0x124>
1000c948:	0021      	movs	r1, r4
1000c94a:	0038      	movs	r0, r7
1000c94c:	f7ff fa42 	bl	1000bdd4 <memmove>
1000c950:	e7f5      	b.n	1000c93e <_realloc_r+0x27e>
1000c952:	2203      	movs	r2, #3
1000c954:	685b      	ldr	r3, [r3, #4]
1000c956:	4393      	bics	r3, r2
1000c958:	4498      	add	r8, r3
1000c95a:	e743      	b.n	1000c7e4 <_realloc_r+0x124>
1000c95c:	0021      	movs	r1, r4
1000c95e:	f7ff fa39 	bl	1000bdd4 <memmove>
1000c962:	e72b      	b.n	1000c7bc <_realloc_r+0xfc>
1000c964:	68a3      	ldr	r3, [r4, #8]
1000c966:	6083      	str	r3, [r0, #8]
1000c968:	68e3      	ldr	r3, [r4, #12]
1000c96a:	60c3      	str	r3, [r0, #12]
1000c96c:	2a24      	cmp	r2, #36	; 0x24
1000c96e:	d026      	beq.n	1000c9be <_realloc_r+0x2fe>
1000c970:	0003      	movs	r3, r0
1000c972:	3110      	adds	r1, #16
1000c974:	3310      	adds	r3, #16
1000c976:	e71b      	b.n	1000c7b0 <_realloc_r+0xf0>
1000c978:	464b      	mov	r3, r9
1000c97a:	1959      	adds	r1, r3, r5
1000c97c:	9b00      	ldr	r3, [sp, #0]
1000c97e:	2201      	movs	r2, #1
1000c980:	6099      	str	r1, [r3, #8]
1000c982:	4663      	mov	r3, ip
1000c984:	1b5b      	subs	r3, r3, r5
1000c986:	4313      	orrs	r3, r2
1000c988:	604b      	str	r3, [r1, #4]
1000c98a:	464b      	mov	r3, r9
1000c98c:	685b      	ldr	r3, [r3, #4]
1000c98e:	0030      	movs	r0, r6
1000c990:	4013      	ands	r3, r2
1000c992:	464a      	mov	r2, r9
1000c994:	432b      	orrs	r3, r5
1000c996:	6053      	str	r3, [r2, #4]
1000c998:	f7fa ff08 	bl	100077ac <__malloc_unlock>
1000c99c:	0027      	movs	r7, r4
1000c99e:	e736      	b.n	1000c80e <_realloc_r+0x14e>
1000c9a0:	68a3      	ldr	r3, [r4, #8]
1000c9a2:	610b      	str	r3, [r1, #16]
1000c9a4:	68e3      	ldr	r3, [r4, #12]
1000c9a6:	614b      	str	r3, [r1, #20]
1000c9a8:	2a24      	cmp	r2, #36	; 0x24
1000c9aa:	d010      	beq.n	1000c9ce <_realloc_r+0x30e>
1000c9ac:	465b      	mov	r3, fp
1000c9ae:	3410      	adds	r4, #16
1000c9b0:	3318      	adds	r3, #24
1000c9b2:	e7be      	b.n	1000c932 <_realloc_r+0x272>
1000c9b4:	0030      	movs	r0, r6
1000c9b6:	f7fa fef9 	bl	100077ac <__malloc_unlock>
1000c9ba:	2700      	movs	r7, #0
1000c9bc:	e727      	b.n	1000c80e <_realloc_r+0x14e>
1000c9be:	6923      	ldr	r3, [r4, #16]
1000c9c0:	3118      	adds	r1, #24
1000c9c2:	6103      	str	r3, [r0, #16]
1000c9c4:	0003      	movs	r3, r0
1000c9c6:	6962      	ldr	r2, [r4, #20]
1000c9c8:	3318      	adds	r3, #24
1000c9ca:	6142      	str	r2, [r0, #20]
1000c9cc:	e6f0      	b.n	1000c7b0 <_realloc_r+0xf0>
1000c9ce:	6923      	ldr	r3, [r4, #16]
1000c9d0:	618b      	str	r3, [r1, #24]
1000c9d2:	465b      	mov	r3, fp
1000c9d4:	6962      	ldr	r2, [r4, #20]
1000c9d6:	3320      	adds	r3, #32
1000c9d8:	61ca      	str	r2, [r1, #28]
1000c9da:	3418      	adds	r4, #24
1000c9dc:	e7a9      	b.n	1000c932 <_realloc_r+0x272>
1000c9de:	0021      	movs	r1, r4
1000c9e0:	0038      	movs	r0, r7
1000c9e2:	f7ff f9f7 	bl	1000bdd4 <memmove>
1000c9e6:	e774      	b.n	1000c8d2 <_realloc_r+0x212>
1000c9e8:	68a3      	ldr	r3, [r4, #8]
1000c9ea:	610b      	str	r3, [r1, #16]
1000c9ec:	68e3      	ldr	r3, [r4, #12]
1000c9ee:	614b      	str	r3, [r1, #20]
1000c9f0:	2a24      	cmp	r2, #36	; 0x24
1000c9f2:	d003      	beq.n	1000c9fc <_realloc_r+0x33c>
1000c9f4:	465b      	mov	r3, fp
1000c9f6:	3410      	adds	r4, #16
1000c9f8:	3318      	adds	r3, #24
1000c9fa:	e764      	b.n	1000c8c6 <_realloc_r+0x206>
1000c9fc:	6923      	ldr	r3, [r4, #16]
1000c9fe:	618b      	str	r3, [r1, #24]
1000ca00:	465b      	mov	r3, fp
1000ca02:	6962      	ldr	r2, [r4, #20]
1000ca04:	3320      	adds	r3, #32
1000ca06:	61ca      	str	r2, [r1, #28]
1000ca08:	3418      	adds	r4, #24
1000ca0a:	e75c      	b.n	1000c8c6 <_realloc_r+0x206>
1000ca0c:	20000370 	.word	0x20000370

1000ca10 <frexp>:
1000ca10:	b570      	push	{r4, r5, r6, lr}
1000ca12:	0014      	movs	r4, r2
1000ca14:	2200      	movs	r2, #0
1000ca16:	6022      	str	r2, [r4, #0]
1000ca18:	4a11      	ldr	r2, [pc, #68]	; (1000ca60 <frexp+0x50>)
1000ca1a:	004b      	lsls	r3, r1, #1
1000ca1c:	000d      	movs	r5, r1
1000ca1e:	085b      	lsrs	r3, r3, #1
1000ca20:	4293      	cmp	r3, r2
1000ca22:	d811      	bhi.n	1000ca48 <frexp+0x38>
1000ca24:	001a      	movs	r2, r3
1000ca26:	4302      	orrs	r2, r0
1000ca28:	d00e      	beq.n	1000ca48 <frexp+0x38>
1000ca2a:	4a0e      	ldr	r2, [pc, #56]	; (1000ca64 <frexp+0x54>)
1000ca2c:	4211      	tst	r1, r2
1000ca2e:	d00c      	beq.n	1000ca4a <frexp+0x3a>
1000ca30:	2200      	movs	r2, #0
1000ca32:	4e0d      	ldr	r6, [pc, #52]	; (1000ca68 <frexp+0x58>)
1000ca34:	151b      	asrs	r3, r3, #20
1000ca36:	46b4      	mov	ip, r6
1000ca38:	4463      	add	r3, ip
1000ca3a:	189b      	adds	r3, r3, r2
1000ca3c:	6023      	str	r3, [r4, #0]
1000ca3e:	4b0b      	ldr	r3, [pc, #44]	; (1000ca6c <frexp+0x5c>)
1000ca40:	4a0b      	ldr	r2, [pc, #44]	; (1000ca70 <frexp+0x60>)
1000ca42:	402b      	ands	r3, r5
1000ca44:	431a      	orrs	r2, r3
1000ca46:	0011      	movs	r1, r2
1000ca48:	bd70      	pop	{r4, r5, r6, pc}
1000ca4a:	2200      	movs	r2, #0
1000ca4c:	4b09      	ldr	r3, [pc, #36]	; (1000ca74 <frexp+0x64>)
1000ca4e:	f7f4 fb69 	bl	10001124 <__aeabi_dmul>
1000ca52:	2236      	movs	r2, #54	; 0x36
1000ca54:	004b      	lsls	r3, r1, #1
1000ca56:	000d      	movs	r5, r1
1000ca58:	085b      	lsrs	r3, r3, #1
1000ca5a:	4252      	negs	r2, r2
1000ca5c:	e7e9      	b.n	1000ca32 <frexp+0x22>
1000ca5e:	46c0      	nop			; (mov r8, r8)
1000ca60:	7fefffff 	.word	0x7fefffff
1000ca64:	7ff00000 	.word	0x7ff00000
1000ca68:	fffffc02 	.word	0xfffffc02
1000ca6c:	800fffff 	.word	0x800fffff
1000ca70:	3fe00000 	.word	0x3fe00000
1000ca74:	43500000 	.word	0x43500000

1000ca78 <raise>:
1000ca78:	4b15      	ldr	r3, [pc, #84]	; (1000cad0 <raise+0x58>)
1000ca7a:	b570      	push	{r4, r5, r6, lr}
1000ca7c:	0004      	movs	r4, r0
1000ca7e:	681d      	ldr	r5, [r3, #0]
1000ca80:	281f      	cmp	r0, #31
1000ca82:	d81f      	bhi.n	1000cac4 <raise+0x4c>
1000ca84:	23a4      	movs	r3, #164	; 0xa4
1000ca86:	005b      	lsls	r3, r3, #1
1000ca88:	58eb      	ldr	r3, [r5, r3]
1000ca8a:	2b00      	cmp	r3, #0
1000ca8c:	d00d      	beq.n	1000caaa <raise+0x32>
1000ca8e:	0082      	lsls	r2, r0, #2
1000ca90:	189b      	adds	r3, r3, r2
1000ca92:	681a      	ldr	r2, [r3, #0]
1000ca94:	2a00      	cmp	r2, #0
1000ca96:	d008      	beq.n	1000caaa <raise+0x32>
1000ca98:	2a01      	cmp	r2, #1
1000ca9a:	d004      	beq.n	1000caa6 <raise+0x2e>
1000ca9c:	1c51      	adds	r1, r2, #1
1000ca9e:	d00d      	beq.n	1000cabc <raise+0x44>
1000caa0:	2100      	movs	r1, #0
1000caa2:	6019      	str	r1, [r3, #0]
1000caa4:	4790      	blx	r2
1000caa6:	2000      	movs	r0, #0
1000caa8:	bd70      	pop	{r4, r5, r6, pc}
1000caaa:	0028      	movs	r0, r5
1000caac:	f000 f826 	bl	1000cafc <_getpid_r>
1000cab0:	0022      	movs	r2, r4
1000cab2:	0001      	movs	r1, r0
1000cab4:	0028      	movs	r0, r5
1000cab6:	f000 f80d 	bl	1000cad4 <_kill_r>
1000caba:	e7f5      	b.n	1000caa8 <raise+0x30>
1000cabc:	2316      	movs	r3, #22
1000cabe:	2001      	movs	r0, #1
1000cac0:	602b      	str	r3, [r5, #0]
1000cac2:	e7f1      	b.n	1000caa8 <raise+0x30>
1000cac4:	2316      	movs	r3, #22
1000cac6:	2001      	movs	r0, #1
1000cac8:	602b      	str	r3, [r5, #0]
1000caca:	4240      	negs	r0, r0
1000cacc:	e7ec      	b.n	1000caa8 <raise+0x30>
1000cace:	46c0      	nop			; (mov r8, r8)
1000cad0:	200007e4 	.word	0x200007e4

1000cad4 <_kill_r>:
1000cad4:	2300      	movs	r3, #0
1000cad6:	b570      	push	{r4, r5, r6, lr}
1000cad8:	4d07      	ldr	r5, [pc, #28]	; (1000caf8 <_kill_r+0x24>)
1000cada:	0004      	movs	r4, r0
1000cadc:	0008      	movs	r0, r1
1000cade:	0011      	movs	r1, r2
1000cae0:	602b      	str	r3, [r5, #0]
1000cae2:	f000 fb9f 	bl	1000d224 <_kill>
1000cae6:	1c43      	adds	r3, r0, #1
1000cae8:	d000      	beq.n	1000caec <_kill_r+0x18>
1000caea:	bd70      	pop	{r4, r5, r6, pc}
1000caec:	682b      	ldr	r3, [r5, #0]
1000caee:	2b00      	cmp	r3, #0
1000caf0:	d0fb      	beq.n	1000caea <_kill_r+0x16>
1000caf2:	6023      	str	r3, [r4, #0]
1000caf4:	e7f9      	b.n	1000caea <_kill_r+0x16>
1000caf6:	46c0      	nop			; (mov r8, r8)
1000caf8:	200024d0 	.word	0x200024d0

1000cafc <_getpid_r>:
1000cafc:	b510      	push	{r4, lr}
1000cafe:	f000 fb93 	bl	1000d228 <_getpid>
1000cb02:	bd10      	pop	{r4, pc}

1000cb04 <__sread>:
1000cb04:	b570      	push	{r4, r5, r6, lr}
1000cb06:	000c      	movs	r4, r1
1000cb08:	250e      	movs	r5, #14
1000cb0a:	5f49      	ldrsh	r1, [r1, r5]
1000cb0c:	f000 f920 	bl	1000cd50 <_read_r>
1000cb10:	2800      	cmp	r0, #0
1000cb12:	db03      	blt.n	1000cb1c <__sread+0x18>
1000cb14:	6d23      	ldr	r3, [r4, #80]	; 0x50
1000cb16:	181b      	adds	r3, r3, r0
1000cb18:	6523      	str	r3, [r4, #80]	; 0x50
1000cb1a:	bd70      	pop	{r4, r5, r6, pc}
1000cb1c:	89a3      	ldrh	r3, [r4, #12]
1000cb1e:	4a02      	ldr	r2, [pc, #8]	; (1000cb28 <__sread+0x24>)
1000cb20:	4013      	ands	r3, r2
1000cb22:	81a3      	strh	r3, [r4, #12]
1000cb24:	e7f9      	b.n	1000cb1a <__sread+0x16>
1000cb26:	46c0      	nop			; (mov r8, r8)
1000cb28:	ffffefff 	.word	0xffffefff

1000cb2c <__swrite>:
1000cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cb2e:	000c      	movs	r4, r1
1000cb30:	001f      	movs	r7, r3
1000cb32:	230c      	movs	r3, #12
1000cb34:	5ec9      	ldrsh	r1, [r1, r3]
1000cb36:	0005      	movs	r5, r0
1000cb38:	0016      	movs	r6, r2
1000cb3a:	05cb      	lsls	r3, r1, #23
1000cb3c:	d40a      	bmi.n	1000cb54 <__swrite+0x28>
1000cb3e:	4b0a      	ldr	r3, [pc, #40]	; (1000cb68 <__swrite+0x3c>)
1000cb40:	0032      	movs	r2, r6
1000cb42:	4019      	ands	r1, r3
1000cb44:	0028      	movs	r0, r5
1000cb46:	81a1      	strh	r1, [r4, #12]
1000cb48:	230e      	movs	r3, #14
1000cb4a:	5ee1      	ldrsh	r1, [r4, r3]
1000cb4c:	003b      	movs	r3, r7
1000cb4e:	f000 f85b 	bl	1000cc08 <_write_r>
1000cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cb54:	230e      	movs	r3, #14
1000cb56:	5ee1      	ldrsh	r1, [r4, r3]
1000cb58:	2200      	movs	r2, #0
1000cb5a:	2302      	movs	r3, #2
1000cb5c:	f000 f8ce 	bl	1000ccfc <_lseek_r>
1000cb60:	230c      	movs	r3, #12
1000cb62:	5ee1      	ldrsh	r1, [r4, r3]
1000cb64:	e7eb      	b.n	1000cb3e <__swrite+0x12>
1000cb66:	46c0      	nop			; (mov r8, r8)
1000cb68:	ffffefff 	.word	0xffffefff

1000cb6c <__sseek>:
1000cb6c:	b570      	push	{r4, r5, r6, lr}
1000cb6e:	000c      	movs	r4, r1
1000cb70:	250e      	movs	r5, #14
1000cb72:	5f49      	ldrsh	r1, [r1, r5]
1000cb74:	f000 f8c2 	bl	1000ccfc <_lseek_r>
1000cb78:	1c43      	adds	r3, r0, #1
1000cb7a:	d007      	beq.n	1000cb8c <__sseek+0x20>
1000cb7c:	2380      	movs	r3, #128	; 0x80
1000cb7e:	89a2      	ldrh	r2, [r4, #12]
1000cb80:	015b      	lsls	r3, r3, #5
1000cb82:	4313      	orrs	r3, r2
1000cb84:	b21b      	sxth	r3, r3
1000cb86:	6520      	str	r0, [r4, #80]	; 0x50
1000cb88:	81a3      	strh	r3, [r4, #12]
1000cb8a:	bd70      	pop	{r4, r5, r6, pc}
1000cb8c:	89a3      	ldrh	r3, [r4, #12]
1000cb8e:	4a02      	ldr	r2, [pc, #8]	; (1000cb98 <__sseek+0x2c>)
1000cb90:	4013      	ands	r3, r2
1000cb92:	b21b      	sxth	r3, r3
1000cb94:	e7f8      	b.n	1000cb88 <__sseek+0x1c>
1000cb96:	46c0      	nop			; (mov r8, r8)
1000cb98:	ffffefff 	.word	0xffffefff

1000cb9c <__sclose>:
1000cb9c:	b510      	push	{r4, lr}
1000cb9e:	230e      	movs	r3, #14
1000cba0:	5ec9      	ldrsh	r1, [r1, r3]
1000cba2:	f000 f873 	bl	1000cc8c <_close_r>
1000cba6:	bd10      	pop	{r4, pc}

1000cba8 <strncpy>:
1000cba8:	0003      	movs	r3, r0
1000cbaa:	430b      	orrs	r3, r1
1000cbac:	b570      	push	{r4, r5, r6, lr}
1000cbae:	0006      	movs	r6, r0
1000cbb0:	079b      	lsls	r3, r3, #30
1000cbb2:	d10e      	bne.n	1000cbd2 <strncpy+0x2a>
1000cbb4:	2a03      	cmp	r2, #3
1000cbb6:	d90c      	bls.n	1000cbd2 <strncpy+0x2a>
1000cbb8:	4d11      	ldr	r5, [pc, #68]	; (1000cc00 <strncpy+0x58>)
1000cbba:	e004      	b.n	1000cbc6 <strncpy+0x1e>
1000cbbc:	3a04      	subs	r2, #4
1000cbbe:	3104      	adds	r1, #4
1000cbc0:	c610      	stmia	r6!, {r4}
1000cbc2:	2a03      	cmp	r2, #3
1000cbc4:	d905      	bls.n	1000cbd2 <strncpy+0x2a>
1000cbc6:	680c      	ldr	r4, [r1, #0]
1000cbc8:	4b0e      	ldr	r3, [pc, #56]	; (1000cc04 <strncpy+0x5c>)
1000cbca:	18e3      	adds	r3, r4, r3
1000cbcc:	43a3      	bics	r3, r4
1000cbce:	422b      	tst	r3, r5
1000cbd0:	d0f4      	beq.n	1000cbbc <strncpy+0x14>
1000cbd2:	0033      	movs	r3, r6
1000cbd4:	2400      	movs	r4, #0
1000cbd6:	e006      	b.n	1000cbe6 <strncpy+0x3e>
1000cbd8:	5d0d      	ldrb	r5, [r1, r4]
1000cbda:	3a01      	subs	r2, #1
1000cbdc:	5535      	strb	r5, [r6, r4]
1000cbde:	3301      	adds	r3, #1
1000cbe0:	3401      	adds	r4, #1
1000cbe2:	2d00      	cmp	r5, #0
1000cbe4:	d002      	beq.n	1000cbec <strncpy+0x44>
1000cbe6:	2a00      	cmp	r2, #0
1000cbe8:	d1f6      	bne.n	1000cbd8 <strncpy+0x30>
1000cbea:	bd70      	pop	{r4, r5, r6, pc}
1000cbec:	2100      	movs	r1, #0
1000cbee:	189c      	adds	r4, r3, r2
1000cbf0:	2a00      	cmp	r2, #0
1000cbf2:	d0fa      	beq.n	1000cbea <strncpy+0x42>
1000cbf4:	7019      	strb	r1, [r3, #0]
1000cbf6:	3301      	adds	r3, #1
1000cbf8:	42a3      	cmp	r3, r4
1000cbfa:	d1fb      	bne.n	1000cbf4 <strncpy+0x4c>
1000cbfc:	e7f5      	b.n	1000cbea <strncpy+0x42>
1000cbfe:	46c0      	nop			; (mov r8, r8)
1000cc00:	80808080 	.word	0x80808080
1000cc04:	fefefeff 	.word	0xfefefeff

1000cc08 <_write_r>:
1000cc08:	b570      	push	{r4, r5, r6, lr}
1000cc0a:	0004      	movs	r4, r0
1000cc0c:	0008      	movs	r0, r1
1000cc0e:	0011      	movs	r1, r2
1000cc10:	001a      	movs	r2, r3
1000cc12:	2300      	movs	r3, #0
1000cc14:	4d05      	ldr	r5, [pc, #20]	; (1000cc2c <_write_r+0x24>)
1000cc16:	602b      	str	r3, [r5, #0]
1000cc18:	f000 faf2 	bl	1000d200 <_write>
1000cc1c:	1c43      	adds	r3, r0, #1
1000cc1e:	d000      	beq.n	1000cc22 <_write_r+0x1a>
1000cc20:	bd70      	pop	{r4, r5, r6, pc}
1000cc22:	682b      	ldr	r3, [r5, #0]
1000cc24:	2b00      	cmp	r3, #0
1000cc26:	d0fb      	beq.n	1000cc20 <_write_r+0x18>
1000cc28:	6023      	str	r3, [r4, #0]
1000cc2a:	e7f9      	b.n	1000cc20 <_write_r+0x18>
1000cc2c:	200024d0 	.word	0x200024d0

1000cc30 <_calloc_r>:
1000cc30:	b510      	push	{r4, lr}
1000cc32:	4351      	muls	r1, r2
1000cc34:	f7fa fa72 	bl	1000711c <_malloc_r>
1000cc38:	1e04      	subs	r4, r0, #0
1000cc3a:	d00e      	beq.n	1000cc5a <_calloc_r+0x2a>
1000cc3c:	0003      	movs	r3, r0
1000cc3e:	3b08      	subs	r3, #8
1000cc40:	685a      	ldr	r2, [r3, #4]
1000cc42:	2303      	movs	r3, #3
1000cc44:	439a      	bics	r2, r3
1000cc46:	3a04      	subs	r2, #4
1000cc48:	2a24      	cmp	r2, #36	; 0x24
1000cc4a:	d815      	bhi.n	1000cc78 <_calloc_r+0x48>
1000cc4c:	0003      	movs	r3, r0
1000cc4e:	2a13      	cmp	r2, #19
1000cc50:	d805      	bhi.n	1000cc5e <_calloc_r+0x2e>
1000cc52:	2200      	movs	r2, #0
1000cc54:	601a      	str	r2, [r3, #0]
1000cc56:	605a      	str	r2, [r3, #4]
1000cc58:	609a      	str	r2, [r3, #8]
1000cc5a:	0020      	movs	r0, r4
1000cc5c:	bd10      	pop	{r4, pc}
1000cc5e:	2100      	movs	r1, #0
1000cc60:	3308      	adds	r3, #8
1000cc62:	6001      	str	r1, [r0, #0]
1000cc64:	6041      	str	r1, [r0, #4]
1000cc66:	2a1b      	cmp	r2, #27
1000cc68:	d9f3      	bls.n	1000cc52 <_calloc_r+0x22>
1000cc6a:	6081      	str	r1, [r0, #8]
1000cc6c:	60c1      	str	r1, [r0, #12]
1000cc6e:	2a24      	cmp	r2, #36	; 0x24
1000cc70:	d006      	beq.n	1000cc80 <_calloc_r+0x50>
1000cc72:	0003      	movs	r3, r0
1000cc74:	3310      	adds	r3, #16
1000cc76:	e7ec      	b.n	1000cc52 <_calloc_r+0x22>
1000cc78:	2100      	movs	r1, #0
1000cc7a:	f7fa fd3b 	bl	100076f4 <memset>
1000cc7e:	e7ec      	b.n	1000cc5a <_calloc_r+0x2a>
1000cc80:	0003      	movs	r3, r0
1000cc82:	6101      	str	r1, [r0, #16]
1000cc84:	3318      	adds	r3, #24
1000cc86:	6141      	str	r1, [r0, #20]
1000cc88:	e7e3      	b.n	1000cc52 <_calloc_r+0x22>
1000cc8a:	46c0      	nop			; (mov r8, r8)

1000cc8c <_close_r>:
1000cc8c:	2300      	movs	r3, #0
1000cc8e:	b570      	push	{r4, r5, r6, lr}
1000cc90:	4c06      	ldr	r4, [pc, #24]	; (1000ccac <_close_r+0x20>)
1000cc92:	0005      	movs	r5, r0
1000cc94:	0008      	movs	r0, r1
1000cc96:	6023      	str	r3, [r4, #0]
1000cc98:	f000 fab8 	bl	1000d20c <_close>
1000cc9c:	1c43      	adds	r3, r0, #1
1000cc9e:	d000      	beq.n	1000cca2 <_close_r+0x16>
1000cca0:	bd70      	pop	{r4, r5, r6, pc}
1000cca2:	6823      	ldr	r3, [r4, #0]
1000cca4:	2b00      	cmp	r3, #0
1000cca6:	d0fb      	beq.n	1000cca0 <_close_r+0x14>
1000cca8:	602b      	str	r3, [r5, #0]
1000ccaa:	e7f9      	b.n	1000cca0 <_close_r+0x14>
1000ccac:	200024d0 	.word	0x200024d0

1000ccb0 <_fstat_r>:
1000ccb0:	2300      	movs	r3, #0
1000ccb2:	b570      	push	{r4, r5, r6, lr}
1000ccb4:	4d07      	ldr	r5, [pc, #28]	; (1000ccd4 <_fstat_r+0x24>)
1000ccb6:	0004      	movs	r4, r0
1000ccb8:	0008      	movs	r0, r1
1000ccba:	0011      	movs	r1, r2
1000ccbc:	602b      	str	r3, [r5, #0]
1000ccbe:	f000 fab5 	bl	1000d22c <_fstat>
1000ccc2:	1c43      	adds	r3, r0, #1
1000ccc4:	d000      	beq.n	1000ccc8 <_fstat_r+0x18>
1000ccc6:	bd70      	pop	{r4, r5, r6, pc}
1000ccc8:	682b      	ldr	r3, [r5, #0]
1000ccca:	2b00      	cmp	r3, #0
1000cccc:	d0fb      	beq.n	1000ccc6 <_fstat_r+0x16>
1000ccce:	6023      	str	r3, [r4, #0]
1000ccd0:	e7f9      	b.n	1000ccc6 <_fstat_r+0x16>
1000ccd2:	46c0      	nop			; (mov r8, r8)
1000ccd4:	200024d0 	.word	0x200024d0

1000ccd8 <_isatty_r>:
1000ccd8:	2300      	movs	r3, #0
1000ccda:	b570      	push	{r4, r5, r6, lr}
1000ccdc:	4c06      	ldr	r4, [pc, #24]	; (1000ccf8 <_isatty_r+0x20>)
1000ccde:	0005      	movs	r5, r0
1000cce0:	0008      	movs	r0, r1
1000cce2:	6023      	str	r3, [r4, #0]
1000cce4:	f000 fa97 	bl	1000d216 <_isatty>
1000cce8:	1c43      	adds	r3, r0, #1
1000ccea:	d000      	beq.n	1000ccee <_isatty_r+0x16>
1000ccec:	bd70      	pop	{r4, r5, r6, pc}
1000ccee:	6823      	ldr	r3, [r4, #0]
1000ccf0:	2b00      	cmp	r3, #0
1000ccf2:	d0fb      	beq.n	1000ccec <_isatty_r+0x14>
1000ccf4:	602b      	str	r3, [r5, #0]
1000ccf6:	e7f9      	b.n	1000ccec <_isatty_r+0x14>
1000ccf8:	200024d0 	.word	0x200024d0

1000ccfc <_lseek_r>:
1000ccfc:	b570      	push	{r4, r5, r6, lr}
1000ccfe:	0004      	movs	r4, r0
1000cd00:	0008      	movs	r0, r1
1000cd02:	0011      	movs	r1, r2
1000cd04:	001a      	movs	r2, r3
1000cd06:	2300      	movs	r3, #0
1000cd08:	4d05      	ldr	r5, [pc, #20]	; (1000cd20 <_lseek_r+0x24>)
1000cd0a:	602b      	str	r3, [r5, #0]
1000cd0c:	f000 fa81 	bl	1000d212 <_lseek>
1000cd10:	1c43      	adds	r3, r0, #1
1000cd12:	d000      	beq.n	1000cd16 <_lseek_r+0x1a>
1000cd14:	bd70      	pop	{r4, r5, r6, pc}
1000cd16:	682b      	ldr	r3, [r5, #0]
1000cd18:	2b00      	cmp	r3, #0
1000cd1a:	d0fb      	beq.n	1000cd14 <_lseek_r+0x18>
1000cd1c:	6023      	str	r3, [r4, #0]
1000cd1e:	e7f9      	b.n	1000cd14 <_lseek_r+0x18>
1000cd20:	200024d0 	.word	0x200024d0

1000cd24 <__ascii_mbtowc>:
1000cd24:	b082      	sub	sp, #8
1000cd26:	2900      	cmp	r1, #0
1000cd28:	d00a      	beq.n	1000cd40 <__ascii_mbtowc+0x1c>
1000cd2a:	2a00      	cmp	r2, #0
1000cd2c:	d00b      	beq.n	1000cd46 <__ascii_mbtowc+0x22>
1000cd2e:	2b00      	cmp	r3, #0
1000cd30:	d00b      	beq.n	1000cd4a <__ascii_mbtowc+0x26>
1000cd32:	7813      	ldrb	r3, [r2, #0]
1000cd34:	600b      	str	r3, [r1, #0]
1000cd36:	7810      	ldrb	r0, [r2, #0]
1000cd38:	1e43      	subs	r3, r0, #1
1000cd3a:	4198      	sbcs	r0, r3
1000cd3c:	b002      	add	sp, #8
1000cd3e:	4770      	bx	lr
1000cd40:	a901      	add	r1, sp, #4
1000cd42:	2a00      	cmp	r2, #0
1000cd44:	d1f3      	bne.n	1000cd2e <__ascii_mbtowc+0xa>
1000cd46:	2000      	movs	r0, #0
1000cd48:	e7f8      	b.n	1000cd3c <__ascii_mbtowc+0x18>
1000cd4a:	2002      	movs	r0, #2
1000cd4c:	4240      	negs	r0, r0
1000cd4e:	e7f5      	b.n	1000cd3c <__ascii_mbtowc+0x18>

1000cd50 <_read_r>:
1000cd50:	b570      	push	{r4, r5, r6, lr}
1000cd52:	0004      	movs	r4, r0
1000cd54:	0008      	movs	r0, r1
1000cd56:	0011      	movs	r1, r2
1000cd58:	001a      	movs	r2, r3
1000cd5a:	2300      	movs	r3, #0
1000cd5c:	4d05      	ldr	r5, [pc, #20]	; (1000cd74 <_read_r+0x24>)
1000cd5e:	602b      	str	r3, [r5, #0]
1000cd60:	f000 fa48 	bl	1000d1f4 <_read>
1000cd64:	1c43      	adds	r3, r0, #1
1000cd66:	d000      	beq.n	1000cd6a <_read_r+0x1a>
1000cd68:	bd70      	pop	{r4, r5, r6, pc}
1000cd6a:	682b      	ldr	r3, [r5, #0]
1000cd6c:	2b00      	cmp	r3, #0
1000cd6e:	d0fb      	beq.n	1000cd68 <_read_r+0x18>
1000cd70:	6023      	str	r3, [r4, #0]
1000cd72:	e7f9      	b.n	1000cd68 <_read_r+0x18>
1000cd74:	200024d0 	.word	0x200024d0

1000cd78 <__ascii_wctomb>:
1000cd78:	2900      	cmp	r1, #0
1000cd7a:	d009      	beq.n	1000cd90 <__ascii_wctomb+0x18>
1000cd7c:	2aff      	cmp	r2, #255	; 0xff
1000cd7e:	d802      	bhi.n	1000cd86 <__ascii_wctomb+0xe>
1000cd80:	2001      	movs	r0, #1
1000cd82:	700a      	strb	r2, [r1, #0]
1000cd84:	4770      	bx	lr
1000cd86:	238a      	movs	r3, #138	; 0x8a
1000cd88:	6003      	str	r3, [r0, #0]
1000cd8a:	2001      	movs	r0, #1
1000cd8c:	4240      	negs	r0, r0
1000cd8e:	e7f9      	b.n	1000cd84 <__ascii_wctomb+0xc>
1000cd90:	2000      	movs	r0, #0
1000cd92:	e7f7      	b.n	1000cd84 <__ascii_wctomb+0xc>

1000cd94 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
1000cd94:	4770      	bx	lr

1000cd96 <gpio_pin_get_dt>:
{
1000cd96:	0003      	movs	r3, r0
1000cd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spec->port, spec->pin);
1000cd9a:	6800      	ldr	r0, [r0, #0]
1000cd9c:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
1000cd9e:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
1000cda0:	6883      	ldr	r3, [r0, #8]
1000cda2:	a901      	add	r1, sp, #4
1000cda4:	685b      	ldr	r3, [r3, #4]
1000cda6:	4798      	blx	r3
	if (ret == 0) {
1000cda8:	2800      	cmp	r0, #0
1000cdaa:	d107      	bne.n	1000cdbc <gpio_pin_get_dt+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
1000cdac:	3001      	adds	r0, #1
1000cdae:	40a0      	lsls	r0, r4
		*value ^= data->invert;
1000cdb0:	9b01      	ldr	r3, [sp, #4]
1000cdb2:	682a      	ldr	r2, [r5, #0]
1000cdb4:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
1000cdb6:	4018      	ands	r0, r3
1000cdb8:	1e43      	subs	r3, r0, #1
1000cdba:	4198      	sbcs	r0, r3
}
1000cdbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

1000cdbe <device_is_ready>:

extern bool z_impl_device_is_ready(const struct device * dev);

__pinned_func
static inline bool device_is_ready(const struct device * dev)
{
1000cdbe:	b510      	push	{r4, lr}
1000cdc0:	f000 feeb 	bl	1000db9a <z_device_is_ready>
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
}
1000cdc4:	bd10      	pop	{r4, pc}

1000cdc6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000cdc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000cdc8:	ab0b      	add	r3, sp, #44	; 0x2c
1000cdca:	9305      	str	r3, [sp, #20]
1000cdcc:	2000      	movs	r0, #0
1000cdce:	9303      	str	r3, [sp, #12]
1000cdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000cdd2:	9001      	str	r0, [sp, #4]
1000cdd4:	9302      	str	r3, [sp, #8]
1000cdd6:	9000      	str	r0, [sp, #0]
1000cdd8:	0003      	movs	r3, r0
1000cdda:	f7f6 fdb1 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000cdde:	b007      	add	sp, #28
1000cde0:	bd00      	pop	{pc}

1000cde2 <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
1000cde2:	b510      	push	{r4, lr}
			return t * ((uint64_t)to_hz / from_hz);
1000cde4:	220a      	movs	r2, #10
1000cde6:	2300      	movs	r3, #0
{
	return k_sleep(Z_TIMEOUT_MS(ms));
1000cde8:	17c1      	asrs	r1, r0, #31
1000cdea:	f7f5 f9f9 	bl	100021e0 <__aeabi_lmul>
	return z_impl_k_sleep(timeout);
1000cdee:	f7f9 fab5 	bl	1000635c <z_impl_k_sleep>
}
1000cdf2:	bd10      	pop	{r4, pc}

1000cdf4 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
1000cdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdf6:	b085      	sub	sp, #20
1000cdf8:	000d      	movs	r5, r1
1000cdfa:	1e1c      	subs	r4, r3, #0
1000cdfc:	9002      	str	r0, [sp, #8]
1000cdfe:	9203      	str	r2, [sp, #12]
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
1000ce00:	d029      	beq.n	1000ce56 <cbpprintf_external+0x62>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
1000ce02:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
1000ce04:	785b      	ldrb	r3, [r3, #1]
1000ce06:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
1000ce08:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
1000ce0a:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000ce0c:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
1000ce0e:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000ce10:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
1000ce12:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
1000ce14:	18c0      	adds	r0, r0, r3
1000ce16:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
1000ce18:	9b01      	ldr	r3, [sp, #4]
1000ce1a:	429e      	cmp	r6, r3
1000ce1c:	d310      	bcc.n	1000ce40 <cbpprintf_external+0x4c>

	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000ce1e:	7962      	ldrb	r2, [r4, #5]
1000ce20:	7923      	ldrb	r3, [r4, #4]
1000ce22:	0212      	lsls	r2, r2, #8
1000ce24:	431a      	orrs	r2, r3
1000ce26:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
1000ce28:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000ce2a:	041b      	lsls	r3, r3, #16
1000ce2c:	4313      	orrs	r3, r2
1000ce2e:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
1000ce30:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
1000ce32:	0612      	lsls	r2, r2, #24
1000ce34:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
1000ce36:	0023      	movs	r3, r4
1000ce38:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
1000ce3a:	47a8      	blx	r5
}
1000ce3c:	b005      	add	sp, #20
1000ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
1000ce40:	7803      	ldrb	r3, [r0, #0]
1000ce42:	1c47      	adds	r7, r0, #1
		*ps = s;
1000ce44:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
1000ce46:	0038      	movs	r0, r7
		*ps = s;
1000ce48:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
1000ce4a:	f7fa fcdb 	bl	10007804 <strlen>
1000ce4e:	3001      	adds	r0, #1
1000ce50:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
1000ce52:	3601      	adds	r6, #1
1000ce54:	e7e0      	b.n	1000ce18 <cbpprintf_external+0x24>
		return -EINVAL;
1000ce56:	2016      	movs	r0, #22
1000ce58:	4240      	negs	r0, r0
1000ce5a:	e7ef      	b.n	1000ce3c <cbpprintf_external+0x48>

1000ce5c <arch_printk_char_out>:
}
1000ce5c:	2000      	movs	r0, #0
1000ce5e:	4770      	bx	lr

1000ce60 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
1000ce60:	b40f      	push	{r0, r1, r2, r3}
1000ce62:	b507      	push	{r0, r1, r2, lr}
1000ce64:	a904      	add	r1, sp, #16
1000ce66:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
1000ce68:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
1000ce6a:	f000 f927 	bl	1000d0bc <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
1000ce6e:	b003      	add	sp, #12
1000ce70:	bc08      	pop	{r3}
1000ce72:	b004      	add	sp, #16
1000ce74:	4718      	bx	r3

1000ce76 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
1000ce76:	b510      	push	{r4, lr}
1000ce78:	0004      	movs	r4, r0
1000ce7a:	0008      	movs	r0, r1
1000ce7c:	0011      	movs	r1, r2
1000ce7e:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000ce80:	47a0      	blx	r4
	return z_impl_z_current_get();
1000ce82:	f7f9 fa83 	bl	1000638c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
1000ce86:	f7f7 f9a3 	bl	100041d0 <z_impl_k_thread_abort>

1000ce8a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000ce8a:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
1000ce8c:	00c9      	lsls	r1, r1, #3
1000ce8e:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000ce90:	6880      	ldr	r0, [r0, #8]
1000ce92:	021b      	lsls	r3, r3, #8
1000ce94:	4298      	cmp	r0, r3
1000ce96:	d302      	bcc.n	1000ce9e <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
1000ce98:	0092      	lsls	r2, r2, #2
1000ce9a:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
1000ce9c:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
1000ce9e:	0052      	lsls	r2, r2, #1
1000cea0:	5a50      	ldrh	r0, [r2, r1]
1000cea2:	e7fb      	b.n	1000ce9c <chunk_field+0x12>

1000cea4 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
1000cea4:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000cea6:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000cea8:	00c9      	lsls	r1, r1, #3
1000ceaa:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000ceac:	6880      	ldr	r0, [r0, #8]
1000ceae:	0224      	lsls	r4, r4, #8
1000ceb0:	42a0      	cmp	r0, r4
1000ceb2:	d302      	bcc.n	1000ceba <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
1000ceb4:	0092      	lsls	r2, r2, #2
1000ceb6:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
1000ceb8:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
1000ceba:	0052      	lsls	r2, r2, #1
1000cebc:	5253      	strh	r3, [r2, r1]
}
1000cebe:	e7fb      	b.n	1000ceb8 <chunk_set+0x14>

1000cec0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
1000cec0:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000cec2:	2201      	movs	r2, #1
1000cec4:	f7ff ffe1 	bl	1000ce8a <chunk_field>
1000cec8:	0840      	lsrs	r0, r0, #1
}
1000ceca:	bd10      	pop	{r4, pc}

1000cecc <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
1000cecc:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000cece:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000ced0:	00c9      	lsls	r1, r1, #3
1000ced2:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000ced4:	6880      	ldr	r0, [r0, #8]
1000ced6:	2301      	movs	r3, #1
1000ced8:	0224      	lsls	r4, r4, #8
1000ceda:	42a0      	cmp	r0, r4
1000cedc:	d308      	bcc.n	1000cef0 <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000cede:	6848      	ldr	r0, [r1, #4]
		if (used) {
1000cee0:	2a00      	cmp	r2, #0
1000cee2:	d002      	beq.n	1000ceea <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000cee4:	4303      	orrs	r3, r0
1000cee6:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
1000cee8:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
1000ceea:	4398      	bics	r0, r3
1000ceec:	6048      	str	r0, [r1, #4]
1000ceee:	e7fb      	b.n	1000cee8 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000cef0:	8848      	ldrh	r0, [r1, #2]
		if (used) {
1000cef2:	2a00      	cmp	r2, #0
1000cef4:	d002      	beq.n	1000cefc <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000cef6:	4303      	orrs	r3, r0
1000cef8:	804b      	strh	r3, [r1, #2]
1000cefa:	e7f5      	b.n	1000cee8 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
1000cefc:	4398      	bics	r0, r3
1000cefe:	8048      	strh	r0, [r1, #2]
}
1000cf00:	e7f2      	b.n	1000cee8 <set_chunk_used+0x1c>

1000cf02 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
1000cf02:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
1000cf04:	0053      	lsls	r3, r2, #1
1000cf06:	2201      	movs	r2, #1
1000cf08:	f7ff ffcc 	bl	1000cea4 <chunk_set>
}
1000cf0c:	bd10      	pop	{r4, pc}

1000cf0e <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
1000cf0e:	2280      	movs	r2, #128	; 0x80
1000cf10:	2304      	movs	r3, #4
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
1000cf12:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
1000cf14:	0212      	lsls	r2, r2, #8
1000cf16:	4290      	cmp	r0, r2
1000cf18:	d300      	bcc.n	1000cf1c <bucket_idx.isra.0+0xe>
1000cf1a:	18db      	adds	r3, r3, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
1000cf1c:	3308      	adds	r3, #8
1000cf1e:	08db      	lsrs	r3, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
1000cf20:	3101      	adds	r1, #1
1000cf22:	1ac8      	subs	r0, r1, r3
	return 31 - __builtin_clz(usable_sz);
1000cf24:	f7f3 f9f0 	bl	10000308 <__clzsi2>
1000cf28:	231f      	movs	r3, #31
1000cf2a:	1a18      	subs	r0, r3, r0
}
1000cf2c:	bd10      	pop	{r4, pc}

1000cf2e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
1000cf2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cf30:	000d      	movs	r5, r1
1000cf32:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
1000cf34:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
1000cf36:	f7ff ffc3 	bl	1000cec0 <chunk_size>
1000cf3a:	2380      	movs	r3, #128	; 0x80
1000cf3c:	0001      	movs	r1, r0
1000cf3e:	021b      	lsls	r3, r3, #8
1000cf40:	429e      	cmp	r6, r3
1000cf42:	d301      	bcc.n	1000cf48 <free_list_add+0x1a>
1000cf44:	2801      	cmp	r0, #1
1000cf46:	d019      	beq.n	1000cf7c <free_list_add+0x4e>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
1000cf48:	0030      	movs	r0, r6
1000cf4a:	f7ff ffe0 	bl	1000cf0e <bucket_idx.isra.0>
	if (b->next == 0U) {
1000cf4e:	0083      	lsls	r3, r0, #2
1000cf50:	18e3      	adds	r3, r4, r3
1000cf52:	691e      	ldr	r6, [r3, #16]
1000cf54:	2e00      	cmp	r6, #0
1000cf56:	d112      	bne.n	1000cf7e <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
1000cf58:	2101      	movs	r1, #1
1000cf5a:	4081      	lsls	r1, r0
1000cf5c:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
1000cf5e:	0020      	movs	r0, r4
1000cf60:	430a      	orrs	r2, r1
1000cf62:	60e2      	str	r2, [r4, #12]
1000cf64:	0029      	movs	r1, r5
1000cf66:	2202      	movs	r2, #2
		b->next = c;
1000cf68:	611d      	str	r5, [r3, #16]
1000cf6a:	002b      	movs	r3, r5
1000cf6c:	f7ff ff9a 	bl	1000cea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
1000cf70:	002b      	movs	r3, r5
1000cf72:	2203      	movs	r2, #3
1000cf74:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
1000cf76:	0020      	movs	r0, r4
1000cf78:	f7ff ff94 	bl	1000cea4 <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
1000cf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
1000cf7e:	2202      	movs	r2, #2
1000cf80:	0031      	movs	r1, r6
1000cf82:	0020      	movs	r0, r4
1000cf84:	f7ff ff81 	bl	1000ce8a <chunk_field>
1000cf88:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
1000cf8a:	0003      	movs	r3, r0
1000cf8c:	2202      	movs	r2, #2
1000cf8e:	0029      	movs	r1, r5
1000cf90:	0020      	movs	r0, r4
1000cf92:	f7ff ff87 	bl	1000cea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
1000cf96:	0033      	movs	r3, r6
1000cf98:	2203      	movs	r2, #3
1000cf9a:	0029      	movs	r1, r5
1000cf9c:	0020      	movs	r0, r4
1000cf9e:	f7ff ff81 	bl	1000cea4 <chunk_set>
1000cfa2:	002b      	movs	r3, r5
1000cfa4:	2203      	movs	r2, #3
1000cfa6:	0039      	movs	r1, r7
1000cfa8:	0020      	movs	r0, r4
1000cfaa:	f7ff ff7b 	bl	1000cea4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
1000cfae:	002b      	movs	r3, r5
1000cfb0:	2202      	movs	r2, #2
1000cfb2:	0031      	movs	r1, r6
1000cfb4:	e7df      	b.n	1000cf76 <free_list_add+0x48>

1000cfb6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
1000cfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
1000cfb8:	2380      	movs	r3, #128	; 0x80
1000cfba:	2408      	movs	r4, #8
1000cfbc:	02db      	lsls	r3, r3, #11
1000cfbe:	429a      	cmp	r2, r3
1000cfc0:	d200      	bcs.n	1000cfc4 <sys_heap_init+0xe>
1000cfc2:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000cfc4:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
1000cfc6:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
1000cfc8:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000cfca:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
1000cfcc:	190c      	adds	r4, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000cfce:	439d      	bics	r5, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
1000cfd0:	439c      	bics	r4, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
1000cfd2:	1b64      	subs	r4, r4, r5
1000cfd4:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
1000cfd6:	6005      	str	r5, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
1000cfd8:	0021      	movs	r1, r4
1000cfda:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
1000cfdc:	60ac      	str	r4, [r5, #8]
	h->avail_buckets = 0;
1000cfde:	60ef      	str	r7, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
1000cfe0:	f7ff ff95 	bl	1000cf0e <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
1000cfe4:	1d43      	adds	r3, r0, #5
1000cfe6:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
1000cfe8:	1dde      	adds	r6, r3, #7
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
1000cfea:	003a      	movs	r2, r7
1000cfec:	08f6      	lsrs	r6, r6, #3
1000cfee:	3001      	adds	r0, #1
1000cff0:	db01      	blt.n	1000cff6 <sys_heap_init+0x40>
1000cff2:	3b10      	subs	r3, #16
1000cff4:	001a      	movs	r2, r3
1000cff6:	0028      	movs	r0, r5
1000cff8:	2100      	movs	r1, #0
1000cffa:	3010      	adds	r0, #16
1000cffc:	f7fa fb7a 	bl	100076f4 <memset>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
1000d000:	0032      	movs	r2, r6
1000d002:	0028      	movs	r0, r5
1000d004:	2100      	movs	r1, #0
1000d006:	f7ff ff7c 	bl	1000cf02 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
1000d00a:	2300      	movs	r3, #0
1000d00c:	0028      	movs	r0, r5
1000d00e:	001a      	movs	r2, r3
1000d010:	0019      	movs	r1, r3
1000d012:	f7ff ff47 	bl	1000cea4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
1000d016:	1ba7      	subs	r7, r4, r6
	set_chunk_used(h, 0, true);
1000d018:	0028      	movs	r0, r5
1000d01a:	2201      	movs	r2, #1
1000d01c:	2100      	movs	r1, #0
1000d01e:	f7ff ff55 	bl	1000cecc <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
1000d022:	003a      	movs	r2, r7
1000d024:	0031      	movs	r1, r6
1000d026:	0028      	movs	r0, r5
1000d028:	f7ff ff6b 	bl	1000cf02 <set_chunk_size>
1000d02c:	0033      	movs	r3, r6
1000d02e:	0031      	movs	r1, r6
1000d030:	0028      	movs	r0, r5
1000d032:	2200      	movs	r2, #0
1000d034:	f7ff ff36 	bl	1000cea4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
1000d038:	0028      	movs	r0, r5
1000d03a:	0021      	movs	r1, r4
1000d03c:	2200      	movs	r2, #0
1000d03e:	f7ff ff60 	bl	1000cf02 <set_chunk_size>
1000d042:	003b      	movs	r3, r7
1000d044:	0028      	movs	r0, r5
1000d046:	0021      	movs	r1, r4
1000d048:	2200      	movs	r2, #0
1000d04a:	f7ff ff2b 	bl	1000cea4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
1000d04e:	0028      	movs	r0, r5
1000d050:	2201      	movs	r2, #1
1000d052:	0021      	movs	r1, r4
1000d054:	f7ff ff3a 	bl	1000cecc <set_chunk_used>

	free_list_add(h, chunk0_size);
1000d058:	0031      	movs	r1, r6
1000d05a:	0028      	movs	r0, r5
1000d05c:	f7ff ff67 	bl	1000cf2e <free_list_add>
}
1000d060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000d062 <outs>:
{
1000d062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d064:	0007      	movs	r7, r0
1000d066:	0015      	movs	r5, r2
1000d068:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000d06a:	0014      	movs	r4, r2
{
1000d06c:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000d06e:	42a6      	cmp	r6, r4
1000d070:	d806      	bhi.n	1000d080 <outs+0x1e>
1000d072:	2e00      	cmp	r6, #0
1000d074:	d001      	beq.n	1000d07a <outs+0x18>
	return (int)count;
1000d076:	1b60      	subs	r0, r4, r5
1000d078:	e008      	b.n	1000d08c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000d07a:	7823      	ldrb	r3, [r4, #0]
1000d07c:	2b00      	cmp	r3, #0
1000d07e:	d0fa      	beq.n	1000d076 <outs+0x14>
		int rc = out((int)*sp++, ctx);
1000d080:	7820      	ldrb	r0, [r4, #0]
1000d082:	9901      	ldr	r1, [sp, #4]
1000d084:	47b8      	blx	r7
		if (rc < 0) {
1000d086:	3401      	adds	r4, #1
1000d088:	2800      	cmp	r0, #0
1000d08a:	daf0      	bge.n	1000d06e <outs+0xc>
}
1000d08c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000d08e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
1000d08e:	4770      	bx	lr

1000d090 <dummy_timestamp>:
}
1000d090:	2000      	movs	r0, #0
1000d092:	4770      	bx	lr

1000d094 <default_lf_get_timestamp>:
{
1000d094:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
1000d096:	f000 fee9 	bl	1000de6c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
1000d09a:	220a      	movs	r2, #10
1000d09c:	2300      	movs	r3, #0
1000d09e:	f7f3 f971 	bl	10000384 <__aeabi_uldivmod>
}
1000d0a2:	bd10      	pop	{r4, pc}

1000d0a4 <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
1000d0a4:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
1000d0a6:	2101      	movs	r1, #1
1000d0a8:	f000 fefd 	bl	1000dea6 <z_impl_atomic_add>
	return atomic_add(target, 1);

}
1000d0ac:	bd10      	pop	{r4, pc}

1000d0ae <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
1000d0ae:	2100      	movs	r1, #0
{
1000d0b0:	b510      	push	{r4, lr}
		(void)z_log_init(false, false);
1000d0b2:	0008      	movs	r0, r1
1000d0b4:	f7f6 fb42 	bl	1000373c <z_log_init.isra.0>
	}

	return 0;
}
1000d0b8:	2000      	movs	r0, #0
1000d0ba:	bd10      	pop	{r4, pc}

1000d0bc <z_log_vprintk>:
{
1000d0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000d0be:	9002      	str	r0, [sp, #8]
1000d0c0:	2000      	movs	r0, #0
1000d0c2:	9103      	str	r1, [sp, #12]
1000d0c4:	0003      	movs	r3, r0
1000d0c6:	0002      	movs	r2, r0
1000d0c8:	0001      	movs	r1, r0
1000d0ca:	9001      	str	r0, [sp, #4]
1000d0cc:	9000      	str	r0, [sp, #0]
1000d0ce:	f7f6 fc37 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000d0d2:	b005      	add	sp, #20
1000d0d4:	bd00      	pop	{pc}

1000d0d6 <z_log_notify_backend_enabled>:
}
1000d0d6:	4770      	bx	lr

1000d0d8 <z_log_get_tag>:
}
1000d0d8:	2000      	movs	r0, #0
1000d0da:	4770      	bx	lr

1000d0dc <z_log_msg_finalize>:
{
1000d0dc:	b570      	push	{r4, r5, r6, lr}
1000d0de:	000e      	movs	r6, r1
1000d0e0:	0015      	movs	r5, r2
1000d0e2:	0004      	movs	r4, r0
1000d0e4:	0019      	movs	r1, r3
1000d0e6:	0d12      	lsrs	r2, r2, #20
	if (!msg) {
1000d0e8:	2800      	cmp	r0, #0
1000d0ea:	d102      	bne.n	1000d0f2 <z_log_msg_finalize+0x16>
		z_log_dropped(false);
1000d0ec:	f7f6 fbda 	bl	100038a4 <z_log_dropped>
}
1000d0f0:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
1000d0f2:	2b00      	cmp	r3, #0
1000d0f4:	d005      	beq.n	1000d102 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
1000d0f6:	032b      	lsls	r3, r5, #12
1000d0f8:	0d5b      	lsrs	r3, r3, #21
1000d0fa:	3010      	adds	r0, #16
1000d0fc:	18c0      	adds	r0, r0, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
1000d0fe:	f7fa fab1 	bl	10007664 <memcpy>
	z_log_msg_commit(msg);
1000d102:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
1000d104:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
1000d106:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
1000d108:	f7f6 fbdc 	bl	100038c4 <z_log_msg_commit>
1000d10c:	e7f0      	b.n	1000d0f0 <z_log_msg_finalize+0x14>

1000d10e <out_func>:
{
1000d10e:	b513      	push	{r0, r1, r4, lr}
		char x = (char)c;
1000d110:	466b      	mov	r3, sp
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
1000d112:	684a      	ldr	r2, [r1, #4]
		char x = (char)c;
1000d114:	71d8      	strb	r0, [r3, #7]
1000d116:	3307      	adds	r3, #7
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
1000d118:	680c      	ldr	r4, [r1, #0]
1000d11a:	0018      	movs	r0, r3
1000d11c:	2101      	movs	r1, #1
1000d11e:	6852      	ldr	r2, [r2, #4]
1000d120:	47a0      	blx	r4
}
1000d122:	2000      	movs	r0, #0
1000d124:	bd16      	pop	{r1, r2, r4, pc}

1000d126 <cr_out_func>:
{
1000d126:	b570      	push	{r4, r5, r6, lr}
1000d128:	0004      	movs	r4, r0
1000d12a:	000d      	movs	r5, r1
	if (c == '\n') {
1000d12c:	280a      	cmp	r0, #10
1000d12e:	d102      	bne.n	1000d136 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
1000d130:	200d      	movs	r0, #13
1000d132:	f7ff ffec 	bl	1000d10e <out_func>
	out_func(c, ctx);
1000d136:	0029      	movs	r1, r5
1000d138:	0020      	movs	r0, r4
1000d13a:	f7ff ffe8 	bl	1000d10e <out_func>
}
1000d13e:	2000      	movs	r0, #0
1000d140:	bd70      	pop	{r4, r5, r6, pc}

1000d142 <buffer_write>:
{
1000d142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d144:	0006      	movs	r6, r0
1000d146:	000d      	movs	r5, r1
1000d148:	0014      	movs	r4, r2
1000d14a:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
1000d14c:	0021      	movs	r1, r4
1000d14e:	0028      	movs	r0, r5
1000d150:	003a      	movs	r2, r7
1000d152:	47b0      	blx	r6
		len -= processed;
1000d154:	1a24      	subs	r4, r4, r0
		buf += processed;
1000d156:	182d      	adds	r5, r5, r0
	} while (len != 0);
1000d158:	2c00      	cmp	r4, #0
1000d15a:	d1f7      	bne.n	1000d14c <buffer_write+0xa>
}
1000d15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000d15e <cbvprintf>:
{
1000d15e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
1000d160:	2400      	movs	r4, #0
1000d162:	9400      	str	r4, [sp, #0]
1000d164:	f7f5 ff56 	bl	10003014 <z_cbvprintf_impl>
}
1000d168:	bd16      	pop	{r1, r2, r4, pc}

1000d16a <log_output_flush>:
{
1000d16a:	b510      	push	{r4, lr}
		     output->control_block->offset,
1000d16c:	6842      	ldr	r2, [r0, #4]
{
1000d16e:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
1000d170:	ca0c      	ldmia	r2, {r2, r3}
1000d172:	6881      	ldr	r1, [r0, #8]
1000d174:	6800      	ldr	r0, [r0, #0]
1000d176:	f7ff ffe4 	bl	1000d142 <buffer_write>
	output->control_block->offset = 0;
1000d17a:	2200      	movs	r2, #0
1000d17c:	6863      	ldr	r3, [r4, #4]
1000d17e:	601a      	str	r2, [r3, #0]
}
1000d180:	bd10      	pop	{r4, pc}

1000d182 <log_backend_uart_init>:
}
1000d182:	4770      	bx	lr

1000d184 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000d184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000d186:	ab0b      	add	r3, sp, #44	; 0x2c
1000d188:	9305      	str	r3, [sp, #20]
1000d18a:	2000      	movs	r0, #0
1000d18c:	9303      	str	r3, [sp, #12]
1000d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d190:	2201      	movs	r2, #1
1000d192:	9302      	str	r3, [sp, #8]
1000d194:	9001      	str	r0, [sp, #4]
1000d196:	0003      	movs	r3, r0
1000d198:	9000      	str	r0, [sp, #0]
1000d19a:	f7f6 fbd1 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000d19e:	b007      	add	sp, #28
1000d1a0:	bd00      	pop	{pc}

1000d1a2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
1000d1a2:	b510      	push	{r4, lr}
1000d1a4:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
1000d1a6:	6800      	ldr	r0, [r0, #0]
1000d1a8:	f7f6 fe14 	bl	10003dd4 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
1000d1ac:	bd10      	pop	{r4, pc}

1000d1ae <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
1000d1ae:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
1000d1b0:	2100      	movs	r1, #0
1000d1b2:	2001      	movs	r0, #1
1000d1b4:	f7f6 fe0e 	bl	10003dd4 <z_arm_fatal_error>
}
1000d1b8:	bd10      	pop	{r4, pc}

1000d1ba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
1000d1ba:	b510      	push	{r4, lr}
	handler();
1000d1bc:	f7f6 fe90 	bl	10003ee0 <z_SysNmiOnReset>
	z_arm_int_exit();
1000d1c0:	f7f6 ff3a 	bl	10004038 <z_arm_exc_exit>
}
1000d1c4:	bd10      	pop	{r4, pc}

1000d1c6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000d1c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000d1c8:	ab0b      	add	r3, sp, #44	; 0x2c
1000d1ca:	9305      	str	r3, [sp, #20]
1000d1cc:	2000      	movs	r0, #0
1000d1ce:	9303      	str	r3, [sp, #12]
1000d1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d1d2:	2201      	movs	r2, #1
1000d1d4:	9302      	str	r3, [sp, #8]
1000d1d6:	9001      	str	r0, [sp, #4]
1000d1d8:	0003      	movs	r3, r0
1000d1da:	9000      	str	r0, [sp, #0]
1000d1dc:	f7f6 fbb0 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000d1e0:	b007      	add	sp, #28
1000d1e2:	bd00      	pop	{pc}

1000d1e4 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
1000d1e4:	4770      	bx	lr

1000d1e6 <malloc_prepare>:
}
1000d1e6:	2000      	movs	r0, #0
1000d1e8:	4770      	bx	lr

1000d1ea <_stdout_hook_default>:
	return EOF;
1000d1ea:	2001      	movs	r0, #1
}
1000d1ec:	4240      	negs	r0, r0
1000d1ee:	4770      	bx	lr

1000d1f0 <_stdin_hook_default>:
}
1000d1f0:	2000      	movs	r0, #0
1000d1f2:	4770      	bx	lr

1000d1f4 <_read>:
{
1000d1f4:	0008      	movs	r0, r1
1000d1f6:	b510      	push	{r4, lr}
1000d1f8:	0011      	movs	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
1000d1fa:	f7f7 f80b 	bl	10004214 <z_impl_zephyr_read_stdin>
}
1000d1fe:	bd10      	pop	{r4, pc}

1000d200 <_write>:
{
1000d200:	0008      	movs	r0, r1
1000d202:	b510      	push	{r4, lr}
1000d204:	0011      	movs	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
1000d206:	f7f7 f819 	bl	1000423c <z_impl_zephyr_write_stdout>
}
1000d20a:	bd10      	pop	{r4, pc}

1000d20c <_close>:
int _close(int file)
1000d20c:	2001      	movs	r0, #1
1000d20e:	4240      	negs	r0, r0
1000d210:	4770      	bx	lr

1000d212 <_lseek>:
}
1000d212:	2000      	movs	r0, #0
1000d214:	4770      	bx	lr

1000d216 <_isatty>:
{
1000d216:	0003      	movs	r3, r0
	return file <= 2;
1000d218:	2202      	movs	r2, #2
1000d21a:	2100      	movs	r1, #0
1000d21c:	0fc0      	lsrs	r0, r0, #31
1000d21e:	429a      	cmp	r2, r3
1000d220:	4148      	adcs	r0, r1
}
1000d222:	4770      	bx	lr

1000d224 <_kill>:
}
1000d224:	2000      	movs	r0, #0
1000d226:	4770      	bx	lr

1000d228 <_getpid>:
int _getpid(void)
1000d228:	2000      	movs	r0, #0
1000d22a:	4770      	bx	lr

1000d22c <_fstat>:
	st->st_mode = S_IFCHR;
1000d22c:	2380      	movs	r3, #128	; 0x80
1000d22e:	019b      	lsls	r3, r3, #6
}
1000d230:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
1000d232:	604b      	str	r3, [r1, #4]
}
1000d234:	4770      	bx	lr

1000d236 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
1000d236:	b510      	push	{r4, lr}
1000d238:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
1000d23a:	2014      	movs	r0, #20
1000d23c:	f7f9 ff5a 	bl	100070f4 <malloc>
1000d240:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
1000d242:	f000 fcf3 	bl	1000dc2c <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
1000d246:	bd10      	pop	{r4, pc}

1000d248 <__retarget_lock_close_recursive>:
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
1000d248:	b510      	push	{r4, lr}
1000d24a:	f7f9 ff5d 	bl	10007108 <free>
1000d24e:	bd10      	pop	{r4, pc}

1000d250 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
1000d250:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
1000d252:	2201      	movs	r2, #1
1000d254:	4252      	negs	r2, r2
1000d256:	17d3      	asrs	r3, r2, #31
1000d258:	f7f8 fcd8 	bl	10005c0c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
1000d25c:	bd10      	pop	{r4, pc}

1000d25e <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
1000d25e:	b510      	push	{r4, lr}
	return z_impl_k_mutex_unlock(mutex);
1000d260:	f7f8 fd4c 	bl	10005cfc <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
1000d264:	bd10      	pop	{r4, pc}

1000d266 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
1000d266:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
1000d268:	f7f8 face 	bl	10005808 <z_impl_z_errno>
	return z_errno();
}
1000d26c:	bd10      	pop	{r4, pc}

1000d26e <adc_rpi_configure_func_0>:
			      &adc_rpi_data_##idx,				   \
			      &adc_rpi_config_##idx, POST_KERNEL,		   \
			      CONFIG_ADC_INIT_PRIORITY,				   \
			      &adc_rpi_api_##idx)

DT_INST_FOREACH_STATUS_OKAY(ADC_RPI_INIT);
1000d26e:	b510      	push	{r4, lr}
1000d270:	2200      	movs	r2, #0
1000d272:	2103      	movs	r1, #3
1000d274:	2016      	movs	r0, #22
1000d276:	f7f6 fe09 	bl	10003e8c <z_arm_irq_priority_set>
1000d27a:	2016      	movs	r0, #22
1000d27c:	f7f6 fdfa 	bl	10003e74 <arch_irq_enable>
1000d280:	bd10      	pop	{r4, pc}

1000d282 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000d282:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000d284:	ab0b      	add	r3, sp, #44	; 0x2c
1000d286:	9305      	str	r3, [sp, #20]
1000d288:	2000      	movs	r0, #0
1000d28a:	9303      	str	r3, [sp, #12]
1000d28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d28e:	2201      	movs	r2, #1
1000d290:	9302      	str	r3, [sp, #8]
1000d292:	9001      	str	r0, [sp, #4]
1000d294:	0003      	movs	r3, r0
1000d296:	9000      	str	r0, [sp, #0]
1000d298:	f7f6 fb52 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000d29c:	b007      	add	sp, #28
1000d29e:	bd00      	pop	{pc}

1000d2a0 <adc_context_on_timer_expired>:
{
1000d2a0:	b510      	push	{r4, lr}
1000d2a2:	0004      	movs	r4, r0
	if (atomic_inc(&ctx->sampling_requested) == 0) {
1000d2a4:	3c08      	subs	r4, #8
1000d2a6:	2101      	movs	r1, #1
1000d2a8:	0020      	movs	r0, r4
1000d2aa:	f000 fdfc 	bl	1000dea6 <z_impl_atomic_add>
1000d2ae:	2800      	cmp	r0, #0
1000d2b0:	d103      	bne.n	1000d2ba <adc_context_on_timer_expired+0x1a>
		adc_context_start_sampling(ctx);
1000d2b2:	0020      	movs	r0, r4
1000d2b4:	f7f7 f86a 	bl	1000438c <adc_context_start_sampling>
}
1000d2b8:	bd10      	pop	{r4, pc}
		ctx->status = -EBUSY;
1000d2ba:	2310      	movs	r3, #16
1000d2bc:	425b      	negs	r3, r3
1000d2be:	6723      	str	r3, [r4, #112]	; 0x70
}
1000d2c0:	e7fa      	b.n	1000d2b8 <adc_context_on_timer_expired+0x18>

1000d2c2 <adc_rpi_read>:
{
1000d2c2:	b510      	push	{r4, lr}
	return adc_rpi_read_async(dev, sequence, NULL);
1000d2c4:	2200      	movs	r2, #0
1000d2c6:	f7f7 f88f 	bl	100043e8 <adc_rpi_read_async>
}
1000d2ca:	bd10      	pop	{r4, pc}

1000d2cc <adc_context_complete.part.0>:
static inline void adc_context_complete(struct adc_context *ctx, int status)
1000d2cc:	b510      	push	{r4, lr}
1000d2ce:	0004      	movs	r4, r0
		if (ctx->signal) {
1000d2d0:	6f40      	ldr	r0, [r0, #116]	; 0x74
1000d2d2:	2800      	cmp	r0, #0
1000d2d4:	d001      	beq.n	1000d2da <adc_context_complete.part.0+0xe>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
1000d2d6:	f7f9 fb27 	bl	10006928 <z_impl_k_poll_signal_raise>
		k_sem_give(&ctx->lock);
1000d2da:	0020      	movs	r0, r4
1000d2dc:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
1000d2de:	f7f8 fd47 	bl	10005d70 <z_impl_k_sem_give>
}
1000d2e2:	bd10      	pop	{r4, pc}

1000d2e4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000d2e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000d2e6:	ab0b      	add	r3, sp, #44	; 0x2c
1000d2e8:	9305      	str	r3, [sp, #20]
1000d2ea:	2000      	movs	r0, #0
1000d2ec:	9303      	str	r3, [sp, #12]
1000d2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d2f0:	9001      	str	r0, [sp, #4]
1000d2f2:	9302      	str	r3, [sp, #8]
1000d2f4:	9000      	str	r0, [sp, #0]
1000d2f6:	0003      	movs	r3, r0
1000d2f8:	f7f6 fb22 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000d2fc:	b007      	add	sp, #28
1000d2fe:	bd00      	pop	{pc}

1000d300 <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
1000d300:	b570      	push	{r4, r5, r6, lr}
1000d302:	0005      	movs	r5, r0
	return i2c_burst_write_dt(&config->bus,
1000d304:	2601      	movs	r6, #1
static inline int ssd1306_write_bus(const struct device *dev,
1000d306:	001c      	movs	r4, r3
1000d308:	b088      	sub	sp, #32
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
1000d30a:	88ab      	ldrh	r3, [r5, #4]
1000d30c:	466d      	mov	r5, sp
	return i2c_burst_write_dt(&config->bus,
1000d30e:	4074      	eors	r4, r6
1000d310:	01a4      	lsls	r4, r4, #6
1000d312:	71ec      	strb	r4, [r5, #7]
1000d314:	3507      	adds	r5, #7
	msg[0].flags = I2C_MSG_WRITE;
1000d316:	2400      	movs	r4, #0
	msg[0].buf = &start_addr;
1000d318:	9502      	str	r5, [sp, #8]
	msg[1].len = num_bytes;
1000d31a:	9206      	str	r2, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
1000d31c:	466d      	mov	r5, sp
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
1000d31e:	2202      	movs	r2, #2
	return i2c_burst_write(spec->bus, spec->addr,
1000d320:	6800      	ldr	r0, [r0, #0]
	msg[0].len = 1U;
1000d322:	9603      	str	r6, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
1000d324:	742c      	strb	r4, [r5, #16]
	msg[1].buf = (uint8_t *)buf;
1000d326:	9105      	str	r1, [sp, #20]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
1000d328:	772a      	strb	r2, [r5, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
1000d32a:	6881      	ldr	r1, [r0, #8]
1000d32c:	688c      	ldr	r4, [r1, #8]
1000d32e:	a902      	add	r1, sp, #8
1000d330:	47a0      	blx	r4
}
1000d332:	b008      	add	sp, #32
1000d334:	bd70      	pop	{r4, r5, r6, pc}

1000d336 <ssd1306_set_contrast>:
{
1000d336:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
1000d338:	2381      	movs	r3, #129	; 0x81
1000d33a:	466a      	mov	r2, sp
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
1000d33c:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = {
1000d33e:	7113      	strb	r3, [r2, #4]
1000d340:	7151      	strb	r1, [r2, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
1000d342:	2301      	movs	r3, #1
1000d344:	2202      	movs	r2, #2
1000d346:	a901      	add	r1, sp, #4
1000d348:	f7ff ffda 	bl	1000d300 <ssd1306_write_bus.isra.0>
}
1000d34c:	bd0e      	pop	{r1, r2, r3, pc}

1000d34e <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
1000d34e:	0002      	movs	r2, r0
1000d350:	b510      	push	{r4, lr}
1000d352:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
1000d354:	7911      	ldrb	r1, [r2, #4]
1000d356:	2201      	movs	r2, #1
1000d358:	0014      	movs	r4, r2
1000d35a:	408c      	lsls	r4, r1
1000d35c:	0021      	movs	r1, r4
	return gpio_pin_set(spec->port, spec->pin, value);
1000d35e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
1000d360:	6904      	ldr	r4, [r0, #16]
1000d362:	6824      	ldr	r4, [r4, #0]
1000d364:	420c      	tst	r4, r1
1000d366:	d000      	beq.n	1000d36a <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
1000d368:	4053      	eors	r3, r2
	if (value != 0)	{
1000d36a:	2b00      	cmp	r3, #0
1000d36c:	d003      	beq.n	1000d376 <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
1000d36e:	6883      	ldr	r3, [r0, #8]
1000d370:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
1000d372:	4798      	blx	r3
}
1000d374:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
1000d376:	6883      	ldr	r3, [r0, #8]
1000d378:	691b      	ldr	r3, [r3, #16]
1000d37a:	e7fa      	b.n	1000d372 <gpio_pin_set_dt.isra.0+0x24>

1000d37c <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
1000d37c:	23d0      	movs	r3, #208	; 0xd0
1000d37e:	061b      	lsls	r3, r3, #24
1000d380:	685b      	ldr	r3, [r3, #4]
}
1000d382:	2000      	movs	r0, #0
	*value = gpio_get_all();
1000d384:	600b      	str	r3, [r1, #0]
}
1000d386:	4770      	bx	lr

1000d388 <gpio_rpi_port_set_bits_raw>:
{
1000d388:	000a      	movs	r2, r1
1000d38a:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000d38c:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
1000d38e:	0010      	movs	r0, r2
1000d390:	6919      	ldr	r1, [r3, #16]
1000d392:	4388      	bics	r0, r1
1000d394:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
1000d396:	20d0      	movs	r0, #208	; 0xd0
1000d398:	0600      	lsls	r0, r0, #24
1000d39a:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000d39c:	691c      	ldr	r4, [r3, #16]
1000d39e:	6959      	ldr	r1, [r3, #20]
1000d3a0:	4021      	ands	r1, r4
1000d3a2:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
1000d3a4:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
1000d3a6:	6919      	ldr	r1, [r3, #16]
1000d3a8:	695b      	ldr	r3, [r3, #20]
1000d3aa:	4011      	ands	r1, r2
1000d3ac:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
1000d3ae:	6241      	str	r1, [r0, #36]	; 0x24
}
1000d3b0:	2000      	movs	r0, #0
1000d3b2:	bd10      	pop	{r4, pc}

1000d3b4 <gpio_rpi_port_clear_bits_raw>:
{
1000d3b4:	000a      	movs	r2, r1
1000d3b6:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000d3b8:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
1000d3ba:	0010      	movs	r0, r2
1000d3bc:	6919      	ldr	r1, [r3, #16]
1000d3be:	4388      	bics	r0, r1
1000d3c0:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
1000d3c2:	20d0      	movs	r0, #208	; 0xd0
1000d3c4:	0600      	lsls	r0, r0, #24
1000d3c6:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000d3c8:	691c      	ldr	r4, [r3, #16]
1000d3ca:	6959      	ldr	r1, [r3, #20]
1000d3cc:	4021      	ands	r1, r4
1000d3ce:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
1000d3d0:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
1000d3d2:	6919      	ldr	r1, [r3, #16]
1000d3d4:	695b      	ldr	r3, [r3, #20]
1000d3d6:	4011      	ands	r1, r2
1000d3d8:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000d3da:	6281      	str	r1, [r0, #40]	; 0x28
}
1000d3dc:	2000      	movs	r0, #0
1000d3de:	bd10      	pop	{r4, pc}

1000d3e0 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
1000d3e0:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
1000d3e2:	0008      	movs	r0, r1
1000d3e4:	691a      	ldr	r2, [r3, #16]
1000d3e6:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
1000d3e8:	22d0      	movs	r2, #208	; 0xd0
1000d3ea:	0612      	lsls	r2, r2, #24
1000d3ec:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000d3ee:	691b      	ldr	r3, [r3, #16]
}
1000d3f0:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
1000d3f2:	400b      	ands	r3, r1
1000d3f4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000d3f6:	4770      	bx	lr

1000d3f8 <gpio_rpi_manage_callback>:
{
1000d3f8:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
1000d3fa:	6903      	ldr	r3, [r0, #16]
	return list->head;
1000d3fc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
1000d3fe:	2800      	cmp	r0, #0
1000d400:	d021      	beq.n	1000d446 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000d402:	4288      	cmp	r0, r1
1000d404:	d11b      	bne.n	1000d43e <gpio_rpi_manage_callback+0x46>
	return node->next;
1000d406:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
1000d408:	689c      	ldr	r4, [r3, #8]
	list->head = node;
1000d40a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
1000d40c:	42a1      	cmp	r1, r4
1000d40e:	d100      	bne.n	1000d412 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
1000d410:	6098      	str	r0, [r3, #8]
	parent->next = child;
1000d412:	2000      	movs	r0, #0
1000d414:	6008      	str	r0, [r1, #0]
	if (set) {
1000d416:	4282      	cmp	r2, r0
1000d418:	d006      	beq.n	1000d428 <gpio_rpi_manage_callback+0x30>
	return list->head;
1000d41a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
1000d41c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
1000d41e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
1000d420:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000d422:	2a00      	cmp	r2, #0
1000d424:	d100      	bne.n	1000d428 <gpio_rpi_manage_callback+0x30>
	list->tail = node;
1000d426:	6099      	str	r1, [r3, #8]
	return 0;
1000d428:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
1000d42a:	e010      	b.n	1000d44e <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000d42c:	4281      	cmp	r1, r0
1000d42e:	d106      	bne.n	1000d43e <gpio_rpi_manage_callback+0x46>
	return node->next;
1000d430:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
1000d432:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
1000d434:	6898      	ldr	r0, [r3, #8]
1000d436:	4281      	cmp	r1, r0
1000d438:	d1eb      	bne.n	1000d412 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
1000d43a:	609c      	str	r4, [r3, #8]
}
1000d43c:	e7e9      	b.n	1000d412 <gpio_rpi_manage_callback+0x1a>
	return node->next;
1000d43e:	0004      	movs	r4, r0
1000d440:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000d442:	2800      	cmp	r0, #0
1000d444:	d1f2      	bne.n	1000d42c <gpio_rpi_manage_callback+0x34>
			if (!set) {
1000d446:	2a00      	cmp	r2, #0
1000d448:	d1e7      	bne.n	1000d41a <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
1000d44a:	2016      	movs	r0, #22
1000d44c:	4240      	negs	r0, r0
}
1000d44e:	bd10      	pop	{r4, pc}

1000d450 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
1000d450:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
1000d452:	6843      	ldr	r3, [r0, #4]
1000d454:	685b      	ldr	r3, [r3, #4]
1000d456:	4798      	blx	r3
	return 0;
}
1000d458:	2000      	movs	r0, #0
1000d45a:	bd10      	pop	{r4, pc}

1000d45c <gpio_rpi_pin_interrupt_configure>:
{
1000d45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d45e:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
1000d460:	6907      	ldr	r7, [r0, #16]
{
1000d462:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000d464:	210f      	movs	r1, #15
1000d466:	2200      	movs	r2, #0
1000d468:	0028      	movs	r0, r5
{
1000d46a:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000d46c:	f7f8 f924 	bl	100056b8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000d470:	2201      	movs	r2, #1
1000d472:	0013      	movs	r3, r2
1000d474:	40ab      	lsls	r3, r5
1000d476:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
1000d478:	2380      	movs	r3, #128	; 0x80
1000d47a:	039b      	lsls	r3, r3, #14
1000d47c:	429e      	cmp	r6, r3
1000d47e:	d105      	bne.n	1000d48c <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000d480:	68fb      	ldr	r3, [r7, #12]
1000d482:	9a01      	ldr	r2, [sp, #4]
1000d484:	4393      	bics	r3, r2
}
1000d486:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000d488:	60fb      	str	r3, [r7, #12]
}
1000d48a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
1000d48c:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
1000d48e:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
1000d490:	04db      	lsls	r3, r3, #19
1000d492:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
1000d494:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
1000d496:	01f6      	lsls	r6, r6, #7
1000d498:	d50d      	bpl.n	1000d4b6 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
1000d49a:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
1000d49c:	2b00      	cmp	r3, #0
1000d49e:	d001      	beq.n	1000d4a4 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
1000d4a0:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
1000d4a2:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
1000d4a4:	2201      	movs	r2, #1
1000d4a6:	0028      	movs	r0, r5
1000d4a8:	f7f8 f906 	bl	100056b8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000d4ac:	68fb      	ldr	r3, [r7, #12]
1000d4ae:	9a01      	ldr	r2, [sp, #4]
1000d4b0:	431a      	orrs	r2, r3
1000d4b2:	0013      	movs	r3, r2
1000d4b4:	e7e7      	b.n	1000d486 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
1000d4b6:	2b00      	cmp	r3, #0
1000d4b8:	d0f4      	beq.n	1000d4a4 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
1000d4ba:	2302      	movs	r3, #2
1000d4bc:	e7f1      	b.n	1000d4a2 <gpio_rpi_pin_interrupt_configure+0x46>

1000d4be <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
1000d4be:	b510      	push	{r4, lr}
1000d4c0:	2200      	movs	r2, #0
1000d4c2:	2103      	movs	r1, #3
1000d4c4:	200d      	movs	r0, #13
1000d4c6:	f7f6 fce1 	bl	10003e8c <z_arm_irq_priority_set>
1000d4ca:	200d      	movs	r0, #13
1000d4cc:	f7f6 fcd2 	bl	10003e74 <arch_irq_enable>
1000d4d0:	bd10      	pop	{r4, pc}

1000d4d2 <gpio_rpi_port_set_masked_raw>:
{
1000d4d2:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
1000d4d4:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
1000d4d6:	20d0      	movs	r0, #208	; 0xd0
1000d4d8:	0600      	lsls	r0, r0, #24
1000d4da:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
1000d4dc:	6925      	ldr	r5, [r4, #16]
1000d4de:	4053      	eors	r3, r2
1000d4e0:	400b      	ands	r3, r1
1000d4e2:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000d4e4:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
1000d4e6:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000d4e8:	6a03      	ldr	r3, [r0, #32]
1000d4ea:	4053      	eors	r3, r2
1000d4ec:	439d      	bics	r5, r3
1000d4ee:	002b      	movs	r3, r5
1000d4f0:	6925      	ldr	r5, [r4, #16]
1000d4f2:	401d      	ands	r5, r3
1000d4f4:	6963      	ldr	r3, [r4, #20]
1000d4f6:	402b      	ands	r3, r5
1000d4f8:	62c3      	str	r3, [r0, #44]	; 0x2c
1000d4fa:	6a03      	ldr	r3, [r0, #32]
1000d4fc:	405a      	eors	r2, r3
1000d4fe:	400a      	ands	r2, r1
1000d500:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
1000d502:	6963      	ldr	r3, [r4, #20]
1000d504:	4011      	ands	r1, r2
1000d506:	4399      	bics	r1, r3
1000d508:	62c1      	str	r1, [r0, #44]	; 0x2c
}
1000d50a:	2000      	movs	r0, #0
1000d50c:	bd30      	pop	{r4, r5, pc}

1000d50e <gpio_rpi_configure>:
{
1000d50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d510:	0015      	movs	r5, r2
1000d512:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
1000d514:	2401      	movs	r4, #1
1000d516:	0952      	lsrs	r2, r2, #5
1000d518:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
1000d51a:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
1000d51c:	4021      	ands	r1, r4
1000d51e:	0038      	movs	r0, r7
1000d520:	4022      	ands	r2, r4
1000d522:	f7f8 f87f 	bl	10005624 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
1000d526:	2105      	movs	r1, #5
1000d528:	0038      	movs	r0, r7
1000d52a:	f7f8 f865 	bl	100055f8 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
1000d52e:	03ab      	lsls	r3, r5, #14
1000d530:	d525      	bpl.n	1000d57e <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
1000d532:	40bc      	lsls	r4, r7
1000d534:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
1000d536:	07a9      	lsls	r1, r5, #30
1000d538:	d515      	bpl.n	1000d566 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
1000d53a:	4322      	orrs	r2, r4
1000d53c:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
1000d53e:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
1000d540:	6971      	ldr	r1, [r6, #20]
1000d542:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
1000d544:	0768      	lsls	r0, r5, #29
1000d546:	d507      	bpl.n	1000d558 <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
1000d548:	4321      	orrs	r1, r4
1000d54a:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
1000d54c:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
1000d54e:	036d      	lsls	r5, r5, #13
1000d550:	d507      	bpl.n	1000d562 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
1000d552:	6254      	str	r4, [r2, #36]	; 0x24
}
1000d554:	2000      	movs	r0, #0
1000d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
1000d558:	43a1      	bics	r1, r4
1000d55a:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
1000d55c:	6154      	str	r4, [r2, #20]
    if (out)
1000d55e:	032d      	lsls	r5, r5, #12
1000d560:	d4f7      	bmi.n	1000d552 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
1000d562:	6294      	str	r4, [r2, #40]	; 0x28
}
1000d564:	e7f6      	b.n	1000d554 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
1000d566:	43a2      	bics	r2, r4
1000d568:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
1000d56a:	22d0      	movs	r2, #208	; 0xd0
1000d56c:	0612      	lsls	r2, r2, #24
1000d56e:	0329      	lsls	r1, r5, #12
1000d570:	d501      	bpl.n	1000d576 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
1000d572:	6154      	str	r4, [r2, #20]
}
1000d574:	e7ed      	b.n	1000d552 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000d576:	036d      	lsls	r5, r5, #13
1000d578:	d5eb      	bpl.n	1000d552 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
1000d57a:	6194      	str	r4, [r2, #24]
}
1000d57c:	e7e9      	b.n	1000d552 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
1000d57e:	03ed      	lsls	r5, r5, #15
1000d580:	d5e8      	bpl.n	1000d554 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
1000d582:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
1000d584:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
1000d586:	0612      	lsls	r2, r2, #24
1000d588:	e7eb      	b.n	1000d562 <gpio_rpi_configure+0x54>

1000d58a <i2c_dw_runtime_configure>:
{
1000d58a:	b570      	push	{r4, r5, r6, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d58c:	6843      	ldr	r3, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
1000d58e:	6902      	ldr	r2, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d590:	681c      	ldr	r4, [r3, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000d592:	2307      	movs	r3, #7
1000d594:	0848      	lsrs	r0, r1, #1
	dw->app_config = config;
1000d596:	62d1      	str	r1, [r2, #44]	; 0x2c
	switch (I2C_SPEED_GET(dw->app_config)) {
1000d598:	4003      	ands	r3, r0
1000d59a:	0745      	lsls	r5, r0, #29
1000d59c:	d407      	bmi.n	1000d5ae <i2c_dw_runtime_configure+0x24>
1000d59e:	2506      	movs	r5, #6
1000d5a0:	4228      	tst	r0, r5
1000d5a2:	d124      	bne.n	1000d5ee <i2c_dw_runtime_configure+0x64>
1000d5a4:	2b01      	cmp	r3, #1
1000d5a6:	d00c      	beq.n	1000d5c2 <i2c_dw_runtime_configure+0x38>
1000d5a8:	2016      	movs	r0, #22
1000d5aa:	4240      	negs	r0, r0
1000d5ac:	e031      	b.n	1000d612 <i2c_dw_runtime_configure+0x88>
1000d5ae:	2b04      	cmp	r3, #4
1000d5b0:	d1fa      	bne.n	1000d5a8 <i2c_dw_runtime_configure+0x1e>
		if (dw->support_hs_mode) {
1000d5b2:	0013      	movs	r3, r2
1000d5b4:	3343      	adds	r3, #67	; 0x43
1000d5b6:	781b      	ldrb	r3, [r3, #0]
1000d5b8:	2b00      	cmp	r3, #0
1000d5ba:	d0f5      	beq.n	1000d5a8 <i2c_dw_runtime_configure+0x1e>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
1000d5bc:	0020      	movs	r0, r4
1000d5be:	30a4      	adds	r0, #164	; 0xa4
1000d5c0:	e017      	b.n	1000d5f2 <i2c_dw_runtime_configure+0x68>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
1000d5c2:	0020      	movs	r0, r4
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
1000d5c4:	26fa      	movs	r6, #250	; 0xfa
1000d5c6:	30a0      	adds	r0, #160	; 0xa0
	return *(volatile uint32_t *)addr;
1000d5c8:	6805      	ldr	r5, [r0, #0]
1000d5ca:	0076      	lsls	r6, r6, #1
1000d5cc:	3507      	adds	r5, #7
			value = I2C_STD_LCNT;
1000d5ce:	0033      	movs	r3, r6
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
1000d5d0:	42b5      	cmp	r5, r6
1000d5d2:	d301      	bcc.n	1000d5d8 <i2c_dw_runtime_configure+0x4e>
1000d5d4:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
1000d5d6:	3308      	adds	r3, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000d5d8:	26c8      	movs	r6, #200	; 0xc8
		dw->lcnt = value;
1000d5da:	87d3      	strh	r3, [r2, #62]	; 0x3e
1000d5dc:	6805      	ldr	r5, [r0, #0]
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000d5de:	0076      	lsls	r6, r6, #1
1000d5e0:	3505      	adds	r5, #5
			value = I2C_STD_HCNT;
1000d5e2:	0033      	movs	r3, r6
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000d5e4:	42b5      	cmp	r5, r6
1000d5e6:	d311      	bcc.n	1000d60c <i2c_dw_runtime_configure+0x82>
1000d5e8:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 6;
1000d5ea:	3306      	adds	r3, #6
1000d5ec:	e00e      	b.n	1000d60c <i2c_dw_runtime_configure+0x82>
1000d5ee:	0020      	movs	r0, r4
1000d5f0:	30a0      	adds	r0, #160	; 0xa0
1000d5f2:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_LCNT;
1000d5f4:	2357      	movs	r3, #87	; 0x57
		if (I2C_FS_LCNT <= (read_fs_spklen(reg_base) + 7)) {
1000d5f6:	3507      	adds	r5, #7
1000d5f8:	2d56      	cmp	r5, #86	; 0x56
1000d5fa:	d901      	bls.n	1000d600 <i2c_dw_runtime_configure+0x76>
1000d5fc:	6803      	ldr	r3, [r0, #0]
			value = read_fs_spklen(reg_base) + 8;
1000d5fe:	3308      	adds	r3, #8
		dw->lcnt = value;
1000d600:	87d3      	strh	r3, [r2, #62]	; 0x3e
1000d602:	6805      	ldr	r5, [r0, #0]
			value = I2C_FS_HCNT;
1000d604:	234b      	movs	r3, #75	; 0x4b
		if (I2C_FS_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000d606:	3505      	adds	r5, #5
1000d608:	2d4a      	cmp	r5, #74	; 0x4a
1000d60a:	d8ed      	bhi.n	1000d5e8 <i2c_dw_runtime_configure+0x5e>
	uint32_t	rc = 0U;
1000d60c:	2000      	movs	r0, #0
		dw->hcnt = value;
1000d60e:	b29b      	uxth	r3, r3
1000d610:	8793      	strh	r3, [r2, #60]	; 0x3c
1000d612:	6c23      	ldr	r3, [r4, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
1000d614:	2310      	movs	r3, #16
1000d616:	430b      	orrs	r3, r1
1000d618:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000d61a:	bd70      	pop	{r4, r5, r6, pc}

1000d61c <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
1000d61c:	b510      	push	{r4, lr}
1000d61e:	2200      	movs	r2, #0
1000d620:	2103      	movs	r1, #3
1000d622:	2017      	movs	r0, #23
1000d624:	f7f6 fc32 	bl	10003e8c <z_arm_irq_priority_set>
1000d628:	2017      	movs	r0, #23
1000d62a:	f7f6 fc23 	bl	10003e74 <arch_irq_enable>
1000d62e:	bd10      	pop	{r4, pc}

1000d630 <i2c_dw_isr>:
{
1000d630:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d632:	6843      	ldr	r3, [r0, #4]
{
1000d634:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d636:	681b      	ldr	r3, [r3, #0]
{
1000d638:	4684      	mov	ip, r0
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d63a:	9301      	str	r3, [sp, #4]
1000d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	struct i2c_dw_dev_config * const dw = port->data;
1000d63e:	6902      	ldr	r2, [r0, #16]
1000d640:	9302      	str	r3, [sp, #8]
1000d642:	9b01      	ldr	r3, [sp, #4]
1000d644:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
1000d646:	07db      	lsls	r3, r3, #31
1000d648:	d50f      	bpl.n	1000d66a <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
1000d64a:	214b      	movs	r1, #75	; 0x4b
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
1000d64c:	9802      	ldr	r0, [sp, #8]
1000d64e:	2304      	movs	r3, #4
1000d650:	4208      	tst	r0, r1
1000d652:	d00c      	beq.n	1000d66e <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
1000d654:	3240      	adds	r2, #64	; 0x40
1000d656:	7013      	strb	r3, [r2, #0]
	struct i2c_dw_dev_config * const dw = dev->data;
1000d658:	4663      	mov	r3, ip
	*(volatile uint32_t *)addr = data;
1000d65a:	2200      	movs	r2, #0
1000d65c:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d65e:	685b      	ldr	r3, [r3, #4]
1000d660:	681b      	ldr	r3, [r3, #0]
1000d662:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
1000d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000d666:	f7f8 fb83 	bl	10005d70 <z_impl_k_sem_give>
}
1000d66a:	b005      	add	sp, #20
1000d66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
1000d66e:	4669      	mov	r1, sp
1000d670:	9802      	ldr	r0, [sp, #8]
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
1000d672:	2408      	movs	r4, #8
1000d674:	7a09      	ldrb	r1, [r1, #8]
		if (intr_stat.bits.rx_full) {
1000d676:	4218      	tst	r0, r3
1000d678:	d116      	bne.n	1000d6a8 <i2c_dw_isr+0x78>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000d67a:	0013      	movs	r3, r2
1000d67c:	3342      	adds	r3, #66	; 0x42
1000d67e:	7818      	ldrb	r0, [r3, #0]
1000d680:	07c0      	lsls	r0, r0, #31
1000d682:	d505      	bpl.n	1000d690 <i2c_dw_isr+0x60>
	uint32_t temp = *(volatile uint32_t *)addr;
1000d684:	9801      	ldr	r0, [sp, #4]
1000d686:	6b04      	ldr	r4, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000d688:	2010      	movs	r0, #16
1000d68a:	4320      	orrs	r0, r4
1000d68c:	9c01      	ldr	r4, [sp, #4]
1000d68e:	6320      	str	r0, [r4, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
1000d690:	2410      	movs	r4, #16
1000d692:	4221      	tst	r1, r4
1000d694:	d125      	bne.n	1000d6e2 <i2c_dw_isr+0xb2>
		if (intr_stat.bits.stop_det) {
1000d696:	9b02      	ldr	r3, [sp, #8]
1000d698:	059b      	lsls	r3, r3, #22
1000d69a:	d5e6      	bpl.n	1000d66a <i2c_dw_isr+0x3a>
1000d69c:	9b01      	ldr	r3, [sp, #4]
1000d69e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
1000d6a0:	e7da      	b.n	1000d658 <i2c_dw_isr+0x28>
	if (dw->xfr_len == 0U) {
1000d6a2:	2b00      	cmp	r3, #0
1000d6a4:	d1e9      	bne.n	1000d67a <i2c_dw_isr+0x4a>
1000d6a6:	e015      	b.n	1000d6d4 <i2c_dw_isr+0xa4>
	uint32_t temp = *(volatile uint32_t *)addr;
1000d6a8:	9b01      	ldr	r3, [sp, #4]
1000d6aa:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
1000d6ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
1000d6ae:	4220      	tst	r0, r4
1000d6b0:	d0f7      	beq.n	1000d6a2 <i2c_dw_isr+0x72>
1000d6b2:	2b00      	cmp	r3, #0
1000d6b4:	d00e      	beq.n	1000d6d4 <i2c_dw_isr+0xa4>
1000d6b6:	9b01      	ldr	r3, [sp, #4]
1000d6b8:	6918      	ldr	r0, [r3, #16]
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
1000d6ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
1000d6bc:	7018      	strb	r0, [r3, #0]
		dw->xfr_buf++;
1000d6be:	6b13      	ldr	r3, [r2, #48]	; 0x30
		dw->rx_pending--;
1000d6c0:	6b90      	ldr	r0, [r2, #56]	; 0x38
		dw->xfr_buf++;
1000d6c2:	3301      	adds	r3, #1
1000d6c4:	6313      	str	r3, [r2, #48]	; 0x30
		dw->xfr_len--;
1000d6c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
		dw->rx_pending--;
1000d6c8:	3801      	subs	r0, #1
		dw->xfr_len--;
1000d6ca:	3b01      	subs	r3, #1
1000d6cc:	6353      	str	r3, [r2, #52]	; 0x34
		dw->rx_pending--;
1000d6ce:	6390      	str	r0, [r2, #56]	; 0x38
		if (dw->xfr_len == 0U) {
1000d6d0:	2b00      	cmp	r3, #0
1000d6d2:	d1e9      	bne.n	1000d6a8 <i2c_dw_isr+0x78>
		dw->state &= ~I2C_DW_CMD_RECV;
1000d6d4:	0010      	movs	r0, r2
1000d6d6:	2402      	movs	r4, #2
1000d6d8:	3040      	adds	r0, #64	; 0x40
1000d6da:	7803      	ldrb	r3, [r0, #0]
1000d6dc:	43a3      	bics	r3, r4
1000d6de:	7003      	strb	r3, [r0, #0]
		return;
1000d6e0:	e7cb      	b.n	1000d67a <i2c_dw_isr+0x4a>
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000d6e2:	7819      	ldrb	r1, [r3, #0]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d6e4:	4660      	mov	r0, ip
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000d6e6:	9103      	str	r1, [sp, #12]
1000d6e8:	2501      	movs	r5, #1
	struct i2c_dw_dev_config * const dw = dev->data;
1000d6ea:	4661      	mov	r1, ip
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d6ec:	6840      	ldr	r0, [r0, #4]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000d6ee:	9e03      	ldr	r6, [sp, #12]
	struct i2c_dw_dev_config * const dw = dev->data;
1000d6f0:	6909      	ldr	r1, [r1, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000d6f2:	6800      	ldr	r0, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000d6f4:	422e      	tst	r6, r5
1000d6f6:	d141      	bne.n	1000d77c <i2c_dw_isr+0x14c>
	if (dw->xfr_len == 0U) {
1000d6f8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
1000d6fa:	2e00      	cmp	r6, #0
1000d6fc:	d134      	bne.n	1000d768 <i2c_dw_isr+0x138>
	uint32_t temp = *(volatile uint32_t *)addr;
1000d6fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
1000d700:	3140      	adds	r1, #64	; 0x40
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000d702:	43a6      	bics	r6, r4
1000d704:	6306      	str	r6, [r0, #48]	; 0x30
1000d706:	7808      	ldrb	r0, [r1, #0]
1000d708:	43a8      	bics	r0, r5
1000d70a:	7008      	strb	r0, [r1, #0]
			if (((dw->xfr_len == 0U)
1000d70c:	6b52      	ldr	r2, [r2, #52]	; 0x34
1000d70e:	2a00      	cmp	r2, #0
1000d710:	d1c1      	bne.n	1000d696 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
1000d712:	781b      	ldrb	r3, [r3, #0]
1000d714:	079b      	lsls	r3, r3, #30
1000d716:	d4be      	bmi.n	1000d696 <i2c_dw_isr+0x66>
1000d718:	e79e      	b.n	1000d658 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
1000d71a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
1000d71c:	2d00      	cmp	r5, #0
1000d71e:	d027      	beq.n	1000d770 <i2c_dw_isr+0x140>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000d720:	000e      	movs	r6, r1
1000d722:	2704      	movs	r7, #4
1000d724:	3642      	adds	r6, #66	; 0x42
		data = dw->xfr_buf[0];
1000d726:	6b0b      	ldr	r3, [r1, #48]	; 0x30
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000d728:	7834      	ldrb	r4, [r6, #0]
		data = dw->xfr_buf[0];
1000d72a:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000d72c:	423c      	tst	r4, r7
1000d72e:	d005      	beq.n	1000d73c <i2c_dw_isr+0x10c>
			data |= IC_DATA_CMD_RESTART;
1000d730:	2780      	movs	r7, #128	; 0x80
1000d732:	00ff      	lsls	r7, r7, #3
1000d734:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
1000d736:	2704      	movs	r7, #4
1000d738:	43bc      	bics	r4, r7
1000d73a:	7034      	strb	r4, [r6, #0]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
1000d73c:	2d01      	cmp	r5, #1
1000d73e:	d108      	bne.n	1000d752 <i2c_dw_isr+0x122>
1000d740:	000c      	movs	r4, r1
1000d742:	3442      	adds	r4, #66	; 0x42
1000d744:	7824      	ldrb	r4, [r4, #0]
1000d746:	3501      	adds	r5, #1
1000d748:	422c      	tst	r4, r5
1000d74a:	d002      	beq.n	1000d752 <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
1000d74c:	2480      	movs	r4, #128	; 0x80
1000d74e:	00a4      	lsls	r4, r4, #2
1000d750:	4323      	orrs	r3, r4
	*(volatile uint32_t *)addr = data;
1000d752:	6103      	str	r3, [r0, #16]
		dw->xfr_len--;
1000d754:	6b4b      	ldr	r3, [r1, #52]	; 0x34
1000d756:	3b01      	subs	r3, #1
1000d758:	634b      	str	r3, [r1, #52]	; 0x34
		dw->xfr_buf++;
1000d75a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
1000d75c:	3301      	adds	r3, #1
1000d75e:	630b      	str	r3, [r1, #48]	; 0x30
	uint32_t temp = *(volatile uint32_t *)addr;
1000d760:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
1000d762:	065b      	lsls	r3, r3, #25
1000d764:	d500      	bpl.n	1000d768 <i2c_dw_isr+0x138>
1000d766:	e777      	b.n	1000d658 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
1000d768:	2402      	movs	r4, #2
1000d76a:	6f03      	ldr	r3, [r0, #112]	; 0x70
1000d76c:	4223      	tst	r3, r4
1000d76e:	d1d4      	bne.n	1000d71a <i2c_dw_isr+0xea>
			if (((dw->xfr_len == 0U)
1000d770:	6b53      	ldr	r3, [r2, #52]	; 0x34
1000d772:	2b00      	cmp	r3, #0
1000d774:	d18f      	bne.n	1000d696 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
1000d776:	3242      	adds	r2, #66	; 0x42
1000d778:	7813      	ldrb	r3, [r2, #0]
1000d77a:	e7cb      	b.n	1000d714 <i2c_dw_isr+0xe4>
	if (dw->request_bytes == 0U) {
1000d77c:	000d      	movs	r5, r1
1000d77e:	3541      	adds	r5, #65	; 0x41
1000d780:	782e      	ldrb	r6, [r5, #0]
1000d782:	2e00      	cmp	r6, #0
1000d784:	d103      	bne.n	1000d78e <i2c_dw_isr+0x15e>
	uint32_t temp = *(volatile uint32_t *)addr;
1000d786:	6b01      	ldr	r1, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000d788:	43a1      	bics	r1, r4
1000d78a:	6301      	str	r1, [r0, #48]	; 0x30
1000d78c:	e7be      	b.n	1000d70c <i2c_dw_isr+0xdc>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
1000d78e:	0003      	movs	r3, r0
1000d790:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
1000d792:	681b      	ldr	r3, [r3, #0]
1000d794:	6f85      	ldr	r5, [r0, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000d796:	041c      	lsls	r4, r3, #16
1000d798:	0e24      	lsrs	r4, r4, #24
1000d79a:	3401      	adds	r4, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
1000d79c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000d79e:	b2e4      	uxtb	r4, r4
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
1000d7a0:	1b65      	subs	r5, r4, r5
1000d7a2:	1bed      	subs	r5, r5, r7
1000d7a4:	b2ef      	uxtb	r7, r5
	if (rx_empty < 0) {
1000d7a6:	062d      	lsls	r5, r5, #24
1000d7a8:	d505      	bpl.n	1000d7b6 <i2c_dw_isr+0x186>
			if (((dw->xfr_len == 0U)
1000d7aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
1000d7ac:	2b00      	cmp	r3, #0
1000d7ae:	d000      	beq.n	1000d7b2 <i2c_dw_isr+0x182>
1000d7b0:	e771      	b.n	1000d696 <i2c_dw_isr+0x66>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
1000d7b2:	9b03      	ldr	r3, [sp, #12]
1000d7b4:	e7ae      	b.n	1000d714 <i2c_dw_isr+0xe4>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
1000d7b6:	021b      	lsls	r3, r3, #8
1000d7b8:	6f45      	ldr	r5, [r0, #116]	; 0x74
1000d7ba:	0e1b      	lsrs	r3, r3, #24
1000d7bc:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
1000d7be:	1b5b      	subs	r3, r3, r5
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
1000d7c0:	b2db      	uxtb	r3, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
1000d7c2:	1c35      	adds	r5, r6, #0
1000d7c4:	42a6      	cmp	r6, r4
1000d7c6:	d900      	bls.n	1000d7ca <i2c_dw_isr+0x19a>
1000d7c8:	1c25      	adds	r5, r4, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
1000d7ca:	b2ed      	uxtb	r5, r5
1000d7cc:	42ab      	cmp	r3, r5
1000d7ce:	dd00      	ble.n	1000d7d2 <i2c_dw_isr+0x1a2>
1000d7d0:	002b      	movs	r3, r5
1000d7d2:	42bb      	cmp	r3, r7
1000d7d4:	dd00      	ble.n	1000d7d8 <i2c_dw_isr+0x1a8>
1000d7d6:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000d7d8:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
1000d7da:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
1000d7dc:	2b00      	cmp	r3, #0
1000d7de:	d0c7      	beq.n	1000d770 <i2c_dw_isr+0x140>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000d7e0:	000d      	movs	r5, r1
1000d7e2:	3542      	adds	r5, #66	; 0x42
1000d7e4:	782c      	ldrb	r4, [r5, #0]
1000d7e6:	4234      	tst	r4, r6
1000d7e8:	d01f      	beq.n	1000d82a <i2c_dw_isr+0x1fa>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
1000d7ea:	43b4      	bics	r4, r6
1000d7ec:	702c      	strb	r4, [r5, #0]
			data |= IC_DATA_CMD_RESTART;
1000d7ee:	24a0      	movs	r4, #160	; 0xa0
1000d7f0:	00e4      	lsls	r4, r4, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
1000d7f2:	2702      	movs	r7, #2
1000d7f4:	782d      	ldrb	r5, [r5, #0]
1000d7f6:	423d      	tst	r5, r7
1000d7f8:	d007      	beq.n	1000d80a <i2c_dw_isr+0x1da>
		    && (dw->request_bytes == 1U)) {
1000d7fa:	000d      	movs	r5, r1
1000d7fc:	3541      	adds	r5, #65	; 0x41
1000d7fe:	782d      	ldrb	r5, [r5, #0]
1000d800:	2d01      	cmp	r5, #1
1000d802:	d102      	bne.n	1000d80a <i2c_dw_isr+0x1da>
			data |= IC_DATA_CMD_STOP;
1000d804:	2580      	movs	r5, #128	; 0x80
1000d806:	00ad      	lsls	r5, r5, #2
1000d808:	432c      	orrs	r4, r5
1000d80a:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
1000d80c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		cnt--;
1000d80e:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000d810:	43bd      	bics	r5, r7
1000d812:	6305      	str	r5, [r0, #48]	; 0x30
		dw->request_bytes--;
1000d814:	000d      	movs	r5, r1
	*(volatile uint32_t *)addr = data;
1000d816:	6104      	str	r4, [r0, #16]
		dw->rx_pending++;
1000d818:	6b8c      	ldr	r4, [r1, #56]	; 0x38
		dw->request_bytes--;
1000d81a:	3541      	adds	r5, #65	; 0x41
		dw->rx_pending++;
1000d81c:	3401      	adds	r4, #1
1000d81e:	638c      	str	r4, [r1, #56]	; 0x38
		dw->request_bytes--;
1000d820:	782c      	ldrb	r4, [r5, #0]
		cnt--;
1000d822:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
1000d824:	3c01      	subs	r4, #1
1000d826:	702c      	strb	r4, [r5, #0]
		cnt--;
1000d828:	e7d8      	b.n	1000d7dc <i2c_dw_isr+0x1ac>
		data = IC_DATA_CMD_CMD;
1000d82a:	2480      	movs	r4, #128	; 0x80
1000d82c:	0064      	lsls	r4, r4, #1
1000d82e:	e7e0      	b.n	1000d7f2 <i2c_dw_isr+0x1c2>

1000d830 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000d830:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
1000d832:	6803      	ldr	r3, [r0, #0]
1000d834:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
1000d836:	7905      	ldrb	r5, [r0, #4]
1000d838:	6804      	ldr	r4, [r0, #0]
1000d83a:	00ed      	lsls	r5, r5, #3
1000d83c:	1964      	adds	r4, r4, r5
1000d83e:	42a3      	cmp	r3, r4
1000d840:	d302      	bcc.n	1000d848 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
1000d842:	2002      	movs	r0, #2
1000d844:	4240      	negs	r0, r0
}
1000d846:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
1000d848:	795c      	ldrb	r4, [r3, #5]
1000d84a:	428c      	cmp	r4, r1
1000d84c:	d001      	beq.n	1000d852 <pinctrl_lookup_state+0x22>
		(*state)++;
1000d84e:	3308      	adds	r3, #8
1000d850:	e7f0      	b.n	1000d834 <pinctrl_lookup_state+0x4>
			return 0;
1000d852:	2000      	movs	r0, #0
1000d854:	e7f7      	b.n	1000d846 <pinctrl_lookup_state+0x16>

1000d856 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
1000d856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d858:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000d85a:	2601      	movs	r6, #1
1000d85c:	008d      	lsls	r5, r1, #2
1000d85e:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000d860:	42ac      	cmp	r4, r5
1000d862:	d101      	bne.n	1000d868 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
1000d864:	2000      	movs	r0, #0
1000d866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
1000d868:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
1000d86a:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
1000d86c:	06c0      	lsls	r0, r0, #27
1000d86e:	0ec0      	lsrs	r0, r0, #27
1000d870:	f000 f987 	bl	1000db82 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
1000d874:	8821      	ldrh	r1, [r4, #0]
1000d876:	7820      	ldrb	r0, [r4, #0]
1000d878:	05c9      	lsls	r1, r1, #23
1000d87a:	06c0      	lsls	r0, r0, #27
1000d87c:	0f09      	lsrs	r1, r1, #28
1000d87e:	0ec0      	lsrs	r0, r0, #27
1000d880:	f7f7 feba 	bl	100055f8 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
1000d884:	7861      	ldrb	r1, [r4, #1]
1000d886:	7820      	ldrb	r0, [r4, #0]
1000d888:	09ca      	lsrs	r2, r1, #7
1000d88a:	06c0      	lsls	r0, r0, #27
1000d88c:	0649      	lsls	r1, r1, #25
1000d88e:	0fc9      	lsrs	r1, r1, #31
1000d890:	0ec0      	lsrs	r0, r0, #27
1000d892:	f7f7 fec7 	bl	10005624 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
1000d896:	7861      	ldrb	r1, [r4, #1]
1000d898:	7820      	ldrb	r0, [r4, #0]
1000d89a:	06c9      	lsls	r1, r1, #27
1000d89c:	06c0      	lsls	r0, r0, #27
1000d89e:	0f09      	lsrs	r1, r1, #28
1000d8a0:	0ec0      	lsrs	r0, r0, #27
1000d8a2:	f7f7 feed 	bl	10005680 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000d8a6:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000d8a8:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000d8aa:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000d8ac:	06c0      	lsls	r0, r0, #27
1000d8ae:	4031      	ands	r1, r6
1000d8b0:	0ec0      	lsrs	r0, r0, #27
1000d8b2:	f7f7 fed7 	bl	10005664 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
1000d8b6:	78a1      	ldrb	r1, [r4, #2]
1000d8b8:	7820      	ldrb	r0, [r4, #0]
1000d8ba:	0789      	lsls	r1, r1, #30
1000d8bc:	06c0      	lsls	r0, r0, #27
1000d8be:	0fc9      	lsrs	r1, r1, #31
1000d8c0:	0ec0      	lsrs	r0, r0, #27
1000d8c2:	f7f7 fec1 	bl	10005648 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
1000d8c6:	78a1      	ldrb	r1, [r4, #2]
1000d8c8:	7820      	ldrb	r0, [r4, #0]
1000d8ca:	07c9      	lsls	r1, r1, #31
1000d8cc:	06c0      	lsls	r0, r0, #27
1000d8ce:	0fc9      	lsrs	r1, r1, #31
1000d8d0:	0ec0      	lsrs	r0, r0, #27
1000d8d2:	f7f7 ff13 	bl	100056fc <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
1000d8d6:	003c      	movs	r4, r7
1000d8d8:	e7c2      	b.n	1000d860 <pinctrl_configure_pins+0xa>

1000d8da <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
1000d8da:	2000      	movs	r0, #0
1000d8dc:	4770      	bx	lr

1000d8de <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
1000d8de:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
1000d8e0:	7900      	ldrb	r0, [r0, #4]
1000d8e2:	2802      	cmp	r0, #2
1000d8e4:	d009      	beq.n	1000d8fa <reset_rpi_read_register.isra.0+0x1c>
1000d8e6:	2804      	cmp	r0, #4
1000d8e8:	d00b      	beq.n	1000d902 <reset_rpi_read_register.isra.0+0x24>
1000d8ea:	2801      	cmp	r0, #1
1000d8ec:	d10c      	bne.n	1000d908 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
1000d8ee:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
1000d8f0:	780b      	ldrb	r3, [r1, #0]
1000d8f2:	b2db      	uxtb	r3, r3
	return 0;
1000d8f4:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
1000d8f6:	6013      	str	r3, [r2, #0]
}
1000d8f8:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
1000d8fa:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
1000d8fc:	880b      	ldrh	r3, [r1, #0]
1000d8fe:	b29b      	uxth	r3, r3
		break;
1000d900:	e7f8      	b.n	1000d8f4 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
1000d902:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
1000d904:	680b      	ldr	r3, [r1, #0]
		break;
1000d906:	e7f5      	b.n	1000d8f4 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
1000d908:	2016      	movs	r0, #22
1000d90a:	4240      	negs	r0, r0
1000d90c:	e7f4      	b.n	1000d8f8 <reset_rpi_read_register.isra.0+0x1a>

1000d90e <reset_rpi_update>:
{
1000d90e:	0003      	movs	r3, r0
1000d910:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d912:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
1000d914:	685f      	ldr	r7, [r3, #4]
{
1000d916:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
1000d918:	793e      	ldrb	r6, [r7, #4]
{
1000d91a:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000d91c:	00f1      	lsls	r1, r6, #3
1000d91e:	f7f2 fc93 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000d922:	aa03      	add	r2, sp, #12
1000d924:	0004      	movs	r4, r0
1000d926:	000d      	movs	r5, r1
1000d928:	b281      	uxth	r1, r0
1000d92a:	0038      	movs	r0, r7
1000d92c:	f7ff ffd7 	bl	1000d8de <reset_rpi_read_register.isra.0>
	if (ret) {
1000d930:	2800      	cmp	r0, #0
1000d932:	d117      	bne.n	1000d964 <reset_rpi_update+0x56>
		value |= BIT(regbit);
1000d934:	2201      	movs	r2, #1
1000d936:	9903      	ldr	r1, [sp, #12]
1000d938:	b2ed      	uxtb	r5, r5
1000d93a:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
1000d93c:	000b      	movs	r3, r1
		value |= BIT(regbit);
1000d93e:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
1000d940:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
1000d942:	797d      	ldrb	r5, [r7, #5]
1000d944:	9a01      	ldr	r2, [sp, #4]
1000d946:	4295      	cmp	r5, r2
1000d948:	d001      	beq.n	1000d94e <reset_rpi_update+0x40>
		value |= BIT(regbit);
1000d94a:	4663      	mov	r3, ip
1000d94c:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
1000d94e:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
1000d950:	2e02      	cmp	r6, #2
1000d952:	d009      	beq.n	1000d968 <reset_rpi_update+0x5a>
1000d954:	2e04      	cmp	r6, #4
1000d956:	d00c      	beq.n	1000d972 <reset_rpi_update+0x64>
1000d958:	2e01      	cmp	r6, #1
1000d95a:	d10e      	bne.n	1000d97a <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
1000d95c:	b2a4      	uxth	r4, r4
1000d95e:	b2db      	uxtb	r3, r3
1000d960:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
1000d962:	7023      	strb	r3, [r4, #0]
}
1000d964:	b005      	add	sp, #20
1000d966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
1000d968:	b2a4      	uxth	r4, r4
1000d96a:	b29b      	uxth	r3, r3
1000d96c:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
1000d96e:	8023      	strh	r3, [r4, #0]
}
1000d970:	e7f8      	b.n	1000d964 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
1000d972:	b2a4      	uxth	r4, r4
1000d974:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
1000d976:	6023      	str	r3, [r4, #0]
}
1000d978:	e7f4      	b.n	1000d964 <reset_rpi_update+0x56>
	switch (config->reg_width) {
1000d97a:	2016      	movs	r0, #22
1000d97c:	4240      	negs	r0, r0
1000d97e:	e7f1      	b.n	1000d964 <reset_rpi_update+0x56>

1000d980 <reset_rpi_line_assert>:
{
1000d980:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
1000d982:	2201      	movs	r2, #1
1000d984:	f7ff ffc3 	bl	1000d90e <reset_rpi_update>
}
1000d988:	bd10      	pop	{r4, pc}

1000d98a <reset_rpi_line_deassert>:
{
1000d98a:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
1000d98c:	2200      	movs	r2, #0
1000d98e:	f7ff ffbe 	bl	1000d90e <reset_rpi_update>
}
1000d992:	bd10      	pop	{r4, pc}

1000d994 <reset_rpi_line_toggle>:
{
1000d994:	b570      	push	{r4, r5, r6, lr}
1000d996:	0004      	movs	r4, r0
1000d998:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
1000d99a:	f7ff fff1 	bl	1000d980 <reset_rpi_line_assert>
	if (ret) {
1000d99e:	2800      	cmp	r0, #0
1000d9a0:	d103      	bne.n	1000d9aa <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
1000d9a2:	0029      	movs	r1, r5
1000d9a4:	0020      	movs	r0, r4
1000d9a6:	f7ff fff0 	bl	1000d98a <reset_rpi_line_deassert>
}
1000d9aa:	bd70      	pop	{r4, r5, r6, pc}

1000d9ac <reset_rpi_status>:
{
1000d9ac:	0003      	movs	r3, r0
1000d9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
1000d9b0:	685e      	ldr	r6, [r3, #4]
{
1000d9b2:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000d9b4:	7931      	ldrb	r1, [r6, #4]
{
1000d9b6:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000d9b8:	00c9      	lsls	r1, r1, #3
1000d9ba:	f7f2 fc45 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000d9be:	aa01      	add	r2, sp, #4
1000d9c0:	000d      	movs	r5, r1
1000d9c2:	b281      	uxth	r1, r0
1000d9c4:	0030      	movs	r0, r6
1000d9c6:	f7ff ff8a 	bl	1000d8de <reset_rpi_read_register.isra.0>
	if (ret) {
1000d9ca:	2800      	cmp	r0, #0
1000d9cc:	d109      	bne.n	1000d9e2 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
1000d9ce:	9b01      	ldr	r3, [sp, #4]
1000d9d0:	b2ed      	uxtb	r5, r5
1000d9d2:	40eb      	lsrs	r3, r5
1000d9d4:	2201      	movs	r2, #1
1000d9d6:	439a      	bics	r2, r3
1000d9d8:	7973      	ldrb	r3, [r6, #5]
1000d9da:	4259      	negs	r1, r3
1000d9dc:	414b      	adcs	r3, r1
1000d9de:	4053      	eors	r3, r2
1000d9e0:	7023      	strb	r3, [r4, #0]
}
1000d9e2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

1000d9e4 <uart_rpi_poll_in>:
{
1000d9e4:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
1000d9e6:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000d9e8:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000d9ea:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000d9ec:	699c      	ldr	r4, [r3, #24]
1000d9ee:	0020      	movs	r0, r4
1000d9f0:	4010      	ands	r0, r2
1000d9f2:	4214      	tst	r4, r2
1000d9f4:	d102      	bne.n	1000d9fc <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
1000d9f6:	681b      	ldr	r3, [r3, #0]
1000d9f8:	700b      	strb	r3, [r1, #0]
}
1000d9fa:	bd10      	pop	{r4, pc}
		return -1;
1000d9fc:	2001      	movs	r0, #1
1000d9fe:	4240      	negs	r0, r0
1000da00:	e7fb      	b.n	1000d9fa <uart_rpi_poll_in+0x16>

1000da02 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000da02:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000da04:	6843      	ldr	r3, [r0, #4]
1000da06:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000da08:	6998      	ldr	r0, [r3, #24]
1000da0a:	4210      	tst	r0, r2
1000da0c:	d1fc      	bne.n	1000da08 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
1000da0e:	6019      	str	r1, [r3, #0]
}
1000da10:	4770      	bx	lr

1000da12 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000da12:	6843      	ldr	r3, [r0, #4]
1000da14:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
1000da16:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
1000da18:	0518      	lsls	r0, r3, #20
1000da1a:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000da1c:	055a      	lsls	r2, r3, #21
1000da1e:	d501      	bpl.n	1000da24 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
1000da20:	2208      	movs	r2, #8
1000da22:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
1000da24:	059a      	lsls	r2, r3, #22
1000da26:	d501      	bpl.n	1000da2c <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
1000da28:	2202      	movs	r2, #2
1000da2a:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000da2c:	05db      	lsls	r3, r3, #23
1000da2e:	d501      	bpl.n	1000da34 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
1000da30:	2304      	movs	r3, #4
1000da32:	4318      	orrs	r0, r3
}
1000da34:	4770      	bx	lr

1000da36 <uart_rpi_fifo_fill>:
{
1000da36:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000da38:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000da3a:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000da3c:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000da3e:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000da40:	699c      	ldr	r4, [r3, #24]
1000da42:	422c      	tst	r4, r5
1000da44:	d102      	bne.n	1000da4c <uart_rpi_fifo_fill+0x16>
1000da46:	1a14      	subs	r4, r2, r0
1000da48:	2c00      	cmp	r4, #0
1000da4a:	dc00      	bgt.n	1000da4e <uart_rpi_fifo_fill+0x18>
}
1000da4c:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
1000da4e:	5c0c      	ldrb	r4, [r1, r0]
1000da50:	3001      	adds	r0, #1
1000da52:	601c      	str	r4, [r3, #0]
1000da54:	e7f4      	b.n	1000da40 <uart_rpi_fifo_fill+0xa>

1000da56 <uart_rpi_fifo_read>:
{
1000da56:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000da58:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000da5a:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000da5c:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
1000da5e:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000da60:	699c      	ldr	r4, [r3, #24]
1000da62:	422c      	tst	r4, r5
1000da64:	d102      	bne.n	1000da6c <uart_rpi_fifo_read+0x16>
1000da66:	1a14      	subs	r4, r2, r0
1000da68:	2c00      	cmp	r4, #0
1000da6a:	dc00      	bgt.n	1000da6e <uart_rpi_fifo_read+0x18>
}
1000da6c:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
1000da6e:	681c      	ldr	r4, [r3, #0]
1000da70:	540c      	strb	r4, [r1, r0]
1000da72:	3001      	adds	r0, #1
1000da74:	e7f4      	b.n	1000da60 <uart_rpi_fifo_read+0xa>

1000da76 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000da76:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000da78:	6843      	ldr	r3, [r0, #4]
1000da7a:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000da7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000da7e:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000da80:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000da82:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000da84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000da86:	438a      	bics	r2, r1
1000da88:	635a      	str	r2, [r3, #52]	; 0x34
}
1000da8a:	4770      	bx	lr

1000da8c <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000da8c:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000da8e:	6843      	ldr	r3, [r0, #4]
1000da90:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000da92:	6b93      	ldr	r3, [r2, #56]	; 0x38
1000da94:	438b      	bics	r3, r1
1000da96:	6393      	str	r3, [r2, #56]	; 0x38
}
1000da98:	4770      	bx	lr

1000da9a <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000da9a:	6843      	ldr	r3, [r0, #4]
1000da9c:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
1000da9e:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000daa0:	0680      	lsls	r0, r0, #26
1000daa2:	0fc0      	lsrs	r0, r0, #31
}
1000daa4:	4770      	bx	lr

1000daa6 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000daa6:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000daa8:	6843      	ldr	r3, [r0, #4]
1000daaa:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000daac:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000daae:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
1000dab0:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000dab2:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
1000dab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000dab6:	438a      	bics	r2, r1
1000dab8:	635a      	str	r2, [r3, #52]	; 0x34
}
1000daba:	4770      	bx	lr

1000dabc <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000dabc:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000dabe:	6843      	ldr	r3, [r0, #4]
1000dac0:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000dac2:	6b93      	ldr	r3, [r2, #56]	; 0x38
1000dac4:	438b      	bics	r3, r1
1000dac6:	6393      	str	r3, [r2, #56]	; 0x38
}
1000dac8:	4770      	bx	lr

1000daca <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000daca:	6843      	ldr	r3, [r0, #4]
1000dacc:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
1000dace:	6998      	ldr	r0, [r3, #24]
1000dad0:	0600      	lsls	r0, r0, #24
1000dad2:	0fc0      	lsrs	r0, r0, #31
}
1000dad4:	4770      	bx	lr

1000dad6 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000dad6:	6843      	ldr	r3, [r0, #4]
1000dad8:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
1000dada:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000dadc:	06c0      	lsls	r0, r0, #27
1000dade:	0fc0      	lsrs	r0, r0, #31
}
1000dae0:	4770      	bx	lr

1000dae2 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000dae2:	6843      	ldr	r3, [r0, #4]
1000dae4:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
1000dae6:	23f8      	movs	r3, #248	; 0xf8
1000dae8:	6b91      	ldr	r1, [r2, #56]	; 0x38
1000daea:	00db      	lsls	r3, r3, #3
1000daec:	430b      	orrs	r3, r1
1000daee:	6393      	str	r3, [r2, #56]	; 0x38
}
1000daf0:	4770      	bx	lr

1000daf2 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
1000daf2:	b510      	push	{r4, lr}
1000daf4:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
1000daf6:	f7ff ffee 	bl	1000dad6 <uart_rpi_irq_rx_ready>
1000dafa:	0003      	movs	r3, r0
1000dafc:	2001      	movs	r0, #1
1000dafe:	2b00      	cmp	r3, #0
1000db00:	d104      	bne.n	1000db0c <uart_rpi_irq_is_pending+0x1a>
1000db02:	0020      	movs	r0, r4
1000db04:	f7ff ffc9 	bl	1000da9a <uart_rpi_irq_tx_ready>
1000db08:	1e43      	subs	r3, r0, #1
1000db0a:	4198      	sbcs	r0, r3
}
1000db0c:	bd10      	pop	{r4, pc}

1000db0e <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
1000db0e:	2001      	movs	r0, #1
1000db10:	4770      	bx	lr

1000db12 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
1000db12:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
1000db14:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
1000db16:	60da      	str	r2, [r3, #12]
}
1000db18:	4770      	bx	lr

1000db1a <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
1000db1a:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
1000db1c:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
1000db1e:	6893      	ldr	r3, [r2, #8]
1000db20:	2b00      	cmp	r3, #0
1000db22:	d001      	beq.n	1000db28 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
1000db24:	68d1      	ldr	r1, [r2, #12]
1000db26:	4798      	blx	r3
	}
}
1000db28:	bd10      	pop	{r4, pc}

1000db2a <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
1000db2a:	b510      	push	{r4, lr}
1000db2c:	2200      	movs	r2, #0
1000db2e:	2103      	movs	r1, #3
1000db30:	2014      	movs	r0, #20
1000db32:	f7f6 f9ab 	bl	10003e8c <z_arm_irq_priority_set>
1000db36:	2014      	movs	r0, #20
1000db38:	f7f6 f99c 	bl	10003e74 <arch_irq_enable>
1000db3c:	bd10      	pop	{r4, pc}

1000db3e <uart_rpi_config_get>:
{
1000db3e:	0003      	movs	r3, r0
1000db40:	b510      	push	{r4, lr}
1000db42:	0008      	movs	r0, r1
1000db44:	2208      	movs	r2, #8
1000db46:	6919      	ldr	r1, [r3, #16]
1000db48:	f7f9 fd8c 	bl	10007664 <memcpy>
}
1000db4c:	2000      	movs	r0, #0
1000db4e:	bd10      	pop	{r4, pc}

1000db50 <uart_rpi_configure>:
{
1000db50:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
1000db52:	6843      	ldr	r3, [r0, #4]
{
1000db54:	0006      	movs	r6, r0
1000db56:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
1000db58:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
1000db5a:	6809      	ldr	r1, [r1, #0]
1000db5c:	6818      	ldr	r0, [r3, #0]
1000db5e:	f7f7 fddb 	bl	10005718 <uart_set_baudrate>
	if (baudrate == 0) {
1000db62:	2800      	cmp	r0, #0
1000db64:	d102      	bne.n	1000db6c <uart_rpi_configure+0x1c>
		return -EINVAL;
1000db66:	2016      	movs	r0, #22
1000db68:	4240      	negs	r0, r0
}
1000db6a:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
1000db6c:	79a3      	ldrb	r3, [r4, #6]
1000db6e:	7962      	ldrb	r2, [r4, #5]
1000db70:	7921      	ldrb	r1, [r4, #4]
1000db72:	6870      	ldr	r0, [r6, #4]
1000db74:	f7f7 fa38 	bl	10004fe8 <uart_rpi_set_format.isra.0>
1000db78:	2800      	cmp	r0, #0
1000db7a:	d1f4      	bne.n	1000db66 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
1000db7c:	cc06      	ldmia	r4!, {r1, r2}
1000db7e:	c506      	stmia	r5!, {r1, r2}
	return 0;
1000db80:	e7f3      	b.n	1000db6a <uart_rpi_configure+0x1a>

1000db82 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000db82:	2301      	movs	r3, #1
1000db84:	22d0      	movs	r2, #208	; 0xd0
1000db86:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
1000db88:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000db8a:	0612      	lsls	r2, r2, #24
1000db8c:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000db8e:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
1000db90:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000db92:	f7f7 fd31 	bl	100055f8 <gpio_set_function>
}
1000db96:	bd10      	pop	{r4, pc}

1000db98 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
1000db98:	4770      	bx	lr

1000db9a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
1000db9a:	2800      	cmp	r0, #0
1000db9c:	d009      	beq.n	1000dbb2 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
1000db9e:	2301      	movs	r3, #1
1000dba0:	68c2      	ldr	r2, [r0, #12]
1000dba2:	2000      	movs	r0, #0
1000dba4:	7851      	ldrb	r1, [r2, #1]
1000dba6:	4219      	tst	r1, r3
1000dba8:	d002      	beq.n	1000dbb0 <z_device_is_ready+0x16>
1000dbaa:	7810      	ldrb	r0, [r2, #0]
1000dbac:	4242      	negs	r2, r0
1000dbae:	4150      	adcs	r0, r2
1000dbb0:	4018      	ands	r0, r3
}
1000dbb2:	4770      	bx	lr

1000dbb4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
1000dbb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
1000dbb6:	ab0b      	add	r3, sp, #44	; 0x2c
1000dbb8:	9305      	str	r3, [sp, #20]
1000dbba:	2000      	movs	r0, #0
1000dbbc:	9303      	str	r3, [sp, #12]
1000dbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000dbc0:	2201      	movs	r2, #1
1000dbc2:	9302      	str	r3, [sp, #8]
1000dbc4:	9001      	str	r0, [sp, #4]
1000dbc6:	0003      	movs	r3, r0
1000dbc8:	9000      	str	r0, [sp, #0]
1000dbca:	f7f5 feb9 	bl	10003940 <z_impl_z_log_msg_runtime_vcreate>
}
1000dbce:	b007      	add	sp, #28
1000dbd0:	bd00      	pop	{pc}

1000dbd2 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
1000dbd2:	f3ef 8310 	mrs	r3, PRIMASK
1000dbd6:	b672      	cpsid	i
	for (;;) {
1000dbd8:	e7fe      	b.n	1000dbd8 <arch_system_halt+0x6>

1000dbda <z_early_memset>:
{
1000dbda:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
1000dbdc:	f7f9 fd8a 	bl	100076f4 <memset>
}
1000dbe0:	bd10      	pop	{r4, pc}

1000dbe2 <z_early_memcpy>:
{
1000dbe2:	b510      	push	{r4, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
1000dbe4:	f7f9 fd3e 	bl	10007664 <memcpy>
}
1000dbe8:	bd10      	pop	{r4, pc}

1000dbea <k_is_in_isr>:
1000dbea:	f3ef 8005 	mrs	r0, IPSR
	return (__get_IPSR()) ? (true) : (false);
1000dbee:	1e43      	subs	r3, r0, #1
1000dbf0:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
1000dbf2:	b2c0      	uxtb	r0, r0
}
1000dbf4:	4770      	bx	lr

1000dbf6 <z_impl_k_thread_name_set>:
	return -ENOSYS;
1000dbf6:	2058      	movs	r0, #88	; 0x58
}
1000dbf8:	4240      	negs	r0, r0
1000dbfa:	4770      	bx	lr

1000dbfc <k_thread_name_get>:
}
1000dbfc:	2000      	movs	r0, #0
1000dbfe:	4770      	bx	lr

1000dc00 <z_impl_k_thread_start>:
{
1000dc00:	b510      	push	{r4, lr}
	z_sched_start(thread);
1000dc02:	f7f8 fab3 	bl	1000616c <z_sched_start>
}
1000dc06:	bd10      	pop	{r4, pc}

1000dc08 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
1000dc08:	b510      	push	{r4, lr}
1000dc0a:	f3ef 8310 	mrs	r3, PRIMASK
1000dc0e:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
1000dc10:	f7f6 f8d8 	bl	10003dc4 <arch_cpu_idle>
1000dc14:	e7f9      	b.n	1000dc0a <idle+0x2>

1000dc16 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
1000dc16:	220e      	movs	r2, #14
static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
1000dc18:	b510      	push	{r4, lr}
	if (mutex->owner->base.prio != new_prio) {
1000dc1a:	5682      	ldrsb	r2, [r0, r2]
	return false;
1000dc1c:	2300      	movs	r3, #0
	if (mutex->owner->base.prio != new_prio) {
1000dc1e:	428a      	cmp	r2, r1
1000dc20:	d002      	beq.n	1000dc28 <adjust_owner_prio.isra.0+0x12>
		return z_set_prio(mutex->owner, new_prio);
1000dc22:	f7f8 fa47 	bl	100060b4 <z_set_prio>
1000dc26:	0003      	movs	r3, r0
}
1000dc28:	0018      	movs	r0, r3
1000dc2a:	bd10      	pop	{r4, pc}

1000dc2c <z_impl_k_mutex_init>:
{
1000dc2c:	0003      	movs	r3, r0
	mutex->owner = NULL;
1000dc2e:	2000      	movs	r0, #0
1000dc30:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
1000dc32:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
1000dc34:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
1000dc36:	605b      	str	r3, [r3, #4]
}
1000dc38:	4770      	bx	lr

1000dc3a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
1000dc3a:	2a00      	cmp	r2, #0
1000dc3c:	d00b      	beq.n	1000dc56 <z_impl_k_sem_init+0x1c>
1000dc3e:	428a      	cmp	r2, r1
1000dc40:	d309      	bcc.n	1000dc56 <z_impl_k_sem_init+0x1c>
	sys_dlist_init(&sem->poll_events);
1000dc42:	0003      	movs	r3, r0
1000dc44:	3310      	adds	r3, #16
	sem->count = initial_count;
1000dc46:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
1000dc48:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
1000dc4a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
1000dc4c:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
1000dc4e:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
1000dc50:	6143      	str	r3, [r0, #20]
	return 0;
1000dc52:	2000      	movs	r0, #0
}
1000dc54:	4770      	bx	lr
		return -EINVAL;
1000dc56:	2016      	movs	r0, #22
1000dc58:	4240      	negs	r0, r0
1000dc5a:	e7fb      	b.n	1000dc54 <z_impl_k_sem_init+0x1a>

1000dc5c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
1000dc5c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000dc5e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
1000dc60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000dc62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000dc64:	2300      	movs	r3, #0
1000dc66:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000dc68:	6043      	str	r3, [r0, #4]
}
1000dc6a:	4770      	bx	lr

1000dc6c <unpend_thread_no_timeout>:
{
1000dc6c:	b510      	push	{r4, lr}
1000dc6e:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
1000dc70:	f7ff fff4 	bl	1000dc5c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
1000dc74:	2202      	movs	r2, #2
1000dc76:	7b63      	ldrb	r3, [r4, #13]
1000dc78:	4393      	bics	r3, r2
1000dc7a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
1000dc7c:	2300      	movs	r3, #0
1000dc7e:	60a3      	str	r3, [r4, #8]
}
1000dc80:	bd10      	pop	{r4, pc}

1000dc82 <add_to_waitq_locked>:
{
1000dc82:	b570      	push	{r4, r5, r6, lr}
1000dc84:	0004      	movs	r4, r0
1000dc86:	000d      	movs	r5, r1
	unready_thread(thread);
1000dc88:	f7f8 f9a4 	bl	10005fd4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
1000dc8c:	2302      	movs	r3, #2
1000dc8e:	7b62      	ldrb	r2, [r4, #13]
1000dc90:	4313      	orrs	r3, r2
1000dc92:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
1000dc94:	2d00      	cmp	r5, #0
1000dc96:	d01c      	beq.n	1000dcd2 <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
1000dc98:	60a5      	str	r5, [r4, #8]
	return list->head == list;
1000dc9a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000dc9c:	429d      	cmp	r5, r3
1000dc9e:	d109      	bne.n	1000dcb4 <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
1000dca0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
1000dca2:	6025      	str	r5, [r4, #0]
	node->prev = tail;
1000dca4:	6063      	str	r3, [r4, #4]
	tail->next = node;
1000dca6:	601c      	str	r4, [r3, #0]
	list->tail = node;
1000dca8:	606c      	str	r4, [r5, #4]
}
1000dcaa:	e012      	b.n	1000dcd2 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
1000dcac:	686a      	ldr	r2, [r5, #4]
1000dcae:	4293      	cmp	r3, r2
1000dcb0:	d0f6      	beq.n	1000dca0 <add_to_waitq_locked+0x1e>
1000dcb2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000dcb4:	2b00      	cmp	r3, #0
1000dcb6:	d0f3      	beq.n	1000dca0 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
1000dcb8:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
1000dcba:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
1000dcbc:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
1000dcbe:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
1000dcc0:	428a      	cmp	r2, r1
1000dcc2:	d0f3      	beq.n	1000dcac <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000dcc4:	4291      	cmp	r1, r2
1000dcc6:	ddf1      	ble.n	1000dcac <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
1000dcc8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
1000dcca:	6023      	str	r3, [r4, #0]
	node->prev = prev;
1000dccc:	6062      	str	r2, [r4, #4]
	prev->next = node;
1000dcce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
1000dcd0:	605c      	str	r4, [r3, #4]
}
1000dcd2:	bd70      	pop	{r4, r5, r6, pc}

1000dcd4 <z_ready_thread>:
{
1000dcd4:	b510      	push	{r4, lr}
1000dcd6:	f3ef 8410 	mrs	r4, PRIMASK
1000dcda:	b672      	cpsid	i
			ready_thread(thread);
1000dcdc:	f7f8 f944 	bl	10005f68 <ready_thread>
	if (key != 0U) {
1000dce0:	2c00      	cmp	r4, #0
1000dce2:	d102      	bne.n	1000dcea <z_ready_thread+0x16>
	__asm__ volatile(
1000dce4:	b662      	cpsie	i
1000dce6:	f3bf 8f6f 	isb	sy
}
1000dcea:	bd10      	pop	{r4, pc}

1000dcec <z_unpend_thread_no_timeout>:
{
1000dcec:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000dcee:	f3ef 8410 	mrs	r4, PRIMASK
1000dcf2:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
1000dcf4:	6883      	ldr	r3, [r0, #8]
1000dcf6:	2b00      	cmp	r3, #0
1000dcf8:	d001      	beq.n	1000dcfe <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
1000dcfa:	f7ff ffb7 	bl	1000dc6c <unpend_thread_no_timeout>
	if (key != 0U) {
1000dcfe:	2c00      	cmp	r4, #0
1000dd00:	d102      	bne.n	1000dd08 <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
1000dd02:	b662      	cpsie	i
1000dd04:	f3bf 8f6f 	isb	sy
}
1000dd08:	bd10      	pop	{r4, pc}

1000dd0a <z_sched_wake_thread>:
{
1000dd0a:	b570      	push	{r4, r5, r6, lr}
1000dd0c:	0004      	movs	r4, r0
1000dd0e:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
1000dd10:	f3ef 8510 	mrs	r5, PRIMASK
1000dd14:	b672      	cpsid	i
		if (!killed) {
1000dd16:	2328      	movs	r3, #40	; 0x28
1000dd18:	7b42      	ldrb	r2, [r0, #13]
1000dd1a:	421a      	tst	r2, r3
1000dd1c:	d10e      	bne.n	1000dd3c <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
1000dd1e:	6883      	ldr	r3, [r0, #8]
1000dd20:	2b00      	cmp	r3, #0
1000dd22:	d001      	beq.n	1000dd28 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
1000dd24:	f7ff ffa2 	bl	1000dc6c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000dd28:	2204      	movs	r2, #4
1000dd2a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
1000dd2c:	2e00      	cmp	r6, #0
1000dd2e:	d000      	beq.n	1000dd32 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
1000dd30:	2214      	movs	r2, #20
1000dd32:	4393      	bics	r3, r2
			ready_thread(thread);
1000dd34:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000dd36:	7363      	strb	r3, [r4, #13]
1000dd38:	f7f8 f916 	bl	10005f68 <ready_thread>
	if (key != 0U) {
1000dd3c:	2d00      	cmp	r5, #0
1000dd3e:	d102      	bne.n	1000dd46 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
1000dd40:	b662      	cpsie	i
1000dd42:	f3bf 8f6f 	isb	sy
}
1000dd46:	bd70      	pop	{r4, r5, r6, pc}

1000dd48 <z_thread_timeout>:
{
1000dd48:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
1000dd4a:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
1000dd4c:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
1000dd4e:	f7ff ffdc 	bl	1000dd0a <z_sched_wake_thread>
}
1000dd52:	bd10      	pop	{r4, pc}

1000dd54 <z_unpend1_no_timeout>:
{
1000dd54:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000dd56:	f3ef 8510 	mrs	r5, PRIMASK
1000dd5a:	b672      	cpsid	i
	return list->head == list;
1000dd5c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000dd5e:	42a0      	cmp	r0, r4
1000dd60:	d00b      	beq.n	1000dd7a <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
1000dd62:	2c00      	cmp	r4, #0
1000dd64:	d002      	beq.n	1000dd6c <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
1000dd66:	0020      	movs	r0, r4
1000dd68:	f7ff ff80 	bl	1000dc6c <unpend_thread_no_timeout>
	if (key != 0U) {
1000dd6c:	2d00      	cmp	r5, #0
1000dd6e:	d102      	bne.n	1000dd76 <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
1000dd70:	b662      	cpsie	i
1000dd72:	f3bf 8f6f 	isb	sy
}
1000dd76:	0020      	movs	r0, r4
1000dd78:	bd70      	pop	{r4, r5, r6, pc}
1000dd7a:	2400      	movs	r4, #0
1000dd7c:	e7f6      	b.n	1000dd6c <z_unpend1_no_timeout+0x18>

1000dd7e <z_unpend_first_thread>:
{
1000dd7e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000dd80:	f3ef 8510 	mrs	r5, PRIMASK
1000dd84:	b672      	cpsid	i
	return list->head == list;
1000dd86:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000dd88:	42a0      	cmp	r0, r4
1000dd8a:	d00f      	beq.n	1000ddac <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
1000dd8c:	2c00      	cmp	r4, #0
1000dd8e:	d006      	beq.n	1000dd9e <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
1000dd90:	0020      	movs	r0, r4
1000dd92:	f7ff ff6b 	bl	1000dc6c <unpend_thread_no_timeout>
1000dd96:	0020      	movs	r0, r4
1000dd98:	3018      	adds	r0, #24
1000dd9a:	f000 f850 	bl	1000de3e <z_abort_timeout>
	if (key != 0U) {
1000dd9e:	2d00      	cmp	r5, #0
1000dda0:	d102      	bne.n	1000dda8 <z_unpend_first_thread+0x2a>
	__asm__ volatile(
1000dda2:	b662      	cpsie	i
1000dda4:	f3bf 8f6f 	isb	sy
}
1000dda8:	0020      	movs	r0, r4
1000ddaa:	bd70      	pop	{r4, r5, r6, pc}
1000ddac:	2400      	movs	r4, #0
1000ddae:	e7f6      	b.n	1000dd9e <z_unpend_first_thread+0x20>

1000ddb0 <z_unpend_thread>:
{
1000ddb0:	b570      	push	{r4, r5, r6, lr}
1000ddb2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000ddb4:	f3ef 8510 	mrs	r5, PRIMASK
1000ddb8:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
1000ddba:	6883      	ldr	r3, [r0, #8]
1000ddbc:	2b00      	cmp	r3, #0
1000ddbe:	d001      	beq.n	1000ddc4 <z_unpend_thread+0x14>
			unpend_thread_no_timeout(thread);
1000ddc0:	f7ff ff54 	bl	1000dc6c <unpend_thread_no_timeout>
	if (key != 0U) {
1000ddc4:	2d00      	cmp	r5, #0
1000ddc6:	d102      	bne.n	1000ddce <z_unpend_thread+0x1e>
	__asm__ volatile(
1000ddc8:	b662      	cpsie	i
1000ddca:	f3bf 8f6f 	isb	sy
1000ddce:	0020      	movs	r0, r4
1000ddd0:	3018      	adds	r0, #24
1000ddd2:	f000 f834 	bl	1000de3e <z_abort_timeout>
}
1000ddd6:	bd70      	pop	{r4, r5, r6, pc}

1000ddd8 <z_reschedule_irqlock>:
{
1000ddd8:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
1000ddda:	2800      	cmp	r0, #0
1000dddc:	d105      	bne.n	1000ddea <z_reschedule_irqlock+0x12>
1000ddde:	f3ef 8005 	mrs	r0, IPSR
1000dde2:	2800      	cmp	r0, #0
1000dde4:	d102      	bne.n	1000ddec <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
1000dde6:	f7f6 f893 	bl	10003f10 <arch_swap>
}
1000ddea:	bd10      	pop	{r4, pc}
1000ddec:	b662      	cpsie	i
1000ddee:	f3bf 8f6f 	isb	sy
1000ddf2:	e7fa      	b.n	1000ddea <z_reschedule_irqlock+0x12>

1000ddf4 <z_reschedule_unlocked>:
{
1000ddf4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000ddf6:	f3ef 8010 	mrs	r0, PRIMASK
1000ddfa:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
1000ddfc:	f7ff ffec 	bl	1000ddd8 <z_reschedule_irqlock>
}
1000de00:	bd10      	pop	{r4, pc}

1000de02 <z_sched_wake>:
{
1000de02:	0003      	movs	r3, r0
1000de04:	b570      	push	{r4, r5, r6, lr}
1000de06:	f3ef 8510 	mrs	r5, PRIMASK
1000de0a:	b672      	cpsid	i
	return list->head == list;
1000de0c:	6804      	ldr	r4, [r0, #0]
	bool ret = false;
1000de0e:	2000      	movs	r0, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000de10:	42a3      	cmp	r3, r4
1000de12:	d00e      	beq.n	1000de32 <z_sched_wake+0x30>
		if (thread != NULL) {
1000de14:	4284      	cmp	r4, r0
1000de16:	d00c      	beq.n	1000de32 <z_sched_wake+0x30>
1000de18:	6721      	str	r1, [r4, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
1000de1a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
1000de1c:	0020      	movs	r0, r4
1000de1e:	f7ff ff25 	bl	1000dc6c <unpend_thread_no_timeout>
1000de22:	0020      	movs	r0, r4
1000de24:	3018      	adds	r0, #24
1000de26:	f000 f80a 	bl	1000de3e <z_abort_timeout>
			ready_thread(thread);
1000de2a:	0020      	movs	r0, r4
1000de2c:	f7f8 f89c 	bl	10005f68 <ready_thread>
			ret = true;
1000de30:	2001      	movs	r0, #1
	if (key != 0U) {
1000de32:	2d00      	cmp	r5, #0
1000de34:	d102      	bne.n	1000de3c <z_sched_wake+0x3a>
	__asm__ volatile(
1000de36:	b662      	cpsie	i
1000de38:	f3bf 8f6f 	isb	sy
}
1000de3c:	bd70      	pop	{r4, r5, r6, pc}

1000de3e <z_abort_timeout>:
{
1000de3e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000de40:	f3ef 8410 	mrs	r4, PRIMASK
1000de44:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
1000de46:	6803      	ldr	r3, [r0, #0]
1000de48:	2b00      	cmp	r3, #0
1000de4a:	d008      	beq.n	1000de5e <z_abort_timeout+0x20>
			remove_timeout(to);
1000de4c:	f7f8 fb5a 	bl	10006504 <remove_timeout>
			ret = 0;
1000de50:	2000      	movs	r0, #0
	if (key != 0U) {
1000de52:	2c00      	cmp	r4, #0
1000de54:	d102      	bne.n	1000de5c <z_abort_timeout+0x1e>
	__asm__ volatile(
1000de56:	b662      	cpsie	i
1000de58:	f3bf 8f6f 	isb	sy
}
1000de5c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
1000de5e:	2016      	movs	r0, #22
1000de60:	4240      	negs	r0, r0
1000de62:	e7f6      	b.n	1000de52 <z_abort_timeout+0x14>

1000de64 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
1000de64:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
1000de66:	f7f8 fc45 	bl	100066f4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
1000de6a:	bd10      	pop	{r4, pc}

1000de6c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
1000de6c:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
1000de6e:	f7f8 fc41 	bl	100066f4 <sys_clock_tick_get>
}
1000de72:	bd10      	pop	{r4, pc}

1000de74 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
1000de74:	b510      	push	{r4, lr}
1000de76:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
1000de78:	f7ff ffe1 	bl	1000de3e <z_abort_timeout>

	if (inactive) {
1000de7c:	2800      	cmp	r0, #0
1000de7e:	d111      	bne.n	1000dea4 <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
1000de80:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000de82:	2b00      	cmp	r3, #0
1000de84:	d001      	beq.n	1000de8a <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
1000de86:	0020      	movs	r0, r4
1000de88:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
1000de8a:	0020      	movs	r0, r4
1000de8c:	3018      	adds	r0, #24
1000de8e:	f7ff ff61 	bl	1000dd54 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
1000de92:	2800      	cmp	r0, #0
1000de94:	d006      	beq.n	1000dea4 <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
1000de96:	f7ff ff1d 	bl	1000dcd4 <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
1000de9a:	f3ef 8010 	mrs	r0, PRIMASK
1000de9e:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
1000dea0:	f7ff ff9a 	bl	1000ddd8 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
1000dea4:	bd10      	pop	{r4, pc}

1000dea6 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
1000dea6:	0003      	movs	r3, r0
1000dea8:	f3ef 8210 	mrs	r2, PRIMASK
1000deac:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
1000deae:	6800      	ldr	r0, [r0, #0]
	*target += value;
1000deb0:	1841      	adds	r1, r0, r1
1000deb2:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000deb4:	2a00      	cmp	r2, #0
1000deb6:	d102      	bne.n	1000debe <z_impl_atomic_add+0x18>
	__asm__ volatile(
1000deb8:	b662      	cpsie	i
1000deba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
1000debe:	4770      	bx	lr

1000dec0 <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
1000dec0:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000dec2:	f3ef 8210 	mrs	r2, PRIMASK
1000dec6:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
1000dec8:	6800      	ldr	r0, [r0, #0]
	*target -= value;
1000deca:	1a41      	subs	r1, r0, r1
1000decc:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000dece:	2a00      	cmp	r2, #0
1000ded0:	d102      	bne.n	1000ded8 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
1000ded2:	b662      	cpsie	i
1000ded4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
1000ded8:	4770      	bx	lr

1000deda <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
1000deda:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000dedc:	f3ef 8210 	mrs	r2, PRIMASK
1000dee0:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
1000dee2:	6800      	ldr	r0, [r0, #0]
	*target = value;
1000dee4:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000dee6:	2a00      	cmp	r2, #0
1000dee8:	d102      	bne.n	1000def0 <z_impl_atomic_set+0x16>
	__asm__ volatile(
1000deea:	b662      	cpsie	i
1000deec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
1000def0:	4770      	bx	lr

1000def2 <z_handle_obj_poll_events>:
{
1000def2:	b510      	push	{r4, lr}
1000def4:	0003      	movs	r3, r0
	return list->head == list;
1000def6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
1000def8:	4283      	cmp	r3, r0
1000defa:	d008      	beq.n	1000df0e <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const next = node->next;
1000defc:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000defe:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
1000df00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000df02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000df04:	2300      	movs	r3, #0
1000df06:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000df08:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
1000df0a:	f7f8 fcab 	bl	10006864 <signal_poll_event>
}
1000df0e:	bd10      	pop	{r4, pc}

1000df10 <k_heap_init>:
1000df10:	0003      	movs	r3, r0
{
1000df12:	b510      	push	{r4, lr}
1000df14:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
1000df16:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
1000df18:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
1000df1a:	f7ff f84c 	bl	1000cfb6 <sys_heap_init>
}
1000df1e:	bd10      	pop	{r4, pc}

1000df20 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
1000df20:	2201      	movs	r2, #1
{
1000df22:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
1000df24:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
1000df26:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
1000df28:	408c      	lsls	r4, r1
1000df2a:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
1000df2c:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
1000df2e:	43a5      	bics	r5, r4
1000df30:	6005      	str	r5, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
1000df32:	0018      	movs	r0, r3
	return ret;
1000df34:	4010      	ands	r0, r2
}
1000df36:	bd30      	pop	{r4, r5, pc}

1000df38 <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
1000df38:	b510      	push	{r4, lr}
	if (queue != NULL) {
1000df3a:	2800      	cmp	r0, #0
1000df3c:	d004      	beq.n	1000df48 <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
1000df3e:	2200      	movs	r2, #0
1000df40:	3080      	adds	r0, #128	; 0x80
1000df42:	0011      	movs	r1, r2
1000df44:	f7ff ff5d 	bl	1000de02 <z_sched_wake>
}
1000df48:	bd10      	pop	{r4, pc}

1000df4a <z_work_submit_to_queue>:
{
1000df4a:	b513      	push	{r0, r1, r4, lr}
1000df4c:	9001      	str	r0, [sp, #4]
1000df4e:	0008      	movs	r0, r1
	__asm__ volatile("mrs %0, PRIMASK;"
1000df50:	f3ef 8410 	mrs	r4, PRIMASK
1000df54:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
1000df56:	a901      	add	r1, sp, #4
1000df58:	f7f8 fdd8 	bl	10006b0c <submit_to_queue_locked>
	if (key != 0U) {
1000df5c:	2c00      	cmp	r4, #0
1000df5e:	d102      	bne.n	1000df66 <z_work_submit_to_queue+0x1c>
	__asm__ volatile(
1000df60:	b662      	cpsie	i
1000df62:	f3bf 8f6f 	isb	sy
}
1000df66:	bd16      	pop	{r1, r2, r4, pc}
