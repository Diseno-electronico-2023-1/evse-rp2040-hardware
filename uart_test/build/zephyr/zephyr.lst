
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000f00 10000fa5 10002693 10000f61     ... .....&..a...
	...
1000012c:	10000e2d 00000000 00000000 10000dcd     -...............
1000013c:	10001271                                q...

10000140 <_irq_vector_table>:
10000140:	10000e9d 10000e9d 10000e9d 10000e9d     ................
10000150:	10000e9d 10000e9d 10000e9d 10000e9d     ................
10000160:	10000e9d 10000e9d 10000e9d 10000e9d     ................
10000170:	10000e9d 10000e9d 10000e9d 10000e9d     ................
10000180:	10000e9d 10000e9d 10000e9d 10000e9d     ................
10000190:	10000e9d 10000e9d 10000e9d 10000e9d     ................
100001a0:	10000e9d 10000e9d                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f80b 	bl	1000025c <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_idiv0>:
1000025c:	4770      	bx	lr
1000025e:	46c0      	nop			; (mov r8, r8)

10000260 <__clzsi2>:
10000260:	211c      	movs	r1, #28
10000262:	2301      	movs	r3, #1
10000264:	041b      	lsls	r3, r3, #16
10000266:	4298      	cmp	r0, r3
10000268:	d301      	bcc.n	1000026e <__clzsi2+0xe>
1000026a:	0c00      	lsrs	r0, r0, #16
1000026c:	3910      	subs	r1, #16
1000026e:	0a1b      	lsrs	r3, r3, #8
10000270:	4298      	cmp	r0, r3
10000272:	d301      	bcc.n	10000278 <__clzsi2+0x18>
10000274:	0a00      	lsrs	r0, r0, #8
10000276:	3908      	subs	r1, #8
10000278:	091b      	lsrs	r3, r3, #4
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0x22>
1000027e:	0900      	lsrs	r0, r0, #4
10000280:	3904      	subs	r1, #4
10000282:	a202      	add	r2, pc, #8	; (adr r2, 1000028c <__clzsi2+0x2c>)
10000284:	5c10      	ldrb	r0, [r2, r0]
10000286:	1840      	adds	r0, r0, r1
10000288:	4770      	bx	lr
1000028a:	46c0      	nop			; (mov r8, r8)
1000028c:	02020304 	.word	0x02020304
10000290:	01010101 	.word	0x01010101
	...

1000029c <__aeabi_uldivmod>:
1000029c:	2b00      	cmp	r3, #0
1000029e:	d111      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a0:	2a00      	cmp	r2, #0
100002a2:	d10f      	bne.n	100002c4 <__aeabi_uldivmod+0x28>
100002a4:	2900      	cmp	r1, #0
100002a6:	d100      	bne.n	100002aa <__aeabi_uldivmod+0xe>
100002a8:	2800      	cmp	r0, #0
100002aa:	d002      	beq.n	100002b2 <__aeabi_uldivmod+0x16>
100002ac:	2100      	movs	r1, #0
100002ae:	43c9      	mvns	r1, r1
100002b0:	0008      	movs	r0, r1
100002b2:	b407      	push	{r0, r1, r2}
100002b4:	4802      	ldr	r0, [pc, #8]	; (100002c0 <__aeabi_uldivmod+0x24>)
100002b6:	a102      	add	r1, pc, #8	; (adr r1, 100002c0 <__aeabi_uldivmod+0x24>)
100002b8:	1840      	adds	r0, r0, r1
100002ba:	9002      	str	r0, [sp, #8]
100002bc:	bd03      	pop	{r0, r1, pc}
100002be:	46c0      	nop			; (mov r8, r8)
100002c0:	ffffff9d 	.word	0xffffff9d
100002c4:	b403      	push	{r0, r1}
100002c6:	4668      	mov	r0, sp
100002c8:	b501      	push	{r0, lr}
100002ca:	9802      	ldr	r0, [sp, #8]
100002cc:	f000 f84c 	bl	10000368 <__udivmoddi4>
100002d0:	9b01      	ldr	r3, [sp, #4]
100002d2:	469e      	mov	lr, r3
100002d4:	b002      	add	sp, #8
100002d6:	bc0c      	pop	{r2, r3}
100002d8:	4770      	bx	lr
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_llsr>:
100002dc:	40d0      	lsrs	r0, r2
100002de:	000b      	movs	r3, r1
100002e0:	40d1      	lsrs	r1, r2
100002e2:	469c      	mov	ip, r3
100002e4:	3a20      	subs	r2, #32
100002e6:	40d3      	lsrs	r3, r2
100002e8:	4318      	orrs	r0, r3
100002ea:	4252      	negs	r2, r2
100002ec:	4663      	mov	r3, ip
100002ee:	4093      	lsls	r3, r2
100002f0:	4318      	orrs	r0, r3
100002f2:	4770      	bx	lr

100002f4 <__aeabi_llsl>:
100002f4:	4091      	lsls	r1, r2
100002f6:	0003      	movs	r3, r0
100002f8:	4090      	lsls	r0, r2
100002fa:	469c      	mov	ip, r3
100002fc:	3a20      	subs	r2, #32
100002fe:	4093      	lsls	r3, r2
10000300:	4319      	orrs	r1, r3
10000302:	4252      	negs	r2, r2
10000304:	4663      	mov	r3, ip
10000306:	40d3      	lsrs	r3, r2
10000308:	4319      	orrs	r1, r3
1000030a:	4770      	bx	lr

1000030c <__clzdi2>:
1000030c:	b510      	push	{r4, lr}
1000030e:	2900      	cmp	r1, #0
10000310:	d103      	bne.n	1000031a <__clzdi2+0xe>
10000312:	f7ff ffa5 	bl	10000260 <__clzsi2>
10000316:	3020      	adds	r0, #32
10000318:	e002      	b.n	10000320 <__clzdi2+0x14>
1000031a:	0008      	movs	r0, r1
1000031c:	f7ff ffa0 	bl	10000260 <__clzsi2>
10000320:	bd10      	pop	{r4, pc}
10000322:	46c0      	nop			; (mov r8, r8)

10000324 <__aeabi_lmul>:
10000324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000326:	0c04      	lsrs	r4, r0, #16
10000328:	000d      	movs	r5, r1
1000032a:	b291      	uxth	r1, r2
1000032c:	000f      	movs	r7, r1
1000032e:	4361      	muls	r1, r4
10000330:	468c      	mov	ip, r1
10000332:	0006      	movs	r6, r0
10000334:	9301      	str	r3, [sp, #4]
10000336:	b283      	uxth	r3, r0
10000338:	0c10      	lsrs	r0, r2, #16
1000033a:	435f      	muls	r7, r3
1000033c:	4344      	muls	r4, r0
1000033e:	4358      	muls	r0, r3
10000340:	0c3b      	lsrs	r3, r7, #16
10000342:	4460      	add	r0, ip
10000344:	181b      	adds	r3, r3, r0
10000346:	4299      	cmp	r1, r3
10000348:	d902      	bls.n	10000350 <__aeabi_lmul+0x2c>
1000034a:	2180      	movs	r1, #128	; 0x80
1000034c:	0249      	lsls	r1, r1, #9
1000034e:	1864      	adds	r4, r4, r1
10000350:	9901      	ldr	r1, [sp, #4]
10000352:	4355      	muls	r5, r2
10000354:	4371      	muls	r1, r6
10000356:	0c18      	lsrs	r0, r3, #16
10000358:	1904      	adds	r4, r0, r4
1000035a:	041b      	lsls	r3, r3, #16
1000035c:	b2bf      	uxth	r7, r7
1000035e:	1949      	adds	r1, r1, r5
10000360:	19d8      	adds	r0, r3, r7
10000362:	1909      	adds	r1, r1, r4
10000364:	b003      	add	sp, #12
10000366:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000368 <__udivmoddi4>:
10000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000036a:	0006      	movs	r6, r0
1000036c:	000f      	movs	r7, r1
1000036e:	0015      	movs	r5, r2
10000370:	001c      	movs	r4, r3
10000372:	b085      	sub	sp, #20
10000374:	428b      	cmp	r3, r1
10000376:	d863      	bhi.n	10000440 <__udivmoddi4+0xd8>
10000378:	d101      	bne.n	1000037e <__udivmoddi4+0x16>
1000037a:	4282      	cmp	r2, r0
1000037c:	d860      	bhi.n	10000440 <__udivmoddi4+0xd8>
1000037e:	0021      	movs	r1, r4
10000380:	0028      	movs	r0, r5
10000382:	f7ff ffc3 	bl	1000030c <__clzdi2>
10000386:	0039      	movs	r1, r7
10000388:	9000      	str	r0, [sp, #0]
1000038a:	0030      	movs	r0, r6
1000038c:	f7ff ffbe 	bl	1000030c <__clzdi2>
10000390:	9b00      	ldr	r3, [sp, #0]
10000392:	0021      	movs	r1, r4
10000394:	1a1b      	subs	r3, r3, r0
10000396:	001a      	movs	r2, r3
10000398:	0028      	movs	r0, r5
1000039a:	9303      	str	r3, [sp, #12]
1000039c:	f7ff ffaa 	bl	100002f4 <__aeabi_llsl>
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	9101      	str	r1, [sp, #4]
100003a4:	42b9      	cmp	r1, r7
100003a6:	d845      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003a8:	d101      	bne.n	100003ae <__udivmoddi4+0x46>
100003aa:	42b0      	cmp	r0, r6
100003ac:	d842      	bhi.n	10000434 <__udivmoddi4+0xcc>
100003ae:	9b00      	ldr	r3, [sp, #0]
100003b0:	9c01      	ldr	r4, [sp, #4]
100003b2:	2001      	movs	r0, #1
100003b4:	2100      	movs	r1, #0
100003b6:	9a03      	ldr	r2, [sp, #12]
100003b8:	1af6      	subs	r6, r6, r3
100003ba:	41a7      	sbcs	r7, r4
100003bc:	f7ff ff9a 	bl	100002f4 <__aeabi_llsl>
100003c0:	0004      	movs	r4, r0
100003c2:	000d      	movs	r5, r1
100003c4:	9b03      	ldr	r3, [sp, #12]
100003c6:	2b00      	cmp	r3, #0
100003c8:	d02b      	beq.n	10000422 <__udivmoddi4+0xba>
100003ca:	9b01      	ldr	r3, [sp, #4]
100003cc:	9a00      	ldr	r2, [sp, #0]
100003ce:	07db      	lsls	r3, r3, #31
100003d0:	0850      	lsrs	r0, r2, #1
100003d2:	4318      	orrs	r0, r3
100003d4:	9b01      	ldr	r3, [sp, #4]
100003d6:	0859      	lsrs	r1, r3, #1
100003d8:	9b03      	ldr	r3, [sp, #12]
100003da:	469c      	mov	ip, r3
100003dc:	42b9      	cmp	r1, r7
100003de:	d82c      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e0:	d101      	bne.n	100003e6 <__udivmoddi4+0x7e>
100003e2:	42b0      	cmp	r0, r6
100003e4:	d829      	bhi.n	1000043a <__udivmoddi4+0xd2>
100003e6:	0032      	movs	r2, r6
100003e8:	003b      	movs	r3, r7
100003ea:	1a12      	subs	r2, r2, r0
100003ec:	418b      	sbcs	r3, r1
100003ee:	2601      	movs	r6, #1
100003f0:	1892      	adds	r2, r2, r2
100003f2:	415b      	adcs	r3, r3
100003f4:	2700      	movs	r7, #0
100003f6:	18b6      	adds	r6, r6, r2
100003f8:	415f      	adcs	r7, r3
100003fa:	2301      	movs	r3, #1
100003fc:	425b      	negs	r3, r3
100003fe:	449c      	add	ip, r3
10000400:	4663      	mov	r3, ip
10000402:	2b00      	cmp	r3, #0
10000404:	d1ea      	bne.n	100003dc <__udivmoddi4+0x74>
10000406:	0030      	movs	r0, r6
10000408:	0039      	movs	r1, r7
1000040a:	9a03      	ldr	r2, [sp, #12]
1000040c:	f7ff ff66 	bl	100002dc <__aeabi_llsr>
10000410:	9a03      	ldr	r2, [sp, #12]
10000412:	19a4      	adds	r4, r4, r6
10000414:	417d      	adcs	r5, r7
10000416:	0006      	movs	r6, r0
10000418:	000f      	movs	r7, r1
1000041a:	f7ff ff6b 	bl	100002f4 <__aeabi_llsl>
1000041e:	1a24      	subs	r4, r4, r0
10000420:	418d      	sbcs	r5, r1
10000422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000424:	2b00      	cmp	r3, #0
10000426:	d001      	beq.n	1000042c <__udivmoddi4+0xc4>
10000428:	601e      	str	r6, [r3, #0]
1000042a:	605f      	str	r7, [r3, #4]
1000042c:	0020      	movs	r0, r4
1000042e:	0029      	movs	r1, r5
10000430:	b005      	add	sp, #20
10000432:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000434:	2400      	movs	r4, #0
10000436:	2500      	movs	r5, #0
10000438:	e7c4      	b.n	100003c4 <__udivmoddi4+0x5c>
1000043a:	19b6      	adds	r6, r6, r6
1000043c:	417f      	adcs	r7, r7
1000043e:	e7dc      	b.n	100003fa <__udivmoddi4+0x92>
10000440:	2400      	movs	r4, #0
10000442:	2500      	movs	r5, #0
10000444:	e7ed      	b.n	10000422 <__udivmoddi4+0xba>
	...

10000448 <serial_cb>:
/*
 * Read characters from UART until line end is detected. Afterwards push the
 * data to the message queue.
 */
void serial_cb(const struct device *dev, void *user_data)
{
10000448:	b573      	push	{r0, r1, r4, r5, r6, lr}
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
1000044a:	4c1c      	ldr	r4, [pc, #112]	; (100004bc <serial_cb+0x74>)
1000044c:	68a5      	ldr	r5, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
1000044e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10000450:	2b00      	cmp	r3, #0
10000452:	d121      	bne.n	10000498 <serial_cb+0x50>
	if (api->irq_rx_ready == NULL) {
10000454:	6b6b      	ldr	r3, [r5, #52]	; 0x34
10000456:	2b00      	cmp	r3, #0
10000458:	d123      	bne.n	100004a2 <serial_cb+0x5a>
	if (api->fifo_read == NULL) {
1000045a:	68a3      	ldr	r3, [r4, #8]
1000045c:	699b      	ldr	r3, [r3, #24]
1000045e:	2b00      	cmp	r3, #0
10000460:	d01e      	beq.n	100004a0 <serial_cb+0x58>
	return api->fifo_read(dev, rx_data, size);
10000462:	466a      	mov	r2, sp
10000464:	1dd5      	adds	r5, r2, #7
10000466:	0029      	movs	r1, r5
10000468:	2201      	movs	r2, #1
1000046a:	0020      	movs	r0, r4
1000046c:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
		return;
	}

	/* read until FIFO empty */
	while (uart_fifo_read(uart_dev, &c, 1) == 1) {
1000046e:	2801      	cmp	r0, #1
10000470:	d116      	bne.n	100004a0 <serial_cb+0x58>
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
10000472:	782a      	ldrb	r2, [r5, #0]
10000474:	4d12      	ldr	r5, [pc, #72]	; (100004c0 <serial_cb+0x78>)
10000476:	2a0a      	cmp	r2, #10
10000478:	d001      	beq.n	1000047e <serial_cb+0x36>
1000047a:	2a0d      	cmp	r2, #13
1000047c:	d116      	bne.n	100004ac <serial_cb+0x64>
1000047e:	682b      	ldr	r3, [r5, #0]
10000480:	2b00      	cmp	r3, #0
10000482:	dd13      	ble.n	100004ac <serial_cb+0x64>
			/* terminate string */
			rx_buf[rx_buf_pos] = '\0';
10000484:	2600      	movs	r6, #0
10000486:	490f      	ldr	r1, [pc, #60]	; (100004c4 <serial_cb+0x7c>)
10000488:	54ce      	strb	r6, [r1, r3]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
1000048a:	2200      	movs	r2, #0
1000048c:	2300      	movs	r3, #0
1000048e:	480e      	ldr	r0, [pc, #56]	; (100004c8 <serial_cb+0x80>)
10000490:	f001 fb5c 	bl	10001b4c <z_impl_k_msgq_put>

			/* if queue is full, message is silently dropped */
			k_msgq_put(&uart_msgq, &rx_buf, K_NO_WAIT);

			/* reset the buffer (it was copied to the msgq) */
			rx_buf_pos = 0;
10000494:	602e      	str	r6, [r5, #0]
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
10000496:	e7e0      	b.n	1000045a <serial_cb+0x12>
		return -ENOSYS;
	}
	return api->irq_update(dev);
10000498:	0020      	movs	r0, r4
1000049a:	4798      	blx	r3
	if (!uart_irq_update(uart_dev)) {
1000049c:	2800      	cmp	r0, #0
1000049e:	d1d9      	bne.n	10000454 <serial_cb+0xc>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
			rx_buf[rx_buf_pos++] = c;
		}
		/* else: characters beyond buffer size are dropped */
	}
}
100004a0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	return api->irq_rx_ready(dev);
100004a2:	0020      	movs	r0, r4
100004a4:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
100004a6:	2800      	cmp	r0, #0
100004a8:	d1d7      	bne.n	1000045a <serial_cb+0x12>
100004aa:	e7f9      	b.n	100004a0 <serial_cb+0x58>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
100004ac:	682b      	ldr	r3, [r5, #0]
100004ae:	2b1e      	cmp	r3, #30
100004b0:	d8d3      	bhi.n	1000045a <serial_cb+0x12>
			rx_buf[rx_buf_pos++] = c;
100004b2:	1c59      	adds	r1, r3, #1
100004b4:	6029      	str	r1, [r5, #0]
100004b6:	4903      	ldr	r1, [pc, #12]	; (100004c4 <serial_cb+0x7c>)
100004b8:	54ca      	strb	r2, [r1, r3]
100004ba:	e7ce      	b.n	1000045a <serial_cb+0x12>
100004bc:	10002e9c 	.word	0x10002e9c
100004c0:	20000150 	.word	0x20000150
100004c4:	200001d8 	.word	0x200001d8
100004c8:	20000028 	.word	0x20000028

100004cc <print_uart>:

/*
 * Print a null-terminated string character by character to the UART interface
 */
void print_uart(char *buf)
{
100004cc:	b570      	push	{r4, r5, r6, lr}
100004ce:	0005      	movs	r5, r0
	int msg_len = strlen(buf);
100004d0:	f002 f8e6 	bl	100026a0 <strlen>

	for (int i = 0; i < msg_len; i++) {
100004d4:	2400      	movs	r4, #0
	int msg_len = strlen(buf);
100004d6:	0006      	movs	r6, r0
	for (int i = 0; i < msg_len; i++) {
100004d8:	42b4      	cmp	r4, r6
100004da:	db00      	blt.n	100004de <print_uart+0x12>
		uart_poll_out(uart_dev, buf[i]);
	}
}
100004dc:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, buf[i]);
100004de:	5d29      	ldrb	r1, [r5, r4]
	api->poll_out(dev, out_char);
100004e0:	4802      	ldr	r0, [pc, #8]	; (100004ec <print_uart+0x20>)
	for (int i = 0; i < msg_len; i++) {
100004e2:	3401      	adds	r4, #1
100004e4:	6883      	ldr	r3, [r0, #8]
100004e6:	685b      	ldr	r3, [r3, #4]
100004e8:	4798      	blx	r3
100004ea:	e7f5      	b.n	100004d8 <print_uart+0xc>
100004ec:	10002e9c 	.word	0x10002e9c

100004f0 <main>:

void main(void)
{
100004f0:	b530      	push	{r4, r5, lr}
100004f2:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100004f4:	4c1b      	ldr	r4, [pc, #108]	; (10000564 <main+0x74>)
100004f6:	0020      	movs	r0, r4
100004f8:	f002 fbb5 	bl	10002c66 <z_device_is_ready>
	char tx_buf[MSG_SIZE];

	if (!device_is_ready(uart_dev)) {
100004fc:	2800      	cmp	r0, #0
100004fe:	d104      	bne.n	1000050a <main+0x1a>
		printk("UART device not found!");
10000500:	4819      	ldr	r0, [pc, #100]	; (10000568 <main+0x78>)

	if (ret < 0) {
		if (ret == -ENOTSUP) {
			printk("Interrupt-driven UART API support not enabled\n");
		} else if (ret == -ENOSYS) {
			printk("UART device does not support interrupt-driven API\n");
10000502:	f001 ff52 	bl	100023aa <printk>
	while (k_msgq_get(&uart_msgq, &tx_buf, K_FOREVER) == 0) {
		print_uart("Echo: ");
		print_uart(tx_buf);
		print_uart("\r\n");
	}
}
10000506:	b009      	add	sp, #36	; 0x24
10000508:	bd30      	pop	{r4, r5, pc}
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
1000050a:	68a5      	ldr	r5, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
1000050c:	2d00      	cmp	r5, #0
1000050e:	d024      	beq.n	1000055a <main+0x6a>
10000510:	6cab      	ldr	r3, [r5, #72]	; 0x48
10000512:	2b00      	cmp	r3, #0
10000514:	d021      	beq.n	1000055a <main+0x6a>
		api->irq_callback_set(dev, cb, user_data);
10000516:	2200      	movs	r2, #0
10000518:	0020      	movs	r0, r4
1000051a:	4914      	ldr	r1, [pc, #80]	; (1000056c <main+0x7c>)
1000051c:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
1000051e:	6aab      	ldr	r3, [r5, #40]	; 0x28
10000520:	2b00      	cmp	r3, #0
10000522:	d11c      	bne.n	1000055e <main+0x6e>
	print_uart("Hello! I'm your echo bot.\r\n");
10000524:	4812      	ldr	r0, [pc, #72]	; (10000570 <main+0x80>)
10000526:	f7ff ffd1 	bl	100004cc <print_uart>
	print_uart("Tell me something and press enter:\r\n");
1000052a:	4812      	ldr	r0, [pc, #72]	; (10000574 <main+0x84>)
1000052c:	f7ff ffce 	bl	100004cc <print_uart>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
10000530:	2401      	movs	r4, #1
10000532:	4264      	negs	r4, r4
10000534:	17e5      	asrs	r5, r4, #31
10000536:	4810      	ldr	r0, [pc, #64]	; (10000578 <main+0x88>)
10000538:	0022      	movs	r2, r4
1000053a:	002b      	movs	r3, r5
1000053c:	4669      	mov	r1, sp
1000053e:	f001 fb53 	bl	10001be8 <z_impl_k_msgq_get>
	while (k_msgq_get(&uart_msgq, &tx_buf, K_FOREVER) == 0) {
10000542:	2800      	cmp	r0, #0
10000544:	d1df      	bne.n	10000506 <main+0x16>
		print_uart("Echo: ");
10000546:	480d      	ldr	r0, [pc, #52]	; (1000057c <main+0x8c>)
10000548:	f7ff ffc0 	bl	100004cc <print_uart>
		print_uart(tx_buf);
1000054c:	4668      	mov	r0, sp
1000054e:	f7ff ffbd 	bl	100004cc <print_uart>
		print_uart("\r\n");
10000552:	480b      	ldr	r0, [pc, #44]	; (10000580 <main+0x90>)
10000554:	f7ff ffba 	bl	100004cc <print_uart>
10000558:	e7ed      	b.n	10000536 <main+0x46>
			printk("UART device does not support interrupt-driven API\n");
1000055a:	480a      	ldr	r0, [pc, #40]	; (10000584 <main+0x94>)
1000055c:	e7d1      	b.n	10000502 <main+0x12>
		api->irq_rx_enable(dev);
1000055e:	0020      	movs	r0, r4
10000560:	4798      	blx	r3
10000562:	e7df      	b.n	10000524 <main+0x34>
10000564:	10002e9c 	.word	0x10002e9c
10000568:	100030ac 	.word	0x100030ac
1000056c:	10000449 	.word	0x10000449
10000570:	100030f6 	.word	0x100030f6
10000574:	10003112 	.word	0x10003112
10000578:	20000028 	.word	0x20000028
1000057c:	10003137 	.word	0x10003137
10000580:	1000310f 	.word	0x1000310f
10000584:	100030c3 	.word	0x100030c3

10000588 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
10000588:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
1000058a:	4b02      	ldr	r3, [pc, #8]	; (10000594 <char_out+0xc>)
1000058c:	681b      	ldr	r3, [r3, #0]
1000058e:	4798      	blx	r3
}
10000590:	bd10      	pop	{r4, pc}
10000592:	46c0      	nop			; (mov r8, r8)
10000594:	20000000 	.word	0x20000000

10000598 <__printk_hook_install>:
	_char_out = fn;
10000598:	4b01      	ldr	r3, [pc, #4]	; (100005a0 <__printk_hook_install+0x8>)
1000059a:	6018      	str	r0, [r3, #0]
}
1000059c:	4770      	bx	lr
1000059e:	46c0      	nop			; (mov r8, r8)
100005a0:	20000000 	.word	0x20000000

100005a4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100005a4:	b513      	push	{r0, r1, r4, lr}
100005a6:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100005a8:	2100      	movs	r1, #0
100005aa:	4c03      	ldr	r4, [pc, #12]	; (100005b8 <vprintk+0x14>)
100005ac:	0002      	movs	r2, r0
100005ae:	9100      	str	r1, [sp, #0]
100005b0:	0020      	movs	r0, r4
100005b2:	f000 f803 	bl	100005bc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
100005b6:	bd13      	pop	{r0, r1, r4, pc}
100005b8:	10000589 	.word	0x10000589

100005bc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
100005bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100005be:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
100005c0:	2700      	movs	r7, #0
{
100005c2:	b099      	sub	sp, #100	; 0x64
100005c4:	9004      	str	r0, [sp, #16]
100005c6:	9105      	str	r1, [sp, #20]
100005c8:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
100005ca:	9b08      	ldr	r3, [sp, #32]
100005cc:	7818      	ldrb	r0, [r3, #0]
100005ce:	2800      	cmp	r0, #0
100005d0:	d101      	bne.n	100005d6 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
100005d2:	0038      	movs	r0, r7
100005d4:	e327      	b.n	10000c26 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
100005d6:	9b08      	ldr	r3, [sp, #32]
100005d8:	3301      	adds	r3, #1
100005da:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
100005dc:	2825      	cmp	r0, #37	; 0x25
100005de:	d007      	beq.n	100005f0 <z_cbvprintf_impl+0x34>
			OUTC('%');
100005e0:	9905      	ldr	r1, [sp, #20]
100005e2:	9b04      	ldr	r3, [sp, #16]
100005e4:	4798      	blx	r3
100005e6:	2800      	cmp	r0, #0
100005e8:	da00      	bge.n	100005ec <z_cbvprintf_impl+0x30>
100005ea:	e31c      	b.n	10000c26 <z_cbvprintf_impl+0x66a>
100005ec:	3701      	adds	r7, #1
		if (bps == NULL) {
100005ee:	e1e3      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		} state = {
100005f0:	ad12      	add	r5, sp, #72	; 0x48
100005f2:	2218      	movs	r2, #24
100005f4:	2100      	movs	r1, #0
100005f6:	0028      	movs	r0, r5
100005f8:	f002 f86d 	bl	100026d6 <memset>
	if (*sp == '%') {
100005fc:	9b08      	ldr	r3, [sp, #32]
100005fe:	785b      	ldrb	r3, [r3, #1]
10000600:	2b25      	cmp	r3, #37	; 0x25
10000602:	d114      	bne.n	1000062e <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000604:	9a08      	ldr	r2, [sp, #32]
10000606:	72eb      	strb	r3, [r5, #11]
10000608:	3202      	adds	r2, #2
1000060a:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
1000060c:	ab12      	add	r3, sp, #72	; 0x48
1000060e:	7a5a      	ldrb	r2, [r3, #9]
10000610:	07d1      	lsls	r1, r2, #31
10000612:	d400      	bmi.n	10000616 <z_cbvprintf_impl+0x5a>
10000614:	e17f      	b.n	10000916 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10000616:	cc02      	ldmia	r4!, {r1}
10000618:	9103      	str	r1, [sp, #12]
			if (width < 0) {
1000061a:	2900      	cmp	r1, #0
1000061c:	db00      	blt.n	10000620 <z_cbvprintf_impl+0x64>
1000061e:	e17f      	b.n	10000920 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000620:	2104      	movs	r1, #4
10000622:	7a18      	ldrb	r0, [r3, #8]
10000624:	4301      	orrs	r1, r0
10000626:	7219      	strb	r1, [r3, #8]
				width = -width;
10000628:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000062a:	425b      	negs	r3, r3
1000062c:	e177      	b.n	1000091e <z_cbvprintf_impl+0x362>
1000062e:	2200      	movs	r2, #0
		switch (*sp) {
10000630:	2601      	movs	r6, #1
10000632:	0015      	movs	r5, r2
10000634:	0010      	movs	r0, r2
10000636:	4694      	mov	ip, r2
10000638:	9203      	str	r2, [sp, #12]
1000063a:	9b07      	ldr	r3, [sp, #28]
1000063c:	781b      	ldrb	r3, [r3, #0]
1000063e:	2b2b      	cmp	r3, #43	; 0x2b
10000640:	d06f      	beq.n	10000722 <z_cbvprintf_impl+0x166>
10000642:	d868      	bhi.n	10000716 <z_cbvprintf_impl+0x15a>
10000644:	2b20      	cmp	r3, #32
10000646:	d071      	beq.n	1000072c <z_cbvprintf_impl+0x170>
10000648:	2b23      	cmp	r3, #35	; 0x23
1000064a:	d071      	beq.n	10000730 <z_cbvprintf_impl+0x174>
1000064c:	2a00      	cmp	r2, #0
1000064e:	d005      	beq.n	1000065c <z_cbvprintf_impl+0xa0>
10000650:	ae12      	add	r6, sp, #72	; 0x48
10000652:	7a32      	ldrb	r2, [r6, #8]
10000654:	0011      	movs	r1, r2
10000656:	2240      	movs	r2, #64	; 0x40
10000658:	430a      	orrs	r2, r1
1000065a:	7232      	strb	r2, [r6, #8]
1000065c:	2d00      	cmp	r5, #0
1000065e:	d004      	beq.n	1000066a <z_cbvprintf_impl+0xae>
10000660:	2220      	movs	r2, #32
10000662:	ad12      	add	r5, sp, #72	; 0x48
10000664:	7a2e      	ldrb	r6, [r5, #8]
10000666:	4332      	orrs	r2, r6
10000668:	722a      	strb	r2, [r5, #8]
1000066a:	2800      	cmp	r0, #0
1000066c:	d004      	beq.n	10000678 <z_cbvprintf_impl+0xbc>
1000066e:	2210      	movs	r2, #16
10000670:	a812      	add	r0, sp, #72	; 0x48
10000672:	7a05      	ldrb	r5, [r0, #8]
10000674:	432a      	orrs	r2, r5
10000676:	7202      	strb	r2, [r0, #8]
10000678:	9a03      	ldr	r2, [sp, #12]
1000067a:	2a00      	cmp	r2, #0
1000067c:	d004      	beq.n	10000688 <z_cbvprintf_impl+0xcc>
1000067e:	2208      	movs	r2, #8
10000680:	a912      	add	r1, sp, #72	; 0x48
10000682:	7a08      	ldrb	r0, [r1, #8]
10000684:	4302      	orrs	r2, r0
10000686:	720a      	strb	r2, [r1, #8]
10000688:	4662      	mov	r2, ip
1000068a:	2a00      	cmp	r2, #0
1000068c:	d004      	beq.n	10000698 <z_cbvprintf_impl+0xdc>
1000068e:	2204      	movs	r2, #4
10000690:	a912      	add	r1, sp, #72	; 0x48
10000692:	7a08      	ldrb	r0, [r1, #8]
10000694:	4302      	orrs	r2, r0
10000696:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000698:	2144      	movs	r1, #68	; 0x44
1000069a:	a812      	add	r0, sp, #72	; 0x48
1000069c:	7a02      	ldrb	r2, [r0, #8]
1000069e:	4011      	ands	r1, r2
100006a0:	2944      	cmp	r1, #68	; 0x44
100006a2:	d102      	bne.n	100006aa <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
100006a4:	2140      	movs	r1, #64	; 0x40
100006a6:	438a      	bics	r2, r1
100006a8:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100006aa:	2280      	movs	r2, #128	; 0x80
100006ac:	7a01      	ldrb	r1, [r0, #8]
100006ae:	4252      	negs	r2, r2
100006b0:	430a      	orrs	r2, r1
100006b2:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
100006b4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
100006b6:	250a      	movs	r5, #10
100006b8:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
100006ba:	2b2a      	cmp	r3, #42	; 0x2a
100006bc:	d140      	bne.n	10000740 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
100006be:	7a41      	ldrb	r1, [r0, #9]
100006c0:	3b29      	subs	r3, #41	; 0x29
100006c2:	430b      	orrs	r3, r1
		return ++sp;
100006c4:	3201      	adds	r2, #1
		conv->width_star = true;
100006c6:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
100006c8:	7815      	ldrb	r5, [r2, #0]
100006ca:	2602      	movs	r6, #2
100006cc:	0029      	movs	r1, r5
100006ce:	392e      	subs	r1, #46	; 0x2e
100006d0:	424b      	negs	r3, r1
100006d2:	4159      	adcs	r1, r3
100006d4:	a812      	add	r0, sp, #72	; 0x48
100006d6:	7a43      	ldrb	r3, [r0, #9]
100006d8:	0049      	lsls	r1, r1, #1
100006da:	43b3      	bics	r3, r6
100006dc:	430b      	orrs	r3, r1
100006de:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
100006e0:	2d2e      	cmp	r5, #46	; 0x2e
100006e2:	d145      	bne.n	10000770 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
100006e4:	7853      	ldrb	r3, [r2, #1]
100006e6:	2b2a      	cmp	r3, #42	; 0x2a
100006e8:	d03d      	beq.n	10000766 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
100006ea:	2300      	movs	r3, #0
	++sp;
100006ec:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
100006ee:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
100006f0:	7811      	ldrb	r1, [r2, #0]
100006f2:	1c55      	adds	r5, r2, #1
100006f4:	0008      	movs	r0, r1
100006f6:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100006f8:	2809      	cmp	r0, #9
100006fa:	d963      	bls.n	100007c4 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
100006fc:	a912      	add	r1, sp, #72	; 0x48
100006fe:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000700:	7a0d      	ldrb	r5, [r1, #8]
10000702:	07a8      	lsls	r0, r5, #30
10000704:	4318      	orrs	r0, r3
10000706:	2302      	movs	r3, #2
10000708:	439d      	bics	r5, r3
1000070a:	002b      	movs	r3, r5
1000070c:	0fc0      	lsrs	r0, r0, #31
1000070e:	0040      	lsls	r0, r0, #1
10000710:	4303      	orrs	r3, r0
10000712:	720b      	strb	r3, [r1, #8]
	return sp;
10000714:	e02c      	b.n	10000770 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10000716:	2b2d      	cmp	r3, #45	; 0x2d
10000718:	d00c      	beq.n	10000734 <z_cbvprintf_impl+0x178>
1000071a:	2b30      	cmp	r3, #48	; 0x30
1000071c:	d196      	bne.n	1000064c <z_cbvprintf_impl+0x90>
1000071e:	0032      	movs	r2, r6
10000720:	e000      	b.n	10000724 <z_cbvprintf_impl+0x168>
10000722:	9603      	str	r6, [sp, #12]
			++sp;
10000724:	9b07      	ldr	r3, [sp, #28]
10000726:	3301      	adds	r3, #1
10000728:	9307      	str	r3, [sp, #28]
	} while (loop);
1000072a:	e786      	b.n	1000063a <z_cbvprintf_impl+0x7e>
		switch (*sp) {
1000072c:	0030      	movs	r0, r6
1000072e:	e7f9      	b.n	10000724 <z_cbvprintf_impl+0x168>
10000730:	0035      	movs	r5, r6
10000732:	e7f7      	b.n	10000724 <z_cbvprintf_impl+0x168>
10000734:	46b4      	mov	ip, r6
10000736:	e7f5      	b.n	10000724 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10000738:	0032      	movs	r2, r6
1000073a:	4369      	muls	r1, r5
1000073c:	3930      	subs	r1, #48	; 0x30
1000073e:	1859      	adds	r1, r3, r1
10000740:	7813      	ldrb	r3, [r2, #0]
10000742:	1c56      	adds	r6, r2, #1
10000744:	0018      	movs	r0, r3
10000746:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000748:	2809      	cmp	r0, #9
1000074a:	d9f5      	bls.n	10000738 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
1000074c:	9b07      	ldr	r3, [sp, #28]
1000074e:	4293      	cmp	r3, r2
10000750:	d0ba      	beq.n	100006c8 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10000752:	2502      	movs	r5, #2
		conv->width_value = width;
10000754:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10000756:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10000758:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
1000075a:	0fc9      	lsrs	r1, r1, #31
1000075c:	0049      	lsls	r1, r1, #1
1000075e:	43a8      	bics	r0, r5
10000760:	4301      	orrs	r1, r0
10000762:	7219      	strb	r1, [r3, #8]
10000764:	e7b0      	b.n	100006c8 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10000766:	2304      	movs	r3, #4
10000768:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
1000076a:	3202      	adds	r2, #2
		conv->prec_star = true;
1000076c:	430b      	orrs	r3, r1
1000076e:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10000770:	7811      	ldrb	r1, [r2, #0]
10000772:	ab12      	add	r3, sp, #72	; 0x48
10000774:	296c      	cmp	r1, #108	; 0x6c
10000776:	d045      	beq.n	10000804 <z_cbvprintf_impl+0x248>
10000778:	d829      	bhi.n	100007ce <z_cbvprintf_impl+0x212>
1000077a:	2968      	cmp	r1, #104	; 0x68
1000077c:	d030      	beq.n	100007e0 <z_cbvprintf_impl+0x224>
1000077e:	296a      	cmp	r1, #106	; 0x6a
10000780:	d04c      	beq.n	1000081c <z_cbvprintf_impl+0x260>
10000782:	294c      	cmp	r1, #76	; 0x4c
10000784:	d054      	beq.n	10000830 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10000786:	7811      	ldrb	r1, [r2, #0]
10000788:	1c53      	adds	r3, r2, #1
1000078a:	aa12      	add	r2, sp, #72	; 0x48
1000078c:	9307      	str	r3, [sp, #28]
1000078e:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000790:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
10000792:	2978      	cmp	r1, #120	; 0x78
10000794:	d900      	bls.n	10000798 <z_cbvprintf_impl+0x1dc>
10000796:	e0b9      	b.n	1000090c <z_cbvprintf_impl+0x350>
10000798:	296d      	cmp	r1, #109	; 0x6d
1000079a:	d850      	bhi.n	1000083e <z_cbvprintf_impl+0x282>
1000079c:	2969      	cmp	r1, #105	; 0x69
1000079e:	d900      	bls.n	100007a2 <z_cbvprintf_impl+0x1e6>
100007a0:	e0b4      	b.n	1000090c <z_cbvprintf_impl+0x350>
100007a2:	2957      	cmp	r1, #87	; 0x57
100007a4:	d866      	bhi.n	10000874 <z_cbvprintf_impl+0x2b8>
100007a6:	2941      	cmp	r1, #65	; 0x41
100007a8:	d003      	beq.n	100007b2 <z_cbvprintf_impl+0x1f6>
100007aa:	3945      	subs	r1, #69	; 0x45
100007ac:	2902      	cmp	r1, #2
100007ae:	d900      	bls.n	100007b2 <z_cbvprintf_impl+0x1f6>
100007b0:	e0ac      	b.n	1000090c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
100007b2:	2307      	movs	r3, #7
100007b4:	a912      	add	r1, sp, #72	; 0x48
100007b6:	7a8a      	ldrb	r2, [r1, #10]
100007b8:	439a      	bics	r2, r3
100007ba:	3b03      	subs	r3, #3
100007bc:	4313      	orrs	r3, r2
100007be:	728b      	strb	r3, [r1, #10]
			unsupported = true;
100007c0:	2301      	movs	r3, #1
			break;
100007c2:	e073      	b.n	100008ac <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
100007c4:	4373      	muls	r3, r6
100007c6:	3b30      	subs	r3, #48	; 0x30
100007c8:	002a      	movs	r2, r5
100007ca:	185b      	adds	r3, r3, r1
100007cc:	e790      	b.n	100006f0 <z_cbvprintf_impl+0x134>
	switch (*sp) {
100007ce:	2974      	cmp	r1, #116	; 0x74
100007d0:	d029      	beq.n	10000826 <z_cbvprintf_impl+0x26a>
100007d2:	297a      	cmp	r1, #122	; 0x7a
100007d4:	d1d7      	bne.n	10000786 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
100007d6:	2178      	movs	r1, #120	; 0x78
100007d8:	7a58      	ldrb	r0, [r3, #9]
100007da:	4388      	bics	r0, r1
100007dc:	3948      	subs	r1, #72	; 0x48
100007de:	e00d      	b.n	100007fc <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
100007e0:	7850      	ldrb	r0, [r2, #1]
100007e2:	2178      	movs	r1, #120	; 0x78
100007e4:	2868      	cmp	r0, #104	; 0x68
100007e6:	d106      	bne.n	100007f6 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
100007e8:	7a58      	ldrb	r0, [r3, #9]
100007ea:	4388      	bics	r0, r1
100007ec:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
100007ee:	4301      	orrs	r1, r0
100007f0:	7259      	strb	r1, [r3, #9]
			++sp;
100007f2:	3202      	adds	r2, #2
100007f4:	e7c7      	b.n	10000786 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
100007f6:	7a58      	ldrb	r0, [r3, #9]
100007f8:	4388      	bics	r0, r1
100007fa:	2110      	movs	r1, #16
100007fc:	4301      	orrs	r1, r0
100007fe:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000800:	3201      	adds	r2, #1
10000802:	e7c0      	b.n	10000786 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000804:	7850      	ldrb	r0, [r2, #1]
10000806:	2178      	movs	r1, #120	; 0x78
10000808:	286c      	cmp	r0, #108	; 0x6c
1000080a:	d103      	bne.n	10000814 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
1000080c:	7a58      	ldrb	r0, [r3, #9]
1000080e:	4388      	bics	r0, r1
10000810:	3958      	subs	r1, #88	; 0x58
10000812:	e7ec      	b.n	100007ee <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000814:	7a58      	ldrb	r0, [r3, #9]
10000816:	4388      	bics	r0, r1
10000818:	2118      	movs	r1, #24
1000081a:	e7ef      	b.n	100007fc <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
1000081c:	2178      	movs	r1, #120	; 0x78
1000081e:	7a58      	ldrb	r0, [r3, #9]
10000820:	4388      	bics	r0, r1
10000822:	3950      	subs	r1, #80	; 0x50
10000824:	e7ea      	b.n	100007fc <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10000826:	2178      	movs	r1, #120	; 0x78
10000828:	7a58      	ldrb	r0, [r3, #9]
1000082a:	4388      	bics	r0, r1
1000082c:	3940      	subs	r1, #64	; 0x40
1000082e:	e7e5      	b.n	100007fc <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000830:	8918      	ldrh	r0, [r3, #8]
10000832:	49a5      	ldr	r1, [pc, #660]	; (10000ac8 <z_cbvprintf_impl+0x50c>)
10000834:	4008      	ands	r0, r1
10000836:	49a5      	ldr	r1, [pc, #660]	; (10000acc <z_cbvprintf_impl+0x510>)
10000838:	4301      	orrs	r1, r0
1000083a:	8119      	strh	r1, [r3, #8]
		break;
1000083c:	e7e0      	b.n	10000800 <z_cbvprintf_impl+0x244>
1000083e:	2001      	movs	r0, #1
10000840:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000842:	396e      	subs	r1, #110	; 0x6e
10000844:	b2c9      	uxtb	r1, r1
10000846:	408d      	lsls	r5, r1
10000848:	0029      	movs	r1, r5
1000084a:	4da1      	ldr	r5, [pc, #644]	; (10000ad0 <z_cbvprintf_impl+0x514>)
1000084c:	4229      	tst	r1, r5
1000084e:	d138      	bne.n	100008c2 <z_cbvprintf_impl+0x306>
10000850:	2524      	movs	r5, #36	; 0x24
10000852:	4229      	tst	r1, r5
10000854:	d151      	bne.n	100008fa <z_cbvprintf_impl+0x33e>
10000856:	4201      	tst	r1, r0
10000858:	d058      	beq.n	1000090c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
1000085a:	2107      	movs	r1, #7
1000085c:	7a90      	ldrb	r0, [r2, #10]
1000085e:	4388      	bics	r0, r1
10000860:	3904      	subs	r1, #4
10000862:	4301      	orrs	r1, r0
10000864:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000866:	2278      	movs	r2, #120	; 0x78
10000868:	4013      	ands	r3, r2
1000086a:	3b40      	subs	r3, #64	; 0x40
1000086c:	425a      	negs	r2, r3
1000086e:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000870:	b2db      	uxtb	r3, r3
10000872:	e01b      	b.n	100008ac <z_cbvprintf_impl+0x2f0>
10000874:	2001      	movs	r0, #1
	switch (conv->specifier) {
10000876:	000d      	movs	r5, r1
10000878:	0006      	movs	r6, r0
1000087a:	3d58      	subs	r5, #88	; 0x58
1000087c:	b2ed      	uxtb	r5, r5
1000087e:	40ae      	lsls	r6, r5
10000880:	0035      	movs	r5, r6
10000882:	26e2      	movs	r6, #226	; 0xe2
10000884:	0236      	lsls	r6, r6, #8
10000886:	4235      	tst	r5, r6
10000888:	d193      	bne.n	100007b2 <z_cbvprintf_impl+0x1f6>
1000088a:	4e92      	ldr	r6, [pc, #584]	; (10000ad4 <z_cbvprintf_impl+0x518>)
1000088c:	4235      	tst	r5, r6
1000088e:	d122      	bne.n	100008d6 <z_cbvprintf_impl+0x31a>
10000890:	2184      	movs	r1, #132	; 0x84
10000892:	0289      	lsls	r1, r1, #10
10000894:	420d      	tst	r5, r1
10000896:	d039      	beq.n	1000090c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10000898:	2507      	movs	r5, #7
1000089a:	7a91      	ldrb	r1, [r2, #10]
1000089c:	43a9      	bics	r1, r5
1000089e:	4301      	orrs	r1, r0
100008a0:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100008a2:	2178      	movs	r1, #120	; 0x78
100008a4:	400b      	ands	r3, r1
100008a6:	2b40      	cmp	r3, #64	; 0x40
100008a8:	d011      	beq.n	100008ce <z_cbvprintf_impl+0x312>
	bool unsupported = false;
100008aa:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
100008ac:	aa12      	add	r2, sp, #72	; 0x48
100008ae:	7a11      	ldrb	r1, [r2, #8]
100008b0:	0788      	lsls	r0, r1, #30
100008b2:	0fc0      	lsrs	r0, r0, #31
100008b4:	4303      	orrs	r3, r0
100008b6:	2002      	movs	r0, #2
100008b8:	005b      	lsls	r3, r3, #1
100008ba:	4381      	bics	r1, r0
100008bc:	4319      	orrs	r1, r3
100008be:	7211      	strb	r1, [r2, #8]
	return sp;
100008c0:	e6a4      	b.n	1000060c <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
100008c2:	2107      	movs	r1, #7
100008c4:	7a95      	ldrb	r5, [r2, #10]
100008c6:	438d      	bics	r5, r1
100008c8:	3905      	subs	r1, #5
100008ca:	4329      	orrs	r1, r5
100008cc:	e7e8      	b.n	100008a0 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
100008ce:	7a13      	ldrb	r3, [r2, #8]
100008d0:	4303      	orrs	r3, r0
		conv->invalid = true;
100008d2:	7213      	strb	r3, [r2, #8]
		break;
100008d4:	e7e9      	b.n	100008aa <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
100008d6:	2507      	movs	r5, #7
100008d8:	7a96      	ldrb	r6, [r2, #10]
100008da:	43ae      	bics	r6, r5
100008dc:	3d05      	subs	r5, #5
100008de:	4335      	orrs	r5, r6
100008e0:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100008e2:	2578      	movs	r5, #120	; 0x78
100008e4:	402b      	ands	r3, r5
100008e6:	2b40      	cmp	r3, #64	; 0x40
100008e8:	d102      	bne.n	100008f0 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
100008ea:	7a15      	ldrb	r5, [r2, #8]
100008ec:	4328      	orrs	r0, r5
100008ee:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
100008f0:	2963      	cmp	r1, #99	; 0x63
100008f2:	d1da      	bne.n	100008aa <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
100008f4:	1e5a      	subs	r2, r3, #1
100008f6:	4193      	sbcs	r3, r2
100008f8:	e7ba      	b.n	10000870 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
100008fa:	2107      	movs	r1, #7
100008fc:	7a90      	ldrb	r0, [r2, #10]
100008fe:	4388      	bics	r0, r1
10000900:	3904      	subs	r1, #4
10000902:	4301      	orrs	r1, r0
10000904:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000906:	2278      	movs	r2, #120	; 0x78
10000908:	4013      	ands	r3, r2
1000090a:	e7f3      	b.n	100008f4 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
1000090c:	2301      	movs	r3, #1
1000090e:	aa12      	add	r2, sp, #72	; 0x48
10000910:	7a11      	ldrb	r1, [r2, #8]
10000912:	430b      	orrs	r3, r1
10000914:	e7dd      	b.n	100008d2 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
10000916:	7a19      	ldrb	r1, [r3, #8]
10000918:	297f      	cmp	r1, #127	; 0x7f
1000091a:	d90f      	bls.n	1000093c <z_cbvprintf_impl+0x380>
			width = conv->width_value;
1000091c:	68db      	ldr	r3, [r3, #12]
		int width = -1;
1000091e:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000920:	ab12      	add	r3, sp, #72	; 0x48
10000922:	0751      	lsls	r1, r2, #29
10000924:	d50c      	bpl.n	10000940 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10000926:	cc04      	ldmia	r4!, {r2}
10000928:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
1000092a:	2a00      	cmp	r2, #0
1000092c:	da0c      	bge.n	10000948 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
1000092e:	2102      	movs	r1, #2
10000930:	7a5a      	ldrb	r2, [r3, #9]
10000932:	438a      	bics	r2, r1
10000934:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10000936:	2301      	movs	r3, #1
10000938:	425b      	negs	r3, r3
1000093a:	e004      	b.n	10000946 <z_cbvprintf_impl+0x38a>
		int width = -1;
1000093c:	2301      	movs	r3, #1
1000093e:	e674      	b.n	1000062a <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10000940:	0792      	lsls	r2, r2, #30
10000942:	d5f8      	bpl.n	10000936 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10000944:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10000946:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10000948:	2500      	movs	r5, #0
1000094a:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
1000094c:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
1000094e:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10000950:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000952:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10000954:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000956:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10000958:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
1000095a:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
1000095c:	2b01      	cmp	r3, #1
1000095e:	d130      	bne.n	100009c2 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10000960:	1ed0      	subs	r0, r2, #3
10000962:	2804      	cmp	r0, #4
10000964:	d804      	bhi.n	10000970 <z_cbvprintf_impl+0x3b4>
10000966:	f7ff fc1f 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000096a:	450e      	.short	0x450e
1000096c:	0e45      	.short	0x0e45
1000096e:	0e          	.byte	0x0e
1000096f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10000970:	6823      	ldr	r3, [r4, #0]
10000972:	17d8      	asrs	r0, r3, #31
10000974:	9312      	str	r3, [sp, #72]	; 0x48
10000976:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10000978:	2a01      	cmp	r2, #1
1000097a:	d109      	bne.n	10000990 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
1000097c:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
1000097e:	9312      	str	r3, [sp, #72]	; 0x48
10000980:	17db      	asrs	r3, r3, #31
10000982:	604b      	str	r3, [r1, #4]
10000984:	e006      	b.n	10000994 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000986:	cc08      	ldmia	r4!, {r3}
10000988:	9312      	str	r3, [sp, #72]	; 0x48
1000098a:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
1000098c:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
1000098e:	e002      	b.n	10000996 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
10000990:	2a02      	cmp	r2, #2
10000992:	d014      	beq.n	100009be <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
10000994:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
10000996:	a912      	add	r1, sp, #72	; 0x48
10000998:	7a0b      	ldrb	r3, [r1, #8]
1000099a:	2003      	movs	r0, #3
1000099c:	001d      	movs	r5, r3
1000099e:	4005      	ands	r5, r0
100009a0:	4203      	tst	r3, r0
100009a2:	d045      	beq.n	10000a30 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
100009a4:	9b07      	ldr	r3, [sp, #28]
100009a6:	9a08      	ldr	r2, [sp, #32]
100009a8:	9905      	ldr	r1, [sp, #20]
100009aa:	9804      	ldr	r0, [sp, #16]
100009ac:	f001 fe4a 	bl	10002644 <outs>
100009b0:	2800      	cmp	r0, #0
100009b2:	da00      	bge.n	100009b6 <z_cbvprintf_impl+0x3fa>
100009b4:	e137      	b.n	10000c26 <z_cbvprintf_impl+0x66a>
100009b6:	183f      	adds	r7, r7, r0
			continue;
100009b8:	9b07      	ldr	r3, [sp, #28]
100009ba:	9308      	str	r3, [sp, #32]
100009bc:	e605      	b.n	100005ca <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
100009be:	b21b      	sxth	r3, r3
100009c0:	e7dd      	b.n	1000097e <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
100009c2:	2b02      	cmp	r3, #2
100009c4:	d125      	bne.n	10000a12 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
100009c6:	1ed0      	subs	r0, r2, #3
100009c8:	2804      	cmp	r0, #4
100009ca:	d804      	bhi.n	100009d6 <z_cbvprintf_impl+0x41a>
100009cc:	f7ff fbec 	bl	100001a8 <__gnu_thumb1_case_uqi>
100009d0:	1912120d 	.word	0x1912120d
100009d4:	19          	.byte	0x19
100009d5:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
100009d6:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
100009d8:	2a01      	cmp	r2, #1
100009da:	d016      	beq.n	10000a0a <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
100009dc:	9312      	str	r3, [sp, #72]	; 0x48
100009de:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
100009e0:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
100009e2:	2a02      	cmp	r2, #2
100009e4:	d1d7      	bne.n	10000996 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
100009e6:	9312      	str	r3, [sp, #72]	; 0x48
100009e8:	e7d5      	b.n	10000996 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
100009ea:	cc08      	ldmia	r4!, {r3}
100009ec:	9312      	str	r3, [sp, #72]	; 0x48
100009ee:	2300      	movs	r3, #0
100009f0:	9313      	str	r3, [sp, #76]	; 0x4c
100009f2:	e7d0      	b.n	10000996 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
100009f4:	2307      	movs	r3, #7
100009f6:	3407      	adds	r4, #7
100009f8:	439c      	bics	r4, r3
				value->uint =
100009fa:	cc03      	ldmia	r4!, {r0, r1}
100009fc:	9012      	str	r0, [sp, #72]	; 0x48
100009fe:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10000a00:	e7c9      	b.n	10000996 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10000a02:	cc08      	ldmia	r4!, {r3}
10000a04:	9312      	str	r3, [sp, #72]	; 0x48
10000a06:	2300      	movs	r3, #0
10000a08:	e7c0      	b.n	1000098c <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10000a0a:	b2db      	uxtb	r3, r3
10000a0c:	9312      	str	r3, [sp, #72]	; 0x48
10000a0e:	604d      	str	r5, [r1, #4]
10000a10:	e7c1      	b.n	10000996 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10000a12:	2b04      	cmp	r3, #4
10000a14:	d108      	bne.n	10000a28 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
10000a16:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10000a18:	3303      	adds	r3, #3
10000a1a:	439c      	bics	r4, r3
10000a1c:	6820      	ldr	r0, [r4, #0]
10000a1e:	6861      	ldr	r1, [r4, #4]
10000a20:	3408      	adds	r4, #8
10000a22:	9012      	str	r0, [sp, #72]	; 0x48
10000a24:	9113      	str	r1, [sp, #76]	; 0x4c
10000a26:	e7b6      	b.n	10000996 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10000a28:	2b03      	cmp	r3, #3
10000a2a:	d1b4      	bne.n	10000996 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000a2c:	cc08      	ldmia	r4!, {r3}
10000a2e:	e7da      	b.n	100009e6 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10000a30:	7ac8      	ldrb	r0, [r1, #11]
10000a32:	2878      	cmp	r0, #120	; 0x78
10000a34:	d8c0      	bhi.n	100009b8 <z_cbvprintf_impl+0x3fc>
10000a36:	2862      	cmp	r0, #98	; 0x62
10000a38:	d82b      	bhi.n	10000a92 <z_cbvprintf_impl+0x4d6>
10000a3a:	2825      	cmp	r0, #37	; 0x25
10000a3c:	d100      	bne.n	10000a40 <z_cbvprintf_impl+0x484>
10000a3e:	e5cf      	b.n	100005e0 <z_cbvprintf_impl+0x24>
10000a40:	2858      	cmp	r0, #88	; 0x58
10000a42:	d1b9      	bne.n	100009b8 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000a44:	9812      	ldr	r0, [sp, #72]	; 0x48
10000a46:	9913      	ldr	r1, [sp, #76]	; 0x4c
10000a48:	231e      	movs	r3, #30
10000a4a:	aa0a      	add	r2, sp, #40	; 0x28
10000a4c:	189b      	adds	r3, r3, r2
10000a4e:	9300      	str	r3, [sp, #0]
10000a50:	aa14      	add	r2, sp, #80	; 0x50
10000a52:	ab0c      	add	r3, sp, #48	; 0x30
10000a54:	f001 fda9 	bl	100025aa <encode_uint>
			if (precision >= 0) {
10000a58:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10000a5a:	0006      	movs	r6, r0
			if (precision >= 0) {
10000a5c:	2b00      	cmp	r3, #0
10000a5e:	db0d      	blt.n	10000a7c <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10000a60:	231e      	movs	r3, #30
				conv->flag_zero = false;
10000a62:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000a64:	aa0a      	add	r2, sp, #40	; 0x28
10000a66:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10000a68:	aa12      	add	r2, sp, #72	; 0x48
10000a6a:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10000a6c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10000a6e:	4381      	bics	r1, r0
10000a70:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000a72:	9906      	ldr	r1, [sp, #24]
10000a74:	4299      	cmp	r1, r3
10000a76:	d901      	bls.n	10000a7c <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10000a78:	1acb      	subs	r3, r1, r3
10000a7a:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10000a7c:	2e00      	cmp	r6, #0
10000a7e:	d09b      	beq.n	100009b8 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000a80:	231e      	movs	r3, #30
10000a82:	aa0a      	add	r2, sp, #40	; 0x28
10000a84:	189b      	adds	r3, r3, r2
10000a86:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10000a88:	9306      	str	r3, [sp, #24]
10000a8a:	2d00      	cmp	r5, #0
10000a8c:	d032      	beq.n	10000af4 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
10000a8e:	3001      	adds	r0, #1
10000a90:	e030      	b.n	10000af4 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
10000a92:	3863      	subs	r0, #99	; 0x63
10000a94:	2815      	cmp	r0, #21
10000a96:	d88f      	bhi.n	100009b8 <z_cbvprintf_impl+0x3fc>
10000a98:	f7ff fb90 	bl	100001bc <__gnu_thumb1_case_shi>
10000a9c:	0068005e 	.word	0x0068005e
10000aa0:	ff8eff8e 	.word	0xff8eff8e
10000aa4:	ff8eff8e 	.word	0xff8eff8e
10000aa8:	ff8e0068 	.word	0xff8e0068
10000aac:	ff8eff8e 	.word	0xff8eff8e
10000ab0:	00a0ff8e 	.word	0x00a0ff8e
10000ab4:	007c007a 	.word	0x007c007a
10000ab8:	ff8eff8e 	.word	0xff8eff8e
10000abc:	ff8e001e 	.word	0xff8e001e
10000ac0:	ff8e007a 	.word	0xff8e007a
10000ac4:	007aff8e 	.word	0x007aff8e
10000ac8:	ffff87fd 	.word	0xffff87fd
10000acc:	00004002 	.word	0x00004002
10000ad0:	00000482 	.word	0x00000482
10000ad4:	00000801 	.word	0x00000801
			if (precision >= 0) {
10000ad8:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
10000ada:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
10000adc:	2b00      	cmp	r3, #0
10000ade:	db37      	blt.n	10000b50 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10000ae0:	0019      	movs	r1, r3
10000ae2:	0030      	movs	r0, r6
10000ae4:	f001 fde4 	bl	100026b0 <strnlen>
			bpe = bps + len;
10000ae8:	1833      	adds	r3, r6, r0
		char sign = 0;
10000aea:	2500      	movs	r5, #0
			bpe = bps + len;
10000aec:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
10000aee:	2e00      	cmp	r6, #0
10000af0:	d100      	bne.n	10000af4 <z_cbvprintf_impl+0x538>
10000af2:	e761      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10000af4:	ab12      	add	r3, sp, #72	; 0x48
10000af6:	7a9b      	ldrb	r3, [r3, #10]
10000af8:	2210      	movs	r2, #16
10000afa:	0019      	movs	r1, r3
10000afc:	4011      	ands	r1, r2
10000afe:	910b      	str	r1, [sp, #44]	; 0x2c
10000b00:	4213      	tst	r3, r2
10000b02:	d100      	bne.n	10000b06 <z_cbvprintf_impl+0x54a>
10000b04:	e085      	b.n	10000c12 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10000b06:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10000b08:	9a15      	ldr	r2, [sp, #84]	; 0x54
10000b0a:	920a      	str	r2, [sp, #40]	; 0x28
10000b0c:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
10000b0e:	065b      	lsls	r3, r3, #25
10000b10:	d501      	bpl.n	10000b16 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10000b12:	9b16      	ldr	r3, [sp, #88]	; 0x58
10000b14:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10000b16:	9b03      	ldr	r3, [sp, #12]
10000b18:	2b00      	cmp	r3, #0
10000b1a:	dc00      	bgt.n	10000b1e <z_cbvprintf_impl+0x562>
10000b1c:	e094      	b.n	10000c48 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
10000b1e:	1a1b      	subs	r3, r3, r0
10000b20:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10000b22:	ab12      	add	r3, sp, #72	; 0x48
10000b24:	7a1b      	ldrb	r3, [r3, #8]
10000b26:	075a      	lsls	r2, r3, #29
10000b28:	0fd1      	lsrs	r1, r2, #31
10000b2a:	9108      	str	r1, [sp, #32]
10000b2c:	2a00      	cmp	r2, #0
10000b2e:	da00      	bge.n	10000b32 <z_cbvprintf_impl+0x576>
10000b30:	e08a      	b.n	10000c48 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
10000b32:	065b      	lsls	r3, r3, #25
10000b34:	d400      	bmi.n	10000b38 <z_cbvprintf_impl+0x57c>
10000b36:	e078      	b.n	10000c2a <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
10000b38:	2d00      	cmp	r5, #0
10000b3a:	d007      	beq.n	10000b4c <z_cbvprintf_impl+0x590>
						OUTC(sign);
10000b3c:	0028      	movs	r0, r5
10000b3e:	9905      	ldr	r1, [sp, #20]
10000b40:	9b04      	ldr	r3, [sp, #16]
10000b42:	4798      	blx	r3
10000b44:	2800      	cmp	r0, #0
10000b46:	db6e      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000b48:	9d08      	ldr	r5, [sp, #32]
10000b4a:	3701      	adds	r7, #1
					pad = '0';
10000b4c:	2330      	movs	r3, #48	; 0x30
10000b4e:	e06d      	b.n	10000c2c <z_cbvprintf_impl+0x670>
				len = strlen(bps);
10000b50:	0030      	movs	r0, r6
10000b52:	f001 fda5 	bl	100026a0 <strlen>
10000b56:	e7c7      	b.n	10000ae8 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
10000b58:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000b5c:	ae0c      	add	r6, sp, #48	; 0x30
10000b5e:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
10000b60:	aa0a      	add	r2, sp, #40	; 0x28
10000b62:	189b      	adds	r3, r3, r2
		char sign = 0;
10000b64:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
10000b66:	2001      	movs	r0, #1
			bpe = buf + 1;
10000b68:	9306      	str	r3, [sp, #24]
10000b6a:	e7c3      	b.n	10000af4 <z_cbvprintf_impl+0x538>
				sign = '+';
10000b6c:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000b6e:	071a      	lsls	r2, r3, #28
10000b70:	d402      	bmi.n	10000b78 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
10000b72:	06db      	lsls	r3, r3, #27
10000b74:	0fdb      	lsrs	r3, r3, #31
10000b76:	015d      	lsls	r5, r3, #5
			sint = value->sint;
10000b78:	9a12      	ldr	r2, [sp, #72]	; 0x48
10000b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
10000b7c:	2b00      	cmp	r3, #0
10000b7e:	db00      	blt.n	10000b82 <z_cbvprintf_impl+0x5c6>
10000b80:	e760      	b.n	10000a44 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
10000b82:	2100      	movs	r1, #0
10000b84:	4250      	negs	r0, r2
10000b86:	4199      	sbcs	r1, r3
				sign = '-';
10000b88:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000b8a:	9012      	str	r0, [sp, #72]	; 0x48
10000b8c:	9113      	str	r1, [sp, #76]	; 0x4c
10000b8e:	e759      	b.n	10000a44 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10000b90:	2500      	movs	r5, #0
10000b92:	e757      	b.n	10000a44 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10000b94:	9812      	ldr	r0, [sp, #72]	; 0x48
10000b96:	ad12      	add	r5, sp, #72	; 0x48
10000b98:	2800      	cmp	r0, #0
10000b9a:	d034      	beq.n	10000c06 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000b9c:	231e      	movs	r3, #30
10000b9e:	aa0a      	add	r2, sp, #40	; 0x28
10000ba0:	189b      	adds	r3, r3, r2
10000ba2:	9300      	str	r3, [sp, #0]
10000ba4:	aa14      	add	r2, sp, #80	; 0x50
10000ba6:	ab0c      	add	r3, sp, #48	; 0x30
10000ba8:	2100      	movs	r1, #0
10000baa:	f001 fcfe 	bl	100025aa <encode_uint>
				conv->altform_0c = true;
10000bae:	23ef      	movs	r3, #239	; 0xef
10000bb0:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000bb2:	0006      	movs	r6, r0
				conv->altform_0c = true;
10000bb4:	401a      	ands	r2, r3
10000bb6:	4b48      	ldr	r3, [pc, #288]	; (10000cd8 <z_cbvprintf_impl+0x71c>)
10000bb8:	4313      	orrs	r3, r2
10000bba:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000bbc:	2500      	movs	r5, #0
			if (precision >= 0) {
10000bbe:	9b06      	ldr	r3, [sp, #24]
10000bc0:	42ab      	cmp	r3, r5
10000bc2:	db00      	blt.n	10000bc6 <z_cbvprintf_impl+0x60a>
10000bc4:	e74c      	b.n	10000a60 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
10000bc6:	42a8      	cmp	r0, r5
10000bc8:	d100      	bne.n	10000bcc <z_cbvprintf_impl+0x610>
10000bca:	e6f5      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000bcc:	231e      	movs	r3, #30
10000bce:	aa0a      	add	r2, sp, #40	; 0x28
10000bd0:	189b      	adds	r3, r3, r2
10000bd2:	1a18      	subs	r0, r3, r0
10000bd4:	231e      	movs	r3, #30
10000bd6:	189b      	adds	r3, r3, r2
10000bd8:	9306      	str	r3, [sp, #24]
10000bda:	e78b      	b.n	10000af4 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
10000bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
10000bde:	2a07      	cmp	r2, #7
10000be0:	d900      	bls.n	10000be4 <z_cbvprintf_impl+0x628>
10000be2:	e6e9      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
10000be4:	0010      	movs	r0, r2
10000be6:	f7ff fadf 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000bea:	040c      	.short	0x040c
10000bec:	08080c06 	.word	0x08080c06
10000bf0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10000bf2:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10000bf4:	e6e0      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10000bf6:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10000bf8:	e6de      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
10000bfa:	17fa      	asrs	r2, r7, #31
10000bfc:	601f      	str	r7, [r3, #0]
10000bfe:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10000c00:	e6da      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000c02:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10000c04:	e6d8      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10000c06:	4b35      	ldr	r3, [pc, #212]	; (10000cdc <z_cbvprintf_impl+0x720>)
		char sign = 0;
10000c08:	0005      	movs	r5, r0
10000c0a:	4e35      	ldr	r6, [pc, #212]	; (10000ce0 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
10000c0c:	2005      	movs	r0, #5
			bpe = bps + 5;
10000c0e:	9306      	str	r3, [sp, #24]
10000c10:	e770      	b.n	10000af4 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10000c12:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000c14:	0fd2      	lsrs	r2, r2, #31
10000c16:	1880      	adds	r0, r0, r2
10000c18:	e776      	b.n	10000b08 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
10000c1a:	9905      	ldr	r1, [sp, #20]
10000c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
10000c1e:	9b04      	ldr	r3, [sp, #16]
10000c20:	4798      	blx	r3
10000c22:	2800      	cmp	r0, #0
10000c24:	da05      	bge.n	10000c32 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10000c26:	b019      	add	sp, #100	; 0x64
10000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000c2a:	2320      	movs	r3, #32
					pad = '0';
10000c2c:	9309      	str	r3, [sp, #36]	; 0x24
10000c2e:	9b03      	ldr	r3, [sp, #12]
10000c30:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
10000c32:	9b08      	ldr	r3, [sp, #32]
10000c34:	001a      	movs	r2, r3
10000c36:	3a01      	subs	r2, #1
10000c38:	9208      	str	r2, [sp, #32]
10000c3a:	2b00      	cmp	r3, #0
10000c3c:	dced      	bgt.n	10000c1a <z_cbvprintf_impl+0x65e>
10000c3e:	9a03      	ldr	r2, [sp, #12]
10000c40:	19d7      	adds	r7, r2, r7
10000c42:	1aff      	subs	r7, r7, r3
10000c44:	9b08      	ldr	r3, [sp, #32]
10000c46:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
10000c48:	2d00      	cmp	r5, #0
10000c4a:	d006      	beq.n	10000c5a <z_cbvprintf_impl+0x69e>
			OUTC(sign);
10000c4c:	0028      	movs	r0, r5
10000c4e:	9905      	ldr	r1, [sp, #20]
10000c50:	9b04      	ldr	r3, [sp, #16]
10000c52:	4798      	blx	r3
10000c54:	2800      	cmp	r0, #0
10000c56:	dbe6      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000c58:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000c5a:	ab12      	add	r3, sp, #72	; 0x48
10000c5c:	7a9b      	ldrb	r3, [r3, #10]
10000c5e:	06da      	lsls	r2, r3, #27
10000c60:	d401      	bmi.n	10000c66 <z_cbvprintf_impl+0x6aa>
10000c62:	071b      	lsls	r3, r3, #28
10000c64:	d506      	bpl.n	10000c74 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
10000c66:	2030      	movs	r0, #48	; 0x30
10000c68:	9905      	ldr	r1, [sp, #20]
10000c6a:	9b04      	ldr	r3, [sp, #16]
10000c6c:	4798      	blx	r3
10000c6e:	2800      	cmp	r0, #0
10000c70:	dbd9      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000c72:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000c76:	2b00      	cmp	r3, #0
10000c78:	d007      	beq.n	10000c8a <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10000c7a:	ab12      	add	r3, sp, #72	; 0x48
10000c7c:	7ad8      	ldrb	r0, [r3, #11]
10000c7e:	9905      	ldr	r1, [sp, #20]
10000c80:	9b04      	ldr	r3, [sp, #16]
10000c82:	4798      	blx	r3
10000c84:	2800      	cmp	r0, #0
10000c86:	dbce      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000c88:	3701      	adds	r7, #1
				while (width-- > 0) {
10000c8a:	003d      	movs	r5, r7
10000c8c:	e006      	b.n	10000c9c <z_cbvprintf_impl+0x6e0>
				OUTC('0');
10000c8e:	2030      	movs	r0, #48	; 0x30
10000c90:	9905      	ldr	r1, [sp, #20]
10000c92:	9b04      	ldr	r3, [sp, #16]
10000c94:	4798      	blx	r3
10000c96:	2800      	cmp	r0, #0
10000c98:	dbc5      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000c9a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
10000c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000c9e:	19db      	adds	r3, r3, r7
10000ca0:	1b5b      	subs	r3, r3, r5
10000ca2:	2b00      	cmp	r3, #0
10000ca4:	dcf3      	bgt.n	10000c8e <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10000ca6:	0032      	movs	r2, r6
10000ca8:	9b06      	ldr	r3, [sp, #24]
10000caa:	9905      	ldr	r1, [sp, #20]
10000cac:	9804      	ldr	r0, [sp, #16]
10000cae:	f001 fcc9 	bl	10002644 <outs>
10000cb2:	2800      	cmp	r0, #0
10000cb4:	dbb7      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000cb6:	1947      	adds	r7, r0, r5
10000cb8:	003d      	movs	r5, r7
		while (width > 0) {
10000cba:	9b03      	ldr	r3, [sp, #12]
10000cbc:	195b      	adds	r3, r3, r5
10000cbe:	1bdb      	subs	r3, r3, r7
10000cc0:	2b00      	cmp	r3, #0
10000cc2:	dc00      	bgt.n	10000cc6 <z_cbvprintf_impl+0x70a>
10000cc4:	e678      	b.n	100009b8 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10000cc6:	2020      	movs	r0, #32
10000cc8:	9905      	ldr	r1, [sp, #20]
10000cca:	9b04      	ldr	r3, [sp, #16]
10000ccc:	4798      	blx	r3
10000cce:	2800      	cmp	r0, #0
10000cd0:	dba9      	blt.n	10000c26 <z_cbvprintf_impl+0x66a>
10000cd2:	3701      	adds	r7, #1
			--width;
10000cd4:	e7f1      	b.n	10000cba <z_cbvprintf_impl+0x6fe>
10000cd6:	46c0      	nop			; (mov r8, r8)
10000cd8:	00007810 	.word	0x00007810
10000cdc:	10003154 	.word	0x10003154
10000ce0:	1000314f 	.word	0x1000314f

10000ce4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000ce4:	4901      	ldr	r1, [pc, #4]	; (10000cec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000ce6:	2210      	movs	r2, #16
	str	r2, [r1]
10000ce8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000cea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000cec:	e000ed10 	.word	0xe000ed10

10000cf0 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
10000cf0:	f3bf 8f4f 	dsb	sy
10000cf4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000cf6:	b662      	cpsie	i
	isb
10000cf8:	f3bf 8f6f 	isb	sy

	bx	lr
10000cfc:	4770      	bx	lr
10000cfe:	46c0      	nop			; (mov r8, r8)

10000d00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10000d00:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000d02:	0600      	lsls	r0, r0, #24
10000d04:	d405      	bmi.n	10000d12 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000d06:	221f      	movs	r2, #31
10000d08:	401a      	ands	r2, r3
10000d0a:	2301      	movs	r3, #1
10000d0c:	4093      	lsls	r3, r2
10000d0e:	4a01      	ldr	r2, [pc, #4]	; (10000d14 <arch_irq_enable+0x14>)
10000d10:	6013      	str	r3, [r2, #0]
}
10000d12:	4770      	bx	lr
10000d14:	e000e100 	.word	0xe000e100

10000d18 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000d18:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000d1a:	25ff      	movs	r5, #255	; 0xff
10000d1c:	2203      	movs	r2, #3
10000d1e:	000b      	movs	r3, r1
10000d20:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000d22:	b240      	sxtb	r0, r0
10000d24:	4002      	ands	r2, r0
10000d26:	00d2      	lsls	r2, r2, #3
10000d28:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000d2a:	015b      	lsls	r3, r3, #5
10000d2c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000d2e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000d30:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
10000d32:	2800      	cmp	r0, #0
10000d34:	db0a      	blt.n	10000d4c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000d36:	24c0      	movs	r4, #192	; 0xc0
10000d38:	4a0a      	ldr	r2, [pc, #40]	; (10000d64 <z_arm_irq_priority_set+0x4c>)
10000d3a:	0880      	lsrs	r0, r0, #2
10000d3c:	0080      	lsls	r0, r0, #2
10000d3e:	1880      	adds	r0, r0, r2
10000d40:	00a4      	lsls	r4, r4, #2
10000d42:	5902      	ldr	r2, [r0, r4]
10000d44:	400a      	ands	r2, r1
10000d46:	4313      	orrs	r3, r2
10000d48:	5103      	str	r3, [r0, r4]
}
10000d4a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000d4c:	220f      	movs	r2, #15
10000d4e:	4010      	ands	r0, r2
10000d50:	3808      	subs	r0, #8
10000d52:	4a05      	ldr	r2, [pc, #20]	; (10000d68 <z_arm_irq_priority_set+0x50>)
10000d54:	0880      	lsrs	r0, r0, #2
10000d56:	0080      	lsls	r0, r0, #2
10000d58:	1880      	adds	r0, r0, r2
10000d5a:	69c2      	ldr	r2, [r0, #28]
10000d5c:	4011      	ands	r1, r2
10000d5e:	4319      	orrs	r1, r3
10000d60:	61c1      	str	r1, [r0, #28]
10000d62:	e7f2      	b.n	10000d4a <z_arm_irq_priority_set+0x32>
10000d64:	e000e100 	.word	0xe000e100
10000d68:	e000ed00 	.word	0xe000ed00

10000d6c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000d6c:	bf30      	wfi
    b z_SysNmiOnReset
10000d6e:	e7fd      	b.n	10000d6c <z_SysNmiOnReset>

10000d70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000d70:	22ff      	movs	r2, #255	; 0xff
10000d72:	4b08      	ldr	r3, [pc, #32]	; (10000d94 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000d74:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000d76:	4393      	bics	r3, r2
10000d78:	4a07      	ldr	r2, [pc, #28]	; (10000d98 <z_arm_prep_c+0x28>)
10000d7a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000d80:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000d84:	f000 fdd8 	bl	10001938 <z_bss_zero>
	z_data_copy();
10000d88:	f001 f9b2 	bl	100020f0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000d8c:	f000 f8f2 	bl	10000f74 <z_arm_interrupt_init>
	z_cstart();
10000d90:	f000 fe12 	bl	100019b8 <z_cstart>
10000d94:	10000100 	.word	0x10000100
10000d98:	e000ed00 	.word	0xe000ed00

10000d9c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000d9c:	4a08      	ldr	r2, [pc, #32]	; (10000dc0 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000d9e:	4909      	ldr	r1, [pc, #36]	; (10000dc4 <arch_swap+0x28>)
	_current->arch.basepri = key;
10000da0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000da2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000da4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000da6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000da8:	2380      	movs	r3, #128	; 0x80
10000daa:	4907      	ldr	r1, [pc, #28]	; (10000dc8 <arch_swap+0x2c>)
10000dac:	055b      	lsls	r3, r3, #21
10000dae:	6848      	ldr	r0, [r1, #4]
10000db0:	4303      	orrs	r3, r0
10000db2:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10000db4:	b662      	cpsie	i
10000db6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10000dba:	6893      	ldr	r3, [r2, #8]
10000dbc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10000dbe:	4770      	bx	lr
10000dc0:	200001a4 	.word	0x200001a4
10000dc4:	10003090 	.word	0x10003090
10000dc8:	e000ed00 	.word	0xe000ed00

10000dcc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10000dcc:	4913      	ldr	r1, [pc, #76]	; (10000e1c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10000dce:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10000dd0:	4813      	ldr	r0, [pc, #76]	; (10000e20 <_thread_irq_disabled+0x22>)
    add r0, r2
10000dd2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10000dd4:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10000dd8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10000dda:	4643      	mov	r3, r8
    mov r4, r9
10000ddc:	464c      	mov	r4, r9
    mov r5, r10
10000dde:	4655      	mov	r5, sl
    mov r6, r11
10000de0:	465e      	mov	r6, fp
    mov r7, ip
10000de2:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10000de4:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000de6:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10000de8:	4f0e      	ldr	r7, [pc, #56]	; (10000e24 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10000dea:	4e0f      	ldr	r6, [pc, #60]	; (10000e28 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10000dec:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10000dee:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10000df0:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10000df2:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10000df4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10000df6:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10000df8:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10000dfa:	d100      	bne.n	10000dfe <_thread_irq_disabled>
    cpsie i
10000dfc:	b662      	cpsie	i

10000dfe <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10000dfe:	4c08      	ldr	r4, [pc, #32]	; (10000e20 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10000e00:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10000e02:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10000e04:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10000e06:	4698      	mov	r8, r3
    mov r9, r4
10000e08:	46a1      	mov	r9, r4
    mov r10, r5
10000e0a:	46aa      	mov	sl, r5
    mov r11, r6
10000e0c:	46b3      	mov	fp, r6
    mov ip, r7
10000e0e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10000e10:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10000e12:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10000e14:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10000e18:	4770      	bx	lr
10000e1a:	0000      	.short	0x0000
    ldr r1, =_kernel
10000e1c:	200001a4 	.word	0x200001a4
    ldr r0, =_thread_offset_to_callee_saved
10000e20:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10000e24:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10000e28:	08000000 	.word	0x08000000

10000e2c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10000e2c:	2004      	movs	r0, #4
  mov r1, lr
10000e2e:	4671      	mov	r1, lr
  tst r1, r0
10000e30:	4201      	tst	r1, r0
  beq _stack_frame_msp
10000e32:	d002      	beq.n	10000e3a <_stack_frame_msp>
  mrs r0, PSP
10000e34:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10000e38:	d101      	bne.n	10000e3e <_stack_frame_endif>

10000e3a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10000e3a:	f3ef 8008 	mrs	r0, MSP

10000e3e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10000e3e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10000e40:	3902      	subs	r1, #2
    ldrb r1, [r1]
10000e42:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10000e44:	2902      	cmp	r1, #2
    beq _oops
10000e46:	d0ff      	beq.n	10000e48 <_oops>

10000e48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10000e48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10000e4a:	f001 fc16 	bl	1000267a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10000e4e:	bd01      	pop	{r0, pc}

10000e50 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10000e50:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10000e52:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10000e54:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10000e56:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10000e58:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10000e5a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10000e5c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10000e5e:	4906      	ldr	r1, [pc, #24]	; (10000e78 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10000e60:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10000e62:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10000e64:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10000e66:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10000e68:	2380      	movs	r3, #128	; 0x80
10000e6a:	045b      	lsls	r3, r3, #17
10000e6c:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10000e6e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10000e70:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10000e72:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10000e74:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10000e76:	bd10      	pop	{r4, pc}
10000e78:	100023c1 	.word	0x100023c1

10000e7c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10000e7c:	4b06      	ldr	r3, [pc, #24]	; (10000e98 <arch_switch_to_main_thread+0x1c>)
10000e7e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10000e80:	1c10      	adds	r0, r2, #0
10000e82:	f381 8809 	msr	PSP, r1
10000e86:	2100      	movs	r1, #0
10000e88:	b662      	cpsie	i
10000e8a:	f3bf 8f6f 	isb	sy
10000e8e:	2200      	movs	r2, #0
10000e90:	2300      	movs	r3, #0
10000e92:	f001 fa95 	bl	100023c0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10000e96:	46c0      	nop			; (mov r8, r8)
10000e98:	200001a4 	.word	0x200001a4

10000e9c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10000e9c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10000e9e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10000ea2:	4905      	ldr	r1, [pc, #20]	; (10000eb8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10000ea4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10000ea6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10000ea8:	4904      	ldr	r1, [pc, #16]	; (10000ebc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10000eaa:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10000eac:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10000eae:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10000eb0:	bc09      	pop	{r0, r3}
	mov lr, r3
10000eb2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10000eb4:	4902      	ldr	r1, [pc, #8]	; (10000ec0 <_isr_wrapper+0x24>)
	bx r1
10000eb6:	4708      	bx	r1
	ldr r1, =16
10000eb8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10000ebc:	10002ecc 	.word	0x10002ecc
	ldr r1, =z_arm_int_exit
10000ec0:	10000ec5 	.word	0x10000ec5

10000ec4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10000ec4:	4b04      	ldr	r3, [pc, #16]	; (10000ed8 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10000ec6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10000ec8:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
10000eca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10000ecc:	d002      	beq.n	10000ed4 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10000ece:	4903      	ldr	r1, [pc, #12]	; (10000edc <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10000ed0:	4a03      	ldr	r2, [pc, #12]	; (10000ee0 <_EXIT_EXC+0xc>)
	str r2, [r1]
10000ed2:	600a      	str	r2, [r1, #0]

10000ed4 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10000ed4:	4770      	bx	lr
10000ed6:	0000      	.short	0x0000
	ldr r3, =_kernel
10000ed8:	200001a4 	.word	0x200001a4
	ldr r1, =_SCS_ICSR
10000edc:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10000ee0:	10000000 	.word	0x10000000

10000ee4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10000ee4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000ee6:	4b1b      	ldr	r3, [pc, #108]	; (10000f54 <z_arm_fault+0x70>)
{
10000ee8:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000eea:	685b      	ldr	r3, [r3, #4]
{
10000eec:	b088      	sub	sp, #32
10000eee:	05db      	lsls	r3, r3, #23
10000ef0:	0ddb      	lsrs	r3, r3, #23
10000ef2:	b662      	cpsie	i
10000ef4:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10000ef8:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000efa:	0e16      	lsrs	r6, r2, #24
		return NULL;
10000efc:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000efe:	2eff      	cmp	r6, #255	; 0xff
10000f00:	d109      	bne.n	10000f16 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10000f02:	3ef3      	subs	r6, #243	; 0xf3
10000f04:	4016      	ands	r6, r2
10000f06:	2e08      	cmp	r6, #8
10000f08:	d005      	beq.n	10000f16 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10000f0a:	0001      	movs	r1, r0
			*nested_exc = true;
10000f0c:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10000f0e:	0712      	lsls	r2, r2, #28
10000f10:	d501      	bpl.n	10000f16 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10000f12:	0021      	movs	r1, r4
	*nested_exc = false;
10000f14:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10000f16:	2400      	movs	r4, #0
	switch (fault) {
10000f18:	2b03      	cmp	r3, #3
10000f1a:	d106      	bne.n	10000f2a <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10000f1c:	698b      	ldr	r3, [r1, #24]
10000f1e:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10000f20:	881a      	ldrh	r2, [r3, #0]
10000f22:	4b0d      	ldr	r3, [pc, #52]	; (10000f58 <z_arm_fault+0x74>)
10000f24:	429a      	cmp	r2, r3
10000f26:	d100      	bne.n	10000f2a <z_arm_fault+0x46>
		reason = esf->basic.r0;
10000f28:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10000f2a:	2220      	movs	r2, #32
10000f2c:	4668      	mov	r0, sp
10000f2e:	f001 fbc9 	bl	100026c4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10000f32:	9b07      	ldr	r3, [sp, #28]
10000f34:	2d00      	cmp	r5, #0
10000f36:	d00a      	beq.n	10000f4e <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10000f38:	05da      	lsls	r2, r3, #23
10000f3a:	d102      	bne.n	10000f42 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10000f3c:	4a07      	ldr	r2, [pc, #28]	; (10000f5c <z_arm_fault+0x78>)
10000f3e:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000f40:	9307      	str	r3, [sp, #28]

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10000f42:	4669      	mov	r1, sp
10000f44:	0020      	movs	r0, r4
10000f46:	f001 fb94 	bl	10002672 <z_arm_fatal_error>
}
10000f4a:	b008      	add	sp, #32
10000f4c:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000f4e:	0a5b      	lsrs	r3, r3, #9
10000f50:	025b      	lsls	r3, r3, #9
10000f52:	e7f5      	b.n	10000f40 <z_arm_fault+0x5c>
10000f54:	e000ed00 	.word	0xe000ed00
10000f58:	0000df02 	.word	0x0000df02
10000f5c:	000001ff 	.word	0x000001ff

10000f60 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10000f60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10000f64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10000f68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10000f6a:	4672      	mov	r2, lr
	bl z_arm_fault
10000f6c:	f7ff ffba 	bl	10000ee4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10000f70:	bd01      	pop	{r0, pc}
10000f72:	46c0      	nop			; (mov r8, r8)

10000f74 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f76:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10000f78:	2200      	movs	r2, #0
10000f7a:	2603      	movs	r6, #3
10000f7c:	25ff      	movs	r5, #255	; 0xff
10000f7e:	00a4      	lsls	r4, r4, #2
10000f80:	0010      	movs	r0, r2
10000f82:	002f      	movs	r7, r5
10000f84:	4030      	ands	r0, r6
10000f86:	00c0      	lsls	r0, r0, #3
10000f88:	4087      	lsls	r7, r0
10000f8a:	4905      	ldr	r1, [pc, #20]	; (10000fa0 <z_arm_interrupt_init+0x2c>)
10000f8c:	0893      	lsrs	r3, r2, #2
10000f8e:	009b      	lsls	r3, r3, #2
10000f90:	185b      	adds	r3, r3, r1
10000f92:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10000f94:	3201      	adds	r2, #1
10000f96:	43b9      	bics	r1, r7
10000f98:	5119      	str	r1, [r3, r4]
10000f9a:	2a1a      	cmp	r2, #26
10000f9c:	d1f0      	bne.n	10000f80 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000fa0:	e000e100 	.word	0xe000e100

10000fa4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000fa4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10000fa6:	4807      	ldr	r0, [pc, #28]	; (10000fc4 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000fa8:	4907      	ldr	r1, [pc, #28]	; (10000fc8 <__start+0x24>)
    adds r0, r0, r1
10000faa:	1840      	adds	r0, r0, r1
    msr PSP, r0
10000fac:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10000fb0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10000fb4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10000fb6:	4308      	orrs	r0, r1
    msr CONTROL, r0
10000fb8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10000fbc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10000fc0:	f7ff fed6 	bl	10000d70 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10000fc4:	20000200 	.word	0x20000200
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000fc8:	00000800 	.word	0x00000800

10000fcc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10000fcc:	b510      	push	{r4, lr}
	if (_current == thread) {
10000fce:	4b0a      	ldr	r3, [pc, #40]	; (10000ff8 <z_impl_k_thread_abort+0x2c>)
10000fd0:	689b      	ldr	r3, [r3, #8]
10000fd2:	4283      	cmp	r3, r0
10000fd4:	d10d      	bne.n	10000ff2 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10000fd6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10000fda:	2b00      	cmp	r3, #0
10000fdc:	d009      	beq.n	10000ff2 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000fde:	2280      	movs	r2, #128	; 0x80
10000fe0:	4b06      	ldr	r3, [pc, #24]	; (10000ffc <z_impl_k_thread_abort+0x30>)
10000fe2:	0552      	lsls	r2, r2, #21
10000fe4:	6859      	ldr	r1, [r3, #4]
10000fe6:	430a      	orrs	r2, r1
10000fe8:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10000fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000fec:	4904      	ldr	r1, [pc, #16]	; (10001000 <z_impl_k_thread_abort+0x34>)
10000fee:	400a      	ands	r2, r1
10000ff0:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10000ff2:	f001 f821 	bl	10002038 <z_thread_abort>
}
10000ff6:	bd10      	pop	{r4, pc}
10000ff8:	200001a4 	.word	0x200001a4
10000ffc:	e000ed00 	.word	0xe000ed00
10001000:	ffff7fff 	.word	0xffff7fff

10001004 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10001004:	4b01      	ldr	r3, [pc, #4]	; (1000100c <__stdout_hook_install+0x8>)
10001006:	6018      	str	r0, [r3, #0]
}
10001008:	4770      	bx	lr
1000100a:	46c0      	nop			; (mov r8, r8)
1000100c:	20000004 	.word	0x20000004

10001010 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001010:	4b0e      	ldr	r3, [pc, #56]	; (1000104c <rp2040_init+0x3c>)
10001012:	4a0f      	ldr	r2, [pc, #60]	; (10001050 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10001014:	b570      	push	{r4, r5, r6, lr}
10001016:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001018:	4d0e      	ldr	r5, [pc, #56]	; (10001054 <rp2040_init+0x44>)
1000101a:	4b0f      	ldr	r3, [pc, #60]	; (10001058 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
1000101c:	4c0f      	ldr	r4, [pc, #60]	; (1000105c <rp2040_init+0x4c>)
1000101e:	602b      	str	r3, [r5, #0]
10001020:	0019      	movs	r1, r3
10001022:	68a2      	ldr	r2, [r4, #8]
10001024:	4391      	bics	r1, r2
10001026:	d1fb      	bne.n	10001020 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10001028:	f000 fa4c 	bl	100014c4 <clocks_init>
1000102c:	4b0c      	ldr	r3, [pc, #48]	; (10001060 <rp2040_init+0x50>)
1000102e:	602b      	str	r3, [r5, #0]
10001030:	68a3      	ldr	r3, [r4, #8]
10001032:	01db      	lsls	r3, r3, #7
10001034:	3380      	adds	r3, #128	; 0x80
10001036:	d1fb      	bne.n	10001030 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10001038:	f3ef 8310 	mrs	r3, PRIMASK
1000103c:	b672      	cpsid	i
	if (key != 0U) {
1000103e:	2b00      	cmp	r3, #0
10001040:	d102      	bne.n	10001048 <rp2040_init+0x38>
	__asm__ volatile(
10001042:	b662      	cpsie	i
10001044:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10001048:	2000      	movs	r0, #0
1000104a:	bd70      	pop	{r4, r5, r6, pc}
1000104c:	4000e000 	.word	0x4000e000
10001050:	ffffcdbf 	.word	0xffffcdbf
10001054:	4000f000 	.word	0x4000f000
10001058:	003c3ffe 	.word	0x003c3ffe
1000105c:	4000c000 	.word	0x4000c000
10001060:	01ffffff 	.word	0x01ffffff

10001064 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10001064:	b510      	push	{r4, lr}
10001066:	4808      	ldr	r0, [pc, #32]	; (10001088 <uart_console_init+0x24>)
10001068:	f001 fdfd 	bl	10002c66 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
1000106c:	2800      	cmp	r0, #0
1000106e:	d008      	beq.n	10001082 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10001070:	4c06      	ldr	r4, [pc, #24]	; (1000108c <uart_console_init+0x28>)
10001072:	0020      	movs	r0, r4
10001074:	f7ff ffc6 	bl	10001004 <__stdout_hook_install>
	__printk_hook_install(console_out);
10001078:	0020      	movs	r0, r4
1000107a:	f7ff fa8d 	bl	10000598 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
1000107e:	2000      	movs	r0, #0
}
10001080:	bd10      	pop	{r4, pc}
		return -ENODEV;
10001082:	2013      	movs	r0, #19
10001084:	4240      	negs	r0, r0
10001086:	e7fb      	b.n	10001080 <uart_console_init+0x1c>
10001088:	10002e9c 	.word	0x10002e9c
1000108c:	10001091 	.word	0x10001091

10001090 <console_out>:
{
10001090:	b570      	push	{r4, r5, r6, lr}
10001092:	0004      	movs	r4, r0
10001094:	4d07      	ldr	r5, [pc, #28]	; (100010b4 <console_out+0x24>)
	if ('\n' == c) {
10001096:	280a      	cmp	r0, #10
10001098:	d104      	bne.n	100010a4 <console_out+0x14>
	api->poll_out(dev, out_char);
1000109a:	68ab      	ldr	r3, [r5, #8]
1000109c:	210d      	movs	r1, #13
1000109e:	0028      	movs	r0, r5
100010a0:	685b      	ldr	r3, [r3, #4]
100010a2:	4798      	blx	r3
100010a4:	68ab      	ldr	r3, [r5, #8]
100010a6:	0028      	movs	r0, r5
100010a8:	685b      	ldr	r3, [r3, #4]
100010aa:	b2e1      	uxtb	r1, r4
100010ac:	4798      	blx	r3
}
100010ae:	0020      	movs	r0, r4
100010b0:	bd70      	pop	{r4, r5, r6, pc}
100010b2:	46c0      	nop			; (mov r8, r8)
100010b4:	10002e9c 	.word	0x10002e9c

100010b8 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
100010b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100010ba:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100010bc:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
100010be:	6903      	ldr	r3, [r0, #16]
100010c0:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
100010c2:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
100010c4:	4a14      	ldr	r2, [pc, #80]	; (10001118 <gpio_rpi_isr+0x60>)
100010c6:	3308      	adds	r3, #8
100010c8:	009b      	lsls	r3, r3, #2
100010ca:	589b      	ldr	r3, [r3, r2]
100010cc:	2207      	movs	r2, #7
100010ce:	4022      	ands	r2, r4
100010d0:	0092      	lsls	r2, r2, #2
100010d2:	40d3      	lsrs	r3, r2
		if (events) {
100010d4:	220f      	movs	r2, #15
100010d6:	4213      	tst	r3, r2
100010d8:	d103      	bne.n	100010e2 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100010da:	3401      	adds	r4, #1
100010dc:	2c1e      	cmp	r4, #30
100010de:	d1f0      	bne.n	100010c2 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
100010e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
100010e2:	210f      	movs	r1, #15
100010e4:	0020      	movs	r0, r4
100010e6:	f000 fb33 	bl	10001750 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
100010ea:	9b01      	ldr	r3, [sp, #4]
100010ec:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100010ee:	2900      	cmp	r1, #0
100010f0:	d0f3      	beq.n	100010da <gpio_rpi_isr+0x22>
100010f2:	2701      	movs	r7, #1
100010f4:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
100010f6:	680d      	ldr	r5, [r1, #0]
100010f8:	2900      	cmp	r1, #0
100010fa:	d0ee      	beq.n	100010da <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
100010fc:	688b      	ldr	r3, [r1, #8]
100010fe:	001a      	movs	r2, r3
10001100:	403a      	ands	r2, r7
10001102:	423b      	tst	r3, r7
10001104:	d002      	beq.n	1000110c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10001106:	0030      	movs	r0, r6
10001108:	684b      	ldr	r3, [r1, #4]
1000110a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000110c:	1e2b      	subs	r3, r5, #0
1000110e:	d000      	beq.n	10001112 <gpio_rpi_isr+0x5a>
10001110:	682b      	ldr	r3, [r5, #0]
10001112:	0029      	movs	r1, r5
10001114:	001d      	movs	r5, r3
10001116:	e7ef      	b.n	100010f8 <gpio_rpi_isr+0x40>
10001118:	40014100 	.word	0x40014100

1000111c <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
1000111c:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000111e:	4903      	ldr	r1, [pc, #12]	; (1000112c <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10001120:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001122:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001124:	400b      	ands	r3, r1
10001126:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10001128:	4770      	bx	lr
1000112a:	46c0      	nop			; (mov r8, r8)
1000112c:	fffff83f 	.word	0xfffff83f

10001130 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10001130:	b510      	push	{r4, lr}
10001132:	2b03      	cmp	r3, #3
10001134:	d823      	bhi.n	1000117e <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10001136:	2a01      	cmp	r2, #1
10001138:	d002      	beq.n	10001140 <uart_rpi_set_format.isra.0+0x10>
1000113a:	2a03      	cmp	r2, #3
1000113c:	d11f      	bne.n	1000117e <uart_rpi_set_format.isra.0+0x4e>
1000113e:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10001140:	2902      	cmp	r1, #2
10001142:	d81c      	bhi.n	1000117e <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10001144:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001146:	3a01      	subs	r2, #1
10001148:	480e      	ldr	r0, [pc, #56]	; (10001184 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000114a:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000114c:	00d2      	lsls	r2, r2, #3
1000114e:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10001150:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001152:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10001154:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001156:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10001158:	4299      	cmp	r1, r3
1000115a:	d005      	beq.n	10001168 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000115c:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
1000115e:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10001160:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10001162:	424b      	negs	r3, r1
10001164:	4159      	adcs	r1, r3
10001166:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001168:	431a      	orrs	r2, r3
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000116a:	236e      	movs	r3, #110	; 0x6e
1000116c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1000116e:	404a      	eors	r2, r1
10001170:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001172:	2380      	movs	r3, #128	; 0x80
10001174:	015b      	lsls	r3, r3, #5
10001176:	4303      	orrs	r3, r0
	return 0;
10001178:	2000      	movs	r0, #0
1000117a:	601a      	str	r2, [r3, #0]
}
1000117c:	bd10      	pop	{r4, pc}
		return -EINVAL;
1000117e:	2016      	movs	r0, #22
10001180:	4240      	negs	r0, r0
10001182:	e7fb      	b.n	1000117c <uart_rpi_set_format.isra.0+0x4c>
10001184:	10003181 	.word	0x10003181

10001188 <uart_rpi_init>:
{
10001188:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
1000118a:	6845      	ldr	r5, [r0, #4]
{
1000118c:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
1000118e:	682b      	ldr	r3, [r5, #0]
{
10001190:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10001192:	6906      	ldr	r6, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10001194:	2100      	movs	r1, #0
10001196:	68a8      	ldr	r0, [r5, #8]
10001198:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
1000119a:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
1000119c:	9301      	str	r3, [sp, #4]
1000119e:	f001 fbad 	bl	100028fc <pinctrl_lookup_state>
	if (ret < 0) {
100011a2:	2800      	cmp	r0, #0
100011a4:	db23      	blt.n	100011ee <uart_rpi_init+0x66>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100011a6:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100011a8:	2200      	movs	r2, #0
100011aa:	7919      	ldrb	r1, [r3, #4]
100011ac:	6818      	ldr	r0, [r3, #0]
100011ae:	f001 fbb8 	bl	10002922 <pinctrl_configure_pins>
	if (ret < 0) {
100011b2:	2800      	cmp	r0, #0
100011b4:	db1b      	blt.n	100011ee <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
100011b6:	6831      	ldr	r1, [r6, #0]
100011b8:	9801      	ldr	r0, [sp, #4]
100011ba:	f000 fb33 	bl	10001824 <uart_init>
	if (baudrate == 0) {
100011be:	2800      	cmp	r0, #0
100011c0:	d017      	beq.n	100011f2 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
100011c2:	4b0d      	ldr	r3, [pc, #52]	; (100011f8 <uart_rpi_init+0x70>)
100011c4:	6030      	str	r0, [r6, #0]
100011c6:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
100011c8:	2201      	movs	r2, #1
100011ca:	2303      	movs	r3, #3
100011cc:	2100      	movs	r1, #0
100011ce:	6860      	ldr	r0, [r4, #4]
100011d0:	f7ff ffae 	bl	10001130 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100011d4:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100011d6:	23c0      	movs	r3, #192	; 0xc0
100011d8:	322c      	adds	r2, #44	; 0x2c
100011da:	019b      	lsls	r3, r3, #6
100011dc:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
100011de:	2600      	movs	r6, #0
100011e0:	2210      	movs	r2, #16
100011e2:	601a      	str	r2, [r3, #0]
100011e4:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
100011e6:	0020      	movs	r0, r4
100011e8:	696b      	ldr	r3, [r5, #20]
100011ea:	4798      	blx	r3
	return 0;
100011ec:	0030      	movs	r0, r6
}
100011ee:	b005      	add	sp, #20
100011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
100011f2:	2016      	movs	r0, #22
100011f4:	4240      	negs	r0, r0
100011f6:	e7fa      	b.n	100011ee <uart_rpi_init+0x66>
100011f8:	00030100 	.word	0x00030100

100011fc <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
100011fc:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
100011fe:	4b0a      	ldr	r3, [pc, #40]	; (10001228 <elapsed+0x2c>)
10001200:	4a0a      	ldr	r2, [pc, #40]	; (1000122c <elapsed+0x30>)
10001202:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001204:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10001206:	4d0a      	ldr	r5, [pc, #40]	; (10001230 <elapsed+0x34>)
10001208:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000120a:	03c9      	lsls	r1, r1, #15
1000120c:	d401      	bmi.n	10001212 <elapsed+0x16>
	    || (val1 < val2)) {
1000120e:	42a0      	cmp	r0, r4
10001210:	d204      	bcs.n	1000121c <elapsed+0x20>
		overflow_cyc += last_load;
10001212:	6811      	ldr	r1, [r2, #0]
10001214:	6828      	ldr	r0, [r5, #0]
10001216:	1809      	adds	r1, r1, r0
10001218:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
1000121a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
1000121c:	682b      	ldr	r3, [r5, #0]
1000121e:	6810      	ldr	r0, [r2, #0]
10001220:	18c0      	adds	r0, r0, r3
10001222:	1b00      	subs	r0, r0, r4
}
10001224:	bd30      	pop	{r4, r5, pc}
10001226:	46c0      	nop			; (mov r8, r8)
10001228:	e000e010 	.word	0xe000e010
1000122c:	2000016c 	.word	0x2000016c
10001230:	20000178 	.word	0x20000178

10001234 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10001234:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001236:	4a09      	ldr	r2, [pc, #36]	; (1000125c <sys_clock_driver_init+0x28>)
10001238:	6a13      	ldr	r3, [r2, #32]
1000123a:	021b      	lsls	r3, r3, #8
1000123c:	0a1b      	lsrs	r3, r3, #8
1000123e:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10001240:	4b07      	ldr	r3, [pc, #28]	; (10001260 <sys_clock_driver_init+0x2c>)
10001242:	4a08      	ldr	r2, [pc, #32]	; (10001264 <sys_clock_driver_init+0x30>)
10001244:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10001246:	4b08      	ldr	r3, [pc, #32]	; (10001268 <sys_clock_driver_init+0x34>)
10001248:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
1000124a:	4b08      	ldr	r3, [pc, #32]	; (1000126c <sys_clock_driver_init+0x38>)
1000124c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000124e:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10001250:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10001252:	6819      	ldr	r1, [r3, #0]
10001254:	430a      	orrs	r2, r1
10001256:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10001258:	4770      	bx	lr
1000125a:	46c0      	nop			; (mov r8, r8)
1000125c:	e000ed00 	.word	0xe000ed00
10001260:	20000178 	.word	0x20000178
10001264:	000030d3 	.word	0x000030d3
10001268:	2000016c 	.word	0x2000016c
1000126c:	e000e010 	.word	0xe000e010

10001270 <sys_clock_isr>:
{
10001270:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10001272:	f7ff ffc3 	bl	100011fc <elapsed>
	cycle_count += overflow_cyc;
10001276:	4b0b      	ldr	r3, [pc, #44]	; (100012a4 <sys_clock_isr+0x34>)
10001278:	4a0b      	ldr	r2, [pc, #44]	; (100012a8 <sys_clock_isr+0x38>)
1000127a:	6818      	ldr	r0, [r3, #0]
1000127c:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000127e:	4c0b      	ldr	r4, [pc, #44]	; (100012ac <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10001280:	1840      	adds	r0, r0, r1
10001282:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10001284:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10001286:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10001288:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000128a:	4909      	ldr	r1, [pc, #36]	; (100012b0 <sys_clock_isr+0x40>)
1000128c:	1b40      	subs	r0, r0, r5
1000128e:	f7fe ff9f 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10001292:	4b07      	ldr	r3, [pc, #28]	; (100012b0 <sys_clock_isr+0x40>)
10001294:	4343      	muls	r3, r0
10001296:	195b      	adds	r3, r3, r5
10001298:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
1000129a:	f000 fffb 	bl	10002294 <sys_clock_announce>
	z_arm_int_exit();
1000129e:	f7ff fe11 	bl	10000ec4 <z_arm_exc_exit>
}
100012a2:	bd70      	pop	{r4, r5, r6, pc}
100012a4:	2000016c 	.word	0x2000016c
100012a8:	20000174 	.word	0x20000174
100012ac:	20000170 	.word	0x20000170
100012b0:	000030d4 	.word	0x000030d4

100012b4 <sys_clock_set_timeout>:
{
100012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100012b6:	4d32      	ldr	r5, [pc, #200]	; (10001380 <sys_clock_set_timeout+0xcc>)
100012b8:	4f32      	ldr	r7, [pc, #200]	; (10001384 <sys_clock_set_timeout+0xd0>)
100012ba:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
100012bc:	2900      	cmp	r1, #0
100012be:	d054      	beq.n	1000136a <sys_clock_set_timeout+0xb6>
100012c0:	1c43      	adds	r3, r0, #1
100012c2:	d108      	bne.n	100012d6 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100012c4:	2201      	movs	r2, #1
100012c6:	682b      	ldr	r3, [r5, #0]
100012c8:	4393      	bics	r3, r2
100012ca:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
100012cc:	23ff      	movs	r3, #255	; 0xff
100012ce:	061b      	lsls	r3, r3, #24
100012d0:	603b      	str	r3, [r7, #0]
}
100012d2:	b005      	add	sp, #20
100012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
100012d6:	683b      	ldr	r3, [r7, #0]
100012d8:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
100012da:	2600      	movs	r6, #0
100012dc:	2801      	cmp	r0, #1
100012de:	dd04      	ble.n	100012ea <sys_clock_set_timeout+0x36>
100012e0:	4b29      	ldr	r3, [pc, #164]	; (10001388 <sys_clock_set_timeout+0xd4>)
100012e2:	001e      	movs	r6, r3
100012e4:	4298      	cmp	r0, r3
100012e6:	dc00      	bgt.n	100012ea <sys_clock_set_timeout+0x36>
100012e8:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100012ea:	f3ef 8310 	mrs	r3, PRIMASK
100012ee:	b672      	cpsid	i
100012f0:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
100012f2:	f7ff ff83 	bl	100011fc <elapsed>
	overflow_cyc = 0U;
100012f6:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
100012f8:	68ab      	ldr	r3, [r5, #8]
100012fa:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
100012fc:	4b23      	ldr	r3, [pc, #140]	; (1000138c <sys_clock_set_timeout+0xd8>)
100012fe:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10001300:	4b23      	ldr	r3, [pc, #140]	; (10001390 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10001302:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10001304:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10001306:	4b23      	ldr	r3, [pc, #140]	; (10001394 <sys_clock_set_timeout+0xe0>)
10001308:	681b      	ldr	r3, [r3, #0]
1000130a:	9300      	str	r3, [sp, #0]
1000130c:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
1000130e:	4290      	cmp	r0, r2
10001310:	db31      	blt.n	10001376 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10001312:	4b21      	ldr	r3, [pc, #132]	; (10001398 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001314:	4a21      	ldr	r2, [pc, #132]	; (1000139c <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10001316:	435e      	muls	r6, r3
		delay += unannounced;
10001318:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
1000131a:	0019      	movs	r1, r3
1000131c:	1880      	adds	r0, r0, r2
1000131e:	f7fe ff57 	bl	100001d0 <__udivsi3>
		delay =
10001322:	4b1d      	ldr	r3, [pc, #116]	; (10001398 <sys_clock_set_timeout+0xe4>)
10001324:	4358      	muls	r0, r3
		delay -= unannounced;
10001326:	9b00      	ldr	r3, [sp, #0]
10001328:	1b1b      	subs	r3, r3, r4
1000132a:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
1000132c:	2380      	movs	r3, #128	; 0x80
1000132e:	00db      	lsls	r3, r3, #3
10001330:	4298      	cmp	r0, r3
10001332:	d923      	bls.n	1000137c <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10001334:	4b1a      	ldr	r3, [pc, #104]	; (100013a0 <sys_clock_set_timeout+0xec>)
10001336:	4298      	cmp	r0, r3
10001338:	d820      	bhi.n	1000137c <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
1000133a:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
1000133c:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
1000133e:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10001340:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10001342:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001344:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10001346:	9b02      	ldr	r3, [sp, #8]
10001348:	9802      	ldr	r0, [sp, #8]
1000134a:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
1000134c:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
1000134e:	4288      	cmp	r0, r1
10001350:	d202      	bcs.n	10001358 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10001352:	9a01      	ldr	r2, [sp, #4]
10001354:	189b      	adds	r3, r3, r2
10001356:	191a      	adds	r2, r3, r4
10001358:	4b0c      	ldr	r3, [pc, #48]	; (1000138c <sys_clock_set_timeout+0xd8>)
1000135a:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
1000135c:	9b03      	ldr	r3, [sp, #12]
1000135e:	2b00      	cmp	r3, #0
10001360:	d1b7      	bne.n	100012d2 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10001362:	b662      	cpsie	i
10001364:	f3bf 8f6f 	isb	sy
10001368:	e7b3      	b.n	100012d2 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
1000136a:	683b      	ldr	r3, [r7, #0]
1000136c:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
1000136e:	1c43      	adds	r3, r0, #1
10001370:	d1b3      	bne.n	100012da <sys_clock_set_timeout+0x26>
10001372:	4805      	ldr	r0, [pc, #20]	; (10001388 <sys_clock_set_timeout+0xd4>)
10001374:	e7b8      	b.n	100012e8 <sys_clock_set_timeout+0x34>
10001376:	2080      	movs	r0, #128	; 0x80
10001378:	00c0      	lsls	r0, r0, #3
1000137a:	e7de      	b.n	1000133a <sys_clock_set_timeout+0x86>
1000137c:	0018      	movs	r0, r3
1000137e:	e7dc      	b.n	1000133a <sys_clock_set_timeout+0x86>
10001380:	e000e010 	.word	0xe000e010
10001384:	20000178 	.word	0x20000178
10001388:	0000053d 	.word	0x0000053d
1000138c:	20000174 	.word	0x20000174
10001390:	2000016c 	.word	0x2000016c
10001394:	20000170 	.word	0x20000170
10001398:	000030d4 	.word	0x000030d4
1000139c:	000030d3 	.word	0x000030d3
100013a0:	00ffc684 	.word	0x00ffc684

100013a4 <sys_clock_elapsed>:
{
100013a4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100013a6:	f3ef 8410 	mrs	r4, PRIMASK
100013aa:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100013ac:	f7ff ff26 	bl	100011fc <elapsed>
100013b0:	4b07      	ldr	r3, [pc, #28]	; (100013d0 <sys_clock_elapsed+0x2c>)
100013b2:	4a08      	ldr	r2, [pc, #32]	; (100013d4 <sys_clock_elapsed+0x30>)
100013b4:	681b      	ldr	r3, [r3, #0]
100013b6:	6812      	ldr	r2, [r2, #0]
100013b8:	1a9b      	subs	r3, r3, r2
100013ba:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100013bc:	2c00      	cmp	r4, #0
100013be:	d102      	bne.n	100013c6 <sys_clock_elapsed+0x22>
	__asm__ volatile(
100013c0:	b662      	cpsie	i
100013c2:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100013c6:	4904      	ldr	r1, [pc, #16]	; (100013d8 <sys_clock_elapsed+0x34>)
100013c8:	f7fe ff02 	bl	100001d0 <__udivsi3>
}
100013cc:	bd10      	pop	{r4, pc}
100013ce:	46c0      	nop			; (mov r8, r8)
100013d0:	20000174 	.word	0x20000174
100013d4:	20000170 	.word	0x20000170
100013d8:	000030d4 	.word	0x000030d4

100013dc <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100013de:	b085      	sub	sp, #20
100013e0:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100013e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100013e4:	0005      	movs	r5, r0
100013e6:	000f      	movs	r7, r1
        return false;
100013e8:	2000      	movs	r0, #0
    if (freq > src_freq)
100013ea:	429a      	cmp	r2, r3
100013ec:	d863      	bhi.n	100014b6 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100013ee:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100013f0:	0e1a      	lsrs	r2, r3, #24
100013f2:	021b      	lsls	r3, r3, #8
100013f4:	9203      	str	r2, [sp, #12]
100013f6:	9302      	str	r3, [sp, #8]
100013f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100013fa:	0003      	movs	r3, r0
100013fc:	9903      	ldr	r1, [sp, #12]
100013fe:	9802      	ldr	r0, [sp, #8]
10001400:	f7fe ff4c 	bl	1000029c <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001404:	436c      	muls	r4, r5
10001406:	4b2d      	ldr	r3, [pc, #180]	; (100014bc <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001408:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000140a:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
1000140c:	6863      	ldr	r3, [r4, #4]
1000140e:	4283      	cmp	r3, r0
10001410:	d200      	bcs.n	10001414 <clock_configure+0x38>
        clock->div = div;
10001412:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10001414:	1f2b      	subs	r3, r5, #4
10001416:	b2db      	uxtb	r3, r3
10001418:	9300      	str	r3, [sp, #0]
1000141a:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000141c:	9a00      	ldr	r2, [sp, #0]
1000141e:	019b      	lsls	r3, r3, #6
10001420:	4323      	orrs	r3, r4
10001422:	2a01      	cmp	r2, #1
10001424:	d81b      	bhi.n	1000145e <clock_configure+0x82>
10001426:	2f01      	cmp	r7, #1
10001428:	d119      	bne.n	1000145e <clock_configure+0x82>
1000142a:	2203      	movs	r2, #3
1000142c:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
1000142e:	68a3      	ldr	r3, [r4, #8]
10001430:	423b      	tst	r3, r7
10001432:	d0fc      	beq.n	1000142e <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001434:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001436:	6823      	ldr	r3, [r4, #0]
10001438:	0152      	lsls	r2, r2, #5
1000143a:	405a      	eors	r2, r3
1000143c:	23e0      	movs	r3, #224	; 0xe0
1000143e:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001440:	2380      	movs	r3, #128	; 0x80
10001442:	015b      	lsls	r3, r3, #5
10001444:	4323      	orrs	r3, r4
10001446:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001448:	2103      	movs	r1, #3
1000144a:	6822      	ldr	r2, [r4, #0]
1000144c:	407a      	eors	r2, r7
1000144e:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001450:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10001452:	2301      	movs	r3, #1
10001454:	40bb      	lsls	r3, r7
10001456:	68a2      	ldr	r2, [r4, #8]
10001458:	4213      	tst	r3, r2
1000145a:	d0fc      	beq.n	10001456 <clock_configure+0x7a>
1000145c:	e01a      	b.n	10001494 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000145e:	2280      	movs	r2, #128	; 0x80
10001460:	0112      	lsls	r2, r2, #4
10001462:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10001464:	4b16      	ldr	r3, [pc, #88]	; (100014c0 <clock_configure+0xe4>)
10001466:	00aa      	lsls	r2, r5, #2
10001468:	58d1      	ldr	r1, [r2, r3]
1000146a:	2900      	cmp	r1, #0
1000146c:	d005      	beq.n	1000147a <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000146e:	6958      	ldr	r0, [r3, #20]
10001470:	f7fe feae 	bl	100001d0 <__udivsi3>
10001474:	3001      	adds	r0, #1
            asm volatile (
10001476:	3801      	subs	r0, #1
10001478:	d1fd      	bne.n	10001476 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
1000147a:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000147c:	6823      	ldr	r3, [r4, #0]
1000147e:	0152      	lsls	r2, r2, #5
10001480:	405a      	eors	r2, r3
10001482:	23e0      	movs	r3, #224	; 0xe0
10001484:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001486:	2380      	movs	r3, #128	; 0x80
10001488:	015b      	lsls	r3, r3, #5
1000148a:	4323      	orrs	r3, r4
1000148c:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
1000148e:	9a00      	ldr	r2, [sp, #0]
10001490:	2a01      	cmp	r2, #1
10001492:	d9d9      	bls.n	10001448 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001494:	2380      	movs	r3, #128	; 0x80
10001496:	2280      	movs	r2, #128	; 0x80
10001498:	019b      	lsls	r3, r3, #6
1000149a:	4323      	orrs	r3, r4
1000149c:	0112      	lsls	r2, r2, #4
1000149e:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100014a0:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
100014a2:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100014a4:	0032      	movs	r2, r6
100014a6:	2300      	movs	r3, #0
100014a8:	9903      	ldr	r1, [sp, #12]
100014aa:	f7fe fef7 	bl	1000029c <__aeabi_uldivmod>
100014ae:	4c04      	ldr	r4, [pc, #16]	; (100014c0 <clock_configure+0xe4>)
100014b0:	00ad      	lsls	r5, r5, #2
100014b2:	5160      	str	r0, [r4, r5]
100014b4:	2001      	movs	r0, #1

    return true;
}
100014b6:	b005      	add	sp, #20
100014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014ba:	46c0      	nop			; (mov r8, r8)
100014bc:	40008000 	.word	0x40008000
100014c0:	2000017c 	.word	0x2000017c

100014c4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100014c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100014c6:	200c      	movs	r0, #12
100014c8:	f000 f8de 	bl	10001688 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100014cc:	f000 f8e4 	bl	10001698 <running_on_fpga>
100014d0:	2800      	cmp	r0, #0
100014d2:	d00a      	beq.n	100014ea <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100014d4:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100014d6:	4a2c      	ldr	r2, [pc, #176]	; (10001588 <clocks_init+0xc4>)
100014d8:	482c      	ldr	r0, [pc, #176]	; (1000158c <clocks_init+0xc8>)
100014da:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100014dc:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100014de:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100014e0:	2b0a      	cmp	r3, #10
100014e2:	d1fa      	bne.n	100014da <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100014e4:	4b2a      	ldr	r3, [pc, #168]	; (10001590 <clocks_init+0xcc>)
100014e6:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100014e8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
100014ea:	4d2a      	ldr	r5, [pc, #168]	; (10001594 <clocks_init+0xd0>)
100014ec:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
100014ee:	f000 f8b7 	bl	10001660 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014f2:	2201      	movs	r2, #1
100014f4:	4b28      	ldr	r3, [pc, #160]	; (10001598 <clocks_init+0xd4>)
100014f6:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100014f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
100014fa:	2b01      	cmp	r3, #1
100014fc:	d1fc      	bne.n	100014f8 <clocks_init+0x34>
100014fe:	2203      	movs	r2, #3
10001500:	4b26      	ldr	r3, [pc, #152]	; (1000159c <clocks_init+0xd8>)
10001502:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001504:	6bac      	ldr	r4, [r5, #56]	; 0x38
10001506:	2c01      	cmp	r4, #1
10001508:	d1fc      	bne.n	10001504 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000150a:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000150c:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000150e:	0021      	movs	r1, r4
10001510:	9500      	str	r5, [sp, #0]
10001512:	2306      	movs	r3, #6
10001514:	4a22      	ldr	r2, [pc, #136]	; (100015a0 <clocks_init+0xdc>)
10001516:	4823      	ldr	r0, [pc, #140]	; (100015a4 <clocks_init+0xe0>)
10001518:	f000 f854 	bl	100015c4 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000151c:	0033      	movs	r3, r6
1000151e:	0021      	movs	r1, r4
10001520:	4a21      	ldr	r2, [pc, #132]	; (100015a8 <clocks_init+0xe4>)
10001522:	4822      	ldr	r0, [pc, #136]	; (100015ac <clocks_init+0xe8>)
10001524:	9600      	str	r6, [sp, #0]
10001526:	f000 f84d 	bl	100015c4 <pll_init>
    clock_configure(clk_ref,
1000152a:	4b21      	ldr	r3, [pc, #132]	; (100015b0 <clocks_init+0xec>)
1000152c:	0029      	movs	r1, r5
    clock_configure(clk_sys,
1000152e:	4d21      	ldr	r5, [pc, #132]	; (100015b4 <clocks_init+0xf0>)
    clock_configure(clk_ref,
10001530:	9300      	str	r3, [sp, #0]
10001532:	2200      	movs	r2, #0
10001534:	2004      	movs	r0, #4
10001536:	f7ff ff51 	bl	100013dc <clock_configure>
    clock_configure(clk_sys,
1000153a:	002b      	movs	r3, r5
1000153c:	0021      	movs	r1, r4
1000153e:	2200      	movs	r2, #0
10001540:	0030      	movs	r0, r6
10001542:	9500      	str	r5, [sp, #0]
10001544:	f7ff ff4a 	bl	100013dc <clock_configure>
    clock_configure(clk_usb,
10001548:	2200      	movs	r2, #0
1000154a:	4c10      	ldr	r4, [pc, #64]	; (1000158c <clocks_init+0xc8>)
1000154c:	0011      	movs	r1, r2
1000154e:	0023      	movs	r3, r4
10001550:	9400      	str	r4, [sp, #0]
10001552:	2007      	movs	r0, #7
10001554:	f7ff ff42 	bl	100013dc <clock_configure>
    clock_configure(clk_adc,
10001558:	2200      	movs	r2, #0
1000155a:	0023      	movs	r3, r4
1000155c:	0011      	movs	r1, r2
1000155e:	9400      	str	r4, [sp, #0]
10001560:	2008      	movs	r0, #8
10001562:	f7ff ff3b 	bl	100013dc <clock_configure>
    clock_configure(clk_rtc,
10001566:	2200      	movs	r2, #0
10001568:	4b09      	ldr	r3, [pc, #36]	; (10001590 <clocks_init+0xcc>)
1000156a:	0011      	movs	r1, r2
1000156c:	9300      	str	r3, [sp, #0]
1000156e:	2009      	movs	r0, #9
10001570:	0023      	movs	r3, r4
10001572:	f7ff ff33 	bl	100013dc <clock_configure>
    clock_configure(clk_peri,
10001576:	2200      	movs	r2, #0
10001578:	002b      	movs	r3, r5
1000157a:	0011      	movs	r1, r2
1000157c:	9500      	str	r5, [sp, #0]
1000157e:	2006      	movs	r0, #6
10001580:	f7ff ff2c 	bl	100013dc <clock_configure>
10001584:	e7b0      	b.n	100014e8 <clocks_init+0x24>
10001586:	46c0      	nop			; (mov r8, r8)
10001588:	2000017c 	.word	0x2000017c
1000158c:	02dc6c00 	.word	0x02dc6c00
10001590:	0000b71b 	.word	0x0000b71b
10001594:	40008000 	.word	0x40008000
10001598:	4000b03c 	.word	0x4000b03c
1000159c:	4000b030 	.word	0x4000b030
100015a0:	59682f00 	.word	0x59682f00
100015a4:	40028000 	.word	0x40028000
100015a8:	47868c00 	.word	0x47868c00
100015ac:	4002c000 	.word	0x4002c000
100015b0:	00b71b00 	.word	0x00b71b00
100015b4:	07735940 	.word	0x07735940

100015b8 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100015b8:	4b01      	ldr	r3, [pc, #4]	; (100015c0 <clock_get_hz+0x8>)
100015ba:	0080      	lsls	r0, r0, #2
100015bc:	58c0      	ldr	r0, [r0, r3]
}
100015be:	4770      	bx	lr
100015c0:	2000017c 	.word	0x2000017c

100015c4 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100015c6:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100015c8:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100015ca:	0017      	movs	r7, r2
100015cc:	001e      	movs	r6, r3
100015ce:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100015d0:	f7fe fdfe 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100015d4:	491d      	ldr	r1, [pc, #116]	; (1000164c <pll_init+0x88>)
100015d6:	4341      	muls	r1, r0
100015d8:	0038      	movs	r0, r7
100015da:	f7fe fdf9 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100015de:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100015e0:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100015e2:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100015e4:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100015e6:	6822      	ldr	r2, [r4, #0]
100015e8:	2a00      	cmp	r2, #0
100015ea:	da0f      	bge.n	1000160c <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100015ec:	213f      	movs	r1, #63	; 0x3f
100015ee:	6822      	ldr	r2, [r4, #0]
100015f0:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100015f2:	42aa      	cmp	r2, r5
100015f4:	d10a      	bne.n	1000160c <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100015f6:	68a2      	ldr	r2, [r4, #8]
100015f8:	0512      	lsls	r2, r2, #20
100015fa:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100015fc:	4282      	cmp	r2, r0
100015fe:	d105      	bne.n	1000160c <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10001600:	21ee      	movs	r1, #238	; 0xee
10001602:	68e2      	ldr	r2, [r4, #12]
10001604:	02c9      	lsls	r1, r1, #11
10001606:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001608:	429a      	cmp	r2, r3
1000160a:	d01b      	beq.n	10001644 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000160c:	4a10      	ldr	r2, [pc, #64]	; (10001650 <pll_init+0x8c>)
1000160e:	4294      	cmp	r4, r2
10001610:	d019      	beq.n	10001646 <pll_init+0x82>
10001612:	2280      	movs	r2, #128	; 0x80
10001614:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001616:	490f      	ldr	r1, [pc, #60]	; (10001654 <pll_init+0x90>)
10001618:	4e0f      	ldr	r6, [pc, #60]	; (10001658 <pll_init+0x94>)
1000161a:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000161c:	490f      	ldr	r1, [pc, #60]	; (1000165c <pll_init+0x98>)
1000161e:	600a      	str	r2, [r1, #0]
10001620:	0017      	movs	r7, r2
10001622:	68b1      	ldr	r1, [r6, #8]
10001624:	438f      	bics	r7, r1
10001626:	d1fb      	bne.n	10001620 <pll_init+0x5c>
10001628:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000162a:	1d21      	adds	r1, r4, #4
1000162c:	0192      	lsls	r2, r2, #6
1000162e:	430a      	orrs	r2, r1
10001630:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10001632:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10001634:	60a0      	str	r0, [r4, #8]
10001636:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001638:	6821      	ldr	r1, [r4, #0]
1000163a:	2900      	cmp	r1, #0
1000163c:	dafc      	bge.n	10001638 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
1000163e:	60e3      	str	r3, [r4, #12]
10001640:	2308      	movs	r3, #8
10001642:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001646:	2280      	movs	r2, #128	; 0x80
10001648:	0192      	lsls	r2, r2, #6
1000164a:	e7e4      	b.n	10001616 <pll_init+0x52>
1000164c:	000f4240 	.word	0x000f4240
10001650:	4002c000 	.word	0x4002c000
10001654:	4000e000 	.word	0x4000e000
10001658:	4000c000 	.word	0x4000c000
1000165c:	4000f000 	.word	0x4000f000

10001660 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001660:	22aa      	movs	r2, #170	; 0xaa
10001662:	4b06      	ldr	r3, [pc, #24]	; (1000167c <xosc_init+0x1c>)
10001664:	0112      	lsls	r2, r2, #4
10001666:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10001668:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000166a:	4905      	ldr	r1, [pc, #20]	; (10001680 <xosc_init+0x20>)
1000166c:	60da      	str	r2, [r3, #12]
1000166e:	4a05      	ldr	r2, [pc, #20]	; (10001684 <xosc_init+0x24>)
10001670:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001672:	685a      	ldr	r2, [r3, #4]
10001674:	2a00      	cmp	r2, #0
10001676:	dafc      	bge.n	10001672 <xosc_init+0x12>
}
10001678:	4770      	bx	lr
1000167a:	46c0      	nop			; (mov r8, r8)
1000167c:	40024000 	.word	0x40024000
10001680:	00fab000 	.word	0x00fab000
10001684:	40026000 	.word	0x40026000

10001688 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10001688:	2380      	movs	r3, #128	; 0x80
1000168a:	4a02      	ldr	r2, [pc, #8]	; (10001694 <watchdog_start_tick+0xc>)
1000168c:	009b      	lsls	r3, r3, #2
1000168e:	4303      	orrs	r3, r0
10001690:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001692:	4770      	bx	lr
10001694:	40058000 	.word	0x40058000

10001698 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001698:	4b02      	ldr	r3, [pc, #8]	; (100016a4 <running_on_fpga+0xc>)
1000169a:	6818      	ldr	r0, [r3, #0]
1000169c:	0780      	lsls	r0, r0, #30
1000169e:	0fc0      	lsrs	r0, r0, #31
}
100016a0:	4770      	bx	lr
100016a2:	46c0      	nop			; (mov r8, r8)
100016a4:	4006c000 	.word	0x4006c000

100016a8 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100016a8:	4b08      	ldr	r3, [pc, #32]	; (100016cc <gpio_set_function+0x24>)
100016aa:	0082      	lsls	r2, r0, #2
100016ac:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016ae:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100016b0:	b510      	push	{r4, lr}
100016b2:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100016b4:	00c0      	lsls	r0, r0, #3
100016b6:	4063      	eors	r3, r4
100016b8:	24c0      	movs	r4, #192	; 0xc0
100016ba:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016bc:	2480      	movs	r4, #128	; 0x80
100016be:	0164      	lsls	r4, r4, #5
100016c0:	4322      	orrs	r2, r4
100016c2:	6013      	str	r3, [r2, #0]
100016c4:	4b02      	ldr	r3, [pc, #8]	; (100016d0 <gpio_set_function+0x28>)
100016c6:	18c0      	adds	r0, r0, r3
100016c8:	6041      	str	r1, [r0, #4]
}
100016ca:	bd10      	pop	{r4, pc}
100016cc:	4001c004 	.word	0x4001c004
100016d0:	40014000 	.word	0x40014000

100016d4 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
100016d4:	4b07      	ldr	r3, [pc, #28]	; (100016f4 <gpio_set_pulls+0x20>)
100016d6:	0080      	lsls	r0, r0, #2
100016d8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016da:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100016dc:	00c9      	lsls	r1, r1, #3
100016de:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100016e0:	430a      	orrs	r2, r1
100016e2:	405a      	eors	r2, r3
100016e4:	230c      	movs	r3, #12
100016e6:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016e8:	2380      	movs	r3, #128	; 0x80
100016ea:	015b      	lsls	r3, r3, #5
100016ec:	4303      	orrs	r3, r0
100016ee:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100016f0:	4770      	bx	lr
100016f2:	46c0      	nop			; (mov r8, r8)
100016f4:	4001c004 	.word	0x4001c004

100016f8 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
100016f8:	4b05      	ldr	r3, [pc, #20]	; (10001710 <gpio_set_input_hysteresis_enabled+0x18>)
100016fa:	0080      	lsls	r0, r0, #2
100016fc:	18c0      	adds	r0, r0, r3
100016fe:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001700:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001702:	2900      	cmp	r1, #0
10001704:	d100      	bne.n	10001708 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001706:	23c0      	movs	r3, #192	; 0xc0
10001708:	019b      	lsls	r3, r3, #6
1000170a:	4303      	orrs	r3, r0
1000170c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000170e:	4770      	bx	lr
10001710:	4001c004 	.word	0x4001c004

10001714 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001714:	4b05      	ldr	r3, [pc, #20]	; (1000172c <gpio_set_slew_rate+0x18>)
10001716:	0080      	lsls	r0, r0, #2
10001718:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000171a:	6803      	ldr	r3, [r0, #0]
1000171c:	4059      	eors	r1, r3
1000171e:	2301      	movs	r3, #1
10001720:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001722:	2380      	movs	r3, #128	; 0x80
10001724:	015b      	lsls	r3, r3, #5
10001726:	4303      	orrs	r3, r0
10001728:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000172a:	4770      	bx	lr
1000172c:	4001c004 	.word	0x4001c004

10001730 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001730:	4b06      	ldr	r3, [pc, #24]	; (1000174c <gpio_set_drive_strength+0x1c>)
10001732:	0080      	lsls	r0, r0, #2
10001734:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001736:	6803      	ldr	r3, [r0, #0]
10001738:	0109      	lsls	r1, r1, #4
1000173a:	4059      	eors	r1, r3
1000173c:	2330      	movs	r3, #48	; 0x30
1000173e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001740:	2380      	movs	r3, #128	; 0x80
10001742:	015b      	lsls	r3, r3, #5
10001744:	4303      	orrs	r3, r0
10001746:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10001748:	4770      	bx	lr
1000174a:	46c0      	nop			; (mov r8, r8)
1000174c:	4001c004 	.word	0x4001c004

10001750 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
10001750:	2207      	movs	r2, #7
10001752:	08c3      	lsrs	r3, r0, #3
10001754:	4010      	ands	r0, r2
10001756:	0080      	lsls	r0, r0, #2
10001758:	4081      	lsls	r1, r0
1000175a:	4a02      	ldr	r2, [pc, #8]	; (10001764 <gpio_acknowledge_irq+0x14>)
1000175c:	333c      	adds	r3, #60	; 0x3c
1000175e:	009b      	lsls	r3, r3, #2
10001760:	5099      	str	r1, [r3, r2]
}
10001762:	4770      	bx	lr
10001764:	40014000 	.word	0x40014000

10001768 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000176a:	23d0      	movs	r3, #208	; 0xd0
1000176c:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000176e:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001770:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001772:	4263      	negs	r3, r4
10001774:	415c      	adcs	r4, r3
10001776:	232f      	movs	r3, #47	; 0x2f
10001778:	4264      	negs	r4, r4
1000177a:	439c      	bics	r4, r3
1000177c:	4b0a      	ldr	r3, [pc, #40]	; (100017a8 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000177e:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001780:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001782:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10001784:	f7ff ffe4 	bl	10001750 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10001788:	2307      	movs	r3, #7
1000178a:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000178c:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000178e:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001790:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
10001792:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001794:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001796:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001798:	2e00      	cmp	r6, #0
1000179a:	d100      	bne.n	1000179e <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000179c:	23c0      	movs	r3, #192	; 0xc0
1000179e:	019b      	lsls	r3, r3, #6
100017a0:	4323      	orrs	r3, r4
100017a2:	601f      	str	r7, [r3, #0]
}
100017a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100017a6:	46c0      	nop			; (mov r8, r8)
100017a8:	40014130 	.word	0x40014130

100017ac <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100017ac:	4b05      	ldr	r3, [pc, #20]	; (100017c4 <gpio_set_input_enabled+0x18>)
100017ae:	0080      	lsls	r0, r0, #2
100017b0:	18c0      	adds	r0, r0, r3
100017b2:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100017b4:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100017b6:	2900      	cmp	r1, #0
100017b8:	d100      	bne.n	100017bc <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100017ba:	23c0      	movs	r3, #192	; 0xc0
100017bc:	019b      	lsls	r3, r3, #6
100017be:	4303      	orrs	r3, r0
100017c0:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100017c2:	4770      	bx	lr
100017c4:	4001c004 	.word	0x4001c004

100017c8 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100017c8:	b570      	push	{r4, r5, r6, lr}
100017ca:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100017cc:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100017ce:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100017d0:	f7ff fef2 	bl	100015b8 <clock_get_hz>
100017d4:	0021      	movs	r1, r4
100017d6:	00c0      	lsls	r0, r0, #3
100017d8:	f7fe fcfa 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100017dc:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100017de:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100017e0:	d007      	beq.n	100017f2 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100017e2:	4b0e      	ldr	r3, [pc, #56]	; (1000181c <uart_set_baudrate+0x54>)
100017e4:	429d      	cmp	r5, r3
100017e6:	d815      	bhi.n	10001814 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100017e8:	237f      	movs	r3, #127	; 0x7f
100017ea:	4018      	ands	r0, r3
100017ec:	1900      	adds	r0, r0, r4
100017ee:	002c      	movs	r4, r5
100017f0:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100017f2:	2380      	movs	r3, #128	; 0x80
100017f4:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
100017f6:	6274      	str	r4, [r6, #36]	; 0x24
100017f8:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
100017fa:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
100017fc:	362c      	adds	r6, #44	; 0x2c
100017fe:	4333      	orrs	r3, r6
10001800:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001802:	2006      	movs	r0, #6
10001804:	f7ff fed8 	bl	100015b8 <clock_get_hz>
10001808:	01a1      	lsls	r1, r4, #6
1000180a:	1949      	adds	r1, r1, r5
1000180c:	0080      	lsls	r0, r0, #2
1000180e:	f7fe fcdf 	bl	100001d0 <__udivsi3>
}
10001812:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001814:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10001816:	4c02      	ldr	r4, [pc, #8]	; (10001820 <uart_set_baudrate+0x58>)
10001818:	e7eb      	b.n	100017f2 <uart_set_baudrate+0x2a>
1000181a:	46c0      	nop			; (mov r8, r8)
1000181c:	0000fffe 	.word	0x0000fffe
10001820:	0000ffff 	.word	0x0000ffff

10001824 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001824:	b570      	push	{r4, r5, r6, lr}
10001826:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10001828:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000182a:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
1000182c:	f7ff fec4 	bl	100015b8 <clock_get_hz>
10001830:	2800      	cmp	r0, #0
10001832:	d02e      	beq.n	10001892 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001834:	4b19      	ldr	r3, [pc, #100]	; (1000189c <uart_init+0x78>)
10001836:	429c      	cmp	r4, r3
10001838:	d02c      	beq.n	10001894 <uart_init+0x70>
1000183a:	2380      	movs	r3, #128	; 0x80
1000183c:	03db      	lsls	r3, r3, #15
1000183e:	4a18      	ldr	r2, [pc, #96]	; (100018a0 <uart_init+0x7c>)
10001840:	4918      	ldr	r1, [pc, #96]	; (100018a4 <uart_init+0x80>)
10001842:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001844:	4a18      	ldr	r2, [pc, #96]	; (100018a8 <uart_init+0x84>)
10001846:	6013      	str	r3, [r2, #0]
10001848:	0018      	movs	r0, r3
1000184a:	688a      	ldr	r2, [r1, #8]
1000184c:	4390      	bics	r0, r2
1000184e:	d1fb      	bne.n	10001848 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10001850:	4b16      	ldr	r3, [pc, #88]	; (100018ac <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001852:	4a17      	ldr	r2, [pc, #92]	; (100018b0 <uart_init+0x8c>)
10001854:	18e3      	adds	r3, r4, r3
10001856:	4259      	negs	r1, r3
10001858:	414b      	adcs	r3, r1
1000185a:	2180      	movs	r1, #128	; 0x80
1000185c:	005b      	lsls	r3, r3, #1
1000185e:	0049      	lsls	r1, r1, #1
10001860:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10001862:	0020      	movs	r0, r4
10001864:	0029      	movs	r1, r5
10001866:	f7ff ffaf 	bl	100017c8 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000186a:	2360      	movs	r3, #96	; 0x60
1000186c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000186e:	0021      	movs	r1, r4
10001870:	4053      	eors	r3, r2
10001872:	226e      	movs	r2, #110	; 0x6e
10001874:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001876:	2280      	movs	r2, #128	; 0x80
10001878:	312c      	adds	r1, #44	; 0x2c
1000187a:	0152      	lsls	r2, r2, #5
1000187c:	430a      	orrs	r2, r1
1000187e:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001880:	4b0c      	ldr	r3, [pc, #48]	; (100018b4 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001882:	2210      	movs	r2, #16
10001884:	6323      	str	r3, [r4, #48]	; 0x30
10001886:	2380      	movs	r3, #128	; 0x80
10001888:	019b      	lsls	r3, r3, #6
1000188a:	430b      	orrs	r3, r1
1000188c:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000188e:	2303      	movs	r3, #3
10001890:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001892:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001894:	2380      	movs	r3, #128	; 0x80
10001896:	041b      	lsls	r3, r3, #16
10001898:	e7d1      	b.n	1000183e <uart_init+0x1a>
1000189a:	46c0      	nop			; (mov r8, r8)
1000189c:	40038000 	.word	0x40038000
100018a0:	4000e000 	.word	0x4000e000
100018a4:	4000c000 	.word	0x4000c000
100018a8:	4000f000 	.word	0x4000f000
100018ac:	bffc8000 	.word	0xbffc8000
100018b0:	200001d4 	.word	0x200001d4
100018b4:	00000301 	.word	0x00000301

100018b8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
100018b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
100018ba:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100018bc:	4e10      	ldr	r6, [pc, #64]	; (10001900 <z_sys_init_run_level+0x48>)
100018be:	0083      	lsls	r3, r0, #2
100018c0:	3001      	adds	r0, #1
100018c2:	599c      	ldr	r4, [r3, r6]
100018c4:	0083      	lsls	r3, r0, #2
100018c6:	9301      	str	r3, [sp, #4]
100018c8:	9b01      	ldr	r3, [sp, #4]
100018ca:	58f3      	ldr	r3, [r6, r3]
100018cc:	42a3      	cmp	r3, r4
100018ce:	d800      	bhi.n	100018d2 <z_sys_init_run_level+0x1a>
		}
	}
}
100018d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100018d2:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
100018d4:	6823      	ldr	r3, [r4, #0]
100018d6:	0028      	movs	r0, r5
100018d8:	4798      	blx	r3
		if (dev != NULL) {
100018da:	2d00      	cmp	r5, #0
100018dc:	d00d      	beq.n	100018fa <z_sys_init_run_level+0x42>
			if (rc != 0) {
100018de:	2800      	cmp	r0, #0
100018e0:	d007      	beq.n	100018f2 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
100018e2:	17c2      	asrs	r2, r0, #31
100018e4:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
100018e6:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
100018e8:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
100018ea:	28ff      	cmp	r0, #255	; 0xff
100018ec:	dd00      	ble.n	100018f0 <z_sys_init_run_level+0x38>
100018ee:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
100018f0:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
100018f2:	68ea      	ldr	r2, [r5, #12]
100018f4:	7853      	ldrb	r3, [r2, #1]
100018f6:	433b      	orrs	r3, r7
100018f8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100018fa:	3408      	adds	r4, #8
100018fc:	e7e4      	b.n	100018c8 <z_sys_init_run_level+0x10>
100018fe:	46c0      	nop			; (mov r8, r8)
10001900:	10003094 	.word	0x10003094

10001904 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001904:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10001906:	2401      	movs	r4, #1
10001908:	4b09      	ldr	r3, [pc, #36]	; (10001930 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000190a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
1000190c:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000190e:	f7ff ffd3 	bl	100018b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001912:	f000 fd2d 	bl	10002370 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10001916:	2004      	movs	r0, #4
10001918:	f7ff ffce 	bl	100018b8 <z_sys_init_run_level>

	z_init_static_threads();
1000191c:	f000 f8ce 	bl	10001abc <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10001920:	f7fe fde6 	bl	100004f0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001924:	4a03      	ldr	r2, [pc, #12]	; (10001934 <bg_thread_main+0x30>)
10001926:	7b13      	ldrb	r3, [r2, #12]
10001928:	43a3      	bics	r3, r4
1000192a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
1000192c:	bd10      	pop	{r4, pc}
1000192e:	46c0      	nop			; (mov r8, r8)
10001930:	200001f8 	.word	0x200001f8
10001934:	200000c0 	.word	0x200000c0

10001938 <z_bss_zero>:
{
10001938:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
1000193a:	4a03      	ldr	r2, [pc, #12]	; (10001948 <z_bss_zero+0x10>)
1000193c:	4803      	ldr	r0, [pc, #12]	; (1000194c <z_bss_zero+0x14>)
1000193e:	2100      	movs	r1, #0
10001940:	1a12      	subs	r2, r2, r0
10001942:	f001 f9ba 	bl	10002cba <z_early_memset>
}
10001946:	bd10      	pop	{r4, pc}
10001948:	200001fc 	.word	0x200001fc
1000194c:	20000050 	.word	0x20000050

10001950 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001950:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001952:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
10001954:	2501      	movs	r5, #1
{
10001956:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10001958:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
1000195a:	0201      	lsls	r1, r0, #8
1000195c:	4811      	ldr	r0, [pc, #68]	; (100019a4 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
1000195e:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10001960:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10001962:	2000      	movs	r0, #0
{
10001964:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10001966:	9504      	str	r5, [sp, #16]
10001968:	350e      	adds	r5, #14
1000196a:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000196c:	3505      	adds	r5, #5
1000196e:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10001970:	4b0d      	ldr	r3, [pc, #52]	; (100019a8 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10001972:	9005      	str	r0, [sp, #20]
10001974:	9002      	str	r0, [sp, #8]
10001976:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001978:	480c      	ldr	r0, [pc, #48]	; (100019ac <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
1000197a:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000197c:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
1000197e:	4b0c      	ldr	r3, [pc, #48]	; (100019b0 <z_init_cpu+0x60>)
10001980:	0030      	movs	r0, r6
10001982:	9500      	str	r5, [sp, #0]
10001984:	0052      	lsls	r2, r2, #1
10001986:	f000 f86f 	bl	10001a68 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000198a:	2204      	movs	r2, #4
1000198c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
1000198e:	742c      	strb	r4, [r5, #16]
10001990:	4393      	bics	r3, r2
10001992:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001994:	3401      	adds	r4, #1
10001996:	4b07      	ldr	r3, [pc, #28]	; (100019b4 <z_init_cpu+0x64>)
10001998:	02e4      	lsls	r4, r4, #11
1000199a:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
1000199c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
1000199e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
100019a0:	b006      	add	sp, #24
100019a2:	bd70      	pop	{r4, r5, r6, pc}
100019a4:	20000a00 	.word	0x20000a00
100019a8:	20000050 	.word	0x20000050
100019ac:	200001a4 	.word	0x200001a4
100019b0:	10002ccb 	.word	0x10002ccb
100019b4:	20000200 	.word	0x20000200

100019b8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
100019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100019ba:	2000      	movs	r0, #0
{
100019bc:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
100019be:	f7ff ff7b 	bl	100018b8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
100019c2:	4b21      	ldr	r3, [pc, #132]	; (10001a48 <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
100019c4:	f383 8808 	msr	MSP, r3
100019c8:	4920      	ldr	r1, [pc, #128]	; (10001a4c <z_cstart+0x94>)
100019ca:	4b21      	ldr	r3, [pc, #132]	; (10001a50 <z_cstart+0x98>)
100019cc:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
100019ce:	2500      	movs	r5, #0
100019d0:	401a      	ands	r2, r3
100019d2:	23e0      	movs	r3, #224	; 0xe0
100019d4:	041b      	lsls	r3, r3, #16
100019d6:	4313      	orrs	r3, r2
100019d8:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
100019da:	f000 fe60 	bl	1000269e <z_arm_fault_init>
	z_arm_cpu_idle_init();
100019de:	f7ff f981 	bl	10000ce4 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
100019e2:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
100019e4:	4e1b      	ldr	r6, [pc, #108]	; (10001a54 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
100019e6:	ab06      	add	r3, sp, #24
100019e8:	32ff      	adds	r2, #255	; 0xff
100019ea:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
100019ec:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
100019ee:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
100019f0:	f001 f938 	bl	10002c64 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
100019f4:	2001      	movs	r0, #1
100019f6:	f7ff ff5f 	bl	100018b8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
100019fa:	2002      	movs	r0, #2
100019fc:	f7ff ff5c 	bl	100018b8 <z_sys_init_run_level>
	z_sched_init();
10001a00:	f000 fb06 	bl	10002010 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001a04:	4c14      	ldr	r4, [pc, #80]	; (10001a58 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001a06:	4b15      	ldr	r3, [pc, #84]	; (10001a5c <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10001a08:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001a0a:	2280      	movs	r2, #128	; 0x80
10001a0c:	9305      	str	r3, [sp, #20]
10001a0e:	2301      	movs	r3, #1
10001a10:	4e13      	ldr	r6, [pc, #76]	; (10001a60 <z_cstart+0xa8>)
10001a12:	4914      	ldr	r1, [pc, #80]	; (10001a64 <z_cstart+0xac>)
10001a14:	9304      	str	r3, [sp, #16]
10001a16:	00d2      	lsls	r2, r2, #3
10001a18:	0033      	movs	r3, r6
10001a1a:	0020      	movs	r0, r4
10001a1c:	9503      	str	r5, [sp, #12]
10001a1e:	9502      	str	r5, [sp, #8]
10001a20:	9501      	str	r5, [sp, #4]
10001a22:	9500      	str	r5, [sp, #0]
10001a24:	f000 f820 	bl	10001a68 <z_setup_new_thread>
10001a28:	2204      	movs	r2, #4
10001a2a:	0007      	movs	r7, r0
10001a2c:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10001a2e:	0020      	movs	r0, r4
10001a30:	4393      	bics	r3, r2
10001a32:	7363      	strb	r3, [r4, #13]
10001a34:	f001 f98c 	bl	10002d50 <z_ready_thread>
	z_init_cpu(0);
10001a38:	0028      	movs	r0, r5
10001a3a:	f7ff ff89 	bl	10001950 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001a3e:	0032      	movs	r2, r6
10001a40:	0039      	movs	r1, r7
10001a42:	0020      	movs	r0, r4
10001a44:	f7ff fa1a 	bl	10000e7c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10001a48:	20000a00 	.word	0x20000a00
10001a4c:	e000ed00 	.word	0xe000ed00
10001a50:	ff00ffff 	.word	0xff00ffff
10001a54:	200001a4 	.word	0x200001a4
10001a58:	200000c0 	.word	0x200000c0
10001a5c:	10003192 	.word	0x10003192
10001a60:	10001905 	.word	0x10001905
10001a64:	20000b00 	.word	0x20000b00

10001a68 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10001a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10001a6a:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001a6c:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001a6e:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001a70:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001a72:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001a74:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001a76:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001a78:	2004      	movs	r0, #4
10001a7a:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10001a7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001a7e:	3207      	adds	r2, #7
	thread_base->prio = priority;
10001a80:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001a82:	2007      	movs	r0, #7
10001a84:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10001a86:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10001a8a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001a8c:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001a8e:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001a90:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001a92:	9202      	str	r2, [sp, #8]
10001a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001a96:	0020      	movs	r0, r4
10001a98:	9201      	str	r2, [sp, #4]
10001a9a:	9a08      	ldr	r2, [sp, #32]
10001a9c:	9200      	str	r2, [sp, #0]
10001a9e:	002a      	movs	r2, r5
10001aa0:	f7ff f9d6 	bl	10000e50 <arch_new_thread>
	if (!_current) {
10001aa4:	4b04      	ldr	r3, [pc, #16]	; (10001ab8 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001aa6:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001aa8:	689b      	ldr	r3, [r3, #8]
10001aaa:	42b3      	cmp	r3, r6
10001aac:	d000      	beq.n	10001ab0 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001ab0:	0028      	movs	r0, r5
10001ab2:	6663      	str	r3, [r4, #100]	; 0x64
10001ab4:	b004      	add	sp, #16
10001ab6:	bd70      	pop	{r4, r5, r6, pc}
10001ab8:	200001a4 	.word	0x200001a4

10001abc <z_init_static_threads>:
{
10001abc:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001abe:	4c20      	ldr	r4, [pc, #128]	; (10001b40 <z_init_static_threads+0x84>)
{
10001ac0:	b086      	sub	sp, #24
10001ac2:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001ac4:	4d1f      	ldr	r5, [pc, #124]	; (10001b44 <z_init_static_threads+0x88>)
10001ac6:	42ac      	cmp	r4, r5
10001ac8:	d308      	bcc.n	10001adc <z_init_static_threads+0x20>
	k_sched_lock();
10001aca:	f000 fa7b 	bl	10001fc4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001ace:	0034      	movs	r4, r6
10001ad0:	42ac      	cmp	r4, r5
10001ad2:	d319      	bcc.n	10001b08 <z_init_static_threads+0x4c>
	k_sched_unlock();
10001ad4:	f000 fa86 	bl	10001fe4 <k_sched_unlock>
}
10001ad8:	b006      	add	sp, #24
10001ada:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001ade:	9305      	str	r3, [sp, #20]
10001ae0:	6a23      	ldr	r3, [r4, #32]
10001ae2:	9304      	str	r3, [sp, #16]
10001ae4:	69e3      	ldr	r3, [r4, #28]
10001ae6:	9303      	str	r3, [sp, #12]
10001ae8:	69a3      	ldr	r3, [r4, #24]
10001aea:	9302      	str	r3, [sp, #8]
10001aec:	6963      	ldr	r3, [r4, #20]
10001aee:	9301      	str	r3, [sp, #4]
10001af0:	6923      	ldr	r3, [r4, #16]
10001af2:	9300      	str	r3, [sp, #0]
10001af4:	68e3      	ldr	r3, [r4, #12]
10001af6:	68a2      	ldr	r2, [r4, #8]
10001af8:	6861      	ldr	r1, [r4, #4]
10001afa:	6820      	ldr	r0, [r4, #0]
10001afc:	f7ff ffb4 	bl	10001a68 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001b00:	6823      	ldr	r3, [r4, #0]
10001b02:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001b04:	342c      	adds	r4, #44	; 0x2c
10001b06:	e7dd      	b.n	10001ac4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
10001b0a:	1c5a      	adds	r2, r3, #1
10001b0c:	d00f      	beq.n	10001b2e <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001b0e:	43d8      	mvns	r0, r3
10001b10:	17c0      	asrs	r0, r0, #31
10001b12:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001b14:	220a      	movs	r2, #10
10001b16:	2300      	movs	r3, #0
10001b18:	17c1      	asrs	r1, r0, #31
10001b1a:	f7fe fc03 	bl	10000324 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001b1e:	6826      	ldr	r6, [r4, #0]
10001b20:	000b      	movs	r3, r1
10001b22:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001b24:	4301      	orrs	r1, r0
10001b26:	d104      	bne.n	10001b32 <z_init_static_threads+0x76>
	z_sched_start(thread);
10001b28:	0030      	movs	r0, r6
10001b2a:	f000 fa31 	bl	10001f90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001b2e:	342c      	adds	r4, #44	; 0x2c
10001b30:	e7ce      	b.n	10001ad0 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001b32:	0030      	movs	r0, r6
10001b34:	4904      	ldr	r1, [pc, #16]	; (10001b48 <z_init_static_threads+0x8c>)
10001b36:	3018      	adds	r0, #24
10001b38:	f000 fb3e 	bl	100021b8 <z_add_timeout>
10001b3c:	e7f7      	b.n	10001b2e <z_init_static_threads+0x72>
10001b3e:	46c0      	nop			; (mov r8, r8)
10001b40:	10002f9c 	.word	0x10002f9c
10001b44:	10002f9c 	.word	0x10002f9c
10001b48:	10002da7 	.word	0x10002da7

10001b4c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
10001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b4e:	000f      	movs	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
10001b50:	0001      	movs	r1, r0
{
10001b52:	b085      	sub	sp, #20
	key = k_spin_lock(&msgq->lock);
10001b54:	3108      	adds	r1, #8
{
10001b56:	0004      	movs	r4, r0
	key = k_spin_lock(&msgq->lock);
10001b58:	9103      	str	r1, [sp, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
10001b5a:	f3ef 8610 	mrs	r6, PRIMASK
10001b5e:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
10001b60:	6a00      	ldr	r0, [r0, #32]
10001b62:	68e1      	ldr	r1, [r4, #12]
10001b64:	4288      	cmp	r0, r1
10001b66:	d22b      	bcs.n	10001bc0 <z_impl_k_msgq_put+0x74>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10001b68:	0020      	movs	r0, r4
10001b6a:	f001 f922 	bl	10002db2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
10001b6e:	0039      	movs	r1, r7
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10001b70:	1e05      	subs	r5, r0, #0
			(void)memcpy(pending_thread->base.swap_data, data,
10001b72:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
10001b74:	d00e      	beq.n	10001b94 <z_impl_k_msgq_put+0x48>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10001b76:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
10001b78:	6940      	ldr	r0, [r0, #20]
10001b7a:	f000 fda3 	bl	100026c4 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
10001b7e:	0028      	movs	r0, r5
10001b80:	66ec      	str	r4, [r5, #108]	; 0x6c
10001b82:	f001 f8e5 	bl	10002d50 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
10001b86:	9803      	ldr	r0, [sp, #12]
10001b88:	0031      	movs	r1, r6
10001b8a:	f000 f9eb 	bl	10001f64 <z_reschedule>
			return 0;
10001b8e:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
10001b90:	b005      	add	sp, #20
10001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
10001b94:	69e0      	ldr	r0, [r4, #28]
10001b96:	f000 fd95 	bl	100026c4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
10001b9a:	69e3      	ldr	r3, [r4, #28]
10001b9c:	68a2      	ldr	r2, [r4, #8]
10001b9e:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
10001ba0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
10001ba2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10001ba4:	4293      	cmp	r3, r2
10001ba6:	d101      	bne.n	10001bac <z_impl_k_msgq_put+0x60>
				msgq->write_ptr = msgq->buffer_start;
10001ba8:	6923      	ldr	r3, [r4, #16]
10001baa:	61e3      	str	r3, [r4, #28]
		result = 0;
10001bac:	2000      	movs	r0, #0
			msgq->used_msgs++;
10001bae:	6a23      	ldr	r3, [r4, #32]
10001bb0:	3301      	adds	r3, #1
10001bb2:	6223      	str	r3, [r4, #32]
	if (key != 0U) {
10001bb4:	2e00      	cmp	r6, #0
10001bb6:	d1eb      	bne.n	10001b90 <z_impl_k_msgq_put+0x44>
	__asm__ volatile(
10001bb8:	b662      	cpsie	i
10001bba:	f3bf 8f6f 	isb	sy
10001bbe:	e7e7      	b.n	10001b90 <z_impl_k_msgq_put+0x44>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10001bc0:	0011      	movs	r1, r2
10001bc2:	4319      	orrs	r1, r3
10001bc4:	d00a      	beq.n	10001bdc <z_impl_k_msgq_put+0x90>
		_current->base.swap_data = (void *) data;
10001bc6:	4907      	ldr	r1, [pc, #28]	; (10001be4 <z_impl_k_msgq_put+0x98>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10001bc8:	9803      	ldr	r0, [sp, #12]
		_current->base.swap_data = (void *) data;
10001bca:	6889      	ldr	r1, [r1, #8]
10001bcc:	614f      	str	r7, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10001bce:	9200      	str	r2, [sp, #0]
10001bd0:	0031      	movs	r1, r6
10001bd2:	0022      	movs	r2, r4
10001bd4:	9301      	str	r3, [sp, #4]
10001bd6:	f000 f9ad 	bl	10001f34 <z_pend_curr>
		return result;
10001bda:	e7d9      	b.n	10001b90 <z_impl_k_msgq_put+0x44>
		result = -ENOMSG;
10001bdc:	2023      	movs	r0, #35	; 0x23
10001bde:	4240      	negs	r0, r0
10001be0:	e7e8      	b.n	10001bb4 <z_impl_k_msgq_put+0x68>
10001be2:	46c0      	nop			; (mov r8, r8)
10001be4:	200001a4 	.word	0x200001a4

10001be8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
10001be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001bea:	0004      	movs	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
10001bec:	0027      	movs	r7, r4
{
10001bee:	0008      	movs	r0, r1
	key = k_spin_lock(&msgq->lock);
10001bf0:	3708      	adds	r7, #8
	__asm__ volatile("mrs %0, PRIMASK;"
10001bf2:	f3ef 8610 	mrs	r6, PRIMASK
10001bf6:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
10001bf8:	6a21      	ldr	r1, [r4, #32]
10001bfa:	2900      	cmp	r1, #0
10001bfc:	d032      	beq.n	10001c64 <z_impl_k_msgq_get+0x7c>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
10001bfe:	68a2      	ldr	r2, [r4, #8]
10001c00:	69a1      	ldr	r1, [r4, #24]
10001c02:	f000 fd5f 	bl	100026c4 <memcpy>
		msgq->read_ptr += msgq->msg_size;
10001c06:	69a3      	ldr	r3, [r4, #24]
10001c08:	68a2      	ldr	r2, [r4, #8]
10001c0a:	189b      	adds	r3, r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
10001c0c:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
10001c0e:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
10001c10:	4293      	cmp	r3, r2
10001c12:	d101      	bne.n	10001c18 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
10001c14:	6923      	ldr	r3, [r4, #16]
10001c16:	61a3      	str	r3, [r4, #24]
		}
		msgq->used_msgs--;
10001c18:	6a23      	ldr	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10001c1a:	0020      	movs	r0, r4
		msgq->used_msgs--;
10001c1c:	3b01      	subs	r3, #1
10001c1e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10001c20:	f001 f8c7 	bl	10002db2 <z_unpend_first_thread>
10001c24:	0005      	movs	r5, r0

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
10001c26:	2000      	movs	r0, #0
		if (pending_thread != NULL) {
10001c28:	4285      	cmp	r5, r0
10001c2a:	d02b      	beq.n	10001c84 <z_impl_k_msgq_get+0x9c>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
10001c2c:	68a2      	ldr	r2, [r4, #8]
10001c2e:	6969      	ldr	r1, [r5, #20]
10001c30:	69e0      	ldr	r0, [r4, #28]
10001c32:	f000 fd47 	bl	100026c4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
10001c36:	69e3      	ldr	r3, [r4, #28]
10001c38:	68a2      	ldr	r2, [r4, #8]
10001c3a:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
10001c3c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
10001c3e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10001c40:	4293      	cmp	r3, r2
10001c42:	d101      	bne.n	10001c48 <z_impl_k_msgq_get+0x60>
				msgq->write_ptr = msgq->buffer_start;
10001c44:	6923      	ldr	r3, [r4, #16]
10001c46:	61e3      	str	r3, [r4, #28]
			msgq->used_msgs++;
10001c48:	6a23      	ldr	r3, [r4, #32]
			z_ready_thread(pending_thread);
10001c4a:	0028      	movs	r0, r5
			msgq->used_msgs++;
10001c4c:	3301      	adds	r3, #1
10001c4e:	6223      	str	r3, [r4, #32]
10001c50:	2400      	movs	r4, #0
10001c52:	66ec      	str	r4, [r5, #108]	; 0x6c
			z_ready_thread(pending_thread);
10001c54:	f001 f87c 	bl	10002d50 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
10001c58:	0038      	movs	r0, r7
10001c5a:	0031      	movs	r1, r6
10001c5c:	f000 f982 	bl	10001f64 <z_reschedule>
			return 0;
10001c60:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
10001c62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10001c64:	0011      	movs	r1, r2
10001c66:	4319      	orrs	r1, r3
10001c68:	d00a      	beq.n	10001c80 <z_impl_k_msgq_get+0x98>
		_current->base.swap_data = data;
10001c6a:	4909      	ldr	r1, [pc, #36]	; (10001c90 <z_impl_k_msgq_get+0xa8>)
10001c6c:	6889      	ldr	r1, [r1, #8]
10001c6e:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10001c70:	9200      	str	r2, [sp, #0]
10001c72:	0031      	movs	r1, r6
10001c74:	0022      	movs	r2, r4
10001c76:	0038      	movs	r0, r7
10001c78:	9301      	str	r3, [sp, #4]
10001c7a:	f000 f95b 	bl	10001f34 <z_pend_curr>
		return result;
10001c7e:	e7f0      	b.n	10001c62 <z_impl_k_msgq_get+0x7a>
		result = -ENOMSG;
10001c80:	2023      	movs	r0, #35	; 0x23
10001c82:	4240      	negs	r0, r0
	if (key != 0U) {
10001c84:	2e00      	cmp	r6, #0
10001c86:	d1ec      	bne.n	10001c62 <z_impl_k_msgq_get+0x7a>
	__asm__ volatile(
10001c88:	b662      	cpsie	i
10001c8a:	f3bf 8f6f 	isb	sy
10001c8e:	e7e8      	b.n	10001c62 <z_impl_k_msgq_get+0x7a>
10001c90:	200001a4 	.word	0x200001a4

10001c94 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10001c94:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001c96:	4b04      	ldr	r3, [pc, #16]	; (10001ca8 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10001c98:	4a04      	ldr	r2, [pc, #16]	; (10001cac <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10001c9a:	1ac0      	subs	r0, r0, r3
10001c9c:	4b04      	ldr	r3, [pc, #16]	; (10001cb0 <slice_timeout+0x1c>)
10001c9e:	10c0      	asrs	r0, r0, #3
10001ca0:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10001ca2:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10001ca4:	4770      	bx	lr
10001ca6:	46c0      	nop			; (mov r8, r8)
10001ca8:	20000130 	.word	0x20000130
10001cac:	200001f9 	.word	0x200001f9
10001cb0:	aaaaaaab 	.word	0xaaaaaaab

10001cb4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10001cb4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10001cb6:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10001cb8:	4b0a      	ldr	r3, [pc, #40]	; (10001ce4 <z_reset_time_slice+0x30>)
10001cba:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10001cbc:	4b0a      	ldr	r3, [pc, #40]	; (10001ce8 <z_reset_time_slice+0x34>)
10001cbe:	436c      	muls	r4, r5
10001cc0:	18e4      	adds	r4, r4, r3
10001cc2:	0020      	movs	r0, r4
10001cc4:	f001 f8a3 	bl	10002e0e <z_abort_timeout>
	int ret = slice_ticks;
10001cc8:	4b08      	ldr	r3, [pc, #32]	; (10001cec <z_reset_time_slice+0x38>)
10001cca:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
10001ccc:	2a00      	cmp	r2, #0
10001cce:	d008      	beq.n	10001ce2 <z_reset_time_slice+0x2e>
		slice_expired[cpu] = false;
10001cd0:	2100      	movs	r1, #0
10001cd2:	4b07      	ldr	r3, [pc, #28]	; (10001cf0 <z_reset_time_slice+0x3c>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
10001cd4:	3a01      	subs	r2, #1
		slice_expired[cpu] = false;
10001cd6:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001cd8:	0020      	movs	r0, r4
10001cda:	4906      	ldr	r1, [pc, #24]	; (10001cf4 <z_reset_time_slice+0x40>)
			      K_TICKS(slice_time(curr) - 1));
10001cdc:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10001cde:	f000 fa6b 	bl	100021b8 <z_add_timeout>
	}
}
10001ce2:	bd70      	pop	{r4, r5, r6, pc}
10001ce4:	200001a4 	.word	0x200001a4
10001ce8:	20000130 	.word	0x20000130
10001cec:	200001cc 	.word	0x200001cc
10001cf0:	200001f9 	.word	0x200001f9
10001cf4:	10001c95 	.word	0x10001c95

10001cf8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10001cf8:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10001cfa:	4d0e      	ldr	r5, [pc, #56]	; (10001d34 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001cfc:	4b0e      	ldr	r3, [pc, #56]	; (10001d38 <update_cache+0x40>)
	return list->head == list;
10001cfe:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001d00:	429c      	cmp	r4, r3
10001d02:	d001      	beq.n	10001d08 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10001d04:	2c00      	cmp	r4, #0
10001d06:	d100      	bne.n	10001d0a <update_cache+0x12>
10001d08:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10001d0a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10001d0c:	2800      	cmp	r0, #0
10001d0e:	d108      	bne.n	10001d22 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10001d10:	7b5a      	ldrb	r2, [r3, #13]
10001d12:	06d2      	lsls	r2, r2, #27
10001d14:	d105      	bne.n	10001d22 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10001d16:	69a2      	ldr	r2, [r4, #24]
10001d18:	2a00      	cmp	r2, #0
10001d1a:	d102      	bne.n	10001d22 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10001d1c:	89da      	ldrh	r2, [r3, #14]
10001d1e:	2a7f      	cmp	r2, #127	; 0x7f
10001d20:	d805      	bhi.n	10001d2e <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10001d22:	429c      	cmp	r4, r3
10001d24:	d002      	beq.n	10001d2c <update_cache+0x34>
			z_reset_time_slice(thread);
10001d26:	0020      	movs	r0, r4
10001d28:	f7ff ffc4 	bl	10001cb4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10001d2c:	0023      	movs	r3, r4
10001d2e:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10001d30:	bd70      	pop	{r4, r5, r6, pc}
10001d32:	46c0      	nop			; (mov r8, r8)
10001d34:	200001a4 	.word	0x200001a4
10001d38:	200001bc 	.word	0x200001bc

10001d3c <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10001d3c:	220d      	movs	r2, #13
{
10001d3e:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10001d40:	5682      	ldrsb	r2, [r0, r2]
{
10001d42:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001d44:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001d46:	2a00      	cmp	r2, #0
10001d48:	da04      	bge.n	10001d54 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001d4a:	227f      	movs	r2, #127	; 0x7f
10001d4c:	4013      	ands	r3, r2
10001d4e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10001d50:	f000 ffc2 	bl	10002cd8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001d54:	2380      	movs	r3, #128	; 0x80
10001d56:	7b62      	ldrb	r2, [r4, #13]
10001d58:	425b      	negs	r3, r3
10001d5a:	4313      	orrs	r3, r2
	return list->head == list;
10001d5c:	4a13      	ldr	r2, [pc, #76]	; (10001dac <move_thread_to_end_of_prio_q+0x70>)
10001d5e:	7363      	strb	r3, [r4, #13]
10001d60:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001d62:	4813      	ldr	r0, [pc, #76]	; (10001db0 <move_thread_to_end_of_prio_q+0x74>)
10001d64:	4283      	cmp	r3, r0
10001d66:	d100      	bne.n	10001d6a <move_thread_to_end_of_prio_q+0x2e>
10001d68:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10001d6a:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001d6c:	2b00      	cmp	r3, #0
10001d6e:	d104      	bne.n	10001d7a <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10001d70:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10001d72:	6061      	str	r1, [r4, #4]

	tail->next = node;
10001d74:	600c      	str	r4, [r1, #0]
	list->tail = node;
10001d76:	61d4      	str	r4, [r2, #28]
}
10001d78:	e00c      	b.n	10001d94 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10001d7a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001d7c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001d7e:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10001d80:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001d82:	42b5      	cmp	r5, r6
10001d84:	d00d      	beq.n	10001da2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001d86:	42ae      	cmp	r6, r5
10001d88:	dd0b      	ble.n	10001da2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10001d8a:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10001d8c:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10001d8e:	6061      	str	r1, [r4, #4]
	prev->next = node;
10001d90:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10001d92:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10001d94:	6890      	ldr	r0, [r2, #8]
10001d96:	1b00      	subs	r0, r0, r4
10001d98:	4243      	negs	r3, r0
10001d9a:	4158      	adcs	r0, r3
10001d9c:	f7ff ffac 	bl	10001cf8 <update_cache>
}
10001da0:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001da2:	4299      	cmp	r1, r3
10001da4:	d0e4      	beq.n	10001d70 <move_thread_to_end_of_prio_q+0x34>
10001da6:	681b      	ldr	r3, [r3, #0]
10001da8:	e7e0      	b.n	10001d6c <move_thread_to_end_of_prio_q+0x30>
10001daa:	46c0      	nop			; (mov r8, r8)
10001dac:	200001a4 	.word	0x200001a4
10001db0:	200001bc 	.word	0x200001bc

10001db4 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001db4:	230d      	movs	r3, #13
{
10001db6:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001db8:	56c3      	ldrsb	r3, [r0, r3]
10001dba:	7b41      	ldrb	r1, [r0, #13]
10001dbc:	2b00      	cmp	r3, #0
10001dbe:	db26      	blt.n	10001e0e <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10001dc0:	06cb      	lsls	r3, r1, #27
10001dc2:	d124      	bne.n	10001e0e <ready_thread+0x5a>
	return node->next != NULL;
10001dc4:	6983      	ldr	r3, [r0, #24]
10001dc6:	2b00      	cmp	r3, #0
10001dc8:	d121      	bne.n	10001e0e <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10001dca:	2280      	movs	r2, #128	; 0x80
10001dcc:	4252      	negs	r2, r2
10001dce:	430a      	orrs	r2, r1
10001dd0:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10001dd2:	4a11      	ldr	r2, [pc, #68]	; (10001e18 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001dd4:	4c11      	ldr	r4, [pc, #68]	; (10001e1c <ready_thread+0x68>)
	return list->head == list;
10001dd6:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001dd8:	42a1      	cmp	r1, r4
10001dda:	d000      	beq.n	10001dde <ready_thread+0x2a>
10001ddc:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10001dde:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001de0:	2b00      	cmp	r3, #0
10001de2:	d104      	bne.n	10001dee <ready_thread+0x3a>
	node->next = list;
10001de4:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10001de6:	6041      	str	r1, [r0, #4]
	tail->next = node;
10001de8:	6008      	str	r0, [r1, #0]
	list->tail = node;
10001dea:	61d0      	str	r0, [r2, #28]
}
10001dec:	e00c      	b.n	10001e08 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10001dee:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10001df0:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10001df2:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10001df4:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10001df6:	42b5      	cmp	r5, r6
10001df8:	d00a      	beq.n	10001e10 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10001dfa:	42ae      	cmp	r6, r5
10001dfc:	dd08      	ble.n	10001e10 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10001dfe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10001e00:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10001e02:	6042      	str	r2, [r0, #4]
	prev->next = node;
10001e04:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10001e06:	6058      	str	r0, [r3, #4]
		update_cache(0);
10001e08:	2000      	movs	r0, #0
10001e0a:	f7ff ff75 	bl	10001cf8 <update_cache>
}
10001e0e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001e10:	428b      	cmp	r3, r1
10001e12:	d0e7      	beq.n	10001de4 <ready_thread+0x30>
10001e14:	681b      	ldr	r3, [r3, #0]
10001e16:	e7e3      	b.n	10001de0 <ready_thread+0x2c>
10001e18:	200001a4 	.word	0x200001a4
10001e1c:	200001bc 	.word	0x200001bc

10001e20 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10001e20:	220d      	movs	r2, #13
{
10001e22:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10001e24:	5682      	ldrsb	r2, [r0, r2]
{
10001e26:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001e28:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001e2a:	2a00      	cmp	r2, #0
10001e2c:	da04      	bge.n	10001e38 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001e2e:	227f      	movs	r2, #127	; 0x7f
10001e30:	4013      	ands	r3, r2
10001e32:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001e34:	f000 ff50 	bl	10002cd8 <sys_dlist_remove>
	update_cache(thread == _current);
10001e38:	4b03      	ldr	r3, [pc, #12]	; (10001e48 <unready_thread+0x28>)
10001e3a:	6898      	ldr	r0, [r3, #8]
10001e3c:	1b00      	subs	r0, r0, r4
10001e3e:	4243      	negs	r3, r0
10001e40:	4158      	adcs	r0, r3
10001e42:	f7ff ff59 	bl	10001cf8 <update_cache>
}
10001e46:	bd10      	pop	{r4, pc}
10001e48:	200001a4 	.word	0x200001a4

10001e4c <pend_locked>:
{
10001e4c:	b570      	push	{r4, r5, r6, lr}
10001e4e:	001d      	movs	r5, r3
10001e50:	0016      	movs	r6, r2
10001e52:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10001e54:	f000 ff53 	bl	10002cfe <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
10001e58:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10001e5a:	1c72      	adds	r2, r6, #1
10001e5c:	d101      	bne.n	10001e62 <pend_locked+0x16>
10001e5e:	3301      	adds	r3, #1
10001e60:	d006      	beq.n	10001e70 <pend_locked+0x24>
10001e62:	0020      	movs	r0, r4
10001e64:	0032      	movs	r2, r6
10001e66:	002b      	movs	r3, r5
10001e68:	4902      	ldr	r1, [pc, #8]	; (10001e74 <pend_locked+0x28>)
10001e6a:	3018      	adds	r0, #24
10001e6c:	f000 f9a4 	bl	100021b8 <z_add_timeout>
}
10001e70:	bd70      	pop	{r4, r5, r6, pc}
10001e72:	46c0      	nop			; (mov r8, r8)
10001e74:	10002da7 	.word	0x10002da7

10001e78 <k_sched_time_slice_set>:
{
10001e78:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001e7a:	f3ef 8410 	mrs	r4, PRIMASK
10001e7e:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10001e80:	230a      	movs	r3, #10
10001e82:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10001e84:	2800      	cmp	r0, #0
10001e86:	dd02      	ble.n	10001e8e <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
10001e88:	2b02      	cmp	r3, #2
10001e8a:	da00      	bge.n	10001e8e <k_sched_time_slice_set+0x16>
10001e8c:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10001e8e:	4a07      	ldr	r2, [pc, #28]	; (10001eac <k_sched_time_slice_set+0x34>)
10001e90:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10001e92:	4b07      	ldr	r3, [pc, #28]	; (10001eb0 <k_sched_time_slice_set+0x38>)
10001e94:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10001e96:	4b07      	ldr	r3, [pc, #28]	; (10001eb4 <k_sched_time_slice_set+0x3c>)
10001e98:	6898      	ldr	r0, [r3, #8]
10001e9a:	f7ff ff0b 	bl	10001cb4 <z_reset_time_slice>
	if (key != 0U) {
10001e9e:	2c00      	cmp	r4, #0
10001ea0:	d102      	bne.n	10001ea8 <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10001ea2:	b662      	cpsie	i
10001ea4:	f3bf 8f6f 	isb	sy
}
10001ea8:	bd10      	pop	{r4, pc}
10001eaa:	46c0      	nop			; (mov r8, r8)
10001eac:	200001cc 	.word	0x200001cc
10001eb0:	200001c8 	.word	0x200001c8
10001eb4:	200001a4 	.word	0x200001a4

10001eb8 <z_time_slice>:
{
10001eb8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001eba:	f3ef 8510 	mrs	r5, PRIMASK
10001ebe:	b672      	cpsid	i
	if (pending_current == _current) {
10001ec0:	4a16      	ldr	r2, [pc, #88]	; (10001f1c <z_time_slice+0x64>)
10001ec2:	4b17      	ldr	r3, [pc, #92]	; (10001f20 <z_time_slice+0x68>)
10001ec4:	6894      	ldr	r4, [r2, #8]
10001ec6:	6819      	ldr	r1, [r3, #0]
10001ec8:	428c      	cmp	r4, r1
10001eca:	d108      	bne.n	10001ede <z_time_slice+0x26>
	z_reset_time_slice(curr);
10001ecc:	0020      	movs	r0, r4
10001ece:	f7ff fef1 	bl	10001cb4 <z_reset_time_slice>
	if (key != 0U) {
10001ed2:	2d00      	cmp	r5, #0
10001ed4:	d102      	bne.n	10001edc <z_time_slice+0x24>
	__asm__ volatile(
10001ed6:	b662      	cpsie	i
10001ed8:	f3bf 8f6f 	isb	sy
}
10001edc:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10001ede:	2100      	movs	r1, #0
10001ee0:	6019      	str	r1, [r3, #0]
	int ret = slice_ticks;
10001ee2:	4b10      	ldr	r3, [pc, #64]	; (10001f24 <z_time_slice+0x6c>)
	if (slice_time(_current) && sliceable(_current)) {
10001ee4:	681b      	ldr	r3, [r3, #0]
10001ee6:	428b      	cmp	r3, r1
10001ee8:	d0f3      	beq.n	10001ed2 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001eea:	89e3      	ldrh	r3, [r4, #14]
10001eec:	2b7f      	cmp	r3, #127	; 0x7f
10001eee:	d8f0      	bhi.n	10001ed2 <z_time_slice+0x1a>
		&& !z_is_thread_prevented_from_running(thread)
10001ef0:	7b63      	ldrb	r3, [r4, #13]
10001ef2:	06db      	lsls	r3, r3, #27
10001ef4:	d1ed      	bne.n	10001ed2 <z_time_slice+0x1a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001ef6:	210e      	movs	r1, #14
10001ef8:	4b0b      	ldr	r3, [pc, #44]	; (10001f28 <z_time_slice+0x70>)
10001efa:	5661      	ldrsb	r1, [r4, r1]
10001efc:	681b      	ldr	r3, [r3, #0]
10001efe:	4299      	cmp	r1, r3
10001f00:	dbe7      	blt.n	10001ed2 <z_time_slice+0x1a>
		&& !z_is_idle_thread_object(thread);
10001f02:	4b0a      	ldr	r3, [pc, #40]	; (10001f2c <z_time_slice+0x74>)
10001f04:	429c      	cmp	r4, r3
10001f06:	d0e4      	beq.n	10001ed2 <z_time_slice+0x1a>
		if (slice_expired[_current_cpu->id]) {
10001f08:	4b09      	ldr	r3, [pc, #36]	; (10001f30 <z_time_slice+0x78>)
10001f0a:	7c12      	ldrb	r2, [r2, #16]
10001f0c:	5c9b      	ldrb	r3, [r3, r2]
10001f0e:	2b00      	cmp	r3, #0
10001f10:	d0df      	beq.n	10001ed2 <z_time_slice+0x1a>
		move_thread_to_end_of_prio_q(curr);
10001f12:	0020      	movs	r0, r4
10001f14:	f7ff ff12 	bl	10001d3c <move_thread_to_end_of_prio_q>
10001f18:	e7d8      	b.n	10001ecc <z_time_slice+0x14>
10001f1a:	46c0      	nop			; (mov r8, r8)
10001f1c:	200001a4 	.word	0x200001a4
10001f20:	200001c4 	.word	0x200001c4
10001f24:	200001cc 	.word	0x200001cc
10001f28:	200001c8 	.word	0x200001c8
10001f2c:	20000050 	.word	0x20000050
10001f30:	200001f9 	.word	0x200001f9

10001f34 <z_pend_curr>:
{
10001f34:	b510      	push	{r4, lr}
	pending_current = _current;
10001f36:	4809      	ldr	r0, [pc, #36]	; (10001f5c <z_pend_curr+0x28>)
{
10001f38:	000c      	movs	r4, r1
	pending_current = _current;
10001f3a:	4b09      	ldr	r3, [pc, #36]	; (10001f60 <z_pend_curr+0x2c>)
{
10001f3c:	0011      	movs	r1, r2
	pending_current = _current;
10001f3e:	6882      	ldr	r2, [r0, #8]
10001f40:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10001f42:	f3ef 8310 	mrs	r3, PRIMASK
10001f46:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10001f48:	9a02      	ldr	r2, [sp, #8]
10001f4a:	9b03      	ldr	r3, [sp, #12]
10001f4c:	6880      	ldr	r0, [r0, #8]
10001f4e:	f7ff ff7d 	bl	10001e4c <pend_locked>
	ret = arch_swap(key);
10001f52:	0020      	movs	r0, r4
10001f54:	f7fe ff22 	bl	10000d9c <arch_swap>
}
10001f58:	bd10      	pop	{r4, pc}
10001f5a:	46c0      	nop			; (mov r8, r8)
10001f5c:	200001a4 	.word	0x200001a4
10001f60:	200001c4 	.word	0x200001c4

10001f64 <z_reschedule>:
{
10001f64:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10001f66:	2900      	cmp	r1, #0
10001f68:	d10a      	bne.n	10001f80 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001f6a:	f3ef 8005 	mrs	r0, IPSR
10001f6e:	2800      	cmp	r0, #0
10001f70:	d107      	bne.n	10001f82 <z_reschedule+0x1e>
	return new_thread != _current;
10001f72:	4b06      	ldr	r3, [pc, #24]	; (10001f8c <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10001f74:	689a      	ldr	r2, [r3, #8]
10001f76:	695b      	ldr	r3, [r3, #20]
10001f78:	429a      	cmp	r2, r3
10001f7a:	d002      	beq.n	10001f82 <z_reschedule+0x1e>
10001f7c:	f7fe ff0e 	bl	10000d9c <arch_swap>
}
10001f80:	bd10      	pop	{r4, pc}
	__asm__ volatile(
10001f82:	b662      	cpsie	i
10001f84:	f3bf 8f6f 	isb	sy
10001f88:	e7fa      	b.n	10001f80 <z_reschedule+0x1c>
10001f8a:	46c0      	nop			; (mov r8, r8)
10001f8c:	200001a4 	.word	0x200001a4

10001f90 <z_sched_start>:
{
10001f90:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001f92:	f3ef 8410 	mrs	r4, PRIMASK
10001f96:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10001f98:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10001f9a:	7b43      	ldrb	r3, [r0, #13]
10001f9c:	4213      	tst	r3, r2
10001f9e:	d105      	bne.n	10001fac <z_sched_start+0x1c>
	if (key != 0U) {
10001fa0:	2c00      	cmp	r4, #0
10001fa2:	d102      	bne.n	10001faa <z_sched_start+0x1a>
	__asm__ volatile(
10001fa4:	b662      	cpsie	i
10001fa6:	f3bf 8f6f 	isb	sy
}
10001faa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001fac:	4393      	bics	r3, r2
10001fae:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10001fb0:	f7ff ff00 	bl	10001db4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10001fb4:	0021      	movs	r1, r4
10001fb6:	4802      	ldr	r0, [pc, #8]	; (10001fc0 <z_sched_start+0x30>)
10001fb8:	f7ff ffd4 	bl	10001f64 <z_reschedule>
10001fbc:	e7f5      	b.n	10001faa <z_sched_start+0x1a>
10001fbe:	46c0      	nop			; (mov r8, r8)
10001fc0:	200001fa 	.word	0x200001fa

10001fc4 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10001fc4:	f3ef 8110 	mrs	r1, PRIMASK
10001fc8:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10001fca:	4b05      	ldr	r3, [pc, #20]	; (10001fe0 <k_sched_lock+0x1c>)
10001fcc:	689a      	ldr	r2, [r3, #8]
10001fce:	7bd3      	ldrb	r3, [r2, #15]
10001fd0:	3b01      	subs	r3, #1
10001fd2:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10001fd4:	2900      	cmp	r1, #0
10001fd6:	d102      	bne.n	10001fde <k_sched_lock+0x1a>
	__asm__ volatile(
10001fd8:	b662      	cpsie	i
10001fda:	f3bf 8f6f 	isb	sy
}
10001fde:	4770      	bx	lr
10001fe0:	200001a4 	.word	0x200001a4

10001fe4 <k_sched_unlock>:
{
10001fe4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001fe6:	f3ef 8410 	mrs	r4, PRIMASK
10001fea:	b672      	cpsid	i
		++_current->base.sched_locked;
10001fec:	4b07      	ldr	r3, [pc, #28]	; (1000200c <k_sched_unlock+0x28>)
		update_cache(0);
10001fee:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10001ff0:	689a      	ldr	r2, [r3, #8]
10001ff2:	7bd3      	ldrb	r3, [r2, #15]
10001ff4:	3301      	adds	r3, #1
10001ff6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10001ff8:	f7ff fe7e 	bl	10001cf8 <update_cache>
	if (key != 0U) {
10001ffc:	2c00      	cmp	r4, #0
10001ffe:	d102      	bne.n	10002006 <k_sched_unlock+0x22>
	__asm__ volatile(
10002000:	b662      	cpsie	i
10002002:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10002006:	f000 fefb 	bl	10002e00 <z_reschedule_unlocked>
}
1000200a:	bd10      	pop	{r4, pc}
1000200c:	200001a4 	.word	0x200001a4

10002010 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002010:	2100      	movs	r1, #0
{
10002012:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10002014:	4b03      	ldr	r3, [pc, #12]	; (10002024 <z_sched_init+0x14>)
10002016:	4a04      	ldr	r2, [pc, #16]	; (10002028 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002018:	0008      	movs	r0, r1
1000201a:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
1000201c:	61da      	str	r2, [r3, #28]
1000201e:	f7ff ff2b 	bl	10001e78 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10002022:	bd10      	pop	{r4, pc}
10002024:	200001a4 	.word	0x200001a4
10002028:	200001bc 	.word	0x200001bc

1000202c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
1000202c:	4b01      	ldr	r3, [pc, #4]	; (10002034 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000202e:	6898      	ldr	r0, [r3, #8]
}
10002030:	4770      	bx	lr
10002032:	46c0      	nop			; (mov r8, r8)
10002034:	200001a4 	.word	0x200001a4

10002038 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10002038:	b570      	push	{r4, r5, r6, lr}
1000203a:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000203c:	f3ef 8610 	mrs	r6, PRIMASK
10002040:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10002042:	7b03      	ldrb	r3, [r0, #12]
10002044:	07db      	lsls	r3, r3, #31
10002046:	d508      	bpl.n	1000205a <z_thread_abort+0x22>
	if (key != 0U) {
10002048:	2e00      	cmp	r6, #0
1000204a:	d102      	bne.n	10002052 <z_thread_abort+0x1a>
	__asm__ volatile(
1000204c:	b662      	cpsie	i
1000204e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10002052:	2004      	movs	r0, #4
10002054:	b662      	cpsie	i
10002056:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10002058:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000205a:	2308      	movs	r3, #8
1000205c:	7b42      	ldrb	r2, [r0, #13]
1000205e:	421a      	tst	r2, r3
10002060:	d005      	beq.n	1000206e <z_thread_abort+0x36>
	if (key != 0U) {
10002062:	2e00      	cmp	r6, #0
10002064:	d1f8      	bne.n	10002058 <z_thread_abort+0x20>
	__asm__ volatile(
10002066:	b662      	cpsie	i
10002068:	f3bf 8f6f 	isb	sy
1000206c:	e7f4      	b.n	10002058 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000206e:	2120      	movs	r1, #32
10002070:	0010      	movs	r0, r2
10002072:	4388      	bics	r0, r1
10002074:	0001      	movs	r1, r0
10002076:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10002078:	b248      	sxtb	r0, r1
1000207a:	2800      	cmp	r0, #0
1000207c:	db20      	blt.n	100020c0 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000207e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10002080:	68a3      	ldr	r3, [r4, #8]
10002082:	2b00      	cmp	r3, #0
10002084:	d002      	beq.n	1000208c <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
10002086:	0020      	movs	r0, r4
10002088:	f000 fe2e 	bl	10002ce8 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
1000208c:	0020      	movs	r0, r4
1000208e:	3018      	adds	r0, #24
10002090:	f000 febd 	bl	10002e0e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10002094:	0023      	movs	r3, r4
	return list->head == list;
10002096:	6da5      	ldr	r5, [r4, #88]	; 0x58
10002098:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000209a:	429d      	cmp	r5, r3
1000209c:	d001      	beq.n	100020a2 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
1000209e:	2d00      	cmp	r5, #0
100020a0:	d116      	bne.n	100020d0 <z_thread_abort+0x98>
		update_cache(1);
100020a2:	2001      	movs	r0, #1
100020a4:	f7ff fe28 	bl	10001cf8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100020a8:	4b10      	ldr	r3, [pc, #64]	; (100020ec <z_thread_abort+0xb4>)
100020aa:	689b      	ldr	r3, [r3, #8]
100020ac:	42a3      	cmp	r3, r4
100020ae:	d1d8      	bne.n	10002062 <z_thread_abort+0x2a>
100020b0:	f3ef 8305 	mrs	r3, IPSR
100020b4:	2b00      	cmp	r3, #0
100020b6:	d1d4      	bne.n	10002062 <z_thread_abort+0x2a>
100020b8:	0030      	movs	r0, r6
100020ba:	f7fe fe6f 	bl	10000d9c <arch_swap>
	return ret;
100020be:	e7d0      	b.n	10002062 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100020c0:	215f      	movs	r1, #95	; 0x5f
100020c2:	400a      	ands	r2, r1
100020c4:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100020c6:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100020c8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100020ca:	f000 fe05 	bl	10002cd8 <sys_dlist_remove>
}
100020ce:	e7d7      	b.n	10002080 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
100020d0:	0028      	movs	r0, r5
100020d2:	f000 fe09 	bl	10002ce8 <unpend_thread_no_timeout>
100020d6:	0028      	movs	r0, r5
100020d8:	3018      	adds	r0, #24
100020da:	f000 fe98 	bl	10002e0e <z_abort_timeout>
100020de:	2300      	movs	r3, #0
		ready_thread(thread);
100020e0:	0028      	movs	r0, r5
100020e2:	66eb      	str	r3, [r5, #108]	; 0x6c
100020e4:	f7ff fe66 	bl	10001db4 <ready_thread>
100020e8:	e7d4      	b.n	10002094 <z_thread_abort+0x5c>
100020ea:	46c0      	nop			; (mov r8, r8)
100020ec:	200001a4 	.word	0x200001a4

100020f0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
100020f0:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
100020f2:	4806      	ldr	r0, [pc, #24]	; (1000210c <z_data_copy+0x1c>)
100020f4:	4a06      	ldr	r2, [pc, #24]	; (10002110 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100020f6:	4907      	ldr	r1, [pc, #28]	; (10002114 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
100020f8:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100020fa:	f000 fde2 	bl	10002cc2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
100020fe:	4a06      	ldr	r2, [pc, #24]	; (10002118 <z_data_copy+0x28>)
10002100:	4906      	ldr	r1, [pc, #24]	; (1000211c <z_data_copy+0x2c>)
10002102:	4807      	ldr	r0, [pc, #28]	; (10002120 <z_data_copy+0x30>)
10002104:	f000 fddd 	bl	10002cc2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002108:	bd10      	pop	{r4, pc}
1000210a:	46c0      	nop			; (mov r8, r8)
1000210c:	20000000 	.word	0x20000000
10002110:	20000050 	.word	0x20000050
10002114:	100031dc 	.word	0x100031dc
10002118:	00000000 	.word	0x00000000
1000211c:	100031dc 	.word	0x100031dc
10002120:	20000000 	.word	0x20000000

10002124 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002124:	2000      	movs	r0, #0
{
10002126:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002128:	4b03      	ldr	r3, [pc, #12]	; (10002138 <elapsed+0x14>)
1000212a:	681b      	ldr	r3, [r3, #0]
1000212c:	4283      	cmp	r3, r0
1000212e:	d101      	bne.n	10002134 <elapsed+0x10>
10002130:	f7ff f938 	bl	100013a4 <sys_clock_elapsed>
}
10002134:	bd10      	pop	{r4, pc}
10002136:	46c0      	nop			; (mov r8, r8)
10002138:	200001d0 	.word	0x200001d0

1000213c <next_timeout>:

static int32_t next_timeout(void)
{
1000213c:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
1000213e:	4b0e      	ldr	r3, [pc, #56]	; (10002178 <next_timeout+0x3c>)
10002140:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002142:	429e      	cmp	r6, r3
10002144:	d103      	bne.n	1000214e <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10002146:	f7ff ffed 	bl	10002124 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
1000214a:	480c      	ldr	r0, [pc, #48]	; (1000217c <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
1000214c:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
1000214e:	f7ff ffe9 	bl	10002124 <elapsed>
	if ((to == NULL) ||
10002152:	2e00      	cmp	r6, #0
10002154:	d0f9      	beq.n	1000214a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002156:	6932      	ldr	r2, [r6, #16]
10002158:	6973      	ldr	r3, [r6, #20]
1000215a:	0004      	movs	r4, r0
1000215c:	17c5      	asrs	r5, r0, #31
1000215e:	1b12      	subs	r2, r2, r4
10002160:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10002162:	2b00      	cmp	r3, #0
10002164:	dcf1      	bgt.n	1000214a <next_timeout+0xe>
10002166:	d103      	bne.n	10002170 <next_timeout+0x34>
10002168:	2180      	movs	r1, #128	; 0x80
1000216a:	0609      	lsls	r1, r1, #24
1000216c:	428a      	cmp	r2, r1
1000216e:	d2ec      	bcs.n	1000214a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
10002170:	43d8      	mvns	r0, r3
10002172:	17c0      	asrs	r0, r0, #31
10002174:	4010      	ands	r0, r2
	return ret;
10002176:	e7e9      	b.n	1000214c <next_timeout+0x10>
10002178:	20000018 	.word	0x20000018
1000217c:	7fffffff 	.word	0x7fffffff

10002180 <remove_timeout>:
{
10002180:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002182:	2800      	cmp	r0, #0
10002184:	d00e      	beq.n	100021a4 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10002186:	4b0b      	ldr	r3, [pc, #44]	; (100021b4 <remove_timeout+0x34>)
10002188:	685b      	ldr	r3, [r3, #4]
1000218a:	4298      	cmp	r0, r3
1000218c:	d00a      	beq.n	100021a4 <remove_timeout+0x24>
1000218e:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10002190:	2900      	cmp	r1, #0
10002192:	d007      	beq.n	100021a4 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10002194:	690a      	ldr	r2, [r1, #16]
10002196:	694b      	ldr	r3, [r1, #20]
10002198:	6904      	ldr	r4, [r0, #16]
1000219a:	6945      	ldr	r5, [r0, #20]
1000219c:	1912      	adds	r2, r2, r4
1000219e:	416b      	adcs	r3, r5
100021a0:	610a      	str	r2, [r1, #16]
100021a2:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
100021a4:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100021a6:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
100021a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100021aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100021ac:	2300      	movs	r3, #0
100021ae:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100021b0:	6043      	str	r3, [r0, #4]
}
100021b2:	bd30      	pop	{r4, r5, pc}
100021b4:	20000018 	.word	0x20000018

100021b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100021b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021ba:	0004      	movs	r4, r0
100021bc:	0016      	movs	r6, r2
100021be:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100021c0:	1c53      	adds	r3, r2, #1
100021c2:	d101      	bne.n	100021c8 <z_add_timeout+0x10>
100021c4:	1c7b      	adds	r3, r7, #1
100021c6:	d057      	beq.n	10002278 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
100021c8:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
100021ca:	f3ef 8310 	mrs	r3, PRIMASK
100021ce:	b672      	cpsid	i
100021d0:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
100021d2:	2f00      	cmp	r7, #0
100021d4:	da23      	bge.n	1000221e <z_add_timeout+0x66>
100021d6:	1c7b      	adds	r3, r7, #1
100021d8:	d101      	bne.n	100021de <z_add_timeout+0x26>
100021da:	1cb3      	adds	r3, r6, #2
100021dc:	d81f      	bhi.n	1000221e <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
100021de:	4b2b      	ldr	r3, [pc, #172]	; (1000228c <z_add_timeout+0xd4>)
100021e0:	6818      	ldr	r0, [r3, #0]
100021e2:	6859      	ldr	r1, [r3, #4]
100021e4:	2202      	movs	r2, #2
100021e6:	4252      	negs	r2, r2
100021e8:	17d3      	asrs	r3, r2, #31
100021ea:	1a12      	subs	r2, r2, r0
100021ec:	418b      	sbcs	r3, r1
100021ee:	1b92      	subs	r2, r2, r6
100021f0:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
100021f2:	2b00      	cmp	r3, #0
100021f4:	dc04      	bgt.n	10002200 <z_add_timeout+0x48>
100021f6:	d101      	bne.n	100021fc <z_add_timeout+0x44>
100021f8:	2a00      	cmp	r2, #0
100021fa:	d101      	bne.n	10002200 <z_add_timeout+0x48>
100021fc:	2201      	movs	r2, #1
100021fe:	2300      	movs	r3, #0
	return list->head == list;
10002200:	4f23      	ldr	r7, [pc, #140]	; (10002290 <z_add_timeout+0xd8>)
10002202:	6122      	str	r2, [r4, #16]
10002204:	6163      	str	r3, [r4, #20]
10002206:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002208:	42bd      	cmp	r5, r7
1000220a:	d100      	bne.n	1000220e <z_add_timeout+0x56>
1000220c:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
1000220e:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10002210:	2d00      	cmp	r5, #0
10002212:	d10f      	bne.n	10002234 <z_add_timeout+0x7c>
	node->next = list;
10002214:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002216:	6066      	str	r6, [r4, #4]
	tail->next = node;
10002218:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000221a:	607c      	str	r4, [r7, #4]
}
1000221c:	e01c      	b.n	10002258 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
1000221e:	f7ff ff81 	bl	10002124 <elapsed>
10002222:	2201      	movs	r2, #1
10002224:	2300      	movs	r3, #0
10002226:	1992      	adds	r2, r2, r6
10002228:	417b      	adcs	r3, r7
1000222a:	0006      	movs	r6, r0
1000222c:	17c7      	asrs	r7, r0, #31
1000222e:	1992      	adds	r2, r2, r6
10002230:	417b      	adcs	r3, r7
10002232:	e7e5      	b.n	10002200 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
10002234:	6928      	ldr	r0, [r5, #16]
10002236:	6969      	ldr	r1, [r5, #20]
10002238:	6922      	ldr	r2, [r4, #16]
1000223a:	6963      	ldr	r3, [r4, #20]
1000223c:	4299      	cmp	r1, r3
1000223e:	dc02      	bgt.n	10002246 <z_add_timeout+0x8e>
10002240:	d11b      	bne.n	1000227a <z_add_timeout+0xc2>
10002242:	4290      	cmp	r0, r2
10002244:	d919      	bls.n	1000227a <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
10002246:	1a80      	subs	r0, r0, r2
10002248:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
1000224a:	686b      	ldr	r3, [r5, #4]
1000224c:	6128      	str	r0, [r5, #16]
1000224e:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10002250:	6063      	str	r3, [r4, #4]
	node->next = successor;
10002252:	6025      	str	r5, [r4, #0]
	prev->next = node;
10002254:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002256:	606c      	str	r4, [r5, #4]
	return list->head == list;
10002258:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000225a:	42bb      	cmp	r3, r7
1000225c:	d006      	beq.n	1000226c <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
1000225e:	429c      	cmp	r4, r3
10002260:	d104      	bne.n	1000226c <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
10002262:	f7ff ff6b 	bl	1000213c <next_timeout>
10002266:	2100      	movs	r1, #0
10002268:	f7ff f824 	bl	100012b4 <sys_clock_set_timeout>
	if (key != 0U) {
1000226c:	9b01      	ldr	r3, [sp, #4]
1000226e:	2b00      	cmp	r3, #0
10002270:	d102      	bne.n	10002278 <z_add_timeout+0xc0>
	__asm__ volatile(
10002272:	b662      	cpsie	i
10002274:	f3bf 8f6f 	isb	sy
		}
	}
}
10002278:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
1000227a:	1a12      	subs	r2, r2, r0
1000227c:	418b      	sbcs	r3, r1
1000227e:	6122      	str	r2, [r4, #16]
10002280:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10002282:	42b5      	cmp	r5, r6
10002284:	d0c6      	beq.n	10002214 <z_add_timeout+0x5c>
10002286:	682d      	ldr	r5, [r5, #0]
10002288:	e7c2      	b.n	10002210 <z_add_timeout+0x58>
1000228a:	46c0      	nop			; (mov r8, r8)
1000228c:	20000148 	.word	0x20000148
10002290:	20000018 	.word	0x20000018

10002294 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10002294:	b5f0      	push	{r4, r5, r6, r7, lr}
10002296:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10002298:	f3ef 8310 	mrs	r3, PRIMASK
1000229c:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000229e:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
100022a0:	4b30      	ldr	r3, [pc, #192]	; (10002364 <sys_clock_announce+0xd0>)
100022a2:	6018      	str	r0, [r3, #0]
	return list->head == list;
100022a4:	4b30      	ldr	r3, [pc, #192]	; (10002368 <sys_clock_announce+0xd4>)
100022a6:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022a8:	429c      	cmp	r4, r3
100022aa:	d100      	bne.n	100022ae <sys_clock_announce+0x1a>
100022ac:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
100022ae:	4b2f      	ldr	r3, [pc, #188]	; (1000236c <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
100022b0:	4d2c      	ldr	r5, [pc, #176]	; (10002364 <sys_clock_announce+0xd0>)
		curr_tick += dt;
100022b2:	9303      	str	r3, [sp, #12]
100022b4:	6818      	ldr	r0, [r3, #0]
100022b6:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
100022b8:	682b      	ldr	r3, [r5, #0]
100022ba:	469c      	mov	ip, r3
100022bc:	2c00      	cmp	r4, #0
100022be:	d039      	beq.n	10002334 <sys_clock_announce+0xa0>
100022c0:	6962      	ldr	r2, [r4, #20]
100022c2:	6926      	ldr	r6, [r4, #16]
100022c4:	17db      	asrs	r3, r3, #31
100022c6:	429a      	cmp	r2, r3
100022c8:	dc02      	bgt.n	100022d0 <sys_clock_announce+0x3c>
100022ca:	d10a      	bne.n	100022e2 <sys_clock_announce+0x4e>
100022cc:	4566      	cmp	r6, ip
100022ce:	d908      	bls.n	100022e2 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
100022d0:	001f      	movs	r7, r3
100022d2:	6922      	ldr	r2, [r4, #16]
100022d4:	6963      	ldr	r3, [r4, #20]
100022d6:	4666      	mov	r6, ip
100022d8:	1b92      	subs	r2, r2, r6
100022da:	41bb      	sbcs	r3, r7
100022dc:	6122      	str	r2, [r4, #16]
100022de:	6163      	str	r3, [r4, #20]
100022e0:	e028      	b.n	10002334 <sys_clock_announce+0xa0>
		curr_tick += dt;
100022e2:	17f3      	asrs	r3, r6, #31
100022e4:	9600      	str	r6, [sp, #0]
100022e6:	9301      	str	r3, [sp, #4]
100022e8:	9a00      	ldr	r2, [sp, #0]
100022ea:	9b01      	ldr	r3, [sp, #4]
100022ec:	1880      	adds	r0, r0, r2
100022ee:	4159      	adcs	r1, r3
		t->dticks = 0;
100022f0:	2300      	movs	r3, #0
100022f2:	2200      	movs	r2, #0
		curr_tick += dt;
100022f4:	4f1d      	ldr	r7, [pc, #116]	; (1000236c <sys_clock_announce+0xd8>)
		t->dticks = 0;
100022f6:	6122      	str	r2, [r4, #16]
100022f8:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
100022fa:	6038      	str	r0, [r7, #0]
100022fc:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
100022fe:	0020      	movs	r0, r4
10002300:	f7ff ff3e 	bl	10002180 <remove_timeout>
	if (key != 0U) {
10002304:	9b02      	ldr	r3, [sp, #8]
10002306:	2b00      	cmp	r3, #0
10002308:	d102      	bne.n	10002310 <sys_clock_announce+0x7c>
	__asm__ volatile(
1000230a:	b662      	cpsie	i
1000230c:	f3bf 8f6f 	isb	sy
		t->fn(t);
10002310:	0020      	movs	r0, r4
10002312:	68a3      	ldr	r3, [r4, #8]
10002314:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002316:	f3ef 8310 	mrs	r3, PRIMASK
1000231a:	b672      	cpsid	i
1000231c:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
1000231e:	4b11      	ldr	r3, [pc, #68]	; (10002364 <sys_clock_announce+0xd0>)
10002320:	681a      	ldr	r2, [r3, #0]
10002322:	1b92      	subs	r2, r2, r6
10002324:	601a      	str	r2, [r3, #0]
	return list->head == list;
10002326:	4b10      	ldr	r3, [pc, #64]	; (10002368 <sys_clock_announce+0xd4>)
10002328:	4694      	mov	ip, r2
1000232a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000232c:	429c      	cmp	r4, r3
1000232e:	d1be      	bne.n	100022ae <sys_clock_announce+0x1a>
		curr_tick += dt;
10002330:	6838      	ldr	r0, [r7, #0]
10002332:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
10002334:	4662      	mov	r2, ip
10002336:	17d3      	asrs	r3, r2, #31
10002338:	1812      	adds	r2, r2, r0
1000233a:	414b      	adcs	r3, r1
	announce_remaining = 0;
1000233c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000233e:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
10002340:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
10002342:	600a      	str	r2, [r1, #0]
10002344:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
10002346:	f7ff fef9 	bl	1000213c <next_timeout>
1000234a:	0021      	movs	r1, r4
1000234c:	f7fe ffb2 	bl	100012b4 <sys_clock_set_timeout>
	if (key != 0U) {
10002350:	9b02      	ldr	r3, [sp, #8]
10002352:	42a3      	cmp	r3, r4
10002354:	d102      	bne.n	1000235c <sys_clock_announce+0xc8>
	__asm__ volatile(
10002356:	b662      	cpsie	i
10002358:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
1000235c:	f7ff fdac 	bl	10001eb8 <z_time_slice>
#endif
}
10002360:	b005      	add	sp, #20
10002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002364:	200001d0 	.word	0x200001d0
10002368:	20000018 	.word	0x20000018
1000236c:	20000148 	.word	0x20000148

10002370 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10002370:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10002372:	4802      	ldr	r0, [pc, #8]	; (1000237c <boot_banner+0xc>)
10002374:	f000 f819 	bl	100023aa <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10002378:	bd10      	pop	{r4, pc}
1000237a:	46c0      	nop			; (mov r8, r8)
1000237c:	1000319a 	.word	0x1000319a

10002380 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
10002380:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
10002382:	4c06      	ldr	r4, [pc, #24]	; (1000239c <statics_init+0x1c>)
10002384:	4b06      	ldr	r3, [pc, #24]	; (100023a0 <statics_init+0x20>)
10002386:	429c      	cmp	r4, r3
10002388:	d301      	bcc.n	1000238e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
1000238a:	2000      	movs	r0, #0
1000238c:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
1000238e:	0020      	movs	r0, r4
10002390:	68a2      	ldr	r2, [r4, #8]
10002392:	6861      	ldr	r1, [r4, #4]
10002394:	f000 fd4e 	bl	10002e34 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
10002398:	3414      	adds	r4, #20
1000239a:	e7f3      	b.n	10002384 <statics_init+0x4>
1000239c:	20000026 	.word	0x20000026
100023a0:	20000026 	.word	0x20000026

100023a4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
100023a4:	4770      	bx	lr

100023a6 <arch_printk_char_out>:
}
100023a6:	2000      	movs	r0, #0
100023a8:	4770      	bx	lr

100023aa <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
100023aa:	b40f      	push	{r0, r1, r2, r3}
100023ac:	b507      	push	{r0, r1, r2, lr}
100023ae:	a904      	add	r1, sp, #16
100023b0:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
100023b2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
100023b4:	f7fe f8f6 	bl	100005a4 <vprintk>

	va_end(ap);
}
100023b8:	b003      	add	sp, #12
100023ba:	bc08      	pop	{r3}
100023bc:	b004      	add	sp, #16
100023be:	4718      	bx	r3

100023c0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100023c0:	b510      	push	{r4, lr}
100023c2:	0004      	movs	r4, r0
100023c4:	0008      	movs	r0, r1
100023c6:	0011      	movs	r1, r2
100023c8:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100023ca:	47a0      	blx	r4
	return z_impl_z_current_get();
100023cc:	f7ff fe2e 	bl	1000202c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100023d0:	f7fe fdfc 	bl	10000fcc <z_impl_k_thread_abort>

100023d4 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
100023d4:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
100023d6:	00c9      	lsls	r1, r1, #3
100023d8:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
100023da:	6880      	ldr	r0, [r0, #8]
100023dc:	021b      	lsls	r3, r3, #8
100023de:	4298      	cmp	r0, r3
100023e0:	d302      	bcc.n	100023e8 <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
100023e2:	0092      	lsls	r2, r2, #2
100023e4:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
100023e6:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
100023e8:	0052      	lsls	r2, r2, #1
100023ea:	5a50      	ldrh	r0, [r2, r1]
100023ec:	e7fb      	b.n	100023e6 <chunk_field+0x12>

100023ee <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
100023ee:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
100023f0:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
100023f2:	00c9      	lsls	r1, r1, #3
100023f4:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
100023f6:	6880      	ldr	r0, [r0, #8]
100023f8:	0224      	lsls	r4, r4, #8
100023fa:	42a0      	cmp	r0, r4
100023fc:	d302      	bcc.n	10002404 <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
100023fe:	0092      	lsls	r2, r2, #2
10002400:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
10002402:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
10002404:	0052      	lsls	r2, r2, #1
10002406:	5253      	strh	r3, [r2, r1]
}
10002408:	e7fb      	b.n	10002402 <chunk_set+0x14>

1000240a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
1000240a:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000240c:	2201      	movs	r2, #1
1000240e:	f7ff ffe1 	bl	100023d4 <chunk_field>
10002412:	0840      	lsrs	r0, r0, #1
}
10002414:	bd10      	pop	{r4, pc}

10002416 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10002416:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10002418:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000241a:	00c9      	lsls	r1, r1, #3
1000241c:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
1000241e:	6880      	ldr	r0, [r0, #8]
10002420:	2301      	movs	r3, #1
10002422:	0224      	lsls	r4, r4, #8
10002424:	42a0      	cmp	r0, r4
10002426:	d308      	bcc.n	1000243a <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10002428:	6848      	ldr	r0, [r1, #4]
		if (used) {
1000242a:	2a00      	cmp	r2, #0
1000242c:	d002      	beq.n	10002434 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000242e:	4303      	orrs	r3, r0
10002430:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10002432:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
10002434:	4398      	bics	r0, r3
10002436:	6048      	str	r0, [r1, #4]
10002438:	e7fb      	b.n	10002432 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000243a:	8848      	ldrh	r0, [r1, #2]
		if (used) {
1000243c:	2a00      	cmp	r2, #0
1000243e:	d002      	beq.n	10002446 <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10002440:	4303      	orrs	r3, r0
10002442:	804b      	strh	r3, [r1, #2]
10002444:	e7f5      	b.n	10002432 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
10002446:	4398      	bics	r0, r3
10002448:	8048      	strh	r0, [r1, #2]
}
1000244a:	e7f2      	b.n	10002432 <set_chunk_used+0x1c>

1000244c <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
1000244c:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
1000244e:	0053      	lsls	r3, r2, #1
10002450:	2201      	movs	r2, #1
10002452:	f7ff ffcc 	bl	100023ee <chunk_set>
}
10002456:	bd10      	pop	{r4, pc}

10002458 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
10002458:	2280      	movs	r2, #128	; 0x80
1000245a:	2304      	movs	r3, #4
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
1000245c:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
1000245e:	0212      	lsls	r2, r2, #8
10002460:	4290      	cmp	r0, r2
10002462:	d300      	bcc.n	10002466 <bucket_idx.isra.0+0xe>
10002464:	18db      	adds	r3, r3, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10002466:	3308      	adds	r3, #8
10002468:	08db      	lsrs	r3, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
1000246a:	3101      	adds	r1, #1
1000246c:	1ac8      	subs	r0, r1, r3
	return 31 - __builtin_clz(usable_sz);
1000246e:	f7fd fef7 	bl	10000260 <__clzsi2>
10002472:	231f      	movs	r3, #31
10002474:	1a18      	subs	r0, r3, r0
}
10002476:	bd10      	pop	{r4, pc}

10002478 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
10002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000247a:	000d      	movs	r5, r1
1000247c:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
1000247e:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
10002480:	f7ff ffc3 	bl	1000240a <chunk_size>
10002484:	2380      	movs	r3, #128	; 0x80
10002486:	0001      	movs	r1, r0
10002488:	021b      	lsls	r3, r3, #8
1000248a:	429e      	cmp	r6, r3
1000248c:	d301      	bcc.n	10002492 <free_list_add+0x1a>
1000248e:	2801      	cmp	r0, #1
10002490:	d019      	beq.n	100024c6 <free_list_add+0x4e>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
10002492:	0030      	movs	r0, r6
10002494:	f7ff ffe0 	bl	10002458 <bucket_idx.isra.0>
	if (b->next == 0U) {
10002498:	0083      	lsls	r3, r0, #2
1000249a:	18e3      	adds	r3, r4, r3
1000249c:	691e      	ldr	r6, [r3, #16]
1000249e:	2e00      	cmp	r6, #0
100024a0:	d112      	bne.n	100024c8 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
100024a2:	2101      	movs	r1, #1
100024a4:	4081      	lsls	r1, r0
100024a6:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
100024a8:	0020      	movs	r0, r4
100024aa:	430a      	orrs	r2, r1
100024ac:	60e2      	str	r2, [r4, #12]
100024ae:	0029      	movs	r1, r5
100024b0:	2202      	movs	r2, #2
		b->next = c;
100024b2:	611d      	str	r5, [r3, #16]
100024b4:	002b      	movs	r3, r5
100024b6:	f7ff ff9a 	bl	100023ee <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100024ba:	002b      	movs	r3, r5
100024bc:	2203      	movs	r2, #3
100024be:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
100024c0:	0020      	movs	r0, r4
100024c2:	f7ff ff94 	bl	100023ee <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
100024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100024c8:	2202      	movs	r2, #2
100024ca:	0031      	movs	r1, r6
100024cc:	0020      	movs	r0, r4
100024ce:	f7ff ff81 	bl	100023d4 <chunk_field>
100024d2:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
100024d4:	0003      	movs	r3, r0
100024d6:	2202      	movs	r2, #2
100024d8:	0029      	movs	r1, r5
100024da:	0020      	movs	r0, r4
100024dc:	f7ff ff87 	bl	100023ee <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100024e0:	0033      	movs	r3, r6
100024e2:	2203      	movs	r2, #3
100024e4:	0029      	movs	r1, r5
100024e6:	0020      	movs	r0, r4
100024e8:	f7ff ff81 	bl	100023ee <chunk_set>
100024ec:	002b      	movs	r3, r5
100024ee:	2203      	movs	r2, #3
100024f0:	0039      	movs	r1, r7
100024f2:	0020      	movs	r0, r4
100024f4:	f7ff ff7b 	bl	100023ee <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100024f8:	002b      	movs	r3, r5
100024fa:	2202      	movs	r2, #2
100024fc:	0031      	movs	r1, r6
100024fe:	e7df      	b.n	100024c0 <free_list_add+0x48>

10002500 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
10002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
10002502:	2380      	movs	r3, #128	; 0x80
10002504:	2408      	movs	r4, #8
10002506:	02db      	lsls	r3, r3, #11
10002508:	429a      	cmp	r2, r3
1000250a:	d200      	bcs.n	1000250e <sys_heap_init+0xe>
1000250c:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000250e:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
10002510:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
10002512:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10002514:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
10002516:	190c      	adds	r4, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10002518:	439e      	bics	r6, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
1000251a:	439c      	bics	r4, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
1000251c:	1ba4      	subs	r4, r4, r6
1000251e:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
10002520:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10002522:	0021      	movs	r1, r4
10002524:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
10002526:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
10002528:	60f7      	str	r7, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
1000252a:	f7ff ff95 	bl	10002458 <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
1000252e:	0032      	movs	r2, r6
	for (int i = 0; i < nb_buckets; i++) {
10002530:	003b      	movs	r3, r7
		h->buckets[i].next = 0;
10002532:	0039      	movs	r1, r7
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
10002534:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10002536:	351b      	adds	r5, #27
10002538:	08ed      	lsrs	r5, r5, #3
		h->buckets[i].next = 0;
1000253a:	3210      	adds	r2, #16
	for (int i = 0; i < nb_buckets; i++) {
1000253c:	4298      	cmp	r0, r3
1000253e:	da30      	bge.n	100025a2 <sys_heap_init+0xa2>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
10002540:	002a      	movs	r2, r5
10002542:	0030      	movs	r0, r6
10002544:	2100      	movs	r1, #0
10002546:	f7ff ff81 	bl	1000244c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
1000254a:	2300      	movs	r3, #0
1000254c:	0030      	movs	r0, r6
1000254e:	001a      	movs	r2, r3
10002550:	0019      	movs	r1, r3
10002552:	f7ff ff4c 	bl	100023ee <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10002556:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
10002558:	0030      	movs	r0, r6
1000255a:	2201      	movs	r2, #1
1000255c:	2100      	movs	r1, #0
1000255e:	f7ff ff5a 	bl	10002416 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10002562:	003a      	movs	r2, r7
10002564:	0029      	movs	r1, r5
10002566:	0030      	movs	r0, r6
10002568:	f7ff ff70 	bl	1000244c <set_chunk_size>
1000256c:	002b      	movs	r3, r5
1000256e:	0029      	movs	r1, r5
10002570:	0030      	movs	r0, r6
10002572:	2200      	movs	r2, #0
10002574:	f7ff ff3b 	bl	100023ee <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
10002578:	0030      	movs	r0, r6
1000257a:	0021      	movs	r1, r4
1000257c:	2200      	movs	r2, #0
1000257e:	f7ff ff65 	bl	1000244c <set_chunk_size>
10002582:	003b      	movs	r3, r7
10002584:	0030      	movs	r0, r6
10002586:	0021      	movs	r1, r4
10002588:	2200      	movs	r2, #0
1000258a:	f7ff ff30 	bl	100023ee <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
1000258e:	0030      	movs	r0, r6
10002590:	2201      	movs	r2, #1
10002592:	0021      	movs	r1, r4
10002594:	f7ff ff3f 	bl	10002416 <set_chunk_used>

	free_list_add(h, chunk0_size);
10002598:	0029      	movs	r1, r5
1000259a:	0030      	movs	r0, r6
1000259c:	f7ff ff6c 	bl	10002478 <free_list_add>
}
100025a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
100025a2:	009f      	lsls	r7, r3, #2
100025a4:	51d1      	str	r1, [r2, r7]
	for (int i = 0; i < nb_buckets; i++) {
100025a6:	3301      	adds	r3, #1
100025a8:	e7c8      	b.n	1000253c <sys_heap_init+0x3c>

100025aa <encode_uint>:
{
100025aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100025ac:	b085      	sub	sp, #20
100025ae:	9001      	str	r0, [sp, #4]
100025b0:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
100025b2:	78d3      	ldrb	r3, [r2, #3]
{
100025b4:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
100025b6:	001a      	movs	r2, r3
100025b8:	3a41      	subs	r2, #65	; 0x41
100025ba:	000f      	movs	r7, r1
	switch (specifier) {
100025bc:	2408      	movs	r4, #8
100025be:	9202      	str	r2, [sp, #8]
100025c0:	2b6f      	cmp	r3, #111	; 0x6f
100025c2:	d00a      	beq.n	100025da <encode_uint+0x30>
100025c4:	d804      	bhi.n	100025d0 <encode_uint+0x26>
		return 16;
100025c6:	1924      	adds	r4, r4, r4
	switch (specifier) {
100025c8:	2b58      	cmp	r3, #88	; 0x58
100025ca:	d006      	beq.n	100025da <encode_uint+0x30>
		return 10;
100025cc:	3c06      	subs	r4, #6
100025ce:	e004      	b.n	100025da <encode_uint+0x30>
	switch (specifier) {
100025d0:	2208      	movs	r2, #8
		return 16;
100025d2:	2410      	movs	r4, #16
	switch (specifier) {
100025d4:	4393      	bics	r3, r2
100025d6:	2b70      	cmp	r3, #112	; 0x70
100025d8:	d1f8      	bne.n	100025cc <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
100025da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
100025dc:	0022      	movs	r2, r4
100025de:	2300      	movs	r3, #0
100025e0:	0039      	movs	r1, r7
100025e2:	9801      	ldr	r0, [sp, #4]
100025e4:	f7fd fe5a 	bl	1000029c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100025e8:	0013      	movs	r3, r2
100025ea:	468c      	mov	ip, r1
100025ec:	b2d2      	uxtb	r2, r2
100025ee:	2b09      	cmp	r3, #9
100025f0:	d81a      	bhi.n	10002628 <encode_uint+0x7e>
100025f2:	3230      	adds	r2, #48	; 0x30
100025f4:	b2d3      	uxtb	r3, r2
100025f6:	3e01      	subs	r6, #1
100025f8:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
100025fa:	2300      	movs	r3, #0
100025fc:	42bb      	cmp	r3, r7
100025fe:	d102      	bne.n	10002606 <encode_uint+0x5c>
10002600:	9b01      	ldr	r3, [sp, #4]
10002602:	429c      	cmp	r4, r3
10002604:	d802      	bhi.n	1000260c <encode_uint+0x62>
10002606:	9b03      	ldr	r3, [sp, #12]
10002608:	429e      	cmp	r6, r3
1000260a:	d80a      	bhi.n	10002622 <encode_uint+0x78>
	if (conv->flag_hash) {
1000260c:	782b      	ldrb	r3, [r5, #0]
1000260e:	069b      	lsls	r3, r3, #26
10002610:	d504      	bpl.n	1000261c <encode_uint+0x72>
		if (radix == 8) {
10002612:	2c08      	cmp	r4, #8
10002614:	d110      	bne.n	10002638 <encode_uint+0x8e>
			conv->altform_0 = true;
10002616:	78ab      	ldrb	r3, [r5, #2]
10002618:	4323      	orrs	r3, r4
1000261a:	70ab      	strb	r3, [r5, #2]
}
1000261c:	0030      	movs	r0, r6
1000261e:	b005      	add	sp, #20
10002620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10002622:	4667      	mov	r7, ip
10002624:	9001      	str	r0, [sp, #4]
10002626:	e7d9      	b.n	100025dc <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002628:	0013      	movs	r3, r2
1000262a:	9902      	ldr	r1, [sp, #8]
1000262c:	3357      	adds	r3, #87	; 0x57
1000262e:	b2db      	uxtb	r3, r3
10002630:	2919      	cmp	r1, #25
10002632:	d8e0      	bhi.n	100025f6 <encode_uint+0x4c>
10002634:	3237      	adds	r2, #55	; 0x37
10002636:	e7dd      	b.n	100025f4 <encode_uint+0x4a>
		} else if (radix == 16) {
10002638:	2c10      	cmp	r4, #16
1000263a:	d1ef      	bne.n	1000261c <encode_uint+0x72>
			conv->altform_0c = true;
1000263c:	78ab      	ldrb	r3, [r5, #2]
1000263e:	431c      	orrs	r4, r3
10002640:	70ac      	strb	r4, [r5, #2]
	return bp;
10002642:	e7eb      	b.n	1000261c <encode_uint+0x72>

10002644 <outs>:
{
10002644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002646:	0007      	movs	r7, r0
10002648:	0015      	movs	r5, r2
1000264a:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000264c:	0014      	movs	r4, r2
{
1000264e:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002650:	42a6      	cmp	r6, r4
10002652:	d806      	bhi.n	10002662 <outs+0x1e>
10002654:	2e00      	cmp	r6, #0
10002656:	d001      	beq.n	1000265c <outs+0x18>
	return (int)count;
10002658:	1b60      	subs	r0, r4, r5
1000265a:	e008      	b.n	1000266e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
1000265c:	7823      	ldrb	r3, [r4, #0]
1000265e:	2b00      	cmp	r3, #0
10002660:	d0fa      	beq.n	10002658 <outs+0x14>
		int rc = out((int)*sp++, ctx);
10002662:	7820      	ldrb	r0, [r4, #0]
10002664:	9901      	ldr	r1, [sp, #4]
10002666:	47b8      	blx	r7
		if (rc < 0) {
10002668:	3401      	adds	r4, #1
1000266a:	2800      	cmp	r0, #0
1000266c:	daf0      	bge.n	10002650 <outs+0xc>
}
1000266e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10002670 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10002670:	4770      	bx	lr

10002672 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002672:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10002674:	f000 fb0b 	bl	10002c8e <z_fatal_error>
}
10002678:	bd10      	pop	{r4, pc}

1000267a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
1000267a:	b510      	push	{r4, lr}
1000267c:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
1000267e:	6800      	ldr	r0, [r0, #0]
10002680:	f000 fb05 	bl	10002c8e <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10002684:	bd10      	pop	{r4, pc}

10002686 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10002686:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10002688:	2100      	movs	r1, #0
1000268a:	2001      	movs	r0, #1
1000268c:	f7ff fff1 	bl	10002672 <z_arm_fatal_error>
}
10002690:	bd10      	pop	{r4, pc}

10002692 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10002692:	b510      	push	{r4, lr}
	handler();
10002694:	f7fe fb6a 	bl	10000d6c <z_SysNmiOnReset>
	z_arm_int_exit();
10002698:	f7fe fc14 	bl	10000ec4 <z_arm_exc_exit>
}
1000269c:	bd10      	pop	{r4, pc}

1000269e <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
1000269e:	4770      	bx	lr

100026a0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100026a0:	0003      	movs	r3, r0
	size_t n = 0;
100026a2:	2000      	movs	r0, #0

	while (*s != '\0') {
100026a4:	5c1a      	ldrb	r2, [r3, r0]
100026a6:	2a00      	cmp	r2, #0
100026a8:	d100      	bne.n	100026ac <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
100026aa:	4770      	bx	lr
		n++;
100026ac:	3001      	adds	r0, #1
100026ae:	e7f9      	b.n	100026a4 <strlen+0x4>

100026b0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
100026b0:	0003      	movs	r3, r0
	size_t n = 0;
100026b2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
100026b4:	5c1a      	ldrb	r2, [r3, r0]
100026b6:	2a00      	cmp	r2, #0
100026b8:	d001      	beq.n	100026be <strnlen+0xe>
100026ba:	4288      	cmp	r0, r1
100026bc:	d100      	bne.n	100026c0 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
100026be:	4770      	bx	lr
		n++;
100026c0:	3001      	adds	r0, #1
100026c2:	e7f7      	b.n	100026b4 <strnlen+0x4>

100026c4 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
100026c4:	2300      	movs	r3, #0
{
100026c6:	b510      	push	{r4, lr}
	while (n > 0) {
100026c8:	429a      	cmp	r2, r3
100026ca:	d100      	bne.n	100026ce <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
100026cc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
100026ce:	5ccc      	ldrb	r4, [r1, r3]
100026d0:	54c4      	strb	r4, [r0, r3]
		n--;
100026d2:	3301      	adds	r3, #1
100026d4:	e7f8      	b.n	100026c8 <memcpy+0x4>

100026d6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
100026d6:	0003      	movs	r3, r0
100026d8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
100026da:	1882      	adds	r2, r0, r2
100026dc:	4293      	cmp	r3, r2
100026de:	d100      	bne.n	100026e2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
100026e0:	4770      	bx	lr
		*(d_byte++) = c_byte;
100026e2:	7019      	strb	r1, [r3, #0]
		n--;
100026e4:	3301      	adds	r3, #1
100026e6:	e7f9      	b.n	100026dc <memset+0x6>

100026e8 <_stdout_hook_default>:
	return EOF;
100026e8:	2001      	movs	r0, #1
}
100026ea:	4240      	negs	r0, r0
100026ec:	4770      	bx	lr

100026ee <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
100026ee:	23d0      	movs	r3, #208	; 0xd0
100026f0:	061b      	lsls	r3, r3, #24
100026f2:	685b      	ldr	r3, [r3, #4]
}
100026f4:	2000      	movs	r0, #0
	*value = gpio_get_all();
100026f6:	600b      	str	r3, [r1, #0]
}
100026f8:	4770      	bx	lr

100026fa <gpio_rpi_port_set_bits_raw>:
{
100026fa:	000a      	movs	r2, r1
100026fc:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
100026fe:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10002700:	0010      	movs	r0, r2
10002702:	6919      	ldr	r1, [r3, #16]
10002704:	4388      	bics	r0, r1
10002706:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10002708:	20d0      	movs	r0, #208	; 0xd0
1000270a:	0600      	lsls	r0, r0, #24
1000270c:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000270e:	691c      	ldr	r4, [r3, #16]
10002710:	6959      	ldr	r1, [r3, #20]
10002712:	4021      	ands	r1, r4
10002714:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10002716:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10002718:	6919      	ldr	r1, [r3, #16]
1000271a:	695b      	ldr	r3, [r3, #20]
1000271c:	4011      	ands	r1, r2
1000271e:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10002720:	6241      	str	r1, [r0, #36]	; 0x24
}
10002722:	2000      	movs	r0, #0
10002724:	bd10      	pop	{r4, pc}

10002726 <gpio_rpi_port_clear_bits_raw>:
{
10002726:	000a      	movs	r2, r1
10002728:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
1000272a:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
1000272c:	0010      	movs	r0, r2
1000272e:	6919      	ldr	r1, [r3, #16]
10002730:	4388      	bics	r0, r1
10002732:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10002734:	20d0      	movs	r0, #208	; 0xd0
10002736:	0600      	lsls	r0, r0, #24
10002738:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
1000273a:	691c      	ldr	r4, [r3, #16]
1000273c:	6959      	ldr	r1, [r3, #20]
1000273e:	4021      	ands	r1, r4
10002740:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10002742:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10002744:	6919      	ldr	r1, [r3, #16]
10002746:	695b      	ldr	r3, [r3, #20]
10002748:	4011      	ands	r1, r2
1000274a:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000274c:	6281      	str	r1, [r0, #40]	; 0x28
}
1000274e:	2000      	movs	r0, #0
10002750:	bd10      	pop	{r4, pc}

10002752 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
10002752:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
10002754:	0008      	movs	r0, r1
10002756:	691a      	ldr	r2, [r3, #16]
10002758:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
1000275a:	22d0      	movs	r2, #208	; 0xd0
1000275c:	0612      	lsls	r2, r2, #24
1000275e:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10002760:	691b      	ldr	r3, [r3, #16]
}
10002762:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10002764:	400b      	ands	r3, r1
10002766:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002768:	4770      	bx	lr

1000276a <gpio_rpi_manage_callback>:
{
1000276a:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
1000276c:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
1000276e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10002770:	2800      	cmp	r0, #0
10002772:	d021      	beq.n	100027b8 <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10002774:	4288      	cmp	r0, r1
10002776:	d11b      	bne.n	100027b0 <gpio_rpi_manage_callback+0x46>
	return node->next;
10002778:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
1000277a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
1000277c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
1000277e:	42a1      	cmp	r1, r4
10002780:	d100      	bne.n	10002784 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10002782:	6098      	str	r0, [r3, #8]
	parent->next = child;
10002784:	2000      	movs	r0, #0
10002786:	6008      	str	r0, [r1, #0]
	if (set) {
10002788:	4282      	cmp	r2, r0
1000278a:	d006      	beq.n	1000279a <gpio_rpi_manage_callback+0x30>
	return list->head;
1000278c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
1000278e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10002790:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10002792:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10002794:	2a00      	cmp	r2, #0
10002796:	d100      	bne.n	1000279a <gpio_rpi_manage_callback+0x30>
	list->tail = node;
10002798:	6099      	str	r1, [r3, #8]
	return 0;
1000279a:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
1000279c:	e010      	b.n	100027c0 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000279e:	4281      	cmp	r1, r0
100027a0:	d106      	bne.n	100027b0 <gpio_rpi_manage_callback+0x46>
	return node->next;
100027a2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
100027a4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100027a6:	6898      	ldr	r0, [r3, #8]
100027a8:	4281      	cmp	r1, r0
100027aa:	d1eb      	bne.n	10002784 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
100027ac:	609c      	str	r4, [r3, #8]
}
100027ae:	e7e9      	b.n	10002784 <gpio_rpi_manage_callback+0x1a>
	return node->next;
100027b0:	0004      	movs	r4, r0
100027b2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100027b4:	2800      	cmp	r0, #0
100027b6:	d1f2      	bne.n	1000279e <gpio_rpi_manage_callback+0x34>
			if (!set) {
100027b8:	2a00      	cmp	r2, #0
100027ba:	d1e7      	bne.n	1000278c <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
100027bc:	2016      	movs	r0, #22
100027be:	4240      	negs	r0, r0
}
100027c0:	bd10      	pop	{r4, pc}

100027c2 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
100027c2:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
100027c4:	6843      	ldr	r3, [r0, #4]
100027c6:	685b      	ldr	r3, [r3, #4]
100027c8:	4798      	blx	r3
	return 0;
}
100027ca:	2000      	movs	r0, #0
100027cc:	bd10      	pop	{r4, pc}

100027ce <gpio_rpi_pin_interrupt_configure>:
{
100027ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100027d0:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
100027d2:	6907      	ldr	r7, [r0, #16]
{
100027d4:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
100027d6:	210f      	movs	r1, #15
100027d8:	2200      	movs	r2, #0
100027da:	0028      	movs	r0, r5
{
100027dc:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
100027de:	f7fe ffc3 	bl	10001768 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100027e2:	2201      	movs	r2, #1
100027e4:	0013      	movs	r3, r2
100027e6:	40ab      	lsls	r3, r5
100027e8:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
100027ea:	2380      	movs	r3, #128	; 0x80
100027ec:	039b      	lsls	r3, r3, #14
100027ee:	429e      	cmp	r6, r3
100027f0:	d105      	bne.n	100027fe <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100027f2:	68fb      	ldr	r3, [r7, #12]
100027f4:	9a01      	ldr	r2, [sp, #4]
100027f6:	4393      	bics	r3, r2
}
100027f8:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100027fa:	60fb      	str	r3, [r7, #12]
}
100027fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
100027fe:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10002800:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
10002802:	04db      	lsls	r3, r3, #19
10002804:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
10002806:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
10002808:	01f6      	lsls	r6, r6, #7
1000280a:	d50d      	bpl.n	10002828 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
1000280c:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
1000280e:	2b00      	cmp	r3, #0
10002810:	d001      	beq.n	10002816 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
10002812:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
10002814:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10002816:	2201      	movs	r2, #1
10002818:	0028      	movs	r0, r5
1000281a:	f7fe ffa5 	bl	10001768 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000281e:	68fb      	ldr	r3, [r7, #12]
10002820:	9a01      	ldr	r2, [sp, #4]
10002822:	431a      	orrs	r2, r3
10002824:	0013      	movs	r3, r2
10002826:	e7e7      	b.n	100027f8 <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
10002828:	2b00      	cmp	r3, #0
1000282a:	d0f4      	beq.n	10002816 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
1000282c:	2302      	movs	r3, #2
1000282e:	e7f1      	b.n	10002814 <gpio_rpi_pin_interrupt_configure+0x46>

10002830 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10002830:	b510      	push	{r4, lr}
10002832:	2200      	movs	r2, #0
10002834:	2103      	movs	r1, #3
10002836:	200d      	movs	r0, #13
10002838:	f7fe fa6e 	bl	10000d18 <z_arm_irq_priority_set>
1000283c:	200d      	movs	r0, #13
1000283e:	f7fe fa5f 	bl	10000d00 <arch_irq_enable>
10002842:	bd10      	pop	{r4, pc}

10002844 <gpio_rpi_port_set_masked_raw>:
{
10002844:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
10002846:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002848:	20d0      	movs	r0, #208	; 0xd0
1000284a:	0600      	lsls	r0, r0, #24
1000284c:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
1000284e:	6925      	ldr	r5, [r4, #16]
10002850:	4053      	eors	r3, r2
10002852:	400b      	ands	r3, r1
10002854:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10002856:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002858:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000285a:	6a03      	ldr	r3, [r0, #32]
1000285c:	4053      	eors	r3, r2
1000285e:	439d      	bics	r5, r3
10002860:	002b      	movs	r3, r5
10002862:	6925      	ldr	r5, [r4, #16]
10002864:	401d      	ands	r5, r3
10002866:	6963      	ldr	r3, [r4, #20]
10002868:	402b      	ands	r3, r5
1000286a:	62c3      	str	r3, [r0, #44]	; 0x2c
1000286c:	6a03      	ldr	r3, [r0, #32]
1000286e:	405a      	eors	r2, r3
10002870:	400a      	ands	r2, r1
10002872:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
10002874:	6963      	ldr	r3, [r4, #20]
10002876:	4011      	ands	r1, r2
10002878:	4399      	bics	r1, r3
1000287a:	62c1      	str	r1, [r0, #44]	; 0x2c
}
1000287c:	2000      	movs	r0, #0
1000287e:	bd30      	pop	{r4, r5, pc}

10002880 <gpio_rpi_configure>:
{
10002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002882:	0015      	movs	r5, r2
10002884:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
10002886:	2401      	movs	r4, #1
10002888:	0952      	lsrs	r2, r2, #5
1000288a:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
1000288c:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
1000288e:	4021      	ands	r1, r4
10002890:	0038      	movs	r0, r7
10002892:	4022      	ands	r2, r4
10002894:	f7fe ff1e 	bl	100016d4 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10002898:	2105      	movs	r1, #5
1000289a:	0038      	movs	r0, r7
1000289c:	f7fe ff04 	bl	100016a8 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100028a0:	03ab      	lsls	r3, r5, #14
100028a2:	d525      	bpl.n	100028f0 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
100028a4:	40bc      	lsls	r4, r7
100028a6:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
100028a8:	07a9      	lsls	r1, r5, #30
100028aa:	d515      	bpl.n	100028d8 <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
100028ac:	4322      	orrs	r2, r4
100028ae:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100028b0:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
100028b2:	6971      	ldr	r1, [r6, #20]
100028b4:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
100028b6:	0768      	lsls	r0, r5, #29
100028b8:	d507      	bpl.n	100028ca <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
100028ba:	4321      	orrs	r1, r4
100028bc:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
100028be:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
100028c0:	036d      	lsls	r5, r5, #13
100028c2:	d507      	bpl.n	100028d4 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
100028c4:	6254      	str	r4, [r2, #36]	; 0x24
}
100028c6:	2000      	movs	r0, #0
100028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
100028ca:	43a1      	bics	r1, r4
100028cc:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
100028ce:	6154      	str	r4, [r2, #20]
    if (out)
100028d0:	032d      	lsls	r5, r5, #12
100028d2:	d4f7      	bmi.n	100028c4 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
100028d4:	6294      	str	r4, [r2, #40]	; 0x28
}
100028d6:	e7f6      	b.n	100028c6 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
100028d8:	43a2      	bics	r2, r4
100028da:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
100028dc:	22d0      	movs	r2, #208	; 0xd0
100028de:	0612      	lsls	r2, r2, #24
100028e0:	0329      	lsls	r1, r5, #12
100028e2:	d501      	bpl.n	100028e8 <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
100028e4:	6154      	str	r4, [r2, #20]
}
100028e6:	e7ed      	b.n	100028c4 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
100028e8:	036d      	lsls	r5, r5, #13
100028ea:	d5eb      	bpl.n	100028c4 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
100028ec:	6194      	str	r4, [r2, #24]
}
100028ee:	e7e9      	b.n	100028c4 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
100028f0:	03ed      	lsls	r5, r5, #15
100028f2:	d5e8      	bpl.n	100028c6 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
100028f4:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100028f6:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
100028f8:	0612      	lsls	r2, r2, #24
100028fa:	e7eb      	b.n	100028d4 <gpio_rpi_configure+0x54>

100028fc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
100028fc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
100028fe:	6803      	ldr	r3, [r0, #0]
10002900:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10002902:	7905      	ldrb	r5, [r0, #4]
10002904:	6804      	ldr	r4, [r0, #0]
10002906:	00ed      	lsls	r5, r5, #3
10002908:	1964      	adds	r4, r4, r5
1000290a:	42a3      	cmp	r3, r4
1000290c:	d302      	bcc.n	10002914 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
1000290e:	2002      	movs	r0, #2
10002910:	4240      	negs	r0, r0
}
10002912:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10002914:	795c      	ldrb	r4, [r3, #5]
10002916:	428c      	cmp	r4, r1
10002918:	d001      	beq.n	1000291e <pinctrl_lookup_state+0x22>
		(*state)++;
1000291a:	3308      	adds	r3, #8
1000291c:	e7f0      	b.n	10002900 <pinctrl_lookup_state+0x4>
			return 0;
1000291e:	2000      	movs	r0, #0
10002920:	e7f7      	b.n	10002912 <pinctrl_lookup_state+0x16>

10002922 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10002922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002924:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002926:	2601      	movs	r6, #1
10002928:	008d      	lsls	r5, r1, #2
1000292a:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
1000292c:	42ac      	cmp	r4, r5
1000292e:	d101      	bne.n	10002934 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10002930:	2000      	movs	r0, #0
10002932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10002934:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10002936:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10002938:	06c0      	lsls	r0, r0, #27
1000293a:	0ec0      	lsrs	r0, r0, #27
1000293c:	f000 f987 	bl	10002c4e <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10002940:	8821      	ldrh	r1, [r4, #0]
10002942:	7820      	ldrb	r0, [r4, #0]
10002944:	05c9      	lsls	r1, r1, #23
10002946:	06c0      	lsls	r0, r0, #27
10002948:	0f09      	lsrs	r1, r1, #28
1000294a:	0ec0      	lsrs	r0, r0, #27
1000294c:	f7fe feac 	bl	100016a8 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10002950:	7861      	ldrb	r1, [r4, #1]
10002952:	7820      	ldrb	r0, [r4, #0]
10002954:	09ca      	lsrs	r2, r1, #7
10002956:	06c0      	lsls	r0, r0, #27
10002958:	0649      	lsls	r1, r1, #25
1000295a:	0fc9      	lsrs	r1, r1, #31
1000295c:	0ec0      	lsrs	r0, r0, #27
1000295e:	f7fe feb9 	bl	100016d4 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10002962:	7861      	ldrb	r1, [r4, #1]
10002964:	7820      	ldrb	r0, [r4, #0]
10002966:	06c9      	lsls	r1, r1, #27
10002968:	06c0      	lsls	r0, r0, #27
1000296a:	0f09      	lsrs	r1, r1, #28
1000296c:	0ec0      	lsrs	r0, r0, #27
1000296e:	f7fe fedf 	bl	10001730 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002972:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002974:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002976:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002978:	06c0      	lsls	r0, r0, #27
1000297a:	4031      	ands	r1, r6
1000297c:	0ec0      	lsrs	r0, r0, #27
1000297e:	f7fe fec9 	bl	10001714 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10002982:	78a1      	ldrb	r1, [r4, #2]
10002984:	7820      	ldrb	r0, [r4, #0]
10002986:	0789      	lsls	r1, r1, #30
10002988:	06c0      	lsls	r0, r0, #27
1000298a:	0fc9      	lsrs	r1, r1, #31
1000298c:	0ec0      	lsrs	r0, r0, #27
1000298e:	f7fe feb3 	bl	100016f8 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10002992:	78a1      	ldrb	r1, [r4, #2]
10002994:	7820      	ldrb	r0, [r4, #0]
10002996:	07c9      	lsls	r1, r1, #31
10002998:	06c0      	lsls	r0, r0, #27
1000299a:	0fc9      	lsrs	r1, r1, #31
1000299c:	0ec0      	lsrs	r0, r0, #27
1000299e:	f7fe ff05 	bl	100017ac <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
100029a2:	003c      	movs	r4, r7
100029a4:	e7c2      	b.n	1000292c <pinctrl_configure_pins+0xa>

100029a6 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
100029a6:	2000      	movs	r0, #0
100029a8:	4770      	bx	lr

100029aa <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
100029aa:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
100029ac:	7900      	ldrb	r0, [r0, #4]
100029ae:	2802      	cmp	r0, #2
100029b0:	d009      	beq.n	100029c6 <reset_rpi_read_register.isra.0+0x1c>
100029b2:	2804      	cmp	r0, #4
100029b4:	d00b      	beq.n	100029ce <reset_rpi_read_register.isra.0+0x24>
100029b6:	2801      	cmp	r0, #1
100029b8:	d10c      	bne.n	100029d4 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
100029ba:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
100029bc:	780b      	ldrb	r3, [r1, #0]
100029be:	b2db      	uxtb	r3, r3
	return 0;
100029c0:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
100029c2:	6013      	str	r3, [r2, #0]
}
100029c4:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
100029c6:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
100029c8:	880b      	ldrh	r3, [r1, #0]
100029ca:	b29b      	uxth	r3, r3
		break;
100029cc:	e7f8      	b.n	100029c0 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
100029ce:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100029d0:	680b      	ldr	r3, [r1, #0]
		break;
100029d2:	e7f5      	b.n	100029c0 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
100029d4:	2016      	movs	r0, #22
100029d6:	4240      	negs	r0, r0
100029d8:	e7f4      	b.n	100029c4 <reset_rpi_read_register.isra.0+0x1a>

100029da <reset_rpi_update>:
{
100029da:	0003      	movs	r3, r0
100029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100029de:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
100029e0:	685f      	ldr	r7, [r3, #4]
{
100029e2:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
100029e4:	793e      	ldrb	r6, [r7, #4]
{
100029e6:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100029e8:	00f1      	lsls	r1, r6, #3
100029ea:	f7fd fc2d 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100029ee:	aa03      	add	r2, sp, #12
100029f0:	0004      	movs	r4, r0
100029f2:	000d      	movs	r5, r1
100029f4:	b281      	uxth	r1, r0
100029f6:	0038      	movs	r0, r7
100029f8:	f7ff ffd7 	bl	100029aa <reset_rpi_read_register.isra.0>
	if (ret) {
100029fc:	2800      	cmp	r0, #0
100029fe:	d117      	bne.n	10002a30 <reset_rpi_update+0x56>
		value |= BIT(regbit);
10002a00:	2201      	movs	r2, #1
10002a02:	9903      	ldr	r1, [sp, #12]
10002a04:	b2ed      	uxtb	r5, r5
10002a06:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
10002a08:	000b      	movs	r3, r1
		value |= BIT(regbit);
10002a0a:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
10002a0c:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10002a0e:	797d      	ldrb	r5, [r7, #5]
10002a10:	9a01      	ldr	r2, [sp, #4]
10002a12:	4295      	cmp	r5, r2
10002a14:	d001      	beq.n	10002a1a <reset_rpi_update+0x40>
		value |= BIT(regbit);
10002a16:	4663      	mov	r3, ip
10002a18:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
10002a1a:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
10002a1c:	2e02      	cmp	r6, #2
10002a1e:	d009      	beq.n	10002a34 <reset_rpi_update+0x5a>
10002a20:	2e04      	cmp	r6, #4
10002a22:	d00c      	beq.n	10002a3e <reset_rpi_update+0x64>
10002a24:	2e01      	cmp	r6, #1
10002a26:	d10e      	bne.n	10002a46 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
10002a28:	b2a4      	uxth	r4, r4
10002a2a:	b2db      	uxtb	r3, r3
10002a2c:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10002a2e:	7023      	strb	r3, [r4, #0]
}
10002a30:	b005      	add	sp, #20
10002a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10002a34:	b2a4      	uxth	r4, r4
10002a36:	b29b      	uxth	r3, r3
10002a38:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10002a3a:	8023      	strh	r3, [r4, #0]
}
10002a3c:	e7f8      	b.n	10002a30 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
10002a3e:	b2a4      	uxth	r4, r4
10002a40:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002a42:	6023      	str	r3, [r4, #0]
}
10002a44:	e7f4      	b.n	10002a30 <reset_rpi_update+0x56>
	switch (config->reg_width) {
10002a46:	2016      	movs	r0, #22
10002a48:	4240      	negs	r0, r0
10002a4a:	e7f1      	b.n	10002a30 <reset_rpi_update+0x56>

10002a4c <reset_rpi_line_assert>:
{
10002a4c:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10002a4e:	2201      	movs	r2, #1
10002a50:	f7ff ffc3 	bl	100029da <reset_rpi_update>
}
10002a54:	bd10      	pop	{r4, pc}

10002a56 <reset_rpi_line_deassert>:
{
10002a56:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10002a58:	2200      	movs	r2, #0
10002a5a:	f7ff ffbe 	bl	100029da <reset_rpi_update>
}
10002a5e:	bd10      	pop	{r4, pc}

10002a60 <reset_rpi_line_toggle>:
{
10002a60:	b570      	push	{r4, r5, r6, lr}
10002a62:	0004      	movs	r4, r0
10002a64:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10002a66:	f7ff fff1 	bl	10002a4c <reset_rpi_line_assert>
	if (ret) {
10002a6a:	2800      	cmp	r0, #0
10002a6c:	d103      	bne.n	10002a76 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10002a6e:	0029      	movs	r1, r5
10002a70:	0020      	movs	r0, r4
10002a72:	f7ff fff0 	bl	10002a56 <reset_rpi_line_deassert>
}
10002a76:	bd70      	pop	{r4, r5, r6, pc}

10002a78 <reset_rpi_status>:
{
10002a78:	0003      	movs	r3, r0
10002a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10002a7c:	685e      	ldr	r6, [r3, #4]
{
10002a7e:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002a80:	7931      	ldrb	r1, [r6, #4]
{
10002a82:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10002a84:	00c9      	lsls	r1, r1, #3
10002a86:	f7fd fbdf 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10002a8a:	aa01      	add	r2, sp, #4
10002a8c:	000d      	movs	r5, r1
10002a8e:	b281      	uxth	r1, r0
10002a90:	0030      	movs	r0, r6
10002a92:	f7ff ff8a 	bl	100029aa <reset_rpi_read_register.isra.0>
	if (ret) {
10002a96:	2800      	cmp	r0, #0
10002a98:	d109      	bne.n	10002aae <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10002a9a:	9b01      	ldr	r3, [sp, #4]
10002a9c:	b2ed      	uxtb	r5, r5
10002a9e:	40eb      	lsrs	r3, r5
10002aa0:	2201      	movs	r2, #1
10002aa2:	439a      	bics	r2, r3
10002aa4:	7973      	ldrb	r3, [r6, #5]
10002aa6:	4259      	negs	r1, r3
10002aa8:	414b      	adcs	r3, r1
10002aaa:	4053      	eors	r3, r2
10002aac:	7023      	strb	r3, [r4, #0]
}
10002aae:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10002ab0 <uart_rpi_poll_in>:
{
10002ab0:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10002ab2:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10002ab4:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002ab6:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10002ab8:	699c      	ldr	r4, [r3, #24]
10002aba:	0020      	movs	r0, r4
10002abc:	4010      	ands	r0, r2
10002abe:	4214      	tst	r4, r2
10002ac0:	d102      	bne.n	10002ac8 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10002ac2:	681b      	ldr	r3, [r3, #0]
10002ac4:	700b      	strb	r3, [r1, #0]
}
10002ac6:	bd10      	pop	{r4, pc}
		return -1;
10002ac8:	2001      	movs	r0, #1
10002aca:	4240      	negs	r0, r0
10002acc:	e7fb      	b.n	10002ac6 <uart_rpi_poll_in+0x16>

10002ace <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002ace:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002ad0:	6843      	ldr	r3, [r0, #4]
10002ad2:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002ad4:	6998      	ldr	r0, [r3, #24]
10002ad6:	4210      	tst	r0, r2
10002ad8:	d1fc      	bne.n	10002ad4 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10002ada:	6019      	str	r1, [r3, #0]
}
10002adc:	4770      	bx	lr

10002ade <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002ade:	6843      	ldr	r3, [r0, #4]
10002ae0:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10002ae2:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10002ae4:	0518      	lsls	r0, r3, #20
10002ae6:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10002ae8:	055a      	lsls	r2, r3, #21
10002aea:	d501      	bpl.n	10002af0 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10002aec:	2208      	movs	r2, #8
10002aee:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10002af0:	059a      	lsls	r2, r3, #22
10002af2:	d501      	bpl.n	10002af8 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10002af4:	2202      	movs	r2, #2
10002af6:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10002af8:	05db      	lsls	r3, r3, #23
10002afa:	d501      	bpl.n	10002b00 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10002afc:	2304      	movs	r3, #4
10002afe:	4318      	orrs	r0, r3
}
10002b00:	4770      	bx	lr

10002b02 <uart_rpi_fifo_fill>:
{
10002b02:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002b04:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b06:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002b08:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002b0a:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002b0c:	699c      	ldr	r4, [r3, #24]
10002b0e:	422c      	tst	r4, r5
10002b10:	d102      	bne.n	10002b18 <uart_rpi_fifo_fill+0x16>
10002b12:	1a14      	subs	r4, r2, r0
10002b14:	2c00      	cmp	r4, #0
10002b16:	dc00      	bgt.n	10002b1a <uart_rpi_fifo_fill+0x18>
}
10002b18:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10002b1a:	5c0c      	ldrb	r4, [r1, r0]
10002b1c:	3001      	adds	r0, #1
10002b1e:	601c      	str	r4, [r3, #0]
10002b20:	e7f4      	b.n	10002b0c <uart_rpi_fifo_fill+0xa>

10002b22 <uart_rpi_fifo_read>:
{
10002b22:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002b24:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b26:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002b28:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10002b2a:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002b2c:	699c      	ldr	r4, [r3, #24]
10002b2e:	422c      	tst	r4, r5
10002b30:	d102      	bne.n	10002b38 <uart_rpi_fifo_read+0x16>
10002b32:	1a14      	subs	r4, r2, r0
10002b34:	2c00      	cmp	r4, #0
10002b36:	dc00      	bgt.n	10002b3a <uart_rpi_fifo_read+0x18>
}
10002b38:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10002b3a:	681c      	ldr	r4, [r3, #0]
10002b3c:	540c      	strb	r4, [r1, r0]
10002b3e:	3001      	adds	r0, #1
10002b40:	e7f4      	b.n	10002b2c <uart_rpi_fifo_read+0xa>

10002b42 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b42:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b44:	6843      	ldr	r3, [r0, #4]
10002b46:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b48:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002b4a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002b4c:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b4e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002b52:	438a      	bics	r2, r1
10002b54:	635a      	str	r2, [r3, #52]	; 0x34
}
10002b56:	4770      	bx	lr

10002b58 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002b58:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b5a:	6843      	ldr	r3, [r0, #4]
10002b5c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002b5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002b60:	438b      	bics	r3, r1
10002b62:	6393      	str	r3, [r2, #56]	; 0x38
}
10002b64:	4770      	bx	lr

10002b66 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002b66:	6843      	ldr	r3, [r0, #4]
10002b68:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10002b6a:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002b6c:	0680      	lsls	r0, r0, #26
10002b6e:	0fc0      	lsrs	r0, r0, #31
}
10002b70:	4770      	bx	lr

10002b72 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b72:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b74:	6843      	ldr	r3, [r0, #4]
10002b76:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b78:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002b7a:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002b7c:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b7e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002b82:	438a      	bics	r2, r1
10002b84:	635a      	str	r2, [r3, #52]	; 0x34
}
10002b86:	4770      	bx	lr

10002b88 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002b88:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b8a:	6843      	ldr	r3, [r0, #4]
10002b8c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002b8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002b90:	438b      	bics	r3, r1
10002b92:	6393      	str	r3, [r2, #56]	; 0x38
}
10002b94:	4770      	bx	lr

10002b96 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002b96:	6843      	ldr	r3, [r0, #4]
10002b98:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10002b9a:	6998      	ldr	r0, [r3, #24]
10002b9c:	0600      	lsls	r0, r0, #24
10002b9e:	0fc0      	lsrs	r0, r0, #31
}
10002ba0:	4770      	bx	lr

10002ba2 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002ba2:	6843      	ldr	r3, [r0, #4]
10002ba4:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10002ba6:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002ba8:	06c0      	lsls	r0, r0, #27
10002baa:	0fc0      	lsrs	r0, r0, #31
}
10002bac:	4770      	bx	lr

10002bae <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002bae:	6843      	ldr	r3, [r0, #4]
10002bb0:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10002bb2:	23f8      	movs	r3, #248	; 0xf8
10002bb4:	6b91      	ldr	r1, [r2, #56]	; 0x38
10002bb6:	00db      	lsls	r3, r3, #3
10002bb8:	430b      	orrs	r3, r1
10002bba:	6393      	str	r3, [r2, #56]	; 0x38
}
10002bbc:	4770      	bx	lr

10002bbe <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10002bbe:	b510      	push	{r4, lr}
10002bc0:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10002bc2:	f7ff ffee 	bl	10002ba2 <uart_rpi_irq_rx_ready>
10002bc6:	0003      	movs	r3, r0
10002bc8:	2001      	movs	r0, #1
10002bca:	2b00      	cmp	r3, #0
10002bcc:	d104      	bne.n	10002bd8 <uart_rpi_irq_is_pending+0x1a>
10002bce:	0020      	movs	r0, r4
10002bd0:	f7ff ffc9 	bl	10002b66 <uart_rpi_irq_tx_ready>
10002bd4:	1e43      	subs	r3, r0, #1
10002bd6:	4198      	sbcs	r0, r3
}
10002bd8:	bd10      	pop	{r4, pc}

10002bda <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10002bda:	2001      	movs	r0, #1
10002bdc:	4770      	bx	lr

10002bde <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10002bde:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10002be0:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10002be2:	60da      	str	r2, [r3, #12]
}
10002be4:	4770      	bx	lr

10002be6 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10002be6:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10002be8:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
10002bea:	6893      	ldr	r3, [r2, #8]
10002bec:	2b00      	cmp	r3, #0
10002bee:	d001      	beq.n	10002bf4 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10002bf0:	68d1      	ldr	r1, [r2, #12]
10002bf2:	4798      	blx	r3
	}
}
10002bf4:	bd10      	pop	{r4, pc}

10002bf6 <uart_rpi_config_get>:
{
10002bf6:	0003      	movs	r3, r0
10002bf8:	b510      	push	{r4, lr}
10002bfa:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
10002bfc:	2208      	movs	r2, #8
10002bfe:	6919      	ldr	r1, [r3, #16]
10002c00:	f7ff fd60 	bl	100026c4 <memcpy>
}
10002c04:	2000      	movs	r0, #0
10002c06:	bd10      	pop	{r4, pc}

10002c08 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10002c08:	b510      	push	{r4, lr}
10002c0a:	2200      	movs	r2, #0
10002c0c:	2103      	movs	r1, #3
10002c0e:	2014      	movs	r0, #20
10002c10:	f7fe f882 	bl	10000d18 <z_arm_irq_priority_set>
10002c14:	2014      	movs	r0, #20
10002c16:	f7fe f873 	bl	10000d00 <arch_irq_enable>
10002c1a:	bd10      	pop	{r4, pc}

10002c1c <uart_rpi_configure>:
{
10002c1c:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
10002c1e:	6843      	ldr	r3, [r0, #4]
{
10002c20:	0006      	movs	r6, r0
10002c22:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
10002c24:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10002c26:	6809      	ldr	r1, [r1, #0]
10002c28:	6818      	ldr	r0, [r3, #0]
10002c2a:	f7fe fdcd 	bl	100017c8 <uart_set_baudrate>
	if (baudrate == 0) {
10002c2e:	2800      	cmp	r0, #0
10002c30:	d102      	bne.n	10002c38 <uart_rpi_configure+0x1c>
		return -EINVAL;
10002c32:	2016      	movs	r0, #22
10002c34:	4240      	negs	r0, r0
}
10002c36:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
10002c38:	79a3      	ldrb	r3, [r4, #6]
10002c3a:	7962      	ldrb	r2, [r4, #5]
10002c3c:	7921      	ldrb	r1, [r4, #4]
10002c3e:	6870      	ldr	r0, [r6, #4]
10002c40:	f7fe fa76 	bl	10001130 <uart_rpi_set_format.isra.0>
10002c44:	2800      	cmp	r0, #0
10002c46:	d1f4      	bne.n	10002c32 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
10002c48:	cc06      	ldmia	r4!, {r1, r2}
10002c4a:	c506      	stmia	r5!, {r1, r2}
	return 0;
10002c4c:	e7f3      	b.n	10002c36 <uart_rpi_configure+0x1a>

10002c4e <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002c4e:	2301      	movs	r3, #1
10002c50:	22d0      	movs	r2, #208	; 0xd0
10002c52:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10002c54:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002c56:	0612      	lsls	r2, r2, #24
10002c58:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002c5a:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10002c5c:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002c5e:	f7fe fd23 	bl	100016a8 <gpio_set_function>
}
10002c62:	bd10      	pop	{r4, pc}

10002c64 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10002c64:	4770      	bx	lr

10002c66 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10002c66:	2800      	cmp	r0, #0
10002c68:	d009      	beq.n	10002c7e <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10002c6a:	2301      	movs	r3, #1
10002c6c:	68c2      	ldr	r2, [r0, #12]
10002c6e:	2000      	movs	r0, #0
10002c70:	7851      	ldrb	r1, [r2, #1]
10002c72:	4219      	tst	r1, r3
10002c74:	d002      	beq.n	10002c7c <z_device_is_ready+0x16>
10002c76:	7810      	ldrb	r0, [r2, #0]
10002c78:	4242      	negs	r2, r0
10002c7a:	4150      	adcs	r0, r2
10002c7c:	4018      	ands	r0, r3
}
10002c7e:	4770      	bx	lr

10002c80 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10002c80:	f3ef 8310 	mrs	r3, PRIMASK
10002c84:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10002c86:	e7fe      	b.n	10002c86 <arch_system_halt+0x6>

10002c88 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10002c88:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10002c8a:	f7ff fff9 	bl	10002c80 <arch_system_halt>

10002c8e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002c90:	0005      	movs	r5, r0
10002c92:	000e      	movs	r6, r1
10002c94:	f3ef 8710 	mrs	r7, PRIMASK
10002c98:	b672      	cpsid	i
	return z_impl_z_current_get();
10002c9a:	f7ff f9c7 	bl	1000202c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10002c9e:	0031      	movs	r1, r6
10002ca0:	0004      	movs	r4, r0
10002ca2:	0028      	movs	r0, r5
10002ca4:	f7ff fff0 	bl	10002c88 <k_sys_fatal_error_handler>
	if (key != 0U) {
10002ca8:	2f00      	cmp	r7, #0
10002caa:	d102      	bne.n	10002cb2 <z_fatal_error+0x24>
	__asm__ volatile(
10002cac:	b662      	cpsie	i
10002cae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10002cb2:	0020      	movs	r0, r4
10002cb4:	f7fe f98a 	bl	10000fcc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10002cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10002cba <z_early_memset>:
{
10002cba:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10002cbc:	f7ff fd0b 	bl	100026d6 <memset>
}
10002cc0:	bd10      	pop	{r4, pc}

10002cc2 <z_early_memcpy>:
{
10002cc2:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10002cc4:	f7ff fcfe 	bl	100026c4 <memcpy>
}
10002cc8:	bd10      	pop	{r4, pc}

10002cca <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10002cca:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002ccc:	f3ef 8310 	mrs	r3, PRIMASK
10002cd0:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10002cd2:	f7fe f80d 	bl	10000cf0 <arch_cpu_idle>
10002cd6:	e7f9      	b.n	10002ccc <idle+0x2>

10002cd8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10002cd8:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002cda:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10002cdc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002cde:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002ce0:	2300      	movs	r3, #0
10002ce2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002ce4:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10002ce6:	4770      	bx	lr

10002ce8 <unpend_thread_no_timeout>:
{
10002ce8:	b510      	push	{r4, lr}
10002cea:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10002cec:	f7ff fff4 	bl	10002cd8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10002cf0:	2202      	movs	r2, #2
10002cf2:	7b63      	ldrb	r3, [r4, #13]
10002cf4:	4393      	bics	r3, r2
10002cf6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10002cf8:	2300      	movs	r3, #0
10002cfa:	60a3      	str	r3, [r4, #8]
}
10002cfc:	bd10      	pop	{r4, pc}

10002cfe <add_to_waitq_locked>:
{
10002cfe:	b570      	push	{r4, r5, r6, lr}
10002d00:	0004      	movs	r4, r0
10002d02:	000d      	movs	r5, r1
	unready_thread(thread);
10002d04:	f7ff f88c 	bl	10001e20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10002d08:	2302      	movs	r3, #2
10002d0a:	7b62      	ldrb	r2, [r4, #13]
10002d0c:	4313      	orrs	r3, r2
10002d0e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10002d10:	2d00      	cmp	r5, #0
10002d12:	d01c      	beq.n	10002d4e <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
10002d14:	60a5      	str	r5, [r4, #8]
	return list->head == list;
10002d16:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002d18:	429d      	cmp	r5, r3
10002d1a:	d109      	bne.n	10002d30 <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
10002d1c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10002d1e:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10002d20:	6063      	str	r3, [r4, #4]
	tail->next = node;
10002d22:	601c      	str	r4, [r3, #0]
	list->tail = node;
10002d24:	606c      	str	r4, [r5, #4]
}
10002d26:	e012      	b.n	10002d4e <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
10002d28:	686a      	ldr	r2, [r5, #4]
10002d2a:	4293      	cmp	r3, r2
10002d2c:	d0f6      	beq.n	10002d1c <add_to_waitq_locked+0x1e>
10002d2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002d30:	2b00      	cmp	r3, #0
10002d32:	d0f3      	beq.n	10002d1c <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
10002d34:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
10002d36:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
10002d38:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
10002d3a:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10002d3c:	428a      	cmp	r2, r1
10002d3e:	d0f3      	beq.n	10002d28 <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002d40:	4291      	cmp	r1, r2
10002d42:	ddf1      	ble.n	10002d28 <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
10002d44:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10002d46:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10002d48:	6062      	str	r2, [r4, #4]
	prev->next = node;
10002d4a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10002d4c:	605c      	str	r4, [r3, #4]
}
10002d4e:	bd70      	pop	{r4, r5, r6, pc}

10002d50 <z_ready_thread>:
{
10002d50:	b510      	push	{r4, lr}
10002d52:	f3ef 8410 	mrs	r4, PRIMASK
10002d56:	b672      	cpsid	i
			ready_thread(thread);
10002d58:	f7ff f82c 	bl	10001db4 <ready_thread>
	if (key != 0U) {
10002d5c:	2c00      	cmp	r4, #0
10002d5e:	d102      	bne.n	10002d66 <z_ready_thread+0x16>
	__asm__ volatile(
10002d60:	b662      	cpsie	i
10002d62:	f3bf 8f6f 	isb	sy
}
10002d66:	bd10      	pop	{r4, pc}

10002d68 <z_sched_wake_thread>:
{
10002d68:	b570      	push	{r4, r5, r6, lr}
10002d6a:	0004      	movs	r4, r0
10002d6c:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10002d6e:	f3ef 8510 	mrs	r5, PRIMASK
10002d72:	b672      	cpsid	i
		if (!killed) {
10002d74:	2328      	movs	r3, #40	; 0x28
10002d76:	7b42      	ldrb	r2, [r0, #13]
10002d78:	421a      	tst	r2, r3
10002d7a:	d10e      	bne.n	10002d9a <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10002d7c:	6883      	ldr	r3, [r0, #8]
10002d7e:	2b00      	cmp	r3, #0
10002d80:	d001      	beq.n	10002d86 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
10002d82:	f7ff ffb1 	bl	10002ce8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002d86:	2204      	movs	r2, #4
10002d88:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10002d8a:	2e00      	cmp	r6, #0
10002d8c:	d000      	beq.n	10002d90 <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10002d8e:	2214      	movs	r2, #20
10002d90:	4393      	bics	r3, r2
			ready_thread(thread);
10002d92:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002d94:	7363      	strb	r3, [r4, #13]
10002d96:	f7ff f80d 	bl	10001db4 <ready_thread>
	if (key != 0U) {
10002d9a:	2d00      	cmp	r5, #0
10002d9c:	d102      	bne.n	10002da4 <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10002d9e:	b662      	cpsie	i
10002da0:	f3bf 8f6f 	isb	sy
}
10002da4:	bd70      	pop	{r4, r5, r6, pc}

10002da6 <z_thread_timeout>:
{
10002da6:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10002da8:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10002daa:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10002dac:	f7ff ffdc 	bl	10002d68 <z_sched_wake_thread>
}
10002db0:	bd10      	pop	{r4, pc}

10002db2 <z_unpend_first_thread>:
{
10002db2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002db4:	f3ef 8510 	mrs	r5, PRIMASK
10002db8:	b672      	cpsid	i
	return list->head == list;
10002dba:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002dbc:	42a0      	cmp	r0, r4
10002dbe:	d00f      	beq.n	10002de0 <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
10002dc0:	2c00      	cmp	r4, #0
10002dc2:	d006      	beq.n	10002dd2 <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
10002dc4:	0020      	movs	r0, r4
10002dc6:	f7ff ff8f 	bl	10002ce8 <unpend_thread_no_timeout>
10002dca:	0020      	movs	r0, r4
10002dcc:	3018      	adds	r0, #24
10002dce:	f000 f81e 	bl	10002e0e <z_abort_timeout>
	if (key != 0U) {
10002dd2:	2d00      	cmp	r5, #0
10002dd4:	d102      	bne.n	10002ddc <z_unpend_first_thread+0x2a>
	__asm__ volatile(
10002dd6:	b662      	cpsie	i
10002dd8:	f3bf 8f6f 	isb	sy
}
10002ddc:	0020      	movs	r0, r4
10002dde:	bd70      	pop	{r4, r5, r6, pc}
10002de0:	2400      	movs	r4, #0
10002de2:	e7f6      	b.n	10002dd2 <z_unpend_first_thread+0x20>

10002de4 <z_reschedule_irqlock>:
{
10002de4:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002de6:	2800      	cmp	r0, #0
10002de8:	d105      	bne.n	10002df6 <z_reschedule_irqlock+0x12>
10002dea:	f3ef 8005 	mrs	r0, IPSR
10002dee:	2800      	cmp	r0, #0
10002df0:	d102      	bne.n	10002df8 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10002df2:	f7fd ffd3 	bl	10000d9c <arch_swap>
}
10002df6:	bd10      	pop	{r4, pc}
10002df8:	b662      	cpsie	i
10002dfa:	f3bf 8f6f 	isb	sy
10002dfe:	e7fa      	b.n	10002df6 <z_reschedule_irqlock+0x12>

10002e00 <z_reschedule_unlocked>:
{
10002e00:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002e02:	f3ef 8010 	mrs	r0, PRIMASK
10002e06:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002e08:	f7ff ffec 	bl	10002de4 <z_reschedule_irqlock>
}
10002e0c:	bd10      	pop	{r4, pc}

10002e0e <z_abort_timeout>:
{
10002e0e:	b510      	push	{r4, lr}
10002e10:	f3ef 8410 	mrs	r4, PRIMASK
10002e14:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10002e16:	6803      	ldr	r3, [r0, #0]
10002e18:	2b00      	cmp	r3, #0
10002e1a:	d008      	beq.n	10002e2e <z_abort_timeout+0x20>
			remove_timeout(to);
10002e1c:	f7ff f9b0 	bl	10002180 <remove_timeout>
			ret = 0;
10002e20:	2000      	movs	r0, #0
	if (key != 0U) {
10002e22:	2c00      	cmp	r4, #0
10002e24:	d102      	bne.n	10002e2c <z_abort_timeout+0x1e>
	__asm__ volatile(
10002e26:	b662      	cpsie	i
10002e28:	f3bf 8f6f 	isb	sy
}
10002e2c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10002e2e:	2016      	movs	r0, #22
10002e30:	4240      	negs	r0, r0
10002e32:	e7f6      	b.n	10002e22 <z_abort_timeout+0x14>

10002e34 <k_heap_init>:
	sys_dlist_init(&w->waitq);
10002e34:	0003      	movs	r3, r0
{
10002e36:	b510      	push	{r4, lr}
10002e38:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
10002e3a:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
10002e3c:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
10002e3e:	f7ff fb5f 	bl	10002500 <sys_heap_init>
}
10002e42:	bd10      	pop	{r4, pc}
